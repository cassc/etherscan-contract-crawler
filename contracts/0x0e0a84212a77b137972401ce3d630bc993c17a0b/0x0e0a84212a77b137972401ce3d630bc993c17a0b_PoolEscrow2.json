{"SourceCode": "{\"AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./StringsUpgradeable.sol\\\";\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn\\u0027t allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address =\\u003e bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"},\"ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value \\u003e 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\n     * given ``owner``\\u0027s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\nimport {IERC20MetadataUpgradeable} from \\\"./IERC20MetadataUpgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface IERC20 is IERC20MetadataUpgradeable, IERC20PermitUpgradeable {\\n}\\n\\ninterface IERC20B is IERC20 {\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\"},\"IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it\\u0027s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall \\u0026\\u0026 _initialized \\u003c 1) || (!AddressUpgradeable.isContract(address(this)) \\u0026\\u0026 _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn\\u0027t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing \\u0026\\u0026 _initialized \\u003c version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized \\u003c type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"},\"IPoolEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\nimport {IERC165Upgradeable} from \\\"./IERC165Upgradeable.sol\\\";\\n\\ninterface IPoolEscrow is IERC165Upgradeable {\\n    /**\\n     * @notice Used to store requests that cannot be processed and\\n     * withdrawn instantly and require an off-chain action.  Those\\n     * requests can be later withdrawn using the `withdraw()`\\n     * function.\\n     */\\n    struct WithdrawalRequest {\\n        /**\\n         * @notice The total amount of ETH requested at the time of\\n         * request.\\n         */\\n        uint256 totalRequested;\\n        /**\\n         * @notice Here\\u0027s how these are computed at the time of\\n         *         the request:\\n         *           a) grossPayment = sETH + rETH\\n         *           b) netPayment = grossPayment - fee\\n         *           c) deferredPayment = netPayment - immediatePayment\\n         */\\n        uint256 deferredPayment;\\n        address beneficiary;\\n    }\\n\\n    // +-------------------+\\n    // | Events on request |\\n    // +-------------------+\\n\\n    /**\\n     * @notice Emitted when a request is processed immediately.  No\\n     * `requests` entry is created in this case.\\n     *\\n     * netPayment\\n     *     = (sETH + rETH) - fee\\n     *     = immediatePayment\\n     */\\n    event InstantWithdrawalCompleted(\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 immediatePayment, // Equal to netPayment.\\n        address indexed beneficiary\\n    );\\n\\n    /*\\n     * @notice Emitted when a request can be processed partially\\n     * immediately and there\\u0027s a deferred payment that requires\\n     * further off-chain action.\\n     *\\n     * netPayment\\n     *     = (sETH + rETH) - fee\\n     *     = immediatePayment + deferredPayment\\n     */\\n    // prettier-ignore\\n    event PartialWithdrawalRequested(\\n        uint256 requestIndex,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 immediatePayment,   // How much is sent at the time of request.\\n        uint256 deferredPayment,    // How much to be withdraw()n.\\n        uint256 pending,            // Total pending at the time of request.\\n        address indexed beneficiary // Who to pay.\\n    );\\n\\n    /**\\n     * @notice Emitted when a request that cannot be processed\\n     * immediately is submitted.  A further off-chain action is\\n     * required to process the request and unlock the funds, which\\n     * then can be withdrawn using the `withdraw()` function.\\n     *\\n     * netPayment\\n     *     = (sETH + rETH) - fee\\n     *     = deferredPayment\\n     */\\n    // prettier-ignore\\n    event DeferredWithdrawalRequested(\\n        uint256 requestIndex,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 deferredPayment,    // Equal to netPayment.\\n        uint256 pending,            // Total pending at the time of request.\\n        address indexed beneficiary // Who to pay.\\n    );\\n\\n    // +-----------------------+\\n    // | Configuration updates |\\n    // +-----------------------+\\n\\n    event MinImmediatePaymentUpdated(uint256 oldMIP, uint256 newMIP);\\n\\n    event WithdrawalFeeUpdated(uint256 oldFee, uint256 newFee);\\n\\n    // +------+\\n    // | Misc |\\n    // +------+\\n\\n    /**\\n     * @notice Emitted when fees are collected from the contract.\\n     *\\n     * @param collected The amount of `uncolectedFees` transferred\\n     *                  with this transaction.\\n     *\\n     * @param remaining The remaining amount of `uncollectedFees` in\\n     *                  the contract.\\n     *\\n     * @param collector The address of the account that collected the\\n     *                  fees.\\n     */\\n    event FeesCollected(uint256 collected, uint256 remaining, address collector);\\n\\n    event WithdrawalCompleted(\\n        uint256 requestIndex,\\n        uint256 deferredPayment,\\n        address indexed beneficiary\\n    );\\n\\n    /**\\n     * @notice Indicates that withdrawal requests in the range\\n     * [begin;end) have been processed and now can be claimed using\\n     * the withdraw(requestIndex) user function.\\n     */\\n    // prettier-ignore\\n    event RequestsProcessed(\\n        uint256 value,          // How much is sent with the tx.\\n        uint256 begin,          // Inclusive bound of newly processed requests.\\n        uint256 end,            // Exclusive bound of newly processed requests.\\n        address indexed sender  // Caller of the processRequests() fn.\\n    );\\n\\n    event Restaked(uint256 value, address sender);\\n\\n    // +-------------------------+\\n    // | Initializable constants |\\n    // +-------------------------+\\n\\n    function pool() external view returns (address);\\n\\n    function stakedEthToken() external view returns (address);\\n\\n    function rewardEthToken() external view returns (address);\\n\\n    // +------------------------+\\n    // | Configurable variables |\\n    // +------------------------+\\n\\n    function minImmediatePayment() external view returns (uint256);\\n\\n    function withdrawalFee() external view returns (uint256);\\n\\n    // +-----------------+\\n    // | State variables |\\n    // +-----------------+\\n\\n    function numProcessedRequests() external view returns (uint256);\\n\\n    function totalRequested() external view returns (uint256);\\n\\n    function totalWithdrawn() external view returns (uint256);\\n\\n    function uncollectedFees() external view returns (uint256);\\n\\n    function requests(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            /* totalRequested */ uint256,\\n            /* deferredPayment */ uint256,\\n            /* beneficiary */ address\\n        );\\n\\n    // +--------+\\n    // | System |\\n    // +--------+\\n\\n    function initialize(address pool, address stakedEthToken, address rewardEthToken) external; // initializer\\n\\n    function collectFees() external; // onlyAdmin\\n\\n    function pause() external; // onlyAdmin\\n\\n    function unpause() external; // onlyAdmin\\n\\n    // grantRole() overriden from AccessControlUpgradeable\\n    // revokeRole() overriden from AccessControlUpgradeable\\n    // renounceRole() overriden from AccessControlUpgradeable\\n\\n    function transferAdminRole(address account) external; // onlyAdmin\\n\\n    function setMinImmediatePayment(uint256 value) external; // onlyAdmin\\n\\n    function setWithdrawalFee(uint256 fee) external; // onlyAdmin\\n\\n    // prettier-ignore\\n    function permitRequestFrom(\\n        address owner,\\n        uint deadline,\\n        uint8 sv, bytes32 sr, bytes32 ss,\\n        uint8 rv, bytes32 rr, bytes32 rs,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount\\n    ) external; // onlyRequester\\n\\n    function requestFrom(\\n        address beneficiary,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount\\n    ) external; // onlyRequester whenNotPaused\\n\\n    function restake(uint256 value) external; // onlyPooler\\n\\n    function restakeAll() external; // onlyPooler\\n\\n    // +--------+\\n    // | Public |\\n    // +--------+\\n\\n    function processRequests(uint256 newNPR) external payable;\\n\\n    receive() external payable;\\n\\n    // prettier-ignore\\n    function permitTransfers(\\n        address owner,\\n        uint deadline,\\n        uint8 sv, bytes32 sr, bytes32 ss,\\n        uint8 rv, bytes32 rr, bytes32 rs\\n    ) external;\\n\\n    function request(uint256 stakedEthAmount, uint256 rewardEthAmount) external; // whenNotPaused\\n\\n    function withdraw(uint256 requestIndex) external; // whenNotPaused\\n\\n    // +-------+\\n    // | Views |\\n    // +-------+\\n\\n    function queueSize() external view returns (uint256);\\n\\n    function nextRequestIndex() external view returns (uint256);\\n\\n    function pending() external view returns (uint256);\\n\\n    function availableBalance() external view returns (uint256);\\n}\\n\"},\"IPoolEscrow2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\nimport {IERC165Upgradeable} from \\\"./IERC165Upgradeable.sol\\\";\\n\\ninterface IPoolEscrow2 is IERC165Upgradeable {\\n    /**\\n     * @notice Used to store requests that cannot be processed and\\n     * withdrawn instantly and require an off-chain action.  Those\\n     * requests can be later withdrawn using the `withdraw()`\\n     * function.\\n     */\\n    struct WithdrawalRequest {\\n        /**\\n         * @notice The total amount of ETH requested at the time of\\n         * request.\\n         */\\n        uint256 totalRequested;\\n        /**\\n         * @notice Here\\u0027s how these are computed at the time of\\n         *         the request:\\n         *           a) grossPayment = sETH + rETH\\n         *           b) netPayment = grossPayment - fee\\n         *           c) deferredPayment = netPayment - immediatePayment\\n         */\\n        uint256 deferredPayment;\\n        address beneficiary;\\n    }\\n\\n    // +-------------------+\\n    // | Events on request |\\n    // +-------------------+\\n\\n    /**\\n     * @notice Emitted when a request is processed immediately.  No\\n     * `requests` entry is created in this case.\\n     *\\n     * netPayment\\n     *     = (sETH + rETH) - fee\\n     *     = immediatePayment\\n     */\\n    event InstantWithdrawalCompleted(\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 immediatePayment, // Equal to netPayment.\\n        address indexed beneficiary\\n    );\\n\\n    /*\\n     * @notice Emitted when a request can be processed partially\\n     * immediately and there\\u0027s a deferred payment that requires\\n     * further off-chain action.\\n     *\\n     * netPayment\\n     *     = (sETH + rETH) - fee\\n     *     = immediatePayment + deferredPayment\\n     */\\n    // prettier-ignore\\n    event PartialWithdrawalRequested(\\n        uint256 requestIndex,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 immediatePayment,   // How much is sent at the time of request.\\n        uint256 deferredPayment,    // How much to be withdraw()n.\\n        uint256 pending,            // Total pending at the time of request.\\n        address indexed beneficiary // Who to pay.\\n    );\\n\\n    /**\\n     * @notice Emitted when a request that cannot be processed\\n     * immediately is submitted.  A further off-chain action is\\n     * required to process the request and unlock the funds, which\\n     * then can be withdrawn using the `withdraw()` function.\\n     *\\n     * netPayment\\n     *     = (sETH + rETH) - fee\\n     *     = deferredPayment\\n     */\\n    // prettier-ignore\\n    event DeferredWithdrawalRequested(\\n        uint256 requestIndex,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 deferredPayment,    // Equal to netPayment.\\n        uint256 pending,            // Total pending at the time of request.\\n        address indexed beneficiary // Who to pay.\\n    );\\n\\n    // +-----------------------+\\n    // | Configuration updates |\\n    // +-----------------------+\\n\\n    event MinImmediatePaymentUpdated(uint256 oldMIP, uint256 newMIP);\\n\\n    event WithdrawalFeeUpdated(uint256 oldFee, uint256 newFee);\\n\\n    // +------+\\n    // | Misc |\\n    // +------+\\n\\n    /**\\n     * @notice Emitted when fees are collected from the contract.\\n     *\\n     * @param collected The amount of `uncolectedFees` transferred\\n     *                  with this transaction.\\n     *\\n     * @param remaining The remaining amount of `uncollectedFees` in\\n     *                  the contract.\\n     *\\n     * @param collector The address of the account that collected the\\n     *                  fees.\\n     */\\n    event FeesCollected(uint256 collected, uint256 remaining, address collector);\\n\\n    event WithdrawalCompleted(\\n        uint256 requestIndex,\\n        uint256 deferredPayment,\\n        address indexed beneficiary\\n    );\\n\\n    /**\\n     * @notice Indicates that withdrawal requests in the range\\n     * [begin;end) have been processed and now can be claimed using\\n     * the withdraw(requestIndex) user function.\\n     */\\n    // prettier-ignore\\n    event RequestsProcessed(\\n        uint256 value,          // How much is sent with the tx.\\n        uint256 begin,          // Inclusive bound of newly processed requests.\\n        uint256 end,            // Exclusive bound of newly processed requests.\\n        address indexed sender  // Caller of the processRequests() fn.\\n    );\\n\\n    event Restaked(uint256 value, address sender);\\n\\n    // +-------------------------+\\n    // | Initializable constants |\\n    // +-------------------------+\\n\\n    function pool() external view returns (address);\\n\\n    function stakedEthToken() external view returns (address);\\n\\n    function rewardEthToken() external view returns (address);\\n\\n    // +------------------------+\\n    // | Configurable variables |\\n    // +------------------------+\\n\\n    function minImmediatePayment() external view returns (uint256);\\n\\n    function withdrawalFee() external view returns (uint256);\\n\\n    // +-----------------+\\n    // | State variables |\\n    // +-----------------+\\n\\n    function numProcessedRequests() external view returns (uint256);\\n\\n    function totalRequested() external view returns (uint256);\\n\\n    function totalWithdrawn() external view returns (uint256);\\n\\n    function uncollectedFees() external view returns (uint256);\\n\\n    function requests(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            /* totalRequested */ uint256,\\n            /* deferredPayment */ uint256,\\n            /* beneficiary */ address\\n        );\\n\\n    // +--------+\\n    // | System |\\n    // +--------+\\n\\n    function initialize(address pool, address stakedEthToken, address rewardEthToken) external; // initializer\\n\\n    function initialize2() external; // reinitializer(2)\\n\\n    function collectFees() external; // onlyAdmin\\n\\n    function pause() external; // onlyAdmin\\n\\n    function unpause() external; // onlyAdmin\\n\\n    // grantRole() overriden from AccessControlUpgradeable\\n    // revokeRole() overriden from AccessControlUpgradeable\\n    // renounceRole() overriden from AccessControlUpgradeable\\n\\n    function transferAdminRole(address account) external; // onlyAdmin\\n\\n    function setMinImmediatePayment(uint256 value) external; // onlyAdmin\\n\\n    function setWithdrawalFee(uint256 fee) external; // onlyAdmin\\n\\n    // prettier-ignore\\n    function permitRequestFrom(\\n        address owner,\\n        uint deadline,\\n        uint8 sv, bytes32 sr, bytes32 ss,\\n        uint8 rv, bytes32 rr, bytes32 rs,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount\\n    ) external; // onlyRequester\\n\\n    function requestFrom(\\n        address beneficiary,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount\\n    ) external; // onlyRequester whenNotPaused\\n\\n    function restake(uint256 value) external; // onlyPooler\\n\\n    function restakeAll() external; // onlyPooler\\n\\n    // +--------+\\n    // | Public |\\n    // +--------+\\n\\n    function processRequests(uint256 newNPR) external payable;\\n\\n    receive() external payable;\\n\\n    // prettier-ignore\\n    function permitTransfers(\\n        address owner,\\n        uint deadline,\\n        uint8 sv, bytes32 sr, bytes32 ss,\\n        uint8 rv, bytes32 rr, bytes32 rs\\n    ) external;\\n\\n    function request(uint256 stakedEthAmount, uint256 rewardEthAmount) external; // whenNotPaused\\n\\n    function withdraw(uint256 requestIndex) external; // whenNotPaused\\n\\n    // +-------+\\n    // | Views |\\n    // +-------+\\n\\n    function queueSize() external view returns (uint256);\\n\\n    function nextRequestIndex() external view returns (uint256);\\n\\n    function pending() external view returns (uint256);\\n\\n    function availableBalance() external view returns (uint256);\\n}\\n\"},\"MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a \\u0026 b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator \\u003e prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \\u003e= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator \\u0026 (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\\u0027s lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don\\u0027t need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up \\u0026\\u0026 mulmod(x, y, denominator) \\u003e 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.\\u0027s \\\"Hacker\\u0027s Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) \\u003c= a \\u003c 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) \\u003c= a \\u003c 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) \\u003c= sqrt(a) \\u003c sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) \\u003c= sqrt(a) \\u003c 2**((k+1)/2) \\u003c= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 \\u003c\\u003c (log2(a) \\u003e\\u003e 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton\\u0027s method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 result * result \\u003c a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 128;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 64;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 32;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                value \\u003e\\u003e= 8;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 4 \\u003e 0) {\\n                value \\u003e\\u003e= 4;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 2 \\u003e 0) {\\n                value \\u003e\\u003e= 2;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 1 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value \\u003e= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value \\u003e= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value \\u003e= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value \\u003e= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value \\u003e= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value \\u003e= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 10**result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c (result * 8) \\u003c value ? 1 : 0);\\n        }\\n    }\\n}\\n\"},\"PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"PoolEscrow2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.16;\\n\\nimport {AccessControlUpgradeable} from \\\"./AccessControlUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"./AddressUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"./CountersUpgradeable.sol\\\";\\nimport {IERC165Upgradeable} from \\\"./IERC165Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"./PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"./ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IPoolEscrow} from \\\"./IPoolEscrow.sol\\\";\\nimport {IPoolEscrow2} from \\\"./IPoolEscrow2.sol\\\";\\nimport {IERC20, IERC20B} from \\\"./IERC20.sol\\\";\\n\\ncontract PoolEscrow2 is\\n    IPoolEscrow2,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using AddressUpgradeable for address payable;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    // Reserve some space in case we need to inherit additional\\n    // classes in the future.\\n    uint256[1024] private __gap;\\n\\n    bytes32 public constant POOLER_ROLE = keccak256(\\\"PoolEscrow::POOLER_ROLE\\\");\\n    bytes32 public constant REQUESTER_ROLE = keccak256(\\\"PoolEscrow::REQUESTER_ROLE\\\");\\n    uint256 public constant HUNDRED_BP = 10000;\\n\\n    // +-------------------------+\\n    // | Initializable constants |\\n    // +-------------------------+\\n\\n    address public pool;\\n    address public stakedEthToken;\\n    address public rewardEthToken;\\n\\n    // +--------------+\\n    // | Configurable |\\n    // +--------------+\\n\\n    /**\\n     * @notice If the available balance is below this amount,\\n     * immediate payments will not be paid, and a withdrawal request\\n     * will be created instead.\\n     */\\n    uint256 public minImmediatePayment;\\n\\n    /**\\n     * @notice The withdrawal fee is represented in base points.\\n     *\\n     *     1 ==   0.01%\\n     *   100 ==   1.00%\\n     * 10000 == 100.00%\\n     */\\n    uint256 public withdrawalFee;\\n\\n    // +----------------+\\n    // | Contract state |\\n    // +----------------+\\n\\n    /**\\n     * @dev Requests are identified by sequential numbers issued at\\n     * the time of the request.  This counter always holds the number\\n     * of the next request index.  It\\u0027s private, but the contract\\n     * provides its current value via the `nextRequestIndex()`\\n     * function.\\n     */\\n    CountersUpgradeable.Counter private _counter;\\n\\n    /**\\n     * @notice `numProcessedRequests` holds the number of processed\\n     * requests so far.  Since requests are sequential and indexed,\\n     * that means all requests with indices in the range\\n     * [0;numProcessedRequests) are eligible to be withdrawn.\\n     *\\n     * Withdrawal requests with an index \\u003e= `numProcessedRequests`\\n     * need to wait until additional funds become available and\\n     * `numProcessedRequests` is bumped.\\n     */\\n    uint256 public numProcessedRequests;\\n\\n    /**\\n     * @notice The total amount of ETH requested for withdrawal.\\n     */\\n    uint256 public totalRequested;\\n\\n    /**\\n     * @notice The total amount of ETH withdrawn and sent to clients.\\n     */\\n    uint256 public totalWithdrawn;\\n\\n    /**\\n     * @notice Holds the total amount of fees that are generated by\\n     * the contract, but are still not collected.\\n     */\\n    uint256 public uncollectedFees;\\n\\n    /**\\n     * @notice `requests` maps a ticket number to the respective\\n     * withdrawal request.  Entires get deleted on successful\\n     * withdrawals.\\n     */\\n    mapping(uint256 /* ticket */ =\\u003e WithdrawalRequest) public requests;\\n\\n    // +-----------+\\n    // | Modifiers |\\n    // +-----------+\\n\\n    modifier onlyAdmin() {\\n        _checkRole(DEFAULT_ADMIN_ROLE);\\n        _;\\n    }\\n\\n    modifier onlyPooler() {\\n        _checkRole(POOLER_ROLE);\\n        _;\\n    }\\n\\n    modifier onlyRequester() {\\n        _checkRole(REQUESTER_ROLE);\\n        _;\\n    }\\n\\n    // +--------+\\n    // | System |\\n    // +--------+\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address pool_,\\n        address stakedEthToken_,\\n        address rewardEthToken_\\n    ) external override initializer {\\n        // Call super constructors:\\n        //\\n        // Initializable has no constructor.\\n        // ContextUpgradeable has no constructor.\\n        __ERC165_init(); // Empty.\\n        __AccessControl_init(); // Empty.\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        // Check and assign addresses.\\n        require(pool_ != address(0), \\\"invalid pool address\\\");\\n        require(stakedEthToken_ != address(0), \\\"invalid sETH address\\\");\\n        require(rewardEthToken_ != address(0), \\\"invalid rETH address\\\");\\n        pool = pool_;\\n        stakedEthToken = stakedEthToken_;\\n        rewardEthToken = rewardEthToken_;\\n\\n        // Since this is an upgradeable contract, let\\u0027s set all\\n        // stateful variables to zero.\\n        minImmediatePayment = 0;\\n        withdrawalFee = 0;\\n        _counter.reset();\\n        numProcessedRequests = 0;\\n        totalRequested = 0;\\n        totalWithdrawn = 0;\\n\\n        // Assign the admin role.\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        // Initial configuration.\\n        setWithdrawalFee(0);\\n        setMinImmediatePayment(1 ether);\\n    }\\n\\n    function initialize2() external override reinitializer(2) {\\n        uint256 balance = IERC20B(stakedEthToken).balanceOf(address(this));\\n        if (balance \\u003e 0 wei) {\\n            IERC20B(stakedEthToken).burn(balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect the uncollected fees from the contract and\\n     * transfer them to the caller.\\n     *\\n     * @custom:emit FeesCollected\\n     */\\n    function collectFees() external override onlyAdmin {\\n        uint256 value = availableBalance();\\n        if (value \\u003e uncollectedFees) {\\n            value = uncollectedFees;\\n        }\\n        require(value \\u003e 0, \\\"no uncollected fees or balance\\\");\\n        uncollectedFees -= value;\\n        emit FeesCollected(value, uncollectedFees, _msgSender());\\n        payable(_msgSender()).sendValue(value);\\n    }\\n\\n    /**\\n     * @notice Pause withdrawal requests (but not withdrawals).  This\\n     * function is meant to be used when adding new features to the\\n     * smart contract.\\n     */\\n    function pause() external override onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(role != DEFAULT_ADMIN_ROLE, \\\"cannot grant admin role\\\");\\n        super.grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(role != DEFAULT_ADMIN_ROLE, \\\"cannot revoke admin role\\\");\\n        super.revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(role != DEFAULT_ADMIN_ROLE, \\\"cannot renounce admin role\\\");\\n        super.renounceRole(role, account);\\n    }\\n\\n    function transferAdminRole(address account) external virtual override onlyAdmin {\\n        require(account != address(0), \\\"invalid address\\\");\\n        super.grantRole(DEFAULT_ADMIN_ROLE, account);\\n        super.renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @custom:emit MinImmediatePaymentUpdated\\n     */\\n    function setMinImmediatePayment(uint256 value) public override onlyAdmin {\\n        if (minImmediatePayment != value) {\\n            emit MinImmediatePaymentUpdated(minImmediatePayment, value);\\n            minImmediatePayment = value;\\n        }\\n    }\\n\\n    /**\\n     * @custom:revert If fee is out of [0;10000).\\n     *\\n     * @custom:emit WithdrawalFeeUpdated\\n     */\\n    function setWithdrawalFee(uint256 fee) public override onlyAdmin {\\n        require(fee \\u003c HUNDRED_BP, \\\"fee out of [0;10000)\\\");\\n        if (withdrawalFee != fee) {\\n            emit WithdrawalFeeUpdated(withdrawalFee, fee);\\n            withdrawalFee = fee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Combines `permitTransfers()` and `requestFrom()`.\\n     */\\n    // prettier-ignore\\n    function permitRequestFrom(\\n        address owner,\\n        uint deadline,\\n        uint8 sv, bytes32 sr, bytes32 ss,\\n        uint8 rv, bytes32 rr, bytes32 rs,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount\\n    ) external override onlyRequester {\\n        permitTransfers(owner, deadline, sv, sr, ss, rv, rr, rs);\\n        _requestFrom(owner, stakedEthAmount, rewardEthAmount);\\n    }\\n\\n    /**\\n     * @notice Enables contract administration to make withdrawal\\n     * requests on behalf of clients and pay for the gas instead of\\n     * them.\\n     */\\n    function requestFrom(\\n        address beneficiary,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount\\n    ) external override onlyRequester {\\n        _requestFrom(beneficiary, stakedEthAmount, rewardEthAmount);\\n    }\\n\\n    function restake(uint256 value) external override onlyPooler {\\n        require(value \\u003c= availableBalance(), \\\"balance not enough to restake\\\");\\n        emit Restaked(value, _msgSender());\\n        payable(pool).sendValue(value); // Calls Pool.stake().\\n    }\\n\\n    function restakeAll() external override onlyPooler {\\n        uint256 value = availableBalance();\\n        emit Restaked(value, _msgSender());\\n        payable(pool).sendValue(value); // Calls Pool.stake().\\n    }\\n\\n    // +--------+\\n    // | Public |\\n    // +--------+\\n\\n    /**\\n     * @notice `processRequest` unlocks withdrawal requests up to the\\n     * given number of processed requests, i.e. in the range\\n     * [0;newNPR).\\n     *\\n     * See `numProcessedRequests` for more information on that.\\n     *\\n     * @custom:revert If `newNPR` is out of the expected bounds.\\n     * @custom:revert If `newNPR` is in bounds, but available balance\\n     *                doesn\\u0027t cover all pending withdrawal requests.\\n     *\\n     * @custom:emit RequestsProcessed\\n     */\\n    function processRequests(uint256 newNPR) external payable override whenNotPaused {\\n        // Check request number validity.\\n        uint256 boundary = nextRequestIndex();\\n        require(\\n            numProcessedRequests \\u003c newNPR \\u0026\\u0026 newNPR \\u003c= boundary,\\n            \\\"newNPR out of expected bounds\\\"\\n        );\\n\\n        // We expect the current balance to cover all pending\\n        // withdrawals in the range [0;newNPR).\\n        //\\n        // To verify this, first we retrieve the latest request entry\\n        // that should be covered.  We know one exists for sure\\n        // because:\\n        //\\n        // 1. `numProcessedRequests` is initialized at 0, and since\\n        //    `numProcessedRequests` \\u003c `newNPR`, we have `newNPR` \\u003e= 1.\\n        //\\n        // 2. `newNPR` is \\u003c= `nextRequestIndex()`, so (`newNPR` - 1)\\n        //    is a valid request index,\\n        //\\n        // 3. The request at index `newNpr`-1 is definitely not\\n        //    withdrawn yet, as it hasn\\u0027t been marked as processed.\\n        //\\n        // Once we have the latest expected-to-be-covered request, we\\n        // check the total amount of ETH requested to be withdrawn at\\n        // the time the request was created.  We expect the\\n        // `entry.totalRequested` amount to be fully covered by the\\n        // `totalWithdrawn` + the current contract balance, which\\n        // represents the total amount of ETH processed and either\\n        // already withdrawn or prepared for withdrawal by clients.\\n        WithdrawalRequest storage entry = requests[newNPR - 1];\\n        require(entry.beneficiary != address(0), \\\"broken invariant\\\");\\n\\n        uint256 total = totalWithdrawn + address(this).balance;\\n        require(entry.totalRequested \\u003c= total, \\\"balance not enough to cover\\\");\\n\\n        // Update state and emit event.\\n        emit RequestsProcessed({\\n            value: msg.value,\\n            begin: numProcessedRequests,\\n            end: newNPR,\\n            sender: _msgSender()\\n        });\\n        numProcessedRequests = newNPR;\\n    }\\n\\n    /**\\n     * @dev It should be made apparent in the public documentation\\n     * that funds sent by mistake are not retrievable.\\n     */\\n    receive() external payable override {}\\n\\n    /**\\n     * @notice Max the allowance of this contract to spend owner\\u0027s\\n     * sETH and rETH.\\n     *\\n     * Allowance is needed as the first thing requests do is transfer\\n     * out of the client\\u0027s wallet the respective amounts of sETH and\\n     * rETH.\\n     *\\n     * @param owner Owner of sETH and rETH tokens who\\u0027s about to max\\n     *              the spending allowance.\\n     * @param deadline The block number after which this signature is\\n     *                 considered expired.\\n     * @param sv, sr, ss Signature to be used with\\n     *                   StakedEthToken.permit().\\n     * @param rv, rr, rs Signature to be used with\\n     *                   RewardEthToken.permit().\\n     */\\n    // prettier-ignore\\n    function permitTransfers(\\n        address owner,\\n        uint deadline,\\n        uint8 sv, bytes32 sr, bytes32 ss,\\n        uint8 rv, bytes32 rr, bytes32 rs\\n    ) public override {\\n        IERC20B(stakedEthToken).permit(\\n            owner, address(this), type(uint256).max, deadline,\\n            sv, sr, ss\\n        );\\n        IERC20(rewardEthToken).permit(\\n            owner, address(this), type(uint256).max, deadline,\\n            rv, rr, rs\\n        );\\n    }\\n\\n    /**\\n     * @notice Make a withdrawal request.\\n     */\\n    function request(uint256 stakedEthAmount, uint256 rewardEthAmount) external override {\\n        _requestFrom(_msgSender(), stakedEthAmount, rewardEthAmount);\\n    }\\n\\n    /**\\n     * @notice Once a withdrawal request is fully processed, the\\n     * client (who initially submitted the request by providing their\\n     * stakedETH and rewardETH) can withdraw the respective ETH funds.\\n     *\\n     * @param requestIndex Index of the processed request to withdraw.\\n     *\\n     * @custom:revert If reentrancy is detected.\\n     * @custom:revert If not called by the beneficiary himself.\\n     * @custom:revert If current balance is insufficient.\\n     *\\n     * @custom:emit WithdrawalCompleted\\n     */\\n    function withdraw(uint256 requestIndex) external override whenNotPaused nonReentrant {\\n        require(requestIndex \\u003c numProcessedRequests, \\\"request not yet processed\\\");\\n\\n        // Retrieve the withdrawal request and make sure it\\u0027s valid.\\n        WithdrawalRequest memory entry = requests[requestIndex];\\n\\n        // Since msg.sender is never empty, the following check also\\n        // ensures that the entry.beneficiary is not empty as well,\\n        // which in turn means that the ticket given is valid and\\n        // actually exists.\\n        require(_msgSender() == entry.beneficiary, \\\"should be called by beneficiary\\\");\\n\\n        // Check the invariant.\\n        require(\\n            0 \\u003c entry.deferredPayment \\u0026\\u0026 entry.deferredPayment \\u003c= pending(),\\n            \\\"broken invariant\\\"\\n        );\\n\\n        // Update the contract\\u0027s state before sending ETH to protect\\n        // from potential re-entrancy vulnerabilities.\\n        totalWithdrawn += entry.deferredPayment;\\n        delete requests[requestIndex];\\n\\n        // Emit an event.\\n        emit WithdrawalCompleted({\\n            requestIndex: requestIndex,\\n            deferredPayment: entry.deferredPayment,\\n            beneficiary: entry.beneficiary\\n        });\\n\\n        // Finally, send the ETH.\\n        payable(entry.beneficiary).sendValue(entry.deferredPayment);\\n    }\\n\\n    // +-------+\\n    // | Views |\\n    // +-------+\\n\\n    /**\\n     * @notice How many withdrawal requests are there in the queue\\n     * waiting to be processed?\\n     */\\n    function queueSize() external view override returns (uint256) {\\n        return nextRequestIndex() - numProcessedRequests;\\n    }\\n\\n    /**\\n     * @return The next available ticket number for a new withdrawal\\n     * request.\\n     */\\n    function nextRequestIndex() public view override returns (uint256) {\\n        return _counter.current();\\n    }\\n\\n    function pending() public view override returns (uint256) {\\n        // The invariant expects `totalRequested` to always be \\u003e=\\n        // `totalWithdrawn`, but we do not have to check that\\n        // explicitly as an arithmetic underflow will occur in that\\n        // case.\\n        return totalRequested - totalWithdrawn;\\n    }\\n\\n    /**\\n     * @notice How much ETH is immediately available?\\n     */\\n    function availableBalance() public view override returns (uint256) {\\n        uint256 balance = address(this).balance;\\n        uint256 owed = pending();\\n\\n        if (balance \\u003e owed) {\\n            return balance - owed;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Implements ERC-165, super.supportsInterface() comes from\\n     * AccessControlUpgradeable.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(IERC165Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return (\\n            interfaceId == type(IPoolEscrow).interfaceId ||\\n            interfaceId == type(IPoolEscrow2).interfaceId ||\\n            super.supportsInterface(interfaceId)\\n        );\\n    }\\n\\n    // +---------+\\n    // | Private |\\n    // +---------+\\n\\n    /**\\n     * @dev Create a new ticket and store it to contract\\u0027s state for\\n     * later withdrawal once it\\u0027s processed off-chain.\\n     *\\n     * @param beneficiary Client to pay to.\\n     * @param deferredPayment Amount to pay.\\n     */\\n    function _createRequest(\\n        address beneficiary,\\n        uint256 deferredPayment\\n    ) private returns (uint256) {\\n        // Create a new ticket number and update issuer.\\n        uint256 ticket = nextRequestIndex();\\n        _counter.increment();\\n\\n        // Update pending withdrawals.\\n        totalRequested += deferredPayment;\\n\\n        // Create a new request and store it under that ticket number.\\n        requests[ticket] = WithdrawalRequest({\\n            totalRequested: totalRequested,\\n            deferredPayment: deferredPayment,\\n            beneficiary: beneficiary\\n        });\\n\\n        return ticket;\\n    }\\n\\n    /**\\n     * @dev Request an immediate payment.\\n     *\\n     * @custom:revert If reentrancy is detected.\\n     * @custom:revert If current balance is insufficient.\\n     *\\n     * @param beneficiary Client to pay to.\\n     * @param stakedEthAmount sETH turned in on request.\\n     * @param rewardEthAmount rETH turned in on request.\\n     * @param net Net amount of ETH to pay to beneficiary.\\n     *\\n     * @custom:emit InstantWithdrawalCompleted\\n     */\\n    function _requestInstant(\\n        address beneficiary,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 net\\n    ) private nonReentrant {\\n        emit InstantWithdrawalCompleted({\\n            stakedEthAmount: stakedEthAmount,\\n            rewardEthAmount: rewardEthAmount,\\n            immediatePayment: net,\\n            beneficiary: beneficiary\\n        });\\n        payable(beneficiary).sendValue(net);\\n    }\\n\\n    /**\\n     * @dev Request a partial payment: send available amount right now\\n     * and create a ticket for the rest (net - available).\\n     *\\n     * @custom:revert If reentrancy is detected.\\n     * @custom:revert If current balance is insufficient.\\n     *\\n     * @param beneficiary Client to pay to.\\n     * @param stakedEthAmount sETH turned in on request.\\n     * @param rewardEthAmount rETH turned in on request.\\n     * @param net Net amount of ETH to pay to beneficiary.\\n     * @param available What\\u0027s currently available and should be payed\\n     *                  right away.\\n     *\\n     * @custom:emit PartialWithdrawalRequested\\n     */\\n    function _requestPartial(\\n        address beneficiary,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 net,\\n        uint256 available\\n    ) private nonReentrant {\\n        uint256 immediate = available;\\n        uint256 deferred = net - immediate;\\n        uint256 requestIndex = _createRequest(beneficiary, deferred);\\n        emit PartialWithdrawalRequested({\\n            requestIndex: requestIndex,\\n            stakedEthAmount: stakedEthAmount,\\n            rewardEthAmount: rewardEthAmount,\\n            immediatePayment: immediate,\\n            deferredPayment: deferred,\\n            pending: pending(),\\n            beneficiary: beneficiary\\n        });\\n        payable(beneficiary).sendValue(immediate);\\n    }\\n\\n    /**\\n     * @dev Request a full payment by creating a ticket for the whole\\n     * amount.\\n     *\\n     * @custom:revert If reentrancy is detected.\\n     *\\n     * @param beneficiary Client to pay to.\\n     * @param stakedEthAmount sETH turned in on request.\\n     * @param rewardEthAmount rETH turned in on request.\\n     * @param net Net amount of ETH to pay to beneficiary.\\n     *\\n     * @custom:emit DeferredWithdrawalRequested\\n     */\\n    function _requestFull(\\n        address beneficiary,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount,\\n        uint256 net\\n    ) private {\\n        uint256 requestIndex = _createRequest(beneficiary, net);\\n        emit DeferredWithdrawalRequested({\\n            requestIndex: requestIndex,\\n            stakedEthAmount: stakedEthAmount,\\n            rewardEthAmount: rewardEthAmount,\\n            deferredPayment: net,\\n            pending: pending(),\\n            beneficiary: beneficiary\\n        });\\n    }\\n\\n    /*\\n     * @dev Make a withdrawal request.\\n     *\\n     * @param beneficiary Address of the client making the request.\\n     * @param stakedEthAmount Amount of sETH to be withdrawn.\\n     * @param rewardEthAmount Amount of rETH to be withdrawn.\\n     *\\n     * @custom:revert If contract is currently paused.\\n     * @custom:revert If the client has not approved this contract to\\n     *                transfer sETH or rETH.\\n     * @custom:revert If the net amount of the requested funds is 0.\\n     *\\n     * @custom:emit At least one of:\\n     *        - StakedEthToken::Transfer\\n     *        - RewardEthToken::Transfer\\n     * @custom:emit One of:\\n     *        - PoolEscrow::InstantWithdrawalCompleted\\n     *        - PoolEscrow::PartialWithdrawalRequested\\n     *        - PoolEscrow::DeferredWithdrawalRequested\\n     */\\n    function _requestFrom(\\n        address beneficiary,\\n        uint256 stakedEthAmount,\\n        uint256 rewardEthAmount\\n    ) private whenNotPaused {\\n        // Transfer staked ETH and reward ETH first.\\n        if (stakedEthAmount \\u003e 0) {\\n            IERC20B(stakedEthToken).burnFrom(\\n                beneficiary,\\n                stakedEthAmount\\n            );\\n        }\\n        if (rewardEthAmount \\u003e 0) {\\n            bool success = IERC20(rewardEthToken).transferFrom(\\n                beneficiary,\\n                address(this),\\n                rewardEthAmount\\n            );\\n            require(success, \\\"rETH transfer failed\\\");\\n        }\\n\\n        // Compute the net payment.\\n        uint256 gross = stakedEthAmount + rewardEthAmount;\\n        uint256 fee = (withdrawalFee * gross) / HUNDRED_BP;\\n        uint256 net = gross - fee;\\n        require(net \\u003e 0, \\\"cannot request to withdraw 0\\\");\\n\\n        // Now choose one of three options depending on the amount\\n        // requested and the amount available immediately.\\n        uint256 available = availableBalance();\\n        if (net \\u003c= available) {\\n            // Requested amount of ETH is fully available for\\n            // immediate withdrawal, send it right away.\\n            _requestInstant(beneficiary, stakedEthAmount, rewardEthAmount, net);\\n        } else if (available \\u003e= minImmediatePayment) {\\n            // Requested amount is greater than the available balance.\\n            // Also, the available balance covers the minimum amount\\n            // to withdraw partially.\\n            //\\n            // We send what\\u0027s available right away and issue a ticket\\n            // for the rest.\\n            _requestPartial(beneficiary, stakedEthAmount, rewardEthAmount, net, available);\\n        } else {\\n            // Create a new ticket for the whole amount requested.\\n            _requestFull(beneficiary, stakedEthAmount, rewardEthAmount, net);\\n        }\\n\\n        // Track the fee.\\n        uncollectedFees += fee;\\n    }\\n}\\n\"},\"ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deferredPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"DeferredWithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"immediatePayment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"InstantWithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMIP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMIP\",\"type\":\"uint256\"}],\"name\":\"MinImmediatePaymentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"immediatePayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deferredPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"PartialWithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"begin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RequestsProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Restaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deferredPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedEthToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardEthToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minImmediatePayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRequestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProcessedRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"sv\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sr\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ss\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"rv\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"rr\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stakedEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEthAmount\",\"type\":\"uint256\"}],\"name\":\"permitRequestFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"sv\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sr\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ss\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"rv\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"rr\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rs\",\"type\":\"bytes32\"}],\"name\":\"permitTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNPR\",\"type\":\"uint256\"}],\"name\":\"processRequests\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEthAmount\",\"type\":\"uint256\"}],\"name\":\"request\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEthAmount\",\"type\":\"uint256\"}],\"name\":\"requestFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deferredPayment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEthToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinImmediatePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedEthToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uncollectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PoolEscrow2", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "1024", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a5a81d39665c5802eb61c6261877d8ffe236b44822d29ec9b868ec382622a53"}