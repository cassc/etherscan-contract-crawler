{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n\r\n     function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nlibrary Address{\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ncontract UPONLY is IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n\r\n    string private constant _name = \"wouldntitbeniceifthepriceonlywentup\";\r\n    string private constant _symbol = \"UPONLY\";\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 200_000_000_000 * 10**_decimals;\r\n\r\n    uint256 private _maxWallet = 1_600_000_000 * 10**_decimals;\r\n    uint256 private _maxBuyAmount = 1_600_000_000 * 10**_decimals;\r\n    uint256 private _maxSellAmount = 1_600_000_000 * 10**_decimals;\r\n    uint256 private _swapTH = 200_000_000 * 10**_decimals;\r\n\r\n\r\n    address public Dev = 0xE8a0163027377c5E6467e43a9262C0F0EED15339;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isWhiteList;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n    address private _owner;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    bool public _AutoSwap = true;\r\n    bool public _Launch = false;\r\n    bool public _transfersEnabled = false;\r\n    bool private _TokenSwap = true;\r\n    bool private _autoLP = true;\r\n    bool private _isSelling = false;\r\n    \r\n    uint256 private _swapPercent = 100;\r\n\r\n    uint256 private _devTaxRate = 0; // 0% buy tax\r\n\r\n    uint256 private AmountBuyRate = _devTaxRate;\r\n\r\n    uint256 private _devTaxSellRate = 0; // 0% sell tax\r\n\r\n    uint256 private AmountSellRate = _devTaxSellRate;\r\n\r\n    constructor() {\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _owner = msg.sender;\r\n\r\n        uint256 tsupply = _totalSupply;\r\n\r\n        _balances[msg.sender] = tsupply;\r\n\r\n\r\n        _isExcludedFromFee[_owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[Dev] = true;\r\n        \r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner();\r\n    }\r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isWhitelist(address account) public view returns (bool) {\r\n        return _isWhiteList[account];\r\n    }\r\n\r\n    function ViewBuyRate() public view returns (\r\n        uint256 devBuyRate,\r\n        uint256 totalBuyRate,\r\n        uint256 maxWallet,\r\n        uint256 maxBuyAmount\r\n    ) {\r\n        devBuyRate = _devTaxRate;\r\n        totalBuyRate = AmountBuyRate;\r\n        maxWallet = _maxWallet;\r\n        maxBuyAmount = _maxBuyAmount;\r\n    }\r\n\r\n    function ViewSellRate() public view returns (\r\n        uint256 devSellRate,\r\n        uint256 totalSellRate,\r\n        uint256 maxSellAmount\r\n    ) {\r\n        devSellRate = _devTaxSellRate;\r\n        totalSellRate = AmountSellRate;\r\n        maxSellAmount = _maxSellAmount;\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        if(recipient != uniswapV2Pair && recipient != owner() && !_isExcludedFromFee[recipient]){\r\n\r\n            require(_balances[recipient] + amount <= _maxWallet, \"UPONLY: recipient wallet balance exceeds the maximum\");\r\n\r\n        }\r\n\r\n        _transfer(msg.sender, recipient, amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"UPONLY: approve from the zero address\");\r\n        require(spender != address(0), \"UPONLY: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n\r\n        require(sender != address(0), \"UPONLY: transfer from zero address\");\r\n        require(recipient != address(0), \"UPONLY: transfer to zero address\");\r\n        require(amount > 0, \"UPONLY: transfer amount must be greater than zero\");\r\n        if(!_Launch){require(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient] || _isWhiteList[sender] || _isWhiteList[recipient], \"we have not launch yet\");}\r\n        if(!_Launch && recipient != uniswapV2Pair && sender != uniswapV2Pair) {require(_transfersEnabled, \"Transfers are currently disabled\");}\r\n\r\n        bool _AutoTaxes = true;\r\n\r\n\r\n        if (recipient == uniswapV2Pair && sender == owner()) {\r\n\r\n            _balances[sender] -= amount;\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        //sell   \r\n        if(recipient == uniswapV2Pair && !_isExcludedFromFee[sender] && sender != owner()){\r\n\r\n                require(amount <= _maxSellAmount, \"Sell amount exceeds the max limit\");\r\n\r\n                _isSelling = true;\r\n               \r\n                if(_AutoSwap && balanceOf(address(this)) >= _swapTH){\r\n\r\n                    CanSwap();\r\n                }  \r\n        }\r\n\r\n        //buy\r\n        if(sender == uniswapV2Pair && !_isExcludedFromFee[recipient] && recipient != owner()){\r\n                    \r\n            require(amount <= _maxBuyAmount, \"Buy amount exceeds the max limit\");\r\n            \r\n        }\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) { _AutoTaxes = false; }\r\n        if (recipient != uniswapV2Pair && sender != uniswapV2Pair) { _AutoTaxes = false; }\r\n\r\n        if (_AutoTaxes) {\r\n\r\n                if(!_isSelling){\r\n\r\n                    uint256 totalTaxAmount = amount * AmountBuyRate / 100;\r\n                    uint256 transferAmount = amount - totalTaxAmount;\r\n                    \r\n                   \r\n                    _balances[address(this)] = _balances[address(this)].add(totalTaxAmount);\r\n                    _balances[sender] = _balances[sender].sub(amount);\r\n                    _balances[recipient] = _balances[recipient].add(transferAmount);\r\n\r\n                    emit Transfer(sender, recipient, transferAmount);\r\n                    emit Transfer(sender, address(this), totalTaxAmount);\r\n\r\n                }else{\r\n\r\n                    uint256 totalTaxAmount = amount * AmountSellRate / 100;\r\n                    uint256 transferAmount = amount - totalTaxAmount;\r\n                    \r\n\r\n                    _balances[address(this)] = _balances[address(this)].add(totalTaxAmount);\r\n                    _balances[sender] = _balances[sender].sub(amount);\r\n                    _balances[recipient] = _balances[recipient].add(transferAmount);\r\n\r\n                    emit Transfer(sender, recipient, transferAmount);\r\n                    emit Transfer(sender, address(this), totalTaxAmount);\r\n\r\n                    _isSelling = false;\r\n                }\r\n            \r\n        }else{\r\n\r\n                _balances[sender] = _balances[sender].sub(amount);\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n                emit Transfer(sender, recipient, amount);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // Set up the contract address and UPONLY token to be swapped\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        // Approve the transfer of tokens to the UPONLY contract address\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function CanSwap() private {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if(contractTokenBalance > 0) {\r\n\r\n            if(_TokenSwap){\r\n\r\n                if(contractTokenBalance > 0){\r\n                    \r\n                    uint256 caBalance = balanceOf(address(this)) * _swapPercent / 100;\r\n\r\n                    uint256 toSwap = caBalance;\r\n\r\n                    swapTokensForEth(toSwap);\r\n\r\n                    uint256 receivedBalance = address(this).balance;\r\n\r\n                    if (receivedBalance > 0) {payable(Dev).transfer(receivedBalance);}\r\n\r\n                }else{\r\n\r\n                    revert(\"No UPONLY tokens available to swap\");\r\n                }\r\n\r\n            }\r\n\r\n        }else{\r\n\r\n           revert(\"No UPONLY Balance available to swap\");     \r\n           \r\n        }\r\n            \r\n    }\r\n\r\n   receive() external payable {}\r\n\r\n    function setDevAddress(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0), \"Invalid address given\");\r\n        Dev = newAddress;\r\n        _isExcludedFromFee[newAddress] = true;\r\n    }\r\n\r\n\r\n   function enableLaunch() external {\r\n        _Launch = true;\r\n        _transfersEnabled = true;\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool status) external onlyOwner {\r\n        _isExcludedFromFee[account] = status;\r\n    }\r\n\r\n    function setWhitelist(address account, bool status) external onlyOwner {\r\n        _isWhiteList[account] = status;\r\n    }\r\n\r\n    function SwapEnable(bool status) external onlyOwner {\r\n        _AutoSwap = status;\r\n    }\r\n\r\n    function SetSwapPercentage(uint256 SwapPercent) external onlyOwner {\r\n        _swapPercent = SwapPercent;\r\n    }\r\n\r\n    function setAutoSwap(uint256 newAutoSwap) external onlyOwner {\r\n        require(newAutoSwap <= (totalSupply() * 1) / 100, \"Invalid value: exceeds 1% of total supply\");\r\n        _swapTH = newAutoSwap * 10**_decimals;\r\n    }\r\n\r\n    function updateLimits(uint256 maxWallet, uint256 maxBuyAmount, uint256 maxSellAmount) external onlyOwner {\r\n        _maxWallet = maxWallet * 10**_decimals;\r\n        _maxBuyAmount = maxBuyAmount * 10**_decimals;\r\n        _maxSellAmount = maxSellAmount * 10**_decimals;\r\n    }\r\n\r\n    function setBuyTaxRates(uint256 devTaxRate) external onlyOwner {\r\n        _devTaxRate = devTaxRate;\r\n        AmountBuyRate = _devTaxRate;\r\n    }\r\n\r\n\r\n    function setSellTaxRates(uint256 devTaxRate) external onlyOwner {\r\n        _devTaxSellRate = devTaxRate;\r\n        AmountSellRate = _devTaxSellRate;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SwapPercent\",\"type\":\"uint256\"}],\"name\":\"SetSwapPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewBuyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"devBuyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewSellRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"devSellRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSellRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_AutoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Launch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAutoSwap\",\"type\":\"uint256\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devTaxRate\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devTaxRate\",\"type\":\"uint256\"}],\"name\":\"setSellTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UPONLY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8cc9eaab2d199b2300c72e4ea65e9d9ba24f79653c9eaac82c2079f20ed4c41e"}