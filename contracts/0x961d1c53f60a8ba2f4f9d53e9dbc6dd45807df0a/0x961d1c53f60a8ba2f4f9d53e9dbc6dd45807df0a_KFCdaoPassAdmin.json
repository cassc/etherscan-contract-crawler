{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/kfcdao/KFCdaoPassAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract KFCdaoPassAdmin is Ownable {\r\n    KFCdao public kfcdao;\r\n\r\n    constructor(address _nftContract) {\r\n        kfcdao = KFCdao(_nftContract);\r\n    }\r\n\r\n    function setNFTContract(address _nftContract) public onlyOwner {\r\n        kfcdao = KFCdao(_nftContract);\r\n    }\r\n\r\n    function removeAdmin(address _admin) public {\r\n        kfcdao.removeAdmin(_admin);\r\n    }\r\n\r\n    function addAdminBatch(address[] memory _admins) public {\r\n        kfcdao.addAdminBatch(_admins);\r\n    }\r\n\r\n    function removeFromWhiteList(address _address) public {\r\n        kfcdao.removeFromWhiteList(_address);\r\n    }\r\n\r\n    function addToWhiteListBatch(address[] memory _addresses) public {\r\n        kfcdao.addToWhiteListBatch(_addresses);\r\n    }\r\n\r\n    function setBaseParameters(\r\n        bool _whiteListMintEnabled,\r\n        uint256 _maxSupply,\r\n        uint256 _mintStartBlock,\r\n        uint256 _mintEndBlock,\r\n        uint256 _mintPrice\r\n    ) public {\r\n        kfcdao.setBaseParameters(\r\n            _whiteListMintEnabled,\r\n            _maxSupply,\r\n            _mintStartBlock,\r\n            _mintEndBlock,\r\n            _mintPrice\r\n        );\r\n    }\r\n\r\n    function setDefaultURI(string memory _defaultURI) public {\r\n        kfcdao.setDefaultURI(_defaultURI);\r\n    }\r\n\r\n    function withdrawThis() external {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdraw() external {\r\n        kfcdao.withdraw();\r\n    }\r\n\r\n    function mintAdmin() external {\r\n        kfcdao.mintAdmin();\r\n    }\r\n\r\n    function enableWhiteListMint() public  {\r\n        kfcdao.enableWhiteListMint();\r\n    }\r\n\r\n    function disableWhiteListMint() public  {\r\n        kfcdao.disableWhiteListMint();\r\n    }\r\n\r\n    function whiteListMintEnabled() external view returns(bool){\r\n        return kfcdao.whiteListMintEnabled();\r\n    }\r\n\r\n    \r\n}\r\n\r\ninterface KFCdao {\r\n    function removeAdmin(address _admin) external;\r\n\r\n    function removeFromWhiteList(address _address) external;\r\n\r\n    function setBaseParameters(\r\n        bool _whiteListMintEnabled,\r\n        uint256 _maxSupply,\r\n        uint256 _mintStartBlock,\r\n        uint256 _mintEndBlock,\r\n        uint256 _mintPrice\r\n    ) external;\r\n\r\n    function setDefaultURI(string memory _defaultURI) external;\r\n\r\n    function mintAdmin() external payable;\r\n\r\n    function withdraw() external;\r\n\r\n    function addToWhiteListBatch(address[] memory _addresses) external;\r\n\r\n    function addAdminBatch(address[] memory _admins) external;\r\n\r\n    function enableWhiteListMint() external;\r\n\r\n    function disableWhiteListMint() external;\r\n\r\n    function whiteListMintEnabled() external view returns (bool);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"name\":\"addAdminBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addToWhiteListBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhiteListMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhiteListMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kfcdao\",\"outputs\":[{\"internalType\":\"contract KFCdao\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whiteListMintEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setBaseParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_defaultURI\",\"type\":\"string\"}],\"name\":\"setDefaultURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KFCdaoPassAdmin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000069510d30f89190d42e22cf531b4f4db32d3456e9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4a0240a700c718cc8a06462314e54ac98dc1ea6797f11354224594f1e002f0b"}