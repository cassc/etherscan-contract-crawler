{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/utils/IERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/Utils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nlibrary Utils {\\n    function find(address[] memory arr, address item)\\n        internal\\n        pure\\n        returns (bool exist, uint256 index)\\n    {\\n        for (uint256 i = 0; i < arr.length; i += 1) {\\n            if (arr[i] == item) {\\n                return (true, i);\\n            }\\n        }\\n    }\\n\\n    function find(bytes4[] memory arr, bytes4 sig)\\n        internal\\n        pure\\n        returns (bool exist, uint256 index)\\n    {\\n        for (uint256 i = 0; i < arr.length; i += 1) {\\n            if (arr[i] == sig) {\\n                return (true, i);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/ERC20Recoverer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\ncontract ERC20Recoverer is Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => bool) public permanentlyNonRecoverable;\\n    mapping(address => bool) public nonRecoverable;\\n\\n    event Recovered(address token, uint256 amount);\\n\\n    address public recoverer;\\n\\n    constructor() {}\\n\\n    modifier onlyRecoverer() {\\n        require(msg.sender == recoverer, \\\"Only allowed to recoverer\\\");\\n        _;\\n    }\\n\\n    function initialize(address _recoverer, address[] memory disableList)\\n        public\\n        initializer\\n    {\\n        for (uint256 i = 0; i < disableList.length; i++) {\\n            permanentlyNonRecoverable[disableList[i]] = true;\\n        }\\n        recoverer = _recoverer;\\n    }\\n\\n    function setRecoverer(address _recoverer) public onlyRecoverer {\\n        recoverer = _recoverer;\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyRecoverer\\n    {\\n        require(nonRecoverable[tokenAddress] == false, \\\"Non-recoverable ERC20\\\");\\n        require(\\n            permanentlyNonRecoverable[tokenAddress] == false,\\n            \\\"Non-recoverable ERC20\\\"\\n        );\\n        IERC20(tokenAddress).safeTransfer(recoverer, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function disable(address _contract) public onlyRecoverer {\\n        nonRecoverable[_contract] = true;\\n    }\\n\\n    function disablePermanently(address _contract) public onlyRecoverer {\\n        permanentlyNonRecoverable[_contract] = true;\\n    }\\n\\n    function enable(address _contract) public onlyRecoverer {\\n        permanentlyNonRecoverable[_contract] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/ERC20Mock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport {\\n    ERC20Burnable,\\n    ERC20 as _ERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\n/**\\n * @title Commit Token\\n * @notice Commit Token is used for redeeming stable coins, buying crypto products\\n *      from the village market and mining vision tokens. It is minted by the admin and\\n *      given to the contributors. The amount of mintable token is limited to the balance\\n *      of redeemable stable coins. Therefore, it's 1:1 pegged to the given stable coin\\n *      or expected to have higher value than the redeemable coin values.\\n */\\ncontract ERC20 is ERC20Burnable {\\n    address public minter;\\n\\n    constructor() _ERC20(\\\"ERC20Mock\\\", \\\"MOCK\\\") {\\n        minter = msg.sender;\\n    }\\n\\n    modifier onlyMinter {\\n        require(msg.sender == minter, \\\"Not a minter\\\");\\n        _;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyMinter {\\n        _mint(to, amount);\\n    }\\n\\n    function setMinter(address _minter) public onlyMinter {\\n        minter = _minter;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/IERC1620.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC0\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC-1620 Money Streaming Standard\\n * @author Sablier\\n * @dev See https://eips.ethereum.org/EIPS/eip-1620\\n */\\ninterface IERC1620 {\\n    /**\\n     * @notice Emits when a stream is successfully created.\\n     */\\n    event CreateStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    );\\n\\n    /**\\n     * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\\n     */\\n    event WithdrawFromStream(\\n        uint256 indexed streamId,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\\n     */\\n    event CancelStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 senderBalance,\\n        uint256 recipientBalance\\n    );\\n\\n    function balanceOf(uint256 streamId, address who)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    function getStream(uint256 streamId)\\n        external\\n        view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address token,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        );\\n\\n    function createStream(\\n        address recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    ) external returns (uint256 streamId);\\n\\n    function withdrawFromStream(uint256 streamId, uint256 funds)\\n        external\\n        returns (bool);\\n\\n    function cancelStream(uint256 streamId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/ERC1155Mock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport {\\n    ERC1155Burnable,\\n    ERC1155 as _ERC1155\\n} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\\\";\\n\\n/**\\n * @title Commit Token\\n * @notice Commit Token is used for redeeming stable coins, buying crypto products\\n *      from the village market and mining vision tokens. It is minted by the admin and\\n *      given to the contributors. The amount of mintable token is limited to the balance\\n *      of redeemable stable coins. Therefore, it's 1:1 pegged to the given stable coin\\n *      or expected to have higher value than the redeemable coin values.\\n */\\ncontract ERC1155 is ERC1155Burnable {\\n    address public minter;\\n\\n    constructor() _ERC1155(\\\"ERC1155Mock\\\") {\\n        minter = msg.sender;\\n    }\\n\\n    modifier onlyMinter {\\n        require(msg.sender == minter, \\\"Not a minter\\\");\\n        _;\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMinter {\\n        _mint(to, id, amount, bytes(\\\"\\\"));\\n    }\\n\\n    function setMinter(address _minter) public onlyMinter {\\n        minter = _minter;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport {\\n    IERC20 as _IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20 is _IERC20 {}\\n\"\r\n    },\r\n    \"./contracts/utils/WETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ncontract WETH9 {\\n    string public name = \\\"Wrapped Ether\\\";\\n    string public symbol = \\\"WETH\\\";\\n    uint8 public decimals = 18;\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    function deposit() public payable {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 wad) public {\\n        require(balanceOf[msg.sender] >= wad);\\n        balanceOf[msg.sender] -= wad;\\n        msg.sender.transfer(wad);\\n        emit Withdrawal(msg.sender, wad);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function approve(address guy, uint256 wad) public returns (bool) {\\n        allowance[msg.sender][guy] = wad;\\n        Approval(msg.sender, guy, wad);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 wad) public returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public returns (bool) {\\n        require(balanceOf[src] >= wad);\\n\\n        if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {\\n            require(allowance[src][msg.sender] >= wad);\\n            allowance[src][msg.sender] -= wad;\\n        }\\n\\n        balanceOf[src] -= wad;\\n        balanceOf[dst] += wad;\\n\\n        Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/Sqrt.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nlibrary Sqrt {\\n    /**\\n     * @dev This code is written by Noah Zinsmeister @ Uniswap\\n     * https://github.com/Uniswap/uniswap-v2-core/blob/v1.0.1/contracts/libraries/Math.sol\\n     */\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/Int128.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\nlibrary Int128 {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function toInt128(uint256 val) internal pure returns (int128) {\\n        return val.toInt256().toInt128();\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/pools/ERC20BurnMiningV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPool.sol\\\";\\n\\ncontract ERC20BurnMiningV1 is MiningPool {\\n    using SafeMath for uint256;\\n\\n    function initialize(address tokenEmitter_, address baseToken_)\\n        public\\n        override\\n    {\\n        super.initialize(tokenEmitter_, baseToken_);\\n        _registerInterface(ERC20BurnMiningV1(0).burn.selector);\\n        _registerInterface(ERC20BurnMiningV1(0).exit.selector);\\n        _registerInterface(ERC20BurnMiningV1(0).erc20BurnMiningV1.selector);\\n    }\\n\\n    function burn(uint256 amount) public {\\n        _dispatchMiners(amount);\\n        ERC20Burnable(baseToken()).burnFrom(msg.sender, amount);\\n    }\\n\\n    function exit() public {\\n        // transfer vision token\\n        _mine();\\n        // withdraw all miners\\n        uint256 numOfMiners = dispatchedMiners(msg.sender);\\n        _withdrawMiners(numOfMiners);\\n    }\\n\\n    function erc20BurnMiningV1() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/libraries/MiningPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Refactored synthetix StakingRewards.sol for general purpose mining pool logic.\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\nimport \\\"../../../core/tokens/COMMIT.sol\\\";\\nimport \\\"../../../core/emission/interfaces/ITokenEmitter.sol\\\";\\nimport \\\"../../../core/emission/interfaces/IMiningPool.sol\\\";\\nimport \\\"../../../utils/ERC20Recoverer.sol\\\";\\n\\nabstract contract MiningPool is\\n    ReentrancyGuard,\\n    Pausable,\\n    ERC20Recoverer,\\n    ERC165,\\n    IMiningPool\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private _baseToken;\\n    address private _token;\\n    address private _tokenEmitter;\\n\\n    uint256 private _miningEnds = 0;\\n    uint256 private _miningRate = 0;\\n    uint256 private _lastUpdateTime;\\n    uint256 private _tokenPerMiner;\\n    uint256 private _totalMiners;\\n\\n    mapping(address => uint256) private _paidTokenPerMiner;\\n    mapping(address => uint256) private _mined;\\n    mapping(address => uint256) private _dispatchedMiners;\\n\\n    modifier onlyTokenEmitter() {\\n        require(\\n            msg.sender == address(_tokenEmitter),\\n            \\\"Only the token emitter can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier recordMining(address account) {\\n        _tokenPerMiner = tokenPerMiner();\\n        _lastUpdateTime = lastTimeMiningApplicable();\\n        if (account != address(0)) {\\n            _mined[account] = mined(account);\\n            _paidTokenPerMiner[account] = _tokenPerMiner;\\n        }\\n        _;\\n    }\\n\\n    function initialize(address tokenEmitter_, address baseToken_)\\n        public\\n        virtual\\n        override\\n    {\\n        address token_ = ITokenEmitter(tokenEmitter_).token();\\n\\n        require(address(_token) == address(0), \\\"Already initialized\\\");\\n        require(token_ != address(0), \\\"Token is zero address\\\");\\n        require(tokenEmitter_ != address(0), \\\"Token emitter is zero address\\\");\\n        require(baseToken_ != address(0), \\\"Base token is zero address\\\");\\n        _token = token_;\\n        _tokenEmitter = tokenEmitter_;\\n        _baseToken = baseToken_;\\n        // ERC20Recoverer\\n        address[] memory disable = new address[](2);\\n        disable[0] = token_;\\n        disable[1] = baseToken_;\\n        ERC20Recoverer.initialize(msg.sender, disable);\\n        // ERC165\\n        bytes4 _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n        _registerInterface(MiningPool(0).allocate.selector);\\n    }\\n\\n    function allocate(uint256 amount)\\n        public\\n        override\\n        onlyTokenEmitter\\n        recordMining(address(0))\\n    {\\n        uint256 miningPeriod = ITokenEmitter(_tokenEmitter).EMISSION_PERIOD();\\n        if (block.timestamp >= _miningEnds) {\\n            _miningRate = amount.div(miningPeriod);\\n        } else {\\n            uint256 remaining = _miningEnds.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(_miningRate);\\n            _miningRate = amount.add(leftover).div(miningPeriod);\\n        }\\n\\n        // Ensure the provided mining amount is not more than the balance in the contract.\\n        // This keeps the mining rate in the right range, preventing overflows due to\\n        // very high values of miningRate in the mined and tokenPerMiner functions;\\n        // (allocated_amount + leftover) must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(_miningRate <= balance.div(miningPeriod), \\\"not enough balance\\\");\\n\\n        _lastUpdateTime = block.timestamp;\\n        _miningEnds = block.timestamp.add(miningPeriod);\\n        emit Allocated(amount);\\n    }\\n\\n    function token() public view override returns (address) {\\n        return _token;\\n    }\\n\\n    function tokenEmitter() public view override returns (address) {\\n        return _tokenEmitter;\\n    }\\n\\n    function baseToken() public view override returns (address) {\\n        return _baseToken;\\n    }\\n\\n    function miningEnds() public view override returns (uint256) {\\n        return _miningEnds;\\n    }\\n\\n    function miningRate() public view override returns (uint256) {\\n        return _miningRate;\\n    }\\n\\n    function lastUpdateTime() public view override returns (uint256) {\\n        return _lastUpdateTime;\\n    }\\n\\n    function lastTimeMiningApplicable() public view override returns (uint256) {\\n        return Math.min(block.timestamp, _miningEnds);\\n    }\\n\\n    function tokenPerMiner() public view override returns (uint256) {\\n        if (_totalMiners == 0) {\\n            return _tokenPerMiner;\\n        }\\n        return\\n            _tokenPerMiner.add(\\n                lastTimeMiningApplicable()\\n                    .sub(_lastUpdateTime)\\n                    .mul(_miningRate)\\n                    .mul(1e18)\\n                    .div(_totalMiners)\\n            );\\n    }\\n\\n    function mined(address account) public view override returns (uint256) {\\n        // prev mined + ((token/miner - paidToken/miner) 1e18 unit) * dispatchedMiner\\n        return\\n            _dispatchedMiners[account]\\n                .mul(tokenPerMiner().sub(_paidTokenPerMiner[account]))\\n                .div(1e18)\\n                .add(_mined[account]);\\n    }\\n\\n    function getMineableForPeriod() public view override returns (uint256) {\\n        uint256 miningPeriod = ITokenEmitter(_tokenEmitter).EMISSION_PERIOD();\\n        return _miningRate.mul(miningPeriod);\\n    }\\n\\n    function paidTokenPerMiner(address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _paidTokenPerMiner[account];\\n    }\\n\\n    function dispatchedMiners(address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _dispatchedMiners[account];\\n    }\\n\\n    function totalMiners() public view override returns (uint256) {\\n        return _totalMiners;\\n    }\\n\\n    function _dispatchMiners(uint256 miners) internal {\\n        _dispatchMiners(msg.sender, miners);\\n    }\\n\\n    function _dispatchMiners(address account, uint256 miners)\\n        internal\\n        nonReentrant\\n        whenNotPaused\\n        recordMining(account)\\n    {\\n        require(miners > 0, \\\"Cannot stake 0\\\");\\n        _totalMiners = _totalMiners.add(miners);\\n        _dispatchedMiners[account] = _dispatchedMiners[account].add(miners);\\n        emit Dispatched(account, miners);\\n    }\\n\\n    function _withdrawMiners(uint256 miners) internal {\\n        _withdrawMiners(msg.sender, miners);\\n    }\\n\\n    function _withdrawMiners(address account, uint256 miners)\\n        internal\\n        nonReentrant\\n        recordMining(account)\\n    {\\n        require(miners > 0, \\\"Cannot withdraw 0\\\");\\n        _totalMiners = _totalMiners.sub(miners);\\n        _dispatchedMiners[account] = _dispatchedMiners[account].sub(miners);\\n        emit Withdrawn(account, miners);\\n    }\\n\\n    function _mine() internal {\\n        _mine(msg.sender);\\n    }\\n\\n    function _mine(address account)\\n        internal\\n        nonReentrant\\n        recordMining(account)\\n    {\\n        uint256 amount = _mined[account];\\n        if (amount > 0) {\\n            _mined[account] = 0;\\n            IERC20(_token).safeTransfer(account, amount);\\n            emit Mined(account, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/tokens/COMMIT.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title Commit Token\\n * @notice Commit Token is used for redeeming stable coins, buying crypto products\\n *      from the village market and mining vision tokens. It is minted by the admin and\\n *      given to the contributors. The amount of mintable token is limited to the balance\\n *      of redeemable stable coins. Therefore, it's 1:1 pegged to the given stable coin\\n *      or expected to have higher value than the redeemable coin values.\\n */\\ncontract COMMIT is ERC20Burnable, Initializable {\\n    using SafeMath for uint256;\\n\\n    address private _minter;\\n    uint256 private _totalBurned;\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {\\n        // this constructor will not be called since it'll be cloned by proxy pattern.\\n        // initalize() will be called instead.\\n    }\\n\\n    modifier onlyMinter {\\n        require(msg.sender == _minter, \\\"Not a minter\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address minter_\\n    ) public initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _minter = minter_;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyMinter {\\n        _mint(to, amount);\\n    }\\n\\n    function setMinter(address minter_) public onlyMinter {\\n        _setMinter(minter_);\\n    }\\n\\n    function _setMinter(address minter_) internal {\\n        _minter = minter_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function minter() public view returns (address) {\\n        return _minter;\\n    }\\n\\n    function totalBurned() public view returns (uint256) {\\n        return _totalBurned;\\n    }\\n\\n    function _burn(address account, uint256 amount) internal override {\\n        super._burn(account, amount);\\n        _totalBurned = _totalBurned.add(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/interfaces/ITokenEmitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nstruct EmissionWeight {\\n    address[] pools;\\n    uint256[] weights;\\n    uint256 treasury;\\n    uint256 caller;\\n    uint256 protocol;\\n    uint256 dev;\\n    uint256 sum;\\n}\\n\\nstruct EmitterConfig {\\n    uint256 projId;\\n    uint256 initialEmission;\\n    uint256 minEmissionRatePerWeek;\\n    uint256 emissionCutRate;\\n    uint256 founderShareRate;\\n    uint256 startDelay;\\n    address treasury;\\n    address gov;\\n    address token;\\n    address protocolPool;\\n    address contributionBoard;\\n    address erc20BurnMiningFactory;\\n    address erc20StakeMiningFactory;\\n    address erc721StakeMiningFactory;\\n    address erc1155StakeMiningFactory;\\n    address erc1155BurnMiningFactory;\\n    address initialContributorShareFactory;\\n}\\n\\nstruct MiningPoolConfig {\\n    uint256 weight;\\n    bytes4 poolType;\\n    address baseToken;\\n}\\n\\nstruct MiningConfig {\\n    MiningPoolConfig[] pools;\\n    uint256 treasuryWeight;\\n    uint256 callerWeight;\\n}\\n\\ninterface ITokenEmitter {\\n    event Start();\\n    event TokenEmission(uint256 amount);\\n    event EmissionCutRateUpdated(uint256 rate);\\n    event EmissionRateUpdated(uint256 rate);\\n    event EmissionWeightUpdated(uint256 numberOfPools);\\n    event NewMiningPool(bytes4 poolTypes, address baseToken, address pool);\\n\\n    function start() external;\\n\\n    function distribute() external;\\n\\n    function token() external view returns (address);\\n\\n    function projId() external view returns (uint256);\\n\\n    function poolTypes(address pool) external view returns (bytes4);\\n\\n    function factories(bytes4 poolType) external view returns (address);\\n\\n    function minEmissionRatePerWeek() external view returns (uint256);\\n\\n    function emissionCutRate() external view returns (uint256);\\n\\n    function emission() external view returns (uint256);\\n\\n    function initialContributorPool() external view returns (address);\\n\\n    function initialContributorShare() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function protocolPool() external view returns (address);\\n\\n    function pools(uint256 index) external view returns (address);\\n\\n    function emissionWeight() external view returns (EmissionWeight memory);\\n\\n    function emissionStarted() external view returns (uint256);\\n\\n    function emissionWeekNum() external view returns (uint256);\\n\\n    function INITIAL_EMISSION() external view returns (uint256);\\n\\n    function FOUNDER_SHARE_DENOMINATOR() external view returns (uint256);\\n\\n    function EMISSION_PERIOD() external pure returns (uint256);\\n\\n    function DENOMINATOR() external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/interfaces/IMiningPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IMiningPool {\\n    event Allocated(uint256 amount);\\n    event Dispatched(address indexed user, uint256 numOfMiners);\\n    event Withdrawn(address indexed user, uint256 numOfMiners);\\n    event Mined(address indexed user, uint256 amount);\\n\\n    function initialize(address _tokenEmitter, address _baseToken) external;\\n\\n    function allocate(uint256 amount) external;\\n\\n    function token() external view returns (address);\\n\\n    function tokenEmitter() external view returns (address);\\n\\n    function baseToken() external view returns (address);\\n\\n    function miningEnds() external view returns (uint256);\\n\\n    function miningRate() external view returns (uint256);\\n\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    function lastTimeMiningApplicable() external view returns (uint256);\\n\\n    function tokenPerMiner() external view returns (uint256);\\n\\n    function mined(address account) external view returns (uint256);\\n\\n    function getMineableForPeriod() external view returns (uint256);\\n\\n    function paidTokenPerMiner(address account) external view returns (uint256);\\n\\n    function dispatchedMiners(address account) external view returns (uint256);\\n\\n    function totalMiners() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/pools/ERC1155StakeMiningV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPool.sol\\\";\\n\\ncontract ERC1155StakeMiningV1 is MiningPool, ERC1155Holder {\\n    using SafeMath for uint256;\\n\\n    mapping(address => mapping(uint256 => uint256)) private _staking;\\n\\n    function initialize(address tokenEmitter_, address baseToken_)\\n        public\\n        override\\n    {\\n        super.initialize(tokenEmitter_, baseToken_);\\n        _registerInterface(ERC1155StakeMiningV1(0).stake.selector);\\n        _registerInterface(ERC1155StakeMiningV1(0).mine.selector);\\n        _registerInterface(ERC1155StakeMiningV1(0).withdraw.selector);\\n        _registerInterface(ERC1155StakeMiningV1(0).exit.selector);\\n        _registerInterface(ERC1155StakeMiningV1(0).dispatchableMiners.selector);\\n        _registerInterface(\\n            ERC1155StakeMiningV1(0).erc1155StakeMiningV1.selector\\n        );\\n    }\\n\\n    function stake(uint256 id, uint256 amount) public {\\n        bytes memory zero;\\n        IERC1155(baseToken()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            id,\\n            amount,\\n            zero\\n        );\\n    }\\n\\n    function withdraw(uint256 tokenId, uint256 amount) public {\\n        uint256 staked = _staking[msg.sender][tokenId];\\n        require(staked >= amount, \\\"Withdrawing more than staked.\\\");\\n        _staking[msg.sender][tokenId] = staked - amount;\\n        uint256 miners = dispatchableMiners(tokenId).mul(amount);\\n        _withdrawMiners(miners);\\n        bytes memory zero;\\n        IERC1155(baseToken()).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            tokenId,\\n            amount,\\n            zero\\n        );\\n    }\\n\\n    function mine() public {\\n        _mine();\\n    }\\n\\n    function exit(uint256 tokenId) public {\\n        mine();\\n        withdraw(tokenId, _staking[msg.sender][tokenId]);\\n    }\\n\\n    function _stake(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        _staking[account][tokenId] = _staking[account][tokenId].add(amount);\\n        uint256 miners = dispatchableMiners(tokenId).mul(amount);\\n        _dispatchMiners(account, miners);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata\\n    ) public virtual override returns (bytes4) {\\n        _stake(from, id, value);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) public virtual override returns (bytes4) {\\n        require(ids.length == values.length, \\\"Not a valid input\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _stake(from, ids[i], values[i]);\\n        }\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev override this function if you customize this mining pool\\n     */\\n    function dispatchableMiners(uint256)\\n        public\\n        view\\n        virtual\\n        returns (uint256 numOfMiner)\\n    {\\n        return 1;\\n    }\\n\\n    function erc1155StakeMiningV1() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/pools/InitialContributorShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPool.sol\\\";\\nimport \\\"../../../core/emission/pools/ERC1155BurnMiningV1.sol\\\";\\nimport \\\"../../../core/emission/interfaces/ITokenEmitter.sol\\\";\\n\\ncontract InitialContributorShare is ERC1155BurnMiningV1 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _projId;\\n\\n    function initialize(address tokenEmitter_, address baseToken_)\\n        public\\n        override\\n    {\\n        super.initialize(tokenEmitter_, baseToken_);\\n        _registerInterface(ERC1155BurnMiningV1(0).burn.selector);\\n        _registerInterface(ERC1155BurnMiningV1(0).exit.selector);\\n        _registerInterface(ERC1155BurnMiningV1(0).dispatchableMiners.selector);\\n        _registerInterface(ERC1155BurnMiningV1(0).erc1155BurnMiningV1.selector);\\n        _registerInterface(\\n            InitialContributorShare(0).initialContributorShare.selector\\n        );\\n        _projId = ITokenEmitter(tokenEmitter_).projId();\\n    }\\n\\n    function burn(uint256 amount) public {\\n        burn(_projId, amount);\\n    }\\n\\n    function burn(uint256 projId_, uint256 amount) public override {\\n        require(_projId == projId_);\\n        super.burn(_projId, amount);\\n    }\\n\\n    function exit() public {\\n        exit(_projId);\\n    }\\n\\n    function exit(uint256 projId_) public override {\\n        require(_projId == projId_);\\n        super.exit(_projId);\\n    }\\n\\n    /**\\n     * @dev override this function if you customize this mining pool\\n     */\\n    function dispatchableMiners(uint256 id)\\n        public\\n        view\\n        override\\n        returns (uint256 numOfMiner)\\n    {\\n        if (_projId == id) return 1;\\n        else return 0;\\n    }\\n\\n    function projId() public view returns (uint256) {\\n        return _projId;\\n    }\\n\\n    function initialContributorShare() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/pools/ERC1155BurnMiningV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPool.sol\\\";\\nimport \\\"../../../core/emission/interfaces/ITokenEmitter.sol\\\";\\n\\ncontract ERC1155BurnMiningV1 is MiningPool, ERC1155Holder {\\n    using SafeMath for uint256;\\n\\n    mapping(address => mapping(uint256 => uint256)) private _burned;\\n\\n    function initialize(address tokenEmitter_, address baseToken_)\\n        public\\n        virtual\\n        override\\n    {\\n        super.initialize(tokenEmitter_, baseToken_);\\n        _registerInterface(ERC1155BurnMiningV1(0).burn.selector);\\n        _registerInterface(ERC1155BurnMiningV1(0).exit.selector);\\n        _registerInterface(ERC1155BurnMiningV1(0).dispatchableMiners.selector);\\n        _registerInterface(ERC1155BurnMiningV1(0).erc1155BurnMiningV1.selector);\\n    }\\n\\n    function burn(uint256 tokenId, uint256 amount) public virtual {\\n        _dispatch(msg.sender, tokenId, amount);\\n        ERC1155Burnable(baseToken()).burn(msg.sender, tokenId, amount);\\n    }\\n\\n    function exit(uint256 tokenId) public virtual {\\n        // transfer vision token\\n        _mine();\\n        uint256 burnedAmount = _burned[msg.sender][tokenId];\\n        _burned[msg.sender][tokenId] = 0;\\n        // withdraw all miners for the given token id\\n        uint256 minersToWithdraw =\\n            dispatchableMiners(tokenId).mul(burnedAmount);\\n        _withdrawMiners(minersToWithdraw);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata\\n    ) public virtual override returns (bytes4) {\\n        _dispatch(from, id, value);\\n        ERC1155Burnable(baseToken()).burn(address(this), id, value);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) public virtual override returns (bytes4) {\\n        require(ids.length == values.length, \\\"Not a valid input\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _dispatch(from, ids[i], values[i]);\\n            ERC1155Burnable(baseToken()).burn(address(this), ids[i], values[i]);\\n        }\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev override this function if you customize this mining pool\\n     */\\n    function dispatchableMiners(uint256)\\n        public\\n        view\\n        virtual\\n        returns (uint256 numOfMiner)\\n    {\\n        return 1;\\n    }\\n\\n    function erc1155BurnMiningV1() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function _dispatch(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 minersToDispatch = dispatchableMiners(tokenId).mul(amount);\\n        _dispatchMiners(account, minersToDispatch);\\n        _burned[account][tokenId] = _burned[account][tokenId].add(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/pools/ERC20StakeMiningV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPool.sol\\\";\\n\\ncontract ERC20StakeMiningV1 is MiningPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function initialize(address tokenEmitter_, address baseToken_)\\n        public\\n        override\\n    {\\n        super.initialize(tokenEmitter_, baseToken_);\\n        _registerInterface(ERC20StakeMiningV1(0).stake.selector);\\n        _registerInterface(ERC20StakeMiningV1(0).mine.selector);\\n        _registerInterface(ERC20StakeMiningV1(0).withdraw.selector);\\n        _registerInterface(ERC20StakeMiningV1(0).exit.selector);\\n        _registerInterface(ERC20StakeMiningV1(0).erc20StakeMiningV1.selector);\\n    }\\n\\n    function stake(uint256 amount) public {\\n        IERC20(baseToken()).safeTransferFrom(msg.sender, address(this), amount);\\n        _dispatchMiners(amount);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        _withdrawMiners(amount);\\n        IERC20(baseToken()).safeTransfer(msg.sender, amount);\\n    }\\n\\n    function mine() public {\\n        _mine();\\n    }\\n\\n    function exit() public {\\n        mine();\\n        withdraw(dispatchedMiners(msg.sender));\\n    }\\n\\n    function erc20StakeMiningV1() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/pools/ERC721StakeMiningV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPool.sol\\\";\\n\\ncontract ERC721StakeMiningV1 is MiningPool, ERC721Holder {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    mapping(address => EnumerableSet.UintSet) private _stakedTokensOf;\\n    EnumerableMap.UintToAddressMap private _stakers;\\n\\n    function initialize(address tokenEmitter_, address baseToken_)\\n        public\\n        override\\n    {\\n        super.initialize(tokenEmitter_, baseToken_);\\n        _registerInterface(ERC721StakeMiningV1(0).stake.selector);\\n        _registerInterface(ERC721StakeMiningV1(0).mine.selector);\\n        _registerInterface(ERC721StakeMiningV1(0).withdraw.selector);\\n        _registerInterface(ERC721StakeMiningV1(0).exit.selector);\\n        _registerInterface(ERC721StakeMiningV1(0).dispatchableMiners.selector);\\n        _registerInterface(ERC721StakeMiningV1(0).erc721StakeMiningV1.selector);\\n    }\\n\\n    function stake(uint256 id) public {\\n        IERC721(baseToken()).safeTransferFrom(msg.sender, address(this), id);\\n    }\\n\\n    function withdraw(uint256 tokenId) public {\\n        require(\\n            _stakers.get(tokenId) == msg.sender,\\n            \\\"Only staker can withdraw\\\"\\n        );\\n        _stakedTokensOf[msg.sender].remove(tokenId);\\n        _stakers.remove(tokenId);\\n        uint256 miners = dispatchableMiners(tokenId);\\n        _withdrawMiners(miners);\\n        IERC721(baseToken()).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            tokenId\\n        );\\n    }\\n\\n    function mine() public {\\n        _mine();\\n    }\\n\\n    function exit() public {\\n        mine();\\n        uint256 bal = _stakedTokensOf[msg.sender].length();\\n        for (uint256 i = 0; i < bal; i++) {\\n            uint256 tokenId = _stakedTokensOf[msg.sender].at(i);\\n            withdraw(tokenId);\\n        }\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) public override returns (bytes4) {\\n        _stake(from, tokenId);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev override this function if you customize this mining pool\\n     */\\n    function dispatchableMiners(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint256 numOfMiner)\\n    {\\n        if (IERC721(baseToken()).ownerOf(tokenId) != address(0)) return 1;\\n        else return 0;\\n    }\\n\\n    function erc721StakeMiningV1() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function _stake(address from, uint256 tokenId) internal {\\n        uint256 miners = dispatchableMiners(tokenId);\\n        _stakedTokensOf[from].add(tokenId);\\n        _stakers.set(tokenId, from);\\n        _dispatchMiners(from, miners);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/libraries/PoolType.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport {\\n    ERC20BurnMiningV1 as _ERC20BurnMiningV1\\n} from \\\"../../../core/emission/pools/ERC20BurnMiningV1.sol\\\";\\nimport {\\n    ERC20StakeMiningV1 as _ERC20StakeMiningV1\\n} from \\\"../../../core/emission/pools/ERC20StakeMiningV1.sol\\\";\\nimport {\\n    ERC721StakeMiningV1 as _ERC721StakeMiningV1\\n} from \\\"../../../core/emission/pools/ERC721StakeMiningV1.sol\\\";\\nimport {\\n    ERC1155StakeMiningV1 as _ERC1155StakeMiningV1\\n} from \\\"../../../core/emission/pools/ERC1155StakeMiningV1.sol\\\";\\nimport {\\n    ERC1155BurnMiningV1 as _ERC1155BurnMiningV1\\n} from \\\"../../../core/emission/pools/ERC1155BurnMiningV1.sol\\\";\\nimport {\\n    InitialContributorShare as _InitialContributorShare\\n} from \\\"../../../core/emission/pools/InitialContributorShare.sol\\\";\\n\\nlibrary PoolType {\\n    bytes4 public constant ERC20BurnMiningV1 =\\n        _ERC20BurnMiningV1(0).erc20BurnMiningV1.selector;\\n    bytes4 public constant ERC20StakeMiningV1 =\\n        _ERC20StakeMiningV1(0).erc20StakeMiningV1.selector;\\n    bytes4 public constant ERC721StakeMiningV1 =\\n        _ERC721StakeMiningV1(0).erc721StakeMiningV1.selector;\\n    bytes4 public constant ERC1155StakeMiningV1 =\\n        _ERC1155StakeMiningV1(0).erc1155StakeMiningV1.selector;\\n    bytes4 public constant ERC1155BurnMiningV1 =\\n        _ERC1155BurnMiningV1(0).erc1155BurnMiningV1.selector;\\n    bytes4 public constant InitialContributorShare =\\n        _InitialContributorShare(0).initialContributorShare.selector;\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/libraries/MiningPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../../core/emission/interfaces/IMiningPoolFactory.sol\\\";\\nimport \\\"../../../core/emission/interfaces/IMiningPool.sol\\\";\\n\\nabstract contract MiningPoolFactory is IMiningPoolFactory, ERC165 {\\n    using Clones for address;\\n\\n    address private _controller;\\n\\n    constructor() ERC165() {\\n        _registerInterface(IMiningPoolFactory(0).newPool.selector);\\n        _registerInterface(IMiningPoolFactory(0).poolType.selector);\\n    }\\n\\n    function _setController(address controller_) internal {\\n        _controller = controller_;\\n    }\\n\\n    function newPool(address emitter, address baseToken)\\n        public\\n        virtual\\n        override\\n        returns (address pool)\\n    {\\n        address predicted = this.poolAddress(emitter, baseToken);\\n        if (_isDeployed(predicted)) {\\n            // already deployed;\\n            return predicted;\\n        } else {\\n            // not deployed;\\n            bytes32 salt = keccak256(abi.encodePacked(emitter, baseToken));\\n            pool = _controller.cloneDeterministic(salt);\\n            require(\\n                predicted == pool,\\n                \\\"Different result. This factory has a serious problem.\\\"\\n            );\\n            IMiningPool(pool).initialize(emitter, baseToken);\\n            emit NewMiningPool(emitter, baseToken, pool);\\n            return pool;\\n        }\\n    }\\n\\n    function controller() public view override returns (address) {\\n        return _controller;\\n    }\\n\\n    function getPool(address emitter, address baseToken)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address predicted = this.poolAddress(emitter, baseToken);\\n        return _isDeployed(predicted) ? predicted : address(0);\\n    }\\n\\n    function poolAddress(address emitter, address baseToken)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address pool)\\n    {\\n        bytes32 salt = keccak256(abi.encodePacked(emitter, baseToken));\\n        pool = _controller.predictDeterministicAddress(salt);\\n    }\\n\\n    function _isDeployed(address pool) private view returns (bool) {\\n        return Address.isContract(pool);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/interfaces/IMiningPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IMiningPoolFactory {\\n    event NewMiningPool(\\n        address _emitter,\\n        address _stakingToken,\\n        address _poolAddress\\n    );\\n\\n    function newPool(address _emitter, address _baseToken)\\n        external\\n        returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function getPool(address _emitter, address _baseToken)\\n        external\\n        view\\n        returns (address);\\n\\n    function poolType() external view returns (bytes4);\\n\\n    function poolAddress(address _emitter, address _baseToken)\\n        external\\n        view\\n        returns (address _pool);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/libraries/TokenEmitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\n// This contract referenced Sushi's MasterChef.sol logic\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../../core/emission/interfaces/ITokenEmitter.sol\\\";\\nimport \\\"../../../core/emission/interfaces/IMiningPool.sol\\\";\\nimport \\\"../../../core/emission/interfaces/IMiningPoolFactory.sol\\\";\\nimport \\\"../../../core/emission/libraries/PoolType.sol\\\";\\nimport \\\"../../../core/governance/Governed.sol\\\";\\nimport \\\"../../../core/dividend/interfaces/IDividendPool.sol\\\";\\nimport \\\"../../../utils/IERC20Mintable.sol\\\";\\nimport \\\"../../../utils/Utils.sol\\\";\\nimport \\\"../../../utils/ERC20Recoverer.sol\\\";\\n\\ncontract TokenEmitter is\\n    Governed,\\n    ReentrancyGuard,\\n    ITokenEmitter,\\n    Initializable,\\n    ERC20Recoverer\\n{\\n    using ERC165Checker for address;\\n    using SafeMath for uint256;\\n    using Utils for bytes4[];\\n\\n    uint256 public constant override DENOMINATOR = 10000;\\n    uint256 public constant override EMISSION_PERIOD = 1 weeks;\\n    uint256 private _INITIAL_EMISSION;\\n    uint256 private _FOUNDER_SHARE_DENOMINATOR;\\n\\n    address private _token;\\n    uint256 private _minEmissionRatePerWeek = 60; // 0.006 per week ~= 36% yearly inflation\\n    uint256 private _emissionCutRate = 3000; // 30%\\n    uint256 private _emission;\\n\\n    address private _initialContributorPool;\\n    address private _initialContributorShare;\\n    address private _treasury;\\n    address private _protocolPool;\\n    uint256 private _startDelay;\\n\\n    mapping(bytes4 => address) private _factories;\\n\\n    mapping(address => bytes4) private _poolTypes;\\n\\n    EmissionWeight private _emissionWeight;\\n\\n    uint256 private _emissionStarted;\\n\\n    uint256 private _emissionWeekNum;\\n\\n    uint256 private _projId;\\n\\n    function initialize(EmitterConfig memory params) public initializer {\\n        require(params.treasury != address(0), \\\"Should not be zero\\\");\\n        Governed.initialize(msg.sender);\\n        // set params\\n        _projId = params.projId;\\n        _INITIAL_EMISSION = params.initialEmission;\\n        _emission = params.initialEmission;\\n        _minEmissionRatePerWeek = params.minEmissionRatePerWeek;\\n        _emissionCutRate = params.emissionCutRate;\\n        _protocolPool = params.protocolPool;\\n        _startDelay = params.startDelay;\\n        // set contract addresses\\n        _token = params.token;\\n        setTreasury(params.treasury);\\n        require(params.founderShareRate < DENOMINATOR);\\n        _FOUNDER_SHARE_DENOMINATOR = params.founderShareRate != 0\\n            ? DENOMINATOR / params.founderShareRate\\n            : 0;\\n        ERC20Recoverer.initialize(params.gov, new address[](0));\\n        setFactory(params.erc20BurnMiningFactory);\\n        setFactory(params.erc20StakeMiningFactory);\\n        setFactory(params.erc721StakeMiningFactory);\\n        setFactory(params.erc1155StakeMiningFactory);\\n        setFactory(params.erc1155BurnMiningFactory);\\n        setFactory(params.initialContributorShareFactory);\\n        address initialContributorPool_ =\\n            newPool(PoolType.InitialContributorShare, params.contributionBoard);\\n        _initialContributorPool = initialContributorPool_;\\n        _initialContributorShare = params.contributionBoard;\\n        Governed.setGovernance(params.gov);\\n    }\\n\\n    /**\\n     * StakeMiningV1:\\n     */\\n    function newPool(bytes4 poolType, address token_) public returns (address) {\\n        address factory = _factories[poolType];\\n        require(factory != address(0), \\\"Factory not exists\\\");\\n        address _pool =\\n            IMiningPoolFactory(factory).getPool(address(this), token_);\\n        if (_pool == address(0)) {\\n            _pool = IMiningPoolFactory(factory).newPool(address(this), token_);\\n        }\\n        require(\\n            _pool.supportsInterface(poolType),\\n            \\\"Does not have the given pool type\\\"\\n        );\\n        require(\\n            _pool.supportsInterface(IMiningPool(0).allocate.selector),\\n            \\\"Cannot allocate reward\\\"\\n        );\\n        require(_poolTypes[_pool] == bytes4(0), \\\"Pool already exists\\\");\\n        _poolTypes[_pool] = poolType;\\n        emit NewMiningPool(poolType, token_, _pool);\\n        return _pool;\\n    }\\n\\n    function setEmission(MiningConfig memory config) public governed {\\n        require(config.treasuryWeight < 1e4, \\\"prevent overflow\\\");\\n        require(config.callerWeight < 1e4, \\\"prevent overflow\\\");\\n        // starting the summation with treasury and caller weights\\n        uint256 _sum = config.treasuryWeight + config.callerWeight;\\n        // prepare list to store\\n        address[] memory _pools = new address[](config.pools.length);\\n        uint256[] memory _weights = new uint256[](config.pools.length);\\n        // deploy pool if not the pool exists and do the weight summation\\n        // udpate the pool & weight arr on memory\\n        for (uint256 i = 0; i < config.pools.length; i++) {\\n            address _pool =\\n                _getOrDeployPool(\\n                    config.pools[i].poolType,\\n                    config.pools[i].baseToken\\n                );\\n            require(\\n                _poolTypes[_pool] != bytes4(0),\\n                \\\"Not a deployed mining pool\\\"\\n            );\\n            require(config.pools[i].weight < 1e4, \\\"prevent overflow\\\");\\n            _weights[i] = config.pools[i].weight;\\n            _pools[i] = _pool;\\n            _sum += config.pools[i].weight; // doesn't overflow\\n        }\\n        // compute the founder share\\n        uint256 _dev =\\n            _FOUNDER_SHARE_DENOMINATOR != 0\\n                ? _sum / _FOUNDER_SHARE_DENOMINATOR\\n                : 0; // doesn't overflow;\\n        _sum += _dev;\\n        // compute the protocol share\\n        uint256 _protocol = _protocolPool == address(0) ? 0 : _sum / 33;\\n        _sum += _protocol;\\n        // store the updated emission weight\\n        _emissionWeight = EmissionWeight(\\n            _pools,\\n            _weights,\\n            config.treasuryWeight,\\n            config.callerWeight,\\n            _protocol,\\n            _dev,\\n            _sum\\n        );\\n        emit EmissionWeightUpdated(_pools.length);\\n    }\\n\\n    function setFactory(address factory) public governed {\\n        bytes4[] memory interfaces = new bytes4[](2);\\n        interfaces[0] = IMiningPoolFactory(0).newPool.selector;\\n        interfaces[1] = IMiningPoolFactory(0).poolType.selector;\\n        require(\\n            factory.supportsAllInterfaces(interfaces),\\n            \\\"Not a valid factory\\\"\\n        );\\n        bytes4 _sig = IMiningPoolFactory(factory).poolType();\\n        require(_factories[_sig] == address(0), \\\"Factory already exists.\\\");\\n        _factories[_sig] = factory;\\n    }\\n\\n    function setTreasury(address treasury_) public governed {\\n        _treasury = treasury_;\\n    }\\n\\n    function start() public override governed {\\n        require(_emissionStarted == 0, \\\"Already started\\\");\\n        _emissionStarted = block.timestamp.add(_startDelay).sub(1 weeks);\\n        emit Start();\\n    }\\n\\n    function setEmissionCutRate(uint256 rate) public governed {\\n        require(\\n            1000 <= rate && rate <= 9000,\\n            \\\"Emission cut should be greater than 10% and less than 90%\\\"\\n        );\\n        _emissionCutRate = rate;\\n        emit EmissionCutRateUpdated(rate);\\n    }\\n\\n    function setMinimumRate(uint256 rate) public governed {\\n        require(\\n            rate <= 134,\\n            \\\"Protect from the superinflationary(99.8% per year) situation\\\"\\n        );\\n        _minEmissionRatePerWeek = rate;\\n        emit EmissionRateUpdated(rate);\\n    }\\n\\n    function distribute() public override nonReentrant {\\n        // current week from the mining start;\\n        uint256 weekNum =\\n            block.timestamp.sub(_emissionStarted).div(EMISSION_PERIOD);\\n        // The first token token drop will be started a week after the \\\"start\\\" func called.\\n        require(\\n            weekNum > _emissionWeekNum,\\n            \\\"Already minted or not started yet.\\\"\\n        );\\n        // update emission week num\\n        _emissionWeekNum = weekNum;\\n        // allocate to mining pools\\n        uint256 weightSum = _emissionWeight.sum;\\n        uint256 prevSupply = IERC20(_token).totalSupply();\\n        for (uint256 i = 0; i < _emissionWeight.pools.length; i++) {\\n            require(i < _emissionWeight.pools.length, \\\"out of index\\\");\\n            uint256 weighted =\\n                _emissionWeight.weights[i].mul(_emission).div(weightSum);\\n            _mintAndNotifyAllocation(_emissionWeight.pools[i], weighted);\\n        }\\n        // Caller\\n        IERC20Mintable(_token).mint(\\n            msg.sender,\\n            _emissionWeight.caller.mul(_emission).div(weightSum)\\n        );\\n        if (_treasury != address(0)) {\\n            // Protocol fund(protocol treasury)\\n            IERC20Mintable(_token).mint(\\n                _treasury,\\n                _emissionWeight.treasury.mul(_emission).div(weightSum)\\n            );\\n        }\\n        // Protocol\\n        if (_protocolPool != address(0)) {\\n            IERC20Mintable(_token).mint(\\n                _protocolPool,\\n                _emissionWeight.protocol.mul(_emission).div(weightSum)\\n            );\\n            // balance diff automatically distributed. no approval needed\\n            IDividendPool(_protocolPool).distribute(_token, 0);\\n        }\\n        if (_initialContributorPool != address(0)) {\\n            // Founder\\n            _mintAndNotifyAllocation(\\n                _initialContributorPool,\\n                _emission.sub(IERC20(_token).totalSupply().sub(prevSupply))\\n            );\\n        }\\n        emit TokenEmission(_emission);\\n        _updateEmission();\\n    }\\n\\n    function getNumberOfPools() public view returns (uint256) {\\n        return _emissionWeight.pools.length;\\n    }\\n\\n    function getPoolWeight(uint256 poolIndex) public view returns (uint256) {\\n        return _emissionWeight.weights[poolIndex];\\n    }\\n\\n    function token() public view override returns (address) {\\n        return _token;\\n    }\\n\\n    function minEmissionRatePerWeek() public view override returns (uint256) {\\n        return _minEmissionRatePerWeek;\\n    }\\n\\n    function emissionCutRate() public view override returns (uint256) {\\n        return _emissionCutRate;\\n    }\\n\\n    function emission() public view override returns (uint256) {\\n        return _emission;\\n    }\\n\\n    function initialContributorPool() public view override returns (address) {\\n        return _initialContributorPool;\\n    }\\n\\n    function initialContributorShare() public view override returns (address) {\\n        return _initialContributorShare;\\n    }\\n\\n    function treasury() public view override returns (address) {\\n        return _treasury;\\n    }\\n\\n    function protocolPool() public view override returns (address) {\\n        return _protocolPool;\\n    }\\n\\n    function pools(uint256 index) public view override returns (address) {\\n        return _emissionWeight.pools[index];\\n    }\\n\\n    function emissionWeight()\\n        public\\n        view\\n        override\\n        returns (EmissionWeight memory)\\n    {\\n        return _emissionWeight;\\n    }\\n\\n    function emissionStarted() public view override returns (uint256) {\\n        return _emissionStarted;\\n    }\\n\\n    function emissionWeekNum() public view override returns (uint256) {\\n        return _emissionWeekNum;\\n    }\\n\\n    function projId() public view override returns (uint256) {\\n        return _projId;\\n    }\\n\\n    function poolTypes(address pool) public view override returns (bytes4) {\\n        return _poolTypes[pool];\\n    }\\n\\n    function factories(bytes4 poolType) public view override returns (address) {\\n        return _factories[poolType];\\n    }\\n\\n    function INITIAL_EMISSION() public view override returns (uint256) {\\n        return _INITIAL_EMISSION;\\n    }\\n\\n    function FOUNDER_SHARE_DENOMINATOR()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _FOUNDER_SHARE_DENOMINATOR;\\n    }\\n\\n    function _mintAndNotifyAllocation(address miningPool, uint256 amount)\\n        private\\n    {\\n        IERC20Mintable(_token).mint(address(miningPool), amount);\\n        try IMiningPool(miningPool).allocate(amount) {\\n            // success\\n        } catch {\\n            // pool does not handled the emission\\n        }\\n    }\\n\\n    function _updateEmission() private returns (uint256) {\\n        // Minimum emission 0.05% per week will make 2.63% of inflation per year\\n        uint256 minEmission =\\n            IERC20(_token).totalSupply().mul(_minEmissionRatePerWeek).div(\\n                DENOMINATOR\\n            );\\n        // Emission will be continuously halved until it reaches to its minimum emission. It will be about 10 weeks.\\n        uint256 cutEmission =\\n            _emission.mul(DENOMINATOR.sub(_emissionCutRate)).div(DENOMINATOR);\\n        _emission = Math.max(cutEmission, minEmission);\\n        return _emission;\\n    }\\n\\n    function _getOrDeployPool(bytes4 poolType, address baseToken)\\n        internal\\n        returns (address _pool)\\n    {\\n        address _factory = _factories[poolType];\\n        require(_factory != address(0), \\\"Factory not exists\\\");\\n        // get predicted pool address\\n        _pool = IMiningPoolFactory(_factory).poolAddress(\\n            address(this),\\n            baseToken\\n        );\\n        if (_poolTypes[_pool] == poolType) {\\n            // pool is registered successfully\\n            return _pool;\\n        } else {\\n            // try to deploy new pool and register\\n            return newPool(poolType, baseToken);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/Governed.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Utils.sol\\\";\\n\\ncontract Governed {\\n    using Utils for address[];\\n\\n    bool private _initialized;\\n    address internal _gov;\\n    uint256 private _anarchizedAt = 0;\\n    uint256 private _forceAnarchizeAt = 0;\\n\\n    event NewGovernance(\\n        address indexed _prevGovernance,\\n        address indexed _newGovernance\\n    );\\n    event Anarchized();\\n\\n    constructor() {}\\n\\n    modifier governed {\\n        require(msg.sender == _gov, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    function initialize(address gov_) public {\\n        require(!_initialized, \\\"Initialized\\\");\\n        _initialized = true;\\n        _gov = gov_;\\n    }\\n\\n    function setGovernance(address gov_) public governed {\\n        require(gov_ != address(0), \\\"Use anarchize() instead.\\\");\\n        _setGovernance(gov_);\\n    }\\n\\n    function setAnarchyPoint(uint256 timestamp) public governed {\\n        require(_forceAnarchizeAt == 0, \\\"Cannot update.\\\");\\n        require(\\n            timestamp >= block.timestamp,\\n            \\\"Timepoint should be in the future.\\\"\\n        );\\n        _forceAnarchizeAt = timestamp;\\n    }\\n\\n    function anarchize() public governed {\\n        _anarchize();\\n    }\\n\\n    function forceAnarchize() public {\\n        require(_forceAnarchizeAt != 0, \\\"Cannot disband the gov\\\");\\n        require(block.timestamp >= _forceAnarchizeAt, \\\"Cannot disband the gov\\\");\\n        _anarchize();\\n    }\\n\\n    function gov() public view returns (address) {\\n        return _gov;\\n    }\\n\\n    function anarchizedAt() public view returns (uint256) {\\n        return _anarchizedAt;\\n    }\\n\\n    function forceAnarchizeAt() public view returns (uint256) {\\n        return _forceAnarchizeAt;\\n    }\\n\\n    function _anarchize() internal {\\n        _setGovernance(address(0));\\n        _anarchizedAt = block.timestamp;\\n        emit Anarchized();\\n    }\\n\\n    function _setGovernance(address gov_) internal {\\n        emit NewGovernance(_gov, gov_);\\n        _gov = gov_;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/dividend/interfaces/IDividendPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IDividendPool {\\n    function distribute(address token, uint256 amount) external;\\n\\n    function veVISION() external view returns (address);\\n\\n    function veLocker() external view returns (address);\\n\\n    function genesis() external view returns (uint256);\\n\\n    function getEpoch(uint256 timestamp) external view returns (uint256);\\n\\n    function getCurrentEpoch() external view returns (uint256);\\n\\n    function distributedTokens() external view returns (address[] memory);\\n\\n    function totalDistributed(address token) external view returns (uint256);\\n\\n    function distributionBalance(address token) external view returns (uint256);\\n\\n    function distributionOfWeek(address token, uint256 epochNum)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimStartWeek(address token, uint256 veLockId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimable(address token) external view returns (uint256);\\n\\n    function featuredRewards() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/VisionEmitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\n// This contract referenced Sushi's MasterChef.sol logic\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../core/emission/libraries/TokenEmitter.sol\\\";\\nimport \\\"../../core/tokens/VISION.sol\\\";\\n\\ncontract VisionEmitter is TokenEmitter {}\\n\"\r\n    },\r\n    \"./contracts/core/tokens/VISION.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../core/governance/Governed.sol\\\";\\n\\ncontract VISION is ERC20, Governed, Initializable {\\n    address private _minter;\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {\\n        // this constructor will not be called since it'll be cloned by proxy pattern.\\n        // initalize() will be called instead.\\n    }\\n\\n    modifier onlyMinter {\\n        require(msg.sender == _minter, \\\"Not a minter\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address minter_,\\n        address gov_\\n    ) public initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _minter = minter_;\\n        Governed.initialize(gov_);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyMinter {\\n        _mint(to, amount);\\n    }\\n\\n    function setMinter(address minter_) public governed {\\n        _setMinter(minter_);\\n    }\\n\\n    function _setMinter(address minter_) internal {\\n        _minter = minter_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function minter() public view returns (address) {\\n        return _minter;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/interfaces/IBurnMiningPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IMiningPool {\\n    function allocate(uint256 amount) external;\\n\\n    function setMiningPeriod(uint256 period) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/factories/ERC1155StakeMiningV1Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\nimport \\\"../../../core/emission/pools/ERC1155StakeMiningV1.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPoolFactory.sol\\\";\\n\\ncontract ERC1155StakeMiningV1Factory is MiningPoolFactory {\\n    using ERC165Checker for address;\\n    /*\\n     *     // copied from openzeppelin ERC1155 spec impl\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    bytes4 public override poolType =\\n        ERC1155StakeMiningV1(0).erc1155StakeMiningV1.selector;\\n\\n    constructor() MiningPoolFactory() {\\n        address _controller = address(new ERC1155StakeMiningV1());\\n        _setController(_controller);\\n    }\\n\\n    function newPool(address _emitter, address _stakingToken)\\n        public\\n        override\\n        returns (address _pool)\\n    {\\n        require(\\n            _stakingToken.supportsInterface(_INTERFACE_ID_ERC1155),\\n            \\\"Not an ERC1155\\\"\\n        );\\n        return super.newPool(_emitter, _stakingToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/factories/ERC20BurnMiningV1Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../core/emission/pools/ERC20BurnMiningV1.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPoolFactory.sol\\\";\\n\\ncontract ERC20BurnMiningV1Factory is MiningPoolFactory {\\n    bytes4 public override poolType =\\n        ERC20BurnMiningV1(0).erc20BurnMiningV1.selector;\\n\\n    constructor() MiningPoolFactory() {\\n        address _controller = address(new ERC20BurnMiningV1());\\n        _setController(_controller);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/factories/ERC721StakeMiningV1Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\nimport \\\"../../../core/emission/pools/ERC721StakeMiningV1.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPoolFactory.sol\\\";\\n\\ncontract ERC721StakeMiningV1Factory is MiningPoolFactory {\\n    using ERC165Checker for address;\\n    /*\\n     *     // copied from openzeppelin ERC721 spec impl\\n     *\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    bytes4 public override poolType =\\n        ERC721StakeMiningV1(0).erc721StakeMiningV1.selector;\\n\\n    constructor() MiningPoolFactory() {\\n        address _controller = address(new ERC721StakeMiningV1());\\n        _setController(_controller);\\n    }\\n\\n    function newPool(address _emitter, address _stakingToken)\\n        public\\n        override\\n        returns (address _pool)\\n    {\\n        require(\\n            _stakingToken.supportsInterface(_INTERFACE_ID_ERC721),\\n            \\\"Not an ERC721\\\"\\n        );\\n        return super.newPool(_emitter, _stakingToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/factories/InitialContributorShareFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPoolFactory.sol\\\";\\nimport \\\"../../../core/emission/pools/InitialContributorShare.sol\\\";\\n\\ncontract InitialContributorShareFactory is MiningPoolFactory {\\n    using ERC165Checker for address;\\n    /*\\n     *     // copied from openzeppelin ERC1155 spec impl\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    bytes4 public override poolType =\\n        InitialContributorShare(0).initialContributorShare.selector;\\n\\n    constructor() MiningPoolFactory() {\\n        address _controller = address(new InitialContributorShare());\\n        _setController(_controller);\\n    }\\n\\n    function newPool(address _emitter, address _contributionBoard)\\n        public\\n        override\\n        returns (address _pool)\\n    {\\n        require(\\n            _contributionBoard.supportsInterface(_INTERFACE_ID_ERC1155),\\n            \\\"Not an ERC1155\\\"\\n        );\\n        return super.newPool(_emitter, _contributionBoard);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/factories/ERC20StakeMiningV1Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../core/emission/pools/ERC20StakeMiningV1.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPoolFactory.sol\\\";\\n\\ncontract ERC20StakeMiningV1Factory is MiningPoolFactory {\\n    bytes4 public override poolType =\\n        ERC20StakeMiningV1(0).erc20StakeMiningV1.selector;\\n\\n    constructor() MiningPoolFactory() {\\n        address _controller = address(new ERC20StakeMiningV1());\\n        _setController(_controller);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/emission/factories/ERC1155BurnMiningV1Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\nimport \\\"../../../core/emission/pools/ERC1155BurnMiningV1.sol\\\";\\nimport \\\"../../../core/emission/libraries/MiningPoolFactory.sol\\\";\\n\\ncontract ERC1155BurnMiningV1Factory is MiningPoolFactory {\\n    using ERC165Checker for address;\\n    /*\\n     *     // copied from openzeppelin ERC1155 spec impl\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    bytes4 public override poolType =\\n        ERC1155BurnMiningV1(0).erc1155BurnMiningV1.selector;\\n\\n    constructor() MiningPoolFactory() {\\n        address _controller = address(new ERC1155BurnMiningV1());\\n        _setController(_controller);\\n    }\\n\\n    function newPool(address _emitter, address _burningToken)\\n        public\\n        override\\n        returns (address _pool)\\n    {\\n        require(\\n            _burningToken.supportsInterface(_INTERFACE_ID_ERC1155),\\n            \\\"Not an ERC1155\\\"\\n        );\\n        return super.newPool(_emitter, _burningToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/project/Project.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../../core/tokens/VISION.sol\\\";\\nimport \\\"../../core/tokens/COMMIT.sol\\\";\\nimport \\\"../../core/tokens/RIGHT.sol\\\";\\nimport \\\"../../core/work/StableReserve.sol\\\";\\nimport \\\"../../core/work/ContributionBoard.sol\\\";\\nimport \\\"../../core/work/interfaces/IContributionBoard.sol\\\";\\nimport \\\"../../core/governance/TimelockedGovernance.sol\\\";\\nimport \\\"../../core/governance/WorkersUnion.sol\\\";\\nimport \\\"../../core/governance/libraries/VoteCounter.sol\\\";\\nimport \\\"../../core/governance/libraries/VotingEscrowLock.sol\\\";\\nimport \\\"../../core/dividend/DividendPool.sol\\\";\\nimport \\\"../../core/emission/VisionEmitter.sol\\\";\\nimport \\\"../../core/emission/factories/ERC20BurnMiningV1Factory.sol\\\";\\nimport \\\"../../core/emission/libraries/PoolType.sol\\\";\\nimport \\\"../../core/marketplace/Marketplace.sol\\\";\\n\\ncontract Project is ERC721, ERC20Recoverer {\\n    using Clones for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    struct DAO {\\n        address multisig;\\n        address baseCurrency;\\n        address timelock;\\n        address vision;\\n        address commit;\\n        address right;\\n        address stableReserve;\\n        address contributionBoard;\\n        address marketplace;\\n        address dividendPool;\\n        address voteCounter;\\n        address workersUnion;\\n        address visionEmitter;\\n        address votingEscrow;\\n    }\\n\\n    struct CommonContracts {\\n        address pool2Factory;\\n        address weth;\\n        address sablier;\\n        address erc20StakeMiningV1Factory;\\n        address erc20BurnMiningV1Factory;\\n        address erc721StakeMiningV1Factory;\\n        address erc1155StakeMiningV1Factory;\\n        address erc1155BurnMiningV1Factory;\\n        address initialContributorShareFactory;\\n    }\\n\\n    struct CloneParams {\\n        address multisig;\\n        address treasury;\\n        address baseCurrency;\\n        // Project\\n        string projectName;\\n        string projectSymbol;\\n        // tokens\\n        string visionName;\\n        string visionSymbol;\\n        string commitName;\\n        string commitSymbol;\\n        string rightName;\\n        string rightSymbol;\\n        uint256 emissionStartDelay;\\n        uint256 minDelay; // timelock\\n        uint256 voteLaunchDelay;\\n        uint256 initialEmission;\\n        uint256 minEmissionRatePerWeek;\\n        uint256 emissionCutRate;\\n        uint256 founderShare;\\n    }\\n\\n    // Metadata for each project\\n    mapping(uint256 => uint256) private _growth;\\n    mapping(uint256 => string) private _nameOf;\\n    mapping(uint256 => string) private _symbolOf;\\n    mapping(uint256 => bool) private _immortalized;\\n\\n    // Common contracts and controller(not upgradeable)\\n    CommonContracts private _commons;\\n    DAO private _controller;\\n\\n    // Launched DAO's contracts\\n    mapping(uint256 => DAO) private _dao;\\n    uint256[] private _allDAOs;\\n\\n    mapping(address => uint256) private _daoAddressBook;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address => EnumerableSet.UintSet) private _daoProjects; // timelock will be the pointing contract\\n    EnumerableMap.UintToAddressMap private _belongsTo;\\n    uint256 private projNum;\\n\\n    event DAOLaunched(uint256 id);\\n    event NewProject(uint256 indexed daoId, uint256 id);\\n    event ProjectMoved(uint256 indexed from, uint256 indexed to);\\n\\n    constructor(DAO memory controller, CommonContracts memory commons)\\n        ERC721(\\\"WORKHARD DAO\\\", \\\"WORKHARD\\\")\\n    {\\n        _setBaseURI(\\\"ipfs://\\\");\\n        _controller = controller;\\n        _commons = commons;\\n        uint256 masterDAOId = 0;\\n        address masterTimelock =\\n            Clones.predictDeterministicAddress(\\n                controller.timelock,\\n                bytes32(masterDAOId),\\n                address(this)\\n            );\\n        createProject(\\n            masterDAOId,\\n            \\\"QmTFKqcLx9utcxSDLbfWicLnUDFACbrGjcQ6Yhz13qWDqS\\\"\\n        );\\n        ERC20Recoverer.initialize(masterTimelock, new address[](0));\\n    }\\n\\n    modifier onlyOwnerOf(uint256 id) {\\n        require(msg.sender == ownerOf(id), \\\"Not the project owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Creating a project for another forked DAO.\\n     */\\n    function createProject(uint256 daoId, string memory uri)\\n        public\\n        returns (uint256 id)\\n    {\\n        id = projNum;\\n        projNum++;\\n        require(_growth[id] < 1, \\\"Already created.\\\");\\n        require(\\n            daoId == 0 || _growth[daoId] == 4,\\n            \\\"Parent project should be a DAO.\\\"\\n        );\\n        _growth[id] = 1;\\n        _mint(msg.sender, id);\\n        _setTokenURI(id, uri);\\n        address daoAddress = _getGovAddressOfDAO(daoId);\\n        _daoProjects[daoAddress].add(id);\\n        _belongsTo.set(id, daoAddress);\\n        emit NewProject(daoId, id);\\n        return id;\\n    }\\n\\n    function upgradeToDAO(uint256 id, CloneParams memory params)\\n        public\\n        onlyOwnerOf(id)\\n    {\\n        require(_dao[id].vision == address(0), \\\"Already upgraded.\\\");\\n        _deploy(id);\\n        _initialize(id, params);\\n        _daoAddressBook[_getGovAddressOfDAO(id)] = id;\\n        // Now it does not belong to any dao. A new dao!\\n        _daoProjects[_belongsTo.get(id, \\\"owner query for nonexistent token\\\")]\\n            .remove(id);\\n        _belongsTo.remove(id);\\n        _nameOf[id] = params.projectName;\\n        _symbolOf[id] = params.projectSymbol;\\n        emit DAOLaunched(id);\\n        _allDAOs.push(id);\\n    }\\n\\n    function launch(\\n        uint256 id,\\n        uint256 liquidityMiningRate,\\n        uint256 commitMiningRate,\\n        uint256 treasury,\\n        uint256 caller\\n    ) public onlyOwnerOf(id) {\\n        // 1. deploy sushi LP\\n        DAO storage fork = _dao[id];\\n        address lp =\\n            IUniswapV2Factory(_commons.pool2Factory).getPair(\\n                fork.vision,\\n                _commons.weth\\n            );\\n        if (lp == address(0)) {\\n            IUniswapV2Factory(_commons.pool2Factory).createPair(\\n                fork.vision,\\n                _commons.weth\\n            );\\n            lp = IUniswapV2Factory(_commons.pool2Factory).getPair(\\n                fork.vision,\\n                _commons.weth\\n            );\\n        }\\n        MiningConfig memory miningConfig;\\n        miningConfig.pools = new MiningPoolConfig[](2);\\n        miningConfig.pools[0] = MiningPoolConfig(\\n            liquidityMiningRate,\\n            PoolType.ERC20StakeMiningV1,\\n            lp\\n        );\\n        miningConfig.pools[1] = MiningPoolConfig(\\n            commitMiningRate,\\n            PoolType.ERC20BurnMiningV1,\\n            fork.commit\\n        );\\n        miningConfig.treasuryWeight = treasury;\\n        miningConfig.callerWeight = caller;\\n        _launch(id, miningConfig);\\n    }\\n\\n    function immortalize(uint256 id) public onlyOwnerOf(id) {\\n        _immortalized[id] = true;\\n    }\\n\\n    function updateURI(uint256 id, string memory uri) public onlyOwnerOf(id) {\\n        require(!_immortalized[id], \\\"This project is immortalized.\\\");\\n        _setTokenURI(id, uri);\\n    }\\n\\n    function changeMultisig(uint256 id, address newMultisig) public {\\n        require(\\n            msg.sender == _dao[id].multisig,\\n            \\\"Only the prev owner can change this value.\\\"\\n        );\\n        _dao[id].multisig = newMultisig;\\n    }\\n\\n    function growth(uint256 id) public view returns (uint256) {\\n        return _growth[id];\\n    }\\n\\n    function nameOf(uint256 id) public view returns (string memory) {\\n        return _nameOf[id];\\n    }\\n\\n    function symbolOf(uint256 id) public view returns (string memory) {\\n        return _symbolOf[id];\\n    }\\n\\n    function immortalized(uint256 id) public view returns (bool) {\\n        return _immortalized[id];\\n    }\\n\\n    function daoOf(uint256 id) public view returns (uint256 daoId) {\\n        address daoAddress =\\n            _belongsTo.get(id, \\\"owner query for nonexistent token\\\");\\n        return _getDAOIdOfGov(daoAddress);\\n    }\\n\\n    function projectsOf(uint256 daoId) public view returns (uint256 len) {\\n        return _daoProjects[_getGovAddressOfDAO(daoId)].length();\\n    }\\n\\n    function projectsOfDAOByIndex(uint256 daoId, uint256 index)\\n        public\\n        view\\n        returns (uint256 id)\\n    {\\n        return _daoProjects[_getGovAddressOfDAO(daoId)].at(index);\\n    }\\n\\n    function getMasterDAO() public view returns (DAO memory) {\\n        return _dao[0];\\n    }\\n\\n    function getCommons() public view returns (CommonContracts memory) {\\n        return _commons;\\n    }\\n\\n    function getDAO(uint256 id) public view returns (DAO memory) {\\n        return _dao[id];\\n    }\\n\\n    function getAllDAOs() public view returns (uint256[] memory) {\\n        return _allDAOs;\\n    }\\n\\n    function getController() public view returns (DAO memory) {\\n        return _controller;\\n    }\\n\\n    function _deploy(uint256 id) internal {\\n        require(msg.sender == ownerOf(id));\\n        require(_growth[id] < 2, \\\"Already deployed.\\\");\\n        require(_growth[id] > 0, \\\"Project does not exists.\\\");\\n        _growth[id] = 2;\\n        DAO storage fork = _dao[id];\\n        bytes32 salt = bytes32(id);\\n        fork.timelock = _controller.timelock.cloneDeterministic(salt);\\n        fork.vision = _controller.vision.cloneDeterministic(salt);\\n        fork.commit = _controller.commit.cloneDeterministic(salt);\\n        fork.right = _controller.right.cloneDeterministic(salt);\\n        fork.stableReserve = _controller.stableReserve.cloneDeterministic(salt);\\n        fork.dividendPool = _controller.dividendPool.cloneDeterministic(salt);\\n        fork.voteCounter = _controller.voteCounter.cloneDeterministic(salt);\\n        fork.contributionBoard = _controller\\n            .contributionBoard\\n            .cloneDeterministic(salt);\\n        fork.marketplace = _controller.marketplace.cloneDeterministic(salt);\\n        fork.workersUnion = _controller.workersUnion.cloneDeterministic(salt);\\n        fork.visionEmitter = _controller.visionEmitter.cloneDeterministic(salt);\\n        fork.votingEscrow = _controller.votingEscrow.cloneDeterministic(salt);\\n    }\\n\\n    function _initialize(uint256 id, CloneParams memory params) internal {\\n        require(msg.sender == ownerOf(id));\\n\\n        require(_growth[id] < 3, \\\"Already initialized.\\\");\\n        require(_growth[id] > 1, \\\"Contracts are not deployed.\\\");\\n        _growth[id] = 3;\\n        DAO storage fork = _dao[id];\\n        fork.multisig = params.multisig;\\n        fork.baseCurrency = params.baseCurrency;\\n\\n        DAO storage parentDAO =\\n            _dao[\\n                _getDAOIdOfGov(\\n                    _belongsTo.get(id, \\\"owner query for nonexistent token\\\")\\n                )\\n            ];\\n\\n        require(\\n            params.founderShare >=\\n                ContributionBoard(parentDAO.contributionBoard).minimumShare(id),\\n            \\\"founder share should be greater than the committed minimum share\\\"\\n        );\\n        TimelockedGovernance(payable(fork.timelock)).initialize(\\n            params.minDelay,\\n            fork.multisig,\\n            fork.workersUnion\\n        );\\n        VISION(fork.vision).initialize(\\n            params.visionName,\\n            params.visionSymbol,\\n            fork.visionEmitter,\\n            fork.timelock\\n        );\\n        COMMIT(fork.commit).initialize(\\n            params.commitName,\\n            params.commitSymbol,\\n            fork.stableReserve\\n        );\\n        RIGHT(fork.right).initialize(\\n            params.rightName,\\n            params.rightSymbol,\\n            fork.votingEscrow\\n        );\\n        address[] memory stableReserveMinters = new address[](1);\\n        stableReserveMinters[0] = fork.contributionBoard;\\n        StableReserve(fork.stableReserve).initialize(\\n            fork.timelock,\\n            fork.commit,\\n            fork.baseCurrency,\\n            stableReserveMinters\\n        );\\n        ContributionBoard(fork.contributionBoard).initialize(\\n            address(this),\\n            fork.timelock,\\n            fork.dividendPool,\\n            fork.stableReserve,\\n            fork.commit,\\n            _commons.sablier\\n        );\\n        Marketplace(fork.marketplace).initialize(\\n            fork.timelock,\\n            fork.commit,\\n            fork.dividendPool\\n        );\\n        address[] memory _rewardTokens = new address[](2);\\n        _rewardTokens[0] = fork.commit;\\n        _rewardTokens[1] = fork.baseCurrency;\\n        DividendPool(fork.dividendPool).initialize(\\n            fork.timelock,\\n            fork.right,\\n            _rewardTokens\\n        );\\n        VoteCounter(fork.voteCounter).initialize(fork.right);\\n        WorkersUnion(payable(fork.workersUnion)).initialize(\\n            fork.voteCounter,\\n            fork.timelock,\\n            params.voteLaunchDelay\\n        );\\n        VisionEmitter(fork.visionEmitter).initialize(\\n            EmitterConfig(\\n                id,\\n                params.initialEmission,\\n                params.minEmissionRatePerWeek,\\n                params.emissionCutRate,\\n                params.founderShare,\\n                params.emissionStartDelay,\\n                params.treasury,\\n                address(this), // gov => will be transfered to timelock\\n                fork.vision,\\n                id != 0 ? parentDAO.dividendPool : address(0),\\n                parentDAO.contributionBoard,\\n                _commons.erc20BurnMiningV1Factory,\\n                _commons.erc20StakeMiningV1Factory,\\n                _commons.erc721StakeMiningV1Factory,\\n                _commons.erc1155StakeMiningV1Factory,\\n                _commons.erc1155BurnMiningV1Factory,\\n                _commons.initialContributorShareFactory\\n            )\\n        );\\n        VotingEscrowLock(fork.votingEscrow).initialize(\\n            string(abi.encodePacked(params.projectName, \\\" Voting Escrow Lock\\\")),\\n            string(abi.encodePacked(params.projectSymbol, \\\"-VE-LOCK\\\")),\\n            fork.vision,\\n            fork.right,\\n            fork.timelock\\n        );\\n    }\\n\\n    function _launch(uint256 id, MiningConfig memory config) internal {\\n        require(_growth[id] < 4, \\\"Already launched.\\\");\\n        require(_growth[id] > 2, \\\"Not initialized.\\\");\\n        _growth[id] = 4;\\n\\n        DAO storage fork = _dao[id];\\n        // 1. set emission\\n        VisionEmitter(fork.visionEmitter).setEmission(config);\\n        // 2. start emission\\n        VisionEmitter(fork.visionEmitter).start();\\n        // 3. transfer governance\\n        VisionEmitter(fork.visionEmitter).setGovernance(fork.timelock);\\n        // 4. transfer ownership to timelock\\n        _transfer(msg.sender, fork.timelock, id);\\n        // 5. No more initial contribution record\\n        address initialContributorPool =\\n            VisionEmitter(fork.visionEmitter).initialContributorPool();\\n        IContributionBoard(IMiningPool(initialContributorPool).baseToken())\\n            .finalize(id);\\n    }\\n\\n    /**\\n     * @notice it returns timelock governance contract's address.\\n     */\\n    function _getGovAddressOfDAO(uint256 id) private view returns (address) {\\n        return\\n            Clones.predictDeterministicAddress(\\n                _controller.timelock,\\n                bytes32(id),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @notice it can return only launched DAO's token id.\\n     */\\n    function _getDAOIdOfGov(address daoAddress)\\n        private\\n        view\\n        returns (uint256 daoId)\\n    {\\n        return _daoAddressBook[daoAddress];\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/tokens/RIGHT.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../core/governance/libraries/VotingEscrowToken.sol\\\";\\n\\ncontract RIGHT is VotingEscrowToken {\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/libraries/VotingEscrowToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../../core/governance/interfaces/IVotingEscrowToken.sol\\\";\\nimport \\\"../../../utils/Int128.sol\\\";\\n\\n/**\\n * @dev Voting Escrow Token is the solidity implementation of veCRV\\n *      Its original code https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy\\n */\\n\\ncontract VotingEscrowToken is ERC20, IVotingEscrowToken, Initializable {\\n    using SafeMath for uint256;\\n    using Int128 for uint256;\\n\\n    uint256 public constant MAXTIME = 4 * (365 days);\\n    uint256 public constant MULTIPLIER = 1e18;\\n\\n    address private _veLocker;\\n    mapping(uint256 => int128) private _slopeChanges;\\n    Point[] private _pointHistory;\\n    mapping(uint256 => Point[]) private _lockPointHistory;\\n    string private _name;\\n    string private _symbol;\\n\\n    modifier onlyVELock() {\\n        require(\\n            msg.sender == _veLocker,\\n            \\\"Only ve lock contract can call this.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {\\n        // this constructor will not be called since it'll be cloned by proxy pattern.\\n        // initalize() will be called instead.\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address veLocker_\\n    ) public initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _veLocker = veLocker_;\\n    }\\n\\n    function checkpoint(uint256 maxRecord) external override {\\n        // Point memory lastPoint = _recordPointHistory();\\n        // pointHistory[epoch] = lastPoint;\\n        _recordPointHistory(maxRecord);\\n    }\\n\\n    function checkpoint(\\n        uint256 veLockId,\\n        Lock calldata oldLock,\\n        Lock calldata newLock\\n    ) external onlyVELock {\\n        // Record history\\n        _recordPointHistory(0);\\n\\n        // Compute points\\n        (Point memory oldLockPoint, Point memory newLockPoint) =\\n            _computePointsFromLocks(oldLock, newLock);\\n\\n        _updateLastPoint(oldLockPoint, newLockPoint);\\n\\n        _recordLockPointHistory(\\n            veLockId,\\n            oldLock,\\n            newLock,\\n            oldLockPoint,\\n            newLockPoint\\n        );\\n    }\\n\\n    // View functions\\n\\n    function veLocker() public view virtual override returns (address) {\\n        return _veLocker;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function balanceOf(address account)\\n        public\\n        view\\n        override(IERC20, ERC20)\\n        returns (uint256)\\n    {\\n        uint256 numOfLocks = IERC721Enumerable(_veLocker).balanceOf(account);\\n        uint256 balance = 0;\\n        for (uint256 i = 0; i < numOfLocks; i++) {\\n            uint256 veLockId =\\n                IERC721Enumerable(_veLocker).tokenOfOwnerByIndex(account, i);\\n            balance = balance.add(balanceOfLock(veLockId));\\n        }\\n        return balance;\\n    }\\n\\n    function balanceOfAt(address account, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 numOfLocks = IERC721Enumerable(_veLocker).balanceOf(account);\\n        uint256 balance = 0;\\n        for (uint256 i = 0; i < numOfLocks; i++) {\\n            uint256 veLockId =\\n                IERC721Enumerable(_veLocker).tokenOfOwnerByIndex(account, i);\\n            balance = balance.add(balanceOfLockAt(veLockId, timestamp));\\n        }\\n        return balance;\\n    }\\n\\n    function balanceOfLock(uint256 veLockId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balanceOfLockAt(veLockId, block.timestamp);\\n    }\\n\\n    function balanceOfLockAt(uint256 veLockId, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (bool success, Point memory point) =\\n            _searchClosestPoint(_lockPointHistory[veLockId], timestamp);\\n        if (success) {\\n            int128 bal =\\n                point.bias -\\n                    point.slope *\\n                    (timestamp.toInt128() - point.timestamp.toInt128());\\n            return bal > 0 ? uint256(bal) : 0;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function totalSupply()\\n        public\\n        view\\n        override(IERC20, ERC20)\\n        returns (uint256)\\n    {\\n        return totalSupplyAt(block.timestamp);\\n    }\\n\\n    function totalSupplyAt(uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (bool success, Point memory point) =\\n            _searchClosestPoint(_pointHistory, timestamp);\\n        if (success) {\\n            return _computeSupplyFrom(point, timestamp);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function slopeChanges(uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (int128)\\n    {\\n        return _slopeChanges[timestamp];\\n    }\\n\\n    function pointHistory(uint256 index)\\n        public\\n        view\\n        override\\n        returns (Point memory)\\n    {\\n        return _pointHistory[index];\\n    }\\n\\n    function lockPointHistory(uint256 index)\\n        public\\n        view\\n        override\\n        returns (Point[] memory)\\n    {\\n        return _lockPointHistory[index];\\n    }\\n\\n    // checkpoint() should be called if it emits out of gas error.\\n    function _computeSupplyFrom(Point memory point, uint256 timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(point.timestamp <= timestamp, \\\"scan only to the rightward\\\");\\n        Point memory _point = point;\\n        uint256 x = (point.timestamp / 1 weeks) * 1 weeks;\\n\\n        // find the closest point\\n        do {\\n            x = Math.min(x + 1 weeks, timestamp);\\n            uint256 delta = x - point.timestamp; // always greater than 0\\n            _point.timestamp = x;\\n            _point.bias -= (_point.slope) * int128(delta);\\n            _point.slope += _slopeChanges[x];\\n            _point.bias = _point.bias > 0 ? _point.bias : 0;\\n            _point.slope = _point.slope > 0 ? _point.slope : 0;\\n        } while (timestamp != x);\\n        int128 y = _point.bias - _point.slope * (timestamp - x).toInt128();\\n        return y > 0 ? uint256(y) : 0;\\n    }\\n\\n    function _computePointsFromLocks(Lock memory oldLock, Lock memory newLock)\\n        internal\\n        view\\n        returns (Point memory oldPoint, Point memory newPoint)\\n    {\\n        if (oldLock.end > block.timestamp && oldLock.amount > 0) {\\n            oldPoint.slope = (oldLock.amount / MAXTIME).toInt128();\\n            oldPoint.bias =\\n                oldPoint.slope *\\n                int128(oldLock.end - block.timestamp);\\n        }\\n        if (newLock.end > block.timestamp && newLock.amount > 0) {\\n            newPoint.slope = (newLock.amount / MAXTIME).toInt128();\\n            newPoint.bias =\\n                newPoint.slope *\\n                int128((newLock.end - block.timestamp));\\n        }\\n    }\\n\\n    function _recordPointHistory(uint256 maxRecord) internal {\\n        // last_point: Point = Point({bias: 0, slope: 0, ts: block.timestamp})\\n        Point memory _point;\\n        // Get the latest right most point\\n        if (_pointHistory.length > 0) {\\n            _point = _pointHistory[_pointHistory.length - 1];\\n        } else {\\n            _point = Point({bias: 0, slope: 0, timestamp: block.timestamp});\\n        }\\n\\n        // fill history\\n        uint256 timestamp = block.timestamp;\\n        uint256 x = (_point.timestamp / 1 weeks) * 1 weeks;\\n        // record intermediate histories\\n        uint256 i = 0;\\n        do {\\n            x = Math.min(x + 1 weeks, timestamp);\\n            uint256 delta = Math.min(timestamp - x, 1 weeks);\\n            _point.timestamp = x;\\n            _point.bias -= (_point.slope) * int128(delta);\\n            _point.slope += _slopeChanges[x];\\n            _point.bias = _point.bias > 0 ? _point.bias : 0;\\n            _point.slope = _point.slope > 0 ? _point.slope : 0;\\n            _pointHistory.push(_point);\\n            i++;\\n        } while (timestamp != x && i != maxRecord);\\n    }\\n\\n    function _recordLockPointHistory(\\n        uint256 veLockId,\\n        Lock memory oldLock,\\n        Lock memory newLock,\\n        Point memory oldPoint,\\n        Point memory newPoint\\n    ) internal {\\n        require(\\n            (oldLock.end / 1 weeks) * 1 weeks == oldLock.end,\\n            \\\"should be exact epoch timestamp\\\"\\n        );\\n        require(\\n            (newLock.end / 1 weeks) * 1 weeks == newLock.end,\\n            \\\"should be exact epoch timestamp\\\"\\n        );\\n        int128 oldSlope = _slopeChanges[oldLock.end];\\n        int128 newSlope;\\n        if (newLock.end != 0) {\\n            if (newLock.end == oldLock.end) {\\n                newSlope = oldSlope;\\n            } else {\\n                newSlope = _slopeChanges[newLock.end];\\n            }\\n        }\\n        if (oldLock.end > block.timestamp) {\\n            oldSlope += oldPoint.slope;\\n            if (newLock.end == oldLock.end) {\\n                oldSlope -= newPoint.slope;\\n            }\\n            _slopeChanges[oldLock.end] = oldSlope;\\n        }\\n        if (newLock.end > block.timestamp) {\\n            if (newLock.end > oldLock.end) {\\n                newSlope -= newPoint.slope;\\n                _slopeChanges[newLock.end] = newSlope;\\n            }\\n        }\\n        newPoint.timestamp = block.timestamp;\\n        _lockPointHistory[veLockId].push(newPoint);\\n    }\\n\\n    function _updateLastPoint(\\n        Point memory oldLockPoint,\\n        Point memory newLockPoint\\n    ) internal {\\n        if (_pointHistory.length == 0) {\\n            _pointHistory.push(\\n                Point({bias: 0, slope: 0, timestamp: block.timestamp})\\n            );\\n        }\\n        Point memory newLastPoint =\\n            _computeTheLatestSupplyGraphPoint(\\n                oldLockPoint,\\n                newLockPoint,\\n                _pointHistory[_pointHistory.length - 1]\\n            );\\n        _pointHistory[_pointHistory.length - 1] = newLastPoint;\\n    }\\n\\n    function _computeTheLatestSupplyGraphPoint(\\n        Point memory oldLockPoint,\\n        Point memory newLockPoint,\\n        Point memory lastPoint\\n    ) internal pure returns (Point memory newLastPoint) {\\n        newLastPoint = lastPoint;\\n        newLastPoint.slope += (newLockPoint.slope - oldLockPoint.slope);\\n        newLastPoint.bias += (newLockPoint.bias - oldLockPoint.bias);\\n        if (newLastPoint.slope < 0) {\\n            newLastPoint.slope = 0;\\n        }\\n        if (newLastPoint.bias < 0) {\\n            newLastPoint.bias = 0;\\n        }\\n    }\\n\\n    function _searchClosestPoint(Point[] storage history, uint256 timestamp)\\n        internal\\n        view\\n        returns (bool success, Point memory point)\\n    {\\n        require(timestamp <= block.timestamp, \\\"Only past blocks\\\");\\n        if (history.length == 0) {\\n            return (false, point);\\n        } else if (timestamp < history[0].timestamp) {\\n            // block num is before the first lock\\n            return (false, point);\\n        } else if (timestamp == block.timestamp) {\\n            return (true, history[history.length - 1]);\\n        }\\n        // binary search\\n        uint256 min = 0;\\n        uint256 max = history.length - 1;\\n        uint256 mid;\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (min >= max) {\\n                break;\\n            }\\n            mid = (min + max + 1) / 2;\\n            if (history[mid].timestamp <= timestamp) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return (true, history[min]);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal pure override {\\n        revert(\\\"Non-transferrable. You can only transfer locks.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/interfaces/IVotingEscrowToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct Point {\\n    int128 bias;\\n    int128 slope;\\n    uint256 timestamp;\\n}\\n\\nstruct Lock {\\n    uint256 amount;\\n    uint256 start;\\n    uint256 end;\\n}\\n\\ninterface IVotingEscrowToken is IERC20 {\\n    function veLocker() external view returns (address);\\n\\n    function checkpoint(uint256 maxRecord) external;\\n\\n    function totalSupplyAt(uint256 timestamp) external view returns (uint256);\\n\\n    function balanceOfAt(address account, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOfLock(uint256 veLockId) external view returns (uint256);\\n\\n    function balanceOfLockAt(uint256 veLockId, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function slopeChanges(uint256 timestamp) external view returns (int128);\\n\\n    function pointHistory(uint256 index) external view returns (Point memory);\\n\\n    function lockPointHistory(uint256 index)\\n        external\\n        view\\n        returns (Point[] memory);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/work/StableReserve.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../core/work/interfaces/IStableReserve.sol\\\";\\nimport \\\"../../core/work/interfaces/IGrantReceiver.sol\\\";\\nimport \\\"../../core/tokens/COMMIT.sol\\\";\\nimport \\\"../../core/governance/Governed.sol\\\";\\nimport \\\"../../utils/ERC20Recoverer.sol\\\";\\n\\n/**\\n * @notice StableReserve is the $COMMIT minter. It allows ContributionBoard to mint $COMMIT token.\\n */\\ncontract StableReserve is ERC20Recoverer, Governed, IStableReserve {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address private _commitToken;\\n    address private _baseCurrency;\\n    uint256 private _priceOfCommit;\\n    mapping(address => bool) private _allowed; // allowed crypto job board contracts\\n    address private _deployer;\\n\\n    function initialize(\\n        address gov_,\\n        address commitToken_,\\n        address baseCurrency_,\\n        address[] memory admins\\n    ) public initializer {\\n        _priceOfCommit = 20000; // denominator = 10000, ~= $2\\n        _commitToken = commitToken_;\\n        _baseCurrency = baseCurrency_;\\n\\n        address[] memory disable = new address[](2);\\n        disable[0] = commitToken_;\\n        disable[1] = baseCurrency_;\\n        ERC20Recoverer.initialize(gov_, disable);\\n        Governed.initialize(gov_);\\n        _deployer = msg.sender;\\n        _allow(gov_, true);\\n        for (uint256 i = 0; i < admins.length; i++) {\\n            _allow(admins[i], true);\\n        }\\n    }\\n\\n    modifier onlyAllowed() {\\n        require(_allowed[msg.sender], \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    function redeem(uint256 amount) public override {\\n        require(\\n            COMMIT(_commitToken).balanceOf(msg.sender) >= amount,\\n            \\\"Not enough balance\\\"\\n        );\\n        COMMIT(_commitToken).burnFrom(msg.sender, amount);\\n        IERC20(_baseCurrency).transfer(msg.sender, amount);\\n        emit Redeemed(msg.sender, amount);\\n    }\\n\\n    function payInsteadOfWorking(uint256 amount) public override {\\n        uint256 amountToPay = amount.mul(_priceOfCommit).div(10000);\\n        IERC20(_baseCurrency).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amountToPay\\n        );\\n        _mintCOMMIT(msg.sender, amount);\\n    }\\n\\n    function reserveAndMint(uint256 amount) public override onlyAllowed {\\n        IERC20(_baseCurrency).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        _mintCOMMIT(msg.sender, amount);\\n    }\\n\\n    function grant(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override governed {\\n        _mintCOMMIT(recipient, amount);\\n        bytes memory returndata =\\n            address(recipient).functionCall(\\n                abi.encodeWithSelector(\\n                    IGrantReceiver(recipient).receiveGrant.selector,\\n                    _commitToken,\\n                    amount,\\n                    data\\n                ),\\n                \\\"GrantReceiver: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"GrantReceiver: low-level call failed\\\"\\n            );\\n        }\\n    }\\n\\n    function allow(address account, bool active) public override governed {\\n        _allow(account, active);\\n    }\\n\\n    function baseCurrency() public view override returns (address) {\\n        return _baseCurrency;\\n    }\\n\\n    function commitToken() public view override returns (address) {\\n        return _commitToken;\\n    }\\n\\n    function priceOfCommit() public view override returns (uint256) {\\n        return _priceOfCommit;\\n    }\\n\\n    function mintable() public view override returns (uint256) {\\n        uint256 currentSupply = COMMIT(_commitToken).totalSupply();\\n        uint256 currentRedeemable =\\n            IERC20(_baseCurrency).balanceOf(address(this));\\n        return currentRedeemable.sub(currentSupply);\\n    }\\n\\n    function allowed(address account) public view override returns (bool) {\\n        return _allowed[account];\\n    }\\n\\n    function _mintCOMMIT(address to, uint256 amount) internal {\\n        require(amount <= mintable(), \\\"Not enough reserve\\\");\\n        COMMIT(_commitToken).mint(to, amount);\\n    }\\n\\n    function _allow(address account, bool active) internal {\\n        if (_allowed[account] != active) {\\n            emit AdminUpdated(account);\\n        }\\n        _allowed[account] = active;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/work/interfaces/IStableReserve.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IStableReserve {\\n    event AdminUpdated(address indexed minter);\\n    event Redeemed(address to, uint256 amount);\\n\\n    function redeem(uint256 amount) external;\\n\\n    function payInsteadOfWorking(uint256 amount) external;\\n\\n    function reserveAndMint(uint256 amount) external;\\n\\n    function grant(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function allow(address account, bool active) external;\\n\\n    function baseCurrency() external view returns (address);\\n\\n    function commitToken() external view returns (address);\\n\\n    function priceOfCommit() external view returns (uint256);\\n\\n    function allowed(address account) external view returns (bool);\\n\\n    function mintable() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/work/interfaces/IGrantReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IGrantReceiver {\\n    function receiveGrant(\\n        address currency,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/work/ContributionBoard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"../../core/governance/Governed.sol\\\";\\nimport \\\"../../core/work/libraries/CommitMinter.sol\\\";\\nimport \\\"../../core/work/libraries/GrantReceiver.sol\\\";\\nimport \\\"../../core/work/interfaces/IStableReserve.sol\\\";\\nimport \\\"../../core/work/interfaces/IContributionBoard.sol\\\";\\nimport \\\"../../core/dividend/libraries/Distributor.sol\\\";\\nimport \\\"../../core/dividend/interfaces/IDividendPool.sol\\\";\\nimport \\\"../../utils/IERC1620.sol\\\";\\nimport \\\"../../utils/Utils.sol\\\";\\n\\ncontract ContributionBoard is\\n    CommitMinter,\\n    GrantReceiver,\\n    Distributor,\\n    Governed,\\n    ReentrancyGuard,\\n    Initializable,\\n    ERC1155Burnable,\\n    IContributionBoard\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n    using Utils for address[];\\n\\n    address private _sablier;\\n    IERC721 private _project;\\n    mapping(uint256 => uint256) private _projectFund;\\n    mapping(uint256 => uint256) private _totalSupplyOf;\\n    mapping(uint256 => uint256) private _maxSupplyOf;\\n    mapping(uint256 => uint256) private _minimumShare;\\n    mapping(uint256 => bool) private _fundingPaused;\\n    mapping(uint256 => bool) private _finalized;\\n    mapping(uint256 => uint256) private _projectOf;\\n    mapping(uint256 => uint256[]) private _streams;\\n    mapping(uint256 => address[]) private _contributors;\\n\\n    constructor() ERC1155(\\\"\\\") {\\n        // this will not be called\\n    }\\n\\n    function initialize(\\n        address project_,\\n        address gov_,\\n        address dividendPool_,\\n        address stableReserve_,\\n        address commit_,\\n        address sablier_\\n    ) public initializer {\\n        CommitMinter._setup(stableReserve_, commit_);\\n        Distributor._setup(dividendPool_);\\n        _project = IERC721(project_);\\n        _sablier = sablier_;\\n        Governed.initialize(gov_);\\n        _setURI(\\\"\\\");\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        bytes4 _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n        bytes4 _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n        bytes4 _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    modifier onlyStableReserve() {\\n        require(\\n            address(stableReserve) == msg.sender,\\n            \\\"Only the stable reserves can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyProjectOwner(uint256 projId) {\\n        require(_project.ownerOf(projId) == msg.sender, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    function addProjectFund(uint256 projId, uint256 amount) public override {\\n        require(!_fundingPaused[projId], \\\"Should resume funding\\\");\\n        IERC20(commitToken).safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 updated = _projectFund[projId].add(amount);\\n        _projectFund[projId] = updated;\\n        if (_initialContributorShareProgram(projId)) {\\n            // record funding\\n            _recordContribution(msg.sender, projId, amount);\\n        }\\n    }\\n\\n    function startInitialContributorShareProgram(\\n        uint256 projectId,\\n        uint256 minimumShare_,\\n        uint256 maxContribution\\n    ) public override onlyProjectOwner(projectId) {\\n        require(0 < minimumShare_, \\\"Should be greater than 0\\\");\\n        require(minimumShare_ < 10000, \\\"Cannot be greater than denominator\\\");\\n        require(_minimumShare[projectId] == 0, \\\"Funding is already enabled.\\\");\\n        _minimumShare[projectId] = minimumShare_;\\n        _setMaxContribution(projectId, maxContribution);\\n    }\\n\\n    /**\\n     * @notice Usually the total supply = funded + paid. If you want to raise\\n     *         10000 COMMITs you should set the max contribution at least 20000.\\n     */\\n    function setMaxContribution(uint256 projectId, uint256 maxContribution)\\n        public\\n        override\\n        onlyProjectOwner(projectId)\\n    {\\n        _setMaxContribution(projectId, maxContribution);\\n    }\\n\\n    function pauseFunding(uint256 projectId)\\n        public\\n        override\\n        onlyProjectOwner(projectId)\\n    {\\n        require(!_fundingPaused[projectId], \\\"Already paused\\\");\\n        _fundingPaused[projectId] = true;\\n    }\\n\\n    function resumeFunding(uint256 projectId)\\n        public\\n        override\\n        onlyProjectOwner(projectId)\\n    {\\n        require(_fundingPaused[projectId], \\\"Already unpaused\\\");\\n        _fundingPaused[projectId] = false;\\n    }\\n\\n    function compensate(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount\\n    ) public override onlyProjectOwner(projectId) {\\n        require(_projectFund[projectId] >= amount, \\\"Not enough fund.\\\");\\n        _projectFund[projectId] = _projectFund[projectId] - amount; // \\\"require\\\" protects underflow\\n        IERC20(commitToken).safeTransfer(to, amount);\\n        _recordContribution(to, projectId, amount);\\n        emit Payed(projectId, to, amount);\\n    }\\n\\n    function compensateInStream(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount,\\n        uint256 period\\n    ) public override onlyProjectOwner(projectId) {\\n        require(_projectFund[projectId] >= amount);\\n        _projectFund[projectId] = _projectFund[projectId] - amount; // \\\"require\\\" protects underflow\\n        _recordContribution(to, projectId, amount);\\n        IERC20(commitToken).approve(_sablier, amount); // approve the transfer\\n        uint256 streamId =\\n            IERC1620(_sablier).createStream(\\n                to,\\n                amount,\\n                commitToken,\\n                block.timestamp,\\n                block.timestamp + period\\n            );\\n\\n        _projectOf[streamId] = projectId;\\n        _streams[projectId].push(streamId);\\n        emit PayedInStream(projectId, to, amount, streamId);\\n    }\\n\\n    function cancelStream(uint256 projectId, uint256 streamId)\\n        public\\n        override\\n        onlyProjectOwner(projectId)\\n    {\\n        require(projectOf(streamId) == projectId, \\\"Invalid project id\\\");\\n\\n        (\\n            ,\\n            address recipient,\\n            uint256 deposit,\\n            ,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            ,\\n            uint256 ratePerSecond\\n        ) = IERC1620(_sablier).getStream(streamId);\\n\\n        uint256 earned = Math.min(block.timestamp, stopTime).sub(startTime);\\n        uint256 remaining = deposit.sub(ratePerSecond.mul(earned));\\n        require(IERC1620(_sablier).cancelStream(streamId), \\\"Failed to cancel\\\");\\n\\n        _projectFund[projectId] = _projectFund[projectId].add(remaining);\\n        uint256 cancelContribution =\\n            Math.min(balanceOf(recipient, projectId), remaining);\\n        _burn(recipient, projectId, cancelContribution);\\n    }\\n\\n    function recordContribution(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external override onlyProjectOwner(id) {\\n        require(\\n            !_initialContributorShareProgram(id),\\n            \\\"Once it starts to get funding, you cannot record additional contribution\\\"\\n        );\\n        require(\\n            _recordContribution(to, id, amount),\\n            \\\"Cannot record after it's launched.\\\"\\n        );\\n    }\\n\\n    function finalize(uint256 id) external override {\\n        require(\\n            msg.sender == address(_project),\\n            \\\"this should be called only for upgrade\\\"\\n        );\\n        require(!_finalized[id], \\\"Already _finalized\\\");\\n        _finalized[id] = true;\\n    }\\n\\n    function receiveGrant(\\n        address currency,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override onlyStableReserve returns (bool result) {\\n        require(\\n            currency == commitToken,\\n            \\\"Only can get $COMMIT token for its grant\\\"\\n        );\\n        uint256 projId = abi.decode(data, (uint256));\\n        require(_project.ownerOf(projId) != address(0), \\\"No budget owner\\\");\\n        _projectFund[projId] = _projectFund[projId].add(amount);\\n        emit Grant(projId, amount);\\n        return true;\\n    }\\n\\n    function sablier() public view override returns (address) {\\n        return _sablier;\\n    }\\n\\n    function project() public view override returns (address) {\\n        return address(_project);\\n    }\\n\\n    function projectFund(uint256 projId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _projectFund[projId];\\n    }\\n\\n    function totalSupplyOf(uint256 projId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _totalSupplyOf[projId];\\n    }\\n\\n    function maxSupplyOf(uint256 projId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _maxSupplyOf[projId];\\n    }\\n\\n    function initialContributorShareProgram(uint256 projId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _initialContributorShareProgram(projId);\\n    }\\n\\n    function minimumShare(uint256 projId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _minimumShare[projId];\\n    }\\n\\n    function fundingPaused(uint256 projId) public view override returns (bool) {\\n        return _fundingPaused[projId];\\n    }\\n\\n    function finalized(uint256 projId) public view override returns (bool) {\\n        return _finalized[projId];\\n    }\\n\\n    function projectOf(uint256 streamId)\\n        public\\n        view\\n        override\\n        returns (uint256 id)\\n    {\\n        return _projectOf[streamId];\\n    }\\n\\n    function getStreams(uint256 projId)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _streams[projId];\\n    }\\n\\n    function getContributors(uint256 projId)\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _contributors[projId];\\n    }\\n\\n    function uri(uint256 id)\\n        external\\n        view\\n        override(ERC1155, IContributionBoard)\\n        returns (string memory)\\n    {\\n        return IERC721Metadata(address(_project)).tokenURI(id);\\n    }\\n\\n    function _setMaxContribution(uint256 id, uint256 maxContribution) internal {\\n        require(!_finalized[id], \\\"DAO is launched. You cannot update it.\\\");\\n        _maxSupplyOf[id] = maxContribution;\\n        emit NewMaxContribution(id, maxContribution);\\n    }\\n\\n    function _recordContribution(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (_finalized[id]) return false;\\n        (bool exist, ) = _contributors[id].find(to);\\n        if (!exist) {\\n            _contributors[id].push(to);\\n        }\\n        bytes memory zero;\\n        _mint(to, id, amount, zero);\\n        return true;\\n    }\\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override {\\n        super._mint(account, id, amount, data);\\n        _totalSupplyOf[id] = _totalSupplyOf[id].add(amount);\\n        require(\\n            _maxSupplyOf[id] == 0 || _totalSupplyOf[id] <= _maxSupplyOf[id],\\n            \\\"Exceeds the max supply. Set a new max supply value.\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal override {\\n        super._burn(account, id, amount);\\n        _totalSupplyOf[id] = _totalSupplyOf[id].sub(amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory,\\n        bytes memory\\n    ) internal override {\\n        if (from == address(0) || to == address(0)) {\\n            // contribution can be minted or burned before the dao launch\\n        } else {\\n            // transfer is only allowed after the finalization\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                require(_finalized[ids[i]], \\\"Not finalized\\\");\\n            }\\n        }\\n    }\\n\\n    function _initialContributorShareProgram(uint256 projId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _minimumShare[projId] != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/work/libraries/CommitMinter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../core/work/interfaces/IStableReserve.sol\\\";\\n\\ncontract CommitMinter {\\n    using SafeERC20 for IERC20;\\n\\n    address public stableReserve;\\n    address public commitToken;\\n\\n    function _setup(address _stableReserve, address _commit) internal {\\n        stableReserve = _stableReserve;\\n        commitToken = _commit;\\n    }\\n\\n    function _mintCommit(uint256 amount) internal virtual {\\n        address _baseCurrency = IStableReserve(stableReserve).baseCurrency();\\n        IERC20(_baseCurrency).safeApprove(address(stableReserve), amount);\\n        IStableReserve(stableReserve).reserveAndMint(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/work/libraries/GrantReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../core/work/interfaces/IGrantReceiver.sol\\\";\\n\\nabstract contract GrantReceiver is IGrantReceiver {}\\n\"\r\n    },\r\n    \"./contracts/core/work/interfaces/IContributionBoard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\\\";\\n\\ninterface IContributionBoard is IERC1155MetadataURI {\\n    event ManagerUpdated(address indexed manager, bool active);\\n    event ProjectPosted(uint256 projId);\\n    event ProjectClosed(uint256 projId);\\n    event Grant(uint256 projId, uint256 amount);\\n    event Payed(uint256 projId, address to, uint256 amount);\\n    event PayedInStream(\\n        uint256 projId,\\n        address to,\\n        uint256 amount,\\n        uint256 streamId\\n    );\\n    event ProjectFunded(uint256 indexed projId, uint256 amount);\\n    event NewMaxContribution(uint256 _id, uint256 _maxContribution);\\n\\n    function finalize(uint256 id) external;\\n\\n    function addProjectFund(uint256 projId, uint256 amount) external;\\n\\n    function startInitialContributorShareProgram(\\n        uint256 projectId,\\n        uint256 _minimumShare,\\n        uint256 _maxContribution\\n    ) external;\\n\\n    function setMaxContribution(uint256 projectId, uint256 maxContribution)\\n        external;\\n\\n    function pauseFunding(uint256 projectId) external;\\n\\n    function resumeFunding(uint256 projectId) external;\\n\\n    function compensate(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function compensateInStream(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount,\\n        uint256 period\\n    ) external;\\n\\n    function cancelStream(uint256 projectId, uint256 streamId) external;\\n\\n    function recordContribution(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function sablier() external view returns (address);\\n\\n    function project() external view returns (address);\\n\\n    function projectFund(uint256 projId) external view returns (uint256);\\n\\n    function totalSupplyOf(uint256 projId) external view returns (uint256);\\n\\n    function maxSupplyOf(uint256 projId) external view returns (uint256);\\n\\n    function initialContributorShareProgram(uint256 projId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function minimumShare(uint256 projId) external view returns (uint256);\\n\\n    function fundingPaused(uint256 projId) external view returns (bool);\\n\\n    function finalized(uint256 projId) external view returns (bool);\\n\\n    function projectOf(uint256 streamId) external view returns (uint256 id);\\n\\n    function getStreams(uint256 projId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getContributors(uint256 projId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function uri(uint256 id) external view override returns (string memory);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/dividend/libraries/Distributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../core/dividend/interfaces/IDividendPool.sol\\\";\\n\\ncontract Distributor {\\n    using SafeERC20 for IERC20;\\n\\n    IDividendPool public dividendPool;\\n\\n    function _setup(address _dividendPool) internal {\\n        dividendPool = IDividendPool(_dividendPool);\\n    }\\n\\n    function _distribute(address currency, uint256 amount) internal virtual {\\n        IERC20(currency).safeApprove(address(dividendPool), amount);\\n        dividendPool.distribute(currency, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/TimelockedGovernance.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts/access/TimelockController.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\n/**\\n * @notice Gnosis Safe Multisig wallet has the Ownership of this contract.\\n *      In the future, We can transfer the ownership to a well-formed governance contract.\\n *      **Ownership grpah**\\n *      TimelockedGovernance -controls-> COMMIT, ContributionBoard, Market, DividendPool, and VisionEmitter\\n *      VisionEmitter -controls-> VISION\\n */\\ncontract TimelockedGovernance is TimelockController, Initializable {\\n    mapping(bytes32 => bool) public nonCancelable;\\n\\n    constructor()\\n        TimelockController(1 days, new address[](0), new address[](0))\\n    {\\n        // this constructor will not be called since it'll be cloned by proxy pattern.\\n        // initalize() will be called instead.\\n    }\\n\\n    function initialize(\\n        uint256 delay,\\n        address multisig,\\n        address workersUnion\\n    ) public initializer {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // deployer + self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n        _setupRole(TIMELOCK_ADMIN_ROLE, workersUnion);\\n        _setupRole(PROPOSER_ROLE, workersUnion);\\n        _setupRole(PROPOSER_ROLE, multisig);\\n        _setupRole(EXECUTOR_ROLE, workersUnion);\\n        _setupRole(EXECUTOR_ROLE, multisig);\\n        TimelockController(this).updateDelay(delay);\\n    }\\n\\n    function cancel(bytes32 id) public override {\\n        require(!nonCancelable[id], \\\"non-cancelable\\\");\\n        super.cancel(id);\\n    }\\n\\n    function forceSchedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        nonCancelable[id] = true;\\n        super.schedule(target, value, data, predecessor, salt, delay);\\n    }\\n\\n    function forceScheduleBatch(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public {\\n        bytes32 id = hashOperationBatch(target, value, data, predecessor, salt);\\n        nonCancelable[id] = true;\\n        super.scheduleBatch(target, value, data, predecessor, salt, delay);\\n    }\\n\\n    function scheduleBatch(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public override {\\n        super.scheduleBatch(target, value, data, predecessor, salt, delay);\\n    }\\n\\n    function executeBatch(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable override {\\n        super.executeBatch(target, value, data, predecessor, salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/WorkersUnion.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../core/dividend/interfaces/IDividendPool.sol\\\";\\nimport \\\"../../core/governance/Governed.sol\\\";\\nimport \\\"../../core/governance/TimelockedGovernance.sol\\\";\\nimport \\\"../../core/governance/interfaces/IVoteCounter.sol\\\";\\nimport \\\"../../core/governance/interfaces/IWorkersUnion.sol\\\";\\nimport \\\"../../utils/Sqrt.sol\\\";\\n\\n/**\\n * @notice referenced openzeppelin's TimelockController.sol\\n */\\ncontract WorkersUnion is Pausable, Governed, Initializable, IWorkersUnion {\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    bytes32 public constant NO_DEPENDENCY = bytes32(0);\\n\\n    uint256 private _launch;\\n    VotingRule private _votingRule;\\n    mapping(bytes32 => Proposal) private _proposals;\\n\\n    event TxProposed(\\n        bytes32 indexed txHash,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 start,\\n        uint256 end\\n    );\\n\\n    event BatchTxProposed(\\n        bytes32 indexed txHash,\\n        address[] target,\\n        uint256[] value,\\n        bytes[] data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 start,\\n        uint256 end\\n    );\\n\\n    event Vote(bytes32 txHash, address voter, bool forVote);\\n    event VoteUpdated(bytes32 txHash, uint256 forVotes, uint256 againsVotes);\\n\\n    function initialize(\\n        address voteCounter,\\n        address timelockGov,\\n        uint256 launchDelay\\n    ) public initializer {\\n        _votingRule = VotingRule(\\n            1 days, // minimum pending for vote\\n            1 weeks, // maximum pending for vote\\n            1 weeks, // minimum voting period\\n            4 weeks, // maximum voting period\\n            0 gwei, // minimum votes for proposing\\n            0 gwei, // minimum votes\\n            voteCounter\\n        );\\n        Governed.initialize(timelockGov);\\n        _pause();\\n        _launch = block.timestamp.add(launchDelay);\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    function launch() public override {\\n        require(block.timestamp >= _launch, \\\"Wait a bit please.\\\");\\n        _unpause();\\n    }\\n\\n    function changeVotingRule(\\n        uint256 minimumPendingPeriod,\\n        uint256 maximumPendingPeriod,\\n        uint256 minimumVotingPeriod,\\n        uint256 maximumVotingPeriod,\\n        uint256 minimumVotesForProposing,\\n        uint256 minimumVotes,\\n        address voteCounter\\n    ) public override governed {\\n        uint256 totalVotes = IVoteCounter(voteCounter).getTotalVotes();\\n\\n        require(minimumPendingPeriod <= maximumPendingPeriod, \\\"invalid arg\\\");\\n        require(minimumVotingPeriod <= maximumVotingPeriod, \\\"invalid arg\\\");\\n        require(minimumVotingPeriod >= 1 days, \\\"too short\\\");\\n        require(minimumPendingPeriod >= 1 days, \\\"too short\\\");\\n        require(maximumVotingPeriod <= 30 days, \\\"too long\\\");\\n        require(maximumPendingPeriod <= 30 days, \\\"too long\\\");\\n        require(\\n            minimumVotesForProposing <= totalVotes.div(10),\\n            \\\"too large number\\\"\\n        );\\n        require(minimumVotes <= totalVotes.div(2), \\\"too large number\\\");\\n        require(address(voteCounter) != address(0), \\\"null address\\\");\\n        _votingRule = VotingRule(\\n            minimumPendingPeriod,\\n            maximumPendingPeriod,\\n            minimumVotingPeriod,\\n            maximumVotingPeriod,\\n            minimumVotesForProposing,\\n            minimumVotes,\\n            voteCounter\\n        );\\n    }\\n\\n    function proposeTx(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 startsIn,\\n        uint256 votingPeriod\\n    ) public override {\\n        _beforePropose(startsIn, votingPeriod);\\n        bytes32 txHash =\\n            _timelock().hashOperation(target, value, data, predecessor, salt);\\n        _propose(txHash, startsIn, votingPeriod);\\n        emit TxProposed(\\n            txHash,\\n            target,\\n            value,\\n            data,\\n            predecessor,\\n            salt,\\n            block.timestamp + startsIn,\\n            block.timestamp + startsIn + votingPeriod\\n        );\\n    }\\n\\n    function proposeBatchTx(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 startsIn,\\n        uint256 votingPeriod\\n    ) public override whenNotPaused {\\n        _beforePropose(startsIn, votingPeriod);\\n        bytes32 txHash =\\n            _timelock().hashOperationBatch(\\n                target,\\n                value,\\n                data,\\n                predecessor,\\n                salt\\n            );\\n        _propose(txHash, startsIn, votingPeriod);\\n        emit BatchTxProposed(\\n            txHash,\\n            target,\\n            value,\\n            data,\\n            predecessor,\\n            salt,\\n            block.timestamp + startsIn,\\n            block.timestamp + startsIn + votingPeriod\\n        );\\n    }\\n\\n    /**\\n     * @notice Should use vote(bytes32, uint256[], bool) when too many voting rights are delegated to avoid out of gas.\\n     */\\n    function vote(bytes32 txHash, bool agree) public override {\\n        uint256[] memory votingRights =\\n            IVoteCounter(_votingRule.voteCounter).votingRights(msg.sender);\\n        manualVote(txHash, votingRights, agree);\\n    }\\n\\n    /**\\n     * @notice The voting will be updated if the voter already voted. Please\\n     *      note that the voting power may change by the locking period or others.\\n     *      To have more detail information about how voting power is computed,\\n     *      Please go to the QVCounter.sol.\\n     */\\n    function manualVote(\\n        bytes32 txHash,\\n        uint256[] memory rightIds,\\n        bool agree\\n    ) public override {\\n        Proposal storage proposal = _proposals[txHash];\\n        uint256 timestamp = proposal.start;\\n        require(\\n            getVotingStatus(txHash) == VotingState.Voting,\\n            \\\"Not in the voting period\\\"\\n        );\\n        uint256 totalForVotes = proposal.totalForVotes;\\n        uint256 totalAgainstVotes = proposal.totalAgainstVotes;\\n        for (uint256 i = 0; i < rightIds.length; i++) {\\n            uint256 id = rightIds[i];\\n            require(\\n                IVoteCounter(_votingRule.voteCounter).voterOf(id) == msg.sender,\\n                \\\"not the voting right owner\\\"\\n            );\\n            uint256 prevForVotes = proposal.forVotes[id];\\n            uint256 prevAgainstVotes = proposal.againstVotes[id];\\n            uint256 votes =\\n                IVoteCounter(_votingRule.voteCounter).getVotes(id, timestamp);\\n            proposal.forVotes[id] = agree ? votes : 0;\\n            proposal.againstVotes[id] = agree ? 0 : votes;\\n            totalForVotes = totalForVotes.add(agree ? votes : 0).sub(\\n                prevForVotes\\n            );\\n            totalAgainstVotes = totalAgainstVotes.add(agree ? 0 : votes).sub(\\n                prevAgainstVotes\\n            );\\n        }\\n        proposal.totalForVotes = totalForVotes;\\n        proposal.totalAgainstVotes = totalAgainstVotes;\\n        emit Vote(txHash, msg.sender, agree);\\n        emit VoteUpdated(txHash, totalForVotes, totalAgainstVotes);\\n    }\\n\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public override {\\n        bytes32 txHash =\\n            _timelock().hashOperation(target, value, data, predecessor, salt);\\n        require(\\n            getVotingStatus(txHash) == VotingState.Passed,\\n            \\\"vote is not passed\\\"\\n        );\\n        _timelock().forceSchedule(\\n            target,\\n            value,\\n            data,\\n            predecessor,\\n            salt,\\n            _timelock().getMinDelay()\\n        );\\n    }\\n\\n    function scheduleBatch(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public override {\\n        bytes32 txHash =\\n            _timelock().hashOperationBatch(\\n                target,\\n                value,\\n                data,\\n                predecessor,\\n                salt\\n            );\\n        require(\\n            getVotingStatus(txHash) == VotingState.Passed,\\n            \\\"vote is not passed\\\"\\n        );\\n        _timelock().forceScheduleBatch(\\n            target,\\n            value,\\n            data,\\n            predecessor,\\n            salt,\\n            _timelock().getMinDelay()\\n        );\\n    }\\n\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable override {\\n        bytes32 txHash =\\n            _timelock().hashOperation(target, value, data, predecessor, salt);\\n        require(\\n            getVotingStatus(txHash) == VotingState.Passed,\\n            \\\"vote is not passed\\\"\\n        );\\n        _timelock().execute{value: value}(\\n            target,\\n            value,\\n            data,\\n            predecessor,\\n            salt\\n        );\\n    }\\n\\n    function executeBatch(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable override {\\n        require(target.length == value.length, \\\"length mismatch\\\");\\n        require(target.length == data.length, \\\"length mismatch\\\");\\n        bytes32 txHash =\\n            _timelock().hashOperationBatch(\\n                target,\\n                value,\\n                data,\\n                predecessor,\\n                salt\\n            );\\n        require(\\n            getVotingStatus(txHash) == VotingState.Passed,\\n            \\\"vote is not passed\\\"\\n        );\\n        uint256 valueSum = 0;\\n        for (uint256 i = 0; i < value.length; i++) {\\n            valueSum = valueSum.add(value[i]);\\n        }\\n        _timelock().executeBatch{value: valueSum}(\\n            target,\\n            value,\\n            data,\\n            predecessor,\\n            salt\\n        );\\n    }\\n\\n    function votingRule() public view override returns (VotingRule memory) {\\n        return _votingRule;\\n    }\\n\\n    function getVotingStatus(bytes32 txHash)\\n        public\\n        view\\n        override\\n        returns (VotingState)\\n    {\\n        Proposal storage proposal = _proposals[txHash];\\n        require(proposal.start != 0, \\\"Not an existing proposal\\\");\\n        if (block.timestamp < proposal.start) return VotingState.Pending;\\n        else if (block.timestamp <= proposal.end) return VotingState.Voting;\\n        else if (_timelock().isOperationDone(txHash))\\n            return VotingState.Executed;\\n        else if (proposal.totalForVotes < _votingRule.minimumVotes)\\n            return VotingState.Rejected;\\n        else if (proposal.totalForVotes > proposal.totalAgainstVotes)\\n            return VotingState.Passed;\\n        else return VotingState.Rejected;\\n    }\\n\\n    function getVotesFor(address account, bytes32 txHash)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 timestamp = _proposals[txHash].start;\\n        return getVotesAt(account, timestamp);\\n    }\\n\\n    function getVotesAt(address account, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256[] memory votingRights =\\n            IVoteCounter(_votingRule.voteCounter).votingRights(account);\\n        uint256 votes;\\n        for (uint256 i = 0; i < votingRights.length; i++) {\\n            votes = votes.add(\\n                IVoteCounter(_votingRule.voteCounter).getVotes(\\n                    votingRights[i],\\n                    timestamp\\n                )\\n            );\\n        }\\n        return votes;\\n    }\\n\\n    function proposals(bytes32 proposalHash)\\n        public\\n        view\\n        override\\n        returns (\\n            address proposer,\\n            uint256 start,\\n            uint256 end,\\n            uint256 totalForVotes,\\n            uint256 totalAgainstVotes\\n        )\\n    {\\n        Proposal storage proposal = _proposals[proposalHash];\\n        return (\\n            proposal.proposer,\\n            proposal.start,\\n            proposal.end,\\n            proposal.totalForVotes,\\n            proposal.totalAgainstVotes\\n        );\\n    }\\n\\n    function _propose(\\n        bytes32 txHash,\\n        uint256 startsIn,\\n        uint256 votingPeriod\\n    ) private whenNotPaused {\\n        Proposal storage proposal = _proposals[txHash];\\n        require(proposal.proposer == address(0));\\n        proposal.proposer = msg.sender;\\n        proposal.start = block.timestamp + startsIn;\\n        proposal.end = proposal.start + votingPeriod;\\n    }\\n\\n    function _beforePropose(uint256 startsIn, uint256 votingPeriod)\\n        private\\n        view\\n    {\\n        uint256 votes = getVotesAt(msg.sender, block.timestamp);\\n        require(\\n            _votingRule.minimumVotesForProposing <= votes,\\n            \\\"Not enough votes for proposing.\\\"\\n        );\\n        require(\\n            _votingRule.minimumPending <= startsIn,\\n            \\\"Pending period is too short.\\\"\\n        );\\n        require(\\n            startsIn <= _votingRule.maximumPending,\\n            \\\"Pending period is too long.\\\"\\n        );\\n        require(\\n            _votingRule.minimumVotingPeriod <= votingPeriod,\\n            \\\"Voting period is too short.\\\"\\n        );\\n        require(\\n            votingPeriod <= _votingRule.maximumVotingPeriod,\\n            \\\"Voting period is too long.\\\"\\n        );\\n    }\\n\\n    function _timelock() internal view returns (TimelockedGovernance) {\\n        return TimelockedGovernance(payable(_gov));\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/interfaces/IVoteCounter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVoteCounter {\\n    function getVotes(uint256 votingRightId, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function voterOf(uint256 votingRightId) external view returns (address);\\n\\n    function votingRights(address voter)\\n        external\\n        view\\n        returns (uint256[] memory rights);\\n\\n    function getTotalVotes() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/interfaces/IWorkersUnion.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nstruct Proposal {\\n    address proposer;\\n    uint256 start;\\n    uint256 end;\\n    uint256 totalForVotes;\\n    uint256 totalAgainstVotes;\\n    mapping(uint256 => uint256) forVotes; // votingRightId => for vote amount\\n    mapping(uint256 => uint256) againstVotes; // votingRightId => against vote amount\\n}\\n\\nstruct VotingRule {\\n    uint256 minimumPending;\\n    uint256 maximumPending;\\n    uint256 minimumVotingPeriod;\\n    uint256 maximumVotingPeriod;\\n    uint256 minimumVotesForProposing;\\n    uint256 minimumVotes;\\n    address voteCounter;\\n}\\n\\ninterface IWorkersUnion {\\n    enum VotingState {Pending, Voting, Passed, Rejected, Executed} // Enum\\n\\n    function launch() external;\\n\\n    function changeVotingRule(\\n        uint256 minimumPendingPeriod,\\n        uint256 maximumPendingPeriod,\\n        uint256 minimumVotingPeriod,\\n        uint256 maximumVotingPeriod,\\n        uint256 minimumVotesForProposing,\\n        uint256 minimumVotes,\\n        address voteCounter\\n    ) external;\\n\\n    function proposeTx(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 startsIn,\\n        uint256 votingPeriod\\n    ) external;\\n\\n    function proposeBatchTx(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 startsIn,\\n        uint256 votingPeriod\\n    ) external;\\n\\n    function vote(bytes32 txHash, bool agree) external;\\n\\n    function manualVote(\\n        bytes32 txHash,\\n        uint256[] memory rightIds,\\n        bool agree\\n    ) external;\\n\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external;\\n\\n    function scheduleBatch(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external;\\n\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external payable;\\n\\n    function executeBatch(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external payable;\\n\\n    function votingRule() external view returns (VotingRule memory);\\n\\n    function getVotingStatus(bytes32 txHash)\\n        external\\n        view\\n        returns (VotingState);\\n\\n    function getVotesFor(address account, bytes32 txHash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getVotesAt(address account, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function proposals(bytes32 proposalHash)\\n        external\\n        view\\n        returns (\\n            address proposer,\\n            uint256 start,\\n            uint256 end,\\n            uint256 totalForVotes,\\n            uint256 totalAgainstVotes\\n        );\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/libraries/VoteCounter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../../core/governance/interfaces/IVoteCounter.sol\\\";\\nimport \\\"../../../core/governance/interfaces/IVotingEscrowToken.sol\\\";\\nimport \\\"../../../core/governance/interfaces/IVotingEscrowLock.sol\\\";\\nimport \\\"../../../utils/Sqrt.sol\\\";\\n\\ncontract VoteCounter is IVoteCounter, Initializable {\\n    IVotingEscrowLock private _veLock;\\n    IVotingEscrowToken private _veToken;\\n\\n    function initialize(address veToken_) public initializer {\\n        _veToken = IVotingEscrowToken(veToken_);\\n        _veLock = IVotingEscrowLock(_veToken.veLocker());\\n    }\\n\\n    function getTotalVotes() public view virtual override returns (uint256) {\\n        return _veToken.totalSupply();\\n    }\\n\\n    function getVotes(uint256 veLockId, uint256 timestamp)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _veToken.balanceOfLockAt(veLockId, timestamp);\\n    }\\n\\n    function voterOf(uint256 veLockId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _veLock.delegateeOf(veLockId);\\n    }\\n\\n    function votingRights(address voter)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory rights)\\n    {\\n        uint256 totalLocks = _veLock.delegatedRights(voter);\\n        rights = new uint256[](totalLocks);\\n        for (uint256 i = 0; i < rights.length; i++) {\\n            rights[i] = _veLock.delegatedRightByIndex(voter, i);\\n        }\\n    }\\n\\n    /**\\n     * @dev This should be used only for the snapshot voting feature.\\n     * Do not use this interface for other purposes.\\n     */\\n    function balanceOf(address account)\\n        external\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256[] memory rights = votingRights(account);\\n        uint256 sum;\\n        for (uint256 i = 0; i < rights.length; i++) {\\n            sum += getVotes(rights[i], block.timestamp);\\n        }\\n        return sum;\\n    }\\n\\n    function veLock() public view returns (address) {\\n        return address(_veLock);\\n    }\\n\\n    function veToken() public view returns (address) {\\n        return address(_veToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/interfaces/IVotingEscrowLock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVotingEscrowLock is IERC721 {\\n    event LockCreated(uint256 veLockId);\\n    event LockUpdate(uint256 veLockId, uint256 amount, uint256 end);\\n    event Withdraw(uint256 veLockId, uint256 amount);\\n    event VoteDelegated(uint256 veLockId, address to);\\n\\n    function locks(uint256 veLockId)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 start,\\n            uint256 end\\n        );\\n\\n    function createLock(uint256 amount, uint256 epochs) external;\\n\\n    function createLockUntil(uint256 amount, uint256 lockEnd) external;\\n\\n    function increaseAmount(uint256 veLockId, uint256 amount) external;\\n\\n    function extendLock(uint256 veLockId, uint256 epochs) external;\\n\\n    function extendLockUntil(uint256 veLockId, uint256 end) external;\\n\\n    function withdraw(uint256 veLockId) external;\\n\\n    function delegate(uint256 veLockId, address to) external;\\n\\n    function totalLockedSupply() external view returns (uint256);\\n\\n    function MAXTIME() external view returns (uint256);\\n\\n    function baseToken() external view returns (address);\\n\\n    function veToken() external view returns (address);\\n\\n    function delegateeOf(uint256 veLockId) external view returns (address);\\n\\n    function delegatedRights(address delegatee) external view returns (uint256);\\n\\n    function delegatedRightByIndex(address delegatee, uint256 idx)\\n        external\\n        view\\n        returns (uint256 veLockId);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/libraries/VotingEscrowLock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\nimport \\\"../../../core/governance/Governed.sol\\\";\\nimport \\\"../../../core/governance/libraries/VotingEscrowToken.sol\\\";\\nimport \\\"../../../core/governance/interfaces/IVotingEscrowLock.sol\\\";\\n\\n/**\\n * @dev Voting Escrow Lock is the refactored solidity implementation of veCRV.\\n *      The token lock is ERC721 and transferrable.\\n *      Its original code https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy\\n */\\n\\ncontract VotingEscrowLock is\\n    IVotingEscrowLock,\\n    ERC721,\\n    ReentrancyGuard,\\n    Initializable,\\n    Governed\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    uint256 public constant override MAXTIME = 4 * (365 days);\\n\\n    address private _baseToken;\\n    address private _veToken;\\n    uint256 private _totalLockedSupply;\\n\\n    mapping(uint256 => Lock) private _locks;\\n\\n    mapping(address => EnumerableSet.UintSet) private _delegated;\\n    EnumerableMap.UintToAddressMap private _rightOwners;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    modifier onlyOwner(uint256 veLockId) {\\n        require(\\n            ownerOf(veLockId) == msg.sender,\\n            \\\"Only the owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"\\\", \\\"\\\") {\\n        // this constructor will not be called since it'll be cloned by proxy pattern.\\n        // initalize() will be called instead.\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address baseToken_,\\n        address veToken_,\\n        address gov_\\n    ) public initializer {\\n        _baseToken = baseToken_;\\n        _veToken = veToken_;\\n        _name = name_;\\n        _symbol = symbol_;\\n        Governed.initialize(gov_);\\n    }\\n\\n    function updateBaseUri(string memory baseURI_) public governed {\\n        _setBaseURI(baseURI_);\\n    }\\n\\n    function createLock(uint256 amount, uint256 epochs) public override {\\n        uint256 until = block.timestamp.add(epochs.mul(1 weeks));\\n        createLockUntil(amount, until);\\n    }\\n\\n    function createLockUntil(uint256 amount, uint256 lockEnd) public override {\\n        require(amount > 0, \\\"should be greater than zero\\\");\\n        uint256 veLockId =\\n            uint256(keccak256(abi.encodePacked(block.number, msg.sender)));\\n        require(!_exists(veLockId), \\\"Already exists\\\");\\n        _locks[veLockId].start = block.timestamp;\\n        _safeMint(msg.sender, veLockId);\\n        _updateLock(veLockId, amount, lockEnd);\\n        emit LockCreated(veLockId);\\n    }\\n\\n    function increaseAmount(uint256 veLockId, uint256 amount)\\n        public\\n        override\\n        onlyOwner(veLockId)\\n    {\\n        require(amount > 0, \\\"should be greater than zero\\\");\\n        uint256 newAmount = _locks[veLockId].amount.add(amount);\\n        _updateLock(veLockId, newAmount, _locks[veLockId].end);\\n    }\\n\\n    function extendLock(uint256 veLockId, uint256 epochs)\\n        public\\n        override\\n        onlyOwner(veLockId)\\n    {\\n        uint256 until = block.timestamp.add(epochs.mul(1 weeks));\\n        extendLockUntil(veLockId, until);\\n    }\\n\\n    function extendLockUntil(uint256 veLockId, uint256 end)\\n        public\\n        override\\n        onlyOwner(veLockId)\\n    {\\n        _updateLock(veLockId, _locks[veLockId].amount, end);\\n    }\\n\\n    function withdraw(uint256 veLockId) public override onlyOwner(veLockId) {\\n        Lock memory lock = _locks[veLockId];\\n        require(block.timestamp >= lock.end, \\\"Locked.\\\");\\n        // transfer\\n        IERC20(_baseToken).safeTransfer(msg.sender, lock.amount);\\n        _totalLockedSupply = _totalLockedSupply.sub(lock.amount);\\n        VotingEscrowToken(_veToken).checkpoint(veLockId, lock, Lock(0, 0, 0));\\n        _locks[veLockId].amount = 0;\\n        emit Withdraw(veLockId, lock.amount);\\n    }\\n\\n    function delegate(uint256 veLockId, address to)\\n        external\\n        override\\n        onlyOwner(veLockId)\\n    {\\n        _delegate(veLockId, to);\\n    }\\n\\n    function baseToken() public view override returns (address) {\\n        return _baseToken;\\n    }\\n\\n    function veToken() public view override returns (address) {\\n        return _veToken;\\n    }\\n\\n    function totalLockedSupply() public view override returns (uint256) {\\n        return _totalLockedSupply;\\n    }\\n\\n    function delegateeOf(uint256 veLockId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (!_exists(veLockId)) {\\n            return address(0);\\n        }\\n        (bool delegated, address delegatee) = _rightOwners.tryGet(veLockId);\\n        return delegated ? delegatee : ownerOf(veLockId);\\n    }\\n\\n    function delegatedRights(address voter)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            voter != address(0),\\n            \\\"VotingEscrowLock: delegate query for the zero address\\\"\\n        );\\n        return _delegated[voter].length();\\n    }\\n\\n    function delegatedRightByIndex(address voter, uint256 idx)\\n        public\\n        view\\n        override\\n        returns (uint256 veLockId)\\n    {\\n        require(\\n            voter != address(0),\\n            \\\"VotingEscrowLock: delegate query for the zero address\\\"\\n        );\\n        return _delegated[voter].at(idx);\\n    }\\n\\n    function locks(uint256 veLockId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 amount,\\n            uint256 start,\\n            uint256 end\\n        )\\n    {\\n        Lock memory lock = _locks[veLockId];\\n        return (lock.amount, lock.start, lock.end);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function _updateLock(\\n        uint256 veLockId,\\n        uint256 amount,\\n        uint256 end\\n    ) internal nonReentrant {\\n        Lock memory prevLock = _locks[veLockId];\\n        Lock memory newLock =\\n            Lock(amount, prevLock.start, (end / 1 weeks).mul(1 weeks));\\n        require(_exists(veLockId), \\\"Lock does not exist.\\\");\\n        require(\\n            prevLock.end == 0 || prevLock.end > block.timestamp,\\n            \\\"Cannot update expired. Create a new lock.\\\"\\n        );\\n        require(\\n            newLock.end > block.timestamp,\\n            \\\"Unlock time should be in the future\\\"\\n        );\\n        require(\\n            newLock.end <= block.timestamp + MAXTIME,\\n            \\\"Max lock is 4 years\\\"\\n        );\\n        require(\\n            !(prevLock.amount == newLock.amount && prevLock.end == newLock.end),\\n            \\\"No update\\\"\\n        );\\n        require(\\n            prevLock.amount <= newLock.amount,\\n            \\\"new amount should be greater than before\\\"\\n        );\\n        require(\\n            prevLock.end <= newLock.end,\\n            \\\"new end timestamp should be greater than before\\\"\\n        );\\n\\n        uint256 increment = (newLock.amount - prevLock.amount); // require prevents underflow\\n        // 2. transfer\\n        if (increment > 0) {\\n            IERC20(_baseToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                increment\\n            );\\n            // 3. update lock amount\\n            _totalLockedSupply = _totalLockedSupply.add(increment);\\n        }\\n        _locks[veLockId] = newLock;\\n\\n        // 4. updateCheckpoint\\n        VotingEscrowToken(_veToken).checkpoint(veLockId, prevLock, newLock);\\n        emit LockUpdate(veLockId, amount, newLock.end);\\n    }\\n\\n    function _delegate(uint256 veLockId, address to) internal {\\n        address _voter = delegateeOf(veLockId);\\n        _delegated[_voter].remove(veLockId);\\n        _delegated[to].add(veLockId);\\n        _rightOwners.set(veLockId, to);\\n        emit VoteDelegated(veLockId, to);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address to,\\n        uint256 veLockId\\n    ) internal override {\\n        _delegate(veLockId, to);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/dividend/DividendPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../core/governance/interfaces/IVotingEscrowToken.sol\\\";\\nimport \\\"../../core/governance/interfaces/IVotingEscrowLock.sol\\\";\\nimport \\\"../../core/dividend/interfaces/IDividendPool.sol\\\";\\nimport \\\"../../core/governance/Governed.sol\\\";\\nimport \\\"../../utils/Utils.sol\\\";\\n\\nstruct Distribution {\\n    uint256 totalDistribution;\\n    uint256 balance;\\n    mapping(uint256 => uint256) tokenPerWeek; // key is week num\\n    mapping(uint256 => uint256) claimStartWeekNum; // key is lock id\\n}\\n\\n/** @title Dividend Pool */\\ncontract DividendPool is\\n    IDividendPool,\\n    Governed,\\n    Initializable,\\n    ReentrancyGuard\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Utils for address[];\\n\\n    // public constants\\n    uint256 public constant epochUnit = 1 weeks; // default 1 epoch is 1 week\\n\\n    // state variables\\n    address private _veVISION; // a.k.a RIGHT\\n    address private _veLocker;\\n    mapping(address => Distribution) private _distributions;\\n    mapping(address => bool) private _distributed;\\n    uint256 private _genesis;\\n    address[] private _distributedTokens;\\n    address[] private _featuredRewards;\\n\\n    // events\\n    event NewReward(address token);\\n    event NewDistribution(address indexed token, uint256 amount);\\n\\n    function initialize(\\n        address gov,\\n        address RIGHT,\\n        address[] memory _rewardTokens\\n    ) public initializer {\\n        _veVISION = RIGHT;\\n        _veLocker = IVotingEscrowToken(RIGHT).veLocker();\\n        Governed.initialize(gov);\\n        _genesis = (block.timestamp / epochUnit) * epochUnit;\\n        _featuredRewards = _rewardTokens;\\n    }\\n\\n    // distribution\\n\\n    function distribute(address _token, uint256 _amount)\\n        public\\n        override\\n        nonReentrant\\n    {\\n        if (!_distributed[_token]) {\\n            _distributed[_token] = true;\\n            _distributedTokens.push(_token);\\n            emit NewReward(_token);\\n        }\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 newBalance = IERC20(_token).balanceOf(address(this));\\n        Distribution storage distribution = _distributions[_token];\\n        uint256 increment = newBalance.sub(distribution.balance);\\n        distribution.balance = newBalance;\\n        distribution.totalDistribution = distribution.totalDistribution.add(\\n            increment\\n        );\\n        uint256 weekNum = getCurrentEpoch();\\n        distribution.tokenPerWeek[weekNum] = distribution.tokenPerWeek[weekNum]\\n            .add(increment);\\n        emit NewDistribution(_token, _amount);\\n    }\\n\\n    /**\\n     * @notice If there's no ve token holder for that given epoch, anyone can call\\n     *          this function to redistribute the rewards to the closest epoch.\\n     */\\n    function redistribute(address token, uint256 epoch) public {\\n        require(\\n            epoch < getCurrentEpoch(),\\n            \\\"Given epoch is still accepting rights.\\\"\\n        );\\n        uint256 timestamp = _genesis + epoch * epochUnit + 1 weeks;\\n        require(\\n            IVotingEscrowToken(_veVISION).totalSupplyAt(timestamp) == 0,\\n            \\\"Locked Token exists for that epoch\\\"\\n        );\\n        uint256 newEpoch;\\n        uint256 increment = 1;\\n        while (timestamp + (increment * 1 weeks) <= block.timestamp) {\\n            if (\\n                IVotingEscrowToken(_veVISION).totalSupplyAt(\\n                    timestamp + (increment * 1 weeks)\\n                ) > 0\\n            ) {\\n                newEpoch = epoch + increment;\\n                break;\\n            }\\n            increment += 1;\\n        }\\n        require(newEpoch > epoch, \\\"Failed to find new epoch to redistribute\\\");\\n        Distribution storage distribution = _distributions[token];\\n        distribution.tokenPerWeek[newEpoch] = distribution.tokenPerWeek[\\n            newEpoch\\n        ]\\n            .add(distribution.tokenPerWeek[epoch]);\\n        distribution.tokenPerWeek[epoch] = 0;\\n    }\\n\\n    // claim\\n\\n    function claim(address token) public nonReentrant {\\n        uint256 prevEpochTimestamp = block.timestamp - epochUnit; // safe from underflow\\n        _claimUpTo(token, prevEpochTimestamp);\\n    }\\n\\n    function claimUpTo(address token, uint256 timestamp) public nonReentrant {\\n        _claimUpTo(token, timestamp);\\n    }\\n\\n    function claimBatch(address[] memory tokens) public nonReentrant {\\n        uint256 prevEpochTimestamp = block.timestamp - epochUnit; // safe from underflow\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _claimUpTo(tokens[i], prevEpochTimestamp);\\n        }\\n    }\\n\\n    // governance\\n    function setFeaturedRewards(address[] memory featured) public governed {\\n        _featuredRewards = featured;\\n    }\\n\\n    function genesis() public view override returns (uint256) {\\n        return _genesis;\\n    }\\n\\n    function veVISION() public view override returns (address) {\\n        return _veVISION;\\n    }\\n\\n    function veLocker() public view override returns (address) {\\n        return _veLocker;\\n    }\\n\\n    function getEpoch(uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return (timestamp - _genesis) / epochUnit; // safe from underflow\\n    }\\n\\n    /** @notice 1 epoch is 1 week */\\n    function getCurrentEpoch() public view override returns (uint256) {\\n        return getEpoch(block.timestamp);\\n    }\\n\\n    function distributedTokens()\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _distributedTokens;\\n    }\\n\\n    function totalDistributed(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _distributions[token].totalDistribution;\\n    }\\n\\n    function distributionBalance(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _distributions[token].balance;\\n    }\\n\\n    function distributionOfWeek(address token, uint256 epochNum)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _distributions[token].tokenPerWeek[epochNum];\\n    }\\n\\n    function claimStartWeek(address token, uint256 veLockId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _distributions[token].claimStartWeekNum[veLockId];\\n    }\\n\\n    function claimable(address token) public view override returns (uint256) {\\n        Distribution storage distribution = _distributions[token];\\n        uint256 currentEpoch = getCurrentEpoch();\\n        if (currentEpoch == 0) return 0;\\n        uint256 myLocks = IVotingEscrowLock(_veLocker).balanceOf(msg.sender);\\n        uint256 acc;\\n        for (uint256 i = 0; i < myLocks; i++) {\\n            uint256 lockId =\\n                IERC721Enumerable(_veLocker).tokenOfOwnerByIndex(msg.sender, i);\\n            acc = acc.add(_claimable(distribution, lockId, currentEpoch - 1));\\n        }\\n        return acc;\\n    }\\n\\n    function featuredRewards() public view override returns (address[] memory) {\\n        return _featuredRewards;\\n    }\\n\\n    function _claimUpTo(address token, uint256 timestamp) internal {\\n        uint256 epoch = getEpoch(timestamp);\\n        uint256 myLocks = IVotingEscrowLock(_veLocker).balanceOf(msg.sender);\\n        uint256 amountToClaim = 0;\\n        for (uint256 i = 0; i < myLocks; i++) {\\n            uint256 lockId =\\n                IERC721Enumerable(_veLocker).tokenOfOwnerByIndex(msg.sender, i);\\n\\n            uint256 amount = _recordClaim(token, lockId, epoch);\\n            amountToClaim = amountToClaim.add(amount);\\n        }\\n        if (amountToClaim != 0) {\\n            IERC20(token).safeTransfer(msg.sender, amountToClaim);\\n        }\\n    }\\n\\n    function _recordClaim(\\n        address token,\\n        uint256 tokenId,\\n        uint256 epoch\\n    ) internal returns (uint256 amountToClaim) {\\n        Distribution storage distribution = _distributions[token];\\n        amountToClaim = _claimable(distribution, tokenId, epoch);\\n        distribution.claimStartWeekNum[tokenId] = epoch + 1;\\n        distribution.balance = distribution.balance.sub(amountToClaim);\\n        return amountToClaim;\\n    }\\n\\n    function _claimable(\\n        Distribution storage distribution,\\n        uint256 tokenId,\\n        uint256 epoch\\n    ) internal view returns (uint256) {\\n        require(epoch < getCurrentEpoch(), \\\"Current epoch is being updated.\\\");\\n        uint256 epochCursor = distribution.claimStartWeekNum[tokenId];\\n        uint256 endEpoch;\\n        {\\n            (, uint256 start, uint256 end) =\\n                IVotingEscrowLock(_veLocker).locks(tokenId);\\n            epochCursor = epochCursor != 0 ? epochCursor : getEpoch(start);\\n            endEpoch = getEpoch(end);\\n        }\\n        uint256 accumulated;\\n        while (epochCursor <= epoch && epochCursor <= endEpoch) {\\n            // check the balance when the epoch ends\\n            uint256 timestamp = _genesis + epochCursor * epochUnit + 1 weeks;\\n            // calculate amount;\\n            uint256 bal =\\n                IVotingEscrowToken(_veVISION).balanceOfLockAt(\\n                    tokenId,\\n                    timestamp\\n                );\\n            uint256 supply =\\n                IVotingEscrowToken(_veVISION).totalSupplyAt(timestamp);\\n            if (supply != 0) {\\n                accumulated = accumulated.add(\\n                    distribution.tokenPerWeek[epochCursor].mul(bal).div(supply)\\n                );\\n            }\\n            // update cursor\\n            epochCursor += 1;\\n        }\\n        return accumulated;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/marketplace/Marketplace.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"../../utils/ERC20Recoverer.sol\\\";\\nimport \\\"../../core/dividend/libraries/Distributor.sol\\\";\\nimport \\\"../../core/dividend/interfaces/IDividendPool.sol\\\";\\nimport \\\"../../core/governance/Governed.sol\\\";\\nimport \\\"../../core/marketplace/interfaces/IMarketplace.sol\\\";\\n\\ncontract Marketplace is\\n    Distributor,\\n    ERC20Recoverer,\\n    Governed,\\n    ReentrancyGuard,\\n    ERC1155Burnable,\\n    IMarketplace\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ERC20Burnable;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant RATE_DENOMINATOR = 10000;\\n\\n    ERC20Burnable private _commitToken;\\n    uint256 private _taxRate = 2000; // denominator is 10,000\\n    mapping(uint256 => Product) private _products;\\n    uint256[] private _featured;\\n\\n    modifier onlyManufacturer(uint256 id) {\\n        require(\\n            msg.sender == _products[id].manufacturer,\\n            \\\"allowed only for manufacturer\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() ERC1155(\\\"\\\") {\\n        // this constructor will not be called since it'll be cloned by proxy pattern.\\n        // initalize() will be called instead.\\n    }\\n\\n    function initialize(\\n        address _gov,\\n        address commitToken_,\\n        address _dividendPool\\n    ) public initializer {\\n        _taxRate = 2000; // denominator is 10,000\\n        _commitToken = ERC20Burnable(commitToken_);\\n        ERC20Recoverer.initialize(_gov, new address[](0));\\n        Governed.initialize(_gov);\\n        Distributor._setup(_dividendPool);\\n    }\\n\\n    function buy(\\n        uint256 id,\\n        address to,\\n        uint256 amount\\n    ) public override nonReentrant {\\n        require(amount > 0, \\\"cannot buy 0\\\");\\n        // check the product is for sale\\n        Product storage product = _products[id];\\n        require(product.manufacturer != address(0), \\\"Product not exists\\\");\\n\\n        if (product.maxSupply != 0) {\\n            uint256 stock = product.maxSupply.sub(product.totalSupply);\\n            require(amount <= stock, \\\"Not enough stock\\\");\\n            require(stock > 0, \\\"Not for sale.\\\");\\n        }\\n        uint256 totalPayment = product.price.mul(amount); // SafeMath prevents overflow\\n        // Vision Tax\\n        uint256 visionTax = totalPayment.mul(_taxRate).div(RATE_DENOMINATOR);\\n        // Burn tokens\\n        uint256 postTax = totalPayment.sub(visionTax);\\n        uint256 forManufacturer =\\n            postTax.mul(product.profitRate).div(RATE_DENOMINATOR);\\n        uint256 amountToBurn = postTax.sub(forManufacturer);\\n        _commitToken.safeTransferFrom(msg.sender, address(this), visionTax);\\n        _commitToken.safeTransferFrom(\\n            msg.sender,\\n            product.manufacturer,\\n            forManufacturer\\n        );\\n        _commitToken.burnFrom(msg.sender, amountToBurn);\\n        _distribute(address(_commitToken), visionTax);\\n        // mint & give\\n        _mint(to, id, amount, \\\"\\\");\\n    }\\n\\n    function manufacture(\\n        string memory cid,\\n        uint256 profitRate,\\n        uint256 price\\n    ) external override {\\n        uint256 id = uint256(keccak256(abi.encodePacked(cid, msg.sender)));\\n        _products[id] = Product(msg.sender, 0, 0, price, profitRate, cid);\\n        emit NewProduct(id, msg.sender, cid);\\n    }\\n\\n    function manufactureLimitedEdition(\\n        string memory cid,\\n        uint256 profitRate,\\n        uint256 price,\\n        uint256 maxSupply\\n    ) external override {\\n        uint256 id = uint256(keccak256(abi.encodePacked(cid, msg.sender)));\\n        _products[id] = Product(\\n            msg.sender,\\n            0,\\n            maxSupply,\\n            price,\\n            profitRate,\\n            cid\\n        );\\n        emit NewProduct(id, msg.sender, cid);\\n    }\\n\\n    /**\\n     * @notice Set max supply and make it a limited edition.\\n     */\\n    function setMaxSupply(uint256 id, uint256 _maxSupply)\\n        external\\n        override\\n        onlyManufacturer(id)\\n    {\\n        require(_products[id].maxSupply == 0, \\\"Max supply is already set\\\");\\n        require(\\n            _products[id].totalSupply <= _maxSupply,\\n            \\\"Max supply is less than current supply\\\"\\n        );\\n        _products[id].maxSupply = _maxSupply;\\n    }\\n\\n    function setPrice(uint256 id, uint256 price)\\n        public\\n        override\\n        onlyManufacturer(id)\\n    {\\n        // to prevent overflow\\n        require(price * 1000000000 > price, \\\"Cannot be expensive too much\\\");\\n        _products[id].price = price;\\n        emit PriceUpdated(id, price);\\n    }\\n\\n    /**\\n     * @notice The profit rate is based on the post-tax amount of the payment.\\n     *      For example, when the price is 10000 DCT, tax rate is 2000, and profit rate is 5000,\\n     *      2000 DCT will go to the vision farm, 4000 DCT will be burnt, and 4000 will be given\\n     *      to the manufacturer.\\n     */\\n    function setProfitRate(uint256 id, uint256 profitRate)\\n        public\\n        override\\n        onlyManufacturer(id)\\n    {\\n        require(profitRate <= RATE_DENOMINATOR, \\\"Profit rate is too high\\\");\\n        _products[id].profitRate = profitRate;\\n        emit ProfitRateUpdated(id, profitRate);\\n    }\\n\\n    function setFeatured(uint256[] calldata featured_)\\n        external\\n        override\\n        governed\\n    {\\n        _featured = featured_;\\n    }\\n\\n    function setTaxRate(uint256 rate) public override governed {\\n        require(rate <= RATE_DENOMINATOR);\\n        _taxRate = rate;\\n    }\\n\\n    function commitToken() public view override returns (address) {\\n        return address(_commitToken);\\n    }\\n\\n    function taxRate() public view override returns (uint256) {\\n        return _taxRate;\\n    }\\n\\n    function products(uint256 id)\\n        public\\n        view\\n        override\\n        returns (Product memory)\\n    {\\n        return _products[id];\\n    }\\n\\n    function featured() public view override returns (uint256[] memory) {\\n        return _featured;\\n    }\\n\\n    function uri(uint256 id)\\n        external\\n        view\\n        override(IERC1155MetadataURI, ERC1155)\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(\\\"ipfs://\\\", _products[id].uri));\\n    }\\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override {\\n        uint256 newSupply = _products[id].totalSupply.add(amount);\\n        require(\\n            _products[id].maxSupply == 0 ||\\n                newSupply <= _products[id].maxSupply,\\n            \\\"Sold out\\\"\\n        );\\n        _products[id].totalSupply = newSupply;\\n        super._mint(account, id, amount, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/marketplace/interfaces/IMarketplace.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\\\";\\n\\nstruct Product {\\n    address manufacturer;\\n    uint256 totalSupply;\\n    uint256 maxSupply;\\n    uint256 price;\\n    uint256 profitRate;\\n    string uri;\\n}\\n\\ninterface IMarketplace is IERC1155MetadataURI {\\n    function buy(\\n        uint256 id,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function manufacture(\\n        string memory cid,\\n        uint256 profitRate,\\n        uint256 price\\n    ) external;\\n\\n    function manufactureLimitedEdition(\\n        string memory cid,\\n        uint256 profitRate,\\n        uint256 price,\\n        uint256 maxSupply\\n    ) external;\\n\\n    function setMaxSupply(uint256 id, uint256 _maxSupply) external;\\n\\n    function setPrice(uint256 id, uint256 price) external;\\n\\n    function setProfitRate(uint256 id, uint256 profitRate) external;\\n\\n    function setTaxRate(uint256 rate) external;\\n\\n    function setFeatured(uint256[] calldata _featured) external;\\n\\n    function commitToken() external view returns (address);\\n\\n    function taxRate() external view returns (uint256);\\n\\n    function products(uint256 id) external view returns (Product memory);\\n\\n    function featured() external view returns (uint256[] memory);\\n\\n    event NewProduct(uint256 id, address manufacturer, string uri);\\n\\n    event TaxRateUpdated(uint256 taxRate);\\n\\n    event PriceUpdated(uint256 indexed productId, uint256 price);\\n\\n    event ProfitRateUpdated(uint256 indexed productId, uint256 profitRate);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/work/deprecated/JobBoard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"../../../core/governance/Governed.sol\\\";\\nimport \\\"../../../core/work/libraries/CommitMinter.sol\\\";\\nimport \\\"../../../core/work/libraries/GrantReceiver.sol\\\";\\nimport \\\"../../../core/work/interfaces/IStableReserve.sol\\\";\\nimport \\\"../../../core/work/interfaces/IContributionBoard.sol\\\";\\nimport \\\"../../../core/dividend/libraries/Distributor.sol\\\";\\nimport \\\"../../../core/dividend/interfaces/IDividendPool.sol\\\";\\nimport \\\"../../../core/project/Project.sol\\\";\\nimport \\\"../../../utils/IERC1620.sol\\\";\\nimport \\\"../../../utils/Utils.sol\\\";\\n\\nstruct Budget {\\n    uint256 amount;\\n    bool transferred;\\n}\\n\\ncontract JobBoard is\\n    CommitMinter,\\n    GrantReceiver,\\n    Distributor,\\n    Governed,\\n    ReentrancyGuard,\\n    Initializable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n    using Utils for address[];\\n\\n    bool thirdPartyAccess;\\n\\n    address public sablier;\\n\\n    address public baseCurrency;\\n\\n    Project public project;\\n\\n    uint256 public normalTaxRate = 2000; // 20% goes to the vision sharing farm, 80% is swapped to stable coin and goes to the labor market\\n\\n    uint256 public taxRateForUndeclared = 5000; // 50% goes to the vision farm when the budget is undeclared.\\n\\n    mapping(address => bool) public acceptableTokens;\\n\\n    mapping(uint256 => uint256) public projectFund;\\n\\n    mapping(bytes32 => bool) public claimed;\\n\\n    mapping(uint256 => Budget[]) public projectBudgets;\\n\\n    mapping(uint256 => bool) public approvedProjects;\\n\\n    mapping(uint256 => bool) public finalized;\\n\\n    mapping(uint256 => uint256) private _projectOf;\\n\\n    mapping(uint256 => uint256[]) private _streams;\\n\\n    mapping(uint256 => address[]) private _contributors;\\n\\n    event ManagerUpdated(address indexed manager, bool active);\\n\\n    event ProjectPosted(uint256 projId);\\n\\n    event ProjectClosed(uint256 projId);\\n\\n    event Grant(uint256 projId, uint256 amount);\\n\\n    event Payed(uint256 projId, address to, uint256 amount);\\n\\n    event PayedInStream(\\n        uint256 projId,\\n        address to,\\n        uint256 amount,\\n        uint256 streamId\\n    );\\n\\n    event BudgetAdded(\\n        uint256 indexed projId,\\n        uint256 index,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    event BudgetExecuted(uint256 projId, uint256 index);\\n\\n    event BudgetWithdrawn(uint256 projId, uint256 index);\\n\\n    constructor() {\\n        // this will not be called\\n    }\\n\\n    function initialize(\\n        address _project,\\n        address _gov,\\n        address _dividendPool,\\n        address _stableReserve,\\n        address _baseCurrency,\\n        address _commit,\\n        address _sablier\\n    ) public initializer {\\n        normalTaxRate = 2000; // 20% goes to the vision sharing farm, 80% is swapped to stable coin and goes to the labor market\\n        taxRateForUndeclared = 5000; // 50% goes to the vision farm when the budget is undeclared.\\n        CommitMinter._setup(_stableReserve, _commit);\\n        Distributor._setup(_dividendPool);\\n        baseCurrency = _baseCurrency;\\n        project = Project(_project);\\n        acceptableTokens[_baseCurrency] = true;\\n        thirdPartyAccess = true;\\n        sablier = _sablier;\\n        Governed.initialize(_gov);\\n    }\\n\\n    modifier onlyStableReserve() {\\n        require(\\n            address(stableReserve) == msg.sender,\\n            \\\"Only the stable reserves can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyProjectOwner(uint256 projId) {\\n        require(project.ownerOf(projId) == msg.sender, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyApprovedProject(uint256 projId) {\\n        require(thirdPartyAccess, \\\"Third party access is not allowed.\\\");\\n        require(approvedProjects[projId], \\\"Not an approved project.\\\");\\n        _;\\n    }\\n\\n    function addBudget(\\n        uint256 projId,\\n        address token,\\n        uint256 amount\\n    ) public onlyProjectOwner(projId) {\\n        _addBudget(projId, token, amount);\\n    }\\n\\n    function addAndExecuteBudget(\\n        uint256 projId,\\n        address token,\\n        uint256 amount\\n    ) public onlyProjectOwner(projId) {\\n        uint256 budgetIdx = _addBudget(projId, token, amount);\\n        executeBudget(projId, budgetIdx);\\n    }\\n\\n    function closeProject(uint256 projId) public onlyProjectOwner(projId) {\\n        _withdrawAllBudgets(projId);\\n        approvedProjects[projId] = false;\\n        emit ProjectClosed(projId);\\n    }\\n\\n    function forceExecuteBudget(uint256 projId, uint256 index)\\n        public\\n        onlyProjectOwner(projId)\\n    {\\n        // force approve does not allow swap and approve func to prevent\\n        // exploitation using flash loan attack\\n        _convertStableToCommit(projId, index, taxRateForUndeclared);\\n    }\\n\\n    // Operator functions\\n    function executeBudget(uint256 projId, uint256 index)\\n        public\\n        onlyApprovedProject(projId)\\n    {\\n        _convertStableToCommit(projId, index, normalTaxRate);\\n    }\\n\\n    function addProjectFund(uint256 projId, uint256 amount) public {\\n        IERC20(commitToken).safeTransferFrom(msg.sender, address(this), amount);\\n        projectFund[projId] = projectFund[projId].add(amount);\\n    }\\n\\n    function receiveGrant(\\n        address currency,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override onlyStableReserve returns (bool result) {\\n        require(\\n            currency == commitToken,\\n            \\\"Only can get $COMMIT token for its grant\\\"\\n        );\\n        uint256 projId = abi.decode(data, (uint256));\\n        require(project.ownerOf(projId) != address(0), \\\"No budget owner\\\");\\n        projectFund[projId] = projectFund[projId].add(amount);\\n        emit Grant(projId, amount);\\n        return true;\\n    }\\n\\n    function compensate(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount\\n    ) public onlyProjectOwner(projectId) {\\n        _compensate(projectId, to, amount);\\n    }\\n\\n    function compensateInStream(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount,\\n        uint256 period\\n    ) public onlyProjectOwner(projectId) {\\n        require(projectFund[projectId] >= amount);\\n        projectFund[projectId] = projectFund[projectId] - amount; // \\\"require\\\" protects underflow\\n        IERC20(commitToken).approve(sablier, amount); // approve the transfer\\n        uint256 streamId =\\n            IERC1620(sablier).createStream(\\n                to,\\n                amount,\\n                commitToken,\\n                block.timestamp,\\n                block.timestamp + period\\n            );\\n\\n        _projectOf[streamId] = projectId;\\n        _streams[projectId].push(streamId);\\n        emit PayedInStream(projectId, to, amount, streamId);\\n    }\\n\\n    function cancelStream(uint256 projectId, uint256 streamId)\\n        public\\n        onlyProjectOwner(projectId)\\n    {\\n        require(projectOf(streamId) == projectId, \\\"Invalid project id\\\");\\n\\n        (, , , , , , uint256 remainingBalance, ) =\\n            IERC1620(sablier).getStream(streamId);\\n\\n        require(IERC1620(sablier).cancelStream(streamId), \\\"Failed to cancel\\\");\\n        projectFund[projectId] = projectFund[projectId].add(remainingBalance);\\n    }\\n\\n    function claim(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory sig\\n    ) public {\\n        bytes32 claimHash =\\n            keccak256(abi.encodePacked(projectId, to, amount, salt));\\n        require(!claimed[claimHash], \\\"Already claimed\\\");\\n        claimed[claimHash] = true;\\n        address signer = claimHash.recover(sig);\\n        require(project.ownerOf(projectId) == signer, \\\"Invalid signer\\\");\\n        _compensate(projectId, to, amount);\\n    }\\n\\n    function projectOf(uint256 streamId) public view returns (uint256 id) {\\n        return _projectOf[streamId];\\n    }\\n\\n    // Governed functions\\n\\n    function addCurrency(address currency) public governed {\\n        acceptableTokens[currency] = true;\\n    }\\n\\n    function removeCurrency(address currency) public governed {\\n        acceptableTokens[currency] = false;\\n    }\\n\\n    function approveProject(uint256 projId) public governed {\\n        _approveProject(projId);\\n    }\\n\\n    function disapproveProject(uint256 projId) public governed {\\n        _withdrawAllBudgets(projId);\\n        approvedProjects[projId] = false;\\n        emit ProjectClosed(projId);\\n    }\\n\\n    function setTaxRate(uint256 rate) public governed {\\n        require(rate <= 10000);\\n        normalTaxRate = rate;\\n    }\\n\\n    function setTaxRateForUndeclared(uint256 rate) public governed {\\n        require(rate <= 10000);\\n        taxRateForUndeclared = rate;\\n    }\\n\\n    function allowThirdPartyAccess(bool allow) public governed {\\n        thirdPartyAccess = allow;\\n    }\\n\\n    function getTotalBudgets(uint256 projId) public view returns (uint256) {\\n        return projectBudgets[projId].length;\\n    }\\n\\n    function getStreams(uint256 projId) public view returns (uint256[] memory) {\\n        return _streams[projId];\\n    }\\n\\n    function getContributors(uint256 projId)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return _contributors[projId];\\n    }\\n\\n    // Internal functions\\n    function _addBudget(\\n        uint256 projId,\\n        address token,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        require(acceptableTokens[token], \\\"Not a supported currency\\\");\\n        Budget memory budget = Budget(amount, false);\\n        projectBudgets[projId].push(budget);\\n        emit BudgetAdded(\\n            projId,\\n            projectBudgets[projId].length - 1,\\n            token,\\n            amount\\n        );\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        return projectBudgets[projId].length - 1;\\n    }\\n\\n    function _approveProject(uint256 projId) internal {\\n        require(!approvedProjects[projId], \\\"Already approved\\\");\\n        approvedProjects[projId] = true;\\n    }\\n\\n    function _withdrawAllBudgets(uint256 projId) internal nonReentrant {\\n        Budget[] storage budgets = projectBudgets[projId];\\n        address projOwner = project.ownerOf(projId);\\n        for (uint256 i = 0; i < budgets.length; i += 1) {\\n            Budget storage budget = budgets[i];\\n            if (!budget.transferred) {\\n                budget.transferred = true;\\n                IERC20(baseCurrency).transfer(projOwner, budget.amount);\\n                emit BudgetWithdrawn(projId, i);\\n            }\\n        }\\n        delete projectBudgets[projId];\\n    }\\n\\n    /**\\n     * @param projId The project NFT id for this budget.\\n     * @param taxRate The tax rate to approve the budget.\\n     */\\n    function _convertStableToCommit(\\n        uint256 projId,\\n        uint256 index,\\n        uint256 taxRate\\n    ) internal {\\n        Budget storage budget = projectBudgets[projId][index];\\n        require(budget.transferred == false, \\\"Budget is already transferred.\\\");\\n        // Mark the budget as transferred\\n        budget.transferred = true;\\n        // take vision tax from the budget\\n        uint256 visionTax = budget.amount.mul(taxRate).div(10000);\\n        uint256 fund = budget.amount.sub(visionTax);\\n        _distribute(baseCurrency, visionTax);\\n        // Mint commit fund\\n        _mintCommit(fund);\\n        projectFund[projId] = projectFund[projId].add(fund);\\n        emit BudgetExecuted(projId, index);\\n    }\\n\\n    function _compensate(\\n        uint256 projectId,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(projectFund[projectId] >= amount);\\n        projectFund[projectId] = projectFund[projectId] - amount; // \\\"require\\\" protects underflow\\n        IERC20(commitToken).safeTransfer(to, amount);\\n        emit Payed(projectId, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/core/governance/libraries/SquareRootVoteCounter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\nimport \\\"../../../core/governance/libraries/VoteCounter.sol\\\";\\nimport \\\"../../../utils/Sqrt.sol\\\";\\n\\ncontract SquareRootVoteCounter is VoteCounter {\\n    using Sqrt for uint256;\\n\\n    function getVotes(uint256 veLockId, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 votes = super.getVotes(veLockId, timestamp);\\n        return votes.sqrt();\\n    }\\n\\n    function getTotalVotes() public view virtual override returns (uint256) {\\n        return IVotingEscrowToken(veToken()).totalSupply().sqrt();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // success determines whether the staticcall succeeded and result determines\\n        // whether the contract at account indicates support of _interfaceId\\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\\n\\n        return (success && result);\\n    }\\n\\n    /**\\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return success true if the STATICCALL succeeded, false otherwise\\n     * @return result true if the STATICCALL succeeded and the contract at account\\n     * indicates support of the interface with identifier interfaceId, false otherwise\\n     */\\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\\n        private\\n        view\\n        returns (bool, bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32) return (false, false);\\n        return (success, abi.decode(result, (bool)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/TimelockController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./../math/SafeMath.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl {\\n\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay);\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with a given `minDelay`.\\n     */\\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // deployer + self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // register proposers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        require(hasRole(role, _msgSender()) || hasRole(role, address(0)), \\\"TimelockController: sender requires permission\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        // solhint-disable-next-line not-rely-on-time\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        _timestamps[id] = SafeMath.add(block.timestamp, delay);\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function execute(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public payable virtual onlyRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _beforeCall(predecessor);\\n        _call(id, 0, target, value, data);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public payable virtual onlyRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _beforeCall(predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            _call(id, i, targets[i], values[i], datas[i]);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 predecessor) private view {\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     *\\n     * Emits a {CallExecuted} event.\\n     */\\n    function _call(bytes32 id, uint256 index, address target, uint256 value, bytes calldata data) private {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, index, target, value, data);\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Anarchized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"NewGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anarchize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anarchizedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceAnarchize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceAnarchizeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gov_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gov_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setAnarchyPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gov_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VISION", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1575cc6ee76cea2a2d79a7a807e8d7bf78affa80ccf91efc8fff5854127e4823"}