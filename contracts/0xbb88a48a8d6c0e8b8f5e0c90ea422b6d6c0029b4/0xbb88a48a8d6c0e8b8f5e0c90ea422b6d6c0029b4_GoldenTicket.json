{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ERC721Receiver.sol\\\";\\n\\n/// @notice ERC404\\n///         A gas-efficient, mixed ERC20 / ERC721 implementation\\n///         with native liquidity and fractionalization.\\n///\\n///         This is an experimental standard designed to integrate\\n///         with pre-existing ERC20 / ERC721 support as smoothly as\\n///         possible.\\n///\\n/// @dev    In order to support full functionality of ERC20 and ERC721\\n///         supply assumptions are made that slightly constraint usage.\\n///         Ensure decimals are sufficiently large (standard 18 recommended)\\n///         as ids are effectively encoded in the lowest range of amounts.\\n///\\n///         NFTs are spent on ERC20 functions in a FILO queue, this is by\\n///         design.\\n///\\nabstract contract ERC404 is Ownable {\\n    // Events\\n    event ERC20Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed id\\n    );\\n    event ERC721Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 indexed id\\n    );\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    // Errors\\n    error NotFound();\\n    error AlreadyExists();\\n    error InvalidRecipient();\\n    error InvalidSender();\\n    error UnsafeRecipient();\\n\\n    // Metadata\\n    /// @dev Token name\\n    string public name;\\n\\n    /// @dev Token symbol\\n    string public symbol;\\n\\n    /// @dev Decimals for fractional representation\\n    uint8 public immutable decimals;\\n\\n    /// @dev Total supply in fractionalized representation\\n    uint256 public immutable totalSupply;\\n\\n    /// @dev Current mint counter, monotonically increasing to ensure accurate ownership\\n    uint256 public minted;\\n\\n    // Mappings\\n    /// @dev Balance of user in fractional representation\\n    mapping(address => uint256) public balanceOf;\\n\\n    /// @dev Allowance of user in fractional representation\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @dev Approval in native representaion\\n    mapping(uint256 => address) public getApproved;\\n\\n    /// @dev Approval for all in native representation\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /// @dev Owner of id in native representation\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    /// @dev Array of owned ids in native representation\\n    mapping(address => uint256[]) internal _owned;\\n\\n    /// @dev Tracks indices for the _owned mapping\\n    mapping(uint256 => uint256) internal _ownedIndex;\\n\\n    /// @dev Addresses whitelisted from minting / burning for gas savings (pairs, routers, etc)\\n    mapping(address => bool) public whitelist;\\n\\n\\t/// @dev Base for tokenURI\\n\\tstring public baseTokenURI;\\n\\n    // Constructor\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _totalNativeSupply,\\n        uint8 _decimals\\n    ) Ownable(msg.sender) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        totalSupply = _totalNativeSupply * (10 ** decimals);\\n\\t\\tbalanceOf[msg.sender] = _totalNativeSupply * (10 ** decimals);\\n    }\\n\\n    /// @notice Initialization function to set pairs / etc\\n    ///         saving gas by avoiding mint / burn on unnecessary targets\\n    function setWhitelist(address target, bool state) public onlyOwner {\\n        whitelist[target] = state;\\n    }\\n\\n    /// @notice Function to find owner of a given native token\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        owner = _ownerOf[id];\\n\\n        if (owner == address(0)) {\\n            revert NotFound();\\n        }\\n    }\\n\\n\\t/// @notice Function to initialize base tokenURI\\n\\tfunction setTokenURI(string memory _tokenURI) public onlyOwner {\\n        baseTokenURI = _tokenURI;\\n    }\\n\\n\\t/// @notice Function to follow standards ERC721 metadata\\n    function tokenURI(uint256 id) public view virtual returns (string memory) {\\n\\t\\tuint16 seed = uint16(bytes2(keccak256(abi.encodePacked(id))));\\n\\t\\tstring memory image = seed == 0 ? \\\"golden.png\\\" : \\\"poop.png\\\";\\n\\t\\treturn string.concat(baseTokenURI, image);\\n    }\\n\\n    /// @notice Function for token approvals\\n    /// @dev This function assumes id / native if amount less than or equal to current max id\\n    function approve(\\n        address spender,\\n        uint256 amountOrId\\n    ) public virtual returns (bool) {\\n        if (amountOrId <= minted && amountOrId > 0) {\\n            address owner = _ownerOf[amountOrId];\\n\\n            if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\\n                revert Unauthorized();\\n            }\\n\\n            getApproved[amountOrId] = spender;\\n\\n            emit Approval(owner, spender, amountOrId);\\n        } else {\\n            allowance[msg.sender][spender] = amountOrId;\\n\\n            emit Approval(msg.sender, spender, amountOrId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Function native approvals\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Function for mixed transfers\\n    /// @dev This function assumes id / native if amount less than or equal to current max id\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amountOrId\\n    ) public virtual {\\n        if (amountOrId <= minted) {\\n            if (from != _ownerOf[amountOrId]) {\\n                revert InvalidSender();\\n            }\\n\\n            if (to == address(0)) {\\n                revert InvalidRecipient();\\n            }\\n\\n            if (\\n                msg.sender != from &&\\n                !isApprovedForAll[from][msg.sender] &&\\n                msg.sender != getApproved[amountOrId]\\n            ) {\\n                revert Unauthorized();\\n            }\\n\\n            balanceOf[from] -= _getUnit();\\n\\n            unchecked {\\n                balanceOf[to] += _getUnit();\\n            }\\n\\n            _ownerOf[amountOrId] = to;\\n            delete getApproved[amountOrId];\\n\\n            // update _owned for sender\\n            uint256 updatedId = _owned[from][_owned[from].length - 1];\\n            _owned[from][_ownedIndex[amountOrId]] = updatedId;\\n            // pop\\n            _owned[from].pop();\\n            // update index for the moved id\\n            _ownedIndex[updatedId] = _ownedIndex[amountOrId];\\n            // push token to to owned\\n            _owned[to].push(amountOrId);\\n            // update index for to owned\\n            _ownedIndex[amountOrId] = _owned[to].length - 1;\\n\\n            emit Transfer(from, to, amountOrId);\\n            emit ERC20Transfer(from, to, _getUnit());\\n        } else {\\n            uint256 allowed = allowance[from][msg.sender];\\n\\n            if (allowed != type(uint256).max)\\n                allowance[from][msg.sender] = allowed - amountOrId;\\n\\n            _transfer(from, to, amountOrId);\\n        }\\n    }\\n\\n    /// @notice Function for fractional transfers\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        return _transfer(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Function for native transfers with contract support\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        if (\\n            to.code.length != 0 &&\\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") !=\\n            ERC721Receiver.onERC721Received.selector\\n        ) {\\n            revert UnsafeRecipient();\\n        }\\n    }\\n\\n    /// @notice Function for native transfers with contract support and callback data\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        if (\\n            to.code.length != 0 &&\\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, data) !=\\n            ERC721Receiver.onERC721Received.selector\\n        ) {\\n            revert UnsafeRecipient();\\n        }\\n    }\\n\\n    /// @notice Internal function for fractional transfers\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        uint256 unit = _getUnit();\\n        uint256 balanceBeforeSender = balanceOf[from];\\n        uint256 balanceBeforeReceiver = balanceOf[to];\\n\\n        balanceOf[from] -= amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        // Skip burn for certain addresses to save gas\\n        if (!whitelist[from]) {\\n            uint256 tokens_to_burn = (balanceBeforeSender / unit) -\\n                (balanceOf[from] / unit);\\n            for (uint256 i = 0; i < tokens_to_burn; i++) {\\n                _burn(from);\\n            }\\n        }\\n\\n        // Skip minting for certain addresses to save gas\\n        if (!whitelist[to]) {\\n            uint256 tokens_to_mint = (balanceOf[to] / unit) -\\n                (balanceBeforeReceiver / unit);\\n            for (uint256 i = 0; i < tokens_to_mint; i++) {\\n                _mint(to);\\n            }\\n        }\\n\\n        emit ERC20Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    // Internal utility logic\\n    function _getUnit() internal view returns (uint256) {\\n        return 10 ** decimals;\\n    }\\n\\n    function _mint(address to) internal virtual {\\n        if (to == address(0)) {\\n            revert InvalidRecipient();\\n        }\\n\\n        unchecked {\\n            minted++;\\n        }\\n\\n        uint256 id = minted;\\n\\n        if (_ownerOf[id] != address(0)) {\\n            revert AlreadyExists();\\n        }\\n\\n        _ownerOf[id] = to;\\n        _owned[to].push(id);\\n        _ownedIndex[id] = _owned[to].length - 1;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(address from) internal virtual {\\n        if (from == address(0)) {\\n            revert InvalidSender();\\n        }\\n\\n        uint256 id = _owned[from][_owned[from].length - 1];\\n        _owned[from].pop();\\n        delete _ownedIndex[id];\\n        delete _ownerOf[id];\\n        delete getApproved[id];\\n\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    function _setNameSymbol(\\n        string memory _name,\\n        string memory _symbol\\n    ) internal {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721Receiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract ERC721Receiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GoldenTicket.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/*\\n * Telegram: https://t.me/GoldenTicket404\\n * Twitter: https://twitter.com/GoldenTicket404\\n * Website: https://goldenticket404.web.app\\n*/\\n\\nimport \\\"./ERC404.sol\\\";\\n\\ncontract GoldenTicket is ERC404(\\\"GoldenTicket\\\", \\\"GT\\\", 10000, 18) {}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract Ownable {\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    error Unauthorized();\\n    error InvalidOwner();\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) revert Unauthorized();\\n\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        if (_owner == address(0)) revert InvalidOwner();\\n\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function transferOwnership(address _owner) public virtual onlyOwner {\\n        if (_owner == address(0)) revert InvalidOwner();\\n\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(msg.sender, _owner);\\n    }\\n\\n    function revokeOwnership() public virtual onlyOwner {\\n        owner = address(0);\\n\\n        emit OwnershipTransferred(msg.sender, address(0));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GoldenTicket", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}