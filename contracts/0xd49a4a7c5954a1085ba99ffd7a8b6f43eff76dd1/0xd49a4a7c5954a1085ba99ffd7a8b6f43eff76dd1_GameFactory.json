{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/bingo/ENSReverseRegistration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IENS {\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n    event Transfer(bytes32 indexed node, address owner);\\n    event NewResolver(bytes32 indexed node, address resolver);\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32, address, address, uint64) external;\\n    function setSubnodeRecord(bytes32, bytes32, address, address, uint64) external;\\n    function setSubnodeOwner(bytes32, bytes32, address) external returns(bytes32);\\n    function setResolver(bytes32, address) external;\\n    function setOwner(bytes32, address) external;\\n    function setTTL(bytes32, uint64) external;\\n    function setApprovalForAll(address, bool) external;\\n    function owner(bytes32) external view returns (address);\\n    function resolver(bytes32) external view returns (address);\\n    function ttl(bytes32) external view returns (uint64);\\n    function recordExists(bytes32) external view returns (bool);\\n    function isApprovedForAll(address, address) external view returns (bool);\\n}\\n\\ninterface IReverseRegistrar {\\n    function ADDR_REVERSE_NODE() external view returns (bytes32);\\n    function ens() external view returns (IENS);\\n    function defaultResolver() external view returns (address);\\n    function claim(address) external returns (bytes32);\\n    function claimWithResolver(address, address) external returns (bytes32);\\n    function setName(string calldata) external returns (bytes32);\\n    function node(address) external pure returns (bytes32);\\n}\\n\\nlibrary ENSReverseRegistration {\\n    // namehash('addr.reverse')\\n    bytes32 internal constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    function setName(address ensregistry, string calldata ensname) internal {\\n        IReverseRegistrar(IENS(ensregistry).owner(ADDR_REVERSE_NODE)).setName(ensname);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bingo/GameFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./Roller.sol\\\";\\nimport \\\"./ENSReverseRegistration.sol\\\";\\n\\ninterface BingoCardsNFT {\\n    function boardArray(uint tokenId) external view returns (uint8[5][5] memory);\\n    function boardString(uint tokenId) external view returns (string memory);\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\ncontract GameFactory is ERC1155Receiver, IERC721Receiver, Ownable, Pausable, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n\\n    enum TokenType { NONE, ERC721, ERC1155 }\\n\\n    struct Game {\\n        address     owner;\\n        address     tokenAddress;\\n        uint256     tokenId;\\n        uint256     startingBlock;\\n        TokenType   tokenType;\\n    }\\n\\n    mapping(address => mapping(uint => uint)) gameIndexByOwnerAndId;\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Roller  public roller;\\n    uint    public defaultBlockPeriod = 3;\\n    uint    public constant MAX_BLOCK_PERIOD = 24;\\n    BingoCardsNFT               public bingoCardsNFT;\\n    mapping(uint => Game)       public games;\\n    mapping (address => uint[]) public gameIdsByOwner;\\n    mapping(uint => address)    public winners;\\n    Counters.Counter            private gameCounter;\\n    mapping(uint => uint)       private blockPeriods;\\n    mapping(uint => bytes32)    public passcodes;\\n\\n    event GameCreated(uint indexed gameId, address indexed owner, address indexed tokenAddress, uint256 tokenId);\\n    event GameDeleted(uint indexed gameId, address indexed owner, address caller);\\n    event Deposited(address indexed user, address indexed tokenContract, uint256 tokenId);\\n    event Withdrawn(address indexed user, address indexed tokenContract, uint256 tokenId);\\n    event BINGO(uint indexed gameId, uint tokenId, address indexed winner);\\n\\n    constructor() {\\n        roller = Roller(0xDc582388f58CB90F9044CB866166B9921d7cF64D); // mainnet roller\\n        bingoCardsNFT = BingoCardsNFT(0xA99cAb29165914300C9Ec34c87a33E89C9f38769); // mainnet NFTs\\n    }\\n\\n// NFT Transfer\\n\\n    function newGameERC721(address tokenAddress, uint256 tokenId, uint rollFreq) external {\\n        require(IERC721(tokenAddress).ownerOf(tokenId) == msg.sender, \\\"Not the owner.\\\");\\n        require(rollFreq <= MAX_BLOCK_PERIOD, \\\"Invalid block period\\\");\\n        IERC721(tokenAddress).transferFrom(msg.sender, address(this), tokenId);\\n        if (rollFreq > 0 && rollFreq != defaultBlockPeriod) {\\n            blockPeriods[gameCounter.current()] = rollFreq;\\n        }   \\n        _newGame(msg.sender, tokenAddress, tokenId, TokenType.ERC721);\\n    }\\n\\n    function newGameERC1155(address tokenAddress, uint256 tokenId, uint rollFreq) external {\\n        require(IERC1155(tokenAddress).balanceOf(msg.sender, tokenId) > 0, \\\"Not the owner.\\\");\\n        require(rollFreq <= MAX_BLOCK_PERIOD, \\\"Invalid block period\\\");\\n        IERC1155(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenId, 1, \\\"\\\");\\n        if (rollFreq > 0 && rollFreq != defaultBlockPeriod) {\\n            blockPeriods[gameCounter.current()] = rollFreq;\\n        }   \\n        _newGame(msg.sender, tokenAddress, tokenId, TokenType.ERC1155);\\n    }\\n\\n    function onERC721Received(address, address from, uint256 tokenId, bytes calldata) external override returns (bytes4) {\\n        require(msg.sender == address(IERC721(msg.sender)), \\\"Only genuine ERC721 transfers allowed.\\\");\\n        _newGame(from, msg.sender, tokenId, TokenType.ERC721);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata) external override returns(bytes4) {\\n        require(value == 1, \\\"Can only deposit 1 token at a time.\\\");\\n        require(msg.sender == address(IERC1155(msg.sender)), \\\"Only genuine ERC1155 transfers allowed.\\\");\\n        _newGame(from, msg.sender, id, TokenType.ERC1155);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata) external override returns(bytes4) {\\n        require(msg.sender == address(IERC1155(msg.sender)), \\\"Only genuine ERC1155 batch transfers allowed.\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _newGame(from, msg.sender, ids[i], TokenType.ERC1155);\\n        }\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function withdraw(uint gameId) external nonReentrant {\\n        require(games[gameId].owner == msg.sender, \\\"Not the owner.\\\");\\n        Game storage _game = games[gameId];\\n        if (_game.tokenType == TokenType.ERC1155) {\\n            IERC1155(_game.tokenAddress).safeTransferFrom(address(this), msg.sender, _game.tokenId, 1, \\\"\\\");\\n        } else if (_game.tokenType == TokenType.ERC721) {\\n            IERC721(_game.tokenAddress).transferFrom(address(this), msg.sender, _game.tokenId);\\n        }\\n        emit Withdrawn(msg.sender, _game.tokenAddress, _game.tokenId);\\n        deleteGame(gameId);\\n    }\\n\\n// Game Management\\n\\n    function _newGame(address gameOwner, address tokenAddress, uint256 tokenId, TokenType tokenType) private whenNotPaused returns (uint) {\\n        uint currentGameId = gameCounter.current();\\n        games[currentGameId] = Game(gameOwner, tokenAddress, tokenId, 0, tokenType);\\n        uint[] storage ownerGames = gameIdsByOwner[gameOwner]; \\n        uint indexInOwnerList = ownerGames.length;\\n        ownerGames.push(currentGameId);\\n        gameIndexByOwnerAndId[gameOwner][currentGameId] = indexInOwnerList; \\n        gameCounter.increment();\\n        emit GameCreated(currentGameId, gameOwner, tokenAddress, tokenId); \\n        return currentGameId; \\n    }\\n\\n    function deleteGame(uint _gameId) private  {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        address _owner = games[_gameId].owner;\\n        uint[] storage ownerGameIds = gameIdsByOwner[_owner];\\n        uint indexToDelete = gameIndexByOwnerAndId[_owner][_gameId];\\n        require(ownerGameIds[indexToDelete] == _gameId, \\\"Data inconsistency!\\\");  \\n        ownerGameIds[indexToDelete] = ownerGameIds[ownerGameIds.length - 1];\\n        gameIndexByOwnerAndId[_owner][ownerGameIds[indexToDelete]] = indexToDelete;\\n        ownerGameIds.pop();\\n        emit GameDeleted(_gameId, _owner, msg.sender);\\n        delete gameIndexByOwnerAndId[_owner][_gameId];  // Clean up\\n    }\\n\\n    function startGame(uint _gameId) public whenNotPaused {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        require(games[_gameId].owner == msg.sender, \\\"Only owner can start game\\\");\\n        require(games[_gameId].startingBlock == 0 || !isActive(_gameId), \\\"Game in progress\\\");\\n\\n        games[_gameId].startingBlock = block.number;\\n    }\\n\\n    function listGames(address _owner) external view returns (uint[] memory) {\\n        return gameIdsByOwner[_owner];\\n    }\\n\\n    function gameCount() public view returns (uint) {\\n        return gameCounter.current();\\n    }\\n\\n    function gameCountByOwner(address _owner) public view returns (uint) {\\n        return gameIdsByOwner[_owner].length;\\n    }\\n\\n\\n    function setBlockFreq(uint _gameId, uint _numBlocks) public {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        require(games[_gameId].owner == msg.sender, \\\"Only owner can set block freq\\\");\\n        require(games[_gameId].startingBlock == 0, \\\"Game already started\\\");\\n        blockPeriods[_gameId] = _numBlocks;\\n    }\\n\\n    function getBlockPeriod(uint _gameId) public view returns (uint) {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        return blockPeriods[_gameId] == 0 ? defaultBlockPeriod : blockPeriods[_gameId];\\n    }\\n\\n// Passcodes\\n\\n    function setPasscode(uint _gameId, bytes32 _passcode) public {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        require(games[_gameId].owner == msg.sender, \\\"Only owner can set passcode\\\");\\n        passcodes[_gameId] = _passcode;\\n    }\\n\\n    function checkPasscode(uint _gameId, string memory _passcode) public view returns (bool) {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        return passcodes[_gameId] == keccak256(abi.encodePacked(_passcode));\\n    }\\n\\n// Rolled Numbers\\n\\n    function rollCounts(uint _gameId) public view returns (uint, uint) {\\n        require(games[_gameId].startingBlock > 0, \\\"Game not started\\\");\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        return rollCountsInternal(_gameId);\\n    }\\n\\n    function rollCountsInternal(uint _gameId) internal view returns (uint, uint) {\\n        uint _blockPeriod = blockPeriods[_gameId] > 0 ? blockPeriods[_gameId] : defaultBlockPeriod;\\n        return roller.count(games[_gameId].startingBlock, _blockPeriod);\\n    }\\n\\n    function isActive(uint _gameId) public view returns (bool) {\\n        (uint _rolls, uint _total) = rollCountsInternal(_gameId);\\n        return (_rolls <= _total);\\n    }\\n\\n    function getBlockNumbers(uint _gameId) public view returns (uint[] memory) {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        require(games[_gameId].startingBlock > 0, \\\"Game not started\\\");\\n        uint _blockPeriod = blockPeriods[_gameId] > 0 ? blockPeriods[_gameId] : defaultBlockPeriod;\\n        return roller.getBlockNumbers(games[_gameId].startingBlock, _blockPeriod);\\n    }\\n\\n    function getRolls(uint _gameId) public view returns (uint[] memory) {\\n        require(_gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        require(games[_gameId].startingBlock > 0, \\\"Game not started\\\");\\n        uint _blockPeriod = blockPeriods[_gameId] > 0 ? blockPeriods[_gameId] : defaultBlockPeriod;\\n        return roller.getRolls(games[_gameId].startingBlock, _blockPeriod, makeSeed(_gameId));\\n    }\\n    \\n    function currentBlockNumber() public view returns (uint) {\\n        return block.number;\\n    }\\n\\n    function makeSeed(uint _gameId) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_gameId, games[_gameId].owner, games[_gameId].startingBlock));\\n    }\\n\\n// Bingo Cards\\n\\n    function boardNumbersArray(uint tokenId) external view returns (uint8[5][5] memory){\\n        return bingoCardsNFT.boardArray(tokenId);\\n    }\\n\\n    function boardNumbersString(uint tokenId) external view returns (string memory){\\n        return bingoCardsNFT.boardString(tokenId);\\n    }\\n\\n    function fiveFromBoard(uint tokenId, uint orientation, uint index) public view returns (uint[5] memory) {\\n        require(index < 5, \\\"Invalid index\\\");\\n        uint[5] memory result;\\n        uint8[5][5] memory board = bingoCardsNFT.boardArray(tokenId);\\n        if (orientation == 0) {         // HORIZONTAL\\n            result[0] = board[index][0];\\n            result[1] = board[index][1];\\n            result[2] = board[index][2];\\n            result[3] = board[index][3];\\n            result[4] = board[index][4];\\n            return result;\\n        } else if (orientation == 1) { // VERTICAL\\n            result[0] = board[0][index];\\n            result[1] = board[1][index];\\n            result[2] = board[2][index];\\n            result[3] = board[3][index];\\n            result[4] = board[4][index];\\n            return result;\\n        } else if (orientation == 2) { // DIAGONAL UP\\n            result[0] = board[4][0];\\n            result[1] = board[3][1];\\n            result[2] = 0;\\n            result[3] = board[1][3];\\n            result[4] = board[0][4];\\n            return result;\\n        } else if (orientation == 3) { // REVERSE DOWN\\n            result[0] = board[0][0];\\n            result[1] = board[1][1];\\n            result[2] = 0;\\n            result[3] = board[3][3];\\n            result[4] = board[4][4];\\n            return result;\\n        } else if (orientation == 4) { // FOUR CORNERS\\n            result[0] = board[0][0];\\n            result[1] = board[0][4];\\n            result[2] = 0; \\n            result[3] = board[4][0];\\n            result[4] = board[4][4];\\n            return result;\\n        } else\\n            revert(\\\"Invalid orientation\\\");\\n    }\\n\\n    function fiveRolls(uint gameId, uint[5] memory indexes) public view returns (uint[5] memory) {\\n        require(isActive(gameId), \\\"Game is not active\\\");\\n        uint[5] memory result;\\n        uint[] memory rolls = getRolls(gameId);\\n        result[0] = rolls[indexes[0]];\\n        result[1] = rolls[indexes[1]];\\n        result[2] = rolls[indexes[2]];\\n        result[3] = rolls[indexes[3]];\\n        result[4] = rolls[indexes[4]];\\n        return result;\\n    }\\n\\n    function fiveRollsCheap(uint gameId, uint[5] memory indexes) public view returns (uint[5] memory){\\n        require(isActive(gameId), \\\"Game is not active\\\");\\n        require(gameId < gameCounter.current(), \\\"Invalid game ID\\\"); \\n        require(games[gameId].startingBlock > 0, \\\"Game not started\\\");\\n        uint _blockPeriod = blockPeriods[gameId] > 0 ? blockPeriods[gameId] : defaultBlockPeriod;\\n        return roller.fiveRollsByIndex(indexes, games[gameId].startingBlock, _blockPeriod, makeSeed(gameId));\\n    }\\n\\n    //  PARAMS: \\n    //  ----------------------------    \\n    //  gameId       game ID\\n    //  tokenId      gameBoard NFT\\n    //  orientation  0=horizontal, 1=vertical, 2=diagonal up, 3=diagonal down, 4=four corners\\n    //  index        0-4 to specify position of the 5 numbers on the game board\\n    //  indexes      5 indexes of the rolls to check\\n\\n    function claimWinner(uint gameId, uint tokenId, uint orientation, uint index, uint[5] memory indexes, string memory _passcode) public whenNotPaused {\\n        require(passcodes[gameId] == 0 || checkPasscode(gameId, _passcode), \\\"Invalid passcode\\\");\\n        require(isActive(gameId), \\\"Game is not active\\\");\\n        uint[5] memory fromBoard = fiveFromBoard(tokenId, orientation, index);\\n        uint[5] memory rolls = fiveRolls(gameId, indexes);\\n        require(winners[gameId] == address(0), \\\"Game already won\\\");\\n        require(fromBoard[0] == rolls[0], \\\"Roll 0 doesn't match\\\");\\n        require(fromBoard[1] == rolls[1], \\\"Roll 1 doesn't match\\\");\\n        require(fromBoard[2] == rolls[2] || fromBoard[2] == 0, \\\"Roll 2 doesn't match\\\"); // Center can be 0\\n        require(fromBoard[3] == rolls[3], \\\"Roll 3 doesn't match\\\");\\n        require(fromBoard[4] == rolls[4], \\\"Roll 4 doesn't match\\\");\\n        address _owner = bingoCardsNFT.ownerOf(tokenId);\\n        winners[gameId] = _owner;\\n    \\n        // Send NFT to winner\\n        Game storage _game = games[gameId];\\n        if (_game.tokenType == TokenType.ERC1155) {\\n            IERC1155(_game.tokenAddress).safeTransferFrom(address(this), _owner, _game.tokenId, 1, \\\"\\\");\\n        } else if (_game.tokenType == TokenType.ERC721) {\\n            IERC721(_game.tokenAddress).transferFrom(address(this), _owner, _game.tokenId);\\n        }\\n        emit Withdrawn(_owner, _game.tokenAddress, _game.tokenId);\\n        emit BINGO(gameId, tokenId, _owner);\\n        deleteGame(gameId); // delete from users list of games  \\n    }\\n\\n    function checkWinner(uint gameId, uint tokenId, uint orientation, uint index, uint[5] memory indexes) public view returns (bool) {\\n        require(isActive(gameId), \\\"Game is not active\\\");\\n        uint[5] memory fromBoard = fiveFromBoard(tokenId, orientation, index);\\n        uint[5] memory rolls = fiveRolls(gameId, indexes);\\n        require(winners[gameId] == address(0), \\\"Game already won\\\");\\n        require(fromBoard[0] == rolls[0], \\\"Roll 0 doesn't match\\\");\\n        require(fromBoard[1] == rolls[1], \\\"Roll 1 doesn't match\\\");\\n        require(fromBoard[2] == rolls[2] || fromBoard[2] == 0, \\\"Roll 2 doesn't match\\\"); // Center can be 0\\n        require(fromBoard[3] == rolls[3], \\\"Roll 3 doesn't match\\\");\\n        require(fromBoard[4] == rolls[4], \\\"Roll 4 doesn't match\\\");\\n        return true;\\n    }\\n\\n// Contract Admin\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setRoller(address _roller) public onlyOwner {\\n        require(address(roller) == address(0), \\\"Roller already set\\\");\\n        roller = Roller(_roller);\\n    }\\n\\n    function setDefaultBlockPeriod(uint _blockPeriod) public onlyOwner {\\n        defaultBlockPeriod = _blockPeriod;\\n    }\\n\\n    function setBingoCardAddr(address _bingoCardsNFT) public onlyOwner {\\n        bingoCardsNFT = BingoCardsNFT(_bingoCardsNFT);\\n    }\\n\\n    function setName(address ensRegistry, string calldata ensName) external onlyOwner {\\n        ENSReverseRegistration.setName(ensRegistry, ensName);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/bingo/Roller.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/* \\n*       ____\\n*      /\\\\' .\\\\    _____\\n*     /: \\\\___\\\\  / .  /\\\\\\n*     \\\\' / . / /____/..\\\\\\n*      \\\\/___/  \\\\'  '\\\\  /\\n*               \\\\'__'\\\\/                                 \\n*/\\n\\ncontract Roller {\\n\\n    uint public constant MAX_VALUE = 75;\\n    uint public constant MAX_BLOCKS = 256;\\n\\n    constructor() {\\n    }\\n\\n    function count(uint startBlock, uint freq) public view returns (uint, uint) {\\n        require(startBlock <= block.number, \\\"Start block must be less than or equal to the current block\\\");\\n        require(freq > 0, \\\"Frequency must be greater than 0\\\");\\n        return (((block.number - startBlock) + freq - 1) / freq, MAX_BLOCKS / freq);\\n    }\\n\\n    function getBlockNumbers(uint startBlock, uint freq) public view returns (uint[] memory) {\\n        require(startBlock <= block.number, \\\"Start block must be less than or equal to the current block\\\");\\n        require(startBlock > block.number - MAX_BLOCKS, \\\"Block hash is not stored\\\");\\n        require(freq > 0, \\\"Frequency must be greater than 0\\\");\\n        (uint arraySize,) = count(startBlock, freq);\\n        uint[] memory blocks = new uint[](arraySize);\\n\\n        for(uint i = 0; i < arraySize; i++) {\\n            if (startBlock + freq * i >= block.number)\\n                break;\\n            else\\n                blocks[i] = startBlock + freq * i;\\n        }  \\n        return blocks;\\n    }\\n\\n    function getRolls(uint startBlock, uint freq, bytes32 seed) public view returns (uint[] memory) {\\n        require(startBlock <= block.number, \\\"Start block must be less than or equal to the current block\\\");\\n        require(startBlock > block.number - MAX_BLOCKS, \\\"Block hash is not stored\\\");\\n        require(freq > 0, \\\"Frequency must be greater than 0\\\");\\n        (uint arraySize,) = count(startBlock, freq);\\n        uint[] memory blocks = new uint[](arraySize);\\n\\n        for(uint i = 0; i < arraySize; i++) {\\n            if (startBlock + freq * i >= block.number)\\n                break;\\n            else\\n                blocks[i] = generateRandomNumber(startBlock + freq * i, seed);\\n        }  \\n        return blocks;\\n    }\\n\\n    function fiveRollsByIndex(uint[5] memory indexes, uint startBlock, uint freq, bytes32 seed) public view returns (uint[5] memory) {\\n        require(startBlock <= block.number, \\\"Start block must be less than or equal to the current block\\\");\\n        require(startBlock > block.number - MAX_BLOCKS, \\\"Block hash is not stored\\\");\\n        require(freq > 0, \\\"Frequency must be greater than 0\\\");\\n        require(indexes.length == 5, \\\"Array length must be 5\\\");\\n        uint[5] memory rolls;\\n        for(uint i = 0; i < 5; i++) {\\n            if (startBlock + freq * indexes[i] >= block.number)\\n                break;\\n            else\\n                rolls[i] = generateRandomNumber(startBlock + freq * indexes[i], seed);\\n        }  \\n        return rolls;\\n    }\\n\\n// Check Numbers\\n\\n    function isNumberInList(uint startBlock, uint freq, uint number) public view returns (bool) {\\n        require(startBlock <= block.number, \\\"Start block must be less than or equal to the current block\\\");\\n        require(startBlock > block.number - MAX_BLOCKS, \\\"Block hash is not stored\\\");\\n        if (freq == 0)\\n            freq++;\\n\\n        if (number >= startBlock && number < block.number) {\\n            if ((number - startBlock) % freq == 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function areNumbersInList(uint startBlock, uint freq, uint[] memory numbers) public view returns (bool) {\\n        require(numbers.length >= 1 && numbers.length <= 5, \\\"Array length must be between 1 and 5\\\");\\n\\n        for (uint i = 0; i < numbers.length; i++) {\\n            if (!isNumberInList(startBlock, freq, numbers[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n// Misc\\n\\n    function currentBlockNumber() public view returns (uint) {\\n        return block.number;\\n    }\\n\\n// Internal\\n\\n    function generateRandomNumber(uint256 _blockNumber, bytes32 _seed) internal view returns (uint256) {\\n        require(block.number > _blockNumber, \\\"Block not yet mined\\\");\\n        require(_blockNumber > block.number - MAX_BLOCKS, \\\"Block hash is not stored\\\");\\n        return uint256(keccak256(abi.encodePacked(blockhash(_blockNumber), _seed))) % MAX_VALUE + 1;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"BINGO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"GameDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BLOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bingoCardsNFT\",\"outputs\":[{\"internalType\":\"contract BingoCardsNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"boardNumbersArray\",\"outputs\":[{\"internalType\":\"uint8[5][5]\",\"name\":\"\",\"type\":\"uint8[5][5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"boardNumbersString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_passcode\",\"type\":\"string\"}],\"name\":\"checkPasscode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orientation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"indexes\",\"type\":\"uint256[5]\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orientation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"indexes\",\"type\":\"uint256[5]\"},{\"internalType\":\"string\",\"name\":\"_passcode\",\"type\":\"string\"}],\"name\":\"claimWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orientation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fiveFromBoard\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"indexes\",\"type\":\"uint256[5]\"}],\"name\":\"fiveRolls\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"indexes\",\"type\":\"uint256[5]\"}],\"name\":\"fiveRollsCheap\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"gameCountByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameIdsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"enum GameFactory.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getBlockNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getRolls\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"listGames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollFreq\",\"type\":\"uint256\"}],\"name\":\"newGameERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollFreq\",\"type\":\"uint256\"}],\"name\":\"newGameERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"passcodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"rollCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roller\",\"outputs\":[{\"internalType\":\"contract Roller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bingoCardsNFT\",\"type\":\"address\"}],\"name\":\"setBingoCardAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numBlocks\",\"type\":\"uint256\"}],\"name\":\"setBlockFreq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockPeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultBlockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_passcode\",\"type\":\"bytes32\"}],\"name\":\"setPasscode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roller\",\"type\":\"address\"}],\"name\":\"setRoller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GameFactory", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}