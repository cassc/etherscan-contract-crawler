{"SourceCode": "/*\r\n    https://ordizk.io\r\n    https://ordizk.gitbook.io\r\n    https://x.com/OrdiZK_\r\n    https://t.me/ordizk\r\n    https://t.me/ordizk_bridge_bot\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.23;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    error NotOwner();\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (_owner != msg.sender) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract OrdiZK is IERC20, Ownable {\r\n    error TradingAlreadyOpen();\r\n    error ZeroAddress();\r\n    error ZeroAmount();\r\n    error ZeroValue();\r\n    error ZeroToken();\r\n    error TaxTooHigh();\r\n    error NotSelf();\r\n    error Unauthorized();\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromLimits;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private bots;\r\n    address payable private _taxWallet;\r\n    uint256 private _firstBlock;\r\n\r\n    uint256 private _initialBuyTax = 30;\r\n    uint256 private _initialSellTax = 45;\r\n    uint256 private _finalBuyTax = 5;\r\n    uint256 private _finalSellTax = 5;\r\n    uint256 private _reduceBuyTaxAt = 24;\r\n    uint256 private _reduceSellTaxAt = 30;\r\n    uint256 private _preventSwapBefore = 20;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private constant _DECIMALS = 9;\r\n    uint256 private constant _TOTAL = 1000000000 * 10 ** _DECIMALS;\r\n    string private constant _NAME = unicode\"OrdiZK\";\r\n    string private constant _SYMBOL = unicode\"OZK\";\r\n    uint256 public maxTx = 20000000 * 10 ** _DECIMALS;\r\n    uint256 public maxWallet = 20000000 * 10 ** _DECIMALS;\r\n    uint256 public swapThreshold = 10000000 * 10 ** _DECIMALS;\r\n    uint256 public maxTaxSwap = 10000000 * 10 ** _DECIMALS;\r\n\r\n    IUniswapV2Router02 private constant _UNISWAP_V2_ROUTER =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private _uniswapV2Pair;\r\n    bool public lpAdded;\r\n    bool private _inSwap = false;\r\n    bool private _swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint256 maxTx);\r\n\r\n    constructor() {\r\n        _taxWallet = payable(msg.sender);\r\n        _balances[msg.sender] = _TOTAL;\r\n\r\n        _isExcludedFromLimits[tx.origin] = true;\r\n        _isExcludedFromLimits[address(0)] = true;\r\n        _isExcludedFromLimits[address(0xdead)] = true;\r\n        _isExcludedFromLimits[address(this)] = true;\r\n        _isExcludedFromLimits[address(_UNISWAP_V2_ROUTER)] = true;\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[tx.origin] = true;\r\n\r\n        emit Transfer(address(0), msg.sender, _TOTAL);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _SYMBOL;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _DECIMALS;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _TOTAL;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        if (owner == address(0)) revert ZeroAddress();\r\n        if (spender == address(0)) revert ZeroAddress();\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        if (from == address(0)) revert ZeroAddress();\r\n        if (to == address(0)) revert ZeroAddress();\r\n        if (amount == 0) revert ZeroAmount();\r\n\r\n        require(!bots[from] && !bots[to], \"shoo\");\r\n\r\n        if (maxWallet != _TOTAL && !_isExcludedFromLimits[to]) {\r\n            require(balanceOf(to) + amount <= maxWallet, \"Exceeds maxWalletSize\");\r\n        }\r\n\r\n        if (maxTx != _TOTAL && !_isExcludedFromLimits[from]) {\r\n            require(amount <= maxTx, \"Exceeds maxTx\");\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if (\r\n            !_inSwap && contractTokenBalance >= swapThreshold && _swapEnabled && _buyCount > _preventSwapBefore\r\n                && to == _uniswapV2Pair && !_isExcludedFromFee[from]\r\n        ) {\r\n            _swapTokensForEth(_min(amount, _min(contractTokenBalance, maxTaxSwap)));\r\n            uint256 contractETHBalance = address(this).balance;\r\n            if (contractETHBalance > 0) {\r\n                _sendETHToFee(contractETHBalance);\r\n            }\r\n        }\r\n\r\n        uint256 taxAmount = 0;\r\n        if (!_inSwap && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            // sell\r\n            if (to == _uniswapV2Pair) {\r\n                taxAmount = (amount * ((_buyCount > _reduceSellTaxAt) ? _finalSellTax : _initialSellTax)) / 100;\r\n            }\r\n            // buy\r\n            else if (from == _uniswapV2Pair) {\r\n                if (_firstBlock + 25 > block.number) {\r\n                    require(!_isContract(to), \"contract\");\r\n                }\r\n                taxAmount = (amount * ((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax)) / 100;\r\n                ++_buyCount;\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)] + taxAmount;\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from] = _balances[from] - amount;\r\n        _balances[to] = _balances[to] + amount - taxAmount;\r\n        emit Transfer(from, to, amount - taxAmount);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxTx = _TOTAL;\r\n        maxWallet = _TOTAL;\r\n        emit MaxTxAmountUpdated(_TOTAL);\r\n    }\r\n\r\n    function setBots(address[] memory bots_, bool isBot_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = isBot_;\r\n        }\r\n    }\r\n\r\n    function openTrading(uint256 amount) external payable onlyOwner {\r\n        if (lpAdded) revert TradingAlreadyOpen();\r\n        if (msg.value == 0) revert ZeroValue();\r\n        if (amount == 0) revert ZeroToken();\r\n        _transfer(msg.sender, address(this), amount);\r\n        _approve(address(this), address(_UNISWAP_V2_ROUTER), _TOTAL);\r\n\r\n        _uniswapV2Pair =\r\n            IUniswapV2Factory(_UNISWAP_V2_ROUTER.factory()).createPair(address(this), _UNISWAP_V2_ROUTER.WETH());\r\n        _isExcludedFromLimits[_uniswapV2Pair] = true;\r\n\r\n        _UNISWAP_V2_ROUTER.addLiquidityETH{value: address(this).balance}(\r\n            address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp\r\n        );\r\n        IERC20(_uniswapV2Pair).approve(address(_UNISWAP_V2_ROUTER), type(uint256).max);\r\n        _swapEnabled = true;\r\n        lpAdded = true;\r\n        _firstBlock = block.number;\r\n    }\r\n\r\n    function lowerTaxes(uint256 buyTax_, uint256 sellTax_) external onlyOwner {\r\n        if (buyTax_ > _finalBuyTax) { revert TaxTooHigh(); }\r\n        if (sellTax_ > _finalSellTax) { revert TaxTooHigh(); }\r\n\r\n        _finalBuyTax = buyTax_;\r\n        _finalSellTax = sellTax_;\r\n    }\r\n\r\n    function clearStuck() external {\r\n        (bool success,) = _taxWallet.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function clearStuckSelf() external {\r\n        if (msg.sender != _taxWallet) { revert Unauthorized(); }\r\n        _transfer(address(this), _taxWallet, balanceOf(address(this)));\r\n    }\r\n\r\n    function clearStuckToken(address token) external {\r\n        if (token == address(this)) { revert NotSelf(); }\r\n        IERC20(token).transfer(_taxWallet, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool) {\r\n        return bots[a];\r\n    }\r\n\r\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function _isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        _inSwap = true;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _UNISWAP_V2_ROUTER.WETH();\r\n        _approve(address(this), address(_UNISWAP_V2_ROUTER), tokenAmount);\r\n        _UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount, 0, path, address(this), block.timestamp\r\n        );\r\n        _inSwap = false;\r\n    }\r\n\r\n    function _sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingAlreadyOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax_\",\"type\":\"uint256\"}],\"name\":\"lowerTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isBot_\",\"type\":\"bool\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OrdiZK", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e742ae71c061971cf24ef6c53e4a09884c27df3d6748be4d3819356a8254580"}