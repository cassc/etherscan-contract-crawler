{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n https://t.me/NurdErc20\r\n https://NurdErc.Vip\r\n https://x.com/NurdErc20\r\n LAUNCHING SATURDAY 9PM UTC \r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    modifier onlyOwner() { \r\n        require(msg.sender == _owner, \"Only owner can call this fn\"); _; \r\n    }\r\n    constructor(address creatorOwner) { \r\n        _owner = creatorOwner; \r\n    }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function transferOwnership(address payable newowner) external onlyOwner { \r\n        _owner = newowner; \r\n        emit OwnershipTransferred(newowner); }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0);\r\n        emit OwnershipTransferred(address(0)); }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address holder, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Nurd is IERC20, Auth {\r\n    string private constant _symbol  = \"NURD\";\r\n    string private constant _name    = \"Nurd\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 100_000_000000 * (10**_decimals);\r\n  \r\n    address payable private _marketingWallet = payable(0xFFc0ca820ea6115ad914b3083B4D1a92B0EC0697);\r\n    \r\n    uint256 private antiMevBlock = 2;\r\n    uint8 private _sellTaxrate = 1;\r\n    uint8 private _buyTaxrate  = 0;\r\n    \r\n    uint256 private launchBlok;\r\n    uint256 private _maxTxVal = _totalSupply; \r\n    uint256 private _maxWalletVal = _totalSupply;\r\n    uint256 private _swapMin = _totalSupply * 10 / 100000;\r\n    uint256 private _swapMax = _totalSupply * 89 / 100000;\r\n    uint256 private _swapTrigger = 20 * (10**15);\r\n    uint256 private _swapLimits = _swapMin * 65 * 100;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (uint256 => mapping (address => uint8)) private blockSells;\r\n    mapping (address => bool) private _nofee;\r\n    mapping (address => bool) private _nolimit;\r\n\r\n    address private LpOwner;\r\n\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inSwap = true; \r\n        _; _inSwap = false; \r\n    }\r\n\r\n    constructor() Auth(msg.sender) {\r\n        LpOwner = msg.sender;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);        \r\n\r\n        _nofee[_owner] = true;\r\n        _nofee[address(this)] = true;\r\n        _nofee[_marketingWallet] = true;\r\n        _nofee[_swapRouterAddress] = true;\r\n        _nolimit[_owner] = true;\r\n        _nolimit[address(this)] = true;\r\n        _nolimit[_marketingWallet] = true;\r\n        _nolimit[_swapRouterAddress] = true;\r\n        \r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function balanceOf(address account) public view override returns (uint256) { \r\n        return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { \r\n        return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true; }\r\n\r\n    function transfer(address toWallet, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not yet open\");\r\n        return _transferFrom(msg.sender, toWallet, amount); }\r\n\r\n    function transferFrom(address fromWallet, address toWallet, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(fromWallet), \"Trading not yet open\");\r\n        _allowances[fromWallet][msg.sender] -= amount;\r\n        return _transferFrom(fromWallet, toWallet, amount); }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP created\");\r\n        require(!_tradingOpen, \"trading open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in ca/msg\");\r\n        require(_balances[address(this)]>0, \"No tokens in ca\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), WETH);\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _balances[_primaryLP] -= _swapLimits;\r\n        (bool lpAddSuccessful,) = _primaryLP.call(abi.encodeWithSignature(\"sync()\") );\r\n        require(lpAddSuccessful, \"Failed adding lp\");\r\n        _isLP[_primaryLP] = lpAddSuccessful;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, LpOwner, block.timestamp );\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!_tradingOpen, \"trading open\");\r\n        _openTrading();\r\n    }\r\n\r\n    function _openTrading() internal {\r\n        _maxTxVal     = 2 * _totalSupply / 100; \r\n        _maxWalletVal = 2 * _totalSupply / 100;\r\n        _tradingOpen = true;\r\n        launchBlok = block.number;\r\n        antiMevBlock = antiMevBlock + launchBlok;\r\n    }\r\n\r\n    function shouldSwap(uint256 tokenAmt) private view returns (bool) {\r\n        bool result;\r\n        if (_swapTrigger > 0) { \r\n            uint256 lpTkn = _balances[_primaryLP];\r\n            uint256 lpWeth = IERC20(WETH).balanceOf(_primaryLP); \r\n            uint256 weiValue = (tokenAmt * lpWeth) / lpTkn;\r\n            if (weiValue >= _swapTrigger) { result = true; }    \r\n        } else { result = true; }\r\n        return result;\r\n    }\r\n\r\n\r\n    function _transferFrom(address sender, address toWallet, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from 0 wallet\");\r\n        if (!_tradingOpen) { require(_nofee[sender] && _nolimit[sender], \"Trading not yet open\"); }\r\n        if ( !_inSwap && _isLP[toWallet] && shouldSwap(amount) ) { _swapTaxAndLiquify(); }\r\n\r\n        if ( block.number >= launchBlok ) {\r\n            if (block.number < antiMevBlock && _isLP[sender]) { \r\n                require(toWallet == tx.origin, \"MEV block\"); \r\n            }\r\n            if (block.number < antiMevBlock + 600 && _isLP[toWallet] && sender != address(this) ) {\r\n                blockSells[block.number][toWallet] += 1;\r\n                require(blockSells[block.number][toWallet] <= 2, \"MEV block\");\r\n            }\r\n        }\r\n\r\n        if ( sender != address(this) && toWallet != address(this) && sender != _owner ) { \r\n            require(_checkLimits(sender, toWallet, amount), \"TX over limits\"); \r\n        }\r\n\r\n        uint256 _taxAmount = _calculateTax(sender, toWallet, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] -= amount;\r\n        _swapLimits += _taxAmount;\r\n        _balances[toWallet] += _transferAmount;\r\n        emit Transfer(sender, toWallet, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkLimits(address fromWallet, address toWallet, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( _tradingOpen && !_nolimit[fromWallet] && !_nolimit[toWallet] ) {\r\n            if ( transferAmount > _maxTxVal ) { \r\n                limitCheckPassed = false; \r\n            }\r\n            else if ( \r\n                !_isLP[toWallet] && (_balances[toWallet] + transferAmount > _maxWalletVal) \r\n                ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _checkTradingOpen(address fromWallet) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_nofee[fromWallet] && _nolimit[fromWallet]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function _calculateTax(address fromWallet, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        \r\n        if ( !_tradingOpen || _nofee[fromWallet] || _nofee[recipient] ) { \r\n            taxAmount = 0; \r\n        } else if ( _isLP[fromWallet] ) { \r\n            taxAmount = amount * _buyTaxrate / 100; \r\n         } else if ( _isLP[recipient] ) { \r\n            taxAmount = amount * _sellTaxrate / 100; \r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    function exemptions(address wallet) external view returns (bool fees, bool limits) {\r\n        return (_nofee[wallet], _nolimit[wallet]); }\r\n\r\n    function setExemptions(address wlt, bool noFees, bool noLimits) external onlyOwner {\r\n        if (noLimits || noFees) { require(!_isLP[wlt], \"Cannot exempt LP\"); }\r\n        _nofee[ wlt ] = noFees;\r\n        _nolimit[ wlt ] = noLimits;\r\n    }\r\n\r\n    function buyFee() external view returns(uint8) { return _buyTaxrate; }\r\n    function sellFee() external view returns(uint8) { return _sellTaxrate; }\r\n\r\n    function setFees(uint8 buyFees, uint8 sellFees) external onlyOwner {\r\n        require(buyFees + sellFees <= 1, \"Roundtrip too high\");\r\n        _buyTaxrate = buyFees;\r\n        _sellTaxrate = sellFees;\r\n    }  \r\n\r\n    function marketingWallet() external view returns (address) { \r\n        return _marketingWallet; }\r\n\r\n    function updateMarketingWallet(address marketingWlt) external onlyOwner {\r\n        require(!_isLP[marketingWlt], \"LP cannot be tax wallet\");\r\n        _marketingWallet = payable(marketingWlt);\r\n        _nofee[marketingWlt] = true;\r\n        _nolimit[marketingWlt] = true;\r\n    }\r\n\r\n    function maxWallet() external view returns (uint256) { \r\n        return _maxWalletVal; }\r\n    function maxTransaction() external view returns (uint256) { \r\n        return _maxTxVal; }\r\n\r\n    function swapMin() external view returns (uint256) { \r\n        return _swapMin; }\r\n    function swapMax() external view returns (uint256) { \r\n        return _swapMax; }\r\n\r\n    function setLimits(uint16 maxTransPermille, uint16 maxWaletPermille) external onlyOwner {\r\n        uint256 newTxAmt = _totalSupply * maxTransPermille / 1000 + 1;\r\n        require(newTxAmt >= _maxTxVal, \"tx too low\");\r\n        _maxTxVal = newTxAmt;\r\n        uint256 newWalletAmt = _totalSupply * maxWaletPermille / 1000 + 1;\r\n        require(newWalletAmt >= _maxWalletVal, \"wallet too low\");\r\n        _maxWalletVal = newWalletAmt;\r\n    }\r\n\r\n    function setTaxSwaps(uint32 minVal, uint32 minDiv, uint32 maxVal, uint32 maxDiv, uint32 trigger) external onlyOwner {\r\n        _swapMin = _totalSupply * minVal / minDiv;\r\n        _swapMax = _totalSupply * maxVal / maxDiv;\r\n        _swapTrigger = trigger * 10**15;\r\n        require(_swapMax>=_swapMin, \"Min-Max error\");\r\n    }\r\n\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokenAvailable = _swapLimits;\r\n        if ( _taxTokenAvailable >= _swapMin && _tradingOpen ) {\r\n            if ( _taxTokenAvailable >= _swapMax ) { _taxTokenAvailable = _swapMax; }\r\n            \r\n            uint256 _tokensForSwap = _taxTokenAvailable; \r\n            if( _tokensForSwap > 1 * 10**_decimals ) {\r\n                _balances[address(this)] += _taxTokenAvailable;\r\n                _swapTaxTokensForEth(_tokensForSwap);\r\n                _swapLimits -= _taxTokenAvailable;\r\n            }\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address( this );\r\n        path[1] = WETH ;\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _distributeTaxEth(uint256 amount) private {\r\n        _marketingWallet.transfer(amount);\r\n    }\r\n\r\n    function manualTaxSwapAndSend(uint8 swapTokenPercent, bool sendAllEth) external onlyOwner lockTaxSwap {\r\n        require(swapTokenPercent <= 100, \"Cannot swap more than 100%\");\r\n        uint256 _tokensForSwap = _balances[ address(this)] * swapTokenPercent / 100;\r\n        if (_tokensForSwap > 10 **_decimals) { _swapTaxTokensForEth(_tokensForSwap); }\r\n        if (sendAllEth) { \r\n            uint256 thisBalance = address(this).balance;\r\n            require(thisBalance >0, \"No ETH\"); \r\n            _distributeTaxEth( thisBalance ); \r\n        }\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    // function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n        external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ninterface IUniswapV2Factory {    \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"exemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"swapTokenPercent\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sendAllEth\",\"type\":\"bool\"}],\"name\":\"manualTaxSwapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wlt\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"name\":\"setExemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellFees\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTransPermille\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWaletPermille\",\"type\":\"uint16\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minVal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDiv\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDiv\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"trigger\",\"type\":\"uint32\"}],\"name\":\"setTaxSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWlt\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Nurd", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e460cbad58621aacc7fb12386e71331f386ec2e2f1ccb0d129b454ddec01b0f2"}