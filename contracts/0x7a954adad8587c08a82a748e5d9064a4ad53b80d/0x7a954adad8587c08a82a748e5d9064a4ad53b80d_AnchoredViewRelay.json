{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n/// @title OracleRelay Interface\r\n/// @notice Interface for interacting with OracleRelay\r\ninterface IOracleRelay {\r\n  /// @notice Emited when the underlyings are different in the anchored view\r\n  error OracleRelay_DifferentUnderlyings();\r\n\r\n  enum OracleType {\r\n    Chainlink,\r\n    Uniswap,\r\n    Price\r\n  }\r\n\r\n  /// @notice returns the price with 18 decimals\r\n  /// @return _currentValue the current price\r\n  function currentValue() external returns (uint256 _currentValue);\r\n\r\n  /// @notice returns the price with 18 decimals without any state changes\r\n  /// @dev some oracles require a state change to get the exact current price.\r\n  ///      This is updated when calling other state changing functions that query the price\r\n  /// @return _price the current price\r\n  function peekValue() external view returns (uint256 _price);\r\n\r\n  /// @notice returns the type of the oracle\r\n  /// @return _type the type (Chainlink/Uniswap/Price)\r\n  function oracleType() external view returns (OracleType _type);\r\n\r\n  /// @notice returns the underlying asset the oracle is pricing\r\n  /// @return _underlying the address of the underlying asset\r\n  function underlying() external view returns (address _underlying);\r\n}\r\n\r\nabstract contract OracleRelay is IOracleRelay {\r\n  /// @notice The WETH address\r\n  address public constant wETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n  /// @notice The type of oracle\r\n  OracleType public oracleType;\r\n  /// @notice The underlying asset\r\n  address public underlying;\r\n\r\n  constructor(OracleType _oracleType) {\r\n    oracleType = _oracleType;\r\n  }\r\n\r\n  /// @notice set the underlying address\r\n  function _setUnderlying(address _underlying) internal {\r\n    underlying = _underlying;\r\n  }\r\n\r\n  /// @dev Most oracles don't require a state change for pricing, for those who do, override this function\r\n  function currentValue() external virtual returns (uint256 _currentValue) {\r\n    _currentValue = peekValue();\r\n  }\r\n\r\n  /// @notice The current reported value of the oracle\r\n  /// @dev Implementation in _get()\r\n  /// @return _price The current value\r\n  function peekValue() public view virtual override returns (uint256 _price);\r\n}\r\n\r\ninterface IChainlinkOracleRelay {\r\n  /// @notice Returns True if the oracle is stale\r\n  function isStale() external view returns (bool _stale);\r\n}\r\n\r\n/// @notice Implementation of compounds' AnchoredView, using a main relay and an anchor relay, the AnchoredView\r\n/// ensures that the main relay's price is within some amount of the anchor relay price\r\n/// if not, the call reverts, effectively disabling the oracle & any actions which require it\r\ncontract AnchoredViewRelay is OracleRelay {\r\n  /// @notice The interface of the anchor relay\r\n  IOracleRelay public anchorRelay;\r\n\r\n  /// @notice The interface of the main relay\r\n  IOracleRelay public mainRelay;\r\n\r\n  /// @notice The numerator of the allowable deviation from the anchor price\r\n  uint256 public widthNumerator;\r\n\r\n  /// @notice The denominator of the allowable deviation from the anchor price\r\n  uint256 public widthDenominator;\r\n\r\n  /// @notice The numerator of the allowable deviation from the anchor price for the stale price\r\n  uint256 public staleWidthNumerator;\r\n\r\n  /// @notice The denominator of the allowable deviation from the anchor price for the stale price\r\n  uint256 public staleWidthDenominator;\r\n\r\n  /// @notice All values set at construction time\r\n  /// @param _anchorAddress The address of OracleRelay to use as anchor\r\n  /// @param _mainAddress The address of OracleRelay to use as main\r\n  /// @param _widthNumerator The numerator of the allowable deviation width\r\n  /// @param _widthDenominator The denominator of the allowable deviation width\r\n  /// @param _widthNumerator The numerator of the allowable deviation width for the stale price\r\n  /// @param _widthDenominator The denominator of the allowable deviation width for the stale price\r\n  constructor(\r\n    address _anchorAddress,\r\n    address _mainAddress,\r\n    uint256 _widthNumerator,\r\n    uint256 _widthDenominator,\r\n    uint256 _staleWidthNumerator,\r\n    uint256 _staleWidthDenominator\r\n  ) OracleRelay(IOracleRelay(_mainAddress).oracleType()) {\r\n    anchorRelay = IOracleRelay(_anchorAddress);\r\n\r\n    mainRelay = IOracleRelay(_mainAddress);\r\n\r\n    address _underlying = anchorRelay.underlying();\r\n\r\n    /// Ensure the two relays have the same underlying\r\n    if (_underlying != mainRelay.underlying()) revert OracleRelay_DifferentUnderlyings();\r\n\r\n    /// Set the underlying\r\n    _setUnderlying(_underlying);\r\n\r\n    widthNumerator = _widthNumerator;\r\n    widthDenominator = _widthDenominator;\r\n\r\n    staleWidthNumerator = _staleWidthNumerator;\r\n    staleWidthDenominator = _staleWidthDenominator;\r\n  }\r\n\r\n  /// @notice returns the price with 18 decimals without any state changes\r\n  /// @dev some oracles require a state change to get the exact current price.\r\n  ///      This is updated when calling other state changing functions that query the price\r\n  /// @return _price the current price\r\n  function peekValue() public view override returns (uint256 _price) {\r\n    _price = _getLastSecond();\r\n  }\r\n\r\n  /// @notice Compares the main value (chainlink) to the anchor value (uniswap v3)\r\n  /// @dev The two prices must closely match +-buffer, or it will revert\r\n  /// @return _mainValue The current value of oracle\r\n  function _getLastSecond() private view returns (uint256 _mainValue) {\r\n    // get the main price\r\n    _mainValue = mainRelay.peekValue();\r\n    require(_mainValue > 0, 'invalid oracle value');\r\n\r\n    uint256 _anchorPrice = anchorRelay.peekValue();\r\n    require(_anchorPrice > 0, 'invalid anchor value');\r\n\r\n    uint256 _buffer;\r\n    if (IChainlinkOracleRelay(address(mainRelay)).isStale()) {\r\n      /// If the price is stale the range percentage is smaller\r\n      _buffer = (staleWidthNumerator * _anchorPrice) / staleWidthDenominator;\r\n    } else {\r\n      _buffer = (widthNumerator * _anchorPrice) / widthDenominator;\r\n    }\r\n\r\n    // create upper and lower bounds\r\n    uint256 _upperBounds = _anchorPrice + _buffer;\r\n    uint256 _lowerBounds = _anchorPrice - _buffer;\r\n\r\n    // ensure the anchor price is within bounds\r\n    require(_mainValue < _upperBounds, 'anchor too low');\r\n    require(_mainValue > _lowerBounds, 'anchor too high');\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anchorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_widthNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_widthDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_staleWidthNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_staleWidthDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OracleRelay_DifferentUnderlyings\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"anchorRelay\",\"outputs\":[{\"internalType\":\"contract IOracleRelay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRelay\",\"outputs\":[{\"internalType\":\"contract IOracleRelay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleType\",\"outputs\":[{\"internalType\":\"enum IOracleRelay.OracleType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peekValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staleWidthDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staleWidthNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"widthDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"widthNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AnchoredViewRelay", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006692a9cdbc47981e8b8c77d16fc476cb06c24c56000000000000000000000000a9007ef1b705c88c89f6f5f35c4063c58d23abdd00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd68a523363f1e51dc908469588a8d7ef7e98712d7f568b26572269ac53185ac"}