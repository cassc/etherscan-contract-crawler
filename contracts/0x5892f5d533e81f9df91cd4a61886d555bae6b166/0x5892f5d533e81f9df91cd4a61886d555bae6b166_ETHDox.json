{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\texternal\r\n\treturns (bool);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\ninterface IFactory {\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns (address pair);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns (\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n\tfunction dividendOf(address _owner) external view returns(uint256);\r\n\tfunction distributeDividends() external payable;\r\n\tfunction withdrawDividend() external;\r\n\tevent DividendsDistributed(\r\n\t\taddress indexed from,\r\n\t\tuint256 weiAmount\r\n\t);\r\n\tevent DividendWithdrawn(\r\n\t\taddress indexed to,\r\n\t\tuint256 weiAmount\r\n\t);\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n\tfunction withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\tfunction withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\tfunction accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n   function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\tint256 private constant MIN_INT256 = int256(1) << 255;\r\n\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a * b;\r\n\r\n\t\t// Detect overflow when multiplying MIN_INT256 with -1\r\n\t\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n\t\trequire((b == 0) || (c / b == a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(int256 a, int256 b) internal pure returns (int256) {\r\n\t\t// Prevent overflow when dividing MIN_INT256 by -1\r\n\t\trequire(b != -1 || a != MIN_INT256);\r\n\r\n\t\t// Solidity already throws when dividing by 0.\r\n\t\treturn a / b;\r\n\t}\r\n\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a - b;\r\n\t\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction add(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a + b;\r\n\t\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction abs(int256 a) internal pure returns (int256) {\r\n\t\trequire(a != MIN_INT256);\r\n\t\treturn a < 0 ? -a : a;\r\n\t}\r\n\tfunction toUint256Safe(int256 a) internal pure returns (uint256) {\r\n\t\trequire(a >= 0);\r\n\t\treturn uint256(a);\r\n\t}\r\n}\r\n\r\nlibrary SafeMathUint {\r\n\tfunction toInt256Safe(uint256 a) internal pure returns (int256) {\r\n\t\tint256 b = int256(a);\r\n\t\trequire(b >= 0);\r\n\t\treturn b;\r\n\t}\r\n}\r\n\r\nlibrary IterableMapping {\r\n\tstruct Map {\r\n\t\taddress[] keys;\r\n\t\tmapping(address => uint) values;\r\n\t\tmapping(address => uint) indexOf;\r\n\t\tmapping(address => bool) inserted;\r\n\t}\r\n\r\n\tfunction get(Map storage map, address key) public view returns (uint) {\r\n\t\treturn map.values[key];\r\n\t}\r\n\r\n\tfunction getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n\t\tif(!map.inserted[key]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn int(map.indexOf[key]);\r\n\t}\r\n\r\n\tfunction getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n\t\treturn map.keys[index];\r\n\t}\r\n\r\n\tfunction size(Map storage map) public view returns (uint) {\r\n\t\treturn map.keys.length;\r\n\t}\r\n\r\n\tfunction set(Map storage map, address key, uint val) public {\r\n\t\tif (map.inserted[key]) {\r\n\t\t\tmap.values[key] = val;\r\n\t\t} else {\r\n\t\t\tmap.inserted[key] = true;\r\n\t\t\tmap.values[key] = val;\r\n\t\t\tmap.indexOf[key] = map.keys.length;\r\n\t\t\tmap.keys.push(key);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction remove(Map storage map, address key) public {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete map.inserted[key];\r\n\t\tdelete map.values[key];\r\n\r\n\t\tuint index = map.indexOf[key];\r\n\t\tuint lastIndex = map.keys.length - 1;\r\n\t\taddress lastKey = map.keys[lastIndex];\r\n\r\n\t\tmap.indexOf[lastKey] = index;\r\n\t\tdelete map.indexOf[key];\r\n\r\n\t\tmap.keys[index] = lastKey;\r\n\t\tmap.keys.pop();\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathUint for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n\tuint256 constant internal magnitude = 2**128;\r\n\tuint256 internal magnifiedDividendPerShare;\r\n\tuint256 public totalDividendsDistributed;\r\n\r\n\tmapping(address => int256) internal magnifiedDividendCorrections;\r\n\tmapping(address => uint256) internal withdrawnDividends;\r\n\r\n\tconstructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\r\n\r\n\treceive() external payable {\r\n\t\tdistributeDividends();\r\n\t}\r\n\r\n\tfunction distributeDividends() public override onlyOwner payable {\r\n\t\trequire(totalSupply() > 0);\r\n\t\tif (msg.value > 0) {\r\n\t\t\tmagnifiedDividendPerShare = magnifiedDividendPerShare.add((msg.value).mul(magnitude) / totalSupply());\r\n\t\t\temit DividendsDistributed(msg.sender, msg.value);\r\n\t\t\ttotalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n\t\t}\r\n\t}\r\n\tfunction withdrawDividend() public virtual override {\r\n\t\t_withdrawDividendOfUser(payable(msg.sender));\r\n\t}\r\n\tfunction _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n\t\tif (_withdrawableDividend > 0) {\r\n\t\t\twithdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\t\t\temit DividendWithdrawn(user, _withdrawableDividend);\r\n            (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n            if(!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n            return _withdrawableDividend;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\tfunction dividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawableDividendOf(_owner);\r\n\t}\r\n\tfunction withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n\t}\r\n\tfunction withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawnDividends[_owner];\r\n\t}\r\n\tfunction accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n\t\t.add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n\t}\r\n\tfunction _transfer(address from, address to, uint256 value) internal virtual override {\r\n\t\trequire(false);\r\n\t\tint256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n\t\tmagnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n\t\tmagnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n\t}\r\n\tfunction _mint(address account, uint256 value) internal override {\r\n\t\tsuper._mint(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _burn(address account, uint256 value) internal override {\r\n\t\tsuper._burn(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _setBalance(address account, uint256 newBalance) internal {\r\n\t\tuint256 currentBalance = balanceOf(account);\r\n\t\tif(newBalance > currentBalance) {\r\n\t\t\tuint256 mintAmount = newBalance.sub(currentBalance);\r\n\t\t\t_mint(account, mintAmount);\r\n\t\t} else if(newBalance < currentBalance) {\r\n\t\t\tuint256 burnAmount = currentBalance.sub(newBalance);\r\n\t\t\t_burn(account, burnAmount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract ETHDox is ERC20, Ownable {\r\n\tIRouter public uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n\tstring private constant _name = \"ETHDox\";\r\n\tstring private constant _symbol = \"ETHDOX\";\r\n\tuint8 private constant _decimals = 18;\r\n\r\n\tETHDoxDividendTracker public dividendTracker;\r\n\r\n\tbool public isTradingEnabled;\r\n\tuint256 private _launchBlockNumber;\r\n\tuint256 private _launchTimestamp;\r\n\tuint256 private _tradingPausedTimestamp;\r\n\tuint256 private constant _blockedTimeLimit = 172800;\r\n\r\n\t// initialSupply\r\n\tuint256 constant initialSupply = 1000000000 * (10**18);\r\n\r\n\t// max wallet is 2% of initialSupply\r\n\tuint256 public maxWalletAmount = initialSupply * 200 / 10000;\r\n\r\n\tbool private _swapping;\r\n\tuint256 public minimumTokensBeforeSwap = 25000000 * (10**18);\r\n\r\n\taddress public liquidityWallet;\r\n\taddress public buyBackWallet;\r\n\taddress public devWallet;\r\n\r\n\tstruct CustomTaxPeriod {\r\n\t\tbytes23 periodName;\r\n\t\tuint8 blocksInPeriod;\r\n\t\tuint256 timeInPeriod;\r\n\t\tuint8 liquidityFeeOnBuy;\r\n\t\tuint8 liquidityFeeOnSell;\r\n\t\tuint8 devFeeOnBuy;\r\n\t\tuint8 devFeeOnSell;\r\n\t\tuint8 buyBackFeeOnBuy;\r\n\t\tuint8 buyBackFeeOnSell;\r\n\t\tuint8 holdersFeeOnBuy;\r\n\t\tuint8 holdersFeeOnSell;\r\n\t}\r\n\t// Base taxes\r\n\tCustomTaxPeriod private _default = CustomTaxPeriod('default',0,0,3,3,3,3,1,1,2,2);\r\n\tCustomTaxPeriod private _base = CustomTaxPeriod('base',0,0,3,3,3,3,1,1,2,2);\r\n\r\n\tmapping (address => bool) private _isBlocked;\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n\tmapping (address => bool) public automatedMarketMakerPairs;\r\n\tmapping (address => uint256) private _sellTimesInLaunch;\r\n\tmapping (address => bool) private _isAllowedToTradeWhenDisabled;\r\n\r\n\tuint8 private _liquidityFee;\r\n\tuint8 private _devFee;\r\n\tuint8 private _buyBackFee;\r\n\tuint8 private _holdersFee;\r\n\tuint8 private _totalFee;\r\n\r\n\tevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n\tevent AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\n\tevent BlockedAccountChange(address indexed holder, bool indexed status);\r\n\tevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent WalletChange(string indexed walletIdentifier, address indexed newWallet, address indexed oldWallet);\r\n\tevent FeeChange(string indexed identifier, uint8 liquidityFee, uint8 devFee, uint8 buyBackFee, uint8 holdersFee);\r\n\tevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\n\tevent MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromDividendsChange(address indexed account, bool isExcluded);\r\n\tevent DividendsSent(uint256 tokensSwapped);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n    event ClaimETHOverflow(uint256 amount);\r\n\tevent FeesApplied(uint8 liquidityFee, uint8 devFee, uint8 buybackFee, uint8 holdersFee, uint8 totalFee);\r\n\r\n\tconstructor() ERC20(_name, _symbol) {\r\n        liquidityWallet = owner();\r\n        devWallet = owner();\r\n\t    buyBackWallet = owner();\r\n\r\n\t\tdividendTracker = new ETHDoxDividendTracker();\r\n\r\n\t\tIRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Mainnet\r\n\t\taddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\t\t_isExcludedFromFee[address(dividendTracker)] = true;\r\n\r\n\t\tdividendTracker.excludeFromDividends(address(dividendTracker));\r\n\t\tdividendTracker.excludeFromDividends(address(this));\r\n\t\tdividendTracker.excludeFromDividends(address(0x000000000000000000000000000000000000dEaD));\r\n\t\tdividendTracker.excludeFromDividends(owner());\r\n\t\tdividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n\r\n\t\t_isAllowedToTradeWhenDisabled[owner()] = true;\r\n\t\t_isAllowedToTradeWhenDisabled[address(this)] = true;\r\n\r\n\t\t_isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(dividendTracker)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n\t\t_mint(owner(), initialSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t// Setters\r\n\tfunction activateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = true;\r\n\t\tif (_launchTimestamp == 0) {\r\n\t\t\t_launchTimestamp = block.timestamp;\r\n\t\t\t_launchBlockNumber = block.number;\r\n\t\t}\r\n\t}\r\n\tfunction deactivateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = false;\r\n\t\t_tradingPausedTimestamp = block.timestamp;\r\n\t}\r\n\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"ETHDox: Automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\t\tif(value) {\r\n\t\t\tdividendTracker.excludeFromDividends(pair);\r\n\t\t}\r\n\t\temit AutomatedMarketMakerPairChange(pair, value);\r\n\t}\r\n\tfunction allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n\t\t_isAllowedToTradeWhenDisabled[account] = allowed;\r\n\t\temit AllowedWhenTradingDisabledChange(account, allowed);\r\n\t}\r\n\tfunction blockAccount(address account) external onlyOwner {\r\n\t\trequire(!_isBlocked[account], \"ETHDox: Account is already blocked\");\r\n\t\trequire((block.timestamp - _launchTimestamp) < _blockedTimeLimit, \"ETHDox: Time to block accounts has expired\");\r\n\t\t_isBlocked[account] = true;\r\n\t\temit BlockedAccountChange(account, true);\r\n\t}\r\n\tfunction unblockAccount(address account) external onlyOwner {\r\n\t\trequire(_isBlocked[account], \"ETHDox: Account is not blcoked\");\r\n\t\t_isBlocked[account] = false;\r\n\t\temit BlockedAccountChange(account, false);\r\n\t}\r\n\tfunction excludeFromFees(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromFee[account] != excluded, \"ETHDox: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromFee[account] = excluded;\r\n\t\temit ExcludeFromFeesChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromDividends(address account) external onlyOwner {\r\n\t\tdividendTracker.excludeFromDividends(account);\r\n\t}\r\n\tfunction excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxWalletLimit[account] != excluded, \"ETHDox: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxWalletLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxWalletChange(account, excluded);\r\n\t}\r\n\tfunction setWallets(address newLiquidityWallet, address newDevWallet, address newBuyBackWallet) external onlyOwner {\r\n\t\tif(liquidityWallet != newLiquidityWallet) {\r\n\t\t\trequire(newLiquidityWallet != address(0), \"ETHDox: The liquidityWallet cannot be 0\");\r\n\t\t\temit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\n\t\t\tliquidityWallet = newLiquidityWallet;\r\n\t\t}\r\n\t\tif(devWallet != newDevWallet) {\r\n\t\t\trequire(newDevWallet != address(0), \"ETHDox: The devWallet cannot be 0\");\r\n\t\t\temit WalletChange('devWallet', newDevWallet, devWallet);\r\n\t\t\tdevWallet = newDevWallet;\r\n\t\t}\r\n\t\tif(buyBackWallet != newBuyBackWallet) {\r\n\t\t\trequire(newBuyBackWallet != address(0), \"ETHDox: The buyBackWallet cannot be 0\");\r\n\t\t\temit WalletChange('buyBackWallet', newBuyBackWallet, buyBackWallet);\r\n\t\t\tbuyBackWallet = newBuyBackWallet;\r\n\t\t}\r\n\t}\r\n\t// Base Fees\r\n\tfunction setBaseFeesOnBuy(uint8 _liquidityFeeOnBuy, uint8 _devFeeOnBuy, uint8 _buybackFeeOnBuy, uint8 _holdersFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _devFeeOnBuy, _buybackFeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _devFeeOnBuy, _buybackFeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setBaseFeesOnSell(uint8 _liquidityFeeOnSell, uint8 _devFeeOnSell, uint8 _buybackFeeOnSell, uint8 _holdersFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _devFeeOnSell, _buybackFeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _devFeeOnSell, _buybackFeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\tfunction setUniswapRouter(address newAddress) external onlyOwner {\r\n\t\trequire(newAddress != address(uniswapV2Router), \"ETHDox: The router already has that address\");\r\n\t\temit UniswapV2RouterChange(newAddress, address(uniswapV2Router));\r\n\t\tuniswapV2Router = IRouter(newAddress);\r\n\t}\r\n\tfunction setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxWalletAmount, \"ETHDox: Cannot update maxWalletAmount to same value\");\r\n\t\temit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n\t\tmaxWalletAmount = newValue;\r\n\t}\r\n\tfunction setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != minimumTokensBeforeSwap, \"ETHDox: Cannot update minimumTokensBeforeSwap to same value\");\r\n\t\temit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n\t\tminimumTokensBeforeSwap = newValue;\r\n\t}\r\n\tfunction claim() external {\r\n\t\tdividendTracker.processAccount(payable(msg.sender), false);\r\n\t}\r\n\tfunction claimETHOverflow() external onlyOwner {\r\n\t    uint256 amount = address(this).balance;\r\n        (bool success,) = address(owner()).call{value : amount}(\"\");\r\n        if (success){\r\n            emit ClaimETHOverflow(amount);\r\n        }\r\n\t}\r\n\r\n\t// Getters\r\n\tfunction getTotalDividendsDistributed() external view returns (uint256) {\r\n\t\treturn dividendTracker.totalDividendsDistributed();\r\n\t}\r\n\tfunction getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n\t\treturn dividendTracker.getNumberOfTokenHolders();\r\n\t}\r\n\tfunction getBaseBuyFees() external view returns (uint8, uint8, uint8, uint8){\r\n\t\treturn (_base.liquidityFeeOnBuy, _base.devFeeOnBuy, _base.buyBackFeeOnBuy, _base.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getBaseSellFees() external view returns (uint8, uint8, uint8, uint8){\r\n\t\treturn (_base.liquidityFeeOnSell, _base.devFeeOnSell, _base.buyBackFeeOnSell, _base.holdersFeeOnSell);\r\n\t}\r\n\tfunction isBot(address botAddress) external view returns(bool) {\r\n\t\treturn Address.isContract(botAddress);\r\n\t}\r\n\r\n\t// Main\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t\t) internal override {\r\n\t\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t\tif(amount == 0) {\r\n\t\t\t\tsuper._transfer(from, to, 0);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t    if(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\n\t\t\t\trequire(isTradingEnabled, \"ETHDox: Trading is currently disabled.\");\r\n\t\t\t\trequire(!_isBlocked[to], \"ETHDox: Account is blocked\");\r\n\t\t\t\trequire(!_isBlocked[from], \"ETHDox: Account is blocked\");\r\n\t\t\t\tif (!_isExcludedFromMaxWalletLimit[to]) {\r\n\t\t\t\t\trequire((balanceOf(to) + amount) <= maxWalletAmount, \"ETHDox: Expected wallet amount exceeds the maxWalletAmount.\");\r\n\t\t\t\t}\r\n\t\t\t\tif ((block.timestamp - _launchTimestamp) < 3600 && automatedMarketMakerPairs[to]) {\r\n\t\t\t\t\trequire((block.timestamp - _sellTimesInLaunch[from]) > 60, \"ETHDox: Cannot sell more than once per 60s in launch\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t_adjustTaxes(automatedMarketMakerPairs[from], automatedMarketMakerPairs[to]);\r\n\t\t\tbool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n\t\t\tif (\r\n\t\t\t\tisTradingEnabled &&\r\n\t\t\t\tcanSwap &&\r\n\t\t\t\t!_swapping &&\r\n\t\t\t\t_totalFee > 0 &&\r\n\t\t\t\tautomatedMarketMakerPairs[to]\r\n\t\t\t) {\r\n\t\t\t\t_swapping = true;\r\n\t\t\t\t_swapAndLiquify();\r\n\t\t\t\t_swapping = false;\r\n\t\t\t}\r\n\r\n\t\t\tbool takeFee = !_swapping && isTradingEnabled;\r\n\r\n\t\t\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n\t\t\t\ttakeFee = false;\r\n\t\t\t}\r\n\t\t\tif (takeFee) {\r\n\t\t\t\tuint256 fee = amount * _totalFee / 100;\r\n\t\t\t\tamount = amount - fee;\r\n\t\t\t\tsuper._transfer(from, address(this), fee);\r\n\t\t\t}\r\n\r\n\t\t\tsuper._transfer(from, to, amount);\r\n\r\n\t\t\tif (automatedMarketMakerPairs[to] && (block.timestamp - _launchTimestamp) < 3600 && !_isAllowedToTradeWhenDisabled[from]) {\r\n\t\t\t\t_sellTimesInLaunch[from] = block.timestamp;\r\n\t\t\t}\r\n\r\n\t\t\ttry dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n\t\t\ttry dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\t}\r\n\tfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp) private {\r\n\t\t_liquidityFee = 0;\r\n\t\t_devFee = 0;\r\n\t\t_buyBackFee = 0;\r\n\t\t_holdersFee = 0;\r\n\r\n\t\tif (isBuyFromLp) {\r\n\t\t    if ((block.number - _launchBlockNumber) <= 5) {\r\n\t\t\t\t_liquidityFee = 100;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t_liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t\t_devFee = _base.devFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _base.buyBackFeeOnBuy;\r\n\t\t\t\t_holdersFee = _base.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t}\r\n\t    if (isSelltoLp) {\r\n\t    \t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_holdersFee = _base.holdersFeeOnSell;\r\n\t\t\t_devFee = _base.devFeeOnSell;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnSell;\r\n\t\t}\r\n\t\t_totalFee = _liquidityFee + _devFee + _buyBackFee  + _holdersFee;\r\n\t\temit FeesApplied(_liquidityFee, _devFee, _buyBackFee, _holdersFee, _totalFee);\r\n\t}\r\n\tfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint8 _liquidityFeeOnSell,\r\n\t\tuint8 _devFeeOnSell,\r\n\t\tuint8 _buyBackFeeOnSell,\r\n\t\tuint8 _holdersFeeOnSell\r\n\t) private {\r\n\t\tif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\n\t\t\tmap.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n\t\t}\r\n\t\tif (map.devFeeOnSell != _devFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_devFeeOnSell, map.devFeeOnSell, 'devFeeOnSell', map.periodName);\r\n\t\t\tmap.devFeeOnSell = _devFeeOnSell;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnSell, map.buyBackFeeOnSell, 'buyBackFeeOnSell', map.periodName);\r\n\t\t\tmap.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnSell != _holdersFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnSell, map.holdersFeeOnSell, 'holdersFeeOnSell', map.periodName);\r\n\t\t\tmap.holdersFeeOnSell = _holdersFeeOnSell;\r\n\t\t}\r\n\t}\r\n\tfunction _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint8 _liquidityFeeOnBuy,\r\n\t\tuint8 _devFeeOnBuy,\r\n\t\tuint8 _buyBackFeeOnBuy,\r\n\t\tuint8 _holdersFeeOnBuy\r\n\t\t) private {\r\n\t\tif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\n\t\t\tmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.devFeeOnBuy != _devFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_devFeeOnBuy, map.devFeeOnBuy, 'devFeeOnBuy', map.periodName);\r\n\t\t\tmap.devFeeOnBuy = _devFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_buyBackFeeOnBuy, map.buyBackFeeOnBuy, 'buyBackFeeOnBuy', map.periodName);\r\n\t\t\tmap.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnBuy != _holdersFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnBuy, map.holdersFeeOnBuy, 'holdersFeeOnBuy', map.periodName);\r\n\t\t\tmap.holdersFeeOnBuy = _holdersFeeOnBuy;\r\n\t\t}\r\n\t}\r\n\tfunction _swapAndLiquify() private {\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tuint256 initialETHBalance = address(this).balance;\r\n\r\n\t\tuint8 totalFeePrior = _totalFee;\r\n\r\n\t\tuint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\r\n\t\tuint256 amountToSwap = contractBalance - amountToLiquify;\r\n\r\n\t\t_swapTokensForETH(amountToSwap);\r\n\r\n\t\tuint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\r\n\t\tuint256 totalETHFee = _totalFee - (_liquidityFee / 2);\r\n\r\n\t\tuint256 amountETHLiquidity = ETHBalanceAfterSwap * _liquidityFee / totalETHFee / 2;\r\n\t\tuint256 amountETHDev = ETHBalanceAfterSwap * _devFee / totalETHFee;\r\n\t\tuint256 amountETHBuyBack = ETHBalanceAfterSwap * _buyBackFee / totalETHFee;\r\n\t\tuint256 amountETHHolders = ETHBalanceAfterSwap - (amountETHLiquidity + amountETHDev + amountETHBuyBack);\r\n\r\n\t\tpayable(devWallet).transfer(amountETHDev);\r\n\t\tpayable(buyBackWallet).transfer(amountETHBuyBack);\r\n\r\n\t\tif (amountToLiquify > 0) {\r\n\t\t\t_addLiquidity(amountToLiquify, amountETHLiquidity);\r\n\t\t\temit SwapAndLiquify(amountToSwap, amountETHLiquidity, amountToLiquify);\r\n\t\t}\r\n\r\n\t\t(bool dividendSuccess,) = address(dividendTracker).call{value: amountETHHolders}(\"\");\r\n\t\tif(dividendSuccess) {\r\n\t\t\temit DividendsSent(amountETHHolders);\r\n\t\t}\r\n\r\n\t\t_totalFee = totalFeePrior;\r\n\t}\r\n\tfunction _swapTokensForETH(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\tliquidityWallet,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n}\r\n\r\ncontract ETHDoxDividendTracker is DividendPayingToken {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathInt for int256;\r\n\tusing IterableMapping for IterableMapping.Map;\r\n\r\n\tIterableMapping.Map private tokenHoldersMap;\r\n\r\n\tuint256 public lastProcessedIndex;\r\n\tmapping (address => bool) public excludedFromDividends;\r\n\tmapping (address => uint256) public lastClaimTimes;\r\n\tuint256 public claimWait;\r\n\tuint256 public minimumTokenBalanceForDividends;\r\n\r\n\tevent ExcludeFromDividends(address indexed account);\r\n\tevent ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n\tconstructor() DividendPayingToken(\"ETHDox_Dividend_Tracker\", \"ETHDox_Dividend_Tracker\") {\r\n\t\tclaimWait = 3600;\r\n\t\tminimumTokenBalanceForDividends = 0 * (10**18);\r\n\t}\r\n\tfunction _transfer(address, address, uint256) internal pure override {\r\n\t\trequire(false, \"ETHDox_Dividend_Tracker: No transfers allowed\");\r\n\t}\r\n\tfunction excludeFromDividends(address account) external onlyOwner {\r\n\t\trequire(!excludedFromDividends[account]);\r\n\t\texcludedFromDividends[account] = true;\r\n\t\t_setBalance(account, 0);\r\n\t\ttokenHoldersMap.remove(account);\r\n\t\temit ExcludeFromDividends(account);\r\n\t}\r\n\tfunction setTokenBalanceForDividends(uint256 newValue) external onlyOwner {\r\n\t\trequire(minimumTokenBalanceForDividends != newValue, \"ETHDox_Dividend_Tracker: minimumTokenBalanceForDividends already the value of 'newValue'.\");\r\n\t\tminimumTokenBalanceForDividends = newValue;\r\n\t}\r\n\tfunction getNumberOfTokenHolders() external view returns(uint256) {\r\n\t\treturn tokenHoldersMap.keys.length;\r\n\t}\r\n\tfunction setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n\t\tif(excludedFromDividends[account]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(newBalance >= minimumTokenBalanceForDividends) {\r\n\t\t\t_setBalance(account, newBalance);\r\n\t\t\ttokenHoldersMap.set(account, newBalance);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_setBalance(account, 0);\r\n\t\t\ttokenHoldersMap.remove(account);\r\n\t\t}\r\n\t\tprocessAccount(account, true);\r\n\t}\r\n\tfunction processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n\t\tuint256 amount = _withdrawDividendOfUser(account);\r\n\t\tif(amount > 0) {\r\n\t\t\tlastClaimTimes[account] = block.timestamp;\r\n\t\t\temit Claim(account, amount, automatic);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimETHOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"}],\"name\":\"DividendsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromDividendsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buybackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"walletIdentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract ETHDoxDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buybackFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buybackFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHDox", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:697ad0b18a2b1e112435d73d88835700174a00b1", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bea18288b6c150d5b2b43760c3204d4116d8637ce7282687a1f96cfcc6905498"}