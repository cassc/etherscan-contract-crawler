{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardEvents.sol\r\n/// @title Witnet Request Board emitting events interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardEvents {\r\n    /// Emitted when a Witnet Data Request is posted to the WRB.\r\n    event PostedRequest(uint256 queryId, address from);\r\n\r\n    /// Emitted when a Witnet-solved result is reported to the WRB.\r\n    event PostedResult(uint256 queryId, address from);\r\n\r\n    /// Emitted when all data related to given query is deleted from the WRB.\r\n    event DeletedQuery(uint256 queryId, address from);\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardReporter.sol\r\n/// @title The Witnet Request Board Reporter interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardReporter {\r\n    /// Reports the Witnet-provided result to a previously posted request. \r\n    /// @dev Will assume `block.timestamp` as the timestamp at which the request was solved.\r\n    /// @dev Fails if:\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique identifier of the data request.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, bytes32 _drTxHash, bytes calldata _result) external;\r\n\r\n    /// Reports the Witnet-provided result to a previously posted request.\r\n    /// @dev Fails if:\r\n    /// @dev - called from unauthorized address;\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique query identifier\r\n    /// @param _timestamp The timestamp of the solving tally transaction in Witnet.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, uint256 _timestamp, bytes32 _drTxHash, bytes calldata _result) external;\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequest.sol\r\n/// @title The Witnet Data Request basic interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequest {\r\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \r\n    /// a well-formed Witnet Data Request using Protocol Buffers.\r\n    function bytecode() external view returns (bytes memory);\r\n\r\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\r\n    function hash() external view returns (bytes32);\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\libs\\Witnet.sol\r\nlibrary Witnet {\r\n\r\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\r\n    /// @param _bytecode CBOR-encoded RADON.\r\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\r\n        return sha256(_bytecode);\r\n    }\r\n\r\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\r\n    struct Query {\r\n        Request request;\r\n        Response response;\r\n    }\r\n\r\n    /// Possible status of a Witnet query.\r\n    enum QueryStatus {\r\n        Unknown,\r\n        Posted,\r\n        Reported,\r\n        Deleted\r\n    }\r\n\r\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\r\n    struct Request {\r\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\r\n        address requester;      // Address from which the request was posted.\r\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\r\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\r\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\r\n    }\r\n\r\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\r\n    struct Response {\r\n        address reporter;       // Address from which the result was reported.\r\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\r\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\r\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\r\n    }\r\n\r\n    /// Data struct containing the Witnet-provided result to a Data Request.\r\n    struct Result {\r\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\r\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\r\n    }\r\n\r\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\r\n    struct CBOR {\r\n        Buffer buffer;\r\n        uint8 initialByte;\r\n        uint8 majorType;\r\n        uint8 additionalInformation;\r\n        uint64 len;\r\n        uint64 tag;\r\n    }\r\n\r\n    /// Iterable bytes buffer.\r\n    struct Buffer {\r\n        bytes data;\r\n        uint32 cursor;\r\n    }\r\n\r\n    /// Witnet error codes table.\r\n    enum ErrorCodes {\r\n        // 0x00: Unknown error. Something went really bad!\r\n        Unknown,\r\n        // Script format errors\r\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\r\n        SourceScriptNotCBOR,\r\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\r\n        SourceScriptNotArray,\r\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\r\n        SourceScriptNotRADON,\r\n        /// Unallocated\r\n        ScriptFormat0x04,\r\n        ScriptFormat0x05,\r\n        ScriptFormat0x06,\r\n        ScriptFormat0x07,\r\n        ScriptFormat0x08,\r\n        ScriptFormat0x09,\r\n        ScriptFormat0x0A,\r\n        ScriptFormat0x0B,\r\n        ScriptFormat0x0C,\r\n        ScriptFormat0x0D,\r\n        ScriptFormat0x0E,\r\n        ScriptFormat0x0F,\r\n        // Complexity errors\r\n        /// 0x10: The request contains too many sources.\r\n        RequestTooManySources,\r\n        /// 0x11: The script contains too many calls.\r\n        ScriptTooManyCalls,\r\n        /// Unallocated\r\n        Complexity0x12,\r\n        Complexity0x13,\r\n        Complexity0x14,\r\n        Complexity0x15,\r\n        Complexity0x16,\r\n        Complexity0x17,\r\n        Complexity0x18,\r\n        Complexity0x19,\r\n        Complexity0x1A,\r\n        Complexity0x1B,\r\n        Complexity0x1C,\r\n        Complexity0x1D,\r\n        Complexity0x1E,\r\n        Complexity0x1F,\r\n        // Operator errors\r\n        /// 0x20: The operator does not exist.\r\n        UnsupportedOperator,\r\n        /// Unallocated\r\n        Operator0x21,\r\n        Operator0x22,\r\n        Operator0x23,\r\n        Operator0x24,\r\n        Operator0x25,\r\n        Operator0x26,\r\n        Operator0x27,\r\n        Operator0x28,\r\n        Operator0x29,\r\n        Operator0x2A,\r\n        Operator0x2B,\r\n        Operator0x2C,\r\n        Operator0x2D,\r\n        Operator0x2E,\r\n        Operator0x2F,\r\n        // Retrieval-specific errors\r\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\r\n        HTTP,\r\n        /// 0x31: Retrieval of at least one of the sources timed out.\r\n        RetrievalTimeout,\r\n        /// Unallocated\r\n        Retrieval0x32,\r\n        Retrieval0x33,\r\n        Retrieval0x34,\r\n        Retrieval0x35,\r\n        Retrieval0x36,\r\n        Retrieval0x37,\r\n        Retrieval0x38,\r\n        Retrieval0x39,\r\n        Retrieval0x3A,\r\n        Retrieval0x3B,\r\n        Retrieval0x3C,\r\n        Retrieval0x3D,\r\n        Retrieval0x3E,\r\n        Retrieval0x3F,\r\n        // Math errors\r\n        /// 0x40: Math operator caused an underflow.\r\n        Underflow,\r\n        /// 0x41: Math operator caused an overflow.\r\n        Overflow,\r\n        /// 0x42: Tried to divide by zero.\r\n        DivisionByZero,\r\n        /// Unallocated\r\n        Math0x43,\r\n        Math0x44,\r\n        Math0x45,\r\n        Math0x46,\r\n        Math0x47,\r\n        Math0x48,\r\n        Math0x49,\r\n        Math0x4A,\r\n        Math0x4B,\r\n        Math0x4C,\r\n        Math0x4D,\r\n        Math0x4E,\r\n        Math0x4F,\r\n        // Other errors\r\n        /// 0x50: Received zero reveals\r\n        NoReveals,\r\n        /// 0x51: Insufficient consensus in tally precondition clause\r\n        InsufficientConsensus,\r\n        /// 0x52: Received zero commits\r\n        InsufficientCommits,\r\n        /// 0x53: Generic error during tally execution\r\n        TallyExecution,\r\n        /// Unallocated\r\n        OtherError0x54,\r\n        OtherError0x55,\r\n        OtherError0x56,\r\n        OtherError0x57,\r\n        OtherError0x58,\r\n        OtherError0x59,\r\n        OtherError0x5A,\r\n        OtherError0x5B,\r\n        OtherError0x5C,\r\n        OtherError0x5D,\r\n        OtherError0x5E,\r\n        OtherError0x5F,\r\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\r\n        MalformedReveal,\r\n        /// Unallocated\r\n        OtherError0x61,\r\n        OtherError0x62,\r\n        OtherError0x63,\r\n        OtherError0x64,\r\n        OtherError0x65,\r\n        OtherError0x66,\r\n        OtherError0x67,\r\n        OtherError0x68,\r\n        OtherError0x69,\r\n        OtherError0x6A,\r\n        OtherError0x6B,\r\n        OtherError0x6C,\r\n        OtherError0x6D,\r\n        OtherError0x6E,\r\n        OtherError0x6F,\r\n        // Access errors\r\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\r\n        ArrayIndexOutOfBounds,\r\n        /// 0x71: Tried to access a value from a map using a key that does not exist\r\n        MapKeyNotFound,\r\n        /// Unallocated\r\n        OtherError0x72,\r\n        OtherError0x73,\r\n        OtherError0x74,\r\n        OtherError0x75,\r\n        OtherError0x76,\r\n        OtherError0x77,\r\n        OtherError0x78,\r\n        OtherError0x79,\r\n        OtherError0x7A,\r\n        OtherError0x7B,\r\n        OtherError0x7C,\r\n        OtherError0x7D,\r\n        OtherError0x7E,\r\n        OtherError0x7F,\r\n        OtherError0x80,\r\n        OtherError0x81,\r\n        OtherError0x82,\r\n        OtherError0x83,\r\n        OtherError0x84,\r\n        OtherError0x85,\r\n        OtherError0x86,\r\n        OtherError0x87,\r\n        OtherError0x88,\r\n        OtherError0x89,\r\n        OtherError0x8A,\r\n        OtherError0x8B,\r\n        OtherError0x8C,\r\n        OtherError0x8D,\r\n        OtherError0x8E,\r\n        OtherError0x8F,\r\n        OtherError0x90,\r\n        OtherError0x91,\r\n        OtherError0x92,\r\n        OtherError0x93,\r\n        OtherError0x94,\r\n        OtherError0x95,\r\n        OtherError0x96,\r\n        OtherError0x97,\r\n        OtherError0x98,\r\n        OtherError0x99,\r\n        OtherError0x9A,\r\n        OtherError0x9B,\r\n        OtherError0x9C,\r\n        OtherError0x9D,\r\n        OtherError0x9E,\r\n        OtherError0x9F,\r\n        OtherError0xA0,\r\n        OtherError0xA1,\r\n        OtherError0xA2,\r\n        OtherError0xA3,\r\n        OtherError0xA4,\r\n        OtherError0xA5,\r\n        OtherError0xA6,\r\n        OtherError0xA7,\r\n        OtherError0xA8,\r\n        OtherError0xA9,\r\n        OtherError0xAA,\r\n        OtherError0xAB,\r\n        OtherError0xAC,\r\n        OtherError0xAD,\r\n        OtherError0xAE,\r\n        OtherError0xAF,\r\n        OtherError0xB0,\r\n        OtherError0xB1,\r\n        OtherError0xB2,\r\n        OtherError0xB3,\r\n        OtherError0xB4,\r\n        OtherError0xB5,\r\n        OtherError0xB6,\r\n        OtherError0xB7,\r\n        OtherError0xB8,\r\n        OtherError0xB9,\r\n        OtherError0xBA,\r\n        OtherError0xBB,\r\n        OtherError0xBC,\r\n        OtherError0xBD,\r\n        OtherError0xBE,\r\n        OtherError0xBF,\r\n        OtherError0xC0,\r\n        OtherError0xC1,\r\n        OtherError0xC2,\r\n        OtherError0xC3,\r\n        OtherError0xC4,\r\n        OtherError0xC5,\r\n        OtherError0xC6,\r\n        OtherError0xC7,\r\n        OtherError0xC8,\r\n        OtherError0xC9,\r\n        OtherError0xCA,\r\n        OtherError0xCB,\r\n        OtherError0xCC,\r\n        OtherError0xCD,\r\n        OtherError0xCE,\r\n        OtherError0xCF,\r\n        OtherError0xD0,\r\n        OtherError0xD1,\r\n        OtherError0xD2,\r\n        OtherError0xD3,\r\n        OtherError0xD4,\r\n        OtherError0xD5,\r\n        OtherError0xD6,\r\n        OtherError0xD7,\r\n        OtherError0xD8,\r\n        OtherError0xD9,\r\n        OtherError0xDA,\r\n        OtherError0xDB,\r\n        OtherError0xDC,\r\n        OtherError0xDD,\r\n        OtherError0xDE,\r\n        OtherError0xDF,\r\n        // Bridge errors: errors that only belong in inter-client communication\r\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\r\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\r\n        /// are never included into blocks and therefore never get a Tally in response.\r\n        BridgeMalformedRequest,\r\n        /// 0xE1: Witnesses exceeds 100\r\n        BridgePoorIncentives,\r\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\r\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\r\n        BridgeOversizedResult,\r\n        /// Unallocated\r\n        OtherError0xE3,\r\n        OtherError0xE4,\r\n        OtherError0xE5,\r\n        OtherError0xE6,\r\n        OtherError0xE7,\r\n        OtherError0xE8,\r\n        OtherError0xE9,\r\n        OtherError0xEA,\r\n        OtherError0xEB,\r\n        OtherError0xEC,\r\n        OtherError0xED,\r\n        OtherError0xEE,\r\n        OtherError0xEF,\r\n        OtherError0xF0,\r\n        OtherError0xF1,\r\n        OtherError0xF2,\r\n        OtherError0xF3,\r\n        OtherError0xF4,\r\n        OtherError0xF5,\r\n        OtherError0xF6,\r\n        OtherError0xF7,\r\n        OtherError0xF8,\r\n        OtherError0xF9,\r\n        OtherError0xFA,\r\n        OtherError0xFB,\r\n        OtherError0xFC,\r\n        OtherError0xFD,\r\n        OtherError0xFE,\r\n        // This should not exist:\r\n        /// 0xFF: Some tally error is not intercepted but should\r\n        UnhandledIntercept\r\n    }\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardRequestor.sol\r\n/// @title Witnet Requestor Interface\r\n/// @notice It defines how to interact with the Witnet Request Board in order to:\r\n///   - request the execution of Witnet Radon scripts (data request);\r\n///   - upgrade the resolution reward of any previously posted request, in case gas price raises in mainnet;\r\n///   - read the result of any previously posted request, eventually reported by the Witnet DON.\r\n///   - remove from storage all data related to past and solved data requests, and results.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardRequestor {\r\n    /// Retrieves a copy of all Witnet-provided data related to a previously posted request, removing the whole query from the WRB storage.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status, or called from an address different to\r\n    /// @dev the one that actually posted the given request.\r\n    /// @param _queryId The unique query identifier.\r\n    function deleteQuery(uint256 _queryId) external returns (Witnet.Response memory);\r\n\r\n    /// Requests the execution of the given Witnet Data Request in expectation that it will be relayed and solved by the Witnet DON.\r\n    /// A reward amount is escrowed by the Witnet Request Board that will be transferred to the reporter who relays back the Witnet-provided \r\n    /// result to this request.\r\n    /// @dev Fails if:\r\n    /// @dev - provided reward is too low.\r\n    /// @dev - provided script is zero address.\r\n    /// @dev - provided script bytecode is empty.\r\n    /// @param _addr The address of the IWitnetRequest contract that can provide the actual Data Request bytecode.\r\n    /// @return _queryId An unique query identifier.\r\n    function postRequest(IWitnetRequest _addr) external payable returns (uint256 _queryId);\r\n\r\n    /// Increments the reward of a previously posted request by adding the transaction value to it.\r\n    /// @dev Updates request `gasPrice` in case this method is called with a higher \r\n    /// @dev gas price value than the one used in previous calls to `postRequest` or\r\n    /// @dev `upgradeReward`. \r\n    /// @dev Fails if the `_queryId` is not in 'Posted' status.\r\n    /// @dev Fails also in case the request `gasPrice` is increased, and the new \r\n    /// @dev reward value gets below new recalculated threshold. \r\n    /// @param _queryId The unique query identifier.\r\n    function upgradeReward(uint256 _queryId) external payable;\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardView.sol\r\n/// @title Witnet Request Board info interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardView {\r\n    /// Estimates the amount of reward we need to insert for a given gas price.\r\n    /// @param _gasPrice The gas price for which we need to calculate the rewards.\r\n    function estimateReward(uint256 _gasPrice) external view returns (uint256);\r\n\r\n    /// Returns next query id to be generated by the Witnet Request Board.\r\n    function getNextQueryId() external view returns (uint256);\r\n\r\n    /// Gets the whole Query data contents, if any, no matter its current status.\r\n    function getQueryData(uint256 _queryId) external view returns (Witnet.Query memory);\r\n\r\n    /// Gets current status of given query.\r\n    function getQueryStatus(uint256 _queryId) external view returns (Witnet.QueryStatus);\r\n\r\n    /// Retrieves the whole `Witnet.Request` record referred to a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequest(uint256 _queryId) external view returns (Witnet.Request memory);\r\n\r\n    /// Retrieves the serialized bytecode of a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestBytecode(uint256 _queryId) external view returns (bytes memory);\r\n\r\n    /// Retrieves the gas price that any assigned reporter will have to pay when reporting result \r\n    /// to the referred query.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestGasPrice(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the reward currently set for the referred query.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestReward(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the whole `Witnet.Response` record referred to a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponse(uint256 _queryId) external view returns (Witnet.Response memory);\r\n\r\n    /// Retrieves the hash of the Witnet transaction hash that actually solved the referred query.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseDrTxHash(uint256 _queryId) external view returns (bytes32);    \r\n\r\n    /// Retrieves the address that reported the result to a previously-posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseReporter(uint256 _queryId) external view returns (address);\r\n\r\n    /// Retrieves the Witnet-provided CBOR-bytes result of a previously posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseResult(uint256 _queryId) external view returns (Witnet.Result memory);\r\n\r\n    /// Retrieves the timestamp in which the result to the referred query was solved by the Witnet DON.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseTimestamp(uint256 _queryId) external view returns (uint256);\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestParser.sol\r\n/// @title The Witnet interface for decoding Witnet-provided request to Data Requests.\r\n/// This interface exposes functions to check for the success/failure of\r\n/// a Witnet-provided result, as well as to parse and convert result into\r\n/// Solidity types suitable to the application level. \r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestParser {\r\n\r\n    /// Decode raw CBOR bytes into a Witnet.Result instance.\r\n    /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborBytes(bytes memory _cborBytes) external pure returns (Witnet.Result memory);\r\n\r\n    /// Decode a CBOR value into a Witnet.Result instance.\r\n    /// @param _cborValue An instance of `Witnet.CBOR`.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborValue(Witnet.CBOR memory _cborValue) external pure returns (Witnet.Result memory);\r\n\r\n    /// Tell if a Witnet.Result is successful.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if successful, `false` if errored.\r\n    function isOk(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Tell if a Witnet.Result is errored.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if errored, `false` if successful.\r\n    function isError(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a bytes value from a Witnet.Result as a `bytes` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bytes` decoded from the Witnet.Result.\r\n    function asBytes(Witnet.Result memory _result) external pure returns (bytes memory);\r\n\r\n    /// Decode an error code from a Witnet.Result as a member of `Witnet.ErrorCodes`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `CBORValue.Error memory` decoded from the Witnet.Result.\r\n    function asErrorCode(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes);\r\n\r\n\r\n    /// Generate a suitable error message for a member of `Witnet.ErrorCodes` and its corresponding arguments.\r\n    /// @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return A tuple containing the `CBORValue.Error memory` decoded from the `Witnet.Result`, plus a loggable error message.\r\n    function asErrorMessage(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes, string memory);\r\n\r\n    /// Decode a raw error from a `Witnet.Result` as a `uint64[]`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `uint64[]` raw error as decoded from the `Witnet.Result`.\r\n    function asRawError(Witnet.Result memory _result) external pure returns(uint64[] memory);\r\n\r\n    /// Decode a boolean value from a Witnet.Result as an `bool` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bool` decoded from the Witnet.Result.\r\n    function asBool(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a fixed16 (half-precision) numeric value from a Witnet.Result as an `int32` value.\r\n    /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\r\n    /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\r\n    /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asFixed16(Witnet.Result memory _result) external pure returns (int32);\r\n\r\n    /// Decode an array of fixed16 values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asFixed16Array(Witnet.Result memory _result) external pure returns (int32[] memory);\r\n\r\n    /// Decode a integer numeric value from a Witnet.Result as an `int128` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asInt128(Witnet.Result memory _result) external pure returns (int128);\r\n\r\n    /// Decode an array of integer numeric values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asInt128Array(Witnet.Result memory _result) external pure returns (int128[] memory);\r\n\r\n    /// Decode a string value from a Witnet.Result as a `string` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string` decoded from the Witnet.Result.\r\n    function asString(Witnet.Result memory _result) external pure returns (string memory);\r\n\r\n    /// Decode an array of string values from a Witnet.Result as a `string[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string[]` decoded from the Witnet.Result.\r\n    function asStringArray(Witnet.Result memory _result) external pure returns (string[] memory);\r\n\r\n    /// Decode a natural numeric value from a Witnet.Result as a `uint64` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64` decoded from the Witnet.Result.\r\n    function asUint64(Witnet.Result memory _result) external pure returns(uint64);\r\n\r\n    /// Decode an array of natural numeric values from a Witnet.Result as a `uint64[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64[]` decoded from the Witnet.Result.\r\n    function asUint64Array(Witnet.Result memory _result) external pure returns (uint64[] memory);\r\n\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\WitnetRequestBoard.sol\r\n/// @title Witnet Request Board functionality base contract.\r\n/// @author The Witnet Foundation.\r\nabstract contract WitnetRequestBoard is\r\n    IWitnetRequestBoardEvents,\r\n    IWitnetRequestBoardReporter,\r\n    IWitnetRequestBoardRequestor,\r\n    IWitnetRequestBoardView,\r\n    IWitnetRequestParser\r\n{\r\n    receive() external payable {\r\n        revert(\"WitnetRequestBoard: no transfers accepted\");\r\n    }\r\n}\r\n// File: witnet-solidity-bridge\\contracts\\UsingWitnet.sol\r\n/// @title The UsingWitnet contract\r\n/// @dev Witnet-aware contracts can inherit from this contract in order to interact with Witnet.\r\n/// @author The Witnet Foundation.\r\nabstract contract UsingWitnet {\r\n\r\n    WitnetRequestBoard public immutable witnet;\r\n\r\n    /// Include an address to specify the WitnetRequestBoard entry point address.\r\n    /// @param _wrb The WitnetRequestBoard entry point address.\r\n    constructor(WitnetRequestBoard _wrb)\r\n    {\r\n        require(address(_wrb) != address(0), \"UsingWitnet: zero address\");\r\n        witnet = _wrb;\r\n    }\r\n\r\n    /// Provides a convenient way for client contracts extending this to block the execution of the main logic of the\r\n    /// contract until a particular request has been successfully solved and reported by Witnet.\r\n    modifier witnetRequestSolved(uint256 _id) {\r\n        require(\r\n                _witnetCheckResultAvailability(_id),\r\n                \"UsingWitnet: request not solved\"\r\n            );\r\n        _;\r\n    }\r\n\r\n    /// Check if a data request has been solved and reported by Witnet.\r\n    /// @dev Contracts depending on Witnet should not start their main business logic (e.g. receiving value from third.\r\n    /// parties) before this method returns `true`.\r\n    /// @param _id The unique identifier of a previously posted data request.\r\n    /// @return A boolean telling if the request has been already resolved or not. Returns `false` also, if the result was deleted.\r\n    function _witnetCheckResultAvailability(uint256 _id)\r\n        internal view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return witnet.getQueryStatus(_id) == Witnet.QueryStatus.Reported;\r\n    }\r\n\r\n    /// Estimate the reward amount.\r\n    /// @param _gasPrice The gas price for which we want to retrieve the estimation.\r\n    /// @return The reward to be included when either posting a new request, or upgrading the reward of a previously posted one.\r\n    function _witnetEstimateReward(uint256 _gasPrice)\r\n        internal view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return witnet.estimateReward(_gasPrice);\r\n    }\r\n\r\n    /// Estimates the reward amount, considering current transaction gas price.\r\n    /// @return The reward to be included when either posting a new request, or upgrading the reward of a previously posted one.\r\n    function _witnetEstimateReward()\r\n        internal view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return witnet.estimateReward(tx.gasprice);\r\n    }\r\n\r\n    /// Send a new request to the Witnet network with transaction value as a reward.\r\n    /// @param _request An instance of `IWitnetRequest` contract.\r\n    /// @return _id Sequential identifier for the request included in the WitnetRequestBoard.\r\n    /// @return _reward Current reward amount escrowed by the WRB until a result gets reported.\r\n    function _witnetPostRequest(IWitnetRequest _request)\r\n        internal\r\n        virtual\r\n        returns (uint256 _id, uint256 _reward)\r\n    {\r\n        _reward = _witnetEstimateReward();\r\n        _id = witnet.postRequest{value: _reward}(_request);\r\n    }\r\n\r\n    /// Upgrade the reward for a previously posted request.\r\n    /// @dev Call to `upgradeReward` function in the WitnetRequestBoard contract.\r\n    /// @param _id The unique identifier of a request that has been previously sent to the WitnetRequestBoard.\r\n    /// @return Amount in which the reward has been increased.\r\n    function _witnetUpgradeReward(uint256 _id)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        uint256 _currentReward = witnet.readRequestReward(_id);        \r\n        uint256 _newReward = _witnetEstimateReward();\r\n        uint256 _fundsToAdd = 0;\r\n        if (_newReward > _currentReward) {\r\n            _fundsToAdd = (_newReward - _currentReward);\r\n        }\r\n        witnet.upgradeReward{value: _fundsToAdd}(_id); // Let Request.gasPrice be updated\r\n        return _fundsToAdd;\r\n    }\r\n\r\n    /// Read the Witnet-provided result to a previously posted request.\r\n    /// @param _id The unique identifier of a request that was posted to Witnet.\r\n    /// @return The result of the request as an instance of `Witnet.Result`.\r\n    function _witnetReadResult(uint256 _id)\r\n        internal view\r\n        virtual\r\n        returns (Witnet.Result memory)\r\n    {\r\n        return witnet.readResponseResult(_id);\r\n    }\r\n\r\n    /// Retrieves copy of all response data related to a previously posted request, removing the whole query from storage.\r\n    /// @param _id The unique identifier of a previously posted request.\r\n    /// @return The Witnet-provided result to the request.\r\n    function _witnetDeleteQuery(uint256 _id)\r\n        internal\r\n        virtual\r\n        returns (Witnet.Response memory)\r\n    {\r\n        return witnet.deleteQuery(_id);\r\n    }\r\n\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\requests\\WitnetRequestBase.sol\r\nabstract contract WitnetRequestBase\r\n    is\r\n        IWitnetRequest\r\n{\r\n    /// Contains a well-formed Witnet Data Request, encoded using Protocol Buffers.\r\n    bytes public override bytecode;\r\n\r\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\r\n    bytes32 public override hash;\r\n}\r\n// File: witnet-solidity-bridge\\contracts\\requests\\WitnetRequest.sol\r\ncontract WitnetRequest\r\n    is\r\n        WitnetRequestBase\r\n{\r\n    using Witnet for bytes;\r\n    constructor(bytes memory _bytecode) {\r\n        bytecode = _bytecode;\r\n        hash = _bytecode.hash();\r\n    }\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Strings.sol\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\ERC721.sol\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: @openzeppelin\\contracts\\security\\ReentrancyGuard.sol\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: @openzeppelin\\contracts\\utils\\Counters.sol\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n// File: contracts\\libs\\Witmons.sol\r\n/// @title Witmons Library: data model and helper functions\r\n/// @author Otherplane Labs, 2021.\r\nlibrary Witmons {\r\n\r\n    struct State {\r\n        Parameters params;\r\n        address decorator;\r\n        IWitnetRequest witnetRNG;\r\n        uint256 witnetQueryId;\r\n        bytes32 witnetRandomness;\r\n        uint256 hatchingBlock;        \r\n        Counters.Counter totalSupply;\r\n        mapping (/* eggIndex => Creature */ uint256 => Creature) creatures;\r\n        mapping (/* tokenId  => eggIndex */ uint256 => uint256) eggIndex_;\r\n    }\r\n\r\n    struct Parameters {\r\n        address signator;\r\n        uint8[] percentileMarks;      \r\n        uint256 expirationBlocks;\r\n    }\r\n\r\n    enum Status {\r\n        Batching,\r\n        Randomizing,\r\n        Hatching,\r\n        Freezed\r\n    }\r\n\r\n    struct Creature {\r\n        uint256 tokenId;   \r\n        uint256 eggBirth;\r\n        uint256 eggIndex;\r\n        uint256 eggScore;\r\n        uint256 eggRanking;\r\n        bytes32 eggPhenotype;\r\n        CreatureCategory eggCategory;\r\n    }\r\n\r\n    enum CreatureCategory {\r\n        Legendary,  // 0\r\n        Rare,       // 1\r\n        Common      // 2\r\n    }\r\n\r\n    enum CreatureStatus {\r\n        Inexistent, // 0\r\n        Incubating, // 1\r\n        Hatching,   // 2\r\n        Alive,      // 3\r\n        Freezed     // 4\r\n    }\r\n\r\n    /// Calculate creature category.\r\n    function creatureCategory(State storage _self, uint8 _percentile100)  \r\n        internal view\r\n        returns (CreatureCategory)\r\n    {\r\n        uint8 _i; uint8 _cumuled;\r\n        for (; _i < _self.params.percentileMarks.length; _i ++) {\r\n            _cumuled += _self.params.percentileMarks[_i];\r\n            if (_percentile100 <= _cumuled) {\r\n                break;\r\n            }\r\n        }\r\n        return CreatureCategory(_i);\r\n    }\r\n\r\n    /// Gets tender's current status.\r\n    function status(State storage self)\r\n        internal view\r\n        returns (Status)\r\n    {\r\n        if (self.witnetRandomness != bytes32(0)) {\r\n            return (block.number > self.hatchingBlock + self.params.expirationBlocks)\r\n                ? Status.Freezed\r\n                : Status.Hatching;\r\n        } else if (self.witnetQueryId > 0) {\r\n            return Status.Randomizing;\r\n        } else {\r\n            return Status.Batching;\r\n        }\r\n    }\r\n\r\n    /// @dev Produces revert message when tender is not in expected status.\r\n    function statusRevertMessage(Status _status)\r\n        internal pure\r\n        returns (string memory)\r\n    {\r\n        if (_status == Status.Freezed) {\r\n            return \"Witmons: not in Freezed status\";\r\n        } else if (_status == Status.Batching) {\r\n            return \"Witmons: not in Batching status\";\r\n        } else if (_status == Status.Randomizing) {\r\n            return \"Witmons: not in Randomizing status\";\r\n        } else if (_status == Status.Hatching) {\r\n            return \"Witmons: not in Hatching status\";\r\n        } else {\r\n            return \"Witmons: bad mood\";\r\n        }\r\n    }\r\n\r\n    /// Returns index of Most Significant Bit of given number, applying De Bruijn O(1) algorithm.\r\n    function msbDeBruijn32(uint32 _v)\r\n        internal pure\r\n        returns (uint8)\r\n    {\r\n        uint8[32] memory _bitPosition = [\r\n                0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30,\r\n                8, 12, 20, 28, 15, 17, 24, 7, 19, 27, 23, 6, 26, 5, 4, 31\r\n            ];\r\n        _v |= _v >> 1;\r\n        _v |= _v >> 2;\r\n        _v |= _v >> 4;\r\n        _v |= _v >> 8;\r\n        _v |= _v >> 16;\r\n        return _bitPosition[\r\n            uint32(_v * uint256(0x07c4acdd)) >> 27\r\n        ];\r\n    }\r\n\r\n    /// Generates pseudo-random number uniformly distributed in range [0 .. _range).\r\n    function randomUint8(bytes32 _seed, uint256 _index, uint8 _range)\r\n        internal pure\r\n        returns (uint8)\r\n    {\r\n        assert(_range > 0);\r\n        uint8 _flagBits = uint8(255 - msbDeBruijn32(uint32(_range)));\r\n        uint256 _number = uint256(keccak256(abi.encode(_seed, _index))) & uint256(2 ** _flagBits - 1);\r\n        return uint8((_number * _range) >> _flagBits); \r\n    }\r\n\r\n    /// Recovers address from hash and signature.\r\n    function recoverAddr(bytes32 _hash, bytes memory _signature)\r\n        internal pure\r\n        returns (address)\r\n    {\r\n        if (_signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(_signature, 0x20))\r\n            s := mload(add(_signature, 0x40))\r\n            v := byte(0, mload(add(_signature, 0x60)))\r\n        }\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n        return ecrecover(_hash, v, r, s);\r\n    }    \r\n}\r\n// File: contracts\\interfaces\\IWitmonDecorator.sol\r\n/// @title Witty Creatures 2.0 Decorating interface.\r\n/// @author Otherplane Labs, 2021.\r\ninterface IWitmonDecorator {\r\n    function baseURI() external view returns (string memory);\r\n    function getCreatureImage(Witmons.Creature memory) external view returns (string memory);\r\n    function getCreatureMetadata(Witmons.Creature memory) external view returns (string memory);\r\n}\r\n// File: contracts\\interfaces\\IWitmonAdmin.sol\r\n/// @title Witty Creatures 2.0 Token only-owner interface.\r\n/// @author Otherplane Labs, 2021.\r\ninterface IWitmonAdmin {\r\n    /// Change token/creature decorator.\r\n    /// @param _decorator Decorating logic contract producing a creature's metadata, and picture.\r\n    function setDecorator(IWitmonDecorator _decorator) external;\r\n\r\n    /// Change batch parameters. Only possible while in 'Batching' status.\r\n    /// @param _signator Externally-owned account authorize to sign egg's info before minting.\r\n    /// @param _percentileMarks Creature-category ordered percentile marks (Legendary first).\r\n    /// @param _expirationBlocks Number of blocks after Witnet randomness is generated, \r\n    /// during which creatures may be minted.\r\n    function setParameters(\r\n        address _signator,\r\n        uint8[] calldata _percentileMarks,\r\n        uint256 _expirationBlocks\r\n    ) external;\r\n\r\n    /// Stops batching, which means: (a) parameters cannot change anymore, and (b) a \r\n    /// random number will requested to the Witnet Decentralized Oracle Network.\r\n    /// @dev While request is being attended, tender will remain in 'Randomizing' status.\r\n    function stopBatching() external payable;\r\n\r\n    /// Starts hatching, which means that minting of creatures will start to be possible,\r\n    /// until the hatching period expires (see `_hatchingExpirationBlocks`).\r\n    /// @dev During the hatching period the tender will remain in 'Hatching status'. Once the\r\n    /// @dev hatching period expires, tender status will automatically change to 'Freezed'.\r\n    function startHatching() external;\r\n}\r\n// File: contracts\\interfaces\\IWitmonEvents.sol\r\n/// @title Witty Creatures 2.0 Token events.\r\n/// @author Otherplane Labs, 2021.\r\ninterface IWitmonEvents {\r\n    event BatchParameters(\r\n        address signator,\r\n        uint8[] percentileMarks,\r\n        uint256 expirationBlocks\r\n    );\r\n    event DecoratorSet(IWitmonDecorator decorator);\r\n    event WitnetResult(bytes32 randomness);\r\n    event WitnetError(string reason);\r\n    event NewCreature(uint256 eggIndex, uint256 tokenId);\r\n}\r\n// File: contracts\\interfaces\\IWitmonSurrogates.sol\r\n/// @title Witty Creatures 2.0 Token surrogating interface.\r\n/// @author Otherplane Labs, 2021.\r\ninterface IWitmonSurrogates {\r\n    function mintCreature(\r\n        address _eggOwner,\r\n        uint256 _eggIndex,\r\n        uint256 _eggScore,\r\n        uint256 _eggRanking,\r\n        uint256 _totalClaimedEggs,\r\n        bytes calldata _signature\r\n    ) external;\r\n    function previewCreatureImage(\r\n        address _eggOwner,\r\n        uint256 _eggIndex,\r\n        uint256 _eggScore,\r\n        uint256 _eggRanking,\r\n        uint256 _totalClaimedEggs,\r\n        bytes calldata _signature\r\n    ) external view returns (string memory);\r\n}\r\n// File: contracts\\interfaces\\IWitmonView.sol\r\n/// @title Witty Creatures 2.0 Token viewing interface.\r\n/// @author Otherplane Labs, 2021.\r\ninterface IWitmonView {\r\n    function getCreatureData(uint256 _eggIndex) external view returns (Witmons.Creature memory);\r\n    function getCreatureImage(uint256 _eggIndex) external view returns (string memory);\r\n    function getCreatureStatus(uint256 _eggIndex) external view returns (Witmons.CreatureStatus);  \r\n    function getDecorator() external view returns (IWitmonDecorator);\r\n    function getParameters() external view returns (Witmons.Parameters memory);\r\n    function getTokenEggIndex(uint256 _tokenId) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256 _totalSupply);\r\n    function getStatus() external view returns (Witmons.Status);\r\n}\r\n// File: contracts\\WitmonERC721.sol\r\n/// @title Witty Creatures 2.0 - ERC721 Token contract\r\n/// @author Otherplane Labs, 2021.\r\ncontract WitmonERC721\r\n    is\r\n        ERC721,\r\n        Ownable,\r\n        ReentrancyGuard,\r\n        UsingWitnet,\r\n        IWitmonAdmin,\r\n        IWitmonEvents,\r\n        IWitmonSurrogates,\r\n        IWitmonView\r\n{\r\n    using Counters for Counters.Counter;\r\n    using Strings for bytes32;\r\n    using Strings for uint256;\r\n    using Witmons for Witmons.State;\r\n\r\n    Witmons.State internal _state;\r\n\r\n    modifier inStatus(Witmons.Status _status) {\r\n        require(\r\n            _state.status() == _status,\r\n            Witmons.statusRevertMessage(_status)\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier tokenExists(uint256 _tokenId) {\r\n        require(\r\n            _exists(_tokenId),\r\n            \"WitmonERC721: inexistent token\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n            WitnetRequestBoard _witnet,\r\n            IWitmonDecorator _decorator,\r\n            string memory _name,\r\n            string memory _symbol,\r\n            address _signator,\r\n            uint8[] memory _percentileMarks,\r\n            uint256 _expirationBlocks\r\n        )\r\n        UsingWitnet(_witnet)\r\n        ERC721(_name, _symbol)\r\n    {\r\n        setDecorator(_decorator);\r\n        setParameters(\r\n            _signator,\r\n            _percentileMarks,\r\n            _expirationBlocks\r\n        );\r\n        _state.witnetRNG = new WitnetRequest(hex\"0a0f120508021a01801a0210022202100b10e807180a200a2833308094ebdc03\");\r\n    }\r\n\r\n    // ========================================================================\r\n    // --- 'ERC721Metadata' overriden functions -------------------------------\r\n\r\n    \r\n    function baseURI()\r\n        public view\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n        return IWitmonDecorator(_state.decorator).baseURI();\r\n    }\r\n    \r\n    function metadata(uint256 _tokenId)\r\n        external\r\n        virtual view\r\n        tokenExists(_tokenId)\r\n        returns (string memory)\r\n    {\r\n        uint256 _eggIndex = _state.eggIndex_[_tokenId];\r\n        Witmons.Creature memory _creature = _state.creatures[_eggIndex];\r\n        assert(_tokenId == _creature.tokenId);\r\n        return IWitmonDecorator(_state.decorator).getCreatureMetadata(_creature);\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId)\r\n        public view\r\n        virtual override\r\n        tokenExists(_tokenId)\r\n        returns (string memory)\r\n    {\r\n        return string(abi.encodePacked(\r\n            baseURI(),\r\n            _tokenId.toString()\r\n        ));\r\n    }\r\n\r\n    // ========================================================================\r\n    // --- Implementation of 'IWitmonAdmin' -----------------------------------\r\n\r\n    /// Change token/creature decorator.\r\n    /// @param _decorator Decorating logic contract producing a creature's metadata, and picture.\r\n    function setDecorator(IWitmonDecorator _decorator)\r\n        public\r\n        virtual override\r\n        onlyOwner\r\n        // inState(Witmons.Status.Batching)\r\n    {\r\n        require(address(_decorator) != address(0), \"WitmonERC721: no decorator\");\r\n        _state.decorator = address(_decorator);\r\n        emit DecoratorSet(_decorator);\r\n    }\r\n\r\n    /// Change batch parameters. Only possible while in 'Batching' status.\r\n    /// @param _signator Externally-owned account authorize to sign egg's info before minting.\r\n    /// @param _percentileMarks Creature-category ordered percentile marks (Legendary first).\r\n    /// @param _expirationBlocks Number of blocks after Witnet randomness is generated, \r\n    /// during which creatures may be minted.\r\n    function setParameters(\r\n            address _signator,\r\n            uint8[] memory _percentileMarks,\r\n            uint256 _expirationBlocks\r\n        )\r\n        public\r\n        virtual override\r\n        onlyOwner\r\n        inStatus(Witmons.Status.Batching)\r\n    {\r\n        require(_signator != address(0), \"WitmonERC721: no signator\");\r\n        require(_percentileMarks.length == uint8(Witmons.CreatureCategory.Common) + 1, \"WitmonERC721: bad percentile marks\");\r\n        _state.params.percentileMarks = new uint8[](_percentileMarks.length);\r\n        uint8 _checkSum; \r\n        for (uint8 _i = 0; _i < _percentileMarks.length; _i ++) {\r\n            uint8 _mark = _percentileMarks[_i];\r\n            _state.params.percentileMarks[_i] = _mark;\r\n            _checkSum += _mark;\r\n        }\r\n        require(_checkSum == 100, \"WitmonERC721: bad percentile checksum\");\r\n        \r\n        _state.params.signator = _signator;\r\n        _state.params.expirationBlocks = _expirationBlocks;\r\n        \r\n        emit BatchParameters(\r\n            _signator,\r\n            _percentileMarks,\r\n            _expirationBlocks\r\n        );\r\n    }\r\n\r\n    /// Stops batching, which means: (a) parameters cannot change anymore, and (b) a \r\n    /// random number will requested to the Witnet Decentralized Oracle Network.\r\n    /// @dev While request is being attended, tender will remain in 'Randomizing' status.\r\n    function stopBatching()\r\n        external payable\r\n        virtual override\r\n        nonReentrant\r\n        onlyOwner\r\n        inStatus(Witmons.Status.Batching)\r\n    {   \r\n        // Send the request to Witnet and store the ID for later retrieval of the result:\r\n        uint256 _witnetReward;\r\n        (_state.witnetQueryId, _witnetReward) = _witnetPostRequest(_state.witnetRNG);\r\n\r\n        // Transfers back unused funds:\r\n        if (msg.value > _witnetReward) {\r\n            payable(msg.sender).transfer(msg.value - _witnetReward);\r\n        }\r\n    }\r\n\r\n    /// Starts hatching, which means that minting of creatures will start to be possible,\r\n    /// until the hatching period expires (see `_state.expirationBlocks`).\r\n    /// @dev During the hatching period the tender will remain in 'Hatching status'. Once the\r\n    /// @dev hatching period expires, tender status will automatically change to 'Freezed'.\r\n    function startHatching()\r\n        external\r\n        virtual override\r\n        onlyOwner\r\n        inStatus(Witmons.Status.Randomizing)\r\n    {\r\n        uint _queryId = _state.witnetQueryId;\r\n        require(\r\n            _witnetCheckResultAvailability(_queryId),\r\n            \"WitmonERC721: randomness not yet solved\"\r\n        );\r\n        Witnet.Result memory _result = witnet.readResponseResult(_queryId);\r\n        if (_result.success) {\r\n            bytes32 _randomness = _bytesToBytes32(witnet.asBytes(_result));\r\n            _state.hatchingBlock = block.number;\r\n            _state.witnetRandomness = _randomness;\r\n            emit WitnetResult(_randomness);\r\n        } else {\r\n            _state.witnetQueryId = 0;\r\n            string memory _errorMessage;\r\n            // Try to read the value as an error message, catch error bytes if read fails\r\n            try witnet.asErrorMessage(_result)\r\n                returns (Witnet.ErrorCodes, string memory e)\r\n            {\r\n                _errorMessage = e;\r\n            }\r\n            catch (bytes memory _errorBytes) {\r\n                _errorMessage = string(_errorBytes);\r\n            }\r\n            emit WitnetError(_errorMessage);\r\n        }\r\n    }\r\n\r\n    // ========================================================================\r\n    // --- Implementation of 'IWitmonSurrogates' -------------------------------\r\n\r\n    function mintCreature(\r\n            address _eggOwner,\r\n            uint256 _eggIndex,            \r\n            uint256 _eggRanking,\r\n            uint256 _eggScore,\r\n            uint256 _totalClaimedEggs,\r\n            bytes calldata _signature\r\n        )\r\n        external\r\n        virtual override\r\n        nonReentrant\r\n        inStatus(Witmons.Status.Hatching)\r\n    {\r\n        _verifySignatorSignature(\r\n            _eggOwner,\r\n            _eggIndex,\r\n            _eggRanking,\r\n            _eggScore,\r\n            _totalClaimedEggs,\r\n            _signature\r\n        );\r\n\r\n        // Verify not already minted:\r\n        require(\r\n            _state.creatures[_eggIndex].tokenId == 0,\r\n            \"WitmonERC721: already minted\"\r\n        );\r\n\r\n        // Increment token supply:\r\n        _state.totalSupply.increment();\r\n        uint256 _tokenId = _state.totalSupply.current();\r\n\r\n        // Fulfill creature data:\r\n        Witmons.Creature memory _creature = _mintCreature(\r\n            _tokenId,\r\n            block.timestamp, // solhint-disable not-rely-on-time\r\n            _eggIndex,\r\n            _eggRanking,\r\n            _eggScore,\r\n            _totalClaimedEggs,\r\n            _signature\r\n        );\r\n\r\n        // Write to storage:\r\n        _state.creatures[_eggIndex] = _creature;\t\t\r\n        _state.eggIndex_[_tokenId] = _eggIndex;\r\n\r\n        // Mint the token:\r\n        _safeMint(_eggOwner, _tokenId);\r\n        emit NewCreature(_eggIndex, _tokenId);\r\n    }\r\n\r\n    function previewCreatureImage(\r\n            address _eggOwner,\r\n            uint256 _eggIndex,\r\n            uint256 _eggRanking,\r\n            uint256 _eggScore,\r\n            uint256 _totalClaimedEggs,\r\n            bytes calldata _signature\r\n        )\r\n        external view\r\n        virtual override\r\n        inStatus(Witmons.Status.Hatching)\r\n        returns (string memory)\r\n    {\r\n        _verifySignatorSignature(\r\n            _eggOwner,\r\n            _eggIndex,\r\n            _eggRanking,\r\n            _eggScore,\r\n            _totalClaimedEggs,\r\n            _signature\r\n        );\r\n\r\n        // Preview creature image:\r\n        return IWitmonDecorator(_state.decorator).getCreatureImage(\r\n            _mintCreature(\r\n                0,\r\n                0,\r\n                _eggIndex,                \r\n                _eggRanking,\r\n                _eggScore,\r\n                _totalClaimedEggs,\r\n                _signature\r\n            )\r\n        );\r\n    }\r\n\r\n    // ========================================================================\r\n    // --- Implementation of 'IWitmonView' ------------------------------------\r\n\r\n    function getCreatureData(uint256 _eggIndex)\r\n        public view\r\n        override\r\n        returns (Witmons.Creature memory)\r\n    {\r\n        return _state.creatures[_eggIndex];\r\n    }\r\n\r\n    function getCreatureImage(uint256 _eggIndex)\r\n        public view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            getCreatureStatus(_eggIndex) == Witmons.CreatureStatus.Alive,\r\n            \"WitmonERC721: not alive yet\"\r\n        );\r\n        Witmons.Creature memory _creature = _state.creatures[_eggIndex];\r\n        return IWitmonDecorator(_state.decorator).getCreatureImage(_creature);\r\n    }\r\n\r\n    function getCreatureStatus(uint256 _eggIndex)\r\n        public view\r\n        virtual override\r\n        returns (Witmons.CreatureStatus)\r\n    {\r\n        Witmons.Creature storage _creature = _state.creatures[_eggIndex];\r\n        if (_creature.eggPhenotype != bytes32(0)) {\r\n            return Witmons.CreatureStatus.Alive;\r\n        } else {\r\n            Witmons.Status _tenderStatus = _state.status();\r\n            if (_tenderStatus == Witmons.Status.Hatching) {\r\n                return Witmons.CreatureStatus.Hatching;\r\n            } else if (_tenderStatus == Witmons.Status.Freezed) {\r\n                return Witmons.CreatureStatus.Freezed;\r\n            } else {\r\n                return Witmons.CreatureStatus.Incubating;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDecorator()\r\n        external view\r\n        override\r\n        returns (IWitmonDecorator)\r\n    {\r\n        return IWitmonDecorator(_state.decorator);\r\n    }\r\n\r\n    function getParameters()\r\n        external view\r\n        override\r\n        returns (Witmons.Parameters memory)\r\n    {\r\n        return _state.params;\r\n    }\r\n\r\n    function getTokenEggIndex(uint256 _tokenId)\r\n        external view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _state.eggIndex_[_tokenId];\r\n    }\r\n\r\n    function totalSupply()\r\n        public view\r\n        override\r\n        returns (\r\n            uint256 _totalSupply\r\n        )\r\n    {\r\n        return (\r\n            _state.totalSupply.current()\r\n        );\r\n    }\r\n\r\n    function getStatus()\r\n        public view\r\n        override\r\n        returns (Witmons.Status)\r\n    {\r\n        return _state.status();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // --- INTERNAL VIRTUAL METHODS -------------------------------------------\r\n    // ------------------------------------------------------------------------\r\n\r\n    function _mintCreature(\r\n            uint256 _tokenId,\r\n            uint256 _tokenInception,\r\n            uint256 _eggIndex,\r\n            uint256 _eggRanking,\r\n            uint256 _eggScore,\r\n            uint256 _totalClaimedEggs,\r\n            bytes memory _signature\r\n        )\r\n        internal view\r\n        virtual\r\n        returns (Witmons.Creature memory)\r\n    {\r\n        uint8 _percentile100 = _eggRanking > _totalClaimedEggs\r\n            ? 100 \r\n            : uint8((_eggRanking * 100) / _totalClaimedEggs)\r\n        ;\r\n        return Witmons.Creature({\r\n            tokenId: _tokenId,\r\n            eggBirth: _tokenInception,\r\n            eggCategory: _state.creatureCategory(_percentile100),\r\n            eggIndex: _eggIndex,\r\n            eggScore: _eggScore,\r\n            eggRanking: _eggRanking,\r\n            eggPhenotype: keccak256(abi.encodePacked(\r\n                _signature,\r\n                _state.witnetRandomness\r\n            ))\r\n        });\r\n    }\r\n\r\n    function _verifySignatorSignature(\r\n            address _eggOwner,\r\n            uint256 _eggIndex,\r\n            uint256 _eggRanking,\r\n            uint256 _eggScore,\r\n            uint256 _totalClaimedEggs,\r\n            bytes memory _signature\r\n        )\r\n        internal view\r\n        virtual\r\n    {\r\n        // Verify signator:\r\n        bytes32 _eggHash = keccak256(abi.encodePacked(\r\n            _eggOwner,\r\n            _eggIndex,\r\n            _eggRanking,\r\n            _eggScore,\r\n            _totalClaimedEggs\r\n        ));\r\n        require(\r\n            Witmons.recoverAddr(_eggHash, _signature) == _state.params.signator,\r\n            \"WitmonERC721: bad signature\"\r\n        );\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // --- PRIVATE METHODS ----------------------------------------------------\r\n    // ------------------------------------------------------------------------\r\n\r\n    function _bytesToBytes32(bytes memory _bb)\r\n        private pure\r\n        returns (bytes32 _r)\r\n    {\r\n        uint _len = _bb.length > 32 ? 32 : _bb.length;\r\n        for (uint _i = 0; _i < _len; _i ++) {\r\n            _r |= bytes32(_bb[_i] & 0xff) >> (_i * 8);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract WitnetRequestBoard\",\"name\":\"_witnet\",\"type\":\"address\"},{\"internalType\":\"contract IWitmonDecorator\",\"name\":\"_decorator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_percentileMarks\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_expirationBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"percentileMarks\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlocks\",\"type\":\"uint256\"}],\"name\":\"BatchParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IWitmonDecorator\",\"name\":\"decorator\",\"type\":\"address\"}],\"name\":\"DecoratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewCreature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"WitnetError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"randomness\",\"type\":\"bytes32\"}],\"name\":\"WitnetResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eggIndex\",\"type\":\"uint256\"}],\"name\":\"getCreatureData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggBirth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggRanking\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"eggPhenotype\",\"type\":\"bytes32\"},{\"internalType\":\"enum Witmons.CreatureCategory\",\"name\":\"eggCategory\",\"type\":\"uint8\"}],\"internalType\":\"struct Witmons.Creature\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eggIndex\",\"type\":\"uint256\"}],\"name\":\"getCreatureImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eggIndex\",\"type\":\"uint256\"}],\"name\":\"getCreatureStatus\",\"outputs\":[{\"internalType\":\"enum Witmons.CreatureStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecorator\",\"outputs\":[{\"internalType\":\"contract IWitmonDecorator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"percentileMarks\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct Witmons.Parameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Witmons.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenEggIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eggOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eggRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eggScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintCreature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eggOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eggRanking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eggScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"previewCreatureImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWitmonDecorator\",\"name\":\"_decorator\",\"type\":\"address\"}],\"name\":\"setDecorator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_percentileMarks\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_expirationBlocks\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startHatching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopBatching\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witnet\",\"outputs\":[{\"internalType\":\"contract WitnetRequestBoard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WitmonERC721", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009e4fae1c7ac543a81e4e2a5486a0ddaad8194bda000000000000000000000000109b0c420d2fa7e664e34ce4a570a6953985d64400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001400000000000000000000000008d86bc475bedcb08179c5e6a4d494ebd3b44ea8b0000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000000003157697474792043726561747572657320322e30202d204c6973636f6e2032303231205370656369616c2045646974696f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000957495454593230323100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://afa64dd4911c36a20e08bf01be893479e7d3f2a128131648b5ce5bbbbfb20f28"}