{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: bet.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract BettingContractEth {\r\n    using SafeMath for uint256;\r\n    address public admin;\r\n    uint256 public totalEventsAmount;\r\n    uint256 public numberOfEvents;\r\n    address private adminTax = 0x6D725170dd10eA1b282939e1041e18f1640a4dA4;\r\n\r\n    struct Pools {\r\n        uint256 homeBalances;\r\n        uint256 awayBalances;\r\n        uint256 drawBalances;\r\n        uint256 homeBettors;\r\n        uint256 awayBettors;\r\n        uint256 drawBettors;\r\n        uint256 numberOfPools;\r\n        bool isBettingOpen;\r\n        uint256 winningPool;\r\n        uint256 totalBetAmount;\r\n    }\r\n\r\n    struct BettorData {\r\n        uint256 oddType;\r\n        uint256 amount;\r\n    }\r\n    //which event\r\n    //which oddType\r\n    //amount\r\n    mapping(uint256 => Pools) public BettingPools;\r\n    mapping(address => mapping(uint256 => BettorData)) public userBets;\r\n\r\n    event BetPlaced(\r\n        address indexed user,\r\n        uint256 pool,\r\n        uint256 amount,\r\n        uint256 eventId\r\n    );\r\n    event BettingClosed(uint256 winningPool);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only the admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier bettingOpen(uint256 _eventId) {\r\n        Pools memory Bettingpool = BettingPools[_eventId];\r\n        require(Bettingpool.winningPool == 0, \"Betting Has ended\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    // Function to place bets with ERC20 tokens\r\n    function placeBet(\r\n        uint256 pool,\r\n        uint256 eventId\r\n    ) external payable bettingOpen(eventId) {\r\n        uint256 amount = msg.value;\r\n        require(pool > 0 && pool <= 3, \"Invalid pool number\");\r\n        require(eventId > 0, \"Invalid Events number\");\r\n        require(amount > 0, \"Bet amount must be greater than 0\");\r\n\r\n        totalEventsAmount += amount;\r\n        Pools storage Bettingpool = BettingPools[eventId];\r\n        Bettingpool.totalBetAmount += amount;\r\n        BettorData storage bettor = userBets[msg.sender][eventId];\r\n        if (bettor.oddType > 0) {\r\n            bettor.amount += amount;\r\n            if (pool == 1) {\r\n                Bettingpool.awayBalances += amount;\r\n                Bettingpool.numberOfPools = 3;\r\n            }\r\n            if (pool == 2) {\r\n                Bettingpool.drawBalances += amount;\r\n                Bettingpool.numberOfPools = 3;\r\n            }\r\n            if (pool == 3) {\r\n                Bettingpool.homeBalances += amount;\r\n                Bettingpool.numberOfPools = 3;\r\n            }\r\n        } else {\r\n            bettor.oddType = pool;\r\n            bettor.amount += amount;\r\n            if (pool == 1) {\r\n                Bettingpool.awayBalances += amount;\r\n                Bettingpool.awayBettors += 1;\r\n                Bettingpool.numberOfPools = 3;\r\n            }\r\n            if (pool == 2) {\r\n                Bettingpool.drawBalances += amount;\r\n                Bettingpool.drawBettors += 1;\r\n                Bettingpool.numberOfPools = 3;\r\n            }\r\n            if (pool == 3) {\r\n                Bettingpool.homeBalances += amount;\r\n                Bettingpool.homeBettors += 1;\r\n                Bettingpool.numberOfPools = 3;\r\n            }\r\n        }\r\n\r\n        emit BetPlaced(msg.sender, pool, amount, eventId);\r\n    }\r\n\r\n    function GetPoolBettors(\r\n        uint256 _eventId\r\n    ) public view returns (Pools memory) {\r\n        return BettingPools[_eventId];\r\n    }\r\n\r\n    function closeBetting(\r\n        uint256 _winningPool,\r\n        uint256 _eventId\r\n    ) external onlyAdmin bettingOpen(_eventId) {\r\n        Pools storage Bettingpool = BettingPools[_eventId];\r\n        require(_winningPool > 0 && _winningPool <= 3, \"Invalid pool number\");\r\n\r\n        Bettingpool.isBettingOpen = false;\r\n        Bettingpool.winningPool = _winningPool;\r\n\r\n        emit BettingClosed(_winningPool);\r\n    }\r\n\r\n    function withdraw(uint256 _eventId) external {\r\n        Pools storage Bettingpool = BettingPools[_eventId];\r\n        BettorData storage bettor = userBets[msg.sender][_eventId];\r\n        require(\r\n            !Bettingpool.isBettingOpen,\r\n            \"Cannot withdraw while betting is still open\"\r\n        );\r\n        require(Bettingpool.winningPool > 0, \"Winning pool is not set yet\");\r\n        require(\r\n            bettor.oddType == Bettingpool.winningPool,\r\n            \"You did not bet on the winning pool\"\r\n        );\r\n        uint256 winningPoolBalance;\r\n        if (Bettingpool.winningPool == 1) {\r\n            winningPoolBalance = Bettingpool.awayBalances;\r\n        }\r\n        if (Bettingpool.winningPool == 2) {\r\n            winningPoolBalance = Bettingpool.drawBalances;\r\n        }\r\n        if (Bettingpool.winningPool == 3) {\r\n            winningPoolBalance = Bettingpool.homeBalances;\r\n        }\r\n\r\n        uint256 userWinningBet = bettor.amount;\r\n\r\n        // uint256 totalWinningPoolBalance = winningPoolBalance + totalLosingPoolBalances();\r\n        uint256 userShareFromWinningPool = (userWinningBet.mul(1000)).div(\r\n            winningPoolBalance\r\n        );\r\n\r\n        uint256 totalLosingPoolBalance = totalLosingPoolBalances(_eventId);\r\n        uint256 userShareFromLosingPools = (\r\n            userShareFromWinningPool.mul(totalLosingPoolBalance)\r\n        ).div(1000);\r\n\r\n        // Calculate the total share to be transferred to the user\r\n        uint256 totalUserShare = userWinningBet + userShareFromLosingPools;\r\n\r\n        // Transfer the user's share of ERC20 tokens\r\n        if (totalUserShare > 0) {\r\n            uint256 fivePercent = (totalUserShare.div(100)).mul(5);\r\n            payable(adminTax).transfer(fivePercent);\r\n            payable(msg.sender).transfer(totalUserShare.sub(fivePercent));\r\n        }\r\n\r\n        // Reset user's bet on the winning pool\r\n        bettor.amount = 0;\r\n    }\r\n\r\n    function totalLosingPoolBalances(\r\n        uint256 _eventId\r\n    ) internal view returns (uint256 total) {\r\n        Pools memory Bettingpool = BettingPools[_eventId];\r\n        if (Bettingpool.winningPool == 1) {\r\n            total = Bettingpool.drawBalances + Bettingpool.homeBalances;\r\n        }\r\n        if (Bettingpool.winningPool == 2) {\r\n            total = Bettingpool.awayBalances + Bettingpool.homeBalances;\r\n        }\r\n        if (Bettingpool.winningPool == 3) {\r\n            total = Bettingpool.drawBalances + Bettingpool.awayBalances;\r\n        }\r\n    }\r\n\r\n    function totalFundsInOtherPools(\r\n        uint256 _poolId,\r\n        uint256 _eventId\r\n    ) internal view returns (uint256 total) {\r\n        Pools memory Bettingpool = BettingPools[_eventId];\r\n        if (_poolId == 1) {\r\n            total = Bettingpool.drawBalances + Bettingpool.homeBalances;\r\n        }\r\n        if (_poolId == 2) {\r\n            total = Bettingpool.awayBalances + Bettingpool.homeBalances;\r\n        }\r\n        if (_poolId == 3) {\r\n            total = Bettingpool.drawBalances + Bettingpool.awayBalances;\r\n        }\r\n    }\r\n\r\n    function getPoolBalanace(\r\n        uint256 _poolId,\r\n        uint256 _eventId\r\n    ) public view returns (uint256) {\r\n        uint256 total;\r\n        Pools memory Bettingpool = BettingPools[_eventId];\r\n        if (_poolId == 1) {\r\n            total = Bettingpool.awayBalances;\r\n        }\r\n        if (_poolId == 2) {\r\n            total = Bettingpool.drawBalances;\r\n        }\r\n        if (_poolId == 3) {\r\n            total = Bettingpool.homeBalances;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    function calculateOddsForSpecificPoolsForUser(\r\n        uint256 _poolId,\r\n        uint256 _eventId\r\n    ) public view returns (uint256) {\r\n        BettorData memory bettor = userBets[msg.sender][_eventId];\r\n        uint256 totalUserShare;\r\n        uint256 userWinningBet = bettor.amount;\r\n\r\n        uint256 winningPoolBalance = getPoolBalanace(_poolId, _eventId);\r\n        uint256 totalOtherPoolsBalance = totalFundsInOtherPools(\r\n            _poolId,\r\n            _eventId\r\n        );\r\n        if (winningPoolBalance > 0) {\r\n            uint256 userShareFromWinningPool = (userWinningBet.mul(1000)).div(\r\n                winningPoolBalance\r\n            );\r\n\r\n            uint256 userPossibleReward = (\r\n                userShareFromWinningPool.mul(totalOtherPoolsBalance)\r\n            ).div(1000);\r\n\r\n            totalUserShare = userWinningBet + userPossibleReward;\r\n\r\n            return totalUserShare / userWinningBet;\r\n        } else {\r\n            return totalUserShare = userWinningBet / userWinningBet;\r\n        }\r\n    }\r\n\r\n    function calculateOddsForSpecificPools(\r\n        uint256 _poolId,\r\n        uint256 amount,\r\n        uint256 _eventId\r\n    ) public view returns (uint256) {\r\n        uint256 userWinningBet = amount;\r\n        uint256 totalUserShare;\r\n        uint256 winningPoolBalance = getPoolBalanace(_poolId, _eventId) +\r\n            amount;\r\n        uint256 totalOtherPoolsBalance = totalFundsInOtherPools(\r\n            _poolId,\r\n            _eventId\r\n        );\r\n        uint256 userShareFromWinningPool = (userWinningBet.mul(1000)).div(\r\n            winningPoolBalance\r\n        );\r\n        uint256 userPossibleReward = (\r\n            userShareFromWinningPool.mul(totalOtherPoolsBalance)\r\n        ).div(1000);\r\n\r\n        totalUserShare = userWinningBet + userPossibleReward;\r\n\r\n        return totalUserShare / amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningPool\",\"type\":\"uint256\"}],\"name\":\"BettingClosed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BettingPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"homeBalances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayBalances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawBalances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeBettors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayBettors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawBettors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPools\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBettingOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winningPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"GetPoolBettors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"homeBalances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayBalances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawBalances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeBettors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awayBettors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawBettors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPools\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBettingOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winningPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBetAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingContractEth.Pools\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"calculateOddsForSpecificPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"calculateOddsForSpecificPoolsForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winningPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"closeBetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getPoolBalanace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEventsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oddType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BettingContractEth", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://99501e3a9adc7fcf74625c49f5e0917a83c026a248b84ead7b99ed2447c08c82"}