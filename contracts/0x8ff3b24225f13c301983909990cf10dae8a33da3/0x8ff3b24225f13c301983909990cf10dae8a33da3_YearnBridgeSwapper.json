{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YearnBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./ZkSyncBridgeSwapper.sol\\\";\\nimport \\\"./interfaces/IYearnVault.sol\\\";\\n\\n/**\\n* @notice Exchanges tokens for their respective Yearn vault tokens.\\n* NOTE: to add a new vault, put the underlying token at the even index,\\n* immediately followed by the vault token at the odd index.\\n* Example indexes:\\n* 0: DAI\\n* 1: yvDAI\\n* 2: USDC\\n* 3: yvUSDC\\n*/\\ncontract YearnBridgeSwapper is ZkSyncBridgeSwapper {\\n\\n    address[] public tokens;\\n\\n    event VaultAdded(address yvToken);\\n\\n    constructor(address _zkSync, address _l2Account, address[] memory _yvTokens) ZkSyncBridgeSwapper(_zkSync, _l2Account) {\\n        for (uint i = 0; i < _yvTokens.length; i++) {\\n            addVault(_yvTokens[i]);\\n        }\\n    }\\n\\n    function exchange(\\n        uint256 _indexIn,\\n        uint256 _indexOut,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) \\n        onlyOwner\\n        external \\n        override \\n        returns (uint256 amountOut) \\n    {\\n        require(_indexIn < tokens.length, \\\"invalid input index\\\");\\n        require(_indexOut < tokens.length && _indexOut != _indexIn, \\\"invalid output index\\\");\\n\\n        address inputToken = tokens[_indexIn];\\n        address outputToken = tokens[_indexOut];\\n\\n        transferFromZkSync(inputToken);\\n\\n        if (_indexIn % 2 == 0) { // deposit\\n            require(_indexOut == _indexIn + 1, \\\"invalid output token\\\");\\n\\n            IERC20(inputToken).approve(outputToken, _amountIn);\\n            amountOut = IYearnVault(outputToken).deposit(_amountIn);\\n        } else { // withdrawal\\n            require(_indexOut == _indexIn - 1, \\\"invalid output token\\\");\\n\\n            amountOut = IYearnVault(inputToken).withdraw(_amountIn);\\n        }\\n\\n        require(amountOut >= _minAmountOut, \\\"slippage\\\");\\n        transferToZkSync(outputToken, amountOut);\\n        emit Swapped(inputToken, _amountIn, outputToken, amountOut);\\n    }\\n\\n    function addVault(address _yvToken) public onlyOwner {\\n        require(_yvToken != address(0), \\\"null yvToken\\\");\\n        address token = IYearnVault(_yvToken).token();\\n        require(token != address(0), \\\"null token\\\");\\n\\n        tokens.push(token);\\n        tokens.push(_yvToken);\\n        assert(tokens.length % 2 == 0);\\n\\n        emit VaultAdded(_yvToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ZkSyncBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IZkSync.sol\\\";\\nimport \\\"./interfaces/IBridgeSwapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract ZkSyncBridgeSwapper is IBridgeSwapper {\\n\\n    // The owner of the contract\\n    address public owner;\\n\\n    // The ZkSync bridge contract\\n    address public immutable zkSync;\\n    // The L2 market maker account\\n    address public immutable l2Account;\\n\\n    address constant internal ETH_TOKEN = address(0);\\n\\n    event OwnerChanged(address _owner, address _newOwner);\\n    event SlippageChanged(uint256 _slippagePercent);\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"unauthorised\\\");\\n        _;\\n    }\\n\\n    constructor(address _zkSync, address _l2Account) {\\n        zkSync = _zkSync;\\n        l2Account = _l2Account;\\n        owner = msg.sender;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"invalid input\\\");\\n        owner = _newOwner;\\n        emit OwnerChanged(owner, _newOwner);\\n    }\\n\\n    /**\\n    * @dev Check if there is a pending balance to withdraw in zkSync and withdraw it if applicable.\\n    * @param _token The token to withdraw.\\n    */\\n    function transferFromZkSync(address _token) internal {\\n        uint128 pendingBalance = IZkSync(zkSync).getPendingBalance(address(this), _token);\\n        if (pendingBalance > 0) {\\n            IZkSync(zkSync).withdrawPendingBalance(payable(address(this)), _token, pendingBalance);\\n        }\\n    }\\n\\n    /**\\n    * @dev Deposit the ETH or ERC20 token to zkSync.\\n    * @param _outputToken The token that was given.\\n    * @param _amountOut The amount of given token.\\n    */\\n    function transferToZkSync(address _outputToken, uint256 _amountOut) internal {\\n        if (_outputToken == ETH_TOKEN) {\\n            // deposit Eth to L2 bridge\\n            IZkSync(zkSync).depositETH{value: _amountOut}(l2Account);\\n        } else {\\n            // approve the zkSync bridge to take the output token\\n            IERC20(_outputToken).approve(zkSync, _amountOut);\\n            // deposit the output token to the L2 bridge\\n            IZkSync(zkSync).depositERC20(IERC20(_outputToken), toUint104(_amountOut), l2Account);\\n        }\\n    }\\n\\n    /**\\n    * @dev Safety method to recover ETH or ERC20 tokens that are sent to the contract by error.\\n    * @param _token The token to recover.\\n    */\\n    function recoverToken(address _recipient, address _token) external onlyOwner returns (uint256 balance) {\\n        bool success;\\n        if (_token == ETH_TOKEN) {\\n            balance = address(this).balance;\\n            (success, ) = _recipient.call{value: balance}(\\\"\\\");\\n        } else {\\n            balance = IERC20(_token).balanceOf(address(this));\\n            success = IERC20(_token).transfer(_recipient, balance);\\n        }\\n        require(success, \\\"failed to recover\\\");\\n    }\\n\\n    /**\\n     * @dev fallback method to make sure we can receive ETH\\n     */\\n    receive() external payable {\\n        \\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYearnVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IYearnVault {\\n    function token() external view returns (address);\\n    function pricePerShare() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n    function withdraw(uint256 _maxShares) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZkSync.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZkSync {\\n    function getPendingBalance(address _address, address _token) external view returns (uint128);\\n    function withdrawPendingBalance(address payable _owner, address _token, uint128 _amount) external;\\n    function depositETH(address _zkSyncAddress) external payable;\\n    function depositERC20(IERC20 _token, uint104 _amount, address _zkSyncAddress) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IBridgeSwapper {\\n    event Swapped(address _inputToken, uint256 _amountIn, address _outputToken, uint256 _amountOut);\\n\\n    /**\\n    * @notice Perform an exchange between two tokens\\n    * @dev Index values can usually be found via the constructor arguments (if not hardcoded)\\n    * @param _indexIn Index value for the token to send\\n    * @param _indexOut Index valie of the token to receive\\n    * @param _amountIn Amount of `_indexIn` being exchanged\\n    * @return Actual amount of `_indexOut` received\\n    */\\n    function exchange(uint256 _indexIn, uint256 _indexOut, uint256 _amountIn, uint256 _minAmountOut) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zkSync\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_yvTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippagePercent\",\"type\":\"uint256\"}],\"name\":\"SlippageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yvToken\",\"type\":\"address\"}],\"name\":\"VaultAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yvToken\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkSync\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YearnBridgeSwapper", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000abea9132b05a70803a4e85094fd0e1800777fbef0000000000000000000000000ec9b7ef4c071bbcc8ac47b79eba7646d4c1498a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000da816459f1ab5631232fe5e97a05bbbb94970c95000000000000000000000000a354f35829ae975e850e23e9615b11da1b3dc4de000000000000000000000000a696a63cc78dffa1a63e9e50587c197387ff6c7e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}