{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n/* taking ideas from Zeppelin solidity module */\r\ncontract SafeMath {\r\n\r\n    // it is recommended to define functions which can neither read the state of blockchain nor write in it as pure instead of constant\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        assert(x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n\r\n    // mitigate short address attack\r\n    // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n    // TODO: doublecheck implication of >= compared to ==\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    // this generates a public event on blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is ERC20,SafeMath {\r\n\r\n    /*\r\n     *  Storage\r\n    */\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success\r\n    /// @param _to Address of token receiver\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n    /// @param _from Address from where tokens are withdrawn\r\n    /// @param _to Address to where tokens are sent\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n    /// @dev Returns number of tokens owned by given address\r\n    /// @param _owner Address of token owner\r\n    /// @return Balance of owner\r\n\r\n    // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success\r\n    /// @param _spender Address of allowed account\r\n    /// @param _value Number of approved tokens\r\n    /// @return Was approval successful?\r\n\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) public returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev Returns number of allowed tokens for given address\r\n    /// @param _owner Address of token owner\r\n    /// @param _spender Address of token spender\r\n    /// @return Remaining allowance for spender\r\n    function allowance(address _owner, address _spender) public  view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n\r\n    function burn(uint256 _value) public returns (bool burnSuccess) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] =  safeSubtract(balances[burner],_value);\r\n        totalSupply = safeSubtract(totalSupply,_value);\r\n        Burn(burner, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract TrakToken is StandardToken {\r\n    // FIELDS\r\n    string constant public  name = \"TrakInvest Token\" ;\r\n    string constant public  symbol = \"TRAK\";\r\n    uint256 constant public  decimals = 18;\r\n\r\n    // The flag indicates if the crowdsale contract is in Funding state.\r\n    bool public fundraising = true;\r\n\r\n    // who created smart contract\r\n    address public creator;\r\n    // owns the total supply of tokens - it would be DAO\r\n    address public tokensOwner;\r\n    mapping (address => bool) public frozenAccounts;\r\n\r\n  /// events\r\n    event FrozenFund(address target ,bool frozen);\r\n\r\n  /// modifiers\r\n\r\n    modifier isCreator() { \r\n      require(msg.sender == creator);  \r\n      _; \r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == tokensOwner);\r\n        _;\r\n    }\r\n\r\n    modifier manageTransfer() {\r\n        if (msg.sender == tokensOwner) {\r\n            _;\r\n        }\r\n        else {\r\n            require(fundraising == false);\r\n            _;\r\n        }\r\n    }\r\n\r\n  /// constructor\r\n    function TrakToken(\r\n      address _fundsWallet,\r\n      uint256 initialSupply\r\n      ) public {\r\n      creator = msg.sender;\r\n\r\n      if (_fundsWallet !=0) {\r\n        tokensOwner = _fundsWallet;\r\n      }\r\n      else {\r\n        tokensOwner = msg.sender;\r\n      }\r\n\r\n      totalSupply = initialSupply * (uint256(10) ** decimals);\r\n      balances[tokensOwner] = totalSupply;\r\n      Transfer(0x0, tokensOwner, totalSupply);\r\n    }\r\n\r\n\r\n  /// overriden methods\r\n\r\n    function transfer(address _to, uint256 _value)  public manageTransfer onlyPayloadSize(2 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)  public manageTransfer onlyPayloadSize(3 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      require(_from != address(0));\r\n      return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function freezeAccount (address target ,bool freeze) public onlyOwner {\r\n      frozenAccounts[target] = freeze;\r\n      FrozenFund(target,freeze);  \r\n    }\r\n\r\n    function burn(uint256 _value) public onlyOwner returns (bool burnSuccess) {\r\n        require(fundraising == false);\r\n        return super.burn(_value);\r\n    }\r\n\r\n    /// @param newAddress Address of new owner.\r\n    function changeTokensWallet(address newAddress) public onlyOwner returns (bool)\r\n    {\r\n        require(newAddress != address(0));\r\n        tokensOwner = newAddress;\r\n    }\r\n\r\n    function finalize() public  onlyOwner {\r\n        require(fundraising != false);\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        fundraising = false;\r\n    }\r\n\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"burnSuccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundraising\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "TrakToken", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000054011a0d6252f50790acaf4340d9e46737ca0ab900000000000000000000000000000000000000000000000000000000094199a6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ca830863a2c0b5e5cc579f5df04dd2bfc9aa6cd8ffffc625f6bb2891bcc610af"}