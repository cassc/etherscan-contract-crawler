{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: contracts/ProjectSandlot.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n\r\ncontract ProjectSandlot is ERC721Enumerable, Ownable {\r\n  using Strings for uint256;\r\n\r\n  string public baseURI;\r\n  string public baseExtension = \".json\";\r\n  string public notRevealedUri;\r\n  uint256 public cost = 0.042 ether;\r\n  uint256 public maxSupply = 4200;\r\n  uint256 public maxMintAmount = 5;\r\n  uint256 public nftPerAddressLimit = 5;\r\n  bool public paused = true;\r\n  bool public revealed = false;\r\n  bool public onlyWhitelisted = true;\r\n  address[] public whitelistedAddresses;\r\n  mapping (address => uint256) public addressMintedBalance;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    string memory _initBaseURI,\r\n    string memory _initNotRevealedUri\r\n  ) ERC721(_name, _symbol) {\r\n    setBaseURI(_initBaseURI);\r\n    setNotRevealedURI(_initNotRevealedUri);\r\n  }\r\n\r\n  // internal\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return baseURI;\r\n  }\r\n\r\n  // public\r\n  function mint(uint256 _mintAmount) public payable {\r\n    require(!paused, \"The contract is currently paused\");\r\n    uint256 supply = totalSupply();\r\n    require(_mintAmount > 0, \"You need to mint at least 1 NFT\");\r\n    require(_mintAmount <= maxMintAmount, \"Max mint amount per session exceeded\");\r\n    require(supply + _mintAmount <= maxSupply, \"Max NFT limit exceeded\");\r\n\r\n    if (msg.sender != owner()) {\r\n        if (onlyWhitelisted == true) {\r\n            require(isWhitelisted(msg.sender), \"User is not whitelisted\");\r\n            uint256 ownerMintedCount = addressMintedBalance[msg.sender];\r\n            require(ownerMintedCount + _mintAmount <= nftPerAddressLimit, \"Max NFT per address exceeded\");\r\n        }\r\n        require(msg.value >= cost * _mintAmount, \"Insufficient Funds\");\r\n    }\r\n\r\n    for (uint256 i = 1; i <= _mintAmount; i++) {\r\n        addressMintedBalance [msg.sender]++;\r\n        _safeMint(msg.sender, supply + i);\r\n    }\r\n  }\r\n\r\n  function isWhitelisted(address _user) public view returns (bool) {\r\n      for(uint256 i = 0; i < whitelistedAddresses.length; i++) {\r\n          if (whitelistedAddresses[i] == _user) {\r\n              return true;\r\n          }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  function walletOfOwner(address _owner)\r\n    public\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256 ownerTokenCount = balanceOf(_owner);\r\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n    for (uint256 i; i < ownerTokenCount; i++) {\r\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n    }\r\n    return tokenIds;\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      \"ERC721Metadata: URI query for nonexistent token\"\r\n    );\r\n    \r\n    if(revealed == false) {\r\n        return notRevealedUri;\r\n    }\r\n\r\n    string memory currentBaseURI = _baseURI();\r\n    return bytes(currentBaseURI).length > 0\r\n        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\r\n        : \"\";\r\n  }\r\n\r\n  //only owner\r\n  function reveal() public onlyOwner {\r\n      revealed = true;\r\n  }  \r\n  \r\n  function setNFTPerAddressLimit(uint256 _limit) public onlyOwner(){\r\n    nftPerAddressLimit = _limit;\r\n  }\r\n  \r\n  function setCost(uint256 _newCost) public onlyOwner() {\r\n    cost = _newCost;\r\n  }\r\n\r\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner() {\r\n    maxMintAmount = _newmaxMintAmount;\r\n  }\r\n  \r\n  function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\r\n    notRevealedUri = _notRevealedURI;\r\n  }\r\n\r\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n    baseURI = _newBaseURI;\r\n  }\r\n\r\n  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\r\n    baseExtension = _newBaseExtension;\r\n  }\r\n\r\n  function pause(bool _state) public onlyOwner {\r\n    paused = _state;\r\n  }\r\n  \r\n  function setOnlyWhitelisted(bool _state) public onlyOwner {\r\n    onlyWhitelisted = _state;\r\n  }\r\n\r\n function whitelistUsers(address[] calldata _users) public onlyOwner {\r\n    delete whitelistedAddresses;\r\n    whitelistedAddresses = _users;\r\n  }\r\n \r\n\r\n  function withdraw() public payable onlyOwner {\r\n    (bool success, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n    require(success);\r\n  }\r\n}\r\n\r\n/**\r\n[\"0x801aE573Cf64A3733d51DEc4292464778020CEC6\",\"0xE39f7D36Bd272302661551bEEa94C054000A5C73\",\"0x3d771D6E60Ebb5A719698B57355902cDF92E0CA6\",\"0x7333aAb680200bEe460F4Fc77d3134131EB23A36\",\"0x9e156ab53e2801084145e50ac85f0701fd6ba7cc\",\"0xc97b85ffdf68f86557408f2a7888f3464ac1fe93\",\"0x4f68817763FE005da83c6e50A15f91772eb60DCb\",\"0xaEA329e2B5fCC39884132050c632D9A03bA86F28\",\"0x86409963CE24d4d22B11AB0530Ba992F54C9bC95\",\"0x864b26bf0951910975a6de0bbce7be0842d6470d\",\"0xc3394a64b9071e415B1AdD3c4944DCB5Ec93936D\",\"0xCdB5A26B43e3c7A4d16e0F33a5410963700713EA\",\"0xF4b3fB72dEA3569548697505e7A6f133BC1A6b54\",\"0x9e156ab53e2801084145e50ac85f0701fd6ba7cc\",\"0x67c772d5bc77ea0c32a1bfb9881950ece11396ce\",\"0x1d5f2d9ce618bd6596bcaf37d843a35371033936\",\"0x9E3c116AAAF1b453fbf6a5A71ddA7A907E38BD39\",\"0x166876d8188b736E8F596099641Fb54c2Ca9D020\",\"0xFA0FeE5CDC732ea135ba99Be35990D2C72006e40\",\"0x1B6697f4817B9806063Fe0c4B04F6a2026EE5A97\",\"0x55A83a0c8731a23F4d3B8FDf7E9833092FE59BA5\",\"0x6E1B1548960711Cb7d2FCc41C97B3D93E6452974\",\"0x5E9f96ceC38B684BeE7634244a4679Ca77df4FAE\",\"0xFc0D94352de289174B0F03a45c532E5977eb5a1f\",\"0x1C9c8d9429A9c113EC9Ab1f228bd15dE271e1757\",\"0x39AfaF2431b33f8812E50FC45357022db7d3dAD9\",\"0xE825dcD630aB478ccAC708a8b1f6Ed5Ee7D2901E\",\"0x700BffCeF206B488f6bdf203CEa8C896ED112AC8\",\"0xa5442b7eEBe30Ff0c72d8aaF3c03E9c19271FF12\",\"0x68C9066e14967dC72e3Fc62270209d8FEA3a719c\",\"0x3d95b53fbdF1F390Dd28CEa74cE519659Ccd92b4\",\"0xa9298aa95B72C3aF90ce500024918230C17294A3\",\"0xa981de1e47Eb42603D944F4e3Fc64F49787fc9c9\",\"0x504D086811Db2B720cd51443F2b3d497743086Df\",\"0x9a75a30ebD0fCe2ffa00445007bA530E334066c7\",\"0x765022C21943cfCD76AE0db5e545EBB6f8122394\",\"0x3Ce470B8Fe17348533Aea293a4E97E6a57a131fC\",\"0x5D3ab04FBD50F0DB3D0F13e9C22F7E9e0431A0b8\",\"0x8941F736d02646cb45A23b85B1f3310734841308\",\"0x93a37FafeA759585B0D616bd06b384544E03E17D\",\"0x5838180e009fe46878a127f5f8e20e572276f73d\",\"0x37e1843574cc8d750c71275602a4e001a6e0f492\",\"0x38d3a709357f0d937456b3ae66cf307ee43d23c4\",\"0xaA5Bc6A355089899D82CEB417f914022Fc0FA9cb\",\"0xc447086AE080b9Bde4c369E6bBCd668a247E9fb0\",\"0x09994f7f7108e358b0d485ea5bd130948692f29d\",\"0x48f46281777fb384b89EcDFBca3283ba304d6207\",\"0x45530fe88321fF6e6F1Af604901bEcb8DfB8756B\",\"0xe80d75e8fa54a77188d712e70ddaef0a81c41d29\",\"0x71d2A5913d062816CB2e16947642bF40A32eAD61\",\"0xDFFdf1262377f46866DFEAC3E9598e85b5388389\",\"0x8d19Bc89eB4d694FbfE5eDF35FbeB18FC82fba85\",\"0x596aCd26e6381Ccee76d8A012dBE85E18DE30f8B\",\"0xaF612f60a7dBBDf3487B051281b2cdd8090de060\",\"0x59F3B5B3A2a8AAC38975C233C55dF1cE7743891E\",\"0xbb63aE1f22d66628E341D3a30f784B4292cB2a13\",\"0x59032df1c9d4694488468B6C7742B0b621EADC0D\",\"0xb8cbC55eAcE480F7A838c3a29c4FcfA8aB4163c7\",\"0x3271160Da8311F3dD142964d09E2285484eF95B8\",\"0xbDBBBbB06ded0514Ee8155edd434d6697f66B111\",\"0x7905E599c18BAa403f01d90f11A097470aC306c6\",\"0x64e06c110921052A6eE90a30D92F5133783eb019\",\"0x3a4bBC8222fc21b82e3465f59b6e37BC52392160\",\"0x58a532DDFf8fDE054603a683358a98e98007CcB1\",\"0x6536FeD97dC52568D87c6491ddCbE77643991A7f\",\"0x32492340ce379Da400dE9Db18E49F09c2d9503Ae\",\"0x031134288bB3d4030ACA276A56Af290dC104B3b3\",\"0x2a90Db4494fbA546fCbb3d1F9e7E307021A507c9\",\"0x4CD39A3Ab0307B51AeeF3335Fc6259f4181E179a\",\"0xd4b8C8e98386BcFdc52cd71835e21864ab97Ec76\",\"0x8668F8B1542afaF8FF314E763e729CCe128Cc535\",\"0xFaE6F92378A5b23fcccc19D021F2B2E586F00870\",\"0x7ddb9F9e242b5C6beD3468542d8948fC0Dc68a86\",\"0x4e6532bA8773e6d602DE8dc1ef2DF7cb1B97BD96\",\"0x7EF30E206d0aF8681189dF0E45d89BF9660F7d17\",\"0x47e2d2ef5d8cd3bffad8eb01b793e7de30e62345\",\"0x9f9c17cd2Ed0a19cF4c77Da78559eF16e09EF4Db\",\"0xC9598d75d4E1cEb96714d1AD1474dA5f4Ab52bB4\",\"0x42BB83548AeeC60cee878d36D1110DAff479bF4E\",\"0x5A9ddBBAcE01340a0095D5406d086929168d5C15\",\"0xc97b85ffdf68f86557408f2a7888f3464ac1fe93\",\"0x8d2ed328F87Ad0400641999C0Ef8157e4d54a6df\",\"0xEc744006A432Aefd90127Ef36e2283A92ce2187F\",\"0x6dB6c702fA5E74BDf21794504B3F35d21B205A42\",\"0x1A621CE0b8a22335efF6FB6E17EbE9512c62967F\",\"0x51e25ffA17A7f4b39057B86e4Ff160281C798fAD\",\"0x7166bB19dbdfCA1587A5b245b73199B54d2678A6\",\"0x5Ddc27447F1Df6184c9f13B935335b31367a4fe0\",\"0x7Ce0d3E1D44EE9fD85Bc4bF15A8Ede0E101e2297\",\"0xB67770530650CeE2f0e2862b50408D5B3d18F6BF\",\"0x194b7eaef8d1876748f8b3a880b592d8da93a7c1\",\"0x04295BA1d19e601d69f4bbdB9507F21E8590b8c1\",\"0x957120b809aA71f4c74d5DAd406Aaf01C8994DA0\",\"0xff6e54fce4ca04b21cdbad1a08fec7826fe0e5b5\",\"0xa753b6f22fd72357edd50daf248a641c28bc2ac4\",\"0x62b29c8365ea81E3788a78a0b5BBfcEC7E2174E6\",\"0xab71685234f0807A57B33b3b55e0cda120d7A3cc\",\"0xc5839F9098975e90B2560f76db18C659412052E1\",\"0x8091260ae8d1AF378e57497a013da6607a5dc6Af\",\"0x30F04A9A124972D91c9A31a64b25049288ed27D7\",\"0x7A8bd70101F51908d83A8eff785f167f7142aA07\",\"0x485cf6EE90a76269b40faCfB319BFCAA42CBE28B\",\"0xEA0C03f67D457660Aef3F917013DE93cD760C4c2\",\"0x3e1b4f49837c73849812af57abbb1ec570dc5bc2\",\"0x362b28743eC677f56e3Bc8de1067fAb4Aeb31F58\",\"0x0Bc7De18782B662a686822566D776e1d6139b016\",\"0x55E71FC1a5A68ab2E420368147a210027B1e3b9F\",\"0xAC21C8524f3E2248d85dfE1fFeAc0F716F04A91d\",\"0x7775a0e8b0de121aB5E0eB56b53498e86814a2f5\",\"0x2414B9308b2a468FC7DE7c3e0e632613e4c55AcA\",\"0x2941b21c352d3d1201079284230cf15ddad590d2\",\"0x05eE8576807ed52138c5b2983e33539bF104C264\",\"0xD35cA26A6e25F954EC3F8b4C7e9552B6c7Ff9EF4\",\"0xC3f0496B59F720a00c0a31B5114ac0698fdF0896\",\"0xa0b87e0d3e301e4de876a2fe2fc1a72a71d9efce\",\"0xC469623A43a420664E8F5e2c5D1B048e46F507ED\",\"0xC365B481cD9c3a980ee92B3ff4C754150A34f2Ae\",\"0x43C59a0B50bf8893af1f9aA1Ba3888d2d0b7c898\",\"0x75F142Cbe6715A0c9b305584543AB7f9B835cCaa\",\"0xf2441a4dad2060434ca5a9c2d053352e63bb72bf\",\"0xD3d6b9dA01FE75522A0BED1301F207CF8DeB0602\",\"0x6be8EAc932C0e0b95040f1ccf7209A37331d4109\",\"0x25A304E4d1eAeE5C2eD3381F9D7ccD102b5DD24C\",\"0xfaE7604CFB91B4ADCCB27177065Ba00eA622bdd3\",\"0xe97c8a65bfaf3db6491181d8aa1dcca6782b4e85\",\"0x8a65e7699c853c1dbcc910b09e61e1f8359ee5d9\",\"0x65dABfe189e7d6Bd5dE97EE1a88d3cBEb319a9E3\",\"0x754C6EF6e5cFE7D740B3375FB3d0a7a98b2A6b0e\",\"0xb3ec944aC209aE896378F6d133A42aCA07365069\",\"0x7886DBA2263D1fCF912199Fd064D591ed40BA6BC\",\"0x061b6e995246c30c32f403639f72224d0a06a25f\",\"0x7b5453c76D508208774e2e5a78f68758E9f770b5\",\"0x3d6F52E22eC933F848CAdfa1DEb0464B4035758E\",\"0xc838a6237dba14629212276cc28f017929a096fb\",\"0x560bDF9419DEc9Fd66ff1FBa0F91D669bE116952\",\"0xb0abd5e82d81ad7a69d0cfead5a8e0d133717fb5\",\"0x1F2cdd73135473716F3408b25B6fe50b067f5a1F\",\"0xc91338f3312b3540edDBF62F726E5780e4f421Ea\",\"0xC60972c01325292eF315cb0Db78C2B07B0Dff273\",\"0x50e7811c95698af9ad4b630351c0eb94627383a7\",\"0x8d8ccb957763afaecba6a906665ab1e237d99fd0\",\"0x7bdc7389A344Fb92C45d2a059b2D4C4F5B6eeADE\",\"0x99eE4CC2a252BCA34578225EBc603A6f0978Bd78\",\"0xceEf176dCfD70408160663da7015d9F1E48a8B49\",\"0x8C3c2C2e7719a74cD42D53218b9E6E8295B3c584\",\"0x8c60c18820BCa32e75bB96322292D4A85d6bfE31\",\"0x285Acae09291CFBc7980619aA0c0166a0dE39bA4\",\"0x82515A0B21BA2BF8C711050AB6F0E1522B03d12e\",\"0x1D7fcc8697faF3ffBFc3797B5707E709758F4333\",\"0xf5BECB24d4cC6F910D26218B05ba6C8B7E7F4052\",\"0x8044D05D8B87213A92a6D4DdC1A212c1BfD1d818\",\"0x9605879A4Cd2c4307825780E14986a04604fE68D\",\"0x50052c2F571b36e68371958D01534eBc98c8f91B\",\"0x17C3aFaD88c016d1807eFB7E7528E5bCFDa70CEf\",\"0x147DffA9e729DAa9054c296C163Df0c9F937C01d\",\"0x1b8f0495f81F9cA0a48d3839Dc94e54284B42705\",\"0x6F69242222a16781294A257d1fd399B8551Ce468\",\"0x8EB8b0787e019EBa0b4c516a9A0054d884Fa3A06\",\"0xbDB5C7752a36b60578d306DD4D6b9Ba93723Bb6e\",\"0xF30052A6217aefDB1624B9745ebCEc1EFDF8c20E\",\"0xbb63b721ba41969bc4d740d7ff5c260290894122\",\"0xe9aB6182a9991CcDbD7a03A42057670a4ebbb464\",\"0xb60253BbF2614c00F99bC100aFD0CA0BE5215cA9\",\"0xa88C37d634679BC892AA3d5c8B7a28604Ab3Af8e\",\"0xD4a681dfc8652aDf509599267b6C03ad11e0Ea1d\",\"0xC46ed81C2502bF6751B692CdeA3Da75Da800A532\",\"0x3D6e177791F02298e29516dd95085Cb1200C2B47\",\"0xf0585696abA6BE68E4f99473607C6db0CDD08FAE\",\"0x9f062cf88456ac60f873a55dd95ea81d1d87b548\",\"0x6563Af1eD39167F9655d31380b7765BdB3957099\",\"0xa91efC789Aec492C37325535764a56334E3269Af\",\"0xaD31d108723a2d0a4a05E1A5F2df8719Ba297834\",\"0x74aCeC96591cF1852f1836F7b65C67D0742b1907\",\"0x8f5212b02d8460abc259565764039bf042680a53\",\"0x7c4d66195c8255b418d41b1b2e83309162ac806f\",\"0x021199ba49F344A3CbfB0D88d086d5A561e532DC\",\"0xa4BFc58c2237Dd448ac1dF6D7d44978eced962a1\",\"0xeFAA0ab976e8628e19B1bAC6B2334E1D6AdA789b\",\"0x7ebA3Fe8f6ccDbd8c81632E8d1b29C6cb3223258\",\"0xC4DaF64B51b16C25a7015F878EcD9609a295E19B\",\"0xcfEB94769C14949334f1d70DBd720D4e905e6C14\",\"0x63633B39523DF3aC2d64b355C5B18B3402035Bd9\",\"0x7f107debb79b15aeBecA39c584aA71B22871f560\",\"0x0A133944166Fdb5dAfa29534a33D6c7709885516\",\"0x3abD78aAbBdC35984Ec7823BD51e77a1Cbfe2E73\",\"0x4ae3fa85BF419FB30Cd5bA1b0604AD295914219B\",\"0x1AC4773d9A0B626eA14a152f6e4211588935E49e\",\"0x8454bB21aFF9c6108c19571C2b2cc3b8cEEb1850\",\"0x26504c6C7aAf26fF1ff69B7025A25EBba2610137\",\"0x36011fFea941cFa6d8fA8c096270375E42804129\",\"0x37bf0519f152a3aab7f13fbd0b92486e9f5d6a35\",\"0x3211e1b58164F56Fd5fC5dD9e108aa34f1c298CC\",\"0xEe4ca246Eee0C11cF98D9534f5B8262f058B1d5f\",\"0x7627657ec44B108434b1E4aA54e1Bb47f4eC049e\",\"0xa15fd1b0289e6fc90c152cf2450e6b6d2f419b77\",\"0x3F036A9755f16F9fE548D92f08DB36ce9CC1F9E3\",\"0xE9483b66F9775B7B02a62E1D9e09836B6d2a4b3d\",\"0x8d48aD9cB1289f21279402b4CBEC4c54eB6DB7e6\",\"0xf947881415a63cc186fc3706e615a8bbdb87c912\",\"0x294241337c0c09ea33bb0aa9502932b4cbda704c\",\"0x361613Da3F6082F650f2152C49eCd5BF2901bF12\",\"0x3d844c391e7806157aE42D653d1D7E2919926a61\",\"0xe27247481ca9AAA5518da004e030D1fa6C465986\",\"0xcc160544e55b2E9d2b30d3FF32320982712f7639\",\"0x5D3CAAc80F527D5Df48bB66e46086f2B36BC28A8\",\"0x21a002acfac6a3433f313ed5622cab05ab5499f0\",\"0x0845e294019E41662E3292426A8CA0F71b54Fb8A\",\"0xc07fB98300C41120E5Bb3F4641e6Eb82f9DC0aFD\",\"0x628ED6016197Cd6Ff0b3a8c285BA4AA0744c20aC\",\"0xdb6428c5fa405b9ba438bba5c1c2c4f099684004\",\"0x21A05ef2659993D556EBaD4bd6dfaC27c50EC863\",\"0xa151A5fD66C3838B8D295da4Da60d96c6162821f\",\"0x55D9FC8D5f84Cf151D9578C6713A0c0eC35E0e5f\",\"0x00939Db1c2ec7582b56A3e89dCc6D595e252a6B9\",\"0xe4D876257c2Ad0857337234d56dF5298C12D1132\",\"0xeCa5D0b717FbC513802Bc809b2F4192EEC1821c6\",\"0xE8c6a4CA74c43445a75330556Fac7e3f1E06E3c5\",\"0x9e58DB24680F47d932a7e0D60a55E053425ED387\",\"0x3e486DaE19407c7772030a0fC3Aa689ED92B8c49\",\"0x64517d6c504D02F50089cc30E5F6A2E7280964A5\",\"0x61d022513732Cb9F034D5da7DA7811D9353f1B78\",\"0x4b2f318c82D1A94a01a645233Fcf01F5E811Db4D\",\"0x0F1265b60C1ed1a21F689ebC1E52cD3C24724649\",\"0xC0A779ef7C443A3A7C8E03B49ea97372f6D32569\",\"0xccCF5493c75860d998b31bE68B8aC188a30FC0f9\",\r\n\"0xAd79ae126b2644C5B8C0b0C1610Fc24bb4828DfF\",\"0x9aA55526AF86a95f477A1940Ab9B296AA5B5Df08\",\"0xd683a7e18b9a2f2A55BdF58b4C06F46f2dDaEB53\",\"0x441311060454adc0a569f1fc425ec6a5741003f3\",\"0xb39a7f6bfb506236bb1049c9c2404e845fcb455c\",\"0x08646201768fcd19b58a34CA012b5BaD75db3870\",\"0xef486d5B9f4859107c1795E26f0035718E0b09a3\",\"0x4ebe485c1df060f6fc6e3c3b200ebc21fe11a94d\",\"0x8eC6e0f6239703604C344Bd6755e1C7b6a4d5988\",\"0x32bfac34fbc1fc356c79d07971e7f245ec1d9bca\",\"0x4F97066b22875CC666739928c48C328A39d2C9B7\",\"0x54ca169cD926E0284a08f0777068D88D51670A36\",\"0x840baA2595f45c3080eAf48B4bfeaD40Ccd8aa23\",\"0x0a89e15EFCE55918a8Db221b6DD7Ae2516D3d77f\",\"0xdd33f858213217a03ca150633da5dfc8f6d52850\",\"0x9a0527f463C66FaF4d16f80607DFCd94075D88D7\",\"0x762140ccde6372e9ebf99da144e78331c3936931\",\"0x770C9AC2E2710C82fBab6049E97DAC7f17015E6a\",\"0x823EF5455faCBE1e26A072714bEdd5071c01d27a\",\"0x4f4b83f5157960fa566b5ae8a3dbd720d2e119db\",\"0x38CC4b2eD70f9D44aEBfB48e84cE98ed42741F75\",\"0x6f20Ca4ea7147D238df7ebF16cF7Bd55cA849573\",\"0x9b930C9289F4172Ade3Ac4eA0bc508c3eaeD38Ca\",\"0x136f8e2e4de3F18fAd5aA9Ef6167A3aBD748D8c6\",\"0x859eAcdD7fC775c0F1ba12CdCc1e88ec6C085e94\",\"0x4f9499bff005309fa809e5557f32a35cf31b1e98\",\"0xe5897d53954e8e7b0491c52c0b6fb967a117aa42\",\"0x1299ebbd37b485dcc1fc2ec720671cb97f65a069\",\"0xe39f7d36bd272302661551beea94c054000a5c73\",\"0xeDCdDCd24673C97b6DA5508Bf918Ab82eDb18E6a\",\"0x20b997184e5C0c11f7a67F313Cc989d496B63774\",\"0x83d98b8BdeEF5CEAbEe93d37075D63c634fF1745\",\"0x0fc4c74ecc85169dd1bc87d088f06c586b6d78b3\",\"0x0A67595121228690D7a550ae0ab9F395368aCfc5\",\"0xde7B18949997c0B41F8dE86987278c23d5242d85\",\"0xD29BdaC3BcAA96b2F2E60675d4f0F2a3Bec1551e\",\"0xfbac3516677cc50dea378bc6452377e3bdfae7dc\",\"0x85a9093fc93b12ED9Fbf3a9bD56eaFcB0125d29D\",\"0xE3aC02F59D2014A43475B7b8D457cE2331b3e6e2\",\"0xfC3b273Ec8b57867bB13251989bd43E2B7C28c1a\",\"0x4C75a149051355781Da82aE9364b8Fc884e2d309\",\"0x9EB177785aeb034bf46481ff7C56F4E94f88C9E3\",\"0x5802f2ce3ddf754a84a9602095410b49cda44682\",\"0x6e85E758AEd0e2a452607c7Ba1895a03c8500750\",\"0x303CeDb1a88e0Fd09594dFFCb43ea1AccEd7C842\",\"0xE9EF2A9652D6207beFd0B61C3b3917f5a226008B\",\"0x7bF5B2dCA8C3975D516C999b108D528A5238C2A3\",\"0xde60d6ec63dfd40f1014f1173a2aa3659cd7710e\",\"0x82d1b6ae058c62a9ea6648512fb2ea84f87399f7\",\"0x651aa29ccbaff0ed91300cfd4ffa4d73e617a006\",\"0xE02789c5A804e178754D868Bc20499a2DfD4b038\",\"0x5C6019f08844d755dE46A650DA1e4E50f440B970\",\"0xD01c98b8dB1A364a9c37FD213F18db32294e2E2a\",\"0x504D086811Db2B720cd51443F2b3d497743086Df\",\"0xAefEe802A4b29b94963Fe62a3DD490D9C7f34c19\",\"0xa897c9D9482037C5B40C91B230414F5A0b70F701\",\"0x2f157a5723ef081f5180f0b76785fd40d4a5e675\",\"0x1376D82C20Ad860E8d9A3a7389a62974732995ea\",\"0xf53BB1c82f00fB842750287FEDf4C1D92cB732Db\",\"0xc447086AE080b9Bde4c369E6bBCd668a247E9fb0\",\"0x4b91a4c44fe9a0e4fB18134dDb4572c932BFAA7A\",\"0x421CA4bA76828d61926EB0Bbd00c5205F70A922e\",\"0x385b98E94d2D15E19B83C14983ffd2cA2E30342e\",\"0x566538978e11d716730ad62a519ee7c9aa595b10\",\"0x3343CE7d8410cc6Ff906b99D5c3a3cbDfAEA3ab2\",\"0x49DF9478bcbf1867b6cDFdC667AD604E3744B6ad\",\"0x63633B39523DF3aC2d64b355C5B18B3402035Bd9\",\"0x5FbB94e984e675e52CB92Bca9a72516a725b5064\",\"0x1890a1c04c66a42BE26b8Df121336620B1137b45\",\"0x333d2601B1bcd456B79ebd07d79EA66B33004164\",\"0xa761c9301407a36C6b26D5F4b9393f5Ab601717b\",\"0x686c83B39bB744a455d849978Ae32cC3D50D694D\",\"0xfA5E2931e3A48209B5D0d5D8F857f97f1818A87B\",\"0x1376D82C20Ad860E8d9A3a7389a62974732995ea\",\"0xD5Ea006057772C428A4718732523C4772f466A37\",\"0x1f27eCfEa2c6B575560955662166D2781B0c5111\",\"0x3D6e177791F02298e29516dd95085Cb1200C2B47\",\"0x455237074B7dcf29eC3303817E5A51C74A2c253E\",\"0x0ad0e4eA5B897dCD30752B511316972ACC7dA016\",\"0xe202b69DCCF5883C4a6D605d3dBdB6F30858b80e\",\"0xf8DF491Ae6d454461bE51306440A74Ef94C59788\",\"0xcF3694f4E76837Fb5444b9bd93724212e449eafd\",\"0xd2C67689a0033a53DbE3392d89cD6175d4b5465c\",\"0xDb6428c5FA405b9BA438bba5C1c2c4f099684004\",\"0x64fc678d17baefa06d96e214544d5d82fa8f1734\",\"0x09cCc5EbAe37a0ed322649ae03Fbc5cDf9683508\",\"0x0c7cf39362441d4637c9434a764241d6f31668aa\",\"0x62633F5670DfF2eA044DCDf3FD27168e9846Aa49\",\"0xab897f8A63CAd6d76D91AA799eEe5903D5367021\",\"0x9B05E02F7d1639c54C1BD6980eB64A11D2cd708f\",\"0x3C841eE6bf7b6e7546b6EFc04B356504727fEF62\",\"0x11436EE79814f04b71594D651E8A23D16f0eA519\",\"0xE0f2c379BeDc3392bDe10f8352Eb51340AD35405\",\"0xe2545B6138873E3b7cDC12e078d3fc71a165092e\",\"0xc9d72cB5d19a1FE78a144f7FC80531418B6b67D4\",\"0xBdFC087A5C32F6B6E425697c1A19a10E378136eE\",\"0xb9950696E4EE05Ea2030C3eBcEA9a4a8f276F746\",\"0x8bb8fc35375650d38fe68b026bd1a38a14ccb551\",\"0xA8fBe0452eedFC4598d4C64C33615d942a70Af6e\",\"0x8f289FDee17AC14fD4F6Af03663Aae19A6959015\",\"0xfB631e9cA881bd9cbd717B1D211a420Dc32e3352\",\"0x4C68f443036faA64a200B0c6AE654D779D7b6969\",\"0xDcD082a4520929dcE240cD1E5233339f7e15c661\",\"0x3b826A060319E5067883887153b88Df04f2FF0D4\",\"0xA0E3387Ca51f6a5877F52Fe2FC70aDfaD15d6B63\",\"0xe4254cf33F8E1276549F010989dE8Eb9251Fb917\",\"0x1b19fCA9EAD4248BD27b26ea135194Fce270c440\",\"0x003960E60110FbD8E2b790f1dB1948A798258016\",\"0xdbe5bF83415D69344C451438E10e4Ce4c7Ad3868\",\"0x39e11416c6A152850b7d27F9899DFC179b865cAF\",\"0xb433f89264aA9300A1EeFe799776fbd53719D82b\",\"0x0d8C5e8a3399A4f98C744d32A7aDb1613c03ee04\",\"0x11093F75cd269327ee966770EF308b4269d146Ca\",\"0x380606e57b28C11aAEf06217e5dD8F94A75F6BF2\",\"0x3DcDf0239911954a4b30A38818d3D35909b3b110\",\"0x3DcDf0239911954a4b30A38818d3D35909b3b110\",\"0xD0C34b90B43A2A2e6F7929b6D477e846D5Ae7BB6\",\"0x527Cc9cFBC3d9dcc6ecBe318eA87E9E25cBD114a\",\"0x12d4182B4125fcd4251302c034613daaAdA66396\",\"0xd8a75Fa01e12Afc0223B5b394e0a03d33A9589a5\",\"0x53a245D400ceba92dE13BB24efE3C457A2146A63\",\"0x104C411E9acF483c7d15FA246f21A516c9DB9504\",\"0x16921f39b5172d0E558eca9f429CaE718C6c2cc4\",\"0x2fDCDf5BE7683c6000b93DaE4EeCcaE8F4c06C0f\",\"0x570315A30684Db24221E43dAfB9c5FC3c63781dF\",\"0x2d91C4d517443F3265726F00BdEa495769E8C5Ea\",\"0x75c8dB318612FA80b39bE6169C108A4AA417098d\",\"0xd160412d3a9ac2c9488ab877f08be9d49ad5074d\",\"0x4376B9A7558b20BbD9700819859BD3CbEec02e34\",\"0xe9b0F81Bd05A232F9153fb7e23A752dC467959dA\",\"0xcdBc8cd9299808F377C420d2E9fb6E6076F6ee81\",\"0xC1e5f5D34630044aAa08fB543F77d16714E74b14\",\"0xf1a9b96032aB9898B7DE9738b77aa8e3211A4437\",\"0xb197C4EB43029B9D80Cb72Da90366D8700399e1B\",\"0xAdD448f2F1603B810762EeBEa7bBE893002b7b08\",\"0x950DFff6C1E00c05491774e3883316e6895B0DD1\",\"0x9ccd56aa8f9a1a39cb98331cc40804f70c1af5e1\",\"0x7187B2eACBE4a878876A9885a04E111EAE5C8286\",\"0xeB10b8584b41ff0961f519bBe76504679CD22c65\",\"0x909e9308ad396eC9b6cff99a3F8272E30df47071\",\"0xd3F332cF93Cb42dBF4f39dF4001f157165eaC1E6\",\"0x4d331aCABA7138674fD7c5f9C214595010aFb54f\",\"0x08908d18DDD4dbE255fceB3762EaeC37eB68B61D\",\"0x30156BF005f98CFDee572C96E7ec946EfF8282F9\",\"0x37c9494dc38DD56236D857F2676F8B61Cd67bE2f\",\"0xC93620784FAceae8B644C905de0eaB95A68cb45e\",\"0x843af2E0B80bF12843549de413353634BC4fB702\",\"0x617fFB54868076B7E9ac5f527c80a920bd295C88\",\"0x36BEF46Dfd4E17f9c6CAE37e408540DC7C6527d6\",\"0xcF1561890d28eae36194E3A589E77B2E98de2F80\",\"0x177285a6B63Aa2F01D6914432a35aDf0855b5Af4\",\"0xbb1b447a421CFe5F8BceFdFc501Ec86d3f0b7CDB\",\"0xA72041Df6391e940cfAeE65A6a04bB73de1D6787\",\"0xc59f7a2c055e594b7088cf2ab13111e68c6b2036\",\"0x508Cd390E93853748Ee1BdEf0ae326E12e390cB5\",\"0xc37FEe96390421274CdaE6515427da083cb638F8\",\"0x792570f2775700a2ad7f0a3a0a8d834491713bf0\",\"0xcFE0FC16bAF9459E9c7F4f0234A04Dc994580D0e\",\"0xc5AA32182a7BfcCBCAD5907A334DE1957CE4Ccd6\",\"0x3447449ACE6691f9D1eB9EfDD2b1Eb847e045D41\",\"0x0B49C3EC016224beFf20D3F410E1F1C508295810\",\"0xfe6814a34dccc54de31bf3a4577a27aee88b3d5d\",\"0x26c03Df4f1710f01F6595e54e6d966506A3eC12C\",\"0x15cb1f0d4cd7925A4A542Ae39c5C742C5d164DC3\",\"0xc798024440b9cECBB3C8F8Db40C21B7947C6B2F9\",\"0xC109d5Db062C15544129Df5a4f20F7c8CFFf57F8\",\"0x8537643CC87d0f88E9CA84BF951E46dBb96b333d\",\"0x15F202D284e777E0df2963da6e31F250Eed278A5\",\"0x760eD8aB2d44120FEE69F794B6A38154F5Ad2d2F\",\"0x65f63255f230751de8fadb2c9469398b888aa5ff\",\"0x562f6ac10723ef6af9f077a83cf25135fb369612\",\"0x15F7C941287a5Cb1d2303dbF34Af1cD7DF7A5877\",\"0xC721777ede7d0133D7302d8D464e073a5244Db07\",\"0x9eCde9196484527388E3e05cC2fb5efD846ED498\",\"0x6E0467F35fBE9F94E90A1cF57de72e27F8694D3D\",\"0xB26af1D869B0e240F7701061892B68456344Ccb1\",\"0xCD283D906Ad26efe66390Af164ee9332FFBA61b0\",\"0x31Ea254A433b013fc3E848549b89D5Dea5459d54\",\"0x98b68f4967a242b13F9253a73A0Ca7d65cAC7e13\",\"0x9b0d58C7F636Cf97b289D8CD4e21E3a0d1A30320\",\"0xc78787b9b422679fE55F8E093ff355FD6C3765F9\",\"0xaa9120109c02f48d24b9f48f6ca6db46cf82c2e8\",\"0x277e03AC0911AfBE52C004F1D1a42a83d1dDad12\",\"0x314c0f3e51acb3cb5af5665a00aa4ef87bc6f4d1\",\"0x050D2364f1241cb8380B7bc245fbe0561651112A\",\"0xF6F3a98db74cB159550488660AA5B616b7B019BC\",\"0x25cC8Fa0A46467a01f6ac33EC78360391D7b0C6a\",\"0x3C469cbb8A35d753abcFb364b121647a4E6FEbc2\",\"0x25c9abf0e3135368d5d7ebc3b82e94d59233d5de\",\"0xd1907b6f10eb35006f701b749df93d9812f23c48\",\"0xE6bbe9F9F98369bBAb70BD6308C9C522734cCF83\",\"0x6D084D38dD12c1F44c0Ba170145dA70cD57E3907\",\"0x34929bC7065B3E433cE1c1f097B9D25a573db15C\",\"0x15cb1f0d4cd7925A4A542Ae39c5C742C5d164DC3\"]\r\n*/", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initNotRevealedUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPerAddressLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setNFTPerAddressLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setOnlyWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ProjectSandlot", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000f50726f6a6563742053616e646c6f7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003506f4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d657362356a4c4c6e5839725159367231664744594570434b355562674e6e36684a5836356b7932344d5445462f000000000000000000000000000000000000000000000000000000000000000000000000000000000041697066733a2f2f516d536d646f7767546834667879516b715343595378797a6d653756314e74555a4a6b4154427737346d6e4a74642f68696464656e2e6a736f6e00000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40cfab25d3732138efc7118814769f3bcc407fcdc8aadbe71fe7d034eb2da670"}