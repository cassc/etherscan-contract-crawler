{"SourceCode": "pragma solidity 0.5.2;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n// File: contracts/TokenVesting.sol\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 internal vestToken;\r\n    uint256 internal tokensToVest = 0;\r\n    uint256 internal vestingId = 0;\r\n\r\n    string private constant INSUFFICIENT_BALANCE = \"Insufficient balance\";\r\n    string private constant INVALID_VESTING_ID = \"Invalid vesting id\";\r\n    string private constant VESTING_ALREADY_RELEASED = \"Vesting already released\";\r\n    string private constant INVALID_BENEFICIARY = \"Invalid beneficiary address\";\r\n    string private constant NOT_VESTED = \"Tokens have not vested yet\";\r\n\r\n    struct Vesting {\r\n        uint256 releaseTime;\r\n        uint256 amount;\r\n        address beneficiary;\r\n        bool released;\r\n    }\r\n    mapping(uint256 => Vesting) public vestings;\r\n\r\n    event TokenVestingReleased(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n    event TokenVestingAdded(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n    event TokenVestingRemoved(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\r\n\r\n    constructor(IERC20 _token) public {\r\n        require(address(_token) != address(0x0), \"Matic token address is not valid\");\r\n        vestToken = _token;\r\n\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1681761600, 1*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1684353600, 85213*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1687032000, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1689624000, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1692302400, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1694980800, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1697572800, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1700251200, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1702843200, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1705521600, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1708200000, 85214*1e18 ); \r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1710705600, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1713384000, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1715976000, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1718654400, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1721246400, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1723924800, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1726603200, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1729195200, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1731873600, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1734465600, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1737144000, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1739822400, 85214*1e18 );\r\n        addVesting(0x5f1FA9E968ffB6B9ff7Cc811db6bb38C2D6B76B4, 1742241600, 85214*1e18 );\r\n\r\n        renounceOwnership();\r\n\r\n    }\r\n\r\n    function token() public view returns (IERC20) {\r\n        return vestToken;\r\n    }\r\n\r\n    function beneficiary(uint256 _vestingId) public view returns (address) {\r\n        return vestings[_vestingId].beneficiary;\r\n    }\r\n\r\n    function releaseTime(uint256 _vestingId) public view returns (uint256) {\r\n        return vestings[_vestingId].releaseTime;\r\n    }\r\n\r\n    function vestingAmount(uint256 _vestingId) public view returns (uint256) {\r\n        return vestings[_vestingId].amount;\r\n    }\r\n\r\n    function removeVesting(uint256 _vestingId) public onlyOwner {\r\n        Vesting storage vesting = vestings[_vestingId];\r\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\r\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\r\n        vesting.released = true;\r\n        tokensToVest = tokensToVest.sub(vesting.amount);\r\n        emit TokenVestingRemoved(_vestingId, vesting.beneficiary, vesting.amount);\r\n    }\r\n\r\n    function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {\r\n        require(_beneficiary != address(0x0), INVALID_BENEFICIARY);\r\n        tokensToVest = tokensToVest.add(_amount);\r\n        vestingId = vestingId.add(1);\r\n        vestings[vestingId] = Vesting({\r\n            beneficiary: _beneficiary,\r\n            releaseTime: _releaseTime,\r\n            amount: _amount,\r\n            released: false\r\n        });\r\n        emit TokenVestingAdded(vestingId, _beneficiary, _amount);\r\n    }\r\n\r\n    function release(uint256 _vestingId) public {\r\n        Vesting storage vesting = vestings[_vestingId];\r\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\r\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\r\n\r\n        require(vestToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\r\n        vesting.released = true;\r\n        tokensToVest = tokensToVest.sub(vesting.amount);\r\n        vestToken.safeTransfer(vesting.beneficiary, vesting.amount);\r\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\r\n    }\r\n\r\n    function retrieveExcessTokens(uint256 _amount) public onlyOwner {\r\n        require(_amount <= vestToken.balanceOf(address(this)).sub(tokensToVest), INSUFFICIENT_BALANCE);\r\n        vestToken.safeTransfer(owner(), _amount);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"vestingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"removeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieveExcessTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"released\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.5.2+commit.1df8f40c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000Af5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6", "EVMVersion": "constantinople", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0b098b94010ce3d21fb1c29f88c52f6265d11834c58ca61ce9f92303e2722abf"}