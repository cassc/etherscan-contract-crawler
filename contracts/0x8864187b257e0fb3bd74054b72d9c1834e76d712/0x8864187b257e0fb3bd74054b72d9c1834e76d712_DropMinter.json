{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/DropMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./interfaces/ITokenMinter.sol\\\";\\r\\nimport \\\"./interfaces/IClaimCallback.sol\\\";\\r\\nimport \\\"./interfaces/ITokenLocker.sol\\\";\\r\\n\\r\\ncontract DropMinter is IClaimCallback{\\r\\n\\r\\n    address public immutable convexproxy;\\r\\n    address public immutable cvxprisma;\\r\\n    address public immutable airdrop;\\r\\n    address public immutable locker;\\r\\n    event ConvertDrop(address indexed _address, uint256 _amount);\\r\\n\\r\\n    constructor(address _proxy, address _cvxprisma, address _drop, address _locker){\\r\\n        convexproxy = _proxy;\\r\\n        cvxprisma = _cvxprisma;\\r\\n        airdrop = _drop;\\r\\n        locker = _locker;\\r\\n    }\\r\\n\\r\\n    function claimCallback(address _claimant, address _receiver, uint256 _amount) external returns (bool success){\\r\\n        require(msg.sender == airdrop, \\\"!drop\\\");\\r\\n        require(_receiver == convexproxy, \\\"!receiver\\\");\\r\\n        _amount *= ITokenLocker(locker).lockToTokenRatio();\\r\\n        ITokenMinter(cvxprisma).mint(_claimant, _amount);\\r\\n        emit ConvertDrop(_claimant,_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ITokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITokenMinter{\\r\\n    function mint(address,uint256) external;\\r\\n    function burn(address,uint256) external;\\r\\n    function setOperator(address _operator, bool _active) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ITokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITokenLocker {\\r\\n    struct LockData {\\r\\n        uint amount;\\r\\n        uint weeksToUnlock;\\r\\n    }\\r\\n\\r\\n    function lock(address _account, uint256 _amount, uint256 _weeks) external returns (bool);\\r\\n    function withdrawExpiredLocks(uint256 _weeks) external returns (bool);\\r\\n    function withdrawWithPenalty(uint amountToWithdraw) external returns (uint);\\r\\n\\r\\n    function getAccountBalances(address account) external view returns (uint256 locked, uint256 unlocked);\\r\\n    function getAccountActiveLocks(\\r\\n        address account,\\r\\n        uint minWeeks\\r\\n    ) external view returns (LockData[] memory lockData, uint frozenAmount);\\r\\n\\r\\n    function getAccountWeightAt(address account, uint week) external view returns (uint256);\\r\\n\\r\\n    function getTotalWeightAt(uint week) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawWithPenaltyAmounts(address account, uint amountToWithdraw) external view returns (uint amountWithdrawn, uint penaltyAmountPaid);\\r\\n\\r\\n    function lockToTokenRatio() external view returns (uint256);\\r\\n\\r\\n    function freeze() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IClaimCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IClaimCallback {\\r\\n    function claimCallback(address claimant, address receiver, uint256 amount) external returns (bool success);\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxprisma\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ConvertDrop\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexproxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxprisma\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DropMinter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ad7a9e2b3cd9214f36cb871336d8ab34ddfdd5b00000000000000000000000034635280737b5bfe6c7dc2fc3065d60d66e781850000000000000000000000003ea03249b4d68be92a8eda027c5ac12e6e419bee0000000000000000000000003f78544364c3eccdce4d9c89a630aea26122829d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}