{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/multi-metadata/ERC721TLM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC721Upgradeable, ERC165Upgradeable} from \\\"openzeppelin-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2309Upgradeable} from \\\"openzeppelin-upgradeable/interfaces/IERC2309Upgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"openzeppelin-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {EIP2981TLUpgradeable} from \\\"tl-sol-tools/upgradeable/royalties/EIP2981TLUpgradeable.sol\\\";\\nimport {OwnableAccessControlUpgradeable} from \\\"tl-sol-tools/upgradeable/access/OwnableAccessControlUpgradeable.sol\\\";\\nimport {StoryContractUpgradeable} from \\\"tl-story/upgradeable/StoryContractUpgradeable.sol\\\";\\nimport {BlockListUpgradeable} from \\\"tl-blocklist/BlockListUpgradeable.sol\\\";\\nimport {IERC7160} from \\\"./IERC7160.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev token uri is an empty string\\nerror EmptyTokenURI();\\n\\n/// @dev batch mint to zero address\\nerror MintToZeroAddress();\\n\\n/// @dev batch size too small\\nerror BatchSizeTooSmall();\\n\\n/// @dev airdrop to too few addresses\\nerror AirdropTooFewAddresses();\\n\\n/// @dev token not owned by the owner of the contract\\nerror TokenNotOwnedByOwner();\\n\\n/// @dev caller is not the owner of the specific token\\nerror CallerNotTokenOwner();\\n\\n/// @dev caller is not approved or owner\\nerror CallerNotApprovedOrOwner();\\n\\n/// @dev token does not exist\\nerror TokenDoesntExist();\\n\\n/// @dev index given for ERC-7160 is invalid\\nerror InvalidTokenURIIndex();\\n\\n/// @dev no tokens in tokenIds array\\nerror NoTokensSpecified();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            ERC721TLM\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title ERC721TLM.sol\\n/// @notice Transient Labs ERC-721 Creator Contract with multi-metadata support (ERC-7160)\\n/// @dev features include\\n///      - ultra efficient batch minting\\n///      - airdrops\\n///      - ability to hook in external mint contracts\\n///      - ability to set multiple admins\\n///      - Story Contract\\n///      - BlockList\\n///      - Multi-metadata per ERC-7160\\n///      - individual token royalty overrides\\n/// @dev When unpinned, the latest metadata added for a token is returned from `tokenURI` and `tokenURIs`\\n/// @author transientlabs.xyz\\n/// @custom:version 2.10.0\\ncontract ERC721TLM is\\n    Initializable,\\n    ERC721Upgradeable,\\n    EIP2981TLUpgradeable,\\n    OwnableAccessControlUpgradeable,\\n    StoryContractUpgradeable,\\n    BlockListUpgradeable,\\n    IERC2309Upgradeable,\\n    IERC7160\\n{\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Custom Types\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev struct defining a batch mint\\n    struct BatchMint {\\n        address creator;\\n        uint256 fromTokenId;\\n        uint256 toTokenId;\\n        string baseUri;\\n    }\\n\\n    /// @dev struct for specifying base uri index and folder index\\n    struct MetadataLoc {\\n        uint128 baseUriIndex;\\n        uint128 folderIndex;\\n    }\\n\\n    /// @dev struct for holding additional metadata used in ERC-7160\\n    struct MultiMetadata {\\n        bool pinned;\\n        uint256 index;\\n        MetadataLoc[] metadataLocs;\\n    }\\n\\n    /// @dev string representation of uint256\\n    using StringsUpgradeable for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    string public constant VERSION = \\\"2.10.0\\\";\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant APPROVED_MINT_CONTRACT = keccak256(\\\"APPROVED_MINT_CONTRACT\\\");\\n    uint256 private _counter; // token ids\\n    mapping(uint256 => bool) private _burned; // flag to see if a token is burned or not -- needed for burning batch mints\\n    mapping(uint256 => string) private _tokenUris;\\n    mapping(uint256 => MultiMetadata) private _multiMetadatas;\\n    string[] private _multiMetadataBaseUris;\\n    BatchMint[] private _batchMints; // dynamic array for batch mints\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev This event emits when the metadata of a token is changed\\n    ///      so that the third-party platforms such as NFT market can\\n    ///      timely update the images and related attributes of the NFT.\\n    /// @dev see EIP-4906\\n    event MetadataUpdate(uint256 tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed\\n    ///      so that the third-party platforms such as NFT market could\\n    ///      timely update the images and related attributes of the NFTs.\\n    /// @dev see EIP-4906\\n    event BatchMetadataUpdate(uint256 fromTokenId, uint256 toTokenId);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param disable: boolean to disable initialization for the implementation contract\\n    constructor(bool disable) {\\n        if (disable) _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param name: the name of the 721 contract\\n    /// @param symbol: the symbol of the 721 contract\\n    /// @param defaultRoyaltyRecipient: the default address for royalty payments\\n    /// @param defaultRoyaltyPercentage: the default royalty percentage of basis points (out of 10,000)\\n    /// @param initOwner: the owner of the contract\\n    /// @param admins: array of admin addresses to add to the contract\\n    /// @param enableStory: a bool deciding whether to add story fuctionality or not\\n    /// @param blockListRegistry: address of the blocklist registry to use\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address defaultRoyaltyRecipient,\\n        uint256 defaultRoyaltyPercentage,\\n        address initOwner,\\n        address[] memory admins,\\n        bool enableStory,\\n        address blockListRegistry\\n    ) external initializer {\\n        // initialize parent contracts\\n        __ERC721_init(name, symbol);\\n        __EIP2981TL_init(defaultRoyaltyRecipient, defaultRoyaltyPercentage);\\n        __OwnableAccessControl_init(initOwner);\\n        __StoryContractUpgradeable_init(enableStory);\\n        __BlockList_init(blockListRegistry);\\n\\n        // add admins\\n        _setRole(ADMIN_ROLE, admins, true);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                General Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to get total supply minted so far\\n    function totalSupply() external view returns (uint256) {\\n        return _counter;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Access Control Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set approved mint contracts\\n    /// @dev access to owner or admin\\n    /// @param minters: array of minters to grant approval to\\n    /// @param status: status for the minters\\n    function setApprovedMintContracts(address[] calldata minters, bool status) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        _setRole(APPROVED_MINT_CONTRACT, minters, status);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Mint Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to mint a single token\\n    /// @dev requires owner or admin\\n    /// @param recipient: the recipient of the token - assumed as able to receive 721 tokens\\n    /// @param uri: the token uri to mint\\n    function mint(address recipient, string calldata uri) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        if (bytes(uri).length == 0) revert EmptyTokenURI();\\n        _counter++;\\n        _tokenUris[_counter] = uri;\\n        _mint(recipient, _counter);\\n    }\\n\\n    /// @notice function to mint a single token with specific token royalty\\n    /// @dev requires owner or admin\\n    /// @param recipient: the recipient of the token - assumed as able to receive 721 tokens\\n    /// @param uri: the token uri to mint\\n    /// @param royaltyAddress: royalty payout address for this new token\\n    /// @param royaltyPercent: royalty percentage for this new token\\n    function mint(address recipient, string calldata uri, address royaltyAddress, uint256 royaltyPercent)\\n        external\\n        onlyRoleOrOwner(ADMIN_ROLE)\\n    {\\n        if (bytes(uri).length == 0) revert EmptyTokenURI();\\n        _counter++;\\n        _tokenUris[_counter] = uri;\\n        _overrideTokenRoyaltyInfo(_counter, royaltyAddress, royaltyPercent);\\n        _mint(recipient, _counter);\\n    }\\n\\n    /// @notice function to batch mint tokens\\n    /// @dev requires owner or admin\\n    /// @param recipient: the recipient of the token - assumed as able to receive 721 tokens\\n    /// @param numTokens: number of tokens in the batch mint\\n    /// @param baseUri: the base uri for the batch, expecting json to be in order and starting at 0\\n    ///                 NOTE: this folder should have the same number of json files in it as numTokens\\n    ///                 NOTE: files should be named without any file extension\\n    ///                 NOTE: baseUri should NOT have a trailing `/`\\n    function batchMint(address recipient, uint256 numTokens, string calldata baseUri)\\n        external\\n        onlyRoleOrOwner(ADMIN_ROLE)\\n    {\\n        if (recipient == address(0)) revert MintToZeroAddress();\\n        if (bytes(baseUri).length == 0) revert EmptyTokenURI();\\n        if (numTokens < 2) revert BatchSizeTooSmall();\\n        uint256 start = _counter + 1;\\n        uint256 end = start + numTokens - 1;\\n        _counter += numTokens;\\n        _batchMints.push(BatchMint(recipient, start, end, baseUri));\\n\\n        __unsafe_increaseBalance(recipient, numTokens); // this function adds the number of tokens to the recipient address\\n\\n        for (uint256 id = start; id < end + 1; ++id) {\\n            emit Transfer(address(0), recipient, id);\\n        }\\n    }\\n\\n    /// @notice function to batch mint tokens, ultra gas savings with ERC-2309\\n    /// @dev requires owner or admin\\n    /// @dev uses ERC-2309. BEWARE may not be compatible with all platforms\\n    /// @param recipient: the recipient of the token - assumed as able to receive 721 tokens\\n    /// @param numTokens: number of tokens in the batch mint\\n    /// @param baseUri: the base uri for the batch, expecting json to be in order and starting at 0\\n    ///                 NOTE: this folder should have the same number of json files in it as numTokens\\n    ///                 NOTE: files should be named without any file extension\\n    ///                 NOTE: baseUri should NOT have a trailing `/`\\n    function batchMintUltra(address recipient, uint256 numTokens, string calldata baseUri)\\n        external\\n        onlyRoleOrOwner(ADMIN_ROLE)\\n    {\\n        if (recipient == address(0)) revert MintToZeroAddress();\\n        if (bytes(baseUri).length == 0) revert EmptyTokenURI();\\n        if (numTokens < 2) revert BatchSizeTooSmall();\\n        uint256 start = _counter + 1;\\n        uint256 end = start + numTokens - 1;\\n        _counter += numTokens;\\n        _batchMints.push(BatchMint(recipient, start, end, baseUri));\\n\\n        __unsafe_increaseBalance(recipient, numTokens); // this function adds the number of tokens to the recipient address\\n\\n        emit ConsecutiveTransfer(start, end, address(0), recipient);\\n    }\\n\\n    /// @notice function to airdrop tokens to addresses\\n    /// @dev requires owner or admin\\n    /// @dev utilizes batch mint token uri values to save some gas\\n    ///      but still ultimately mints individual tokens to people\\n    /// @param addresses: dynamic array of addresses to mint to\\n    /// @param baseUri: the base uri for the batch, expecting json to be in order and starting at 0\\n    ///                 NOTE: the number of json files in this folder should be equal to the number of addresses\\n    ///                 NOTE: files should be named without any file extension\\n    ///                 NOTE: baseUri should not have a trailing `/`\\n    function airdrop(address[] calldata addresses, string calldata baseUri) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        if (bytes(baseUri).length == 0) revert EmptyTokenURI();\\n        if (addresses.length < 2) revert AirdropTooFewAddresses();\\n\\n        uint256 start = _counter + 1;\\n        _counter += addresses.length;\\n        _batchMints.push(BatchMint(address(0), start, start + addresses.length, baseUri));\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _mint(addresses[i], start + i);\\n        }\\n    }\\n\\n    /// @notice function to allow an approved mint contract to mint\\n    /// @dev requires the contract to be an approved mint contract\\n    /// @param recipient: the recipient of the token - assumed as able to receive 721 tokens\\n    /// @param uri: the token uri to mint\\n    function externalMint(address recipient, string calldata uri) external onlyRole(APPROVED_MINT_CONTRACT) {\\n        if (bytes(uri).length == 0) revert EmptyTokenURI();\\n        _counter++;\\n        _tokenUris[_counter] = uri;\\n        _mint(recipient, _counter);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Batch Mint Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to get batch mint info\\n    /// @param tokenId: token id to look up for batch mint info\\n    /// @return owner of the token (address)\\n    /// @return string of the uri for the tokenId\\n    function _getBatchInfo(uint256 tokenId) internal view returns (address, string memory) {\\n        uint256 i = 0;\\n        for (i; i < _batchMints.length; i++) {\\n            if (tokenId >= _batchMints[i].fromTokenId && tokenId <= _batchMints[i].toTokenId) {\\n                break;\\n            }\\n        }\\n        if (i >= _batchMints.length) {\\n            return (address(0), \\\"\\\");\\n        }\\n        string memory tokenUri =\\n            string(abi.encodePacked(_batchMints[i].baseUri, \\\"/\\\", (tokenId - _batchMints[i].fromTokenId).toString()));\\n        return (_batchMints[i].creator, tokenUri);\\n    }\\n\\n    /// @notice function to override { ERC721Upgradeable._ownerOf } to allow for batch minting\\n    /// @inheritdoc ERC721Upgradeable\\n    function _ownerOf(uint256 tokenId) internal view override(ERC721Upgradeable) returns (address) {\\n        if (_burned[tokenId]) {\\n            return address(0);\\n        } else {\\n            if (tokenId > 0 && tokenId <= _counter) {\\n                address owner = ERC721Upgradeable._ownerOf(tokenId);\\n                if (owner == address(0)) {\\n                    // see if can find token in a batch mint\\n                    (owner,) = _getBatchInfo(tokenId);\\n                }\\n                return owner;\\n            } else {\\n                return address(0);\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Burn Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to burn a token\\n    /// @dev caller must be approved or owner of the token\\n    /// @param tokenId: the token to burn\\n    function burn(uint256 tokenId) external {\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) revert CallerNotApprovedOrOwner();\\n        _burn(tokenId);\\n        _burned[tokenId] = true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set the default royalty specification\\n    /// @dev requires owner\\n    /// @param newRecipient: the new royalty payout address\\n    /// @param newPercentage: the new royalty percentage in basis (out of 10,000)\\n    function setDefaultRoyalty(address newRecipient, uint256 newPercentage) external onlyOwner {\\n        _setDefaultRoyaltyInfo(newRecipient, newPercentage);\\n    }\\n\\n    /// @notice function to override a token's royalty info\\n    /// @dev requires owner\\n    /// @param tokenId: the token to override royalty for\\n    /// @param newRecipient: the new royalty payout address for the token id\\n    /// @param newPercentage: the new royalty percentage in basis (out of 10,000) for the token id\\n    function setTokenRoyalty(uint256 tokenId, address newRecipient, uint256 newPercentage) external onlyOwner {\\n        _overrideTokenRoyaltyInfo(tokenId, newRecipient, newPercentage);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                ERC-7160 Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to add token uris\\n    /// @dev written to take in many token ids and a base uri that contains metadata files with file names matching the index of each token id in the `tokenIds` array (aka folderIndex)\\n    /// @dev no trailing slash on the base uri\\n    /// @param tokenIds: array of token ids that get metadata added to them\\n    /// @param baseUri: the base uri of a folder containing metadata - file names start at 0 and increase monotonically\\n    function addTokenUris(uint256[] calldata tokenIds, string calldata baseUri) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        if (bytes(baseUri).length == 0) revert EmptyTokenURI();\\n        if (tokenIds.length == 0) revert NoTokensSpecified();\\n        uint128 baseUriIndex = uint128(_multiMetadataBaseUris.length);\\n        _multiMetadataBaseUris.push(baseUri);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (!_exists(tokenIds[i])) revert TokenDoesntExist();\\n            MetadataLoc memory m = MetadataLoc(baseUriIndex, uint128(i));\\n            _multiMetadatas[tokenIds[i]].metadataLocs.push(m);\\n            emit MetadataUpdate(tokenIds[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC7160\\n    function tokenURIs(uint256 tokenId) external view returns (uint256 index, string[] memory uris, bool pinned) {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        MultiMetadata memory multiMetadata = _multiMetadatas[tokenId];\\n        // build uris\\n        uris = new string[](multiMetadata.metadataLocs.length + 1);\\n        uris[0] = _getMintedMetadatUri(tokenId);\\n        for (uint256 i = 0; i < multiMetadata.metadataLocs.length; i++) {\\n            uris[i + 1] = _getMultiMetadataUri(multiMetadata, i);\\n        }\\n        // get if pinned\\n        pinned = multiMetadata.pinned;\\n        // set index\\n        index = pinned ? multiMetadata.index : uris.length - 1;\\n    }\\n\\n    /// @inheritdoc IERC7160\\n    function pinTokenURI(uint256 tokenId, uint256 index) external {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        if (ownerOf(tokenId) != msg.sender) revert CallerNotTokenOwner();\\n        if (index > _multiMetadatas[tokenId].metadataLocs.length) {\\n            revert InvalidTokenURIIndex();\\n        }\\n\\n        _multiMetadatas[tokenId].index = index;\\n        _multiMetadatas[tokenId].pinned = true;\\n\\n        emit TokenUriPinned(tokenId, index);\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC7160\\n    function unpinTokenURI(uint256 tokenId) external {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        if (ownerOf(tokenId) != msg.sender) revert CallerNotTokenOwner();\\n\\n        _multiMetadatas[tokenId].pinned = false;\\n\\n        emit TokenUriUnpinned(tokenId);\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC7160\\n    function hasPinnedTokenURI(uint256 tokenId) external view returns (bool) {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        return _multiMetadatas[tokenId].pinned;\\n    }\\n\\n    /// @inheritdoc ERC721Upgradeable\\n    function tokenURI(uint256 tokenId) public view override(ERC721Upgradeable) returns (string memory uri) {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        MultiMetadata memory multiMetadata = _multiMetadatas[tokenId];\\n        if (multiMetadata.pinned) {\\n            if (multiMetadata.index == 0) {\\n                uri = _getMintedMetadatUri(tokenId);\\n            } else {\\n                uri = _getMultiMetadataUri(multiMetadata, multiMetadata.index - 1);\\n            }\\n        } else {\\n            if (multiMetadata.metadataLocs.length == 0) {\\n                uri = _getMintedMetadatUri(tokenId);\\n            } else {\\n                uri = _getMultiMetadataUri(multiMetadata, multiMetadata.metadataLocs.length - 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice internal function to get original metadata uri from mint\\n    function _getMintedMetadatUri(uint256 tokenId) internal view returns (string memory uri) {\\n        uri = _tokenUris[tokenId];\\n        if (bytes(uri).length == 0) {\\n            (, uri) = _getBatchInfo(tokenId);\\n        }\\n    }\\n\\n    /// @notice internal function to help get metadata from multi-metadata struct\\n    /// @param multiMetadata The multimMtadata struct in memory\\n    /// @param index The index of the multiMetadataLoc\\n    function _getMultiMetadataUri(MultiMetadata memory multiMetadata, uint256 index)\\n        internal\\n        view\\n        returns (string memory uri)\\n    {\\n        uri = string(\\n            abi.encodePacked(\\n                _multiMetadataBaseUris[multiMetadata.metadataLocs[index].baseUriIndex],\\n                \\\"/\\\",\\n                uint256(multiMetadata.metadataLocs[index].folderIndex).toString()\\n            )\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Story Contract Hooks\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    /// @dev restricted to the owner of the contract\\n    function _isStoryAdmin(address potentialAdmin) internal view override(StoryContractUpgradeable) returns (bool) {\\n        return potentialAdmin == owner() || hasRole(ADMIN_ROLE, potentialAdmin);\\n    }\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    function _tokenExists(uint256 tokenId) internal view override(StoryContractUpgradeable) returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    function _isTokenOwner(address potentialOwner, uint256 tokenId)\\n        internal\\n        view\\n        override(StoryContractUpgradeable)\\n        returns (bool)\\n    {\\n        address tokenOwner = ownerOf(tokenId);\\n        return tokenOwner == potentialOwner;\\n    }\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    /// @dev restricted to the owner of the contract\\n    function _isCreator(address potentialCreator, uint256 /* tokenId */ )\\n        internal\\n        view\\n        override(StoryContractUpgradeable)\\n        returns (bool)\\n    {\\n        return potentialCreator == owner() || hasRole(ADMIN_ROLE, potentialCreator);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                BlockList Functions & Overrides\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc BlockListUpgradeable\\n    /// @dev restricted to the owner of the contract\\n    function isBlockListAdmin(address potentialAdmin) public view override(BlockListUpgradeable) returns (bool) {\\n        return potentialAdmin == owner();\\n    }\\n\\n    /// @inheritdoc ERC721Upgradeable\\n    /// @dev added the `notBlocked` modifier for blocklist\\n    function approve(address to, uint256 tokenId) public override(ERC721Upgradeable) notBlocked(to) {\\n        ERC721Upgradeable.approve(to, tokenId);\\n    }\\n\\n    /// @inheritdoc ERC721Upgradeable\\n    /// @dev added the `notBlocked` modifier for blocklist\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override(ERC721Upgradeable)\\n        notBlocked(operator)\\n    {\\n        ERC721Upgradeable.setApprovalForAll(operator, approved);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                ERC-165 Support\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, EIP2981TLUpgradeable, StoryContractUpgradeable)\\n        returns (bool)\\n    {\\n        return (\\n            ERC721Upgradeable.supportsInterface(interfaceId) || EIP2981TLUpgradeable.supportsInterface(interfaceId)\\n                || StoryContractUpgradeable.supportsInterface(interfaceId) || interfaceId == bytes4(0x49064906)\\n                || interfaceId == type(IERC7160).interfaceId\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC2309Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC2309.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-2309: ERC-721 Consecutive Transfer Extension.\\n *\\n * _Available since v4.8._\\n */\\ninterface IERC2309Upgradeable {\\n    /**\\n     * @dev Emitted when the tokens from `fromTokenId` to `toTokenId` are transferred from `fromAddress` to `toAddress`.\\n     */\\n    event ConsecutiveTransfer(\\n        uint256 indexed fromTokenId,\\n        uint256 toTokenId,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/upgradeable/royalties/EIP2981TLUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"openzeppelin-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IEIP2981} from \\\"../../royalties/IEIP2981.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev error if the recipient is set to address(0)\\nerror ZeroAddressError();\\n\\n/// @dev error if the royalty percentage is greater than to 100%\\nerror MaxRoyaltyError();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            EIP2981TL\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title EIP2981TLUpgradeable.sol\\n/// @notice abstract contract to define a default royalty spec\\n///         while allowing for specific token overrides\\n/// @dev follows EIP-2981 (https://eips.ethereum.org/EIPS/eip-2981)\\n/// @author transientlabs.xyz\\n/// @custom:version 2.2.2\\nabstract contract EIP2981TLUpgradeable is IEIP2981, Initializable, ERC165Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Struct\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    struct RoyaltySpec {\\n        address recipient;\\n        uint256 percentage;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    address private _defaultRecipient;\\n    uint256 private _defaultPercentage;\\n    mapping(uint256 => RoyaltySpec) private _tokenOverrides;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to initialize the contract\\n    /// @param defaultRecipient - the default royalty payout address\\n    /// @param defaultPercentage - the deafult royalty percentage, out of 10,000\\n    function __EIP2981TL_init(address defaultRecipient, uint256 defaultPercentage) internal onlyInitializing {\\n        __EIP2981TL_init_unchained(defaultRecipient, defaultPercentage);\\n    }\\n\\n    /// @notice unchained function to initialize the contract\\n    /// @param defaultRecipient - the default royalty payout address\\n    /// @param defaultPercentage - the deafult royalty percentage, out of 10,000\\n    function __EIP2981TL_init_unchained(address defaultRecipient, uint256 defaultPercentage)\\n        internal\\n        onlyInitializing\\n    {\\n        _setDefaultRoyaltyInfo(defaultRecipient, defaultPercentage);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Changing Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set default royalty info\\n    /// @param newRecipient - the new default royalty payout address\\n    /// @param newPercentage - the new default royalty percentage, out of 10,000\\n    function _setDefaultRoyaltyInfo(address newRecipient, uint256 newPercentage) internal {\\n        if (newRecipient == address(0)) revert ZeroAddressError();\\n        if (newPercentage > 10_000) revert MaxRoyaltyError();\\n        _defaultRecipient = newRecipient;\\n        _defaultPercentage = newPercentage;\\n    }\\n\\n    /// @notice function to override royalty spec on a specific token\\n    /// @param tokenId - the token id to override royalty for\\n    /// @param newRecipient - the new royalty payout address\\n    /// @param newPercentage - the new royalty percentage, out of 10,000\\n    function _overrideTokenRoyaltyInfo(uint256 tokenId, address newRecipient, uint256 newPercentage) internal {\\n        if (newRecipient == address(0)) revert ZeroAddressError();\\n        if (newPercentage > 10_000) revert MaxRoyaltyError();\\n        _tokenOverrides[tokenId].recipient = newRecipient;\\n        _tokenOverrides[tokenId].percentage = newPercentage;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Info\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IEIP2981\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        address recipient = _defaultRecipient;\\n        uint256 percentage = _defaultPercentage;\\n        if (_tokenOverrides[tokenId].recipient != address(0)) {\\n            recipient = _tokenOverrides[tokenId].recipient;\\n            percentage = _tokenOverrides[tokenId].percentage;\\n        }\\n        return (recipient, salePrice / 10_000 * percentage); // divide first to avoid overflow\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                ERC-165 Override\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IEIP2981).interfaceId || ERC165Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            External View Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Query the default royalty receiver and percentage.\\n    /// @return Tuple containing the default royalty recipient and percentage out of 10_000\\n    function getDefaultRoyaltyRecipientAndPercentage() external view returns (address, uint256) {\\n        return (_defaultRecipient, _defaultPercentage);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/upgradeable/access/OwnableAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {EnumerableSetUpgradeable} from \\\"openzeppelin-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"openzeppelin-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev does not have specified role\\nerror NotSpecifiedRole(bytes32 role);\\n\\n/// @dev is not specified role or owner\\nerror NotRoleOrOwner(bytes32 role);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                        OwnableAccessControlUpgradeable\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title OwnableAccessControl.sol\\n/// @notice single owner, flexible access control mechanics\\n/// @dev can easily be extended by inheriting and applying additional roles\\n/// @dev by default, only the owner can grant roles but by inheriting, but you\\n///      may allow other roles to grant roles by using the internal helper.\\n/// @author transientlabs.xyz\\n/// @custom:version 2.2.2\\nabstract contract OwnableAccessControlUpgradeable is Initializable, OwnableUpgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    uint256 private _c; // counter to be able to revoke all priviledges\\n    mapping(uint256 => mapping(bytes32 => mapping(address => bool))) private _roleStatus;\\n    mapping(uint256 => mapping(bytes32 => EnumerableSetUpgradeable.AddressSet)) private _roleMembers;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param from - address that authorized the role change\\n    /// @param user - the address who's role has been changed\\n    /// @param approved - boolean indicating the user's status in role\\n    /// @param role - the bytes32 role created in the inheriting contract\\n    event RoleChange(address indexed from, address indexed user, bool indexed approved, bytes32 role);\\n\\n    /// @param from - address that authorized the revoke\\n    event AllRolesRevoked(address indexed from);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert NotSpecifiedRole(role);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOwner(bytes32 role) {\\n        if (!hasRole(role, msg.sender) && owner() != msg.sender) {\\n            revert NotRoleOrOwner(role);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param initOwner - the address of the initial owner\\n    function __OwnableAccessControl_init(address initOwner) internal onlyInitializing {\\n        __Ownable_init();\\n        _transferOwnership(initOwner);\\n        __OwnableAccessControl_init_unchained();\\n    }\\n\\n    function __OwnableAccessControl_init_unchained() internal onlyInitializing {}\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                External Role Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to revoke all roles currently present\\n    /// @dev increments the `_c` variables\\n    /// @dev requires owner privileges\\n    function revokeAllRoles() external onlyOwner {\\n        _c++;\\n        emit AllRolesRevoked(msg.sender);\\n    }\\n\\n    /// @notice function to renounce role\\n    /// @param role - bytes32 role created in inheriting contracts\\n    function renounceRole(bytes32 role) external {\\n        address[] memory members = new address[](1);\\n        members[0] = msg.sender;\\n        _setRole(role, members, false);\\n    }\\n\\n    /// @notice function to grant/revoke a role to an address\\n    /// @dev requires owner to call this function but this may be further\\n    ///      extended using the internal helper function in inheriting contracts\\n    /// @param role - bytes32 role created in inheriting contracts\\n    /// @param roleMembers - list of addresses that should have roles attached to them based on `status`\\n    /// @param status - bool whether to remove or add `roleMembers` to the `role`\\n    function setRole(bytes32 role, address[] memory roleMembers, bool status) external onlyOwner {\\n        _setRole(role, roleMembers, status);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                External View Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to see if an address is the owner\\n    /// @param role - bytes32 role created in inheriting contracts\\n    /// @param potentialRoleMember - address to check for role membership\\n    function hasRole(bytes32 role, address potentialRoleMember) public view returns (bool) {\\n        return _roleStatus[_c][role][potentialRoleMember];\\n    }\\n\\n    /// @notice function to get role members\\n    /// @param role - bytes32 role created in inheriting contracts\\n    function getRoleMembers(bytes32 role) public view returns (address[] memory) {\\n        return _roleMembers[_c][role].values();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Internal Helper Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice helper function to set addresses for a role\\n    /// @param role - bytes32 role created in inheriting contracts\\n    /// @param roleMembers - list of addresses that should have roles attached to them based on `status`\\n    /// @param status - bool whether to remove or add `roleMembers` to the `role`\\n    function _setRole(bytes32 role, address[] memory roleMembers, bool status) internal {\\n        for (uint256 i = 0; i < roleMembers.length; i++) {\\n            _roleStatus[_c][role][roleMembers[i]] = status;\\n            if (status) {\\n                _roleMembers[_c][role].add(roleMembers[i]);\\n            } else {\\n                _roleMembers[_c][role].remove(roleMembers[i]);\\n            }\\n            emit RoleChange(msg.sender, roleMembers[i], status, role);\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"lib/story-contract/src/upgradeable/StoryContractUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"openzeppelin-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {\\n    IStory, StoryNotEnabled, TokenDoesNotExist, NotTokenOwner, NotTokenCreator, NotStoryAdmin\\n} from \\\"../IStory.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Story Contract\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title Story Contract\\n/// @dev upgradeable, inheritable abstract contract implementing the Story Contract interface\\n/// @author transientlabs.xyz\\n/// @custom:version 4.0.2\\nabstract contract StoryContractUpgradeable is Initializable, IStory, ERC165Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    bool public storyEnabled;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    modifier storyMustBeEnabled() {\\n        if (!storyEnabled) revert StoryNotEnabled();\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param enabled - a bool to enable or disable Story addition\\n    function __StoryContractUpgradeable_init(bool enabled) internal {\\n        __StoryContractUpgradeable_init_unchained(enabled);\\n    }\\n\\n    /// @param enabled - a bool to enable or disable Story addition\\n    function __StoryContractUpgradeable_init_unchained(bool enabled) internal {\\n        storyEnabled = enabled;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Story Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev function to set story enabled/disabled\\n    /// @dev requires story admin\\n    /// @param enabled - a boolean setting to enable or disable Story additions\\n    function setStoryEnabled(bool enabled) external {\\n        if (!_isStoryAdmin(msg.sender)) revert NotStoryAdmin();\\n        storyEnabled = enabled;\\n    }\\n\\n    /// @inheritdoc IStory\\n    function addCreatorStory(uint256 tokenId, string calldata creatorName, string calldata story)\\n        external\\n        storyMustBeEnabled\\n    {\\n        if (!_tokenExists(tokenId)) revert TokenDoesNotExist();\\n        if (!_isCreator(msg.sender, tokenId)) revert NotTokenCreator();\\n\\n        emit CreatorStory(tokenId, msg.sender, creatorName, story);\\n    }\\n\\n    /// @inheritdoc IStory\\n    function addStory(uint256 tokenId, string calldata collectorName, string calldata story)\\n        external\\n        storyMustBeEnabled\\n    {\\n        if (!_tokenExists(tokenId)) revert TokenDoesNotExist();\\n        if (!_isTokenOwner(msg.sender, tokenId)) revert NotTokenOwner();\\n\\n        emit Story(tokenId, msg.sender, collectorName, story);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Hooks\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev function to allow access to enabling/disabling story\\n    /// @param potentialAdmin - the address to check for admin priviledges\\n    function _isStoryAdmin(address potentialAdmin) internal view virtual returns (bool);\\n\\n    /// @dev function to check if a token exists on the token contract\\n    /// @param tokenId - the token id to check for existence\\n    function _tokenExists(uint256 tokenId) internal view virtual returns (bool);\\n\\n    /// @dev function to check ownership of a token\\n    /// @param potentialOwner - the address to check for ownership of `tokenId`\\n    /// @param tokenId - the token id to check ownership against\\n    function _isTokenOwner(address potentialOwner, uint256 tokenId) internal view virtual returns (bool);\\n\\n    /// @dev function to check creatorship of a token\\n    /// @param potentialCreator - the address to check creatorship of `tokenId`\\n    /// @param tokenId - the token id to check creatorship against\\n    function _isCreator(address potentialCreator, uint256 tokenId) internal view virtual returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Overrides\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IStory).interfaceId || ERC165Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"lib/blocklist/src/BlockListUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {BlockedOperator, Unauthorized, IBlockList} from \\\"./IBlockList.sol\\\";\\nimport {IBlockListRegistry} from \\\"./IBlockListRegistry.sol\\\";\\n\\n/// @title BlockList\\n/// @author transientlabs.xyz\\n/// @notice abstract contract that can be inherited to block\\n///         approvals from non-royalty paying marketplaces\\n/// @custom:version 4.0.0\\nabstract contract BlockListUpgradeable is Initializable, IBlockList {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Public State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    IBlockListRegistry public blockListRegistry;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    event BlockListRegistryUpdated(address indexed caller, address indexed oldRegistry, address indexed newRegistry);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev modifier that can be applied to approval functions in order to block listings on marketplaces\\n    modifier notBlocked(address operator) {\\n        if (getBlockListStatus(operator)) {\\n            revert BlockedOperator();\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param blockListRegistryAddr - the initial BlockList Registry Address\\n    function __BlockList_init(address blockListRegistryAddr) internal onlyInitializing {\\n        __BlockList_init_unchained(blockListRegistryAddr);\\n    }\\n\\n    /// @param blockListRegistryAddr - the initial BlockList Registry Address\\n    function __BlockList_init_unchained(address blockListRegistryAddr) internal onlyInitializing {\\n        blockListRegistry = IBlockListRegistry(blockListRegistryAddr);\\n        emit BlockListRegistryUpdated(msg.sender, address(0), blockListRegistryAddr);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Admin Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to transfer ownership of the blockList\\n    /// @dev requires blockList owner\\n    /// @dev can be transferred to the ZERO_ADDRESS if desired\\n    /// @dev BE VERY CAREFUL USING THIS\\n    /// @param newBlockListRegistry - the address of the new BlockList registry\\n    function updateBlockListRegistry(address newBlockListRegistry) public {\\n        if (!isBlockListAdmin(msg.sender)) revert Unauthorized();\\n\\n        address oldRegistry = address(blockListRegistry);\\n        blockListRegistry = IBlockListRegistry(newBlockListRegistry);\\n        emit BlockListRegistryUpdated(msg.sender, oldRegistry, newBlockListRegistry);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                          Public Read Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IBlockList\\n    function getBlockListStatus(address operator) public view override returns (bool) {\\n        if (address(blockListRegistry).code.length == 0) return false;\\n        try blockListRegistry.getBlockListStatus(operator) returns (bool isBlocked) {\\n            return isBlocked;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Abstract function to determine if the operator is a blocklist admin.\\n    /// @param potentialAdmin - the potential admin address to check\\n    function isBlockListAdmin(address potentialAdmin) public view virtual returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"src/multi-metadata/IERC7160.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title EIP-721 Multi-Metdata Extension\\n/// @dev The ERC-165 identifier for this interface is 0x06e1bc5b.\\ninterface IERC7160 {\\n    /// @dev This event emits when a token uri is pinned and is\\n    ///  useful for indexing purposes.\\n    event TokenUriPinned(uint256 indexed tokenId, uint256 indexed index);\\n\\n    /// @dev This event emits when a token uri is unpinned and is\\n    ///  useful for indexing purposes.\\n    event TokenUriUnpinned(uint256 indexed tokenId);\\n\\n    /// @notice Get all token uris associated with a particular token\\n    /// @dev If a token uri is pinned, the index returned SHOULD be the index in the string array\\n    /// @dev This call MUST revert if the token does not exist\\n    /// @param tokenId The identifier for the nft\\n    /// @return index An unisgned integer that specifies which uri is pinned for a token (or the default uri if unpinned)\\n    /// @return uris A string array of all uris associated with a token\\n    /// @return pinned A boolean showing if the token has pinned metadata or not\\n    function tokenURIs(uint256 tokenId) external view returns (uint256 index, string[] memory uris, bool pinned);\\n\\n    /// @notice Pin a specific token uri for a particular token\\n    /// @dev This call MUST revert if the token does not exist\\n    /// @dev This call MUST emit a `TokenUriPinned` event\\n    /// @dev This call MAY emit a `MetadataUpdate` event from ERC-4096\\n    /// @param tokenId The identifier of the nft\\n    /// @param index The index in the string array returned from the `tokenURIs` function that should be pinned for the token\\n    function pinTokenURI(uint256 tokenId, uint256 index) external;\\n\\n    /// @notice Unpin metadata for a particular token\\n    /// @dev This call MUST revert if the token does not exist\\n    /// @dev This call MUST emit a `TokenUriUnpinned` event\\n    /// @dev This call MAY emit a `MetadataUpdate` event from ERC-4096\\n    /// @dev It is up to the developer to define what this function does and is intentionally left open-ended\\n    /// @param tokenId The identifier of the nft\\n    function unpinTokenURI(uint256 tokenId) external;\\n\\n    /// @notice Check on-chain if a token id has a pinned uri or not\\n    /// @dev This call MUST revert if the token does not exist\\n    /// @dev Useful for on-chain mechanics that don't require the tokenURIs themselves\\n    /// @param tokenId The identifier of the nft\\n    /// @return pinned A bool specifying if a token has metadata pinned or not\\n    function hasPinnedTokenURI(uint256 tokenId) external view returns (bool pinned);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/royalties/IEIP2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IEIP2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param tokenId - the NFT asset queried for royalty information\\n    /// @param salePrice - the sale price of the NFT asset specified by tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for salePrice\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/story-contract/src/IStory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev story additions are not enabled\\nerror StoryNotEnabled();\\n\\n/// @dev token does not exist\\nerror TokenDoesNotExist();\\n\\n/// @dev caller is not the token owner\\nerror NotTokenOwner();\\n\\n/// @dev caller is not the token creator\\nerror NotTokenCreator();\\n\\n/// @dev caller is not a story admin\\nerror NotStoryAdmin();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            IStory\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title Story Contract Interface\\n/// @author transientlabs.xyz\\n/// @custom:version 4.0.2\\ninterface IStory {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice event describing a creator story getting added to a token\\n    /// @dev this events stores creator stories on chain in the event log\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param creatorAddress - the address of the creator of the token\\n    /// @param creatorName - string representation of the creator's name\\n    /// @param story - the story written and attached to the token id\\n    event CreatorStory(uint256 indexed tokenId, address indexed creatorAddress, string creatorName, string story);\\n\\n    /// @notice event describing a collector story getting added to a token\\n    /// @dev this events stores collector stories on chain in the event log\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param collectorAddress - the address of the collector of the token\\n    /// @param collectorName - string representation of the collectors's name\\n    /// @param story - the story written and attached to the token id\\n    event Story(uint256 indexed tokenId, address indexed collectorAddress, string collectorName, string story);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Story Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to let the creator add a story to any token they have created\\n    /// @dev depending on the implementation, this function may be restricted in various ways, such as\\n    ///      limiting the number of times the creator may write a story.\\n    /// @dev this function MUST emit the CreatorStory event each time it is called\\n    /// @dev this function MUST implement logic to restrict access to only the creator\\n    /// @dev this function MUST revert if a story is written to a non-existent token\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param creatorName - string representation of the creator's name\\n    /// @param story - the story written and attached to the token id\\n    function addCreatorStory(uint256 tokenId, string calldata creatorName, string calldata story) external;\\n\\n    /// @notice function to let collectors add a story to any token they own\\n    /// @dev depending on the implementation, this function may be restricted in various ways, such as\\n    ///      limiting the number of times a collector may write a story.\\n    /// @dev this function MUST emit the Story event each time it is called\\n    /// @dev this function MUST implement logic to restrict access to only the owner of the token\\n    /// @dev this function MUST revert if a story is written to a non-existent token\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param collectorName - string representation of the collectors's name\\n    /// @param story - the story written and attached to the token id\\n    function addStory(uint256 tokenId, string calldata collectorName, string calldata story) external;\\n}\\n\"\r\n    },\r\n    \"lib/blocklist/src/IBlockList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev blocked operator error\\nerror BlockedOperator();\\n\\n/// @dev unauthorized to call fn method\\nerror Unauthorized();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                IBlockList\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title IBlockList\\n/// @notice interface for the BlockList Contract\\n/// @author transientlabs.xyz\\n/// @custom:version 4.0.0\\ninterface IBlockList {\\n    /// @notice function to get blocklist status with True meaning that the operator is blocked\\n    /// @dev must return false if the blocklist registry is an EOA or an incompatible contract, true/false if compatible\\n    /// @param operator - operator to check against for blocking\\n    function getBlockListStatus(address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blocklist/src/IBlockListRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title BlockList Registry\\n/// @notice interface for the BlockListRegistry Contract\\n/// @author transientlabs.xyz\\n/// @custom:version 4.0.0\\ninterface IBlockListRegistry {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    event BlockListStatusChange(address indexed user, address indexed operator, bool indexed status);\\n\\n    event BlockListCleared(address indexed user);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                          Public Read Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to get blocklist status with True meaning that the operator is blocked\\n    function getBlockListStatus(address operator) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                          Public Write Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set the block list status for multiple operators\\n    /// @dev must be called by the blockList owner\\n    function setBlockListStatus(address[] calldata operators, bool status) external;\\n\\n    /// @notice function to clear the block list status\\n    /// @dev must be called by the blockList owner\\n    function clearBlockList() external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"blocklist/=lib/blocklist/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"sstore2/=lib/sstore2/contracts/\",\r\n      \"story-contract/=lib/story-contract/src/\",\r\n      \"tl-blocklist/=lib/blocklist/src/\",\r\n      \"tl-creator-contracts/=src/\",\r\n      \"tl-sol-tools/=lib/tl-sol-tools/src/\",\r\n      \"tl-story/=lib/story-contract/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AirdropTooFewAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchSizeTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockedOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyTokenURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenURIIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxRoyaltyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensSpecified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"NotRoleOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"NotSpecifiedRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStoryAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoryNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AllRolesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"BlockListRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"CreatorStory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectorName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"Story\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TokenUriPinned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUriUnpinned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVED_MINT_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"addCreatorStory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"addStory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"addTokenUris\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"batchMintUltra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockListRegistry\",\"outputs\":[{\"internalType\":\"contract IBlockListRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"externalMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getBlockListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyRecipientAndPercentage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"hasPinnedTokenURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"potentialRoleMember\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultRoyaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enableStory\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"blockListRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"potentialAdmin\",\"type\":\"address\"}],\"name\":\"isBlockListAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercent\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pinTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeAllRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovedMintContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"roleMembers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setStoryEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"pinned\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unpinTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlockListRegistry\",\"type\":\"address\"}],\"name\":\"updateBlockListRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721TLM", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}