{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC-721/PeripheralERC721Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\\\";\\nimport \\\"./IPeripheralERC721Pool.sol\\\";\\nimport \\\"./IERC721Pool.sol\\\";\\n\\n/// @title PeripheralERC721Pool\\n/// @author Hifi\\ncontract PeripheralERC721Pool is IPeripheralERC721Pool, Ownable {\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @inheritdoc IPeripheralERC721Pool\\n    function bulkDeposit(IERC721Pool pool, uint256[] calldata ids) external override {\\n        // Checks: ids length must be greater than zero\\n        if (ids.length == 0) {\\n            revert PeripheralERC721Pool__InsufficientIn();\\n        }\\n\\n        IERC721 erc721Asset = IERC721(pool.asset());\\n\\n        // Effects: Approve the pool to transfer the NFTs.\\n        if (!erc721Asset.isApprovedForAll(address(this), address(pool)))\\n            erc721Asset.setApprovalForAll(address(pool), true);\\n\\n        // `msg.sender` is the owner of the NFTs who will receive the pool tokens.\\n        for (uint256 i = 0; i < ids.length; ) {\\n            // Interactions: Transfer the NFTs from caller to this contract.\\n            // The transfer will revert if this contract is not approved to transfer the NFT.\\n            erc721Asset.transferFrom(msg.sender, address(this), ids[i]);\\n\\n            // Effects: transfer NFTs from this contract to the pool and mint pool tokens to msg.sender.\\n            pool.deposit(ids[i], msg.sender);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit BulkDeposit(address(pool), ids, msg.sender);\\n    }\\n\\n    /// @inheritdoc IPeripheralERC721Pool\\n    function bulkWithdraw(IERC721Pool pool, uint256[] calldata ids) public override {\\n        uint256 idsLength = ids.length;\\n\\n        withdrawInternal(pool, idsLength);\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            // `msg.sender` is the owner of the pool tokens who will receive the NFTs.\\n            // Effects: transfer NFTs from the pool to msg.sender in exchange for pool tokens.\\n            pool.withdraw(ids[i], msg.sender);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit BulkWithdraw(address(pool), ids, msg.sender);\\n    }\\n\\n    /// @inheritdoc IPeripheralERC721Pool\\n    function withdrawAvailable(IERC721Pool pool, uint256[] calldata ids) external override {\\n        uint256 idsLength = ids.length;\\n\\n        withdrawInternal(pool, idsLength);\\n\\n        uint256[] memory withdrawnIds = new uint256[](idsLength);\\n        uint256 withdrawnCount;\\n        for (uint256 i; i < idsLength; ) {\\n            // `msg.sender` is the owner of the pool tokens who will receive the NFTs.\\n            // Effects: transfer available NFTs from the pool to msg.sender in exchange for pool tokens\\n            if (pool.holdingContains(ids[i])) {\\n                pool.withdraw(ids[i], msg.sender);\\n                withdrawnIds[withdrawnCount] = ids[i];\\n                withdrawnCount++;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (withdrawnCount == 0) {\\n            revert PeripheralERC721Pool__NoNFTsWithdrawn();\\n        }\\n\\n        // Resize the withdrawnIds array to fit the actual number of withdrawn NFTs\\n        assembly {\\n            mstore(withdrawnIds, withdrawnCount)\\n        }\\n        pool.transfer(msg.sender, (idsLength - withdrawnCount) * 10**18);\\n        emit WithdrawAvailable(address(pool), withdrawnIds, msg.sender);\\n    }\\n\\n    /// @inheritdoc IPeripheralERC721Pool\\n    function setENSName(address registrar, string memory name) external override onlyOwner returns (bytes32) {\\n        bytes32 nodeHash = IReverseRegistrar(registrar).setName(name);\\n        return nodeHash;\\n    }\\n\\n    /// @dev See the documentation for the public functions that call this internal function.\\n    function withdrawInternal(IERC721Pool pool, uint256 idsLength) internal {\\n        // Checks: ids length must be greater than zero\\n        if (idsLength == 0) {\\n            revert PeripheralERC721Pool__InsufficientIn();\\n        }\\n\\n        // Checks: The caller must have allowed this contract to transfer the pool tokens.\\n        if (pool.allowance(msg.sender, address(this)) < idsLength * 10**18)\\n            revert PeripheralERC721Pool__UnapprovedOperator();\\n\\n        // Interactions: Transfer the pool token from caller to this contract.\\n        pool.transferFrom(msg.sender, address(this), idsLength * 10**18);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC-721/IPeripheralERC721Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IERC721Pool.sol\\\";\\n\\n/// @title IPeripheralERC721Pool\\n/// @author Hifi\\ninterface IPeripheralERC721Pool {\\n    /// CUSTOM ERRORS ///\\n\\n    error PeripheralERC721Pool__InsufficientIn();\\n    error PeripheralERC721Pool__NoNFTsWithdrawn();\\n    error PeripheralERC721Pool__UnapprovedOperator();\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when NFTs are deposited in exchange for an equivalent amount of pool tokens.\\n    /// @param pool The address of the pool.\\n    /// @param ids The asset token IDs sent from the user's account to the pool.\\n    /// @param caller The caller of the function equal to msg.sender.\\n    event BulkDeposit(address pool, uint256[] ids, address caller);\\n\\n    /// @notice Emitted when NFTs are withdrawn from the pool in exchange for an equivalent amount of pool tokens.\\n    /// @param pool The address of the pool.\\n    /// @param ids The asset token IDs released from the pool.\\n    /// @param caller The caller of the function equal to msg.sender.\\n    event BulkWithdraw(address pool, uint256[] ids, address caller);\\n\\n    /// @notice Emitted when as many as available NFTs are withdrawn from the pool in exchange for an equal amount of pool tokens.\\n    /// @param pool The address of the pool.\\n    /// @param withdrawnIds The asset token IDs released from the pool.\\n    /// @param caller The caller of the function equal to msg.sender.\\n    event WithdrawAvailable(address pool, uint256[] withdrawnIds, address caller);\\n\\n    /// NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Deposit NFTs in exchange for an equivalent amount of pool tokens.\\n    ///\\n    /// @dev Emits a {Deposit} event.\\n    ///\\n    /// @dev Requirements:\\n    ///\\n    /// - The length of `ids` must be greater than zero.\\n    /// - The caller must have allowed the pool to transfer the NFTs.\\n    /// - The address `beneficiary` must not be the zero address.\\n    ///\\n    /// @param pool The address of the pool.\\n    /// @param ids The asset token IDs sent from the user's account to the pool.\\n    function bulkDeposit(IERC721Pool pool, uint256[] calldata ids) external;\\n\\n    /// @notice Withdraw specified NFTs in exchange for an equivalent amount of pool tokens.\\n    ///\\n    /// @dev Emits a {Withdraw} event.\\n    ///\\n    /// @dev Requirements:\\n    ///\\n    /// - The length of `ids` must be greater than zero.\\n    /// - The caller must have allowed the PeripheralERC721Pool to transfer the pool tokens by calling\\n    ///   `approve()` on the pool token contract with sufficient allowance before calling this function.\\n    ///\\n    /// @param pool The address of the pool.\\n    /// @param ids The asset token IDs to be released from the pool.\\n    function bulkWithdraw(IERC721Pool pool, uint256[] calldata ids) external;\\n\\n    /// @notice Allows the factory to set the ENS name for the pool.\\n    ///\\n    /// @dev Requirements:\\n    /// - The caller must be the owner.\\n    ///\\n    /// @param registrar The address of the ENS registrar.\\n    /// @param name The name to set.\\n    /// @return The ENS node hash.\\n    function setENSName(address registrar, string memory name) external returns (bytes32);\\n\\n    /// @notice Withdraw specified available non-overlapping NFTs in exchange for an equivalent amount of pool tokens.\\n    ///\\n    /// @dev Emits a {WithdrawAvailable} event.\\n    ///\\n    /// @dev Requirements:\\n    ///\\n    /// - The length of `ids` must be greater than zero.\\n    /// - The caller must have allowed the PeripheralERC721Pool to transfer the pool tokens.\\n    /// - The address `beneficiary` must not be the zero address.\\n    ///\\n    /// @param pool The address of the pool.\\n    /// @param ids The asset token IDs to be released from the pool.\\n    function withdrawAvailable(IERC721Pool pool, uint256[] calldata ids) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ERC-721/IERC721Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IERC20Wnft.sol\\\";\\n\\n/// @title IERC721Pool\\n/// @author Hifi\\ninterface IERC721Pool is IERC20Wnft {\\n    /// CUSTOM ERRORS ///\\n\\n    error ERC721Pool__CallerNotFactory(address factory, address caller);\\n    error ERC721Pool__MustContainExactlyOneNFT();\\n    error ERC721Pool__PoolFrozen();\\n    error ERC721Pool__NFTAlreadyInPool(uint256 id);\\n    error ERC721Pool__NFTNotFoundInPool(uint256 id);\\n    error ERC721Pool__ZeroAddress();\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when NFT are deposited and an equal amount of pool tokens are minted.\\n    /// @param id The asset token ID sent from the user's account to the pool.\\n    /// @param beneficiary The address to receive the pool tokens.\\n    /// @param caller The caller of the function equal to msg.sender.\\n    event Deposit(uint256 id, address beneficiary, address caller);\\n\\n    /// @notice Emitted when the last NFT of a pool is rescued.\\n    /// @param lastNFT The last NFT of the pool.\\n    /// @param to The address to which the NFT was sent.\\n    event RescueLastNFT(uint256 lastNFT, address to);\\n\\n    /// @notice Emitted when NFT are withdrawn from the pool in exchange for an equal amount of pool tokens.\\n    /// @param id The asset token IDs released from the pool.\\n    /// @param beneficiary The address to receive the NFT.\\n    /// @param caller The caller of the function equal to msg.sender.\\n    event Withdraw(uint256 id, address beneficiary, address caller);\\n\\n    /// CONSTANT FUNCTIONS ///\\n\\n    /// @notice Returns the asset token ID held at index.\\n    /// @param index The index to check.\\n    function holdingAt(uint256 index) external view returns (uint256);\\n\\n    /// @notice Returns true if the asset token ID is held in the pool.\\n    /// @param id The asset token ID to check.\\n    function holdingContains(uint256 id) external view returns (bool);\\n\\n    /// @notice Returns the total number of asset token IDs held.\\n    function holdingsLength() external view returns (uint256);\\n\\n    /// @notice A boolean flag indicating whether the pool is frozen.\\n    function poolFrozen() external view returns (bool);\\n\\n    /// NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Deposit NFT in exchange for an equivalent amount of pool tokens.\\n    ///\\n    /// @dev Emits a {Deposit} event.\\n    ///\\n    /// @dev Requirements:\\n    /// - The caller must have allowed the Pool to transfer the NFT.\\n    /// - The pool must not be frozen.\\n    /// - The address `beneficiary` must not be the zero address.\\n    ///\\n    /// @param id The asset token ID sent from the user's account to the pool.\\n    /// @param beneficiary The address to receive the pool tokens. Can be the caller themselves or any other address.\\n    function deposit(uint256 id, address beneficiary) external;\\n\\n    /// @notice Allows the factory to rescue the last NFT in the pool and set the pool to frozen.\\n    ///\\n    /// Emits a {RescueLastNFT} event.\\n    ///\\n    /// @dev Requirements:\\n    /// - The caller must be the factory.\\n    /// - The pool must only hold one NFT.\\n    ///\\n    /// @param to The address to send the NFT to.\\n    function rescueLastNFT(address to) external;\\n\\n    /// @notice Allows the factory to set the ENS name for the pool.\\n    ///\\n    /// Emits a {ENSNameSet} event.\\n    ///\\n    /// @dev Requirements:\\n    /// - The caller must be the factory.\\n    ///\\n    /// @param registrar The address of the ENS registrar.\\n    /// @param name The name to set.\\n    /// @return The ENS node hash.\\n    function setENSName(address registrar, string memory name) external returns (bytes32);\\n\\n    /// @notice Withdraws a specified NFT in exchange for an equivalent amount of pool tokens.\\n    ///\\n    /// @dev Emits a {Withdraw} event.\\n    ///\\n    /// @dev Requirements:\\n    /// - The pool must not be frozen.\\n    /// - The address `beneficiary` must not be the zero address.\\n    /// - The specified NFT must be held in the pool.\\n    /// - The caller must hold the equivalent amount of pool tokens\\n    ///\\n    /// @param id The asset token ID to be released from the pool.\\n    /// @param beneficiary The address to receive the NFT. Can be the caller themselves or any other address.\\n    function withdraw(uint256 id, address beneficiary) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC-721/IERC20Wnft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title IERC20Wnft\\n/// @author Hifi\\ninterface IERC20Wnft is IERC20Permit, IERC20Metadata {\\n    /// CUSTOM ERRORS ///\\n\\n    error ERC20Wnft__Forbidden();\\n    error ERC20Wnft__InvalidSignature();\\n    error ERC20Wnft__PermitExpired();\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when the contract is initialized.\\n    /// @param name The ERC-20 name.\\n    /// @param symbol The ERC-20 symbol.\\n    /// @param asset The underlying ERC-721 asset contract address.\\n    event Initialize(string name, string symbol, address indexed asset);\\n\\n    /// CONSTANT FUNCTIONS ///\\n\\n    /// @notice Returns the address of the underlying ERC-721 asset.\\n    function asset() external view returns (address);\\n\\n    /// @notice Returns the factory contract address.\\n    function factory() external view returns (address);\\n\\n    /// NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Initializes the contract with the given values.\\n    ///\\n    /// @dev Emits an {Initialize} event.\\n    ///\\n    /// @dev Requirements:\\n    /// - Can only be called by the factory.\\n    ///\\n    /// @param name The ERC-20 name.\\n    /// @param symbol The ERC-20 symbol.\\n    /// @param asset The underlying ERC-721 asset contract address.\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address asset\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"PeripheralERC721Pool__InsufficientIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeripheralERC721Pool__NoNFTsWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeripheralERC721Pool__UnapprovedOperator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"BulkDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"BulkWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"WithdrawAvailable\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"bulkDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"bulkWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setENSName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PeripheralERC721Pool", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}