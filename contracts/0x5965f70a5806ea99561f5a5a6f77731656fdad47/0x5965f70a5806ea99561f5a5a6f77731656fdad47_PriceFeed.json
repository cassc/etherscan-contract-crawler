{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PriceFeed.f.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\\nlibrary Fixed256x18 {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return (((a * ONE) - 1) / b) + 1;\\n        }\\n    }\\n\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\\nlibrary MathUtils {\\n    // --- Constants ---\\n\\n    /// @notice Represents 100%.\\n    /// @dev 1e18 is the scaling factor (100% == 1e18).\\n    uint256 public constant _100_PERCENT = Fixed256x18.ONE;\\n\\n    /// @notice Precision for Nominal ICR (independent of price).\\n    /// @dev Rationale for the value:\\n    /// - Making it \u201ctoo high\u201d could lead to overflows.\\n    /// - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from floor division.\\n    ///\\n    /// This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 collateralToken,\\n    /// and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n    uint256 internal constant _NICR_PRECISION = 1e20;\\n\\n    /// @notice Number of minutes in 1000 years.\\n    uint256 internal constant _MINUTES_IN_1000_YEARS = 1000 * 365 days / 1 minutes;\\n\\n    // --- Functions ---\\n\\n    /// @notice Multiplies two decimal numbers and use normal rounding rules:\\n    /// - round product up if 19'th mantissa digit >= 5\\n    /// - round product down if 19'th mantissa digit < 5.\\n    /// @param x First number.\\n    /// @param y Second number.\\n    function _decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        decProd = (x * y + Fixed256x18.ONE / 2) / Fixed256x18.ONE;\\n    }\\n\\n    /// @notice Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    ///\\n    /// @dev Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. The exponent is capped to\\n    /// avoid reverting due to overflow.\\n    ///\\n    /// If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    /// negligibly different from just passing the cap, since the decayed base rate will be 0 for 1000 years or > 1000\\n    /// years.\\n    /// @param base The decimal base.\\n    /// @param exponent The exponent.\\n    /// @return The result of the exponentiation.\\n    function _decPow(uint256 base, uint256 exponent) internal pure returns (uint256) {\\n        if (exponent == 0) {\\n            return Fixed256x18.ONE;\\n        }\\n\\n        uint256 y = Fixed256x18.ONE;\\n        uint256 x = base;\\n        uint256 n = Math.min(exponent, _MINUTES_IN_1000_YEARS); // cap to avoid overflow\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 != 0) {\\n                y = _decMul(x, y);\\n            }\\n            x = _decMul(x, x);\\n            n /= 2;\\n        }\\n\\n        return _decMul(x, y);\\n    }\\n\\n    /// @notice Computes the Nominal Individual Collateral Ratio (NICR) for given collateral and debt. If debt is zero,\\n    /// it returns the maximal value for uint256 (represents \\\"infinite\\\" CR).\\n    /// @param collateral Collateral amount.\\n    /// @param debt Debt amount.\\n    /// @return NICR.\\n    function _computeNominalCR(uint256 collateral, uint256 debt) internal pure returns (uint256) {\\n        return debt > 0 ? collateral * _NICR_PRECISION / debt : type(uint256).max;\\n    }\\n\\n    /// @notice Computes the Collateral Ratio for given collateral, debt and price. If debt is zero, it returns the\\n    /// maximal value for uint256 (represents \\\"infinite\\\" CR).\\n    /// @param collateral Collateral amount.\\n    /// @param debt Debt amount.\\n    /// @param price Collateral price.\\n    /// @return Collateral ratio.\\n    function _computeCR(uint256 collateral, uint256 debt, uint256 price) internal pure returns (uint256) {\\n        return debt > 0 ? collateral * price / debt : type(uint256).max;\\n    }\\n}\\n\\ninterface IPriceOracle {\\n    // --- Errors ---\\n\\n    /// @dev Contract initialized with an invalid deviation parameter.\\n    error InvalidDeviation();\\n\\n    // --- Types ---\\n\\n    struct PriceOracleResponse {\\n        bool isBrokenOrFrozen;\\n        bool priceChangeAboveMax;\\n        uint256 price;\\n    }\\n\\n    // --- Functions ---\\n\\n    /// @dev Return price oracle response which consists the following information: oracle is broken or frozen, the\\n    /// price change between two rounds is more than max, and the price.\\n    function getPriceOracleResponse() external returns (PriceOracleResponse memory);\\n\\n    /// @dev Maximum time period allowed since oracle latest round data timestamp, beyond which oracle is considered\\n    /// frozen.\\n    function timeout() external view returns (uint256);\\n\\n    /// @dev Used to convert a price answer to an 18-digit precision uint.\\n    function TARGET_DIGITS() external view returns (uint256);\\n\\n    /// @dev price deviation for the oracle in percentage.\\n    function DEVIATION() external view returns (uint256);\\n}\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n\\n    /// @dev Last good price has been updated.\\n    event LastGoodPriceUpdated(uint256 lastGoodPrice);\\n\\n    /// @dev Price difference between oracles has been updated.\\n    /// @param priceDifferenceBetweenOracles New price difference between oracles.\\n    event PriceDifferenceBetweenOraclesUpdated(uint256 priceDifferenceBetweenOracles);\\n\\n    /// @dev Primary oracle has been updated.\\n    /// @param primaryOracle New primary oracle.\\n    event PrimaryOracleUpdated(IPriceOracle primaryOracle);\\n\\n    /// @dev Secondary oracle has been updated.\\n    /// @param secondaryOracle New secondary oracle.\\n    event SecondaryOracleUpdated(IPriceOracle secondaryOracle);\\n\\n    // --- Errors ---\\n\\n    /// @dev Invalid primary oracle.\\n    error InvalidPrimaryOracle();\\n\\n    /// @dev Invalid secondary oracle.\\n    error InvalidSecondaryOracle();\\n\\n    /// @dev Primary oracle is broken or frozen or has bad result.\\n    error PrimaryOracleBrokenOrFrozenOrBadResult();\\n\\n    /// @dev Invalid price difference between oracles.\\n    error InvalidPriceDifferenceBetweenOracles();\\n\\n    // --- Functions ---\\n\\n    /// @dev Return primary oracle address.\\n    function primaryOracle() external returns (IPriceOracle);\\n\\n    /// @dev Return secondary oracle address\\n    function secondaryOracle() external returns (IPriceOracle);\\n\\n    /// @dev The last good price seen from an oracle by Raft.\\n    function lastGoodPrice() external returns (uint256);\\n\\n    /// @dev The maximum relative price difference between two oracle responses.\\n    function priceDifferenceBetweenOracles() external returns (uint256);\\n\\n    /// @dev Set primary oracle address.\\n    /// @param newPrimaryOracle Primary oracle address.\\n    function setPrimaryOracle(IPriceOracle newPrimaryOracle) external;\\n\\n    /// @dev Set secondary oracle address.\\n    /// @param newSecondaryOracle Secondary oracle address.\\n    function setSecondaryOracle(IPriceOracle newSecondaryOracle) external;\\n\\n    /// @dev Set the maximum relative price difference between two oracle responses.\\n    /// @param newPriceDifferenceBetweenOracles The maximum relative price difference between two oracle responses.\\n    function setPriceDifferenceBetweenOracles(uint256 newPriceDifferenceBetweenOracles) external;\\n\\n    /// @dev Returns the latest price obtained from the Oracle. Called by Raft functions that require a current price.\\n    ///\\n    /// Also callable by anyone externally.\\n    /// Non-view function - it stores the last good price seen by Raft.\\n    ///\\n    /// Uses a primary oracle and a fallback oracle in case primary fails. If both fail,\\n    /// it uses the last good price seen by Raft.\\n    ///\\n    /// @return currentPrice Returned price.\\n    /// @return deviation Deviation of the reported price in percentage.\\n    /// @notice Actual returned price is in range `currentPrice` +/- `currentPrice * deviation / ONE`\\n    function fetchPrice() external returns (uint256 currentPrice, uint256 deviation);\\n}\\n\\ncontract PriceFeed is IPriceFeed, Ownable2Step {\\n    // --- Types ---\\n\\n    using Fixed256x18 for uint256;\\n\\n    // --- Constants ---\\n\\n    uint256 private constant MIN_PRICE_DIFFERENCE_BETWEEN_ORACLES = 1e15; // 0.1%\\n    uint256 private constant MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES = 1e17; // 10%\\n\\n    // --- Variables ---\\n\\n    IPriceOracle public override primaryOracle;\\n    IPriceOracle public override secondaryOracle;\\n\\n    uint256 public override lastGoodPrice;\\n\\n    uint256 public override priceDifferenceBetweenOracles;\\n\\n    // --- Constructor ---\\n\\n    constructor(IPriceOracle primaryOracle_, IPriceOracle secondaryOracle_, uint256 priceDifferenceBetweenOracles_) {\\n        _setPrimaryOracle(primaryOracle_);\\n        _setSecondaryOracle(secondaryOracle_);\\n        _setPriceDifferenceBetweenOracle(priceDifferenceBetweenOracles_);\\n    }\\n\\n    // --- Functions ---\\n\\n    function setPrimaryOracle(IPriceOracle newPrimaryOracle) external override onlyOwner {\\n        _setPrimaryOracle(newPrimaryOracle);\\n    }\\n\\n    function setSecondaryOracle(IPriceOracle newSecondaryOracle) external override onlyOwner {\\n        _setSecondaryOracle(newSecondaryOracle);\\n    }\\n\\n    function setPriceDifferenceBetweenOracles(uint256 newPriceDifferenceBetweenOracles) external override onlyOwner {\\n        _setPriceDifferenceBetweenOracle(newPriceDifferenceBetweenOracles);\\n    }\\n\\n    function fetchPrice() external override returns (uint256, uint256) {\\n        IPriceOracle.PriceOracleResponse memory primaryOracleResponse = primaryOracle.getPriceOracleResponse();\\n        // If primary oracle is broken or frozen, try secondary oracle\\n        if (primaryOracleResponse.isBrokenOrFrozen) {\\n            // If secondary oracle is broken or frozen, then both oracles are untrusted, so return the last good price\\n            IPriceOracle.PriceOracleResponse memory secondaryOracleResponse = secondaryOracle.getPriceOracleResponse();\\n            if (secondaryOracleResponse.isBrokenOrFrozen || secondaryOracleResponse.priceChangeAboveMax) {\\n                return (lastGoodPrice, Math.max(primaryOracle.DEVIATION(), secondaryOracle.DEVIATION()));\\n            }\\n\\n            return (_storePrice(secondaryOracleResponse.price), secondaryOracle.DEVIATION());\\n        }\\n\\n        // If primary oracle price has changed by > MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND between two consecutive\\n        // rounds, compare it to secondary oracle's price\\n        if (primaryOracleResponse.priceChangeAboveMax) {\\n            IPriceOracle.PriceOracleResponse memory secondaryOracleResponse = secondaryOracle.getPriceOracleResponse();\\n            // If secondary oracle is broken or frozen, then both oracles are untrusted, so return the last good price\\n            if (secondaryOracleResponse.isBrokenOrFrozen) {\\n                return (lastGoodPrice, Math.max(primaryOracle.DEVIATION(), secondaryOracle.DEVIATION()));\\n            }\\n\\n            /*\\n            * If the secondary oracle is live and both oracles have a similar price, conclude that the primary oracle's\\n            * large price deviation between two consecutive rounds were likely a legitimate market price movement, so\\n            * continue using primary oracle\\n            */\\n            if (_bothOraclesSimilarPrice(primaryOracleResponse.price, secondaryOracleResponse.price)) {\\n                return (_storePrice(primaryOracleResponse.price), primaryOracle.DEVIATION());\\n            }\\n\\n            // If both oracle are live and have different prices, return the price that is a lower changed between the\\n            // two oracle's prices\\n            uint256 price = _getPriceWithLowerChange(primaryOracleResponse.price, secondaryOracleResponse.price);\\n            uint256 deviation = (price == primaryOracleResponse.price)\\n                ? primaryOracle.DEVIATION()\\n                : (\\n                    (price == secondaryOracleResponse.price)\\n                        ? secondaryOracle.DEVIATION()\\n                        : Math.max(primaryOracle.DEVIATION(), secondaryOracle.DEVIATION())\\n                );\\n            return (_storePrice(price), deviation);\\n        }\\n\\n        // If primary oracle is working, return primary oracle current price\\n        return (_storePrice(primaryOracleResponse.price), primaryOracle.DEVIATION());\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _bothOraclesSimilarPrice(\\n        uint256 primaryOraclePrice,\\n        uint256 secondaryOraclePrice\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // Get the relative price difference between the oracles. Use the lower price as the denominator, i.e. the\\n        // reference for the calculation.\\n        uint256 minPrice = Math.min(primaryOraclePrice, secondaryOraclePrice);\\n        uint256 maxPrice = Math.max(primaryOraclePrice, secondaryOraclePrice);\\n        uint256 percentPriceDifference = (maxPrice - minPrice).divDown(minPrice);\\n\\n        /*\\n        * Return true if the relative price difference is <= 3%: if so, we assume both oracles are probably reporting\\n        * the honest market price, as it is unlikely that both have been broken/hacked and are still in-sync.\\n        */\\n        return percentPriceDifference <= priceDifferenceBetweenOracles;\\n    }\\n\\n    // @dev Returns one of oracles' prices that deviates least from the last good price.\\n    //      If both oracles' prices are above the last good price, return the lower one.\\n    //      If both oracles' prices are below the last good price, return the higher one.\\n    //      Otherwise, return the last good price.\\n    function _getPriceWithLowerChange(\\n        uint256 primaryOraclePrice,\\n        uint256 secondaryOraclePrice\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (primaryOraclePrice > lastGoodPrice && secondaryOraclePrice > lastGoodPrice) {\\n            return Math.min(primaryOraclePrice, secondaryOraclePrice);\\n        }\\n        if (primaryOraclePrice < lastGoodPrice && secondaryOraclePrice < lastGoodPrice) {\\n            return Math.max(primaryOraclePrice, secondaryOraclePrice);\\n        }\\n        return lastGoodPrice;\\n    }\\n\\n    function _setPrimaryOracle(IPriceOracle newPrimaryOracle) internal {\\n        if (address(newPrimaryOracle) == address(0)) {\\n            revert InvalidPrimaryOracle();\\n        }\\n\\n        IPriceOracle.PriceOracleResponse memory primaryOracleResponse = newPrimaryOracle.getPriceOracleResponse();\\n\\n        if (primaryOracleResponse.isBrokenOrFrozen || primaryOracleResponse.priceChangeAboveMax) {\\n            revert PrimaryOracleBrokenOrFrozenOrBadResult();\\n        }\\n\\n        primaryOracle = newPrimaryOracle;\\n\\n        // Get an initial price from primary oracle to serve as first reference for lastGoodPrice\\n        _storePrice(primaryOracleResponse.price);\\n\\n        emit PrimaryOracleUpdated(newPrimaryOracle);\\n    }\\n\\n    function _setSecondaryOracle(IPriceOracle newSecondaryOracle) internal {\\n        if (address(newSecondaryOracle) == address(0)) {\\n            revert InvalidSecondaryOracle();\\n        }\\n\\n        secondaryOracle = newSecondaryOracle;\\n\\n        emit SecondaryOracleUpdated(newSecondaryOracle);\\n    }\\n\\n    function _setPriceDifferenceBetweenOracle(uint256 newPriceDifferenceBetweenOracles) internal {\\n        if (\\n            newPriceDifferenceBetweenOracles < MIN_PRICE_DIFFERENCE_BETWEEN_ORACLES\\n                || newPriceDifferenceBetweenOracles > MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES\\n        ) {\\n            revert InvalidPriceDifferenceBetweenOracles();\\n        }\\n\\n        priceDifferenceBetweenOracles = newPriceDifferenceBetweenOracles;\\n\\n        emit PriceDifferenceBetweenOraclesUpdated(newPriceDifferenceBetweenOracles);\\n    }\\n\\n    function _storePrice(uint256 currentPrice) internal returns (uint256) {\\n        lastGoodPrice = currentPrice;\\n        emit LastGoodPriceUpdated(currentPrice);\\n        return currentPrice;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@balancer-labs/=node_modules/@balancer-labs/\",\r\n      \"@balancer-labs/v2-interfaces/contracts/=lib/balancer-v2-monorepo/pkg/interfaces/contracts/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@redstone-finance/=node_modules/@redstone-finance/\",\r\n      \"@smartcontractkit/chainlink/=lib/chainlink/contracts/src/v0.8/\",\r\n      \"@tempusfinance/=node_modules/@tempusfinance/\",\r\n      \"@tempusfinance/tempus-utils/contracts/=lib/tempus-utils/contracts/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"tempus-utils/=lib/tempus-utils/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"primaryOracle_\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"secondaryOracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceDifferenceBetweenOracles_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidPriceDifferenceBetweenOracles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrimaryOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSecondaryOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrimaryOracleBrokenOrFrozenOrBadResult\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastGoodPrice\",\"type\":\"uint256\"}],\"name\":\"LastGoodPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceDifferenceBetweenOracles\",\"type\":\"uint256\"}],\"name\":\"PriceDifferenceBetweenOraclesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceOracle\",\"name\":\"primaryOracle\",\"type\":\"address\"}],\"name\":\"PrimaryOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceOracle\",\"name\":\"secondaryOracle\",\"type\":\"address\"}],\"name\":\"SecondaryOracleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGoodPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDifferenceBetweenOracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceDifferenceBetweenOracles\",\"type\":\"uint256\"}],\"name\":\"setPriceDifferenceBetweenOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"newPrimaryOracle\",\"type\":\"address\"}],\"name\":\"setPrimaryOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"newSecondaryOracle\",\"type\":\"address\"}],\"name\":\"setSecondaryOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriceFeed", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "000000000000000000000000039e5eeb738bf371d9e372cd3e3b58e5991d703700000000000000000000000088df8b57b671f3b8fc99884f800ba85861f4247a00000000000000000000000000000000000000000000000000b1a2bc2ec50000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}