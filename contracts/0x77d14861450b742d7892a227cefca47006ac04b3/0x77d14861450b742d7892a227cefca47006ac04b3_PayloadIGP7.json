{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/payloads/IGP7/PayloadIGP7.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n    function _setVotingDelay(uint newVotingDelay) external;\\n    function _setVotingPeriod(uint newVotingPeriod) external;\\n    function _acceptAdminOnTimelock() external;\\n    function _setImplementation(address implementation_) external;\\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\\n    function admin() external view returns(address);\\n    function pendingAdmin() external view returns(address);\\n    function timelock() external view returns(address);\\n    function votingDelay() external view returns(uint256);\\n    function votingPeriod() external view returns(uint256);\\n}\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n    function setDelay(uint delay_) external;\\n    function setPendingAdmin(address pendingAdmin_) external;\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) external returns (bytes32);\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) external payable returns (bytes memory);\\n    function pendingAdmin() external view returns(address);\\n    function admin() external view returns(address);\\n    function delay() external view returns(uint256);\\n}\\n\\ninterface IInstaIndex {\\n    function changeMaster(address _newMaster) external;\\n    function updateMaster() external;\\n    function master() external view returns(address);\\n}\\n\\ninterface ILite {\\n    function setAdmin(address newAdmin) external;\\n    function getAdmin() external view returns(address);\\n}\\n\\ninterface IDSAV2 {\\n    function cast(\\n        string[] memory _targetNames,\\n        bytes[] memory _datas,\\n        address _origin\\n    )\\n    external\\n    payable \\n    returns (bytes32);\\n\\n    function isAuth(address user) external view returns (bool);\\n}\\n\\ncontract PayloadIGP7 {\\n    uint256 public constant PROPOSAL_ID = 7;\\n\\n    address public constant PROPOSER = 0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n\\n    IGovernorBravo public constant GOVERNOR = IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public constant OLD_TIMELOCK = ITimelock(0xC7Cb1dE2721BFC0E0DA1b9D526bCdC54eF1C0eFC);\\n    ITimelock public immutable TIMELOCK;\\n    address public immutable ADDRESS_THIS;\\n\\n    IInstaIndex public constant INSTAINDEX = IInstaIndex(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\\n    ILite public constant LITE = ILite(0xA0D3707c569ff8C87FA923d3823eC5D81c98Be78);\\n    IDSAV2 public constant TREASURY = IDSAV2(0x28849D2b63fA8D361e5fc15cB8aBB13019884d09);\\n\\n    uint256 public constant ONE_DAY_TIME_IN_SECONDS = 1 days; // 1 day in seconds. 86400s\\n    uint256 public constant ONE_DAY_TIME_IN_BLOCKS = 7_200; // 1 day in blocks. 12s per block\\n    uint256 public constant TWO_DAY_TIME_IN_BLOCKS = 14_400; // 2 day in blocks. 12s per block\\n\\n    address public immutable GOVERNOR_IMPLEMENTATION_ADDRESS;\\n    address public constant TEAM_MULTISIG = 0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n\\n    constructor (address governor_, address timelock_) {\\n        TIMELOCK = ITimelock(address(timelock_)); \\n        GOVERNOR_IMPLEMENTATION_ADDRESS = address(governor_);\\n        ADDRESS_THIS = address(this);\\n    }\\n\\n\\n    function propose(string memory description) external {\\n        require(msg.sender == PROPOSER, \\\"msg.sender-not-proposer\\\");\\n\\n        uint256 totalActions = 8;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        // Action 1: call cast() - transfer rewards to Team Multisig, add new Timelock as auth & remove old Timelock as auth on Treasury\\n        (targets[0], values[0], signatures[0], calldatas[0]) = action1();\\n\\n        // Action 2: call _setImplementation() - upgrade governor contract to new implementation\\n        (targets[1], values[1], signatures[1], calldatas[1]) = action2();\\n\\n        // Action 3: call changeMaster() - change ownership of DSA to new timelock contract\\n        (targets[2], values[2], signatures[2], calldatas[2]) = action3();\\n\\n        // Action 4: call setAdmin() - change ownership of Lite to new timelock contract\\n        (targets[3], values[3], signatures[3], calldatas[3]) = action4();\\n\\n        // Action 5: call _setPendingAdmin() - on governor contract with new timelock address\\n        (targets[4], values[4], signatures[4], calldatas[4]) = action5();\\n\\n        // Action 6: call setPendingAdmin() - on old timelock to change team multisig\\n        (targets[5], values[5], signatures[5], calldatas[5]) = action6();\\n\\n        // Action 7: call queueTransaction - new timelock contract to queue below payload\\n        (targets[6], values[6], signatures[6], calldatas[6]) = action7();\\n\\n        // Action 8: call executeTransaction - new timelock contract to execute below payload\\n        (targets[7], values[7], signatures[7], calldatas[7]) = action8();\\n\\n        uint256 proposedId = GOVERNOR.propose(\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            description\\n        );\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        // Action 1: updateMaster() function on DSA instaIndex\\n        INSTAINDEX.updateMaster();\\n\\n        // Action 2: _acceptAdmin() function on governor contract\\n        GOVERNOR._acceptAdmin();\\n\\n        // Action 3: _setVotingDelay() function on governor contract with 1 days\\n        GOVERNOR._setVotingDelay(ONE_DAY_TIME_IN_BLOCKS);\\n\\n        // Action 4: _setVotingPeriod() function on governor contract with 2 days\\n        GOVERNOR._setVotingPeriod(TWO_DAY_TIME_IN_BLOCKS);\\n\\n        // Action 5: setPendingAdmin() on new timelock contract\\n        TIMELOCK.setPendingAdmin(address(GOVERNOR));\\n\\n        // Action 6: _acceptAdminOnTimelock() on governor contract\\n        GOVERNOR._acceptAdminOnTimelock();\\n\\n        // Action 7: setDelay() on new timelock contract with 1 day\\n        TIMELOCK.setDelay(ONE_DAY_TIME_IN_SECONDS);\\n\\n        // Action 8: call verifyProposal() - on this payload contract to verify proposal execution\\n        PayloadIGP7(ADDRESS_THIS).verifyProposal();\\n    }\\n\\n    function verifyProposal() external view {\\n        // Verify 1 : Verify DSA Master\\n        require(INSTAINDEX.master() == address(TIMELOCK), \\\"InstaIndex-wrong-master\\\");\\n\\n        // Verify 2 : Verify Lite Admin\\n        require(LITE.getAdmin() == address(TIMELOCK), \\\"Lite-wrong-admin\\\");\\n\\n        // Verify 3 : Verify Governor Admin\\n        require(GOVERNOR.admin() == address(TIMELOCK), \\\"Governor-wrong-admin\\\");\\n\\n        // Verify 4 : Verify Governor Timelock\\n        require(GOVERNOR.timelock() == address(TIMELOCK), \\\"Governor-wrong-timelock\\\");\\n\\n        // Verify 5 : Verify Governor Pending Admin\\n        require(GOVERNOR.pendingAdmin() == address(0), \\\"Governor-wrong-pending-admin\\\");\\n\\n        // Verify 6 : Verify Old Timelock Admin\\n        require(OLD_TIMELOCK.admin() == address(GOVERNOR), \\\"Old-timelock-wrong-admin\\\");\\n\\n        // Verify 7 : Verify Old Timelock Pending Admin\\n        require(OLD_TIMELOCK.pendingAdmin() == address(TEAM_MULTISIG), \\\"Old-timelock-wrong-pending-admin\\\");\\n\\n        // Verify 8 : Verify New Timelock Admin\\n        require(TIMELOCK.admin() == address(GOVERNOR), \\\"Timelock-wrong-admin\\\");\\n\\n        // Verify 9 : Verify Timelock Pending Admin\\n        require(TIMELOCK.pendingAdmin() == address(0), \\\"Timelock-wrong-pending-admin\\\");\\n\\n        // Verify 10 : Verify Treasury remove of old timelock\\n        require(TREASURY.isAuth(address(OLD_TIMELOCK)) == false, \\\"Treasury-old-timelock-not-removed\\\");\\n\\n        // Verify 11: Verify Treasury add of new timelock\\n        require(TREASURY.isAuth(address(TIMELOCK)) == true, \\\"Treasury-new-timelock-not-added\\\");\\n\\n        // Verify 12: Verify voting delay\\n        require(GOVERNOR.votingDelay() == ONE_DAY_TIME_IN_BLOCKS, \\\"Voting-delay-not-set-to-one-day\\\");\\n\\n        // Verify 13: Verify voting period\\n        require(GOVERNOR.votingPeriod() == TWO_DAY_TIME_IN_BLOCKS, \\\"Voting-period-not-set-to-two-day\\\");\\n\\n        // Verify 14: Verify queueing period\\n        require(TIMELOCK.delay() == ONE_DAY_TIME_IN_SECONDS, \\\"Timelock-delay-not-set-to-one-day\\\");\\n    }\\n\\n    ///////// PROPOSAL ACTIONS - 8 Actions ///////\\n\\n    /// @notice Action 1: call cast() - transfer rewards to Team Multisig, add new Timelock as auth & remove old Timelock as auth on Treasury\\n    function action1() public view returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        string[] memory targets = new string[](7);\\n        bytes[] memory encodedSpells = new bytes[](7);\\n\\n        string memory withdrawSignature = \\\"withdraw(address,uint256,address,uint256,uint256)\\\";\\n\\n        // Spell 1: Transfer wETH\\n        {\\n            address ETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n            uint256 ETH_AMOUNT = 230 * 1e18; // 230 ETH\\n            targets[0] = \\\"BASIC-A\\\";\\n            encodedSpells[0] = abi.encodeWithSignature(withdrawSignature, ETH_ADDRESS, ETH_AMOUNT, TEAM_MULTISIG, 0, 0);\\n        }\\n\\n        // Spell 2: Transfer USDC\\n        {   \\n            address USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n            uint256 USDC_AMOUNT = 247_900 * 1e6; // 247.9k USDC\\n            targets[1] = \\\"BASIC-A\\\";\\n            encodedSpells[1] = abi.encodeWithSignature(withdrawSignature, USDC_ADDRESS, USDC_AMOUNT, TEAM_MULTISIG, 0, 0);\\n        }\\n\\n        // Spell 3: Transfer DAI\\n        {   \\n            address DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n            uint256 DAI_AMOUNT = 59_000 * 1e18; // 59k DAI\\n            targets[2] = \\\"BASIC-A\\\";\\n            encodedSpells[2] = abi.encodeWithSignature(withdrawSignature, DAI_ADDRESS, DAI_AMOUNT, TEAM_MULTISIG, 0, 0);\\n        }\\n\\n        // Spell 4: Transfer USDT\\n        {   \\n            address USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n            uint256 USDT_AMOUNT = 28_700 * 1e6; // 28.8k USDT\\n            targets[3] = \\\"BASIC-A\\\";\\n            encodedSpells[3] = abi.encodeWithSignature(withdrawSignature, USDT_ADDRESS, USDT_AMOUNT, TEAM_MULTISIG, 0, 0);\\n        }\\n\\n        // Spell 5: Transfer stETH\\n        {   \\n            address STETH_ADDRESS = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n            uint256 STETH_AMOUNT = 320 * 1e18; // 320 stETH\\n            targets[4] = \\\"BASIC-A\\\";\\n            encodedSpells[4] = abi.encodeWithSignature(withdrawSignature, STETH_ADDRESS, STETH_AMOUNT, TEAM_MULTISIG, 0, 0);\\n        }\\n\\n        // Spell 6: Add new Timelock as auth\\n        {\\n            targets[5] = \\\"AUTHORITY-A\\\";\\n            encodedSpells[5] = abi.encodeWithSignature(\\\"add(address)\\\", address(TIMELOCK));\\n        }\\n\\n        // Spell 7: Remove old Timelock as auth\\n        {\\n            targets[6] = \\\"AUTHORITY-A\\\";\\n            encodedSpells[6] = abi.encodeWithSignature(\\\"remove(address)\\\", address(OLD_TIMELOCK));\\n        }\\n\\n        target = address(TREASURY);\\n        value = 0;\\n        signature = \\\"cast(string[],bytes[],address)\\\";\\n        calldatas = abi.encode(targets, encodedSpells, address(this));\\n    }\\n\\n    /// @notice Action 2: call _setImplementation() - upgrade governor contract to new implementation\\n    function action2() public view returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        target = address(GOVERNOR);\\n        value = 0;\\n        signature = \\\"_setImplementation(address)\\\";\\n        calldatas = abi.encode(GOVERNOR_IMPLEMENTATION_ADDRESS);\\n    }\\n\\n    /// @notice Action 3: call changeMaster() - change ownership of DSA to new timelock contract\\n    function action3() public view returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        target = address(INSTAINDEX);\\n        value = 0;\\n        signature = \\\"changeMaster(address)\\\";\\n        calldatas = abi.encode(TIMELOCK);\\n    }\\n\\n    /// @notice Action 4: call setAdmin() - change ownership of Lite to new timelock contract\\n    function action4() public view returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        target = address(LITE);\\n        value = 0;\\n        signature = \\\"setAdmin(address)\\\";\\n        calldatas = abi.encode(TIMELOCK);\\n    }\\n\\n    /// @notice Action 5: call _setPendingAdmin() - on governor contract with new timelock address\\n    function action5() public view returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        target = address(GOVERNOR);\\n        value = 0;\\n        signature = \\\"_setPendingAdmin(address)\\\";\\n        calldatas = abi.encode(TIMELOCK);\\n    }\\n\\n    /// @notice Action 6: call setPendingAdmin() - on old timelock to change team multisig\\n    function action6() public pure returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        target = address(OLD_TIMELOCK);\\n        value = 0;\\n        signature = \\\"setPendingAdmin(address)\\\";\\n        calldatas = abi.encode(TEAM_MULTISIG);\\n    }\\n\\n    /// @notice Action 7: call queueTransaction - new timelock contract to queue below payload\\n    function action7() public view returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        target = address(TIMELOCK);\\n        value = 0;\\n        signature = \\\"queueTransaction(address,uint256,string,bytes,uint256)\\\";\\n        calldatas = abi.encode(\\n            TIMELOCK,\\n            0,\\n            \\\"executePayload(address,string,bytes)\\\",\\n            abi.encode(\\n                address(this),\\n                \\\"execute()\\\",\\n                abi.encode()\\n            ),\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Action 8: call executeTransaction - new timelock contract to execute below payload\\n     function action8() public view returns(address target, uint256 value, string memory signature, bytes memory calldatas) {\\n        target = address(TIMELOCK);\\n        value = 0;\\n        signature = \\\"executeTransaction(address,uint256,string,bytes,uint256)\\\";\\n        calldatas = abi.encode(\\n            TIMELOCK,\\n            0,\\n            \\\"executePayload(address,string,bytes)\\\",\\n            abi.encode(\\n                address(this),\\n                \\\"execute()\\\",\\n                abi.encode()\\n            ),\\n            block.timestamp\\n        );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESS_THIS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR\",\"outputs\":[{\"internalType\":\"contract IGovernorBravo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_IMPLEMENTATION_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTAINDEX\",\"outputs\":[{\"internalType\":\"contract IInstaIndex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LITE\",\"outputs\":[{\"internalType\":\"contract ILite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLD_TIMELOCK\",\"outputs\":[{\"internalType\":\"contract ITimelock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_DAY_TIME_IN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_DAY_TIME_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_MULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK\",\"outputs\":[{\"internalType\":\"contract ITimelock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"contract IDSAV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO_DAY_TIME_IN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action6\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action7\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"action8\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyProposal\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PayloadIGP7", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000613f7e762124711c7647f9eab5c8a88632ee470000000000000000000000002386dc45added673317ef068992f19421b481f4c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}