{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n  /**\r\n   * @dev Must return an address that can be used as a delegate call target.\r\n   *\r\n   * {BeaconProxy} will check that this address is a contract.\r\n   */\r\n  function implementation() external view returns (address);\r\n}\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Delegates the current call to `implementation`.\r\n   *\r\n   * This function does not return to its internall call site, it will return directly to the external caller.\r\n   */\r\n  function _delegate(address implementation) internal virtual {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 {\r\n        revert(0, returndatasize())\r\n      }\r\n      default {\r\n        return(0, returndatasize())\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n   * and {_fallback} should delegate.\r\n   */\r\n  function _implementation() internal view virtual returns (address);\r\n\r\n  /**\r\n   * @dev Delegates the current call to the address returned by `_implementation()`.\r\n   *\r\n   * This function does not return to its internall call site, it will return directly to the external caller.\r\n   */\r\n  function _fallback() internal virtual {\r\n    _beforeFallback();\r\n    _delegate(_implementation());\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n   * function in the contract matches the call data.\r\n   */\r\n  fallback() external payable virtual {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n   * is empty.\r\n   */\r\n  receive() external payable virtual {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n   * call, or as part of the Solidity `fallback` or `receive` functions.\r\n   *\r\n   * If overriden should call `super._beforeFallback()`.\r\n   */\r\n  function _beforeFallback() internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967Upgrade {\r\n  // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n  bytes32 private constant _ROLLBACK_SLOT =\r\n    0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant _IMPLEMENTATION_SLOT =\r\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Returns the current implementation address.\r\n   */\r\n  function _getImplementation() internal view returns (address) {\r\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n  }\r\n\r\n  /**\r\n   * @dev Stores a new address in the EIP1967 implementation slot.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(\r\n      Address.isContract(newImplementation),\r\n      \"ERC1967: new implementation is not a contract\"\r\n    );\r\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n  }\r\n\r\n  /**\r\n   * @dev Perform implementation upgrade\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Perform implementation upgrade with additional setup call.\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function _upgradeToAndCall(\r\n    address newImplementation,\r\n    bytes memory data,\r\n    bool forceCall\r\n  ) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n    if (data.length > 0 || forceCall) {\r\n      Address.functionDelegateCall(newImplementation, data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   */\r\n  function _upgradeToAndCallSecure(\r\n    address newImplementation,\r\n    bytes memory data,\r\n    bool forceCall\r\n  ) internal {\r\n    address oldImplementation = _getImplementation();\r\n\r\n    // Initial upgrade and setup call\r\n    _setImplementation(newImplementation);\r\n    if (data.length > 0 || forceCall) {\r\n      Address.functionDelegateCall(newImplementation, data);\r\n    }\r\n\r\n    // Perform rollback test if not already in progress\r\n    StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot\r\n      .getBooleanSlot(_ROLLBACK_SLOT);\r\n    if (!rollbackTesting.value) {\r\n      // Trigger rollback using upgradeTo from the new implementation\r\n      rollbackTesting.value = true;\r\n      Address.functionDelegateCall(\r\n        newImplementation,\r\n        abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\r\n      );\r\n      rollbackTesting.value = false;\r\n      // Check rollback was effective\r\n      require(\r\n        oldImplementation == _getImplementation(),\r\n        \"ERC1967Upgrade: upgrade breaks further upgrades\"\r\n      );\r\n      // Finally reset to the new implementation and log the upgrade\r\n      _setImplementation(newImplementation);\r\n      emit Upgraded(newImplementation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n   * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n   *\r\n   * Emits a {BeaconUpgraded} event.\r\n   */\r\n  function _upgradeBeaconToAndCall(\r\n    address newBeacon,\r\n    bytes memory data,\r\n    bool forceCall\r\n  ) internal {\r\n    _setBeacon(newBeacon);\r\n    emit BeaconUpgraded(newBeacon);\r\n    if (data.length > 0 || forceCall) {\r\n      Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant _ADMIN_SLOT =\r\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Emitted when the admin account has changed.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Returns the current admin.\r\n   */\r\n  function _getAdmin() internal view returns (address) {\r\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\r\n  }\r\n\r\n  /**\r\n   * @dev Stores a new address in the EIP1967 admin slot.\r\n   */\r\n  function _setAdmin(address newAdmin) private {\r\n    require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   *\r\n   * Emits an {AdminChanged} event.\r\n   */\r\n  function _changeAdmin(address newAdmin) internal {\r\n    emit AdminChanged(_getAdmin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n   */\r\n  bytes32 internal constant _BEACON_SLOT =\r\n    0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n  /**\r\n   * @dev Emitted when the beacon is upgraded.\r\n   */\r\n  event BeaconUpgraded(address indexed beacon);\r\n\r\n  /**\r\n   * @dev Returns the current beacon.\r\n   */\r\n  function _getBeacon() internal view returns (address) {\r\n    return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\r\n  }\r\n\r\n  /**\r\n   * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n   */\r\n  function _setBeacon(address newBeacon) private {\r\n    require(\r\n      Address.isContract(newBeacon),\r\n      \"ERC1967: new beacon is not a contract\"\r\n    );\r\n    require(\r\n      Address.isContract(IBeacon(newBeacon).implementation()),\r\n      \"ERC1967: beacon implementation is not a contract\"\r\n    );\r\n    StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain`call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        \"Address: low-level call with value failed\"\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      \"Address: insufficient balance for call\"\r\n    );\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data)\r\n    internal\r\n    view\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionDelegateCall(\r\n        target,\r\n        data,\r\n        \"Address: low-level delegate call failed\"\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n  struct AddressSlot {\r\n    address value;\r\n  }\r\n\r\n  struct BooleanSlot {\r\n    bool value;\r\n  }\r\n\r\n  struct Bytes32Slot {\r\n    bytes32 value;\r\n  }\r\n\r\n  struct Uint256Slot {\r\n    uint256 value;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n   */\r\n  function getAddressSlot(bytes32 slot)\r\n    internal\r\n    pure\r\n    returns (AddressSlot storage r)\r\n  {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n   */\r\n  function getBooleanSlot(bytes32 slot)\r\n    internal\r\n    pure\r\n    returns (BooleanSlot storage r)\r\n  {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n   */\r\n  function getBytes32Slot(bytes32 slot)\r\n    internal\r\n    pure\r\n    returns (Bytes32Slot storage r)\r\n  {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n   */\r\n  function getUint256Slot(bytes32 slot)\r\n    internal\r\n    pure\r\n    returns (Uint256Slot storage r)\r\n  {\r\n    assembly {\r\n      r.slot := slot\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\r\n * implementation contract, which is where they will delegate all function calls.\r\n *\r\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\r\n */\r\ncontract UpgradeableBeacon is IBeacon, Ownable {\r\n  address private _implementation;\r\n\r\n  /**\r\n   * @dev Emitted when the implementation returned by the beacon is changed.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\r\n   * beacon.\r\n   */\r\n  constructor(address implementation_) {\r\n    _setImplementation(implementation_);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation address.\r\n   */\r\n  function implementation() public view virtual override returns (address) {\r\n    return _implementation;\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the beacon to a new implementation.\r\n   *\r\n   * Emits an {Upgraded} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - msg.sender must be the owner of the contract.\r\n   * - `newImplementation` must be a contract.\r\n   */\r\n  function upgradeTo(address newImplementation) public virtual onlyOwner {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation contract address for this beacon\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `newImplementation` must be a contract.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(\r\n      Address.isContract(newImplementation),\r\n      \"UpgradeableBeacon: implementation is not a contract\"\r\n    );\r\n    _implementation = newImplementation;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n */\r\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\r\n  /**\r\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n   *\r\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\r\n   */\r\n  constructor(address _logic, bytes memory _data) payable {\r\n    assert(\r\n      _IMPLEMENTATION_SLOT ==\r\n        bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\r\n    );\r\n    _upgradeToAndCall(_logic, _data, false);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation address.\r\n   */\r\n  function _implementation()\r\n    internal\r\n    view\r\n    virtual\r\n    override\r\n    returns (address impl)\r\n  {\r\n    return ERC1967Upgrade._getImplementation();\r\n  }\r\n}\r\n\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n *\r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n *\r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n *\r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n *\r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\r\n */\r\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\r\n  /**\r\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\r\n   */\r\n  constructor(\r\n    address _logic,\r\n    address admin_,\r\n    bytes memory _data\r\n  ) payable ERC1967Proxy(_logic, _data) {\r\n    assert(\r\n      _ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)\r\n    );\r\n    _changeAdmin(admin_);\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _getAdmin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current admin.\r\n   *\r\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\r\n   *\r\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\r\n   */\r\n  function admin() external ifAdmin returns (address admin_) {\r\n    admin_ = _getAdmin();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   *\r\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\r\n   *\r\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n   */\r\n  function implementation() external ifAdmin returns (address implementation_) {\r\n    implementation_ = _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   *\r\n   * Emits an {AdminChanged} event.\r\n   *\r\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\r\n   */\r\n  function changeAdmin(address newAdmin) external virtual ifAdmin {\r\n    _changeAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the implementation of the proxy.\r\n   *\r\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeToAndCall(newImplementation, bytes(\"\"), false);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n   * proxied contract.\r\n   *\r\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\r\n    external\r\n    payable\r\n    ifAdmin\r\n  {\r\n    _upgradeToAndCall(newImplementation, data, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current admin.\r\n   */\r\n  function _admin() internal view virtual returns (address) {\r\n    return _getAdmin();\r\n  }\r\n\r\n  /**\r\n   * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\r\n   */\r\n  function _beforeFallback() internal virtual override {\r\n    require(\r\n      msg.sender != _getAdmin(),\r\n      \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"\r\n    );\r\n    super._beforeFallback();\r\n  }\r\n}\r\n\r\n/**\r\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\r\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\r\n */\r\ncontract ProxyAdmin is Ownable {\r\n  /**\r\n   * @dev Returns the current implementation of `proxy`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - This contract must be the admin of `proxy`.\r\n   */\r\n  function getProxyImplementation(TransparentUpgradeableProxy proxy)\r\n    public\r\n    view\r\n    virtual\r\n    returns (address)\r\n  {\r\n    // We need to manually run the static call since the getter cannot be flagged as view\r\n    // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\r\n    (bool success, bytes memory returndata) = address(proxy).staticcall(\r\n      hex\"5c60da1b\"\r\n    );\r\n    require(success);\r\n    return abi.decode(returndata, (address));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current admin of `proxy`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - This contract must be the admin of `proxy`.\r\n   */\r\n  function getProxyAdmin(TransparentUpgradeableProxy proxy)\r\n    public\r\n    view\r\n    virtual\r\n    returns (address)\r\n  {\r\n    // We need to manually run the static call since the getter cannot be flagged as view\r\n    // bytes4(keccak256(\"admin()\")) == 0xf851a440\r\n    (bool success, bytes memory returndata) = address(proxy).staticcall(\r\n      hex\"f851a440\"\r\n    );\r\n    require(success);\r\n    return abi.decode(returndata, (address));\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of `proxy` to `newAdmin`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - This contract must be the current admin of `proxy`.\r\n   */\r\n  function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin)\r\n    public\r\n    virtual\r\n    onlyOwner\r\n  {\r\n    proxy.changeAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - This contract must be the admin of `proxy`.\r\n   */\r\n  function upgrade(TransparentUpgradeableProxy proxy, address implementation)\r\n    public\r\n    virtual\r\n    onlyOwner\r\n  {\r\n    proxy.upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\r\n   * {TransparentUpgradeableProxy-upgradeToAndCall}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - This contract must be the admin of `proxy`.\r\n   */\r\n  function upgradeAndCall(\r\n    TransparentUpgradeableProxy proxy,\r\n    address implementation,\r\n    bytes memory data\r\n  ) public payable virtual onlyOwner {\r\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\r\n  }\r\n}\r\n\r\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\r\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\r\n  constructor(\r\n    address logic,\r\n    address admin,\r\n    bytes memory data\r\n  ) payable TransparentUpgradeableProxy(logic, admin, data) {}\r\n}\r\n\r\n/**\r\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\r\n *\r\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\r\n * conflict with the storage layout of the implementation behind the proxy.\r\n *\r\n * _Available since v3.4._\r\n */\r\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\r\n  /**\r\n   * @dev Initializes the proxy with `beacon`.\r\n   *\r\n   * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\r\n   * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\r\n   * constructor.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `beacon` must be a contract with the interface {IBeacon}.\r\n   */\r\n  constructor(address beacon, bytes memory data) payable {\r\n    assert(\r\n      _BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)\r\n    );\r\n    _upgradeBeaconToAndCall(beacon, data, false);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current beacon address.\r\n   */\r\n  function _beacon() internal view virtual returns (address) {\r\n    return _getBeacon();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation address of the associated beacon.\r\n   */\r\n  function _implementation() internal view virtual override returns (address) {\r\n    return IBeacon(_getBeacon()).implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\r\n   *\r\n   * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `beacon` must be a contract.\r\n   * - The implementation returned by `beacon` must be a contract.\r\n   */\r\n  function _setBeacon(address beacon, bytes memory data) internal virtual {\r\n    _upgradeBeaconToAndCall(beacon, data, false);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UpgradeableBeacon", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dc78fbfd1ab19440d4a1926c5e3e76729e0174f1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b2685fb70d8e9030022096e26975fa611f161c1b573cfcb5eb893ccc031b6103"}