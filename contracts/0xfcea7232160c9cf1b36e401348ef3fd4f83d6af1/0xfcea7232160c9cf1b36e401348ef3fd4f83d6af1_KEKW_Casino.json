{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// KEKW Casino Contract: 16 November 2023\r\n// Version: 1.1\r\n\r\n// Website: https://kekw.gg/\r\n// telegram: https://t.me/kekw_gg\r\n// X.com/Twtter: https://x.com/kekw_gg\r\n// Token: ($KEKW) 0x0DF596AD12F927e41EC317AF7DD666cA3574845f\r\n// Uniswap: https://app.uniswap.org/swap?outputCurrency=0x0DF596AD12F927e41EC317AF7DD666cA3574845f\r\n// Dextools: https://www.dextools.io/app/en/ether/pair-explorer/0x14ba508aaf2c15231f9df265980d1d461e54192b\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nerror BetTooHigh(uint256 maximumBet);\r\n\r\ncontract KEKW_Casino {\r\n    IERC20 public token;\r\n    address public manager;\r\n    mapping(address => uint256) public casinoBalances;\r\n    uint256 MAX_INT =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    struct Game {\r\n        uint256 index; // servers as Id\r\n        uint256 betAmount;\r\n        uint256 totalBetAmount;\r\n        address player1;\r\n        address player2;\r\n        address winner;\r\n        address gameContractAddress;\r\n        string player1Outcome;\r\n        string player2Outcome;\r\n    }\r\n\r\n    Game[] public games;\r\n    address[] public gameContracts;\r\n    uint256 public winnerPercentage = 95;\r\n    uint256 public casinoPercentage = 3;\r\n    uint256 public devPercentage = 100 - winnerPercentage - casinoPercentage;\r\n\r\n    event GameCreated(uint256 gameIndex, uint256 betAmount);\r\n    event GameJoined(uint256 gameIndex, address playerAddress);\r\n    event GameCanceled(uint256 gameIndex);\r\n    event GameLeft(uint256 gameIndex, address playerAddress);\r\n\r\n    constructor(address _token) {\r\n        manager = msg.sender;\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function addNewGameContrtact(address _gameContract) public restricted {\r\n        gameContracts.push(_gameContract);\r\n    }\r\n\r\n    function removeGameContract(uint256 _gameContractIndex) public restricted {\r\n        if (_gameContractIndex >= gameContracts.length) return;\r\n\r\n        for (\r\n            uint256 i = _gameContractIndex;\r\n            i < gameContracts.length - 1;\r\n            i++\r\n        ) {\r\n            gameContracts[i] = gameContracts[i + 1];\r\n        }\r\n        gameContracts.pop();\r\n    }\r\n\r\n    function updateFees(\r\n        uint256 _winnerFees,\r\n        uint256 _casinoFees,\r\n        uint256 _devFees\r\n    ) public restricted {\r\n        require(\r\n            (_winnerFees + _devFees + _casinoFees) == 100,\r\n            \"Total should be 100.\"\r\n        );\r\n        winnerPercentage = _winnerFees;\r\n        devPercentage = _devFees;\r\n        casinoPercentage = _casinoFees;\r\n    }\r\n\r\n    function getSmartContractBalance() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getPlayersCasinoBalanace(address playerAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return casinoBalances[playerAddress];\r\n    }\r\n\r\n    function deposit(uint256 _amount) public {\r\n        require(_amount > 0, \"Minimum Amount should be greater than 0.\");\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n        casinoBalances[msg.sender] += _amount;\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public {\r\n        require(\r\n            casinoBalances[msg.sender] >= _amount,\r\n            \"You can't withdraw more than your balance.\"\r\n        );\r\n        token.transfer(msg.sender, _amount);\r\n        casinoBalances[msg.sender] -= _amount;\r\n    }\r\n\r\n    function donate(uint256 _amount) public {\r\n        require(_amount > 0, \"Minimum Amount should be greater than 0.\");\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n        casinoBalances[address(this)] += _amount;\r\n    }\r\n\r\n    function houseWithdraw(uint256 _amount) public restricted {\r\n        require(\r\n            casinoBalances[address(this)] >= _amount,\r\n            \"You can't withdraw more than your balance.\"\r\n        );\r\n        token.transfer(manager, _amount);\r\n        casinoBalances[address(this)] -= _amount;\r\n    }\r\n\r\n    function createGame(uint256 _betAmount, address _gameContractAddress)\r\n        public\r\n    {\r\n        require(_betAmount > 0, \"Bet Amount should be greater than 0.\");\r\n        require(\r\n            existingGameContract(_gameContractAddress),\r\n            \"Invalid Game contract.\"\r\n        );\r\n        Game storage game = games.push();\r\n        uint256 _index = games.length - 1;\r\n\r\n        game.index = _index;\r\n        game.betAmount = _betAmount;\r\n        game.gameContractAddress = _gameContractAddress;\r\n        game.player1 = msg.sender;\r\n        casinoBalances[msg.sender] -= _betAmount;\r\n        game.totalBetAmount += _betAmount;\r\n        emit GameCreated(_index, _betAmount);\r\n    }\r\n\r\n    function cancelGame(uint256 _index) public {\r\n        require(_index >= 0, \"Index should be greater than 0.\");\r\n        Game storage game = games[_index];\r\n        require(game.winner == address(0), \"Game already Played.\");\r\n        require(\r\n            game.player1 == msg.sender,\r\n            \"Game creator can only cancel the game.\"\r\n        );\r\n        require(\r\n            game.totalBetAmount > 0,\r\n            \"total bet amount should not be zero.\"\r\n        );\r\n        require(game.betAmount > 0, \"bet amount should not be zero.\");\r\n        if (game.player2 != address(0)) {\r\n            game.totalBetAmount -= game.betAmount;\r\n            casinoBalances[game.player2] += game.betAmount;\r\n        }\r\n        game.totalBetAmount -= game.betAmount;\r\n        casinoBalances[game.player1] += game.betAmount;\r\n        game.player1 = address(0);\r\n        game.player2 = address(0);\r\n        emit GameCanceled(_index);\r\n    }\r\n\r\n    function ensureGameIsNotPlayed(uint256 _index)\r\n        public\r\n        view\r\n        returns (Game memory)\r\n    {\r\n        require(_index >= 0, \"Index should be greater than 0.\");\r\n        Game memory game = games[_index];\r\n        require(game.betAmount > 0, \"Bet is played or canceled.\");\r\n        require(game.totalBetAmount > 0, \"Bet is played or canceled.\");\r\n        require(game.winner == address(0), \"Game already Played.\");\r\n        require(game.player1 != address(0), \"Player1 shuld join the game.\");\r\n        require(game.player2 != address(0), \"Player2 shuld join the game.\");\r\n        return game;\r\n    }\r\n\r\n    function getUnplayedGames() public view returns (Game[] memory) {\r\n        Game[] memory unPlayedGames = new Game[](games.length);\r\n\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < games.length; i++) {\r\n            if (\r\n                games[i].betAmount > 0 &&\r\n                games[i].totalBetAmount > 0 &&\r\n                games[i].winner == address(0) &&\r\n                games[i].player2 == address(0) &&\r\n                games[i].player1 != address(0)\r\n            ) {\r\n                unPlayedGames[count] = games[i];\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // Resize the array to remove any empty slots\r\n        assembly {\r\n            mstore(unPlayedGames, count)\r\n        }\r\n\r\n        return unPlayedGames;\r\n    }\r\n\r\n    function joinGame(uint256 _index) public {\r\n        require(_index >= 0, \"Index should be greater than 0.\");\r\n        Game storage game = games[_index];\r\n        require(game.player1 != address(0), \"Game is Canceled.\");\r\n        require(game.winner == address(0), \"Game has ended.\");\r\n        require(game.player2 == address(0), \"Game is full now.\");\r\n        require(\r\n            casinoBalances[msg.sender] >= game.betAmount,\r\n            \"You do not have enough balance to join game.\"\r\n        );\r\n        casinoBalances[msg.sender] -= game.betAmount;\r\n        game.player2 = msg.sender;\r\n        game.totalBetAmount += game.betAmount;\r\n        emit GameJoined(_index, msg.sender);\r\n    }\r\n\r\n    function leaveGame(uint256 _index) public {\r\n        require(_index >= 0, \"Index should be greater than 0.\");\r\n        Game storage game = games[_index];\r\n        require(game.totalBetAmount > 0, \"Bet is reset.\");\r\n        require(game.betAmount > 0, \"Bet is reset.\");\r\n        require(game.winner == address(0), \"Game has ended.\");\r\n        require(game.player2 == msg.sender, \"You haven't joined this game.\");\r\n        game.player2 = address(0);\r\n        game.totalBetAmount -= game.betAmount;\r\n        casinoBalances[msg.sender] += game.betAmount;\r\n        emit GameLeft(_index, msg.sender);\r\n    }\r\n\r\n    function inviteHouse(uint256 _index) public {\r\n        require(_index >= 0, \"Index should be greater than 0.\");\r\n        Game storage game = games[_index];\r\n        require(\r\n            game.player1 == msg.sender,\r\n            \"Game creator can only invite house to play.\"\r\n        );\r\n        require(game.winner == address(0), \"Game has ended.\");\r\n        require(game.player2 == address(0), \"Game is full now.\");\r\n        require(\r\n            casinoBalances[address(this)] >= game.betAmount,\r\n            \"House does not have enough balance to join game.\"\r\n        );\r\n        uint256 maximumBet = (casinoBalances[address(this)] * 1) / 100;\r\n        if (game.betAmount > maximumBet) {\r\n            // https://soliditylang.org/blog/2021/04/21/custom-errors/\r\n            revert BetTooHigh({maximumBet: maximumBet});\r\n        }\r\n        casinoBalances[address(this)] -= game.betAmount;\r\n        game.player2 = address(this);\r\n        game.totalBetAmount += game.betAmount;\r\n        emit GameJoined(_index, address(this));\r\n    }\r\n\r\n    function existingGameContract(address _gameContract)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < gameContracts.length; i++) {\r\n            if (gameContracts[i] == _gameContract) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function winnerCallback(\r\n        uint256 gameIndex,\r\n        address winnerAddress,\r\n        string memory _player1Outcome,\r\n        string memory _player2Outcome\r\n    ) public {\r\n        require(\r\n            existingGameContract(msg.sender),\r\n            \"You are not Authorized Game Contract Address.\"\r\n        );\r\n        require(gameIndex >= 0, \"Invalid Game.\");\r\n        Game storage game = games[gameIndex];\r\n        require(game.player1 != address(0), \"Player1 shuld join the game.\");\r\n        require(game.player2 != address(0), \"Player2 shuld join the game.\");\r\n        require(game.winner == address(0), \"Game already Played.\");\r\n        require(\r\n            game.gameContractAddress == msg.sender,\r\n            \"Game type is not correct.\"\r\n        );\r\n        game.player1Outcome = _player1Outcome;\r\n        game.player2Outcome = _player2Outcome;\r\n\r\n        casinoBalances[manager] += (game.totalBetAmount * devPercentage) / 100;\r\n        casinoBalances[address(this)] +=\r\n            (game.totalBetAmount * casinoPercentage) /\r\n            100;\r\n\r\n        game.winner = winnerAddress;\r\n\r\n        casinoBalances[winnerAddress] += ((game.totalBetAmount *\r\n            winnerPercentage) / 100);\r\n\r\n        game.totalBetAmount = 0;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumBet\",\"type\":\"uint256\"}],\"name\":\"BetTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"}],\"name\":\"GameCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"GameLeft\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameContract\",\"type\":\"address\"}],\"name\":\"addNewGameContrtact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"casinoBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casinoPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gameContractAddress\",\"type\":\"address\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"ensureGameIsNotPlayed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"player1Outcome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"player2Outcome\",\"type\":\"string\"}],\"internalType\":\"struct KEKW_Casino.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameContract\",\"type\":\"address\"}],\"name\":\"existingGameContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"player1Outcome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"player2Outcome\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayersCasinoBalanace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnplayedGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"player1Outcome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"player2Outcome\",\"type\":\"string\"}],\"internalType\":\"struct KEKW_Casino.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"houseWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"inviteHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"leaveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameContractIndex\",\"type\":\"uint256\"}],\"name\":\"removeGameContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_casinoFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFees\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_player1Outcome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_player2Outcome\",\"type\":\"string\"}],\"name\":\"winnerCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KEKW_Casino", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000df596ad12f927e41ec317af7dd666ca3574845f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0adba8c12fd0d9e9184cd3eea9d060e6b4dbd59f453a5720a8ea57ed933673d7"}