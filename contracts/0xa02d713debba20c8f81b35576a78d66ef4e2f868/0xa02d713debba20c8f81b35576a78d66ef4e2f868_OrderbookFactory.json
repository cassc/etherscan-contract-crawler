{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/safex/orderbooks/OrderbookFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Orderbook, IOrderbook} from \\\"./Orderbook.sol\\\";\\nimport {CloneFactory} from \\\"../libraries/CloneFactory.sol\\\";\\nimport {IOrderbookFactory} from \\\"../interfaces/IOrderbookFactory.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n}\\n\\ncontract OrderbookFactory is IOrderbookFactory, Initializable {\\n    // Orderbooks\\n    address[] public allPairs;\\n    /// Address of manager\\n    address public override engine;\\n    /// version number of impl\\n    uint32 public version;\\n    /// address of order impl\\n    address public impl;\\n\\n    error InvalidAccess(address sender, address allowed);\\n    error PairAlreadyExists(address base, address quote, address pair);\\n    error SameBaseQuote(address base, address quote);\\n\\n    constructor() {\\n    }\\n\\n    function createBook(\\n        address base_,\\n        address quote_\\n    ) external override returns (address orderbook) {\\n        if (msg.sender != engine) {\\n            revert InvalidAccess(msg.sender, engine);\\n        }\\n\\n        if (base_ == quote_) {\\n            revert SameBaseQuote(base_, quote_);\\n        }\\n\\n        address pair = _predictAddress(base_, quote_);\\n\\n        // Check if the address has code\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(pair)\\n        }\\n\\n        // If the address has code and it's a clone of impl, revert.\\n        if (size > 0 || CloneFactory._isClone(impl, pair)) {\\n            revert PairAlreadyExists(base_, quote_, pair);\\n        }\\n\\n        address proxy = CloneFactory._createCloneWithSalt(\\n            impl,\\n            _getSalt(base_, quote_)\\n        );\\n        IOrderbook(proxy).initialize(\\n            allPairsLength(),\\n            base_,\\n            quote_,\\n            engine\\n        );\\n        allPairs.push(proxy);\\n        return (proxy);\\n    }\\n\\n    function isClone(address vault) external view returns (bool cloned) {\\n        cloned = CloneFactory._isClone(impl, vault);\\n    }\\n\\n    function getBook(uint256 bookId_) external view override returns (address) {\\n        return allPairs[bookId_];\\n    }\\n\\n    function getBookByPair(\\n        address base,\\n        address quote\\n    ) external view override returns (address book) {\\n        book = _predictAddress(base, quote);\\n        return address(book).code.length > 0 ? book : address(0);\\n    }\\n\\n    function getPairs(\\n        uint256 start,\\n        uint256 end\\n    ) public view override returns (IOrderbookFactory.Pair[] memory) {\\n        uint256 last = end > allPairs.length ? allPairs.length : end;\\n        IOrderbookFactory.Pair[] memory pairs = new IOrderbookFactory.Pair[](\\n            last - start\\n        );\\n        for (uint256 i = start; i < last; i++) {\\n            (address base, address quote) = IOrderbook(allPairs[i])\\n                .getBaseQuote();\\n            pairs[i] = Pair(base, quote);\\n        }\\n        return pairs;\\n    }\\n\\n    function getPairsWithIds(\\n        uint256[] memory ids\\n    ) public view override returns (IOrderbookFactory.Pair[] memory pairs) {\\n        pairs = new IOrderbookFactory.Pair[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            (address base, address quote) = IOrderbook(allPairs[i])\\n                .getBaseQuote();\\n            pairs[i] = Pair(base, quote);\\n        }\\n        return pairs;\\n    }\\n\\n    function getPairNames(\\n        uint256 start,\\n        uint256 end\\n    ) external view override returns (string[] memory names) {\\n        IOrderbookFactory.Pair[] memory pairs = getPairs(start, end);\\n        names = new string[](pairs.length);\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            string memory baseName = IERC20(pairs[i].base).symbol();\\n            string memory quoteName = IERC20(pairs[i].quote).symbol();\\n            names[i] = string(abi.encodePacked(baseName, \\\"/\\\", quoteName));\\n        }\\n        return names;\\n    }\\n\\n    function getPairNamesWithIds(\\n        uint256[] memory ids\\n    ) external view override returns (string[] memory names) {\\n        names = new string[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            (address base, address quote) = IOrderbook(allPairs[i])\\n                .getBaseQuote();\\n            string memory baseName = IERC20(base).symbol();\\n            string memory quoteName = IERC20(quote).symbol();\\n            names[i] = string(abi.encodePacked(baseName, \\\"/\\\", quoteName));\\n        }\\n        return names;\\n    }\\n\\n    function getBaseQuote(\\n        address orderbook\\n    ) external view override returns (address base, address quote) {\\n        return IOrderbook(orderbook).getBaseQuote();\\n    }\\n\\n    /**\\n     * @dev Initialize orderbook factory contract with engine address, reinitialize if engine is reset.\\n     * @param engine_ The address of the engine contract\\n     */\\n    function initialize(address engine_) public initializer {\\n        engine = engine_;\\n        _createImpl();\\n    }\\n\\n    function allPairsLength() public view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    // Set immutable, consistant, one rule for orderbook implementation\\n    function _createImpl() internal {\\n        address addr;\\n        bytes memory bytecode = type(Orderbook).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(\\\"orderbook\\\", version));\\n        assembly {\\n            addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n        impl = addr;\\n    }\\n\\n    function _predictAddress(\\n        address base_,\\n        address quote_\\n    ) internal view returns (address) {\\n        bytes32 salt = _getSalt(base_, quote_);\\n        return CloneFactory.predictAddressWithSalt(address(this), impl, salt);\\n    }\\n\\n    function _getSalt(\\n        address base_,\\n        address quote_\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(base_, quote_));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/orderbooks/Orderbook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport {IOrderbook} from \\\"../interfaces/IOrderbook.sol\\\";\\nimport {Initializable} from \\\"../../security/Initializable.sol\\\";\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\nimport {ExchangeLinkedList} from \\\"../libraries/ExchangeLinkedList.sol\\\";\\nimport {ExchangeOrderbook} from \\\"../libraries/ExchangeOrderbook.sol\\\";\\n\\ninterface IWETHMinimal {\\n    function WETH() external view returns (address);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\\ncontract Orderbook is IOrderbook, Initializable {\\n    using ExchangeLinkedList for ExchangeLinkedList.PriceLinkedList;\\n    using ExchangeOrderbook for ExchangeOrderbook.OrderStorage;\\n\\n    // Pair Struct\\n    struct Pair {\\n        uint256 id;\\n        address base;\\n        address quote;\\n        address engine;\\n    }\\n\\n    Pair private pair;\\n\\n    uint64 private decDiff;\\n    bool private baseBquote;\\n\\n    ExchangeLinkedList.PriceLinkedList private priceLists;\\n    ExchangeOrderbook.OrderStorage private _askOrders;\\n    ExchangeOrderbook.OrderStorage private _bidOrders;\\n\\n    error InvalidDecimals(uint8 base, uint8 quote);\\n    error InvalidAccess(address sender, address allowed);\\n    error OrderSizeTooSmall(uint256 amount, uint256 minRequired);\\n\\n    function initialize(\\n        uint256 id_,\\n        address base_,\\n        address quote_,\\n        address engine_\\n    ) external initializer {\\n        uint8 baseD = TransferHelper.decimals(base_);\\n        uint8 quoteD = TransferHelper.decimals(quote_);\\n        if (baseD > 18 || quoteD > 18) {\\n            revert InvalidDecimals(baseD, quoteD);\\n        }\\n        (uint8 diff, bool baseBquote_) = _absdiff(baseD, quoteD);\\n        decDiff = uint64(10 ** diff);\\n        baseBquote = baseBquote_;\\n        pair = Pair(id_, base_, quote_, engine_);\\n    }\\n\\n    modifier onlyEngine() {\\n        if (msg.sender != pair.engine) {\\n            revert InvalidAccess(msg.sender, pair.engine);\\n        }\\n        _;\\n    }\\n\\n    function setLmp(uint256 price) external onlyEngine {\\n        priceLists._setLmp(price);\\n    }\\n\\n    function placeAsk(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external onlyEngine returns (uint32 id) {\\n        id = _askOrders._createOrder(owner, amount);\\n        // check if the price is new in the list. if not, insert id to the list\\n        if (_askOrders._isEmpty(price)) {\\n            priceLists._insert(false, price);\\n        }\\n        _askOrders._insertId(price, id, amount);\\n        return id;\\n    }\\n\\n    function placeBid(\\n        address owner,\\n        uint256 price,\\n        uint256 amount\\n    ) external onlyEngine returns (uint32 id) {\\n        id = _bidOrders._createOrder(owner, amount);\\n        // check if the price is new in the list. if not, insert id to the list\\n        if (_bidOrders._isEmpty(price)) {\\n            priceLists._insert(true, price);\\n        }\\n        _bidOrders._insertId(price, id, amount);\\n        return id;\\n    }\\n\\n    function cancelOrder(\\n        bool isBid,\\n        uint256 price,\\n        uint32 orderId,\\n        address owner\\n    ) external onlyEngine returns (uint256 remaining) {\\n        // check order owner\\n        ExchangeOrderbook.Order memory order = isBid\\n            ? _bidOrders._getOrder(orderId)\\n            : _askOrders._getOrder(orderId);\\n        if (order.owner != owner) {\\n            revert InvalidAccess(owner, order.owner);\\n        }\\n\\n        if (priceLists._checkPriceExists(isBid, price)) {\\n            isBid\\n                ? _bidOrders._deleteOrder(price, orderId)\\n                : _askOrders._deleteOrder(price, orderId);\\n            isBid\\n                ? _sendFunds(pair.quote, owner, order.depositAmount)\\n                : _sendFunds(pair.base, owner, order.depositAmount);\\n        }\\n\\n        return (order.depositAmount);\\n    }\\n\\n    function execute(\\n        uint32 orderId,\\n        bool isBid,\\n        uint256 price,\\n        address sender,\\n        uint256 amount\\n    ) external onlyEngine returns (address owner) {\\n        ExchangeOrderbook.Order memory order = isBid\\n            ? _bidOrders._getOrder(orderId)\\n            : _askOrders._getOrder(orderId);\\n        uint256 converted = convert(price, amount, isBid);\\n        // if isBid == true, sender is matching ask order with bid order(i.e. selling base to receive quote), otherwise sender is matching bid order with ask order(i.e. buying base with quote)\\n        if (isBid) {\\n            // decrease remaining amount of order\\n            _bidOrders._decreaseOrder(price, orderId, converted);\\n            // sender is matching ask order for base asset with quote asset\\n            _sendFunds(pair.base, order.owner, amount);\\n            // send converted amount of quote asset from owner to sender\\n            _sendFunds(pair.quote, sender, converted);\\n        }\\n        // if the order is bid order on the base/quote pair\\n        else {\\n            // decrease remaining amount of order\\n            _askOrders._decreaseOrder(price, orderId, converted);\\n            // sender is matching bid order for quote asset with base asset\\n            // send deposited amount of quote asset from sender to owner\\n            _sendFunds(pair.quote, order.owner, amount);\\n            // send converted amount of base asset from owner to sender\\n            _sendFunds(pair.base, sender, converted);\\n        }\\n        return order.owner;\\n    }\\n\\n    function fpop(\\n        bool isBid,\\n        uint256 price,\\n        uint256 remaining\\n    ) external onlyEngine returns (uint32 orderId, uint256 required) {\\n        orderId = isBid ? _bidOrders._head(price) : _askOrders._head(price);\\n        ExchangeOrderbook.Order memory order = isBid\\n            ? _bidOrders._getOrder(orderId)\\n            : _askOrders._getOrder(orderId);\\n        required = convert(price, order.depositAmount, !isBid);\\n        if (required <= remaining) {\\n            isBid ? _bidOrders._fpop(price) : _askOrders._fpop(price);\\n            if (isEmpty(isBid, price)) {\\n                isBid\\n                    ? priceLists.bidHead = priceLists._next(isBid, price)\\n                    : priceLists.askHead = priceLists._next(isBid, price);\\n            }\\n        }\\n        return (orderId, required);\\n    }\\n\\n    function _sendFunds(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        address weth = IWETHMinimal(pair.engine).WETH();\\n        if (token == weth) {\\n            IWETHMinimal(weth).withdraw(amount);\\n            return payable(to).send(amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function _absdiff(uint8 a, uint8 b) internal pure returns (uint8, bool) {\\n        return (a > b ? a - b : b - a, a > b);\\n    }\\n\\n    // get required amount for executing the order\\n    function getRequired(\\n        bool isBid,\\n        uint256 price,\\n        uint32 orderId\\n    ) external view returns (uint256 required) {\\n        ExchangeOrderbook.Order memory order = isBid\\n            ? _bidOrders._getOrder(orderId)\\n            : _askOrders._getOrder(orderId);\\n        if (order.depositAmount == 0) {\\n            return 0;\\n        }\\n        /* if ask, required base amount is quoteAmount / price,\\n         * converting the number converting decimal from quote to base,\\n         * otherwise quote amount is baseAmount * price, converting decimal from base to quote\\n         */\\n        return convert(price, order.depositAmount, isBid);\\n    }\\n\\n    /////////////////////////////////\\n    /// Price linked list methods ///\\n    /////////////////////////////////\\n\\n    function heads() external view returns (uint256, uint256) {\\n        return priceLists._heads();\\n    }\\n\\n    function askHead() external view returns (uint256) {\\n        return priceLists._askHead();\\n    }\\n\\n    function bidHead() external view returns (uint256) {\\n        return priceLists._bidHead();\\n    }\\n\\n    function mktPrice() external view returns (uint256) {\\n        return priceLists._mktPrice();\\n    }\\n\\n    function getPrices(\\n        bool isBid,\\n        uint32 n\\n    ) external view returns (uint256[] memory) {\\n        return priceLists._getPrices(isBid, n);\\n    }\\n\\n    function getOrderIds(\\n        bool isBid,\\n        uint256 price,\\n        uint32 n\\n    ) external view returns (uint32[] memory) {\\n        return\\n            isBid\\n                ? _bidOrders._getOrderIds(price, n)\\n                : _askOrders._getOrderIds(price, n);\\n    }\\n\\n    function getOrders(\\n        bool isBid,\\n        uint256 price,\\n        uint32 n\\n    ) external view returns (ExchangeOrderbook.Order[] memory) {\\n        return\\n            isBid\\n                ? _bidOrders._getOrders(price, n)\\n                : _askOrders._getOrders(price, n);\\n    }\\n\\n    function getOrder(\\n        bool isBid,\\n        uint32 orderId\\n    ) external view returns (ExchangeOrderbook.Order memory) {\\n        return\\n            isBid\\n                ? _bidOrders._getOrder(orderId)\\n                : _askOrders._getOrder(orderId);\\n    }\\n\\n    function getBaseQuote()\\n        external\\n        view\\n        returns (address base, address quote)\\n    {\\n        return (pair.base, pair.quote);\\n    }\\n\\n    /**\\n     * @dev get asset value in quote asset if isBid is true, otherwise get asset value in base asset\\n     * @param amount amount of asset in base asset if isBid is true, otherwise in quote asset\\n     * @param isBid if true, get asset value in quote asset, otherwise get asset value in base asset\\n     * @return converted asset value in quote asset if isBid is true, otherwise asset value in base asset\\n     */\\n    function assetValue(\\n        uint256 amount,\\n        bool isBid\\n    ) external view returns (uint256 converted) {\\n        return convert(priceLists._mktPrice(), amount, isBid);\\n    }\\n\\n    function isEmpty(bool isBid, uint256 price) public view returns (bool) {\\n        return isBid ? _bidOrders._isEmpty(price) : _askOrders._isEmpty(price);\\n    }\\n\\n    function convert(\\n        uint256 price,\\n        uint256 amount,\\n        bool isBid\\n    ) public view returns (uint256 converted) {\\n        if (isBid) {\\n            // convert quote to base\\n            return\\n                baseBquote\\n                    ? ((amount * price) / 1e8) / decDiff\\n                    : ((amount * price) / 1e8) * decDiff;\\n        } else {\\n            // convert base to quote\\n            return\\n                baseBquote\\n                    ? ((amount * 1e8) / price) * decDiff\\n                    : ((amount * 1e8) / price) / decDiff;\\n        }\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == IWETHMinimal(pair.engine).WETH());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/libraries/CloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nlibrary CloneFactory {\\n    function _createClone(address target) internal returns (address result) {\\n        // convert address to 20 bytes\\n        bytes20 targetBytes = bytes20(target);\\n\\n        // actual code //\\n        // 3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\n\\n        // creation code //\\n        // copy runtime code into memory and return it\\n        // 3d602d80600a3d3981f3\\n\\n        // runtime code //\\n        // code to delegatecall to address\\n        // 363d3d373d3d3d363d73 address 5af43d82803e903d91602b57fd5bf3\\n\\n        assembly {\\n            /*\\n            reads the 32 bytes of memory starting at pointer stored in 0x40\\n\\n            In solidity, the 0x40 slot in memory is special: it contains the \\\"free memory pointer\\\"\\n            which points to the end of the currently allocated memory.\\n            */\\n            let clone := mload(0x40)\\n            // store 32 bytes to memory starting at \\\"clone\\\"\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n\\n            /*\\n              |              20 bytes                |\\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n                                                      ^\\n                                                      pointer\\n            */\\n            // store 32 bytes to memory starting at \\\"clone\\\" + 20 bytes\\n            // 0x14 = 20\\n            mstore(add(clone, 0x14), targetBytes)\\n\\n            /*\\n              |               20 bytes               |                 20 bytes              |\\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe\\n                                                                                              ^\\n                                                                                              pointer\\n            */\\n            // store 32 bytes to memory starting at \\\"clone\\\" + 40 bytes\\n            // 0x28 = 40\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            /*\\n              |               20 bytes               |                 20 bytes              |           15 bytes          |\\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\n            */\\n            // create new contract\\n            // send 0 Ether\\n            // code starts at pointer stored in \\\"clone\\\"\\n            // code size 0x37 (55 bytes)\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n\\n    function _isClone(\\n        address target,\\n        address query\\n    ) internal view returns (bool result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\\n            )\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(\\n                add(clone, 0x1e),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(\\n                eq(mload(clone), mload(other)),\\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n            )\\n        }\\n    }\\n\\n    function _createCloneWithSalt(\\n        address target,\\n        bytes32 salt\\n    ) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            // Use create2 with the provided salt\\n            result := create2(0, clone, 0x37, salt)\\n            if iszero(extcodesize(result)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    function predictAddressWithSalt(address deployer, address target, bytes32 salt) internal pure returns (address) {\\n    // Create the expected bytecode of the minimal proxy\\n    bytes memory bytecode = abi.encodePacked(\\n        hex\\\"3d602d80600a3d3981f3363d3d373d3d3d363d73\\\",\\n        target,\\n        hex\\\"5af43d82803e903d91602b57fd5bf3\\\"\\n    );\\n    \\n    bytes32 bytecodeHash = keccak256(bytecode);\\n\\n    bytes32 _data = keccak256(\\n        abi.encodePacked(\\n            bytes1(0xff),\\n            deployer,\\n            salt,\\n            bytecodeHash\\n        )\\n    );\\n    return address(uint160(uint256(_data)));\\n}\\n\\n}\\n\"\r\n    },\r\n    \"contracts/safex/interfaces/IOrderbookFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface IOrderbookFactory {\\n    struct Pair {\\n        address base;\\n        address quote;\\n    }\\n\\n    function createBook(address bid_, address ask_) external returns (address orderbook);\\n\\n    function getBook(uint256 bookId_) external view returns (address orderbook);\\n\\n    function getBookByPair(address base, address quote) external view returns (address book);\\n\\n    function getBaseQuote(address orderbook) external view returns (address base, address quote);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    /// Address of a manager\\n    function engine() external view returns (address);\\n\\n    function getPairs(uint256 start, uint256 end) external view returns (Pair[] memory);\\n\\n    function getPairsWithIds(uint256[] memory ids) external view returns (Pair[] memory);\\n\\n    function getPairNames(uint256 start, uint256 end) external view returns (string[] memory names);\\n\\n    function getPairNamesWithIds(uint256[] memory ids) external view returns (string[] memory names);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/interfaces/IOrderbook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/ExchangeOrderbook.sol\\\";\\n\\ninterface IOrderbook {\\n    function initialize(uint256 id, address base_, address quote_, address engine_) external;\\n\\n    function fpop(bool isBid, uint256 price, uint256 remaining) external returns (uint32 orderId, uint256 required);\\n\\n    function setLmp(uint256 lmp) external;\\n\\n    function mktPrice() external view returns (uint256);\\n\\n    function assetValue(uint256 amount, bool isBid) external view returns (uint256 converted);\\n\\n    function isEmpty(bool isBid, uint256 price) external view returns (bool);\\n\\n    function getRequired(bool isBid, uint256 price, uint32 orderId) external view returns (uint256 required);\\n\\n    function convert(uint256 price, uint256 amount, bool isBid) external view returns (uint256 converted);\\n\\n    function placeAsk(address owner, uint256 price, uint256 amount) external returns (uint32 orderId);\\n\\n    function placeBid(address owner, uint256 price, uint256 amount) external returns (uint32 orderId);\\n\\n    function cancelOrder(bool isBid, uint256 price, uint32 orderId, address owner)\\n        external\\n        returns (uint256 remaining);\\n\\n    function execute(uint32 orderId, bool isBid, uint256 price, address sender, uint256 amount)\\n        external\\n        returns (address owner);\\n\\n    function heads() external view returns (uint256 bidHead, uint256 askHead);\\n\\n    function askHead() external view returns (uint256);\\n\\n    function bidHead() external view returns (uint256);\\n\\n    function getPrices(bool isBid, uint32 n) external view returns (uint256[] memory);\\n\\n    function getOrders(bool isBid, uint256 price, uint32 n) external view returns (ExchangeOrderbook.Order[] memory);\\n\\n    function getOrder(bool isBid, uint32 orderId) external view returns (ExchangeOrderbook.Order memory);\\n\\n    function getOrderIds(bool isBid, uint256 price, uint32 n) external view returns (uint32[] memory);\\n\\n    function getBaseQuote() external view returns(address base, address quote);\\n}\\n\"\r\n    },\r\n    \"contracts/security/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ncontract Initializable {\\n    bool private _initialized = false;\\n\\n    modifier initializer() {\\n        // solhint-disable-next-line reason-string\\n        require(!_initialized);\\n        _;\\n        _initialized = true;\\n    }\\n\\n    function initialized() external view returns (bool) {\\n        return _initialized;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AF\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TF\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TFF\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success,) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETF\\\");\\n    }\\n\\n    function decimals(address token) internal view returns (uint8) {\\n        // bytes4(keccak256(bytes(\\\"decimals()\\\")));\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(0x313ce567));\\n        require(success, \\\"DF\\\");\\n        return abi.decode(data, (uint8));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/libraries/ExchangeLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nlibrary ExchangeLinkedList {\\n    error NoMatchPrice(uint256 askHead, uint256 bidHead, uint256 lmp);\\n\\n    struct PriceLinkedList {\\n        /// Hashmap-style linked list of prices to route orders\\n        // key: price, value: next_price (next_price > price)\\n        mapping(uint256 => uint256) askPrices;\\n        // key: price, value: next_price (next_price < price)\\n        mapping(uint256 => uint256) bidPrices;\\n        // Head of the bid price linked list(i.e. highest bid price)\\n        uint256 askHead;\\n        // Head of the ask price linked list(i.e. lowest ask price)\\n        uint256 bidHead;\\n        // Last matched price\\n        uint256 lmp;\\n    }\\n\\n    error ZeroPrice(uint256 price);\\n    error NoHeadBelow(bool isBid, uint256 head);\\n    error PriceOutOfRange(uint256 price, uint256 np);\\n    error PriceNoneInRange(uint256 price, uint256 np);\\n\\n    function _setLmp(PriceLinkedList storage self, uint256 lmp_) internal {\\n        self.lmp = lmp_;\\n    }\\n\\n    function _heads(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256, uint256) {\\n        return (self.bidHead, self.askHead);\\n    }\\n\\n    function _askHead(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256) {\\n        return self.askHead;\\n    }\\n\\n    function _bidHead(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256) {\\n        return self.bidHead;\\n    }\\n\\n    function _mktPrice(\\n        PriceLinkedList storage self\\n    ) internal view returns (uint256) {\\n        if (self.lmp == 0) {\\n            if (self.bidHead == 0 && self.askHead == 0) {\\n                revert NoMatchPrice(self.bidHead, self.askHead, self.lmp);\\n            } else if (self.bidHead != 0 && self.askHead != 0) {\\n                return (self.bidHead + self.askHead) / 2;\\n            } else {\\n                return self.askHead == 0 ? self.bidHead : self.askHead;\\n            }\\n        } else {\\n            if (self.lmp < self.bidHead) {\\n                return self.bidHead;\\n            } else if (self.lmp > self.askHead && self.askHead != 0) {\\n                return self.askHead;\\n            } else {\\n                return self.lmp;\\n            }\\n        }\\n    }\\n\\n    function _next(\\n        PriceLinkedList storage self,\\n        bool isBid,\\n        uint256 price\\n    ) internal view returns (uint256) {\\n        if (isBid) {\\n            return self.bidPrices[price];\\n        } else {\\n            return self.askPrices[price];\\n        }\\n    }\\n\\n    // for bidPrices, lower ones are next, for askPrices, higher ones are next\\n    function _insert(\\n        PriceLinkedList storage self,\\n        bool isBid,\\n        uint256 price\\n    ) internal {\\n        if (isBid) {\\n            uint256 last = 0;\\n            uint256 head = self.bidHead;\\n            // insert bid price to the linked list\\n            // if the list is empty\\n            if (head == 0 || price > head) {\\n                self.bidHead = price;\\n                self.bidPrices[price] = head;\\n                return;\\n            }\\n            while (head != 0) {\\n                uint256 next = self.bidPrices[head];\\n                if (price < next) {\\n                    // Keep traversing\\n                    head = self.bidPrices[head];\\n                    last = next;\\n                } else if (price > next) {\\n                    if (next == 0) {\\n                        // Insert price at the end of the list\\n                        self.bidPrices[head] = price;\\n                        self.bidPrices[price] = 0;\\n                        return;\\n                    }\\n                    // Insert price in the middle of the list\\n                    self.bidPrices[head] = price;\\n                    self.bidPrices[price] = next;\\n                    return;\\n                } else {\\n                    // price is already included in the queue as it is equal to next\\n                    // End traversal as there is no need to traverse further\\n                    return;\\n                }\\n            }\\n        }\\n        // insert ask price to the linked list\\n        else {\\n            uint256 last = 0;\\n            uint256 head = self.askHead;\\n            // insert order to the linked list\\n            // if the list is empty and price is the lowest ask\\n            if (head == 0 || price < head) {\\n                self.askHead = price;\\n                self.askPrices[price] = head;\\n                return;\\n            }\\n            // traverse the list\\n            while (head != 0) {\\n                uint256 next = self.askPrices[head];\\n                // Keep traversing\\n                if (price > next) {\\n                    if (next == 0) {\\n                        // Insert price in the middle of the list\\n                        self.askPrices[head] = price;\\n                        self.askPrices[price] = 0;\\n                        return;\\n                    }\\n                    head = self.askPrices[head];\\n                    last = next;\\n                } else if (price < next) {\\n                    // Insert price in the middle of the list\\n                    self.askPrices[head] = price;\\n                    self.askPrices[price] = next;\\n                    return;\\n                } else {\\n                    // price is already included in the queue as it is equal to next\\n                    // End traversal as there is no need to traverse further\\n                    return;\\n                }\\n            }\\n        }\\n    }\\n\\n    // show n prices shown in the orderbook\\n    function _getPrices(\\n        PriceLinkedList storage self,\\n        bool isBid,\\n        uint256 n\\n    ) internal view returns (uint256[] memory) {\\n        uint256 i = 0;\\n        uint256[] memory prices = new uint256[](n);\\n        for (\\n            uint256 price = isBid ? self.bidHead : self.askHead;\\n            price != 0 && i < n;\\n            price = isBid ? self.bidPrices[price] : self.askPrices[price]\\n        ) {\\n            prices[i] = price;\\n            i++;\\n        }\\n        return prices;\\n    }\\n\\n    function _checkPriceExists(\\n        PriceLinkedList storage self,\\n        bool isBid,\\n        uint256 price\\n    ) internal view returns (bool) {\\n        // traverse the list\\n        if (price == 0) {\\n            revert ZeroPrice(price);\\n            //return false;\\n        }\\n\\n        if (isBid) {\\n            uint256 last = 0;\\n            uint256 head = self.bidHead;\\n            // insert bid price to the linked list\\n            // if the list is empty\\n            if (head == 0 || price > head) {\\n                revert NoHeadBelow(isBid, head);\\n            }\\n            while (head != 0 && price > head) {\\n                uint256 next = self.bidPrices[head];\\n                if (price < next) {\\n                    // Keep traversing\\n                    head = self.bidPrices[head];\\n                    last = next;\\n                } else if (price > next) {\\n                    if (next == 0) {\\n                        // if there is only one price left, check if it is the price we are looking for\\n                        if(head == price) {\\n                            return true;\\n                        }\\n                        // Price does not exist in price list\\n                        revert PriceOutOfRange(head, price);\\n                    }\\n                    // Price does not exist within range of prices\\n                    revert PriceNoneInRange(head, price);\\n                } else {\\n                    // price is already included in the queue as it is equal to next. price exists in the orderbook\\n                    // End traversal as there is no need to traverse further\\n                    return true;\\n                }\\n            }\\n        }\\n        // insert ask price to the linked list\\n        else {\\n            uint256 last = 0;\\n            uint256 head = self.askHead;\\n            // insert order to the linked list\\n            // if the list is empty and price is the lowest ask\\n            if (head == 0 || price < head) {\\n                revert NoHeadBelow(isBid, head);\\n            }\\n            // traverse the list\\n            while (head != 0) {\\n                uint256 next = self.askPrices[head];\\n                // Keep traversing\\n                if (price > next) {\\n                    if (next == 0) {\\n                        // if there is only one price left, check if it is the price we are looking for\\n                        if(head == price) {\\n                            return true;\\n                        }\\n                        // Price does not exist in price list                       \\n                        revert PriceOutOfRange(head, price);\\n                    }\\n                    head = self.askPrices[head];\\n                    last = next;\\n                } else if (price < next) {\\n                    // Price does not exist within range of prices\\n                    revert PriceNoneInRange(head, price);\\n                } else {\\n                    // price is already included in the queue as it is equal to next\\n                    // End traversal as there is no need to traverse further\\n                    return true;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/libraries/ExchangeOrderbook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nlibrary ExchangeOrderbook {\\n  // Order struct\\n  struct Order {\\n    address owner;\\n    uint256 depositAmount;\\n  }\\n\\n  // Order Linked List\\n  struct OrderStorage {\\n    /// Hashmap-style linked list of prices to route orders\\n    // key: price, value: order indices linked hashmap\\n    mapping(uint256 => mapping(uint32 => uint32)) list;\\n    mapping(uint32 => Order) orders;\\n    mapping(uint32 => bool) canceled;\\n    // Head of the linked list(i.e. lowest ask price / highest bid price)\\n    mapping(uint256 => uint32) head;\\n    // count of the orders, used for array allocation\\n    uint32 count;\\n    address engine;\\n  }\\n\\n  // for orders, lower depositAmount are next, higher depositAmount comes first\\n  function _insertId(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 id,\\n    uint256 amount\\n  ) internal {\\n    uint32 last = 0;\\n    uint32 head = self.head[price];\\n    mapping(uint32 => uint32) storage list = self.list[price];\\n    mapping(uint32 => Order) storage orders = self.orders;\\n    // insert order to the linked list\\n    // if the list is empty\\n    if (head == 0 || amount > self.orders[head].depositAmount) {\\n      self.head[price] = id;\\n      list[id] = head;\\n      return;\\n    }\\n    // Traverse through list until we find the right spot where id's deposit amount is higher than next\\n    while (head != 0) {\\n      // what if order deposit amount is bigger than the next order's deposit amount?\\n      uint32 next = list[head];\\n      if (amount < orders[next].depositAmount) {\\n        // Keep traversing\\n        head = list[head];\\n        last = next;\\n      } else if (amount > orders[next].depositAmount) {\\n        // This is either order is cancelled or order is at the end of the list\\n        if (orders[next].depositAmount == 0) {\\n          // what if order is canceled and order id still stays in the list?\\n          // if order is canceled and stays in the list, there is at least a next order in the list\\n          if (self.canceled[head]) {\\n            // Keep traversing\\n            head = list[head];\\n            last = next;\\n          } else {\\n            // Insert order at the end of the list\\n            list[head] = id;\\n            list[id] = 0;\\n            return;\\n          }\\n        }\\n        // Insert order in the middle of the list\\n        list[head] = id;\\n        list[id] = next;\\n        return;\\n      }\\n      // what if there is same order with same deposit amount?\\n      else if (amount == orders[next].depositAmount) {\\n        list[id] = list[head];\\n        list[head] = id;\\n        return;\\n      }\\n    }\\n  }\\n\\n  // pop front\\n  function _fpop(\\n    OrderStorage storage self,\\n    uint256 price\\n  ) internal returns (uint256) {\\n    uint32 first = self.head[price];\\n    if (first == 0) {\\n      return 0;\\n    }\\n    uint32 next = self.list[price][first];\\n    self.head[price] = next;\\n    delete self.list[price][first];\\n    return first;\\n  }\\n\\n  function _createOrder(\\n    OrderStorage storage self,\\n    address owner,\\n    uint256 depositAmount\\n  ) internal returns (uint32 id) {\\n    Order memory order = Order({ owner: owner, depositAmount: depositAmount });\\n    // prevent order overflow, order id must start from 1\\n    self.count = self.count == 0 || self.count == type(uint32).max\\n      ? 1\\n      : self.count + 1;\\n    self.orders[self.count] = order;\\n    return self.count;\\n  }\\n\\n  function _decreaseOrder(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 id,\\n    uint256 amount\\n  ) internal {\\n    uint256 decreased = self.orders[id].depositAmount - amount;\\n    if (decreased == 0) {\\n      _deleteOrder(self, price, id);\\n    } else {\\n      self.orders[id].depositAmount = decreased;\\n    }\\n  }\\n\\n  function _deleteOrder(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 id\\n  ) internal {\\n    uint32 last = 0;\\n    uint32 head = self.head[price];\\n    uint16 i;\\n    mapping(uint32 => uint32) storage list = self.list[price];\\n    // delete id in the order linked list\\n    if (head == id) {\\n      self.head[price] = list[head];\\n      delete list[id];\\n    } else {\\n      // search for the order id in the linked list\\n      while (head != 0 && i < 30) {\\n        uint32 next = list[head];\\n        if (head == id) {\\n          list[last] = next;\\n          delete list[id];\\n          break;\\n        }\\n        last = head;\\n        head = next;\\n        ++i;\\n      }\\n    }\\n    // delete order\\n    delete self.orders[id];\\n    // add canceled info to see if the order was deleted in the list\\n    if (i == 30) {\\n      self.canceled[id] = true;\\n    }\\n    return;\\n  }\\n\\n  // show n order ids at the price in the orderbook\\n  function _getOrderIds(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 n\\n  ) internal view returns (uint32[] memory) {\\n    uint32 head = self.head[price];\\n    uint32[] memory orders = new uint32[](n);\\n    uint32 i = 0;\\n    while (head != 0 && i < n) {\\n      orders[i] = head;\\n      head = self.list[price][head];\\n      i++;\\n    }\\n    return orders;\\n  }\\n\\n  function _getOrders(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 n\\n  ) internal view returns (Order[] memory) {\\n    uint32 head = self.head[price];\\n    Order[] memory orders = new Order[](n);\\n    uint32 i = 0;\\n    while (head != 0 && i < n) {\\n      orders[i] = self.orders[head];\\n      head = self.list[price][head];\\n      i++;\\n    }\\n    return orders;\\n  }\\n\\n  function _head(\\n    OrderStorage storage self,\\n    uint256 price\\n  ) internal view returns (uint32) {\\n    return self.head[price];\\n  }\\n\\n  function _isEmpty(\\n    OrderStorage storage self,\\n    uint256 price\\n  ) internal view returns (bool) {\\n    return self.head[price] == 0;\\n  }\\n\\n  function _next(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 curr\\n  ) internal view returns (uint32) {\\n    return self.list[price][curr];\\n  }\\n\\n  function _getOrder(\\n    OrderStorage storage self,\\n    uint32 id\\n  ) internal view returns (Order memory) {\\n    return self.orders[id];\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@graphprotocol/=node_modules/@graphprotocol/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@uniswap/v4-core/=lib/periphery-next/lib/v4-core/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/periphery-next/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-gas-snapshot/=lib/periphery-next/lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"lib/periphery-next:@openzeppelin/contracts/=lib/periphery-next/lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/periphery-next:@uniswap/v4-core/=lib/periphery-next/lib/v4-core/\",\r\n      \"lib/periphery-next:forge-gas-snapshot/=lib/periphery-next/lib/forge-gas-snapshot/src/\",\r\n      \"lib/periphery-next:solmate/=lib/periphery-next/lib/v4-core/lib/solmate/src/\",\r\n      \"lib/periphery-next:v4-core/=lib/periphery-next/lib/v4-core/contracts/\",\r\n      \"openzeppelin-contracts/=lib/periphery-next/lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/periphery-next/lib/openzeppelin-contracts/contracts/\",\r\n      \"periphery-next/=lib/periphery-next/contracts/\",\r\n      \"solmate/=lib/periphery-next/lib/solmate/src/\",\r\n      \"v4-core/=lib/periphery-next/lib/v4-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowed\",\"type\":\"address\"}],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"SameBaseQuote\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_\",\"type\":\"address\"}],\"name\":\"createBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"}],\"name\":\"getBaseQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bookId_\",\"type\":\"uint256\"}],\"name\":\"getBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"getBookByPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"book\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPairNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getPairNamesWithIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"internalType\":\"struct IOrderbookFactory.Pair[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getPairsWithIds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"internalType\":\"struct IOrderbookFactory.Pair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"engine_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isClone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"cloned\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OrderbookFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}