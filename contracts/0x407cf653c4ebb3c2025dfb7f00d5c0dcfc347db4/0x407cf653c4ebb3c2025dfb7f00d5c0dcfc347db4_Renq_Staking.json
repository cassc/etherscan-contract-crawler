{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Renq_Staking {\r\n    using SafeMath for uint256;\r\n\r\n    struct depositStatus {\r\n        uint256 amount_in;\r\n        uint256 start_date;\r\n        uint256 reward_date;\r\n        bool deleted;\r\n        uint256 pool;\r\n    }\r\n    struct referralStatus {\r\n        uint256 amount_in;\r\n        address ref_address;\r\n    }\r\n    struct userInfo {\r\n        depositStatus[] deposits;\r\n        referralStatus[] refs;\r\n        uint256[6] total_deposit;\r\n        uint256 total_ref;\r\n    }\r\n\r\n    mapping(address => userInfo) users;\r\n\r\n    IBEP20 public _token;\r\n    bool public referralStatusBool = false;\r\n    bool public stakeUnstakeFeeBool = false;\r\n\r\n    address public owner;\r\n    mapping(uint256 => uint256) public totalDepositPerPool;\r\n    uint256 private owner_fee = 2000000000000;\r\n    uint256 private early_fee = 20000000000000;\r\n    uint256 public early_record;\r\n    uint256 private max_percent = 20000000000000;\r\n    uint256[6] private minute_percent = [\r\n        22831050,\r\n        38051750,\r\n        47564687,\r\n        57077625,\r\n        142694063,\r\n        285388127\r\n    ];\r\n\r\n    uint256[6] private pools = [\r\n        1 days,\r\n        7 days,\r\n        14 days,\r\n        30 days,\r\n        180 days,\r\n        365 days\r\n    ];\r\n    uint256 private ref_percent = 2000000000000;\r\n    uint256 private percent = 100000000000000;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier checkAllowance(uint256 amount) {\r\n        require(\r\n            _token.allowance(msg.sender, address(this)) >= amount,\r\n            \"Allowance Error\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address token) {\r\n        owner = 0x2D3C5979d582400708Eb1dc3Be24a06a7864c292;\r\n\r\n        _token = IBEP20(token);\r\n    }\r\n\r\n    function userDeposit(\r\n        address referral,\r\n        uint256 _amount,\r\n        uint256 _pool\r\n    ) public checkAllowance(_amount) {\r\n        // require(contractStarted(), \"Contract not started yet.\");\r\n        require(_amount > 0, \"Insufficinet value\");\r\n        _token.transferFrom(msg.sender, address(this), _amount);\r\n        uint256 value = _amount;\r\n        // send fee to owner\r\n        if (stakeUnstakeFeeBool) {\r\n            uint256 fee = value.mul(owner_fee).div(percent);\r\n            _token.transfer(owner, fee);\r\n            value = value - fee;\r\n        }\r\n\r\n        // save information\r\n        depositStatus memory temp = depositStatus(\r\n            value,\r\n            block.timestamp,\r\n            block.timestamp,\r\n            false,\r\n            _pool\r\n        );\r\n        users[msg.sender].deposits.push(temp);\r\n        users[msg.sender].total_deposit[_pool] = users[msg.sender]\r\n            .total_deposit[_pool]\r\n            .add(value);\r\n\r\n        totalDepositPerPool[_pool] = totalDepositPerPool[_pool].add(value);\r\n\r\n        // // if user enter with referral link, save referral data\r\n        if (referral != msg.sender && referralStatusBool) {\r\n            value = _amount.mul(ref_percent).div(percent);\r\n            referralStatus memory temp1 = referralStatus(value, msg.sender);\r\n            users[referral].refs.push(temp1);\r\n            users[referral].total_ref = users[referral].total_ref.add(value);\r\n        }\r\n    }\r\n\r\n    function withdrawReward(uint256 _pool) public {\r\n        uint256 total_amount = calcReward(msg.sender, _pool);\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        require(balance >= total_amount, \"Pool has not enough crypto\");\r\n        removeAfterReward(msg.sender, _pool);\r\n        _token.transfer(msg.sender, total_amount);\r\n    }\r\n\r\n    function removeAfterReward(address to, uint256 _pool) internal {\r\n        uint256 count = getUserDepositCount(to);\r\n        userInfo storage user = users[to];\r\n        uint256 current = block.timestamp;\r\n        for (uint256 i = 0; i < count; i++) {\r\n            depositStatus storage perStatus = users[to].deposits[i];\r\n            uint256 poolx = perStatus.pool;\r\n\r\n            if (poolx != _pool) {\r\n                continue;\r\n            }\r\n\r\n            user.deposits[i].reward_date = current;\r\n        }\r\n    }\r\n\r\n    function withdrawDeposit(uint256 amount, uint256 _pool) public {\r\n        uint256 total_amount = calcWithdrawCall(msg.sender, _pool, amount);\r\n        require(amount <= total_amount, \"Invalid Input\");\r\n        require(\r\n            _token.balanceOf(address(this)) >= amount,\r\n            \"Pool has not enough crypto\"\r\n        );\r\n        withdrawReward(_pool);\r\n        amount = total_amount;\r\n        removeAfterWithdraw(msg.sender, amount, _pool);\r\n        if (stakeUnstakeFeeBool) {\r\n            uint256 fee = amount.mul(owner_fee).div(percent);\r\n            _token.transfer(owner, fee);\r\n            amount = amount - fee;\r\n        }\r\n\r\n        //  users[msg.sender].total_deposit[_pool] = users[msg.sender]\r\n        //     .total_deposit[_pool]\r\n        //     .sub(amount);\r\n\r\n        // totalDepositPerPool[_pool] = totalDepositPerPool[_pool].sub(amount);\r\n\r\n        _token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawToken(address to, uint256 amount) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        if (amount > balance) {\r\n            _token.transfer(to, balance);\r\n        } else {\r\n            _token.transfer(to, amount);\r\n        }\r\n    }\r\n\r\n    function depositToken(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"you can deposit more than 0 snt\");\r\n        uint256 balance = _token.balanceOf(msg.sender);\r\n        uint256 allowance = _token.allowance(msg.sender, address(this));\r\n\r\n        require(\r\n            balance >= amount && allowance >= amount,\r\n            \"Insufficient balance or allowance\"\r\n        );\r\n\r\n        _token.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function removeAfterWithdraw(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 _pool\r\n    ) internal {\r\n        uint256 count = getUserDepositCount(to);\r\n        uint256 tamt = amount;\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            depositStatus storage perStatus = users[to].deposits[i];\r\n\r\n            if (perStatus.deleted == true || perStatus.pool != _pool) {\r\n                continue;\r\n            } else if (perStatus.amount_in <= tamt) {\r\n                tamt = tamt.sub(perStatus.amount_in);\r\n                delete users[to].deposits[i];\r\n                users[to].deposits[i].deleted = true;\r\n\r\n                // i = i.sub(1);\r\n                // count = count.sub(1);\r\n            } else {\r\n                users[to].deposits[i].amount_in = users[to]\r\n                    .deposits[i]\r\n                    .amount_in\r\n                    .sub(tamt);\r\n                users[to].deposits[i].start_date = block.timestamp;\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawReferral() public {\r\n        userInfo storage user = users[msg.sender];\r\n        require(\r\n            referralStatusBool == true,\r\n            \"Referral system is currently unavailable\"\r\n        );\r\n        require(\r\n            _token.balanceOf(address(this)) >= user.total_ref,\r\n            \"Pool has not enough crypto\"\r\n        );\r\n        _token.transfer(msg.sender, user.total_ref);\r\n        users[msg.sender].total_ref = 0;\r\n    }\r\n\r\n    function calcWithdrawCall(\r\n        address to,\r\n        uint256 _pool,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        uint256 value = 0;\r\n        uint256 count = getUserDepositCount(to);\r\n        uint256 current = block.timestamp;\r\n        userInfo storage user = users[to];\r\n\r\n        // uint256 tamt = _amount.mul(early_fee).div(percent);\r\n        // early_record += tamt;\r\n        for (uint256 i = 0; i < count; i++) {\r\n            depositStatus storage perStatus = user.deposits[i];\r\n\r\n            uint256 stakeTime = current - perStatus.start_date;\r\n            uint256 eachReward = perStatus.amount_in;\r\n            uint256 poolx = perStatus.pool;\r\n\r\n            if (poolx == _pool) {\r\n                totalDepositPerPool[_pool] -= perStatus.amount_in;\r\n                if (stakeTime < pools[poolx]) {\r\n                    early_record += perStatus.amount_in.mul(early_fee).div(\r\n                        percent\r\n                    );\r\n\r\n                    eachReward =\r\n                        eachReward -\r\n                        eachReward.mul(early_fee).div(percent);\r\n\r\n                    user.deposits[i].amount_in =\r\n                        perStatus.amount_in -\r\n                        perStatus.amount_in.mul(early_fee).div(percent);\r\n                }\r\n\r\n                value = value.add(eachReward);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function calcWithdraw(\r\n        address to,\r\n        uint256 _pool,\r\n        bool _bool\r\n    ) public view returns (uint256) {\r\n        uint256 value = 0;\r\n        uint256 count = getUserDepositCount(to);\r\n        uint256 current = block.timestamp;\r\n        userInfo storage user = users[to];\r\n        for (uint256 i = 0; i < count; i++) {\r\n            depositStatus storage perStatus = user.deposits[i];\r\n            uint256 stakeTime = current - perStatus.start_date;\r\n            uint256 eachReward = perStatus.amount_in;\r\n            uint256 poolx = perStatus.pool;\r\n\r\n            if (poolx == _pool) {\r\n                if (stakeTime < pools[perStatus.pool] && _bool) {\r\n                    eachReward =\r\n                        eachReward -\r\n                        eachReward.mul(early_fee).div(percent);\r\n                }\r\n\r\n                value = value.add(eachReward);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function calcReward(\r\n        address to,\r\n        uint256 _pool\r\n    ) public view returns (uint256) {\r\n        uint256 value = 0;\r\n        uint256 current = block.timestamp;\r\n        uint256 count = getUserDepositCount(to);\r\n        userInfo storage user = users[to];\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            depositStatus storage perStatus = user.deposits[i];\r\n            uint256 eachReward = perStatus.amount_in;\r\n            uint256 stakeTime = current - perStatus.start_date;\r\n            uint256 period = (current - perStatus.reward_date).div(1 minutes);\r\n            uint256 stakePlan = perStatus.pool;\r\n\r\n            if (stakePlan != _pool) {\r\n                continue;\r\n            }\r\n\r\n            if (stakeTime <= 1 days && stakePlan == 0) {\r\n                eachReward = eachReward.mul(period).mul(minute_percent[0]).div(\r\n                    percent\r\n                );\r\n            } else if (stakeTime <= 7 days && stakePlan == 1) {\r\n                eachReward = eachReward.mul(period).mul(minute_percent[1]).div(\r\n                    percent\r\n                );\r\n            } else if (stakeTime <= 14 days && stakePlan == 2) {\r\n                eachReward = eachReward.mul(period).mul(minute_percent[2]).div(\r\n                    percent\r\n                );\r\n            } else if (stakeTime <= 30 days && stakePlan == 3) {\r\n                eachReward = eachReward.mul(period).mul(minute_percent[3]).div(\r\n                    percent\r\n                );\r\n            } else if (stakeTime <= 180 days && stakePlan == 4) {\r\n                eachReward = eachReward.mul(period).mul(minute_percent[4]).div(\r\n                    percent\r\n                );\r\n            } else if (stakeTime <= 365 days && stakePlan == 5) {\r\n                eachReward = eachReward.mul(period).mul(minute_percent[5]).div(\r\n                    percent\r\n                );\r\n            } else {\r\n                eachReward = eachReward.mul(period).mul(minute_percent[0]).div(\r\n                    percent\r\n                );\r\n            }\r\n\r\n            value = value.add(eachReward);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function getUserDepositCount(address to) public view returns (uint256) {\r\n        userInfo storage user = users[to];\r\n        return user.deposits.length;\r\n    }\r\n\r\n    function getUserReferralCount(address to) public view returns (uint256) {\r\n        userInfo storage user = users[to];\r\n        return user.refs.length;\r\n    }\r\n\r\n    function getUserDeposit(\r\n        uint256 index\r\n    ) public view returns (uint256, uint256) {\r\n        userInfo storage user = users[msg.sender];\r\n        depositStatus storage userCurrent = user.deposits[index];\r\n        return (userCurrent.amount_in, userCurrent.start_date);\r\n    }\r\n\r\n    function getTotalReferral(address to) public view returns (uint256) {\r\n        userInfo storage user = users[to];\r\n        return user.total_ref;\r\n    }\r\n\r\n    function getTotalDeposit(uint256 _pool) public view returns (uint256) {\r\n        return totalDepositPerPool[_pool];\r\n    }\r\n\r\n    function getUserTotalDeposit(\r\n        address to,\r\n        uint256 _pool\r\n    ) public view returns (uint256) {\r\n        userInfo storage user = users[to];\r\n        return user.total_deposit[_pool];\r\n    }\r\n\r\n    function getFreeTime(\r\n        address to,\r\n        uint256 _pool\r\n    ) public view returns (uint256) {\r\n        uint256 count = getUserDepositCount(to);\r\n        userInfo storage user = users[to];\r\n        uint256 i = count - 1;\r\n        uint256 time = 0;\r\n        while (i >= 0) {\r\n            depositStatus storage perStatus = user.deposits[i];\r\n            if (perStatus.pool == _pool) {\r\n                time += perStatus.start_date + pools[perStatus.pool];\r\n                break;\r\n            }\r\n            i--;\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    function checkFeePercent(uint256 fee) internal view returns (bool) {\r\n        return fee <= max_percent;\r\n    }\r\n\r\n    function setOwnerFee(uint256 fee, uint256 _early_fee) public onlyOwner {\r\n        require(checkFeePercent(fee), \"you cant set it more than 5%\");\r\n        owner_fee = fee;\r\n        early_fee = _early_fee;\r\n    }\r\n\r\n    function setOwner(address to) public onlyOwner {\r\n        owner = to;\r\n    }\r\n\r\n    function adminClaimEarlyFees() public onlyOwner {\r\n        _token.transfer(owner, early_record);\r\n        early_record = 0;\r\n    }\r\n\r\n    function setRefFee(uint256 fee) public onlyOwner {\r\n        require(checkFeePercent(fee), \"you cant set it more than 5%\");\r\n        ref_percent = fee;\r\n    }\r\n\r\n    function setMinuteFee(uint256[6] memory fee) public onlyOwner {\r\n        // require(checkFeePercent(fee), \"you cant set it more than 5%\");\r\n        minute_percent = fee;\r\n    }\r\n\r\n    function setReferralStatus(bool _referralStatusBool) public onlyOwner {\r\n        referralStatusBool = _referralStatusBool;\r\n    }\r\n\r\n    function setstakeUnstakeFeeBool(\r\n        bool _stakeUnstakeFeeBool\r\n    ) public onlyOwner {\r\n        stakeUnstakeFeeBool = _stakeUnstakeFeeBool;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminClaimEarlyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"calcWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"early_record\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getFreeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getTotalReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getUserDepositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getUserReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getUserTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStatusBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"fee\",\"type\":\"uint256[6]\"}],\"name\":\"setMinuteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_early_fee\",\"type\":\"uint256\"}],\"name\":\"setOwnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRefFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_referralStatusBool\",\"type\":\"bool\"}],\"name\":\"setReferralStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakeUnstakeFeeBool\",\"type\":\"bool\"}],\"name\":\"setstakeUnstakeFeeBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeUnstakeFeeBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDepositPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"userDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Renq_Staking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ff8c479134a18918059493243943150776cf8cf2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b420c3a3d070d2ac326742b62998dd184da27440a062528bcef5240d31413034"}