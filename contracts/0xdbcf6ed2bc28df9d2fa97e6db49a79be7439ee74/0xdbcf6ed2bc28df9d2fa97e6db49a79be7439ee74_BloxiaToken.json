{"SourceCode": "pragma solidity 0.4.23;\r\n\r\n/**\r\n * ERC20 compliant interface\r\n * See: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n**/\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address account) public view returns (uint256);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool);\r\n    function approve(address spender, uint256 amount) public returns (bool);\r\n\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * Math operations with safety checks that throw on error\r\n**/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * Adds two numbers a and b, throws on overflow.\r\n    **/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * Subtracts two numbers a and b, throws on overflow (i.e. if b is greater than a).\r\n    **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Multiplies two numbers, throws on overflow.\r\n    **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * Divide of two numbers (a by b), truncating the quotient.\r\n    **/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // require(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n        return a / b;\r\n    }\r\n}\r\n\r\n/**\r\n * ERC20 compliant token\r\n**/\r\ncontract ERC20Token is ERC20Interface {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 _totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * Return total number of tokens in existence.\r\n    **/\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Get the balance of the specified address.\r\n     * @param account - The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n    **/\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * Check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner - The address which owns the funds.\r\n     * @param spender - The address which will spend the funds.\r\n     * @return An uint256 specifying the amount of tokens still available for the spender.\r\n    **/\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * Transfer token to a specified address from 'msg.sender'.\r\n     * @param recipient - The address to transfer to.\r\n     * @param amount - The amount to be transferred.\r\n     * @return true if transfer is successfull, error otherwise.\r\n    **/\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(recipient != address(0) && recipient != address(this));\r\n        require(amount <= balances[msg.sender], \"insufficient funds\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        balances[recipient] = balances[recipient].add(amount);\r\n\r\n        emit Transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from one address to another.\r\n     * @param from - The address which you want to send tokens from.\r\n     * @param to - The address which you want to transfer to.\r\n     * @param amount - The amount of tokens to be transferred.\r\n     * @return true if transfer is successfull, error otherwise.\r\n    **/\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        require(to != address(0) && to != address(this));\r\n        require(amount <= balances[from] && amount <= allowed[from][msg.sender], \"insufficient funds\");\r\n\r\n        balances[from] = balances[from].sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n\r\n        emit Transfer(from, to, amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender - The address which will spend the funds.\r\n     * @param amount - The amount of tokens to be spent.\r\n     * @return true if transfer is successfull, error otherwise.\r\n    **/\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        require(spender != address(0) && spender != address(this));\r\n        require(amount == 0 || allowed[msg.sender][spender] == 0); // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        allowed[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n**/\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n    **/\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Throws if called by any account other than the owner.\r\n    **/\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title BurnableToken\r\n * Implements a token contract in which the owner can burn tokens only from his account.\r\n**/\r\ncontract BurnableToken is Ownable, ERC20Token {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * Owner can burn a specific amount of tokens from his account.\r\n     * @param amount - The amount of token to be burned.\r\n     * @return true if burning is successfull, error otherwise.\r\n    **/\r\n    function burn(uint256 amount) public onlyOwner returns (bool) {\r\n        require(amount <= balances[owner], \"amount should be less than available balance\");\r\n\r\n        balances[owner] = balances[owner].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        emit Burn(owner, amount);\r\n        emit Transfer(owner, address(0), amount);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PausableToken\r\n * Implements a token contract that can be paused and resumed by owner.\r\n**/\r\ncontract PausableToken is Ownable, ERC20Token {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * Modifier to make a function callable only when the contract is not paused.\r\n    **/\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Modifier to make a function callable only when the contract is paused.\r\n    **/\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Owner can pause the contract (Goes to paused state).\r\n    **/\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * Owner can unpause the contract (Goes to unpaused state).\r\n    **/\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /**\r\n     * ERC20 specific 'transfer' is only allowed, if contract is not in paused state.\r\n    **/\r\n    function transfer(address recipient, uint256 amount) public whenNotPaused returns (bool) {\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * ERC20 specific 'transferFrom' is only allowed, if contract is not in paused state.\r\n    **/\r\n    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * ERC20 specific 'approve' is only allowed, if contract is not in paused state.\r\n    **/\r\n    function approve(address spender, uint256 amount) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * Bloxia Fixed Supply Token Contract\r\n**/\r\ncontract BloxiaToken is Ownable, ERC20Token, PausableToken, BurnableToken {\r\n\r\n    string public constant name = \"Bloxia\";\r\n    string public constant symbol = \"BLOX\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 constant initial_supply = 500000000 * (10 ** uint256(decimals)); // 500 Million\r\n\r\n    /**\r\n     * Constructor that gives 'msg.sender' all of existing tokens.\r\n    **/\r\n    constructor() public {\r\n        _totalSupply = initial_supply;\r\n        balances[msg.sender] = initial_supply;\r\n        emit Transfer(0x0, msg.sender, initial_supply);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "BloxiaToken", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://799393fb0b4ea8bb361e10244954ee06c70f67e148eb8e8ffeeb8b0de048825c"}