{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/GToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal interface for gTokens, implemented by the GTokenBase contract.\r\n *      See GTokenBase.sol for further documentation.\r\n */\r\ninterface GToken is IERC20\r\n{\r\n\t// pure functions\r\n\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _netShares, uint256 _feeShares);\r\n\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) external pure returns (uint256 _cost, uint256 _feeShares);\r\n\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _grossShares, uint256 _feeShares);\r\n\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) external pure returns (uint256 _cost, uint256 _feeShares);\r\n\r\n\t// view functions\r\n\tfunction reserveToken() external view returns (address _reserveToken);\r\n\tfunction totalReserve() external view returns (uint256 _totalReserve);\r\n\tfunction depositFee() external view returns (uint256 _depositFee);\r\n\tfunction withdrawalFee() external view returns (uint256 _withdrawalFee);\r\n\r\n\t// open functions\r\n\tfunction deposit(uint256 _cost) external;\r\n\tfunction withdraw(uint256 _grossShares) external;\r\n}\r\n\r\n// File: contracts/GPooler.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev An interface to extend gTokens with locked liquidity pools.\r\n *      See GTokenBase.sol for further documentation.\r\n */\r\ninterface GPooler\r\n{\r\n\t// view functions\r\n\tfunction stakesToken() external view returns (address _stakesToken);\r\n\tfunction liquidityPool() external view returns (address _liquidityPool);\r\n\tfunction liquidityPoolBurningRate() external view returns (uint256 _burningRate);\r\n\tfunction liquidityPoolLastBurningTime() external view returns (uint256 _lastBurningTime);\r\n\tfunction liquidityPoolMigrationRecipient() external view returns (address _migrationRecipient);\r\n\tfunction liquidityPoolMigrationUnlockTime() external view returns (uint256 _migrationUnlockTime);\r\n\r\n\t// priviledged functions\r\n\tfunction allocateLiquidityPool(uint256 _stakesAmount, uint256 _sharesAmount) external;\r\n\tfunction setLiquidityPoolBurningRate(uint256 _burningRate) external;\r\n\tfunction burnLiquidityPoolPortion() external;\r\n\tfunction initiateLiquidityPoolMigration(address _migrationRecipient) external;\r\n\tfunction cancelLiquidityPoolMigration() external;\r\n\tfunction completeLiquidityPoolMigration() external;\r\n\r\n\t// emitted events\r\n\tevent BurnLiquidityPoolPortion(uint256 _stakesAmount, uint256 _sharesAmount);\r\n\tevent InitiateLiquidityPoolMigration(address indexed _migrationRecipient);\r\n\tevent CancelLiquidityPoolMigration(address indexed _migrationRecipient);\r\n\tevent CompleteLiquidityPoolMigration(address indexed _migrationRecipient, uint256 _stakesAmount, uint256 _sharesAmount);\r\n}\r\n\r\n// File: contracts/GFormulae.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Pure implementation of deposit/minting and withdrawal/burning formulas\r\n *      for gTokens.\r\n *      All operations assume that, if total supply is 0, then the total\r\n *      reserve is also 0, and vice-versa.\r\n *      Fees are calculated percentually based on the gross amount.\r\n *      See GTokenBase.sol for further documentation.\r\n */\r\nlibrary GFormulae\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/* deposit(cost):\r\n\t *   price = reserve / supply\r\n\t *   gross = cost / price\r\n\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   fee = gross - net\r\n\t *   return net, fee\r\n\t */\r\n\tfunction _calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _grossShares = _totalSupply == _totalReserve ? _cost : _cost.mul(_totalSupply).div(_totalReserve);\r\n\t\t_netShares = _grossShares.mul(uint256(1e18).sub(_depositFee)).div(1e18);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_netShares, _feeShares);\r\n\t}\r\n\r\n\t/* deposit_reverse(net):\r\n\t *   price = reserve / supply\r\n\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   cost = gross * price\r\n\t *   fee = gross - net\r\n\t *   return cost, fee\r\n\t */\r\n\tfunction _calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) internal pure returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_depositFee));\r\n\t\t_cost = _totalReserve == _totalSupply ? _grossShares : _grossShares.mul(_totalReserve).div(_totalSupply);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_cost, _feeShares);\r\n\t}\r\n\r\n\t/* withdrawal_reverse(cost):\r\n\t *   price = reserve / supply\r\n\t *   net = cost / price\r\n\t *   gross = net / 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   fee = gross - net\r\n\t *   return gross, fee\r\n\t */\r\n\tfunction _calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _netShares = _cost == _totalReserve ? _totalSupply : _cost.mul(_totalSupply).div(_totalReserve);\r\n\t\t_grossShares = _netShares.mul(1e18).div(uint256(1e18).sub(_withdrawalFee));\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_grossShares, _feeShares);\r\n\t}\r\n\r\n\t/* withdrawal(gross):\r\n\t *   price = reserve / supply\r\n\t *   net = gross * 0.99\t# fee is assumed to be 1% for simplicity\r\n\t *   cost = net * price\r\n\t *   fee = gross - net\r\n\t *   return cost, fee\r\n\t */\r\n\tfunction _calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) internal pure returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _netShares = _grossShares.mul(uint256(1e18).sub(_withdrawalFee)).div(1e18);\r\n\t\t_cost = _netShares == _totalSupply ? _totalReserve : _netShares.mul(_totalReserve).div(_totalSupply);\r\n\t\t_feeShares = _grossShares.sub(_netShares);\r\n\t\treturn (_cost, _feeShares);\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library implements auxiliary math definitions.\r\n */\r\nlibrary Math\r\n{\r\n\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\r\n\t{\r\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\r\n\t{\r\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/WrappedEther.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for WETH interoperability.\r\n */\r\ninterface WETH is IERC20\r\n{\r\n\tfunction deposit() external payable;\r\n\tfunction withdraw(uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/network/$.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library is provided for conveniece. It is the single source for\r\n *      the current network and all related hardcoded contract addresses. It\r\n *      also provide useful definitions for debuging faultless code via events.\r\n */\r\nlibrary $\r\n{\r\n\taddress constant stkGRO = 0xD93f98b483CC2F9EFE512696DF8F5deCB73F9497;\r\n\r\n\taddress constant GRO = 0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0;\r\n\r\n\taddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n\taddress constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n\taddress constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n\r\n\taddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n\taddress constant cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n\r\n\taddress constant cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n\r\n\taddress constant cETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n\taddress constant cWBTC = 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4;\r\n\r\n\taddress constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n\r\n\taddress constant Aave_AAVE_LENDING_POOL = 0x398eC7346DcD622eDc5ae82352F02bE94C62d119;\r\n\r\n\taddress constant Aave_AAVE_LENDING_POOL_CORE = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\r\n\r\n\taddress constant Balancer_FACTORY = 0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd;\r\n\r\n\taddress constant Compound_COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n\taddress constant Dydx_SOLO_MARGIN = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n}\r\n\r\n// File: contracts/modules/Wrapping.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts Wrapped Ether operations.\r\n */\r\nlibrary Wrapping\r\n{\r\n\t/**\r\n\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _wrap(uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\ttry WETH($.WETH).deposit{value: _amount}() {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\r\n\t *      Note that the contract using this library function must declare a\r\n\t *      payable receive/fallback function.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _unwrap(uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\ttry WETH($.WETH).withdraw(_amount) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\r\n\t *      This operation will revert if it does not succeed.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t */\r\n\tfunction _safeWrap(uint256 _amount) internal\r\n\t{\r\n\t\trequire(_wrap(_amount), \"wrap failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\r\n\t *      This operation will revert if it does not succeed. Note that\r\n\t *      the contract using this library function must declare a payable\r\n\t *      receive/fallback function.\r\n\t * @param _amount The amount of ETH to be wrapped in WETH.\r\n\t */\r\n\tfunction _safeUnwrap(uint256 _amount) internal\r\n\t{\r\n\t\trequire(_unwrap(_amount), \"unwrap failed\");\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/GExchange.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Custom and uniform interface to a decentralized exchange. It is used\r\n *      to estimate and convert funds whenever necessary. This furnishes\r\n *      client contracts with the flexibility to replace conversion strategy\r\n *      and routing, dynamically, by delegating these operations to different\r\n *      external contracts that share this common interface. See\r\n *      GUniswapV2Exchange.sol for further documentation.\r\n */\r\ninterface GExchange\r\n{\r\n\t// view functions\r\n\tfunction calcConversionOutputFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);\r\n\tfunction calcConversionInputFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);\r\n\r\n\t// open functions\r\n\tfunction convertFunds(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external returns (uint256 _outputAmount);\r\n}\r\n\r\n// File: contracts/modules/Conversions.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary Conversions\r\n{\r\n\tfunction _dynamicConvertFunds(address _exchange, address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) internal returns (uint256 _outputAmount)\r\n\t{\r\n\t\tTransfers._approveFunds(_from, _exchange, _inputAmount);\r\n\t\ttry GExchange(_exchange).convertFunds(_from, _to, _inputAmount, _minOutputAmount) returns (uint256 _outAmount) {\r\n\t\t\treturn _outAmount;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\tTransfers._approveFunds(_from, _exchange, 0);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/Aave.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Aave interoperability.\r\n */\r\ninterface LendingPoolAddressesProvider\r\n{\r\n\tfunction getLendingPool() external view returns (address _pool);\r\n\tfunction getLendingPoolCore() external view returns (address payable _lendingPoolCore);\r\n\tfunction getPriceOracle() external view returns (address _priceOracle);\r\n}\r\n\r\ninterface LendingPool\r\n{\r\n\tfunction getReserveConfigurationData(address _reserve) external view returns (uint256 _ltv, uint256 _liquidationThreshold, uint256 _liquidationBonus, address _interestRateStrategyAddress, bool _usageAsCollateralEnabled, bool _borrowingEnabled, bool _stableBorrowRateEnabled, bool _isActive);\r\n\tfunction getUserAccountData(address _user) external view returns (uint256 _totalLiquidityETH, uint256 _totalCollateralETH, uint256 _totalBorrowsETH, uint256 _totalFeesETH, uint256 _availableBorrowsETH, uint256 _currentLiquidationThreshold, uint256 _ltv, uint256 _healthFactor);\r\n\tfunction getUserReserveData(address _reserve, address _user) external view returns (uint256 _currentATokenBalance, uint256 _currentBorrowBalance, uint256 _principalBorrowBalance, uint256 _borrowRateMode, uint256 _borrowRate, uint256 _liquidityRate, uint256 _originationFee, uint256 _variableBorrowIndex, uint256 _lastUpdateTimestamp, bool _usageAsCollateralEnabled);\r\n\tfunction deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n\tfunction repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n\tfunction flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n}\r\n\r\ninterface LendingPoolCore\r\n{\r\n\tfunction getReserveDecimals(address _reserve) external view returns (uint256 _decimals);\r\n\tfunction getReserveAvailableLiquidity(address _reserve) external view returns (uint256 _availableLiquidity);\r\n}\r\n\r\ninterface AToken is IERC20\r\n{\r\n\tfunction underlyingAssetAddress() external view returns (address _underlyingAssetAddress);\r\n\tfunction redeem(uint256 _amount) external;\r\n}\r\n\r\ninterface APriceOracle\r\n{\r\n\tfunction getAssetPrice(address _asset) external view returns (uint256 _assetPrice);\r\n}\r\n\r\ninterface FlashLoanReceiver\r\n{\r\n\tfunction executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\n// File: contracts/modules/AaveFlashLoanAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Aave flash loan functionality. It has a\r\n *      standardized flash loan interface. See GFlashBorrower.sol,\r\n *      FlashLoans.sol, and DydxFlashLoanAbstraction.sol for further documentation.\r\n */\r\nlibrary AaveFlashLoanAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant FLASH_LOAN_FEE_RATIO = 9e14; // 0.09%\r\n\r\n\t/**\r\n\t * @dev Estimates the flash loan fee given the reserve token and required amount.\r\n\t * @param _token The ERC-20 token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _feeAmount the expected fee to be payed in excees of the loan amount.\r\n\t */\r\n\tfunction _estimateFlashLoanFee(address _token, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\r\n\t{\r\n\t\t_token; // silences warnings\r\n\t\treturn _netAmount.mul(FLASH_LOAN_FEE_RATIO).div(1e18);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the current market liquidity for a given reserve.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @return _liquidityAmount The reserve token available market liquidity.\r\n\t */\r\n\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\r\n\t{\r\n\t\taddress _core = $.Aave_AAVE_LENDING_POOL_CORE;\r\n\t\treturn LendingPoolCore(_core).getReserveAvailableLiquidity(_token);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers a flash loan. The current contract will receive a call\r\n\t *      back with the loan amount and should repay it, including fees,\r\n\t *      before returning. See GFlashBorrow.sol.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _context Additional data to be passed to the call back.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n         */\r\n\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\r\n\t{\r\n\t\taddress _pool = $.Aave_AAVE_LENDING_POOL;\r\n\t\ttry LendingPool(_pool).flashLoan(address(this), _token, _netAmount, _context) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This function should be called as the final step of the flash\r\n\t *      loan to properly implement the repay of the loan.\r\n\t * @param _token The reserve token.\r\n\t * @param _grossAmount The amount to be repayed including repay fees.\r\n\t */\r\n\tfunction _paybackFlashLoan(address _token, uint256 _grossAmount) internal\r\n\t{\r\n\t\taddress _poolCore = $.Aave_AAVE_LENDING_POOL_CORE;\r\n\t\tTransfers._pushFunds(_token, _poolCore, _grossAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/Dydx.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Minimal set of declarations for Dydx interoperability.\r\n */\r\ninterface SoloMargin\r\n{\r\n\tfunction getMarketTokenAddress(uint256 _marketId) external view returns (address _token);\r\n\tfunction getNumMarkets() external view returns (uint256 _numMarkets);\r\n\tfunction operate(Account.Info[] memory _accounts, Actions.ActionArgs[] memory _actions) external;\r\n}\r\n\r\ninterface ICallee\r\n{\r\n\tfunction callFunction(address _sender, Account.Info memory _accountInfo, bytes memory _data) external;\r\n}\r\n\r\nlibrary Account\r\n{\r\n\tstruct Info {\r\n\t\taddress owner;\r\n\t\tuint256 number;\r\n\t}\r\n}\r\n\r\nlibrary Actions\r\n{\r\n\tenum ActionType { Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call }\r\n\r\n\tstruct ActionArgs {\r\n\t\tActionType actionType;\r\n\t\tuint256 accountId;\r\n\t\tTypes.AssetAmount amount;\r\n\t\tuint256 primaryMarketId;\r\n\t\tuint256 secondaryMarketId;\r\n\t\taddress otherAddress;\r\n\t\tuint256 otherAccountId;\r\n\t\tbytes data;\r\n\t}\r\n}\r\n\r\nlibrary Types\r\n{\r\n\tenum AssetDenomination { Wei, Par }\r\n\tenum AssetReference { Delta, Target }\r\n\r\n\tstruct AssetAmount {\r\n\t\tbool sign;\r\n\t\tAssetDenomination denomination;\r\n\t\tAssetReference ref;\r\n\t\tuint256 value;\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/DydxFlashLoanAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Dydx flash loan functionality. It has a\r\n *      standardized flash loan interface. See GFlashBorrower.sol,\r\n *      FlashLoans.sol, and AaveFlashLoanAbstraction.sol for further documentation.\r\n */\r\nlibrary DydxFlashLoanAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/**\r\n\t * @dev Estimates the flash loan fee given the reserve token and required amount.\r\n\t * @param _token The ERC-20 token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _feeAmount the expected fee to be payed in excees of the loan amount.\r\n\t */\r\n\tfunction _estimateFlashLoanFee(address _token, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\r\n\t{\r\n\t\t_token; _netAmount; // silences warnings\r\n\t\treturn 2; // dydx has no fees, 2 wei is just a recommendation\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the current market liquidity for a given reserve.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @return _liquidityAmount The reserve token available market liquidity.\r\n\t */\r\n\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\r\n\t{\r\n\t\taddress _solo = $.Dydx_SOLO_MARGIN;\r\n\t\treturn IERC20(_token).balanceOf(_solo);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers a flash loan. The current contract will receive a call\r\n\t *      back with the loan amount and should repay it, including fees,\r\n\t *      before returning. See GFlashBorrow.sol.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _context Additional data to be passed to the call back.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n         */\r\n\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\r\n\t{\r\n\t\taddress _solo = $.Dydx_SOLO_MARGIN;\r\n\t\tuint256 _feeAmount = 2;\r\n\t\tuint256 _grossAmount = _netAmount.add(_feeAmount);\r\n\t\t// attempts to find the market id given a reserve token\r\n\t\tuint256 _marketId = uint256(-1);\r\n\t\tuint256 _numMarkets = SoloMargin(_solo).getNumMarkets();\r\n\t\tfor (uint256 _i = 0; _i < _numMarkets; _i++) {\r\n\t\t\taddress _address = SoloMargin(_solo).getMarketTokenAddress(_i);\r\n\t\t\tif (_address == _token) {\r\n\t\t\t\t_marketId = _i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (_marketId == uint256(-1)) return false;\r\n\t\t// a flash loan on Dydx is achieved by the following sequence of\r\n\t\t// actions: withdrawal, user call back, and finally a deposit;\r\n\t\t// which is configured below\r\n\t\tAccount.Info[] memory _accounts = new Account.Info[](1);\r\n\t\t_accounts[0] = Account.Info({ owner: address(this), number: 1 });\r\n\t\tActions.ActionArgs[] memory _actions = new Actions.ActionArgs[](3);\r\n\t\t_actions[0] = Actions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Withdraw,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: false,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: _netAmount\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: _marketId,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: \"\"\r\n\t\t});\r\n\t\t_actions[1] = Actions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Call,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: false,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: 0\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: 0,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: abi.encode(_token, _netAmount, _feeAmount, _context)\r\n\t\t});\r\n\t\t_actions[2] = Actions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Deposit,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: true,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: _grossAmount\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: _marketId,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: \"\"\r\n\t\t});\r\n\t\ttry SoloMargin(_solo).operate(_accounts, _actions) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This function should be called as the final step of the flash\r\n\t *      loan to properly implement the repay of the loan.\r\n\t * @param _token The reserve token.\r\n\t * @param _grossAmount The amount to be repayed including repay fees.\r\n\t */\r\n\tfunction _paybackFlashLoan(address _token, uint256 _grossAmount) internal\r\n\t{\r\n\t\taddress _solo = $.Dydx_SOLO_MARGIN;\r\n\t\tTransfers._approveFunds(_token, _solo, _grossAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/FlashLoans.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the flash loan request combining both Aave/Dydx.\r\n *      See GFlashBorrower.sol, AaveFlashLoanAbstraction.sol, and\r\n *      DydxFlashLoanAbstraction.sol for further documentation.\r\n */\r\nlibrary FlashLoans\r\n{\r\n\tenum Provider { Aave, Dydx }\r\n\r\n\t/**\r\n\t * @dev Estimates the flash loan fee given the reserve token and required amount.\r\n\t * @param _provider The flash loan provider, either Aave or Dydx.\r\n\t * @param _token The ERC-20 token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _feeAmount the expected fee to be payed in excees of the loan amount.\r\n\t */\r\n\tfunction _estimateFlashLoanFee(Provider _provider, address _token, uint256 _netAmount) internal pure returns (uint256 _feeAmount)\r\n\t{\r\n\t\tif (_provider == Provider.Aave) return AaveFlashLoanAbstraction._estimateFlashLoanFee(_token, _netAmount);\r\n\t\tif (_provider == Provider.Dydx) return DydxFlashLoanAbstraction._estimateFlashLoanFee(_token, _netAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the maximum market liquidity for a given reserve on\r\n\t *      both Aave and Dydx.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @return _liquidityAmount The reserve token available market liquidity.\r\n\t */\r\n\tfunction _getFlashLoanLiquidity(address _token) internal view returns (uint256 _liquidityAmount)\r\n\t{\r\n\t\tuint256 _liquidityAmountDydx = 0;\r\n\t\t_liquidityAmountDydx = DydxFlashLoanAbstraction._getFlashLoanLiquidity(_token);\r\n\t\tuint256 _liquidityAmountAave = 0;\r\n\t\t_liquidityAmountAave = AaveFlashLoanAbstraction._getFlashLoanLiquidity(_token);\r\n\t\treturn Math._max(_liquidityAmountDydx, _liquidityAmountAave);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Triggers a flash loan on Dydx and, if unsuccessful, on Aave.\r\n\t *      The current contract will receive a call back with the loan\r\n\t *      amount and should repay it, including fees, before returning.\r\n\t *      See GFlashBorrow.sol.\r\n\t * @param _token The reserve token to flash borrow from.\r\n\t * @param _netAmount The amount to be borrowed without considering repay fees.\r\n\t * @param _context Additional data to be passed to the call back.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n         */\r\n\tfunction _requestFlashLoan(address _token, uint256 _netAmount, bytes memory _context) internal returns (bool _success)\r\n\t{\r\n\t\t_success = DydxFlashLoanAbstraction._requestFlashLoan(_token, _netAmount, _context);\r\n\t\tif (_success) return true;\r\n\t\t_success = AaveFlashLoanAbstraction._requestFlashLoan(_token, _netAmount, _context);\r\n\t\tif (_success) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This function should be called as the final step of the flash\r\n\t *      loan to properly implement the repay of the loan.\r\n\t * @param _provider The flash loan provider, either Aave or Dydx.\r\n\t * @param _token The reserve token.\r\n\t * @param _grossAmount The amount to be repayed including repay fees.\r\n\t */\r\n\tfunction _paybackFlashLoan(Provider _provider, address _token, uint256 _grossAmount) internal\r\n\t{\r\n\t\tif (_provider == Provider.Aave) return AaveFlashLoanAbstraction._paybackFlashLoan(_token, _grossAmount);\r\n\t\tif (_provider == Provider.Dydx) return DydxFlashLoanAbstraction._paybackFlashLoan(_token, _grossAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/Balancer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Balancer interoperability.\r\n */\r\ninterface BFactory\r\n{\r\n\tfunction newBPool() external returns (address _pool);\r\n}\r\n\r\ninterface BPool is IERC20\r\n{\r\n\tfunction getFinalTokens() external view returns (address[] memory _tokens);\r\n\tfunction getBalance(address _token) external view returns (uint256 _balance);\r\n\tfunction setSwapFee(uint256 _swapFee) external;\r\n\tfunction finalize() external;\r\n\tfunction bind(address _token, uint256 _balance, uint256 _denorm) external;\r\n\tfunction exitPool(uint256 _poolAmountIn, uint256[] calldata _minAmountsOut) external;\r\n\tfunction joinswapExternAmountIn(address _tokenIn, uint256 _tokenAmountIn, uint256 _minPoolAmountOut) external returns (uint256 _poolAmountOut);\r\n}\r\n\r\n// File: contracts/modules/BalancerLiquidityPoolAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Balancer liquidity pool operations.\r\n */\r\nlibrary BalancerLiquidityPoolAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant MIN_AMOUNT = 1e6; // transported from Balancer\r\n\tuint256 constant TOKEN0_WEIGHT = 25e18; // 25/50 = 50%\r\n\tuint256 constant TOKEN1_WEIGHT = 25e18; // 25/50 = 50%\r\n\tuint256 constant SWAP_FEE = 10e16; // 10%\r\n\r\n\t/**\r\n\t * @dev Creates a two-asset liquidity pool and funds it by depositing\r\n\t *      both assets. The create pool is public with a 50%/50%\r\n\t *      distribution and 10% swap fee.\r\n\t * @param _token0 The ERC-20 token for the first asset of the pair.\r\n\t * @param _amount0 The amount of the first asset of the pair to be deposited.\r\n\t * @param _token1 The ERC-20 token for the second asset of the pair.\r\n\t * @param _amount1 The amount of the second asset of the pair to be deposited.\r\n\t * @return _pool The address of the newly created pool.\r\n\t */\r\n\tfunction _createPool(address _token0, uint256 _amount0, address _token1, uint256 _amount1) internal returns (address _pool)\r\n\t{\r\n\t\trequire(_amount0 >= MIN_AMOUNT && _amount1 >= MIN_AMOUNT, \"amount below the minimum\");\r\n\t\t_pool = BFactory($.Balancer_FACTORY).newBPool();\r\n\t\tTransfers._approveFunds(_token0, _pool, _amount0);\r\n\t\tTransfers._approveFunds(_token1, _pool, _amount1);\r\n\t\tBPool(_pool).bind(_token0, _amount0, TOKEN0_WEIGHT);\r\n\t\tBPool(_pool).bind(_token1, _amount1, TOKEN1_WEIGHT);\r\n\t\tBPool(_pool).setSwapFee(SWAP_FEE);\r\n\t\tBPool(_pool).finalize();\r\n\t\treturn _pool;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deposits a single asset into the liquidity pool.\r\n\t * @param _pool The liquidity pool address.\r\n\t * @param _token The ERC-20 token for the asset being deposited.\r\n\t * @param _maxAmount The maximum amount to be deposited.\r\n\t * @return _amount The actual amount deposited.\r\n\t */\r\n\tfunction _joinPool(address _pool, address _token, uint256 _maxAmount) internal returns (uint256 _amount)\r\n\t{\r\n\t\tif (_maxAmount == 0) return 0;\r\n\t\tuint256 _balanceAmount = BPool(_pool).getBalance(_token);\r\n\t\tif (_balanceAmount == 0) return 0;\r\n\t\t// caps the deposit amount to half the liquidity to mitigate error\r\n\t\tuint256 _limitAmount = _balanceAmount.div(2);\r\n\t\t_amount = Math._min(_maxAmount, _limitAmount);\r\n\t\tTransfers._approveFunds(_token, _pool, _amount);\r\n\t\tBPool(_pool).joinswapExternAmountIn(_token, _amount, 0);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Withdraws a percentage of the pool shares.\r\n\t * @param _pool The liquidity pool address.\r\n\t * @param _percent The percent amount normalized to 1e18 (100%).\r\n\t * @return _amount0 The amount received of the first asset of the pair.\r\n\t * @return _amount1 The amount received of the second asset of the pair.\r\n\t */\r\n\tfunction _exitPool(address _pool, uint256 _percent) internal returns (uint256 _amount0, uint256 _amount1)\r\n\t{\r\n\t\tif (_percent == 0) return (0, 0);\r\n\t\taddress[] memory _tokens = BPool(_pool).getFinalTokens();\r\n\t\t_amount0 = Transfers._getBalance(_tokens[0]);\r\n\t\t_amount1 = Transfers._getBalance(_tokens[1]);\r\n\t\tuint256 _poolAmount = Transfers._getBalance(_pool);\r\n\t\tuint256 _poolExitAmount = _poolAmount.mul(_percent).div(1e18);\r\n\t\tuint256[] memory _minAmountsOut = new uint256[](2);\r\n\t\t_minAmountsOut[0] = 0;\r\n\t\t_minAmountsOut[1] = 0;\r\n\t\tBPool(_pool).exitPool(_poolExitAmount, _minAmountsOut);\r\n\t\t_amount0 = Transfers._getBalance(_tokens[0]).sub(_amount0);\r\n\t\t_amount1 = Transfers._getBalance(_tokens[1]).sub(_amount1);\r\n\t\treturn (_amount0, _amount1);\r\n\t}\r\n}\r\n\r\n// File: contracts/G.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This public library provides a single entrypoint to most of the relevant\r\n *      internal libraries available in the modules folder. It exists to\r\n *      circunvent the contract size limitation imposed by the EVM. All function\r\n *      calls are directly delegated to the target library function preserving\r\n *      argument and return values exactly as they are. This library is shared\r\n *      by many contracts and even other public libraries from this repository,\r\n *      therefore it needs to be published alongside them.\r\n */\r\nlibrary G\r\n{\r\n\tfunction min(uint256 _amount1, uint256 _amount2) public pure returns (uint256 _minAmount) { return Math._min(_amount1, _amount2); }\r\n\r\n\tfunction safeWrap(uint256 _amount) public { Wrapping._safeWrap(_amount); }\r\n\tfunction safeUnwrap(uint256 _amount) public { Wrapping._safeUnwrap(_amount); }\r\n\r\n\tfunction getBalance(address _token) public view returns (uint256 _balance) { return Transfers._getBalance(_token); }\r\n\tfunction pullFunds(address _token, address _from, uint256 _amount) public { Transfers._pullFunds(_token, _from, _amount); }\r\n\tfunction pushFunds(address _token, address _to, uint256 _amount) public { Transfers._pushFunds(_token, _to, _amount); }\r\n\tfunction approveFunds(address _token, address _to, uint256 _amount) public { Transfers._approveFunds(_token, _to, _amount); }\r\n\r\n\tfunction dynamicConvertFunds(address _exchange, address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) public returns (uint256 _outputAmount) { return Conversions._dynamicConvertFunds(_exchange, _from, _to, _inputAmount, _minOutputAmount); }\r\n\r\n\tfunction getFlashLoanLiquidity(address _token) public view returns (uint256 _liquidityAmount) { return FlashLoans._getFlashLoanLiquidity(_token); }\r\n\tfunction requestFlashLoan(address _token, uint256 _amount, bytes memory _context) public returns (bool _success) { return FlashLoans._requestFlashLoan(_token, _amount, _context); }\r\n\tfunction paybackFlashLoan(FlashLoans.Provider _provider, address _token, uint256 _grossAmount) public { FlashLoans._paybackFlashLoan(_provider, _token, _grossAmount); }\r\n\r\n\tfunction createPool(address _token0, uint256 _amount0, address _token1, uint256 _amount1) public returns (address _pool) { return BalancerLiquidityPoolAbstraction._createPool(_token0, _amount0, _token1, _amount1); }\r\n\tfunction joinPool(address _pool, address _token, uint256 _maxAmount) public returns (uint256 _amount) { return BalancerLiquidityPoolAbstraction._joinPool(_pool, _token, _maxAmount); }\r\n\tfunction exitPool(address _pool, uint256 _percent) public returns (uint256 _amount0, uint256 _amount1) { return BalancerLiquidityPoolAbstraction._exitPool(_pool, _percent); }\r\n}\r\n\r\n// File: contracts/GLiquidityPoolManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev This library implements data structure abstraction for the liquidity\r\n *      pool management code in order to circuvent the EVM contract size limit.\r\n *      It is therefore a public library shared by all gToken contracts and\r\n *      needs to be published alongside them. See GTokenBase.sol for further\r\n *      documentation.\r\n */\r\nlibrary GLiquidityPoolManager\r\n{\r\n\tusing GLiquidityPoolManager for GLiquidityPoolManager.Self;\r\n\r\n\tuint256 constant MAXIMUM_BURNING_RATE = 2e16; // 2%\r\n\tuint256 constant DEFAULT_BURNING_RATE = 5e15; // 0.5%\r\n\tuint256 constant BURNING_INTERVAL = 7 days;\r\n\tuint256 constant MIGRATION_INTERVAL = 7 days;\r\n\r\n\tenum State { Created, Allocated, Migrating, Migrated }\r\n\r\n\tstruct Self {\r\n\t\taddress stakesToken;\r\n\t\taddress sharesToken;\r\n\r\n\t\tState state;\r\n\t\taddress liquidityPool;\r\n\r\n\t\tuint256 burningRate;\r\n\t\tuint256 lastBurningTime;\r\n\r\n\t\taddress migrationRecipient;\r\n\t\tuint256 migrationUnlockTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Initializes the data structure. This method is exposed publicly.\r\n\t * @param _stakesToken The ERC-20 token address to be used as stakes\r\n\t *                     token (GRO).\r\n\t * @param _sharesToken The ERC-20 token address to be used as shares\r\n\t *                     token (gToken).\r\n\t */\r\n\tfunction init(Self storage _self, address _stakesToken, address _sharesToken) public\r\n\t{\r\n\t\t_self.stakesToken = _stakesToken;\r\n\t\t_self.sharesToken = _sharesToken;\r\n\r\n\t\t_self.state = State.Created;\r\n\t\t_self.liquidityPool = address(0);\r\n\r\n\t\t_self.burningRate = DEFAULT_BURNING_RATE;\r\n\t\t_self.lastBurningTime = 0;\r\n\r\n\t\t_self.migrationRecipient = address(0);\r\n\t\t_self.migrationUnlockTime = uint256(-1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Verifies whether or not a liquidity pool is migrating or\r\n\t *      has migrated. This method is exposed publicly.\r\n\t * @return _hasMigrated A boolean indicating whether or not the pool\r\n\t *                      migration has started.\r\n\t */\r\n\tfunction hasMigrated(Self storage _self) public view returns (bool _hasMigrated)\r\n\t{\r\n\t\treturn _self.state == State.Migrating || _self.state == State.Migrated;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves the current balances (if any) of stakes and shares tokens\r\n\t *      to the liquidity pool. This method is exposed publicly.\r\n\t */\r\n\tfunction gulpPoolAssets(Self storage _self) public\r\n\t{\r\n\t\tif (!_self._hasPool()) return;\r\n\t\tG.joinPool(_self.liquidityPool, _self.stakesToken, G.getBalance(_self.stakesToken));\r\n\t\tG.joinPool(_self.liquidityPool, _self.sharesToken, G.getBalance(_self.sharesToken));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the liquidity pool burning rate. This method is exposed\r\n\t *      publicly.\r\n\t * @param _burningRate The percent value of the liquidity pool to be\r\n\t *                     burned at each 7-day period.\r\n\t */\r\n\tfunction setBurningRate(Self storage _self, uint256 _burningRate) public\r\n\t{\r\n\t\trequire(_burningRate <= MAXIMUM_BURNING_RATE, \"invalid rate\");\r\n\t\t_self.burningRate = _burningRate;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a portion of the liquidity pool according to the defined\r\n\t *      burning rate. It must happen at most once every 7-days. This\r\n\t *      method does not actually burn the funds, but it will redeem\r\n\t *      the amounts from the pool to the caller contract, which is then\r\n\t *      assumed to perform the burn. This method is exposed publicly.\r\n\t * @return _stakesAmount The amount of stakes (GRO) redeemed from the pool.\r\n\t * @return _sharesAmount The amount of shares (gToken) redeemed from the pool.\r\n\t */\r\n\tfunction burnPoolPortion(Self storage _self) public returns (uint256 _stakesAmount, uint256 _sharesAmount)\r\n\t{\r\n\t\trequire(_self._hasPool(), \"pool not available\");\r\n\t\trequire(now >= _self.lastBurningTime + BURNING_INTERVAL, \"must wait lock interval\");\r\n\t\t_self.lastBurningTime = now;\r\n\t\treturn G.exitPool(_self.liquidityPool, _self.burningRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Creates a fresh new liquidity pool and deposits the initial\r\n\t *      amounts of the stakes token and the shares token. The pool\r\n\t *      if configure 50%/50% with a 10% swap fee. This method is exposed\r\n\t *      publicly.\r\n\t * @param _stakesAmount The amount of stakes token initially deposited\r\n\t *                      into the pool.\r\n\t * @param _sharesAmount The amount of shares token initially deposited\r\n\t *                      into the pool.\r\n\t */\r\n\tfunction allocatePool(Self storage _self, uint256 _stakesAmount, uint256 _sharesAmount) public\r\n\t{\r\n\t\trequire(_self.state == State.Created, \"pool cannot be allocated\");\r\n\t\t_self.state = State.Allocated;\r\n\t\t_self.liquidityPool = G.createPool(_self.stakesToken, _stakesAmount, _self.sharesToken, _sharesAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Initiates the liquidity pool migration by setting a funds\r\n\t *      recipent and starting the clock towards the 7-day grace period.\r\n\t *      This method is exposed publicly.\r\n\t * @param _migrationRecipient The recipient address to where funds will\r\n\t *                            be transfered.\r\n\t */\r\n\tfunction initiatePoolMigration(Self storage _self, address _migrationRecipient) public\r\n\t{\r\n\t\trequire(_self.state == State.Allocated || _self.state == State.Migrated, \"migration unavailable\");\r\n\t\t_self.state = State.Migrating;\r\n\t\t_self.migrationRecipient = _migrationRecipient;\r\n\t\t_self.migrationUnlockTime = now + MIGRATION_INTERVAL;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Cancels the liquidity pool migration by reseting the procedure\r\n\t *      to its original state. This method is exposed publicly.\r\n\t * @return _migrationRecipient The address of the former recipient.\r\n\t */\r\n\tfunction cancelPoolMigration(Self storage _self) public returns (address _migrationRecipient)\r\n\t{\r\n\t\trequire(_self.state == State.Migrating, \"migration not initiated\");\r\n\t\t_migrationRecipient = _self.migrationRecipient;\r\n\t\t_self.state = State.Allocated;\r\n\t\t_self.migrationRecipient = address(0);\r\n\t\t_self.migrationUnlockTime = uint256(-1);\r\n\t\treturn _migrationRecipient;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Completes the liquidity pool migration by redeeming all funds\r\n\t *      from the pool. This method does not actually transfer the\r\n\t *      redemeed funds to the recipient, it assumes the caller contract\r\n\t *      will perform that. This method is exposed publicly.\r\n\t * @return _migrationRecipient The address of the recipient.\r\n\t * @return _stakesAmount The amount of stakes (GRO) redeemed from the pool.\r\n\t * @return _sharesAmount The amount of shares (gToken) redeemed from the pool.\r\n\t */\r\n\tfunction completePoolMigration(Self storage _self) public returns (address _migrationRecipient, uint256 _stakesAmount, uint256 _sharesAmount)\r\n\t{\r\n\t\trequire(_self.state == State.Migrating, \"migration not initiated\");\r\n\t\trequire(now >= _self.migrationUnlockTime, \"must wait lock interval\");\r\n\t\t_migrationRecipient = _self.migrationRecipient;\r\n\t\t_self.state = State.Migrated;\r\n\t\t_self.migrationRecipient = address(0);\r\n\t\t_self.migrationUnlockTime = uint256(-1);\r\n\t\t(_stakesAmount, _sharesAmount) = G.exitPool(_self.liquidityPool, 1e18);\r\n\t\treturn (_migrationRecipient, _stakesAmount, _sharesAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Verifies whether or not a liquidity pool has been allocated.\r\n\t * @return _poolAvailable A boolean indicating whether or not the pool\r\n\t *                        is available.\r\n\t */\r\n\tfunction _hasPool(Self storage _self) internal view returns (bool _poolAvailable)\r\n\t{\r\n\t\treturn _self.state != State.Created;\r\n\t}\r\n}\r\n\r\n// File: contracts/GTokenBase.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This abstract contract provides the basis implementation for all\r\n *         gTokens. It extends the ERC20 functionality by implementing all\r\n *         the methods of the GToken interface. The gToken basic functionality\r\n *         comprises of a reserve, provided in the reserve token, and a supply\r\n *         of shares. Every time someone deposits into the contract some amount\r\n *         of reserve tokens it will receive a given amount of this gToken\r\n *         shares. Conversely, upon withdrawal, someone redeems their previously\r\n *         deposited assets by providing the associated amount of gToken shares.\r\n *         The nominal price of a gToken is given by the ratio between the\r\n *         reserve balance and the total supply of shares. Upon deposit and\r\n *         withdrawal of funds a 1% fee is applied and collected from shares.\r\n *         Half of it is immediately burned, which is equivalent to\r\n *         redistributing it to all gToken holders, and the other half is\r\n *         provided to a liquidity pool configured as a 50% GRO/50% gToken with\r\n *         a 10% swap fee. Every week a percentage of the liquidity pool is\r\n *         burned to account for the accumulated swap fees for that period.\r\n *         Finally, the gToken contract provides functionality to migrate the\r\n *         total amount of funds locked in the liquidity pool to an external\r\n *         address, this mechanism is provided to facilitate the upgrade of\r\n *         this gToken contract by future implementations. After migration has\r\n *         started the fee for deposits becomes 2% and the fee for withdrawals\r\n *         becomes 0%, in order to incentivise others to follow the migration.\r\n */\r\nabstract contract GTokenBase is ERC20, Ownable, ReentrancyGuard, GToken, GPooler\r\n{\r\n\tusing GLiquidityPoolManager for GLiquidityPoolManager.Self;\r\n\r\n\tuint256 constant DEPOSIT_FEE = 1e16; // 1%\r\n\tuint256 constant WITHDRAWAL_FEE = 1e16; // 1%\r\n\tuint256 constant DEPOSIT_FEE_AFTER_MIGRATION = 2e16; // 2%\r\n\tuint256 constant WITHDRAWAL_FEE_AFTER_MIGRATION = 0e16; // 0%\r\n\r\n\taddress public immutable override stakesToken;\r\n\taddress public immutable override reserveToken;\r\n\r\n\tGLiquidityPoolManager.Self lpm;\r\n\r\n\t/**\r\n\t * @dev Constructor for the gToken contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _stakesToken The ERC-20 token address to be used as stakes\r\n\t *                     token (GRO).\r\n\t * @param _reserveToken The ERC-20 token address to be used as reserve\r\n\t *                      token (e.g. cDAI for gcDAI).\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\t_setupDecimals(_decimals);\r\n\t\tstakesToken = _stakesToken;\r\n\t\treserveToken = _reserveToken;\r\n\t\tlpm.init(_stakesToken, address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         received/minted upon depositing to the contract.\r\n\t * @param _cost The amount of reserve token being deposited.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @return _netShares The net amount of shares being received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcDepositSharesFromCost(_cost, _totalReserve, _totalSupply, _depositFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token to be deposited in order to receive the desired\r\n\t *         amount of shares.\r\n\t * @param _netShares The amount of this gToken shares to receive.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @return _cost The cost, in the reserve token, to be paid.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee) public pure override returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcDepositCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         given/burned upon withdrawing from the contract.\r\n\t * @param _cost The amount of reserve token being withdrawn.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve()\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply()\r\n\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee()\r\n\t * @return _grossShares The total amount of shares being deducted,\r\n\t *                      including fees.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalSharesFromCost(uint256 _cost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcWithdrawalSharesFromCost(_cost, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token to be withdrawn given the desired amount of\r\n\t *         shares.\r\n\t * @param _grossShares The amount of this gToken shares to provide.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee().\r\n\t * @return _cost The cost, in the reserve token, to be received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee) public pure override returns (uint256 _cost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GFormulae._calcWithdrawalCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the amount of reserve tokens currently being help by\r\n\t *         this contract.\r\n\t * @return _totalReserve The amount of the reserve token corresponding\r\n\t *                       to this contract's balance.\r\n\t */\r\n\tfunction totalReserve() public view virtual override returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn G.getBalance(reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the current minting/deposit fee. This fee is\r\n\t *         applied to the amount of this gToken shares being created\r\n\t *         upon deposit. The fee defaults to 1% and is set to 2%\r\n\t *         after the liquidity pool has been migrated.\r\n\t * @return _depositFee A percent value that accounts for the percentage\r\n\t *                     of shares being minted at each deposit that be\r\n\t *                     collected as fee.\r\n\t */\r\n\tfunction depositFee() public view override returns (uint256 _depositFee) {\r\n\t\treturn lpm.hasMigrated() ? DEPOSIT_FEE_AFTER_MIGRATION : DEPOSIT_FEE;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the current burning/withdrawal fee. This fee is\r\n\t *         applied to the amount of this gToken shares being redeemed\r\n\t *         upon withdrawal. The fee defaults to 1% and is set to 0%\r\n\t *         after the liquidity pool is migrated.\r\n\t * @return _withdrawalFee A percent value that accounts for the\r\n\t *                        percentage of shares being burned at each\r\n\t *                        withdrawal that be collected as fee.\r\n\t */\r\n\tfunction withdrawalFee() public view override returns (uint256 _withdrawalFee) {\r\n\t\treturn lpm.hasMigrated() ? WITHDRAWAL_FEE_AFTER_MIGRATION : WITHDRAWAL_FEE;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the address of the liquidity pool contract.\r\n\t * @return _liquidityPool An address identifying the liquidity pool.\r\n\t */\r\n\tfunction liquidityPool() public view override returns (address _liquidityPool)\r\n\t{\r\n\t\treturn lpm.liquidityPool;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the percentage of the liquidity pool to be burned.\r\n\t *         This amount should account approximately for the swap fees\r\n\t *         collected by the liquidity pool during a 7-day period.\r\n\t * @return _burningRate A percent value that corresponds to the current\r\n\t *                      amount of the liquidity pool to be burned at\r\n\t *                      each 7-day cycle.\r\n\t */\r\n\tfunction liquidityPoolBurningRate() public view override returns (uint256 _burningRate)\r\n\t{\r\n\t\treturn lpm.burningRate;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Marks when the last liquidity pool burn took place. There is\r\n\t *         a minimum 7-day grace period between consecutive burnings of\r\n\t *         the liquidity pool.\r\n\t * @return _lastBurningTime A timestamp for when the liquidity pool\r\n\t *                          burning took place for the last time.\r\n\t */\r\n\tfunction liquidityPoolLastBurningTime() public view override returns (uint256 _lastBurningTime)\r\n\t{\r\n\t\treturn lpm.lastBurningTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the address receiving the liquidity pool migration.\r\n\t * @return _migrationRecipient An address to which funds will be sent\r\n\t *                             upon liquidity pool migration completion.\r\n\t */\r\n\tfunction liquidityPoolMigrationRecipient() public view override returns (address _migrationRecipient)\r\n\t{\r\n\t\treturn lpm.migrationRecipient;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the timestamp for when the liquidity pool migration\r\n\t *         can be completed.\r\n\t * @return _migrationUnlockTime A timestamp that defines the end of the\r\n\t *                              7-day grace period for liquidity pool\r\n\t *                              migration.\r\n\t */\r\n\tfunction liquidityPoolMigrationUnlockTime() public view override returns (uint256 _migrationUnlockTime)\r\n\t{\r\n\t\treturn lpm.migrationUnlockTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the minting of gToken shares upon the deposit of the\r\n\t *         reserve token. The actual number of shares being minted can\r\n\t *         be calculated using the calcDepositSharesFromCost function.\r\n\t *         In every deposit, 1% of the shares is retained in terms of\r\n\t *         deposit fee. Half of it is immediately burned and the other\r\n\t *         half is provided to the locked liquidity pool. The funds\r\n\t *         will be pulled in by this contract, therefore they must be\r\n\t *         previously approved.\r\n\t * @param _cost The amount of reserve token being deposited in the\r\n\t *              operation.\r\n\t */\r\n\tfunction deposit(uint256 _cost) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_cost > 0, \"cost must be greater than 0\");\r\n\t\t(uint256 _netShares, uint256 _feeShares) = GFormulae._calcDepositSharesFromCost(_cost, totalReserve(), totalSupply(), depositFee());\r\n\t\trequire(_netShares > 0, \"shares must be greater than 0\");\r\n\t\tG.pullFunds(reserveToken, _from, _cost);\r\n\t\trequire(_prepareDeposit(_cost), \"not available at the moment\");\r\n\t\t_mint(_from, _netShares);\r\n\t\t_mint(address(this), _feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the burning of gToken shares upon the withdrawal of\r\n\t *         the reserve token. The actual amount of the reserve token to\r\n\t *         be received can be calculated using the\r\n\t *         calcWithdrawalCostFromShares function. In every withdrawal,\r\n\t *         1% of the shares is retained in terms of withdrawal fee.\r\n\t *         Half of it is immediately burned and the other half is\r\n\t *         provided to the locked liquidity pool.\r\n\t * @param _grossShares The gross amount of this gToken shares being\r\n\t *                     redeemed in the operation.\r\n\t */\r\n\tfunction withdraw(uint256 _grossShares) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_grossShares > 0, \"shares must be greater than 0\");\r\n\t\t(uint256 _cost, uint256 _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), withdrawalFee());\r\n\t\trequire(_cost > 0, \"cost must be greater than 0\");\r\n\t\trequire(_prepareWithdrawal(_cost), \"not available at the moment\");\r\n\t\t_cost = G.min(_cost, G.getBalance(reserveToken));\r\n\t\tG.pushFunds(reserveToken, _from, _cost);\r\n\t\t_burn(_from, _grossShares);\r\n\t\t_mint(address(this), _feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allocates a liquidity pool with the given amount of funds and\r\n\t *         locks it to this contract. This function should be called\r\n\t *         shortly after the contract is created to associated a newly\r\n\t *         created liquidity pool to it, which will collect fees\r\n\t *         associated with the minting and burning of this gToken shares.\r\n\t *         The liquidity pool will consist of a 50%/50% balance of the\r\n\t *         stakes token (GRO) and this gToken shares with a swap fee of\r\n\t *         10%. The rate between the amount of the two assets deposited\r\n\t *         via this function defines the initial price. The minimum\r\n\t *         amount to be provided for each is 1,000,000 wei. The funds\r\n\t *         will be pulled in by this contract, therefore they must be\r\n\t *         previously approved. This is a priviledged function\r\n\t *         restricted to the contract owner.\r\n\t * @param _stakesAmount The initial amount of stakes token.\r\n\t * @param _sharesAmount The initial amount of this gToken shares.\r\n\t */\r\n\tfunction allocateLiquidityPool(uint256 _stakesAmount, uint256 _sharesAmount) public override onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tG.pullFunds(stakesToken, _from, _stakesAmount);\r\n\t\t_transfer(_from, address(this), _sharesAmount);\r\n\t\tlpm.allocatePool(_stakesAmount, _sharesAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Changes the percentual amount of the funds to be burned from\r\n\t *         the liquidity pool at each 7-day period. This is a\r\n\t *         priviledged function restricted to the contract owner.\r\n\t * @param _burningRate The percentage of the liquidity pool to be burned.\r\n\t */\r\n\tfunction setLiquidityPoolBurningRate(uint256 _burningRate) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tlpm.setBurningRate(_burningRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Burns part of the liquidity pool funds decreasing the supply\r\n\t *         of both the stakes token and this gToken shares.\r\n\t *         The amount to be burned is set via the function\r\n\t *         setLiquidityPoolBurningRate and defaults to 0.5%.\r\n\t *         After this function is called there must be a 7-day wait\r\n\t *         period before it can be called again.\r\n\t *         The purpose of this function is to burn the aproximate amount\r\n\t *         of fees collected from swaps that take place in the liquidity\r\n\t *         pool during the previous 7-day period. This function will\r\n\t *         emit a BurnLiquidityPoolPortion event upon success. This is\r\n\t *         a priviledged function restricted to the contract owner.\r\n\t */\r\n\tfunction burnLiquidityPoolPortion() public override onlyOwner nonReentrant\r\n\t{\r\n\t\tlpm.gulpPoolAssets();\r\n\t\t(uint256 _stakesAmount, uint256 _sharesAmount) = lpm.burnPoolPortion();\r\n\t\t_burnStakes(_stakesAmount);\r\n\t\t_burn(address(this), _sharesAmount);\r\n\t\temit BurnLiquidityPoolPortion(_stakesAmount, _sharesAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Initiates the liquidity pool migration. It consists of\r\n\t *         setting the migration recipient address and starting a\r\n\t *         7-day grace period. After the 7-day grace period the\r\n\t *         migration can be completed via the\r\n\t *         completeLiquidityPoolMigration fuction. Anytime before\r\n\t *         the migration is completed is can be cancelled via\r\n\t *         cancelLiquidityPoolMigration. This function will emit a\r\n\t *         InitiateLiquidityPoolMigration event upon success. This is\r\n\t *         a priviledged function restricted to the contract owner.\r\n\t * @param _migrationRecipient The receiver of the liquidity pool funds.\r\n\t */\r\n\tfunction initiateLiquidityPoolMigration(address _migrationRecipient) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tlpm.initiatePoolMigration(_migrationRecipient);\r\n\t\temit InitiateLiquidityPoolMigration(_migrationRecipient);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Cancels the liquidity pool migration if it has been already\r\n\t *         initiated. This will reset the state of the liquidity pool\r\n\t *         migration. This function will emit a\r\n\t *         CancelLiquidityPoolMigration event upon success. This is\r\n\t *         a priviledged function restricted to the contract owner.\r\n\t */\r\n\tfunction cancelLiquidityPoolMigration() public override onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _migrationRecipient = lpm.cancelPoolMigration();\r\n\t\temit CancelLiquidityPoolMigration(_migrationRecipient);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Completes the liquidity pool migration at least 7-days after\r\n\t *         it has been started. The migration consists of sendind the\r\n\t *         the full balance held in the liquidity pool, both in the\r\n\t *         stakes token and gToken shares, to the address set when\r\n\t *         the migration was initiated. This function will emit a\r\n\t *         CompleteLiquidityPoolMigration event upon success. This is\r\n\t *         a priviledged function restricted to the contract owner.\r\n\t */\r\n\tfunction completeLiquidityPoolMigration() public override onlyOwner nonReentrant\r\n\t{\r\n\t\tlpm.gulpPoolAssets();\r\n\t\t(address _migrationRecipient, uint256 _stakesAmount, uint256 _sharesAmount) = lpm.completePoolMigration();\r\n\t\tG.pushFunds(stakesToken, _migrationRecipient, _stakesAmount);\r\n\t\t_transfer(address(this), _migrationRecipient, _sharesAmount);\r\n\t\temit CompleteLiquidityPoolMigration(_migrationRecipient, _stakesAmount, _sharesAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This abstract method must be implemented by subcontracts in\r\n\t *      order to adjust the underlying reserve after a deposit takes\r\n\t *      place. The actual implementation depends on the strategy and\r\n\t *      algorithm used to handle the reserve.\r\n\t * @param _cost The amount of the reserve token being deposited.\r\n\t */\r\n\tfunction _prepareDeposit(uint256 _cost) internal virtual returns (bool _success);\r\n\r\n\t/**\r\n\t * @dev This abstract method must be implemented by subcontracts in\r\n\t *      order to adjust the underlying reserve before a withdrawal takes\r\n\t *      place. The actual implementation depends on the strategy and\r\n\t *      algorithm used to handle the reserve.\r\n\t * @param _cost The amount of the reserve token being withdrawn.\r\n\t */\r\n\tfunction _prepareWithdrawal(uint256 _cost) internal virtual returns (bool _success);\r\n\r\n\t/**\r\n\t * @dev Burns the given amount of the stakes token. The default behavior\r\n\t *      of the function for general ERC-20 is to send the funds to\r\n\t *      address(0), but that can be overriden by a subcontract.\r\n\t * @param _stakesAmount The amount of the stakes token being burned.\r\n\t */\r\n\tfunction _burnStakes(uint256 _stakesAmount) internal virtual\r\n\t{\r\n\t\tG.pushFunds(stakesToken, address(0), _stakesAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/GPortfolio.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev An interface with the extended functionality of portfolio management\r\n *      gTokens. See GTokenType0.sol for further documentation.\r\n */\r\ninterface GPortfolio\r\n{\r\n\t// view functions\r\n\tfunction tokenCount() external view returns (uint256 _count);\r\n\tfunction tokenAt(uint256 _index) external view returns (address _token);\r\n\tfunction tokenPercent(address _token) external view returns (uint256 _percent);\r\n\tfunction getRebalanceMargins() external view returns (uint256 _liquidRebalanceMargin, uint256 _portfolioRebalanceMargin);\r\n\r\n\t// priviledged functions\r\n\tfunction insertToken(address _token) external;\r\n\tfunction removeToken(address _token) external;\r\n\tfunction anounceTokenPercentTransfer(address _sourceToken, address _targetToken, uint256 _percent) external;\r\n\tfunction transferTokenPercent(address _sourceToken, address _targetToken, uint256 _percent) external;\r\n\tfunction setRebalanceMargins(uint256 _liquidRebalanceMargin, uint256 _portfolioRebalanceMargin) external;\r\n\r\n\t// emitted events\r\n\tevent InsertToken(address indexed _token);\r\n\tevent RemoveToken(address indexed _token);\r\n\tevent AnnounceTokenPercentTransfer(address indexed _sourceToken, address indexed _targetToken, uint256 _percent);\r\n\tevent TransferTokenPercent(address indexed _sourceToken, address indexed _targetToken, uint256 _percent);\r\n\tevent ChangeTokenPercent(address indexed _token, uint256 _oldPercent, uint256 _newPercent);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: contracts/GCToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal interface for gcTokens, implemented by the GCTokenBase contract.\r\n *      See GCTokenBase.sol for further documentation.\r\n */\r\ninterface GCToken is GToken\r\n{\r\n\t// pure functions\r\n\tfunction calcCostFromUnderlyingCost(uint256 _underlyingCost, uint256 _exchangeRate) external pure returns (uint256 _cost);\r\n\tfunction calcUnderlyingCostFromCost(uint256 _cost, uint256 _exchangeRate) external pure returns (uint256 _underlyingCost);\r\n\tfunction calcDepositSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) external pure returns (uint256 _netShares, uint256 _feeShares);\r\n\tfunction calcDepositUnderlyingCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) external pure returns (uint256 _underlyingCost, uint256 _feeShares);\r\n\tfunction calcWithdrawalSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) external pure returns (uint256 _grossShares, uint256 _feeShares);\r\n\tfunction calcWithdrawalUnderlyingCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) external pure returns (uint256 _underlyingCost, uint256 _feeShares);\r\n\r\n\t// view functions\r\n\tfunction underlyingToken() external view returns (address _underlyingToken);\r\n\tfunction exchangeRate() external view returns (uint256 _exchangeRate);\r\n\tfunction totalReserveUnderlying() external view returns (uint256 _totalReserveUnderlying);\r\n\tfunction lendingReserveUnderlying() external view returns (uint256 _lendingReserveUnderlying);\r\n\tfunction borrowingReserveUnderlying() external view returns (uint256 _borrowingReserveUnderlying);\r\n\tfunction collateralizationRatio() external view returns (uint256 _collateralizationRatio, uint256 _collateralizationMargin);\r\n\r\n\t// open functions\r\n\tfunction depositUnderlying(uint256 _underlyingCost) external;\r\n\tfunction withdrawUnderlying(uint256 _grossShares) external;\r\n\r\n\t// priviledged functions\r\n\tfunction setCollateralizationRatio(uint256 _collateralizationRatio, uint256 _collateralizationMargin) external;\r\n}\r\n\r\n// File: contracts/GPortfolioReserveManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library implements data structure abstraction for the portfolio\r\n *      reserve management code in order to circuvent the EVM contract size limit.\r\n *      It is therefore a public library shared by all gToken Type 0 contracts and\r\n *      needs to be published alongside them. See GTokenType0.sol for further\r\n *      documentation.\r\n */\r\nlibrary GPortfolioReserveManager\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\tusing GPortfolioReserveManager for GPortfolioReserveManager.Self;\r\n\r\n\tuint256 constant DEFAULT_LIQUID_REBALANCE_MARGIN = 95e15; // 9.5%\r\n\tuint256 constant DEFAULT_PORTFOLIO_REBALANCE_MARGIN = 1e16; // 1%\r\n\tuint256 constant MAXIMUM_TOKEN_COUNT = 5;\r\n\tuint256 constant PORTFOLIO_CHANGE_WAIT_INTERVAL = 1 days;\r\n\tuint256 constant PORTFOLIO_CHANGE_OPEN_INTERVAL = 1 days;\r\n\r\n\tstruct Self {\r\n\t\taddress reserveToken;\r\n\t\tEnumerableSet.AddressSet tokens;\r\n\t\tmapping (address => uint256) percents;\r\n\t\tmapping (uint256 => uint256) announcements;\r\n\t\tuint256 liquidRebalanceMargin;\r\n\t\tuint256 portfolioRebalanceMargin;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Initializes the data structure. This method is exposed publicly.\r\n\t * @param _reserveToken The ERC-20 token address of the reserve token.\r\n\t */\r\n\tfunction init(Self storage _self, address _reserveToken) public\r\n\t{\r\n\t\t_self.reserveToken = _reserveToken;\r\n\t\t_self.percents[_reserveToken] = 1e18;\r\n\t\t_self.liquidRebalanceMargin = DEFAULT_LIQUID_REBALANCE_MARGIN;\r\n\t\t_self.portfolioRebalanceMargin = DEFAULT_PORTFOLIO_REBALANCE_MARGIN;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The total number of gTokens added to the portfolio. This method\r\n\t *      is exposed publicly.\r\n\t * @return _count The number of gTokens that make up the portfolio.\r\n\t */\r\n\tfunction tokenCount(Self storage _self) public view returns (uint256 _count)\r\n\t{\r\n\t\treturn _self.tokens.length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns one of the gTokens that makes up the portfolio. This\r\n\t *      method is exposed publicly.\r\n\t * @param _index The desired index, must be less than the token count.\r\n\t * @return _token The gToken currently present at the given index.\r\n\t */\r\n\tfunction tokenAt(Self storage _self, uint256 _index) public view returns (address _token)\r\n\t{\r\n\t\trequire(_index < _self.tokens.length(), \"invalid index\");\r\n\t\treturn _self.tokens.at(_index);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the percentual participation of a token (including\r\n\t *      the reserve token) in the portfolio composition. This method is\r\n\t *      exposed publicly.\r\n\t * @param _token The given token address.\r\n\t * @return _percent The token percentual share of the portfolio.\r\n\t */\r\n\tfunction tokenPercent(Self storage _self, address _token) public view returns (uint256 _percent)\r\n\t{\r\n\t\treturn _self.percents[_token];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Inserts a new gToken into the portfolio. The new gToken must\r\n\t *      have the reserve token as its underlying token. The initial\r\n\t *      portfolio share of the new token will be 0%. This method is\r\n\t *      exposed publicly.\r\n\t * @param _token The contract address of the new gToken to be incorporated\r\n\t *               into the portfolio.\r\n\t */\r\n\tfunction insertToken(Self storage _self, address _token) public\r\n\t{\r\n\t\trequire(_self.tokens.length() < MAXIMUM_TOKEN_COUNT, \"limit reached\");\r\n\t\taddress _underlyingToken = GCToken(_token).underlyingToken();\r\n\t\trequire(_underlyingToken == _self.reserveToken, \"mismatched token\");\r\n\t\trequire(_self.tokens.add(_token), \"duplicate token\");\r\n\t\tassert(_self.percents[_token] == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a gToken from the portfolio. The portfolio share of the\r\n\t *      token must be 0% before it can be removed. The underlying reserve\r\n\t *      is redeemed upon removal. This method is exposed publicly.\r\n\t * @param _token The contract address of the gToken to be removed from\r\n\t *               the portfolio.\r\n\t */\r\n\tfunction removeToken(Self storage _self, address _token) public\r\n\t{\r\n\t\trequire(_self.percents[_token] == 0, \"positive percent\");\r\n\t\trequire(_self.tokens.remove(_token), \"unknown token\");\r\n\t\t_self._withdrawUnderlying(_token, _self._getUnderlyingReserve(_token));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Announces a token percent transfer before it can happen.\r\n\t * @param _sourceToken The token address to provide the share.\r\n\t * @param _targetToken The token address to receive the share.\r\n\t * @param _percent The percentual share to shift.\r\n\t */\r\n\tfunction announceTokenPercentTransfer(Self storage _self, address _sourceToken, address _targetToken, uint256 _percent) public\r\n\t{\r\n\t\tuint256 _hash = uint256(keccak256(abi.encode(uint256(_sourceToken), uint256(_targetToken), _percent)));\r\n\t\tuint256 _announcementTime = now;\r\n\t\t_self.announcements[_hash] = _announcementTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Shifts a percentual share of the portfolio allocation from\r\n\t *      one gToken to another gToken. The reserve token can also be\r\n\t *      used as source or target of the operation. This does not\r\n\t *      actually shifts funds, only reconfigures the allocation.\r\n\t *      This method is exposed publicly. Note that in order to perform\r\n\t *      a token transfer where the target token is not the reserve token\r\n\t *      one must account the transfer ahead of time.\r\n\t *      See anounceTokenPercentTransfer().\r\n\t * @param _sourceToken The token address to provide the share.\r\n\t * @param _targetToken The token address to receive the share.\r\n\t * @param _percent The percentual share to shift.\r\n\t */\r\n\tfunction transferTokenPercent(Self storage _self, address _sourceToken, address _targetToken, uint256 _percent) public\r\n\t{\r\n\t\trequire(_percent <= _self.percents[_sourceToken], \"invalid percent\");\r\n\t\trequire(_sourceToken != _targetToken, \"invalid transfer\");\r\n\t\trequire(_targetToken == _self.reserveToken || _self.tokens.contains(_targetToken), \"unknown token\");\r\n\t\tuint256 _hash = uint256(keccak256(abi.encode(uint256(_sourceToken), uint256(_targetToken), _percent)));\r\n\t\tuint256 _announcementTime = _self.announcements[_hash];\r\n\t\tuint256 _effectiveTime = _announcementTime + PORTFOLIO_CHANGE_WAIT_INTERVAL;\r\n\t\tuint256 _cutoffTime = _effectiveTime + PORTFOLIO_CHANGE_OPEN_INTERVAL;\r\n\t\trequire(_targetToken == _self.reserveToken || _effectiveTime <= now && now < _cutoffTime, \"unannounced transfer\");\r\n\t\t_self.announcements[_hash] = 0;\r\n\t\t_self.percents[_sourceToken] -= _percent;\r\n\t\t_self.percents[_targetToken] += _percent;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the percentual margins tolerable before triggering a\r\n\t *      rebalance action (i.e. an underlying deposit or withdrawal).\r\n\t *      This method is exposed publicly.\r\n\t * @param _liquidRebalanceMargin The liquid percentual rebalance margin,\r\n\t *                               to be configured by the owner.\r\n\t * @param _portfolioRebalanceMargin The portfolio percentual rebalance\r\n\t *                                  margin, to be configured by the owner.\r\n\t */\r\n\tfunction setRebalanceMargins(Self storage _self, uint256 _liquidRebalanceMargin, uint256 _portfolioRebalanceMargin) public\r\n\t{\r\n\t\trequire(0 <= _liquidRebalanceMargin && _liquidRebalanceMargin <= 1e18, \"invalid margin\");\r\n\t\trequire(0 <= _portfolioRebalanceMargin && _portfolioRebalanceMargin <= 1e18, \"invalid margin\");\r\n\t\t_self.liquidRebalanceMargin = _liquidRebalanceMargin;\r\n\t\t_self.portfolioRebalanceMargin = _portfolioRebalanceMargin;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the total reserve amount held liquid by the contract\r\n\t *      summed up with the underlying reserve of all gTokens that make up\r\n\t *      the portfolio. This method is exposed publicly.\r\n\t * @return _totalReserve The computed total reserve amount.\r\n\t */\r\n\tfunction totalReserve(Self storage _self) public view returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn _self._calcTotalReserve();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs the reserve adjustment actions leaving a liquidity room,\r\n\t *      if necessary. It will attempt to perform the operation using the\r\n\t *      liquid pool and, if necessary, either withdrawal from an underlying\r\n\t *      gToken to get more liquidity, or deposit/withdrawal from an\r\n\t *      underlying gToken to move towards the desired reserve allocation\r\n\t *      if any of them falls beyond the rebalance margin thresholds.\r\n\t *      To save on gas costs the reserve adjusment will request at most\r\n\t *      one operation from any of the underlying gTokens. This method is\r\n\t *      exposed publicly.\r\n\t * @param _roomAmount The underlying token amount to be available after the\r\n\t *                    operation. This is revelant for withdrawals, once the\r\n\t *                    room amount is withdrawn the reserve should reflect\r\n\t *                    the configured collateralization ratio.\r\n\t * @return _success A boolean indicating whether or not both actions suceeded.\r\n\t */\r\n\tfunction adjustReserve(Self storage _self, uint256 _roomAmount) public returns (bool _success)\r\n\t{\r\n\t\t// the reserve amount must deduct the room requested\r\n\t\tuint256 _reserveAmount = _self._calcTotalReserve();\r\n\t\t_roomAmount = G.min(_roomAmount, _reserveAmount);\r\n\t\t_reserveAmount = _reserveAmount.sub(_roomAmount);\r\n\r\n\t\t// the liquid amount must deduct the room requested\r\n\t\tuint256 _liquidAmount = G.getBalance(_self.reserveToken);\r\n\t\tuint256 _blockedAmount = G.min(_roomAmount, _liquidAmount);\r\n\t\t_liquidAmount = _liquidAmount.sub(_blockedAmount);\r\n\r\n\t\t// calculates whether or not the liquid amount exceeds the\r\n\t\t// configured range and requires either a deposit or a withdrawal\r\n\t\t// to be performed\r\n\t\t(uint256 _depositAmount, uint256 _withdrawalAmount) = _self._calcLiquidAdjustment(_reserveAmount, _liquidAmount);\r\n\r\n\t\t// if the liquid amount is not enough to process a withdrawal\r\n\t\t// we will need to withdraw the missing amount from one of the\r\n\t\t// underlying gTokens (actually we will choose the one for which\r\n\t\t// the withdrawal will produce the least impact in terms of\r\n\t\t// percentual share deviation from its configured target)\r\n\t\tuint256 _requiredAmount = _roomAmount.sub(_blockedAmount);\r\n\t\tif (_requiredAmount > 0) {\r\n\t\t\t_withdrawalAmount = _withdrawalAmount.add(_requiredAmount);\r\n\t\t\t(address _adjustToken, uint256 _adjustAmount) = _self._findRequiredWithdrawal(_reserveAmount, _requiredAmount, _withdrawalAmount);\r\n\t\t\tif (_adjustToken == address(0)) return false;\r\n\t\t\treturn _self._withdrawUnderlying(_adjustToken, _adjustAmount);\r\n\t\t}\r\n\r\n\t\t// finds the gToken that will have benefited more of this deposit\r\n\t\t// in terms of its target percentual share deviation and performs\r\n\t\t// the deposit on it\r\n\t\tif (_depositAmount > 0) {\r\n\t\t\t(address _adjustToken, uint256 _adjustAmount) = _self._findDeposit(_reserveAmount);\r\n\t\t\tif (_adjustToken == address(0)) return true;\r\n\t\t\treturn _self._depositUnderlying(_adjustToken, G.min(_adjustAmount, _depositAmount));\r\n\t\t}\r\n\r\n\t\t// finds the gToken that will have benefited more of this withdrawal\r\n\t\t// in terms of its target percentual share deviation and performs\r\n\t\t// the withdrawal on it\r\n\t\tif (_withdrawalAmount > 0) {\r\n\t\t\t(address _adjustToken, uint256 _adjustAmount) = _self._findWithdrawal(_reserveAmount);\r\n\t\t\tif (_adjustToken == address(0)) return true;\r\n\t\t\treturn _self._withdrawUnderlying(_adjustToken, G.min(_adjustAmount, _withdrawalAmount));\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates the total reserve amount. It sums up the reserve held\r\n\t *      by the contract with the underlying reserve held by the gTokens\r\n\t *      that make up the portfolio.\r\n\t * @return _totalReserve The computed total reserve amount.\r\n\t */\r\n\tfunction _calcTotalReserve(Self storage _self) internal view returns (uint256 _totalReserve)\r\n\t{\r\n\t\t_totalReserve = G.getBalance(_self.reserveToken);\r\n\t\tuint256 _tokenCount = _self.tokens.length();\r\n\t\tfor (uint256 _index = 0; _index < _tokenCount; _index++) {\r\n\t\t\taddress _token = _self.tokens.at(_index);\r\n\t\t\tuint256 _tokenReserve = _self._getUnderlyingReserve(_token);\r\n\t\t\t_totalReserve = _totalReserve.add(_tokenReserve);\r\n\t\t}\r\n\t\treturn _totalReserve;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates the amount that falls either above or below\r\n\t *      the rebalance margin for the liquid pool. If we have more\r\n\t *      liquid amount than its configured share plus the rebalance\r\n\t *      margin it returns that amount paired with zero. If we have less\r\n\t *      liquid amount than its configured share minus the rebalance\r\n\t *      margin it returns zero paired with that amount. If none of these\r\n\t *      two situations happen, then the liquid amount falls within the\r\n\t *      acceptable parameters, and it returns a pair of zeros.\r\n\t * @param _reserveAmount The total reserve amount used for calculation.\r\n\t * @param _liquidAmount The liquid amount available used for calculation.\r\n\t * @return _depositAmount The amount to be deposited or zero.\r\n\t * @return _withdrawalAmount The amount to be withdrawn or zero.\r\n\t */\r\n\tfunction _calcLiquidAdjustment(Self storage _self, uint256 _reserveAmount, uint256 _liquidAmount) internal view returns (uint256 _depositAmount, uint256 _withdrawalAmount)\r\n\t{\r\n\t\tuint256 _tokenPercent = _self.percents[_self.reserveToken];\r\n\t\tuint256 _tokenReserve = _reserveAmount.mul(_tokenPercent).div(1e18);\r\n\t\tif (_liquidAmount > _tokenReserve) {\r\n\t\t\tuint256 _upperPercent = G.min(1e18, _tokenPercent.add(_self.liquidRebalanceMargin));\r\n\t\t\tuint256 _upperReserve = _reserveAmount.mul(_upperPercent).div(1e18);\r\n\t\t\tif (_liquidAmount > _upperReserve) return (_liquidAmount.sub(_tokenReserve), 0);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_liquidAmount < _tokenReserve) {\r\n\t\t\tuint256 _lowerPercent = _tokenPercent.sub(G.min(_tokenPercent, _self.liquidRebalanceMargin));\r\n\t\t\tuint256 _lowerReserve = _reserveAmount.mul(_lowerPercent).div(1e18);\r\n\t\t\tif (_liquidAmount < _lowerReserve) return (0, _tokenReserve.sub(_liquidAmount));\r\n\t\t}\r\n\t\treturn (0, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Search the list of gTokens and selects the one that has enough\r\n\t *      liquidity and for which the withdrawal of the required amount\r\n\t *      will yield the least deviation from its target share.\r\n\t * @param _reserveAmount The total reserve amount used for calculation.\r\n\t * @param _minimumAmount The minimum liquidity amount used for calculation.\r\n\t * @param _targetAmount The target liquidity amount used for calculation.\r\n\t * @return _adjustToken The gToken to withdraw from.\r\n\t * @return _adjustAmount The amount to be withdrawn.\r\n\t */\r\n\tfunction _findRequiredWithdrawal(Self storage _self, uint256 _reserveAmount, uint256 _minimumAmount, uint256 _targetAmount) internal view returns (address _adjustToken, uint256 _adjustAmount)\r\n\t{\r\n\t\tuint256 _minPercent = 1e18;\r\n\t\t_adjustToken = address(0);\r\n\t\t_adjustAmount = 0;\r\n\r\n\t\tuint256 _tokenCount = _self.tokens.length();\r\n\t\tfor (uint256 _index = 0; _index < _tokenCount; _index++) {\r\n\t\t\taddress _token = _self.tokens.at(_index);\r\n\t\t\tuint256 _tokenReserve = _self._getUnderlyingReserve(_token);\r\n\t\t\tif (_tokenReserve < _minimumAmount) continue;\r\n\t\t\tuint256 _maximumAmount = G.min(_tokenReserve, _targetAmount);\r\n\r\n\t\t\tuint256 _oldTokenReserve = _tokenReserve.sub(_maximumAmount);\r\n\t\t\tuint256 _oldTokenPercent = _oldTokenReserve.mul(1e18).div(_reserveAmount);\r\n\t\t\tuint256 _newTokenPercent = _self.percents[_token];\r\n\r\n\t\t\tuint256 _percent = 0;\r\n\t\t\tif (_newTokenPercent > _oldTokenPercent) _percent = _newTokenPercent.sub(_oldTokenPercent);\r\n\t\t\telse\r\n\t\t\tif (_newTokenPercent < _oldTokenPercent) _percent = _oldTokenPercent.sub(_newTokenPercent);\r\n\r\n\t\t\tif (_maximumAmount > _adjustAmount || _maximumAmount == _adjustAmount && _percent < _minPercent) {\r\n\t\t\t\t_minPercent = _percent;\r\n\t\t\t\t_adjustToken = _token;\r\n\t\t\t\t_adjustAmount = _maximumAmount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (_adjustToken, _adjustAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Search the list of gTokens and selects the one for which the\r\n\t *      deposit will provide the best correction of deviation from\r\n\t *      its target share.\r\n\t * @param _reserveAmount The total reserve amount used for calculation.\r\n\t * @return _adjustToken The gToken to deposit to.\r\n\t * @return _adjustAmount The amount to be deposited.\r\n\t */\r\n\tfunction _findDeposit(Self storage _self, uint256 _reserveAmount) internal view returns (address _adjustToken, uint256 _adjustAmount)\r\n\t{\r\n\t\tuint256 _maxPercent = _self.portfolioRebalanceMargin;\r\n\t\t_adjustToken = address(0);\r\n\t\t_adjustAmount = 0;\r\n\r\n\t\tuint256 _tokenCount = _self.tokens.length();\r\n\t\tfor (uint256 _index = 0; _index < _tokenCount; _index++) {\r\n\t\t\taddress _token = _self.tokens.at(_index);\r\n\r\n\t\t\tuint256 _oldTokenReserve = _self._getUnderlyingReserve(_token);\r\n\t\t\tuint256 _oldTokenPercent = _oldTokenReserve.mul(1e18).div(_reserveAmount);\r\n\t\t\tuint256 _newTokenPercent = _self.percents[_token];\r\n\r\n\t\t\tif (_newTokenPercent > _oldTokenPercent) {\r\n\t\t\t\tuint256 _percent = _newTokenPercent.sub(_oldTokenPercent);\r\n\t\t\t\tif (_percent > _maxPercent) {\r\n\t\t\t\t\tuint256 _newTokenReserve = _reserveAmount.mul(_newTokenPercent).div(1e18);\r\n\t\t\t\t\tuint256 _amount = _newTokenReserve.sub(_oldTokenReserve);\r\n\r\n\t\t\t\t\t_maxPercent = _percent;\r\n\t\t\t\t\t_adjustToken = _token;\r\n\t\t\t\t\t_adjustAmount = _amount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (_adjustToken, _adjustAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Search the list of gTokens and selects the one for which the\r\n\t *      withdrawal will provide the best correction of deviation from\r\n\t *      its target share.\r\n\t * @param _reserveAmount The total reserve amount used for calculation.\r\n\t * @return _adjustToken The gToken to withdraw from.\r\n\t * @return _adjustAmount The amount to be withdrawn.\r\n\t */\r\n\tfunction _findWithdrawal(Self storage _self, uint256 _reserveAmount) internal view returns (address _adjustToken, uint256 _adjustAmount)\r\n\t{\r\n\t\tuint256 _maxPercent = _self.portfolioRebalanceMargin;\r\n\t\t_adjustToken = address(0);\r\n\t\t_adjustAmount = 0;\r\n\r\n\t\tuint256 _tokenCount = _self.tokens.length();\r\n\t\tfor (uint256 _index = 0; _index < _tokenCount; _index++) {\r\n\t\t\taddress _token = _self.tokens.at(_index);\r\n\r\n\t\t\tuint256 _oldTokenReserve = _self._getUnderlyingReserve(_token);\r\n\t\t\tuint256 _oldTokenPercent = _oldTokenReserve.mul(1e18).div(_reserveAmount);\r\n\t\t\tuint256 _newTokenPercent = _self.percents[_token];\r\n\r\n\t\t\tif (_newTokenPercent < _oldTokenPercent) {\r\n\t\t\t\tuint256 _percent = _oldTokenPercent.sub(_newTokenPercent);\r\n\t\t\t\tif (_percent > _maxPercent) {\r\n\t\t\t\t\tuint256 _newTokenReserve = _reserveAmount.mul(_newTokenPercent).div(1e18);\r\n\t\t\t\t\tuint256 _amount = _oldTokenReserve.sub(_newTokenReserve);\r\n\r\n\t\t\t\t\t_maxPercent = _percent;\r\n\t\t\t\t\t_adjustToken = _token;\r\n\t\t\t\t\t_adjustAmount = _amount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (_adjustToken, _adjustAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a deposit of the reserve asset to the given gToken.\r\n\t * @param _token The gToken to deposit to.\r\n\t * @param _amount The amount to be deposited.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _depositUnderlying(Self storage _self, address _token, uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\t_amount = G.min(_amount, G.getBalance(_self.reserveToken));\r\n\t\tif (_amount == 0) return true;\r\n\t\tG.approveFunds(_self.reserveToken, _token, _amount);\r\n\t\ttry GCToken(_token).depositUnderlying(_amount) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\tG.approveFunds(_self.reserveToken, _token, 0);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a withdrawal of the reserve asset from the given gToken.\r\n\t * @param _token The gToken to withdraw from.\r\n\t * @param _amount The amount to be withdrawn.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _withdrawUnderlying(Self storage _self, address _token, uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\tuint256 _grossShares = _self._calcWithdrawalSharesFromUnderlyingCost(_token, _amount);\r\n\t\t_grossShares = G.min(_grossShares, G.getBalance(_token));\r\n\t\tif (_grossShares == 0) return true;\r\n\t\ttry GCToken(_token).withdrawUnderlying(_grossShares) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates how much of the reserve token is available for\r\n\t *      withdrawal by the current contract for the given gToken.\r\n\t * @param _token The gToken to withdraw from.\r\n\t * @return _underlyingCost The total amount redeemable by the current\r\n\t *                         contract from the given gToken.\r\n\t */\r\n\tfunction _getUnderlyingReserve(Self storage _self, address _token) internal view returns (uint256 _underlyingCost)\r\n\t{\r\n\t\tuint256 _grossShares = G.getBalance(_token);\r\n\t\treturn _self._calcWithdrawalUnderlyingCostFromShares(_token, _grossShares);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates how much will be received for withdrawing the provided\r\n\t *      number of shares from a given gToken.\r\n\t * @param _token The gToken to withdraw from.\r\n\t * @param _grossShares The number of shares to be provided.\r\n\t * @return _underlyingCost The amount to be received.\r\n\t */\r\n\tfunction _calcWithdrawalUnderlyingCostFromShares(Self storage /* _self */, address _token, uint256 _grossShares) internal view returns (uint256 _underlyingCost)\r\n\t{\r\n\t\tuint256 _totalReserve = GCToken(_token).totalReserve();\r\n\t\tuint256 _totalSupply = GCToken(_token).totalSupply();\r\n\t\tuint256 _withdrawalFee = GCToken(_token).withdrawalFee();\r\n\t\tuint256 _exchangeRate = GCToken(_token).exchangeRate();\r\n\t\t(_underlyingCost,) = GCToken(_token).calcWithdrawalUnderlyingCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee, _exchangeRate);\r\n\t\treturn _underlyingCost;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates how many shares are required to withdraw so much from\r\n\t *      a given gToken.\r\n\t * @param _token The gToken to withdraw from.\r\n\t * @param _underlyingCost The desired amount to be withdrawn.\r\n\t * @return _grossShares The number of shares required to withdraw the desired amount.\r\n\t */\r\n\tfunction _calcWithdrawalSharesFromUnderlyingCost(Self storage /* _self */, address _token, uint256 _underlyingCost) internal view returns (uint256 _grossShares)\r\n\t{\r\n\t\tuint256 _totalReserve = GCToken(_token).totalReserve();\r\n\t\tuint256 _totalSupply = GCToken(_token).totalSupply();\r\n\t\tuint256 _withdrawalFee = GCToken(_token).withdrawalFee();\r\n\t\tuint256 _exchangeRate = GCToken(_token).exchangeRate();\r\n\t\t(_grossShares,) = GCToken(_token).calcWithdrawalSharesFromUnderlyingCost(_underlyingCost, _totalReserve, _totalSupply, _withdrawalFee, _exchangeRate);\r\n\t\treturn _grossShares;\r\n\t}\r\n}\r\n\r\n// File: contracts/GTokenType0.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements the functionality for the gToken Type 0.\r\n *         The gToken Type 0 provides a simple portfolio management strategy\r\n *         that splits the reserve asset percentually among multiple other\r\n *         gTokens. Also, it allows for part of the reserve to be kept liquid,\r\n *         in the reserve token itself, to save on gas fees. The contract owner\r\n *         can add and remove gTokens that compose the portfolio, as much as\r\n *         reconfigure their percentual shares. There is also a configurable\r\n *         rebalance margins that serves as threshold for when the contract will\r\n *         or not attempt to rebalance the reserve according to the set\r\n *         percentual ratios. The algorithm that maintains the proper\r\n *         distribution of the reserve token does so incrementally based on the\r\n *         following principles: 1) At each deposit/withdrawal, at most one\r\n *         underlying deposit/withdrawal is performed; 2) When the\r\n *         deposit/withdrawal can be served from the liquid pool, and within the\r\n *         bounds of the rebalance margin, no underlying deposit/withdrawal is\r\n *         performed; 3) When performing a rebalance the gToken with the\r\n *         most discrepant reserve share is chosen for rebalancing; 4) When\r\n *         performing an withdrawal, if it cannot be served entirely from\r\n *         the liquid pool, the we choose the gToken that can provide the\r\n *         required additional liquidity with the least percentual impact to\r\n *         its reserve share. As with all gTokens, gTokens Type 0 have an\r\n *         associated locked liquidity pool and follow the same fee structure.\r\n *         See GTokenBase and GPortfolioReserveManager for further documentation.\r\n */\r\ncontract GTokenType0 is GTokenBase, GPortfolio\r\n{\r\n\tusing GPortfolioReserveManager for GPortfolioReserveManager.Self;\r\n\r\n\tGPortfolioReserveManager.Self prm;\r\n\r\n\t/**\r\n\t * @dev Constructor for the gToken Type 0 contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _stakesToken The ERC-20 token address to be used as stakes\r\n\t *                     token (GRO).\r\n\t * @param _reserveToken The ERC-20 token address to be used as reserve\r\n\t *                      token (e.g. DAI for gDAI).\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken)\r\n\t\tGTokenBase(_name, _symbol, _decimals, _stakesToken, _reserveToken) public\r\n\t{\r\n\t\tprm.init(_reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Overrides the default total reserve definition in order to\r\n\t *         account, not only for the reserve asset being kept liquid by\r\n\t *         this contract, but also sum up the reserve portions delegated\r\n\t *         to all gTokens that make up the portfolio.\r\n\t * @return _totalReserve The amount of the reserve token corresponding\r\n\t *                       to this contract's worth.\r\n\t */\r\n\tfunction totalReserve() public view override returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn prm.totalReserve();\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the number of gTokens that were added to this\r\n\t *         contract by the owner.\r\n\t * @return _count The number of gTokens that make up the portfolio.\r\n\t */\r\n\tfunction tokenCount() public view override returns (uint256 _count)\r\n\t{\r\n\t\treturn prm.tokenCount();\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides a gToken that was added to this contract by the owner\r\n\t *         at a given index. Note that the index to token association\r\n\t *         is preserved in between token removals, however removals may\r\n\t *         may shuffle it around.\r\n\t * @param _index The desired index, must be less than the token count.\r\n\t * @return _token The gToken currently present at the given index.\r\n\t */\r\n\tfunction tokenAt(uint256 _index) public view override returns (address _token)\r\n\t{\r\n\t\treturn prm.tokenAt(_index);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the percentual share of a gToken in the composition\r\n\t *         of the portfolio. Note that the value returned is the desired\r\n\t *         percentual share and not the actual reserve share.\r\n\t * @param _token The given token address.\r\n\t * @return _percent The token percentual share of the portfolio, as\r\n\t *                  configured by the owner.\r\n\t */\r\n\tfunction tokenPercent(address _token) public view override returns (uint256 _percent)\r\n\t{\r\n\t\treturn prm.tokenPercent(_token);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the percentual margins tolerable before triggering a\r\n\t *         rebalance action (i.e. an underlying deposit or withdrawal).\r\n\t * @return _liquidRebalanceMargin The liquid percentual rebalance margin,\r\n\t *                                as configured by the owner.\r\n\t * @return _portfolioRebalanceMargin The portfolio percentual rebalance\r\n\t *                                   margin, as configured by the owner.\r\n\t */\r\n\tfunction getRebalanceMargins() public view override returns (uint256 _liquidRebalanceMargin, uint256 _portfolioRebalanceMargin)\r\n\t{\r\n\t\treturn (prm.liquidRebalanceMargin, prm.portfolioRebalanceMargin);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Inserts a new gToken into the portfolio. The new gToken must\r\n\t *         have the reserve token as its underlying token. The initial\r\n\t *         portfolio share of the new token will be 0%.\r\n\t * @param _token The contract address of the new gToken to be incorporated\r\n\t *               into the portfolio.\r\n\t */\r\n\tfunction insertToken(address _token) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tprm.insertToken(_token);\r\n\t\temit InsertToken(_token);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Removes a gToken from the portfolio. The portfolio share of\r\n\t *         the token must be 0% before it can be removed. The underlying\r\n\t *         reserve is redeemed upon removal.\r\n\t * @param _token The contract address of the gToken to be removed from\r\n\t *               the portfolio.\r\n\t */\r\n\tfunction removeToken(address _token) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tprm.removeToken(_token);\r\n\t\temit RemoveToken(_token);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Announces a token percent transfer before it can happen,\r\n\t *         signaling the intention to modify the porfolio distribution.\r\n\t * @param _sourceToken The token address to provide the share.\r\n\t * @param _targetToken The token address to receive the share.\r\n\t * @param _percent The percentual share to shift.\r\n\t */\r\n\tfunction anounceTokenPercentTransfer(address _sourceToken, address _targetToken, uint256 _percent) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tprm.announceTokenPercentTransfer(_sourceToken, _targetToken, _percent);\r\n\t\temit AnnounceTokenPercentTransfer(_sourceToken, _targetToken, _percent);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Shifts a percentual share of the portfolio allocation from\r\n\t *         one gToken to another gToken. The reserve token can also be\r\n\t *         used as source or target of the operation. This does not\r\n\t *         actually shifts funds, only reconfigures the allocation.\r\n\t * @param _sourceToken The token address to provide the share.\r\n\t * @param _targetToken The token address to receive the share.\r\n\t * @param _percent The percentual share to shift.\r\n\t */\r\n\tfunction transferTokenPercent(address _sourceToken, address _targetToken, uint256 _percent) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _oldSourceTokenPercent = prm.tokenPercent(_sourceToken);\r\n\t\tuint256 _oldTargetTokenPercent = prm.tokenPercent(_targetToken);\r\n\t\tprm.transferTokenPercent(_sourceToken, _targetToken, _percent);\r\n\t\tuint256 _newSourceTokenPercent = prm.tokenPercent(_sourceToken);\r\n\t\tuint256 _newTargetTokenPercent = prm.tokenPercent(_targetToken);\r\n\t\temit TransferTokenPercent(_sourceToken, _targetToken, _percent);\r\n\t\temit ChangeTokenPercent(_sourceToken, _oldSourceTokenPercent, _newSourceTokenPercent);\r\n\t\temit ChangeTokenPercent(_targetToken, _oldTargetTokenPercent, _newTargetTokenPercent);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the percentual margins tolerable before triggering a\r\n\t *         rebalance action (i.e. an underlying deposit or withdrawal).\r\n\t * @param _liquidRebalanceMargin The liquid percentual rebalance margin,\r\n\t *                               to be configured by the owner.\r\n\t * @param _portfolioRebalanceMargin The portfolio percentual rebalance\r\n\t *                                  margin, to be configured by the owner.\r\n\t */\r\n\tfunction setRebalanceMargins(uint256 _liquidRebalanceMargin, uint256 _portfolioRebalanceMargin) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tprm.setRebalanceMargins(_liquidRebalanceMargin, _portfolioRebalanceMargin);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This method is overriden from GTokenBase and sets up the reserve\r\n\t *      after a deposit comes along. This method uses the GPortfolioReserveManager\r\n\t *      to adjust the reserve implementing the rebalance policy.\r\n\t *      See GPortfolioReserveManager.sol.\r\n\t * @param _cost The amount of reserve being deposited (ignored).\r\n\t * @return _success A boolean indicating whether or not the operation\r\n\t *                  succeeded. This operation should not fail unless\r\n\t *                  any of the underlying components (Compound, Aave,\r\n\t *                  Dydx) also fails.\r\n\t */\r\n\tfunction _prepareDeposit(uint256 _cost) internal override returns (bool _success)\r\n\t{\r\n\t\t_cost; // silences warnings\r\n\t\treturn prm.adjustReserve(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This method is overriden from GTokenBase and sets up the reserve\r\n\t *      before a withdrawal comes along. This method uses the GPortfolioReserveManager\r\n\t *      to adjust the reserve implementing the rebalance policy.\r\n\t *      See GPortfolioReserveManager.sol.\r\n\t * @param _cost The amount of reserve being withdrawn and that needs to\r\n\t *              be immediately liquid.\r\n\t * @return _success A boolean indicating whether or not the operation succeeded.\r\n\t *                  The operation may fail if it is not possible to recover\r\n\t *                  the required liquidity (e.g. low liquidity in the markets).\r\n\t */\r\n\tfunction _prepareWithdrawal(uint256 _cost) internal override returns (bool _success)\r\n\t{\r\n\t\treturn prm.adjustReserve(_cost);\r\n\t}\r\n}\r\n\r\n// File: contracts/GCFormulae.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Pure implementation of deposit/minting and withdrawal/burning formulas\r\n *      for gTokens calculated based on the cToken underlying asset\r\n *      (e.g. DAI for cDAI). See GFormulae.sol and GCTokenBase.sol for further\r\n *      documentation.\r\n */\r\nlibrary GCFormulae\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/**\r\n\t * @dev Simple token to cToken formula from Compound\r\n\t */\r\n\tfunction _calcCostFromUnderlyingCost(uint256 _underlyingCost, uint256 _exchangeRate) internal pure returns (uint256 _cost)\r\n\t{\r\n\t\treturn _underlyingCost.mul(1e18).div(_exchangeRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Simple cToken to token formula from Compound\r\n\t */\r\n\tfunction _calcUnderlyingCostFromCost(uint256 _cost, uint256 _exchangeRate) internal pure returns (uint256 _underlyingCost)\r\n\t{\r\n\t\treturn _cost.mul(_exchangeRate).div(1e18);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Composition of the gToken deposit formula with the Compound\r\n\t *      conversion formula to obtain the gcToken deposit formula in\r\n\t *      terms of the cToken underlying asset.\r\n\t */\r\n\tfunction _calcDepositSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) internal pure returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _cost = _calcCostFromUnderlyingCost(_underlyingCost, _exchangeRate);\r\n\t\treturn GFormulae._calcDepositSharesFromCost(_cost, _totalReserve, _totalSupply, _depositFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Composition of the gToken reserve deposit formula with the\r\n\t *      Compound conversion formula to obtain the gcToken reverse\r\n\t *      deposit formula in terms of the cToken underlying asset.\r\n\t */\r\n\tfunction _calcDepositUnderlyingCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) internal pure returns (uint256 _underlyingCost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _cost;\r\n\t\t(_cost, _feeShares) = GFormulae._calcDepositCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee);\r\n\t\treturn (_calcUnderlyingCostFromCost(_cost, _exchangeRate), _feeShares);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Composition of the gToken reserve withdrawal formula with the\r\n\t *      Compound conversion formula to obtain the gcToken reverse\r\n\t *      withdrawal formula in terms of the cToken underlying asset.\r\n\t */\r\n\tfunction _calcWithdrawalSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) internal pure returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _cost = _calcCostFromUnderlyingCost(_underlyingCost, _exchangeRate);\r\n\t\treturn GFormulae._calcWithdrawalSharesFromCost(_cost, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Composition of the gToken withdrawal formula with the Compound\r\n\t *      conversion formula to obtain the gcToken withdrawal formula in\r\n\t *      terms of the cToken underlying asset.\r\n\t */\r\n\tfunction _calcWithdrawalUnderlyingCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) internal pure returns (uint256 _underlyingCost, uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _cost;\r\n\t\t(_cost, _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t\treturn (_calcUnderlyingCostFromCost(_cost, _exchangeRate), _feeShares);\r\n\t}\r\n}\r\n\r\n// File: contracts/GMining.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev An interface to extend gTokens with liquidity mining capabilities.\r\n *      See GCTokenBase.sol and GATokenBase.sol for further documentation.\r\n */\r\ninterface GMining\r\n{\r\n\t// view functions\r\n\tfunction miningToken() external view returns (address _miningToken);\r\n\tfunction growthToken() external view returns (address _growthToken);\r\n\tfunction exchange() external view returns (address _exchange);\r\n\tfunction miningGulpRange() external view returns (uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount);\r\n\tfunction growthGulpRange() external view returns (uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount);\r\n\r\n\t// priviledged functions\r\n\tfunction setExchange(address _exchange) external;\r\n\tfunction setMiningGulpRange(uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) external;\r\n\tfunction setGrowthGulpRange(uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount) external;\r\n}\r\n\r\n// File: contracts/interop/Compound.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Compound interoperability.\r\n */\r\ninterface Comptroller\r\n{\r\n\tfunction oracle() external view returns (address _oracle);\r\n\tfunction enterMarkets(address[] calldata _ctokens) external returns (uint256[] memory _errorCodes);\r\n\tfunction markets(address _ctoken) external view returns (bool _isListed, uint256 _collateralFactorMantissa);\r\n\tfunction getAccountLiquidity(address _account) external view returns (uint256 _error, uint256 _liquidity, uint256 _shortfall);\r\n}\r\n\r\ninterface CPriceOracle\r\n{\r\n\tfunction getUnderlyingPrice(address _ctoken) external view returns (uint256 _price);\r\n}\r\n\r\ninterface CToken is IERC20\r\n{\r\n\tfunction underlying() external view returns (address _token);\r\n\tfunction exchangeRateStored() external view returns (uint256 _exchangeRate);\r\n\tfunction borrowBalanceStored(address _account) external view returns (uint256 _borrowBalance);\r\n\tfunction exchangeRateCurrent() external returns (uint256 _exchangeRate);\r\n\tfunction getCash() external view returns (uint256 _cash);\r\n\tfunction borrowBalanceCurrent(address _account) external returns (uint256 _borrowBalance);\r\n\tfunction balanceOfUnderlying(address _owner) external returns (uint256 _underlyingBalance);\r\n\tfunction mint() external payable;\r\n\tfunction mint(uint256 _mintAmount) external returns (uint256 _errorCode);\r\n\tfunction repayBorrow() external payable;\r\n\tfunction repayBorrow(uint256 _repayAmount) external returns (uint256 _errorCode);\r\n\tfunction redeemUnderlying(uint256 _redeemAmount) external returns (uint256 _errorCode);\r\n\tfunction borrow(uint256 _borrowAmount) external returns (uint256 _errorCode);\r\n}\r\n\r\n// File: contracts/modules/CompoundLendingMarketAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Compound lending market. It has a standardized\r\n *      lending market interface. See AaveLendingMarket.sol.\r\n */\r\nlibrary CompoundLendingMarketAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t/**\r\n\t * @dev Retreives an underlying token given a cToken.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _token The underlying reserve token.\r\n\t */\r\n\tfunction _getUnderlyingToken(address _ctoken) internal view returns (address _token)\r\n\t{\r\n\t\tif (_ctoken == $.cETH) return $.WETH;\r\n\t\treturn CToken(_ctoken).underlying();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the maximum collateralization ratio for a given cToken.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _collateralRatio The percentual ratio normalized to 1e18 (100%).\r\n\t */\r\n\tfunction _getCollateralRatio(address _ctoken) internal view returns (uint256 _collateralRatio)\r\n\t{\r\n\t\taddress _comptroller = $.Compound_COMPTROLLER;\r\n\t\t(, _collateralRatio) = Comptroller(_comptroller).markets(_ctoken);\r\n\t\treturn _collateralRatio;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the current market liquidity for a given cToken.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _marketAmount The underlying reserve token available\r\n\t *                       market liquidity.\r\n\t */\r\n\tfunction _getMarketAmount(address _ctoken) internal view returns (uint256 _marketAmount)\r\n\t{\r\n\t\treturn CToken(_ctoken).getCash();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the current account liquidity in terms of a cToken\r\n\t *      underlying reserve.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _liquidityAmount The available account liquidity for the\r\n\t *                          underlying reserve token.\r\n\t */\r\n\tfunction _getLiquidityAmount(address _ctoken) internal view returns (uint256 _liquidityAmount)\r\n\t{\r\n\t\taddress _comptroller = $.Compound_COMPTROLLER;\r\n\t\t(uint256 _result, uint256 _liquidity, uint256 _shortfall) = Comptroller(_comptroller).getAccountLiquidity(address(this));\r\n\t\tif (_result != 0) return 0;\r\n\t\tif (_shortfall > 0) return 0;\r\n\t\taddress _priceOracle = Comptroller(_comptroller).oracle();\r\n\t\tuint256 _price = CPriceOracle(_priceOracle).getUnderlyingPrice(_ctoken);\r\n\t\treturn _liquidity.mul(1e18).div(_price);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the calculated account liquidity in terms of a cToken\r\n\t *      underlying reserve. It also considers the current market liquidity.\r\n\t *      A safety margin can be provided to deflate the actual liquidity amount.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _marginAmount The safety room to be left in terms of the\r\n\t *                      underlying reserve token.\r\n\t * @return _availableAmount The safe available liquidity in terms of the\r\n\t *                          underlying reserve token.\r\n\t */\r\n\tfunction _getAvailableAmount(address _ctoken, uint256 _marginAmount) internal view returns (uint256 _availableAmount)\r\n\t{\r\n\t\tuint256 _liquidityAmount = _getLiquidityAmount(_ctoken);\r\n\t\tif (_liquidityAmount <= _marginAmount) return 0;\r\n\t\treturn Math._min(_liquidityAmount.sub(_marginAmount), _getMarketAmount(_ctoken));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the last read-only exchange rate between the cToken\r\n\t *      and its underlying reserve token.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _exchangeRate The exchange rate between the cToken and its\r\n\t *                       underlying reserve token.\r\n\t */\r\n\tfunction _getExchangeRate(address _ctoken) internal view returns (uint256 _exchangeRate)\r\n\t{\r\n\t\treturn CToken(_ctoken).exchangeRateStored();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the last up-to-date exchange rate between the cToken\r\n\t *      and its underlying reserve token.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _exchangeRate The exchange rate between the cToken and its\r\n\t *                       underlying reserve token.\r\n\t */\r\n\tfunction _fetchExchangeRate(address _ctoken) internal returns (uint256 _exchangeRate)\r\n\t{\r\n\t\treturn CToken(_ctoken).exchangeRateCurrent();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the last read-only value for the cToken lending\r\n\t *      balance in terms of its underlying reserve token.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _amount The lending balance in terms of the underlying\r\n\t *                 reserve token.\r\n\t */\r\n\tfunction _getLendAmount(address _ctoken) internal view returns (uint256 _amount)\r\n\t{\r\n\t\treturn CToken(_ctoken).balanceOf(address(this)).mul(_getExchangeRate(_ctoken)).div(1e18);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the last up-to-date value for the cToken lending\r\n\t *      balance in terms of its underlying reserve token.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _amount The lending balance in terms of the underlying\r\n\t *                 reserve token.\r\n\t */\r\n\tfunction _fetchLendAmount(address _ctoken) internal returns (uint256 _amount)\r\n\t{\r\n\t\treturn CToken(_ctoken).balanceOfUnderlying(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the last read-only value for the cToken borrowing\r\n\t *      balance in terms of its underlying reserve token.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _amount The borrowing balance in terms of the underlying\r\n\t *                 reserve token.\r\n\t */\r\n\tfunction _getBorrowAmount(address _ctoken) internal view returns (uint256 _amount)\r\n\t{\r\n\t\treturn CToken(_ctoken).borrowBalanceStored(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the last up-to-date value for the cToken borrowing\r\n\t *      balance in terms of its underlying reserve token.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _amount The borrowing balance in terms of the underlying\r\n\t *                 reserve token.\r\n\t */\r\n\tfunction _fetchBorrowAmount(address _ctoken) internal returns (uint256 _amount)\r\n\t{\r\n\t\treturn CToken(_ctoken).borrowBalanceCurrent(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Signals the usage of a given cToken underlying reserve as\r\n\t *      collateral for borrowing funds in the lending market.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _enter(address _ctoken) internal returns (bool _success)\r\n\t{\r\n\t\taddress _comptroller = $.Compound_COMPTROLLER;\r\n\t\taddress[] memory _ctokens = new address[](1);\r\n\t\t_ctokens[0] = _ctoken;\r\n\t\ttry Comptroller(_comptroller).enterMarkets(_ctokens) returns (uint256[] memory _errorCodes) {\r\n\t\t\treturn _errorCodes[0] == 0;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Lend funds to a given cToken's market.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to lend.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _lend(address _ctoken, uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\tif (_ctoken == $.cETH) {\r\n\t\t\tif (!Wrapping._unwrap(_amount)) return false;\r\n\t\t\ttry CToken(_ctoken).mint{value: _amount}() {\r\n\t\t\t\treturn true;\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\tassert(Wrapping._wrap(_amount));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\taddress _token = _getUnderlyingToken(_ctoken);\r\n\t\t\tTransfers._approveFunds(_token, _ctoken, _amount);\r\n\t\t\ttry CToken(_ctoken).mint(_amount) returns (uint256 _errorCode) {\r\n\t\t\t\treturn _errorCode == 0;\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\tTransfers._approveFunds(_token, _ctoken, 0);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Redeem funds lent to a given cToken's market.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to redeem.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _redeem(address _ctoken, uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\tif (_ctoken == $.cETH) {\r\n\t\t\ttry CToken(_ctoken).redeemUnderlying(_amount) returns (uint256 _errorCode) {\r\n\t\t\t\tif (_errorCode == 0) {\r\n\t\t\t\t\tassert(Wrapping._wrap(_amount));\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttry CToken(_ctoken).redeemUnderlying(_amount) returns (uint256 _errorCode) {\r\n\t\t\t\treturn _errorCode == 0;\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Borrow funds from a given cToken's market.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to borrow.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _borrow(address _ctoken, uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\tif (_ctoken == $.cETH) {\r\n\t\t\ttry CToken(_ctoken).borrow(_amount) returns (uint256 _errorCode) {\r\n\t\t\t\tif (_errorCode == 0) {\r\n\t\t\t\t\tassert(Wrapping._wrap(_amount));\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttry CToken(_ctoken).borrow(_amount) returns (uint256 _errorCode) {\r\n\t\t\t\treturn _errorCode == 0;\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Repays a loan taken from a given cToken's market.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to repay.\r\n\t * @return _success A boolean indicating whether or not the operation suceeded.\r\n\t */\r\n\tfunction _repay(address _ctoken, uint256 _amount) internal returns (bool _success)\r\n\t{\r\n\t\tif (_ctoken == $.cETH) {\r\n\t\t\tif (!Wrapping._unwrap(_amount)) return false;\r\n\t\t\ttry CToken(_ctoken).repayBorrow{value: _amount}() {\r\n\t\t\t\treturn true;\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\tassert(Wrapping._wrap(_amount));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\taddress _token = _getUnderlyingToken(_ctoken);\r\n\t\t\tTransfers._approveFunds(_token, _ctoken, _amount);\r\n\t\t\ttry CToken(_ctoken).repayBorrow(_amount) returns (uint256 _errorCode) {\r\n\t\t\t\treturn _errorCode == 0;\r\n\t\t\t} catch (bytes memory /* _data */) {\r\n\t\t\t\tTransfers._approveFunds(_token, _ctoken, 0);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Signals the usage of a given cToken underlying reserve as\r\n\t *      collateral for borrowing funds in the lending market. This\r\n\t *      operation will revert if it does not succeed.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t */\r\n\tfunction _safeEnter(address _ctoken) internal\r\n\t{\r\n\t\trequire(_enter(_ctoken), \"enter failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Lend funds to a given cToken's market. This\r\n\t *      operation will revert if it does not succeed.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to lend.\r\n\t */\r\n\tfunction _safeLend(address _ctoken, uint256 _amount) internal\r\n\t{\r\n\t\trequire(_lend(_ctoken, _amount), \"lend failure\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Redeem funds lent to a given cToken's market. This\r\n\t *      operation will revert if it does not succeed.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to redeem.\r\n\t */\r\n\tfunction _safeRedeem(address _ctoken, uint256 _amount) internal\r\n\t{\r\n\t\trequire(_redeem(_ctoken, _amount), \"redeem failure\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Borrow funds from a given cToken's market. This\r\n\t *      operation will revert if it does not succeed.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to borrow.\r\n\t */\r\n\tfunction _safeBorrow(address _ctoken, uint256 _amount) internal\r\n\t{\r\n\t\trequire(_borrow(_ctoken, _amount), \"borrow failure\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Repays a loan taken from a given cToken's market. This\r\n\t *      operation will revert if it does not succeed.\r\n\t * @param _ctoken The Compound cToken address.\r\n\t * @param _amount The amount of the underlying token to repay.\r\n\t */\r\n\tfunction _safeRepay(address _ctoken, uint256 _amount) internal\r\n\t{\r\n\t\trequire(_repay(_ctoken, _amount), \"repay failure\");\r\n\t}\r\n}\r\n\r\n// File: contracts/GC.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev This public library provides a single entrypoint to the Compound lending\r\n *      market internal library available in the modules folder. It is a\r\n *      complement to the G.sol library. Both libraries exists to circunvent the\r\n *      contract size limitation imposed by the EVM. See G.sol for further\r\n *      documentation.\r\n */\r\nlibrary GC\r\n{\r\n\tfunction getUnderlyingToken(address _ctoken) public view returns (address _token) { return CompoundLendingMarketAbstraction._getUnderlyingToken(_ctoken); }\r\n\tfunction getCollateralRatio(address _ctoken) public view returns (uint256 _collateralFactor) { return CompoundLendingMarketAbstraction._getCollateralRatio(_ctoken); }\r\n\tfunction getMarketAmount(address _ctoken) public view returns (uint256 _marketAmount) { return CompoundLendingMarketAbstraction._getMarketAmount(_ctoken); }\r\n\tfunction getLiquidityAmount(address _ctoken) public view returns (uint256 _liquidityAmount) { return CompoundLendingMarketAbstraction._getLiquidityAmount(_ctoken); }\r\n\tfunction getExchangeRate(address _ctoken) public view returns (uint256 _exchangeRate) { return CompoundLendingMarketAbstraction._getExchangeRate(_ctoken); }\r\n\tfunction fetchExchangeRate(address _ctoken) public returns (uint256 _exchangeRate) { return CompoundLendingMarketAbstraction._fetchExchangeRate(_ctoken); }\r\n\tfunction getLendAmount(address _ctoken) public view returns (uint256 _amount) { return CompoundLendingMarketAbstraction._getLendAmount(_ctoken); }\r\n\tfunction fetchLendAmount(address _ctoken) public returns (uint256 _amount) { return CompoundLendingMarketAbstraction._fetchLendAmount(_ctoken); }\r\n\tfunction getBorrowAmount(address _ctoken) public view returns (uint256 _amount) { return CompoundLendingMarketAbstraction._getBorrowAmount(_ctoken); }\r\n\tfunction fetchBorrowAmount(address _ctoken) public returns (uint256 _amount) { return CompoundLendingMarketAbstraction._fetchBorrowAmount(_ctoken); }\r\n\tfunction lend(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._lend(_ctoken, _amount); }\r\n\tfunction redeem(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._redeem(_ctoken, _amount); }\r\n\tfunction borrow(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._borrow(_ctoken, _amount); }\r\n\tfunction repay(address _ctoken, uint256 _amount) public returns (bool _success) { return CompoundLendingMarketAbstraction._repay(_ctoken, _amount); }\r\n\tfunction safeEnter(address _ctoken) public { CompoundLendingMarketAbstraction._safeEnter(_ctoken); }\r\n\tfunction safeLend(address _ctoken, uint256 _amount) public { CompoundLendingMarketAbstraction._safeLend(_ctoken, _amount); }\r\n\tfunction safeRedeem(address _ctoken, uint256 _amount) public { CompoundLendingMarketAbstraction._safeRedeem(_ctoken, _amount); }\r\n}\r\n\r\n// File: contracts/GCTokenBase.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This abstract contract provides the basis implementation for all\r\n *         gcTokens, i.e. gTokens that use Compound cTokens as reserve, and\r\n *         implements the common functionality shared amongst them.\r\n *         In a nutshell, it extends the functinality of the GTokenBase contract\r\n *         to support operating directly using the cToken underlying asset.\r\n *         Therefore this contract provides functions that encapsulate minting\r\n *         and redeeming of cTokens internally, allowing users to interact with\r\n *         the contract providing funds directly in their underlying asset.\r\n */\r\nabstract contract GCTokenBase is GTokenBase, GCToken, GMining\r\n{\r\n\taddress public immutable override miningToken;\r\n\taddress public immutable override growthToken;\r\n\taddress public immutable override underlyingToken;\r\n\r\n\t/**\r\n\t * @dev Constructor for the gcToken contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _stakesToken The ERC-20 token address to be used as stakes\r\n\t *                     token (GRO).\r\n\t * @param _reserveToken The ERC-20 token address to be used as reserve\r\n\t *                      token (e.g. cDAI for gcDAI).\r\n\t * @param _miningToken The ERC-20 token used for liquidity mining on\r\n\t *                     compound (COMP).\r\n\t * @param _growthToken The ERC-20 token address of the associated\r\n\t *                     gToken, for gcTokens Type 2, or address(0),\r\n\t *                     if this contract is a gcToken Type 1.\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken, address _miningToken, address _growthToken)\r\n\t\tGTokenBase(_name, _symbol, _decimals, _stakesToken, _reserveToken) public\r\n\t{\r\n\t\tminingToken = _miningToken;\r\n\t\tgrowthToken = _growthToken;\r\n\t\taddress _underlyingToken = GC.getUnderlyingToken(_reserveToken);\r\n\t\tunderlyingToken = _underlyingToken;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the cToken amount\r\n\t *         given the amount of the underlying token and an exchange rate.\r\n\t * @param _underlyingCost The cost in terms of the cToken underlying asset.\r\n\t * @param _exchangeRate The given exchange rate as provided by exchangeRate().\r\n\t * @return _cost The equivalent cost in terms of cToken\r\n\t */\r\n\tfunction calcCostFromUnderlyingCost(uint256 _underlyingCost, uint256 _exchangeRate) public pure override returns (uint256 _cost)\r\n\t{\r\n\t\treturn GCFormulae._calcCostFromUnderlyingCost(_underlyingCost, _exchangeRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the underlying token\r\n\t *         amount given the cToken amount and an exchange rate.\r\n\t * @param _cost The cost in terms of the cToken.\r\n\t * @param _exchangeRate The given exchange rate as provided by exchangeRate().\r\n\t * @return _underlyingCost The equivalent cost in terms of the cToken underlying asset.\r\n\t */\r\n\tfunction calcUnderlyingCostFromCost(uint256 _cost, uint256 _exchangeRate) public pure override returns (uint256 _underlyingCost)\r\n\t{\r\n\t\treturn GCFormulae._calcUnderlyingCostFromCost(_cost, _exchangeRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         received/minted upon depositing the underlying asset to the\r\n\t *         contract.\r\n\t * @param _underlyingCost The amount of the underlying asset being deposited.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\r\n\t * @return _netShares The net amount of shares being received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) public pure override returns (uint256 _netShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GCFormulae._calcDepositSharesFromUnderlyingCost(_underlyingCost, _totalReserve, _totalSupply, _depositFee, _exchangeRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of the\r\n\t *         underlying asset to be deposited in order to receive the desired\r\n\t *         amount of shares.\r\n\t * @param _netShares The amount of this gcToken shares to receive.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _depositFee The current deposit fee as obtained by depositFee().\r\n\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\r\n\t * @return _underlyingCost The cost, in the underlying asset, to be paid.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcDepositUnderlyingCostFromShares(uint256 _netShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _depositFee, uint256 _exchangeRate) public pure override returns (uint256 _underlyingCost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GCFormulae._calcDepositUnderlyingCostFromShares(_netShares, _totalReserve, _totalSupply, _depositFee, _exchangeRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         given/burned upon withdrawing the underlying asset from the\r\n\t *         contract.\r\n\t * @param _underlyingCost The amount of the underlying asset being withdrawn.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve()\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply()\r\n\t * @param _withdrawalFee The current withdrawl fee as obtained by withdrawalFee()\r\n\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\r\n\t * @return _grossShares The total amount of shares being deducted,\r\n\t *                      including fees.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalSharesFromUnderlyingCost(uint256 _underlyingCost, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) public pure override returns (uint256 _grossShares, uint256 _feeShares)\r\n\t{\r\n\t\treturn GCFormulae._calcWithdrawalSharesFromUnderlyingCost(_underlyingCost, _totalReserve, _totalSupply, _withdrawalFee, _exchangeRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of the\r\n\t *         underlying asset to be withdrawn given the desired amount of\r\n\t *         shares.\r\n\t * @param _grossShares The amount of this gcToken shares to provide.\r\n\t * @param _totalReserve The reserve balance as obtained by totalReserve().\r\n\t * @param _totalSupply The shares supply as obtained by totalSupply().\r\n\t * @param _withdrawalFee The current withdrawal fee as obtained by withdrawalFee().\r\n\t * @param _exchangeRate The exchange rate as obtained by exchangeRate().\r\n\t * @return _underlyingCost The cost, in the underlying asset, to be received.\r\n\t * @return _feeShares The fee amount of shares being deducted.\r\n\t */\r\n\tfunction calcWithdrawalUnderlyingCostFromShares(uint256 _grossShares, uint256 _totalReserve, uint256 _totalSupply, uint256 _withdrawalFee, uint256 _exchangeRate) public pure override returns (uint256 _underlyingCost, uint256 _feeShares)\r\n\t{\r\n\t\treturn GCFormulae._calcWithdrawalUnderlyingCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee, _exchangeRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the Compound exchange rate since their last update.\r\n\t * @return _exchangeRate The exchange rate between cToken and its\r\n\t *                       underlying asset\r\n\t */\r\n\tfunction exchangeRate() public view override returns (uint256 _exchangeRate)\r\n\t{\r\n\t\treturn GC.getExchangeRate(reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the total amount kept in the reserve in terms of the\r\n\t *         underlying asset.\r\n\t * @return _totalReserveUnderlying The underlying asset balance on reserve.\r\n\t */\r\n\tfunction totalReserveUnderlying() public view virtual override returns (uint256 _totalReserveUnderlying)\r\n\t{\r\n\t\treturn GCFormulae._calcUnderlyingCostFromCost(totalReserve(), exchangeRate());\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the total amount of the underlying asset (or equivalent)\r\n\t *         this contract is currently lending on Compound.\r\n\t * @return _lendingReserveUnderlying The underlying asset lending\r\n\t *                                   balance on Compound.\r\n\t */\r\n\tfunction lendingReserveUnderlying() public view virtual override returns (uint256 _lendingReserveUnderlying)\r\n\t{\r\n\t\treturn GC.getLendAmount(reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the total amount of the underlying asset (or equivalent)\r\n\t *         this contract is currently borrowing on Compound.\r\n\t * @return _borrowingReserveUnderlying The underlying asset borrowing\r\n\t *                                     balance on Compound.\r\n\t */\r\n\tfunction borrowingReserveUnderlying() public view virtual override returns (uint256 _borrowingReserveUnderlying)\r\n\t{\r\n\t\treturn GC.getBorrowAmount(reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the minting of gcToken shares upon the deposit of the\r\n\t *         cToken underlying asset. The funds will be pulled in by this\r\n\t *         contract, therefore they must be previously approved. This\r\n\t *         function builds upon the GTokenBase deposit function. See\r\n\t *         GTokenBase.sol for further documentation.\r\n\t * @param _underlyingCost The amount of the underlying asset being\r\n\t *                        deposited in the operation.\r\n\t */\r\n\tfunction depositUnderlying(uint256 _underlyingCost) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_underlyingCost > 0, \"underlying cost must be greater than 0\");\r\n\t\tuint256 _cost = GCFormulae._calcCostFromUnderlyingCost(_underlyingCost, exchangeRate());\r\n\t\t(uint256 _netShares, uint256 _feeShares) = GFormulae._calcDepositSharesFromCost(_cost, totalReserve(), totalSupply(), depositFee());\r\n\t\trequire(_netShares > 0, \"shares must be greater than 0\");\r\n\t\tG.pullFunds(underlyingToken, _from, _underlyingCost);\r\n\t\tGC.safeLend(reserveToken, _underlyingCost);\r\n\t\trequire(_prepareDeposit(_cost), \"not available at the moment\");\r\n\t\t_mint(_from, _netShares);\r\n\t\t_mint(address(this), _feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the burning of gcToken shares upon the withdrawal of\r\n\t *         the underlying asset. This function builds upon the\r\n\t *         GTokenBase withdrawal function. See GTokenBase.sol for\r\n\t *         further documentation.\r\n\t * @param _grossShares The gross amount of this gcToken shares being\r\n\t *                     redeemed in the operation.\r\n\t */\r\n\tfunction withdrawUnderlying(uint256 _grossShares) public override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\trequire(_grossShares > 0, \"shares must be greater than 0\");\r\n\t\t(uint256 _cost, uint256 _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), withdrawalFee());\r\n\t\tuint256 _underlyingCost = GCFormulae._calcUnderlyingCostFromCost(_cost, exchangeRate());\r\n\t\trequire(_underlyingCost > 0, \"underlying cost must be greater than 0\");\r\n\t\trequire(_prepareWithdrawal(_cost), \"not available at the moment\");\r\n\t\t_underlyingCost = G.min(_underlyingCost, GC.getLendAmount(reserveToken));\r\n\t\tGC.safeRedeem(reserveToken, _underlyingCost);\r\n\t\tG.pushFunds(underlyingToken, _from, _underlyingCost);\r\n\t\t_burn(_from, _grossShares);\r\n\t\t_mint(address(this), _feeShares.div(2));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The default behavior of this function is to send the funds to\r\n\t *      address(0), but we override it and send the funds to the stkGRO\r\n\t *      contract instead.\r\n\t * @param _stakesAmount The amount of the stakes token being burned.\r\n\t */\r\n\tfunction _burnStakes(uint256 _stakesAmount) internal override\r\n\t{\r\n\t\tG.pushFunds(stakesToken, $.stkGRO, _stakesAmount);\r\n\t}\r\n}\r\n\r\n// File: contracts/GCLeveragedReserveManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library implements data structure abstraction for the leveraged\r\n *      reserve management code in order to circuvent the EVM contract size limit.\r\n *      It is therefore a public library shared by all gcToken Type 1 contracts and\r\n *      needs to be published alongside them. See GCTokenType1.sol for further\r\n *      documentation.\r\n */\r\nlibrary GCLeveragedReserveManager\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing GCLeveragedReserveManager for GCLeveragedReserveManager.Self;\r\n\r\n\tuint256 constant MAXIMUM_COLLATERALIZATION_RATIO = 98e16; // 98% of 75% = 73.5%\r\n\tuint256 constant DEFAULT_COLLATERALIZATION_RATIO = 94e16; // 94% of 75% = 70.5%\r\n\tuint256 constant DEFAULT_COLLATERALIZATION_MARGIN = 2e16; // 2% of 75% = 1.5%\r\n\r\n\tstruct Self {\r\n\t\taddress reserveToken;\r\n\t\taddress underlyingToken;\r\n\r\n\t\taddress exchange;\r\n\r\n\t\taddress miningToken;\r\n\t\tuint256 miningMinGulpAmount;\r\n\t\tuint256 miningMaxGulpAmount;\r\n\r\n\t\tuint256 collateralizationRatio;\r\n\t\tuint256 collateralizationMargin;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Initializes the data structure. This method is exposed publicly.\r\n\t * @param _reserveToken The ERC-20 token address of the reserve token (cToken).\r\n\t * @param _miningToken The ERC-20 token address to be collected from\r\n\t *                     liquidity mining (COMP).\r\n\t */\r\n\tfunction init(Self storage _self, address _reserveToken, address _miningToken) public\r\n\t{\r\n\t\taddress _underlyingToken = GC.getUnderlyingToken(_reserveToken);\r\n\r\n\t\t_self.reserveToken = _reserveToken;\r\n\t\t_self.underlyingToken = _underlyingToken;\r\n\r\n\t\t_self.exchange = address(0);\r\n\r\n\t\t_self.miningToken = _miningToken;\r\n\t\t_self.miningMinGulpAmount = 0;\r\n\t\t_self.miningMaxGulpAmount = 0;\r\n\r\n\t\t_self.collateralizationRatio = DEFAULT_COLLATERALIZATION_RATIO;\r\n\t\t_self.collateralizationMargin = DEFAULT_COLLATERALIZATION_MARGIN;\r\n\r\n\t\tGC.safeEnter(_reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the contract address for asset conversion delegation.\r\n\t *      This library converts the miningToken into the underlyingToken\r\n\t *      and use the assets to back the reserveToken. See GExchange.sol\r\n\t *      for further documentation. This method is exposed publicly.\r\n\t * @param _exchange The address of the contract that implements the\r\n\t *                  GExchange interface.\r\n\t */\r\n\tfunction setExchange(Self storage _self, address _exchange) public\r\n\t{\r\n\t\t_self.exchange = _exchange;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the range for converting liquidity mining assets. This\r\n\t *      method is exposed publicly.\r\n\t * @param _miningMinGulpAmount The minimum amount, funds will only be\r\n\t *                             converted once the minimum is accumulated.\r\n\t * @param _miningMaxGulpAmount The maximum amount, funds beyond this\r\n\t *                             limit will not be converted and are left\r\n\t *                             for future rounds of conversion.\r\n\t */\r\n\tfunction setMiningGulpRange(Self storage _self, uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) public\r\n\t{\r\n\t\trequire(_miningMinGulpAmount <= _miningMaxGulpAmount, \"invalid range\");\r\n\t\t_self.miningMinGulpAmount = _miningMinGulpAmount;\r\n\t\t_self.miningMaxGulpAmount = _miningMaxGulpAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the collateralization ratio and margin. These values are\r\n\t *      percentual and relative to the maximum collateralization ratio\r\n\t *      provided by the underlying asset. This method is exposed publicly.\r\n\t * @param _collateralizationRatio The target collateralization ratio,\r\n\t *                                between lend and borrow, that the\r\n\t *                                reserve will try to maintain.\r\n\t * @param _collateralizationMargin The deviation from the target ratio\r\n\t *                                 that should be accepted.\r\n\t */\r\n\tfunction setCollateralizationRatio(Self storage _self, uint256 _collateralizationRatio, uint256 _collateralizationMargin) public\r\n\t{\r\n\t\trequire(_collateralizationMargin <= _collateralizationRatio && _collateralizationRatio.add(_collateralizationMargin) <= MAXIMUM_COLLATERALIZATION_RATIO, \"invalid ratio\");\r\n\t\t_self.collateralizationRatio = _collateralizationRatio;\r\n\t\t_self.collateralizationMargin = _collateralizationMargin;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs the reserve adjustment actions leaving a liquidity room,\r\n\t *      if necessary. It will attempt to incorporate the liquidity mining\r\n\t *      assets into the reserve and adjust the collateralization\r\n\t *      targeting the configured ratio. This method is exposed publicly.\r\n\t * @param _roomAmount The underlying token amount to be available after the\r\n\t *                    operation. This is revelant for withdrawals, once the\r\n\t *                    room amount is withdrawn the reserve should reflect\r\n\t *                    the configured collateralization ratio.\r\n\t * @return _success A boolean indicating whether or not both actions suceeded.\r\n\t */\r\n\tfunction adjustReserve(Self storage _self, uint256 _roomAmount) public returns (bool _success)\r\n\t{\r\n\t\tbool success1 = _self._gulpMiningAssets();\r\n\t\tbool success2 = _self._adjustLeverage(_roomAmount);\r\n\t\treturn success1 && success2;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates the collateralization ratio and range relative to the\r\n\t *      maximum collateralization ratio provided by the underlying asset.\r\n\t * @return _collateralizationRatio The target absolute collateralization ratio.\r\n\t * @return _minCollateralizationRatio The minimum absolute collateralization ratio.\r\n\t * @return _maxCollateralizationRatio The maximum absolute collateralization ratio.\r\n\t */\r\n\tfunction _calcCollateralizationRatio(Self storage _self) internal view returns (uint256 _collateralizationRatio, uint256 _minCollateralizationRatio, uint256 _maxCollateralizationRatio)\r\n\t{\r\n\t\tuint256 _collateralRatio = GC.getCollateralRatio(_self.reserveToken);\r\n\t\t_collateralizationRatio = _collateralRatio.mul(_self.collateralizationRatio).div(1e18);\r\n\t\t_minCollateralizationRatio = _collateralRatio.mul(_self.collateralizationRatio.sub(_self.collateralizationMargin)).div(1e18);\r\n\t\t_maxCollateralizationRatio = _collateralRatio.mul(_self.collateralizationRatio.add(_self.collateralizationMargin)).div(1e18);\r\n\t\treturn (_collateralizationRatio, _minCollateralizationRatio, _maxCollateralizationRatio);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Incorporates the liquidity mining assets into the reserve. Assets\r\n\t *      are converted to the underlying asset and then added to the reserve.\r\n\t *      If the amount available is below the minimum, or if the exchange\r\n\t *      contract is not set, nothing is done. Otherwise the operation is\r\n\t *      performed, limited to the maximum amount. Note that this operation\r\n\t *      will incorporate to the reserve all the underlying token balance\r\n\t *      including funds sent to it or left over somehow.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _gulpMiningAssets(Self storage _self) internal returns (bool _success)\r\n\t{\r\n\t\tif (_self.exchange == address(0)) return true;\r\n\t\tif (_self.miningMaxGulpAmount == 0) return true;\r\n\t\tuint256 _miningAmount = G.getBalance(_self.miningToken);\r\n\t\tif (_miningAmount == 0) return true;\r\n\t\tif (_miningAmount < _self.miningMinGulpAmount) return true;\r\n\t\t_self._convertMiningToUnderlying(G.min(_miningAmount, _self.miningMaxGulpAmount));\r\n\t\treturn GC.lend(_self.reserveToken, G.getBalance(_self.underlyingToken));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adjusts the reserve to match the configured collateralization\r\n\t *      ratio. It calculates how much the collateralization must be\r\n\t *      increased or decreased and either: 1) lend/borrow, or\r\n\t *      2) repay/redeem, respectivelly. The funds required to perform\r\n\t *      the operation are obtained via FlashLoan to avoid having to\r\n\t *      maneuver around margin when moving in/out of leverage.\r\n\t * @param _roomAmount The amount of underlying token to be liquid after\r\n\t *                    the operation.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _adjustLeverage(Self storage _self, uint256 _roomAmount) internal returns (bool _success)\r\n\t{\r\n\t\t// the reserve is the diference between lend and borrow\r\n\t\tuint256 _lendAmount = GC.fetchLendAmount(_self.reserveToken);\r\n\t\tuint256 _borrowAmount = GC.fetchBorrowAmount(_self.reserveToken);\r\n\t\tuint256 _reserveAmount = _lendAmount.sub(_borrowAmount);\r\n\t\t// caps the room in case it is larger than the reserve\r\n\t\t_roomAmount = G.min(_roomAmount, _reserveAmount);\r\n\t\t// The new reserve must deduct the room requested\r\n\t\tuint256 _newReserveAmount = _reserveAmount.sub(_roomAmount);\r\n\t\t// caculates the assumed lend amount deducting the requested room\r\n\t\tuint256 _oldLendAmount = _lendAmount.sub(_roomAmount);\r\n\t\t// the new lend amount is the new reserve with leverage applied\r\n\t\tuint256 _newLendAmount;\r\n\t\tuint256 _minNewLendAmount;\r\n\t\tuint256 _maxNewLendAmount;\r\n\t\t{\r\n\t\t\t(uint256 _collateralizationRatio, uint256 _minCollateralizationRatio, uint256 _maxCollateralizationRatio) = _self._calcCollateralizationRatio();\r\n\t\t\t_newLendAmount = _newReserveAmount.mul(1e18).div(uint256(1e18).sub(_collateralizationRatio));\r\n\t\t\t_minNewLendAmount = _newReserveAmount.mul(1e18).div(uint256(1e18).sub(_minCollateralizationRatio));\r\n\t\t\t_maxNewLendAmount = _newReserveAmount.mul(1e18).div(uint256(1e18).sub(_maxCollateralizationRatio));\r\n\t\t}\r\n\t\t// adjust the reserve by:\r\n\t\t// 1- increasing collateralization by the difference\r\n\t\t// 2- decreasing collateralization by the difference\r\n\t\t// the adjustment is capped by the liquidity available on the market\r\n\t\tuint256 _liquidityAmount = G.getFlashLoanLiquidity(_self.underlyingToken);\r\n\t\tif (_minNewLendAmount > _oldLendAmount) {\r\n\t\t\t{\r\n\t\t\t\tuint256 _minAmount = _minNewLendAmount.sub(_oldLendAmount);\r\n\t\t\t\trequire(_liquidityAmount >= _minAmount, \"cannot maintain collateralization ratio\");\r\n\t\t\t}\r\n\t\t\tuint256 _amount = _newLendAmount.sub(_oldLendAmount);\r\n\t\t\treturn _self._dispatchFlashLoan(G.min(_amount, _liquidityAmount), 1);\r\n\t\t}\r\n\t\tif (_maxNewLendAmount < _oldLendAmount) {\r\n\t\t\t{\r\n\t\t\t\tuint256 _minAmount = _oldLendAmount.sub(_maxNewLendAmount);\r\n\t\t\t\trequire(_liquidityAmount >= _minAmount, \"cannot maintain collateralization ratio\");\r\n\t\t\t}\r\n\t\t\tuint256 _amount = _oldLendAmount.sub(_newLendAmount);\r\n\t\t\treturn _self._dispatchFlashLoan(G.min(_amount, _liquidityAmount), 2);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This is the continuation of _adjustLeverage once funds are\r\n\t *      borrowed via the FlashLoan callback.\r\n\t * @param _amount The borrowed amount as requested.\r\n\t * @param _fee The additional fee that needs to be paid for the FlashLoan.\r\n\t * @param _which A flag indicating whether the funds were borrowed to\r\n\t *               1) increase or 2) decrease the collateralization ratio.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _continueAdjustLeverage(Self storage _self, uint256 _amount, uint256 _fee, uint256 _which) internal returns (bool _success)\r\n\t{\r\n\t\t// note that the reserve adjustment is not 100% accurate as we\r\n\t\t// did not account for FlashLoan fees in the initial calculation\r\n\t\tif (_which == 1) {\r\n\t\t\tbool _success1 = GC.lend(_self.reserveToken, _amount.sub(_fee));\r\n\t\t\tbool _success2 = GC.borrow(_self.reserveToken, _amount);\r\n\t\t\treturn _success1 && _success2;\r\n\t\t}\r\n\t\tif (_which == 2) {\r\n\t\t\tbool _success1 = GC.repay(_self.reserveToken, _amount);\r\n\t\t\tbool _success2 = GC.redeem(_self.reserveToken, _amount.add(_fee));\r\n\t\t\treturn _success1 && _success2;\r\n\t\t}\r\n\t\tassert(false);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Abstracts the details of dispatching the FlashLoan by encoding\r\n\t *      the extra parameters.\r\n\t * @param _amount The amount to be borrowed.\r\n\t * @param _which A flag indicating whether the funds are borrowed to\r\n\t *               1) increase or 2) decrease the collateralization ratio.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _dispatchFlashLoan(Self storage _self, uint256 _amount, uint256 _which) internal returns (bool _success)\r\n\t{\r\n\t\treturn G.requestFlashLoan(_self.underlyingToken, _amount, abi.encode(_which));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Abstracts the details of receiving a FlashLoan by decoding\r\n\t *      the extra parameters.\r\n\t * @param _token The asset being borrowed.\r\n\t * @param _amount The borrowed amount.\r\n\t * @param _fee The fees to be paid along with the borrowed amount.\r\n\t * @param _params Additional encoded parameters to be decoded.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _receiveFlashLoan(Self storage _self, address _token, uint256 _amount, uint256 _fee, bytes memory _params) external returns (bool _success)\r\n\t{\r\n\t\tassert(_token == _self.underlyingToken);\r\n\t\tuint256 _which = abi.decode(_params, (uint256));\r\n\t\treturn _self._continueAdjustLeverage(_amount, _fee, _which);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a given amount of the mining token to the underlying\r\n\t *      token using the external exchange contract. Both amounts are\r\n\t *      deducted and credited, respectively, from the current contract.\r\n\t * @param _inputAmount The amount to be converted.\r\n\t */\r\n\tfunction _convertMiningToUnderlying(Self storage _self, uint256 _inputAmount) internal\r\n\t{\r\n\t\tG.dynamicConvertFunds(_self.exchange, _self.miningToken, _self.underlyingToken, _inputAmount, 0);\r\n\t}\r\n}\r\n\r\n// File: contracts/GFlashBorrower.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides an uniform interface for receiving\r\n *      flash loans. It encapsulates the required functionality provided by\r\n *      both Aave and Dydx. It performs the basic validation to ensure that\r\n *      only Aave/Dydx contracts can dispatch the operation and only the\r\n *      current contract (that inherits from it) can initiate it.\r\n */\r\nabstract contract GFlashBorrower is FlashLoanReceiver, ICallee\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 private allowOperationLevel = 0;\r\n\r\n\t/**\r\n\t * @dev Handy definition to ensure that flash loans are only initiated\r\n\t *      from within the current contract.\r\n\t */\r\n\tmodifier mayFlashBorrow()\r\n\t{\r\n\t\tallowOperationLevel++;\r\n\t\t_;\r\n\t\tallowOperationLevel--;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Handles Aave callback. Delegates the processing of the funds\r\n\t *      to the virtual function _processFlashLoan and later takes care\r\n\t *      of paying it back.\r\n\t * @param _token The ERC-20 contract address.\r\n\t * @param _amount The amount being borrowed.\r\n\t * @param _fee The fee, in addition to the amount borrowed, to be repaid.\r\n\t * @param _params Additional user parameters provided when the flash\r\n\t *                loan was requested.\r\n\t */\r\n\tfunction executeOperation(address _token, uint256 _amount, uint256 _fee, bytes calldata _params) external override\r\n\t{\r\n\t\tassert(allowOperationLevel > 0);\r\n\t\taddress _from = msg.sender;\r\n\t\taddress _pool = $.Aave_AAVE_LENDING_POOL;\r\n\t\tassert(_from == _pool);\r\n\t\trequire(_processFlashLoan(_token, _amount, _fee, _params)/*, \"failure processing flash loan\"*/);\r\n\t\tG.paybackFlashLoan(FlashLoans.Provider.Aave, _token, _amount.add(_fee));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Handles Dydx callback. Delegates the processing of the funds\r\n\t *      to the virtual function _processFlashLoan and later takes care\r\n\t *      of paying it back.\r\n\t * @param _sender The contract address of the initiator of the flash\r\n\t *                loan, expected to be the current contract.\r\n\t * @param _account Dydx account info provided in the callback.\r\n\t * @param _data Aditional external data provided to the Dydx callback,\r\n\t *              this is used by the Dydx module to pass the ERC-20 token\r\n\t *              address, the amount and fee, as well as user parameters.\r\n\t */\r\n\tfunction callFunction(address _sender, Account.Info memory _account, bytes memory _data) external override\r\n\t{\r\n\t\tassert(allowOperationLevel > 0);\r\n\t\taddress _from = msg.sender;\r\n\t\taddress _solo = $.Dydx_SOLO_MARGIN;\r\n\t\tassert(_from == _solo);\r\n\t\tassert(_sender == address(this));\r\n\t\tassert(_account.owner == address(this));\r\n\t\t(address _token, uint256 _amount, uint256 _fee, bytes memory _params) = abi.decode(_data, (address,uint256,uint256,bytes));\r\n\t\trequire(_processFlashLoan(_token, _amount, _fee, _params)/*, \"failure processing flash loan\"*/);\r\n\t\tG.paybackFlashLoan(FlashLoans.Provider.Dydx, _token, _amount.add(_fee));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that abstracts the algorithm to be performed\r\n\t *      with borrowed funds. It receives the funds, deposited in the\r\n\t *      current contract, and must ensure they are available as balance\r\n\t *      of the current contract, including fees, before it returns.\r\n\t * @param _token The ERC-20 contract address.\r\n\t * @param _amount The amount being borrowed.\r\n\t * @param _fee The fee, in addition to the amount borrowed, to be repaid.\r\n\t * @param _params Additional user parameters provided when the flash\r\n\t *                loan was requested.\r\n\t * @return _success A boolean indicating success.\r\n\t */\r\n\tfunction _processFlashLoan(address _token, uint256 _amount, uint256 _fee, bytes memory _params) internal virtual returns (bool _success);\r\n}\r\n\r\n// File: contracts/GCTokenType1.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements the functionality for the gcToken Type 1.\r\n *         As with all gcTokens, gcTokens Type 1 use a Compound cToken as\r\n *         reserve token. Furthermore, Type 1 tokens may apply leverage to the\r\n *         reserve by using the cToken balance to borrow its associated\r\n *         underlying asset which in turn is used to mint more cToken. This\r\n *         process is performed to the limit where the actual reserve balance\r\n *         ends up accounting for the difference between the total amount lent\r\n *         and the total amount borrowed. One may observe that there is\r\n *         always a net loss when considering just the yield accrued for\r\n *         lending minus the yield accrued for borrowing on Compound. However,\r\n *         if we consider COMP being credited for liquidity mining the net\r\n *         balance may become positive and that is when the leverage mechanism\r\n *         should be applied. The COMP is periodically converted to the\r\n *         underlying asset and naturally becomes part of the reserve.\r\n *         In order to easily and efficiently adjust the leverage, this contract\r\n *         performs flash loans. See GCTokenBase, GFlashBorrower and\r\n *         GCLeveragedReserveManager for further documentation.\r\n */\r\ncontract GCTokenType1 is GCTokenBase, GFlashBorrower\r\n{\r\n\tusing GCLeveragedReserveManager for GCLeveragedReserveManager.Self;\r\n\r\n\tGCLeveragedReserveManager.Self lrm;\r\n\r\n\t/**\r\n\t * @dev Constructor for the gcToken Type 1 contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _stakesToken The ERC-20 token address to be used as stakes\r\n\t *                     token (GRO).\r\n\t * @param _reserveToken The ERC-20 token address to be used as reserve\r\n\t *                      token (e.g. cDAI for gcDAI).\r\n\t * @param _miningToken The ERC-20 token used for liquidity mining on\r\n\t *                     compound (COMP).\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken, address _miningToken)\r\n\t\tGCTokenBase(_name, _symbol, _decimals, _stakesToken, _reserveToken, _miningToken, address(0)) public\r\n\t{\r\n\t\tlrm.init(_reserveToken, _miningToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Overrides the default total reserve definition in order to\r\n\t *         account only for the diference between assets being lent\r\n\t *         and assets being borrowed.\r\n\t * @return _totalReserve The amount of the reserve token corresponding\r\n\t *                       to this contract's worth.\r\n\t */\r\n\tfunction totalReserve() public view override returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn GCFormulae._calcCostFromUnderlyingCost(totalReserveUnderlying(), exchangeRate());\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Overrides the default total underlying reserve definition in\r\n\t *         order to account only for the diference between assets being\r\n\t *         lent and assets being borrowed.\r\n\t * @return _totalReserveUnderlying The amount of the underlying asset\r\n\t *                                 corresponding to this contract's worth.\r\n\t */\r\n\tfunction totalReserveUnderlying() public view override returns (uint256 _totalReserveUnderlying)\r\n\t{\r\n\t\treturn lendingReserveUnderlying().sub(borrowingReserveUnderlying());\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the contract address for the GExchange implementation\r\n\t *         currently being used to convert the mining token (COMP) into\r\n\t *         the underlying asset.\r\n\t * @return _exchange A GExchange compatible contract address, or address(0)\r\n\t *                   if it has not been set.\r\n\t */\r\n\tfunction exchange() public view override returns (address _exchange)\r\n\t{\r\n\t\treturn lrm.exchange;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the minimum and maximum amount of the mining token to\r\n\t *         be processed on every operation. If the contract balance\r\n\t *         is below the minimum it waits until more accumulates.\r\n\t *         If the total amount is beyond the maximum it processes the\r\n\t *         maximum and leaves the rest for future operations. The mining\r\n\t *         token accumulated via liquidity mining is converted to the\r\n\t *         underlying asset and used to mint the associated cToken.\r\n\t *         This range is used to avoid wasting gas converting small\r\n\t *         amounts as well as mitigating slipage converting large amounts.\r\n\t * @return _miningMinGulpAmount The minimum amount of the mining token\r\n\t *                              to be processed per deposit/withdrawal.\r\n\t * @return _miningMaxGulpAmount The maximum amount of the mining token\r\n\t *                              to be processed per deposit/withdrawal.\r\n\t */\r\n\tfunction miningGulpRange() public view override returns (uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount)\r\n\t{\r\n\t\treturn (lrm.miningMinGulpAmount, lrm.miningMaxGulpAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the minimum and maximum amount of the gcToken Type 1 to\r\n\t *         be processed on every operation. This method applies only to\r\n\t *         gcTokens Type 2 and is not relevant for gcTokens Type 1.\r\n\t * @return _growthMinGulpAmount The minimum amount of the gcToken Type 1\r\n\t *                              to be processed per deposit/withdrawal\r\n\t *                              (always 0).\r\n\t * @return _growthMaxGulpAmount The maximum amount of the gcToken Type 1\r\n\t *                              to be processed per deposit/withdrawal\r\n\t *                              (always 0).\r\n\t */\r\n\tfunction growthGulpRange() public view override returns (uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount)\r\n\t{\r\n\t\treturn (0, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the target collateralization ratio and margin to be\r\n\t *         maintained by this contract. The amount is relative to the\r\n\t *         maximum collateralization available for the associated cToken\r\n\t *         on Compound. gcToken Type 1 uses leveraged collateralization\r\n\t *         where the cToken is used to borrow its underlying token which\r\n\t *         in turn is used to mint new cToken and repeat. This is\r\n\t *         performed to the maximal level where the actual reserve\r\n\t *         ends up corresponding to the difference between the amount\r\n\t *         lent and the amount borrowed.\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                (defaults to 94%)\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                margin (defaults to 2%)\r\n\t */\r\n\tfunction collateralizationRatio() public view override returns (uint256 _collateralizationRatio, uint256 _collateralizationMargin)\r\n\t{\r\n\t\treturn (lrm.collateralizationRatio, lrm.collateralizationMargin);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the contract address for the GExchange implementation\r\n\t *         to be used in converting the mining token (COMP) into\r\n\t *         the underlying asset. This is a priviledged function\r\n\t *         restricted to the contract owner.\r\n\t * @param _exchange A GExchange compatible contract address.\r\n\t */\r\n\tfunction setExchange(address _exchange) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tlrm.setExchange(_exchange);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the minimum and maximum amount of the mining token to\r\n\t *         be processed on every operation. See miningGulpRange().\r\n\t *         This is a priviledged function restricted to the contract owner.\r\n\t * @param _miningMinGulpAmount The minimum amount of the mining token\r\n\t *                             to be processed per deposit/withdrawal.\r\n\t * @param _miningMaxGulpAmount The maximum amount of the mining token\r\n\t *                             to be processed per deposit/withdrawal.\r\n\t */\r\n\tfunction setMiningGulpRange(uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tlrm.setMiningGulpRange(_miningMinGulpAmount, _miningMaxGulpAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the minimum and maximum amount of the gcToken Type 1 to\r\n\t *         be processed on every operation. This method applies only to\r\n\t *         gcTokens Type 2 and is not relevant for gcTokens Type 1.\r\n\t *         This is a priviledged function restricted to the contract owner.\r\n\t * @param _growthMinGulpAmount The minimum amount of the gcToken Type 1\r\n\t *                             to be processed per deposit/withdrawal\r\n\t *                             (ignored).\r\n\t * @param _growthMaxGulpAmount The maximum amount of the gcToken Type 1\r\n\t *                             to be processed per deposit/withdrawal\r\n\t *                             (ignored).\r\n\t */\r\n\tfunction setGrowthGulpRange(uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount) public override /*onlyOwner nonReentrant*/\r\n\t{\r\n\t\t_growthMinGulpAmount; _growthMaxGulpAmount; // silences warnings\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the target collateralization ratio and margin to be\r\n\t *         maintained by this contract. See collateralizationRatio().\r\n\t *         Setting both parameters to 0 turns off collateralization and\r\n\t *         leveraging. This is a priviledged function restricted to the\r\n\t *         contract owner.\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                (defaults to 94%)\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                margin (defaults to 2%)\r\n\t */\r\n\tfunction setCollateralizationRatio(uint256 _collateralizationRatio, uint256 _collateralizationMargin) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tlrm.setCollateralizationRatio(_collateralizationRatio, _collateralizationMargin);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This method is overriden from GTokenBase and sets up the reserve\r\n\t *      after a deposit comes along. It basically adjusts the\r\n\t *      collateralization/leverage to reflect the new increased reserve\r\n\t *      balance. This method uses the GCLeveragedReserveManager to\r\n\t *      adjust the reserve and this is done via flash loans.\r\n\t *      See GCLeveragedReserveManager.sol.\r\n\t * @param _cost The amount of reserve being deposited (ignored).\r\n\t * @return _success A boolean indicating whether or not the operation\r\n\t *                  succeeded. This operation should not fail unless\r\n\t *                  any of the underlying components (Compound, Aave,\r\n\t *                  Dydx) also fails.\r\n\t */\r\n\tfunction _prepareDeposit(uint256 _cost) internal override mayFlashBorrow returns (bool _success)\r\n\t{\r\n\t\t_cost; // silences warnings\r\n\t\treturn lrm.adjustReserve(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This method is overriden from GTokenBase and sets up the reserve\r\n\t *      before a withdrawal comes along. It basically calculates the\r\n\t *      the amount that will be left in the reserve, in terms of cToken\r\n\t *      cost, and adjusts the collateralization/leverage accordingly. This\r\n\t *      method uses the GCLeveragedReserveManager to adjust the reserve\r\n\t *      and this is done via flash loans. See GCLeveragedReserveManager.sol.\r\n\t * @param _cost The amount of reserve being withdrawn and that needs to\r\n\t *              be immediately liquid.\r\n\t * @return _success A boolean indicating whether or not the operation succeeded.\r\n\t *                  The operation may fail if it is not possible to recover\r\n\t *                  the required liquidity (e.g. low liquidity in the markets).\r\n\t */\r\n\tfunction _prepareWithdrawal(uint256 _cost) internal override mayFlashBorrow returns (bool _success)\r\n\t{\r\n\t\treturn lrm.adjustReserve(GCFormulae._calcUnderlyingCostFromCost(_cost, GC.fetchExchangeRate(reserveToken)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This method dispatches the flash loan callback back to the\r\n\t *      GCLeveragedReserveManager library. See GCLeveragedReserveManager.sol\r\n\t *      and GFlashBorrower.sol.\r\n\t */\r\n\tfunction _processFlashLoan(address _token, uint256 _amount, uint256 _fee, bytes memory _params) internal override returns (bool _success)\r\n\t{\r\n\t\treturn lrm._receiveFlashLoan(_token, _amount, _fee, _params);\r\n\t}\r\n}\r\n\r\n// File: contracts/GCDelegatedReserveManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library implements data structure abstraction for the delegated\r\n *      reserve management code in order to circuvent the EVM contract size limit.\r\n *      It is therefore a public library shared by all gcToken Type 2 contracts and\r\n *      needs to be published alongside them. See GCTokenType2.sol for further\r\n *      documentation.\r\n */\r\nlibrary GCDelegatedReserveManager\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing GCDelegatedReserveManager for GCDelegatedReserveManager.Self;\r\n\r\n\tuint256 constant MAXIMUM_COLLATERALIZATION_RATIO = 96e16; // 96% of 50% = 48%\r\n\tuint256 constant DEFAULT_COLLATERALIZATION_RATIO = 66e16; // 66% of 50% = 33%\r\n\tuint256 constant DEFAULT_COLLATERALIZATION_MARGIN = 8e16; // 8% of 50% = 4%\r\n\r\n\tstruct Self {\r\n\t\taddress reserveToken;\r\n\t\taddress underlyingToken;\r\n\r\n\t\taddress exchange;\r\n\r\n\t\taddress miningToken;\r\n\t\tuint256 miningMinGulpAmount;\r\n\t\tuint256 miningMaxGulpAmount;\r\n\r\n\t\taddress borrowToken;\r\n\r\n\t\taddress growthToken;\r\n\t\taddress growthReserveToken;\r\n\t\tuint256 growthMinGulpAmount;\r\n\t\tuint256 growthMaxGulpAmount;\r\n\r\n\t\tuint256 collateralizationRatio;\r\n\t\tuint256 collateralizationMargin;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Initializes the data structure. This method is exposed publicly.\r\n\t *      Note that the underlying borrowing token must match the growth\r\n\t *      reserve token given that funds borrowed will be reinvested in\r\n\t *      the provided growth token (gToken).\r\n\t * @param _reserveToken The ERC-20 token address of the reserve token (cToken).\r\n\t * @param _miningToken The ERC-20 token address to be collected from\r\n\t *                     liquidity mining (COMP).\r\n\t * @param _borrowToken The ERC-20 token address of the borrow token (cToken).\r\n\t * @param _growthToken The ERC-20 token address of the growth token (gToken).\r\n\t */\r\n\tfunction init(Self storage _self, address _reserveToken, address _miningToken, address _borrowToken, address _growthToken) public\r\n\t{\r\n\t\taddress _underlyingToken = GC.getUnderlyingToken(_reserveToken);\r\n\t\taddress _borrowUnderlyingToken = GC.getUnderlyingToken(_borrowToken);\r\n\t\taddress _growthReserveToken = GToken(_growthToken).reserveToken();\r\n\t\tassert(_borrowUnderlyingToken == _growthReserveToken);\r\n\r\n\t\t_self.reserveToken = _reserveToken;\r\n\t\t_self.underlyingToken = _underlyingToken;\r\n\r\n\t\t_self.exchange = address(0);\r\n\r\n\t\t_self.miningToken = _miningToken;\r\n\t\t_self.miningMinGulpAmount = 0;\r\n\t\t_self.miningMaxGulpAmount = 0;\r\n\r\n\t\t_self.borrowToken = _borrowToken;\r\n\r\n\t\t_self.growthToken = _growthToken;\r\n\t\t_self.growthReserveToken = _growthReserveToken;\r\n\t\t_self.growthMinGulpAmount = 0;\r\n\t\t_self.growthMaxGulpAmount = 0;\r\n\r\n\t\t_self.collateralizationRatio = DEFAULT_COLLATERALIZATION_RATIO;\r\n\t\t_self.collateralizationMargin = DEFAULT_COLLATERALIZATION_MARGIN;\r\n\r\n\t\tGC.safeEnter(_reserveToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the contract address for asset conversion delegation.\r\n\t *      This library converts the miningToken into the underlyingToken\r\n\t *      and use the assets to back the reserveToken. See GExchange.sol\r\n\t *      for further documentation. This method is exposed publicly.\r\n\t * @param _exchange The address of the contract that implements the\r\n\t *                  GExchange interface.\r\n\t */\r\n\tfunction setExchange(Self storage _self, address _exchange) public\r\n\t{\r\n\t\t_self.exchange = _exchange;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the range for converting liquidity mining assets. This\r\n\t *      method is exposed publicly.\r\n\t * @param _miningMinGulpAmount The minimum amount, funds will only be\r\n\t *                             converted once the minimum is accumulated.\r\n\t * @param _miningMaxGulpAmount The maximum amount, funds beyond this\r\n\t *                             limit will not be converted and are left\r\n\t *                             for future rounds of conversion.\r\n\t */\r\n\tfunction setMiningGulpRange(Self storage _self, uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) public\r\n\t{\r\n\t\trequire(_miningMinGulpAmount <= _miningMaxGulpAmount, \"invalid range\");\r\n\t\t_self.miningMinGulpAmount = _miningMinGulpAmount;\r\n\t\t_self.miningMaxGulpAmount = _miningMaxGulpAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the range for converting growth profits. This\r\n\t *      method is exposed publicly.\r\n\t * @param _growthMinGulpAmount The minimum amount, funds will only be\r\n\t *                             converted once the minimum is accumulated.\r\n\t * @param _growthMaxGulpAmount The maximum amount, funds beyond this\r\n\t *                             limit will not be converted and are left\r\n\t *                             for future rounds of conversion.\r\n\t */\r\n\tfunction setGrowthGulpRange(Self storage _self, uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount) public\r\n\t{\r\n\t\trequire(_growthMinGulpAmount <= _growthMaxGulpAmount, \"invalid range\");\r\n\t\t_self.growthMinGulpAmount = _growthMinGulpAmount;\r\n\t\t_self.growthMaxGulpAmount = _growthMaxGulpAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets the collateralization ratio and margin. These values are\r\n\t *      percentual and relative to the maximum collateralization ratio\r\n\t *      provided by the underlying asset. This method is exposed publicly.\r\n\t * @param _collateralizationRatio The target collateralization ratio,\r\n\t *                                between lend and borrow, that the\r\n\t *                                reserve will try to maintain.\r\n\t * @param _collateralizationMargin The deviation from the target ratio\r\n\t *                                 that should be accepted.\r\n\t */\r\n\tfunction setCollateralizationRatio(Self storage _self, uint256 _collateralizationRatio, uint256 _collateralizationMargin) public\r\n\t{\r\n\t\trequire(_collateralizationMargin <= _collateralizationRatio && _collateralizationRatio.add(_collateralizationMargin) <= MAXIMUM_COLLATERALIZATION_RATIO, \"invalid ratio\");\r\n\t\t_self.collateralizationRatio = _collateralizationRatio;\r\n\t\t_self.collateralizationMargin = _collateralizationMargin;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs the reserve adjustment actions leaving a liquidity room,\r\n\t *      if necessary. It will attempt to incorporate the liquidity mining\r\n\t *      assets into the reserve, the profits from the underlying growth\r\n\t *      investment and adjust the collateralization targeting the\r\n\t *      configured ratio. This method is exposed publicly.\r\n\t * @param _roomAmount The underlying token amount to be available after the\r\n\t *                    operation. This is revelant for withdrawals, once the\r\n\t *                    room amount is withdrawn the reserve should reflect\r\n\t *                    the configured collateralization ratio.\r\n\t * @return _success A boolean indicating whether or not both actions suceeded.\r\n\t */\r\n\tfunction adjustReserve(Self storage _self, uint256 _roomAmount) public returns (bool _success)\r\n\t{\r\n\t\tbool _success1 = _self._gulpMiningAssets();\r\n\t\tbool _success2 = _self._gulpGrowthAssets();\r\n\t\tbool _success3 = _self._adjustReserve(_roomAmount);\r\n\t\treturn _success1 && _success2 && _success3;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates the collateralization ratio relative to the maximum\r\n\t *      collateralization ratio provided by the underlying asset.\r\n\t * @return _collateralizationRatio The target absolute collateralization ratio.\r\n\t */\r\n\tfunction _calcCollateralizationRatio(Self storage _self) internal view returns (uint256 _collateralizationRatio)\r\n\t{\r\n\t\treturn GC.getCollateralRatio(_self.reserveToken).mul(_self.collateralizationRatio).div(1e18);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Incorporates the liquidity mining assets into the reserve. Assets\r\n\t *      are converted to the underlying asset and then added to the reserve.\r\n\t *      If the amount available is below the minimum, or if the exchange\r\n\t *      contract is not set, nothing is done. Otherwise the operation is\r\n\t *      performed, limited to the maximum amount. Note that this operation\r\n\t *      will incorporate to the reserve all the underlying token balance\r\n\t *      including funds sent to it or left over somehow.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _gulpMiningAssets(Self storage _self) internal returns (bool _success)\r\n\t{\r\n\t\tif (_self.exchange == address(0)) return true;\r\n\t\tif (_self.miningMaxGulpAmount == 0) return true;\r\n\t\tuint256 _miningAmount = G.getBalance(_self.miningToken);\r\n\t\tif (_miningAmount == 0) return true;\r\n\t\tif (_miningAmount < _self.miningMinGulpAmount) return true;\r\n\t\t_self._convertMiningToUnderlying(G.min(_miningAmount, _self.miningMaxGulpAmount));\r\n\t\treturn GC.lend(_self.reserveToken, G.getBalance(_self.underlyingToken));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Incorporates the profits from growth into the reserve. Assets\r\n\t *      are converted to the underlying asset and then added to the reserve.\r\n\t *      If the amount available is below the minimum, or if the exchange\r\n\t *      contract is not set, nothing is done. Otherwise the operation is\r\n\t *      performed, limited to the maximum amount. Note that this operation\r\n\t *      will incorporate to the reserve all the growth reserve token balance\r\n\t *      including funds sent to it or left over somehow.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _gulpGrowthAssets(Self storage _self) internal returns (bool _success)\r\n\t{\r\n\t\tif (_self.exchange == address(0)) return true;\r\n\t\tif (_self.growthMaxGulpAmount == 0) return true;\r\n\t\t// calculates how much was borrowed\r\n\t\tuint256 _borrowAmount = GC.fetchBorrowAmount(_self.borrowToken);\r\n\t\t// calculates how much can be redeemed from the growth token\r\n\t\tuint256 _totalShares = G.getBalance(_self.growthToken);\r\n\t\tuint256 _redeemableAmount = _self._calcWithdrawalCostFromShares(_totalShares);\r\n\t\t// if there is a profit and that amount is within range\r\n\t\t// it gets converted to the underlying reserve token and\r\n\t\t// incorporated to the reserve\r\n\t\tif (_redeemableAmount <= _borrowAmount) return true;\r\n\t\tuint256 _growthAmount = _redeemableAmount.sub(_borrowAmount);\r\n\t\tif (_growthAmount < _self.growthMinGulpAmount) return true;\r\n\t\tuint256 _grossShares = _self._calcWithdrawalSharesFromCost(G.min(_growthAmount, _self.growthMaxGulpAmount));\r\n\t\t_grossShares = G.min(_grossShares, _totalShares);\r\n\t\tif (_grossShares == 0) return true;\r\n\t\t_success = _self._withdraw(_grossShares);\r\n\t\tif (!_success) return false;\r\n\t\t_self._convertGrowthReserveToUnderlying(G.getBalance(_self.growthReserveToken));\r\n\t\treturn GC.lend(_self.reserveToken, G.getBalance(_self.underlyingToken));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adjusts the reserve to match the configured collateralization\r\n\t *      ratio. It uses the reserve collateral to borrow a proper amount\r\n\t *      of the growth token reserve asset and deposit it. Or it\r\n\t *      redeems from the growth token and repays the loan.\r\n\t * @param _roomAmount The amount of underlying token to be liquid after\r\n\t *                    the operation.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _adjustReserve(Self storage _self, uint256 _roomAmount) internal returns (bool _success)\r\n\t{\r\n\t\t// calculates the percental change from the current reserve\r\n\t\t// and the reserve deducting the room amount\r\n\t\tuint256 _scalingRatio;\r\n\t\t{\r\n\t\t\tuint256 _reserveAmount = GC.fetchLendAmount(_self.reserveToken);\r\n\t\t\t_roomAmount = G.min(_roomAmount, _reserveAmount);\r\n\t\t\tuint256 _newReserveAmount = _reserveAmount.sub(_roomAmount);\r\n\t\t\t_scalingRatio = _reserveAmount > 0 ? uint256(1e18).mul(_newReserveAmount).div(_reserveAmount) : 0;\r\n\t\t}\r\n\t\t// calculates the borrowed amount and range in terms of the reserve token\r\n\t\tuint256 _borrowAmount = GC.fetchBorrowAmount(_self.borrowToken);\r\n\t\tuint256 _newBorrowAmount;\r\n\t\tuint256 _minBorrowAmount;\r\n\t\tuint256 _maxBorrowAmount;\r\n\t\t{\r\n\t\t\tuint256 _freeAmount = GC.getLiquidityAmount(_self.borrowToken);\r\n\t\t\tuint256 _totalAmount = _borrowAmount.add(_freeAmount);\r\n\t\t\t// applies the scaling ratio to account for the required room\r\n\t\t\tuint256 _newTotalAmount = _totalAmount.mul(_scalingRatio).div(1e18);\r\n\t\t\t_newBorrowAmount = _newTotalAmount.mul(_self.collateralizationRatio).div(1e18);\r\n\t\t\tuint256 _newMarginAmount = _newTotalAmount.mul(_self.collateralizationMargin).div(1e18);\r\n\t\t\t_minBorrowAmount = _newBorrowAmount.sub(G.min(_newMarginAmount, _newBorrowAmount));\r\n\t\t\t_maxBorrowAmount = G.min(_newBorrowAmount.add(_newMarginAmount), _newTotalAmount);\r\n\t\t}\r\n\t\t// if the borrow amount is below the lower bound,\r\n\t\t// borrows the diference and deposits in the growth token contract\r\n\t\tif (_borrowAmount < _minBorrowAmount) {\r\n\t\t\tuint256 _amount = _newBorrowAmount.sub(_borrowAmount);\r\n\t\t\t_amount = G.min(_amount, GC.getMarketAmount(_self.borrowToken));\r\n\t\t\t_success = GC.borrow(_self.borrowToken, _amount);\r\n\t\t\tif (!_success) return false;\r\n\t\t\t_success = _self._deposit(_amount);\r\n\t\t\tif (_success) return true;\r\n\t\t\tGC.repay(_self.borrowToken, _amount);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// if the borrow amount is above the upper bound,\r\n\t\t// redeems the diference from the growth token contract and\r\n\t\t// repays the loan\r\n\t\tif (_borrowAmount > _maxBorrowAmount) {\r\n\t\t\tuint256 _amount = _borrowAmount.sub(_newBorrowAmount);\r\n\t\t\tuint256 _grossShares = _self._calcWithdrawalSharesFromCost(_amount);\r\n\t\t\t_grossShares = G.min(_grossShares, G.getBalance(_self.growthToken));\r\n\t\t\tif (_grossShares == 0) return true;\r\n\t\t\t_success = _self._withdraw(_grossShares);\r\n\t\t\tif (!_success) return false;\r\n\t\t\tuint256 _repayAmount = G.min(_borrowAmount, G.getBalance(_self.growthReserveToken));\r\n\t\t\treturn GC.repay(_self.borrowToken, _repayAmount);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates how much of the growth reserve token can be redeemed\r\n\t *      from a given amount of shares.\r\n\t * @param _grossShares The number of shares to redeem.\r\n\t * @return _cost The reserve token amount to be withdraw.\r\n\t */\r\n\tfunction _calcWithdrawalCostFromShares(Self storage _self, uint256 _grossShares) internal view returns (uint256 _cost) {\r\n\t\tuint256 _totalReserve = GToken(_self.growthToken).totalReserve();\r\n\t\tuint256 _totalSupply = GToken(_self.growthToken).totalSupply();\r\n\t\tuint256 _withdrawalFee = GToken(_self.growthToken).withdrawalFee();\r\n\t\t(_cost,) = GToken(_self.growthToken).calcWithdrawalCostFromShares(_grossShares, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t\treturn _cost;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates how many shares must be redeemed in order to withdraw\r\n\t *      so much of the growth reserve token.\r\n\t * @param _cost The amount of the reserve token to be received on\r\n\t *               withdrawal.\r\n\t * @return _grossShares The number of shares one must redeem.\r\n\t */\r\n\tfunction _calcWithdrawalSharesFromCost(Self storage _self, uint256 _cost) internal view returns (uint256 _grossShares) {\r\n\t\tuint256 _totalReserve = GToken(_self.growthToken).totalReserve();\r\n\t\tuint256 _totalSupply = GToken(_self.growthToken).totalSupply();\r\n\t\tuint256 _withdrawalFee = GToken(_self.growthToken).withdrawalFee();\r\n\t\t(_grossShares,) = GToken(_self.growthToken).calcWithdrawalSharesFromCost(_cost, _totalReserve, _totalSupply, _withdrawalFee);\r\n\t\treturn _grossShares;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deposits into the growth token contract.\r\n\t * @param _cost The amount of thr growth reserve token to be deposited.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _deposit(Self storage _self, uint256 _cost) internal returns (bool _success)\r\n\t{\r\n\t\tG.approveFunds(_self.growthReserveToken, _self.growthToken, _cost);\r\n\t\ttry GToken(_self.growthToken).deposit(_cost) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\tG.approveFunds(_self.growthReserveToken, _self.growthToken, 0);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Withdraws from the growth token contract.\r\n\t * @param _grossShares The number of shares to be redeemed.\r\n\t * @return _success A boolean indicating whether or not the action succeeded.\r\n\t */\r\n\tfunction _withdraw(Self storage _self, uint256 _grossShares) internal returns (bool _success)\r\n\t{\r\n\t\ttry GToken(_self.growthToken).withdraw(_grossShares) {\r\n\t\t\treturn true;\r\n\t\t} catch (bytes memory /* _data */) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a given amount of the mining token to the underlying\r\n\t *      token using the external exchange contract. Both amounts are\r\n\t *      deducted and credited, respectively, from the current contract.\r\n\t * @param _inputAmount The amount to be converted.\r\n\t */\r\n\tfunction _convertMiningToUnderlying(Self storage _self, uint256 _inputAmount) internal\r\n\t{\r\n\t\tG.dynamicConvertFunds(_self.exchange, _self.miningToken, _self.underlyingToken, _inputAmount, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a given amount of the growth reserve token to the\r\n\t *      underlying token using the external exchange contract. Both\r\n\t *      amounts are deducted and credited, respectively, from the\r\n\t *      current contract.\r\n\t * @param _inputAmount The amount to be converted.\r\n\t */\r\n\tfunction _convertGrowthReserveToUnderlying(Self storage _self, uint256 _inputAmount) internal\r\n\t{\r\n\t\tG.dynamicConvertFunds(_self.exchange, _self.growthReserveToken, _self.underlyingToken, _inputAmount, 0);\r\n\t}\r\n}\r\n\r\n// File: contracts/GCTokenType2.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements the functionality for the gcToken Type 2.\r\n *         As with all gcTokens, gcTokens Type 2 use a Compound cToken as\r\n *         reserve token. Furthermore, Type 2 tokens will use that cToken\r\n *         balance to borrow funds that are then deposited into another gToken.\r\n *         Periodically the gcToken Type 2 will collect profits from liquidity\r\n *         mining COMP, as well as profits from investing borrowed assets in\r\n *         the gToken. These profits are converted into the cToken underlying \r\n *         asset and incorporated to the reserve. See GCTokenBase and\r\n *         GCDelegatedReserveManager for further documentation.\r\n */\r\ncontract GCTokenType2 is GCTokenBase\r\n{\r\n\tusing GCDelegatedReserveManager for GCDelegatedReserveManager.Self;\r\n\r\n\tGCDelegatedReserveManager.Self drm;\r\n\r\n\t/**\r\n\t * @dev Constructor for the gcToken Type 2 contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _stakesToken The ERC-20 token address to be used as stakes\r\n\t *                     token (GRO).\r\n\t * @param _reserveToken The ERC-20 token address to be used as reserve\r\n\t *                      token (e.g. cDAI for gcDAI).\r\n\t * @param _miningToken The ERC-20 token used for liquidity mining on\r\n\t *                     compound (COMP).\r\n\t * @param _borrowToken The cToken used for borrowing funds on compound (cDAI).\r\n\t * @param _growthToken The gToken used for reinvesting borrowed funds (gDAI).\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _stakesToken, address _reserveToken, address _miningToken, address _borrowToken, address _growthToken)\r\n\t\tGCTokenBase(_name, _symbol, _decimals, _stakesToken, _reserveToken, _miningToken, _growthToken) public\r\n\t{\r\n\t\tdrm.init(_reserveToken, _miningToken, _borrowToken, _growthToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the total amount of the underlying asset (or equivalent)\r\n\t *         this contract is currently borrowing on Compound.\r\n\t * @return _borrowingReserveUnderlying The underlying asset borrowing\r\n\t *                                     balance on Compound.\r\n\t */\r\n\tfunction borrowingReserveUnderlying() public view override returns (uint256 _borrowingReserveUnderlying)\r\n\t{\r\n\t\tuint256 _lendAmount = GC.getLendAmount(reserveToken);\r\n\t\tuint256 _availableAmount = _lendAmount.mul(GC.getCollateralRatio(reserveToken)).div(1e18);\r\n\t\tuint256 _borrowAmount = GC.getBorrowAmount(drm.borrowToken);\r\n\t\tuint256 _freeAmount = GC.getLiquidityAmount(drm.borrowToken);\r\n\t\tuint256 _totalAmount = _borrowAmount.add(_freeAmount);\r\n\t\treturn _totalAmount > 0 ? _availableAmount.mul(_borrowAmount).div(_totalAmount) : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the contract address for the GExchange implementation\r\n\t *         currently being used to convert the mining token (COMP), and\r\n\t *         the gToken reserve token (DAI), into the underlying asset.\r\n\t * @return _exchange A GExchange compatible contract address, or address(0)\r\n\t *                   if it has not been set.\r\n\t */\r\n\tfunction exchange() public view override returns (address _exchange)\r\n\t{\r\n\t\treturn drm.exchange;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the minimum and maximum amount of the mining token to\r\n\t *         be processed on every operation. If the contract balance\r\n\t *         is below the minimum it waits until more accumulates.\r\n\t *         If the total amount is beyond the maximum it processes the\r\n\t *         maximum and leaves the rest for future operations. The mining\r\n\t *         token accumulated via liquidity mining is converted to the\r\n\t *         underlying asset and used to mint the associated cToken.\r\n\t *         This range is used to avoid wasting gas converting small\r\n\t *         amounts as well as mitigating slipage converting large amounts.\r\n\t * @return _miningMinGulpAmount The minimum amount of the mining token\r\n\t *                              to be processed per deposit/withdrawal.\r\n\t * @return _miningMaxGulpAmount The maximum amount of the mining token\r\n\t *                              to be processed per deposit/withdrawal.\r\n\t */\r\n\tfunction miningGulpRange() public view override returns (uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount)\r\n\t{\r\n\t\treturn (drm.miningMinGulpAmount, drm.miningMaxGulpAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the minimum and maximum amount of the gToken reserve\r\n\t *         profit to be processed on every operation. If the profit balance\r\n\t *         is below the minimum it waits until more accumulates.\r\n\t *         If the total profit is beyond the maximum it processes the\r\n\t *         maximum and leaves the rest for future operations. The profit\r\n\t *         accumulated via gToken reinvestment is converted to the\r\n\t *         underlying asset and used to mint the associated cToken.\r\n\t *         This range is used to avoid wasting gas converting small\r\n\t *         amounts as well as mitigating slipage converting large amounts.\r\n\t * @return _growthMinGulpAmount The minimum profit of the gToken reserve\r\n\t *                              to be processed per deposit/withdrawal.\r\n\t * @return _growthMaxGulpAmount The maximum profit of the gToken reserve\r\n\t *                              to be processed per deposit/withdrawal.\r\n\t */\r\n\tfunction growthGulpRange() public view override returns (uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount)\r\n\t{\r\n\t\treturn (drm.growthMinGulpAmount, drm.growthMaxGulpAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the target collateralization ratio and margin to be\r\n\t *         maintained by this contract. The amount is relative to the\r\n\t *         maximum collateralization available for the associated cToken\r\n\t *         on Compound. gcToken Type 2 uses the reserve token as collateral\r\n\t *         to borrow funds and revinvest into the gToken.\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                (defaults to 66%)\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                margin (defaults to 8%)\r\n\t */\r\n\tfunction collateralizationRatio() public view override returns (uint256 _collateralizationRatio, uint256 _collateralizationMargin)\r\n\t{\r\n\t\treturn (drm.collateralizationRatio, drm.collateralizationMargin);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the contract address for the GExchange implementation\r\n\t *         to be used in converting the mining token (COMP), and\r\n\t *         the gToken reserve token (DAI), into the underlying asset.\r\n\t *         This is a priviledged function restricted to the contract owner.\r\n\t * @param _exchange A GExchange compatible contract address.\r\n\t */\r\n\tfunction setExchange(address _exchange) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tdrm.setExchange(_exchange);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the minimum and maximum amount of the mining token to\r\n\t *         be processed on every operation. See miningGulpRange().\r\n\t *         This is a priviledged function restricted to the contract owner.\r\n\t * @param _miningMinGulpAmount The minimum amount of the mining token\r\n\t *                             to be processed per deposit/withdrawal.\r\n\t * @param _miningMaxGulpAmount The maximum amount of the mining token\r\n\t *                             to be processed per deposit/withdrawal.\r\n\t */\r\n\tfunction setMiningGulpRange(uint256 _miningMinGulpAmount, uint256 _miningMaxGulpAmount) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tdrm.setMiningGulpRange(_miningMinGulpAmount, _miningMaxGulpAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the minimum and maximum amount of the gToken reserve profit\r\n\t *         to be processed on every operation. See growthGulpRange().\r\n\t *         This is a priviledged function restricted to the contract owner.\r\n\t * @param _growthMinGulpAmount The minimum profit of the gToken reserve\r\n\t *                             to be processed per deposit/withdrawal.\r\n\t * @param _growthMaxGulpAmount The maximum profit of the gToken reserve\r\n\t *                             to be processed per deposit/withdrawal.\r\n\t */\r\n\tfunction setGrowthGulpRange(uint256 _growthMinGulpAmount, uint256 _growthMaxGulpAmount) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tdrm.setGrowthGulpRange(_growthMinGulpAmount, _growthMaxGulpAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the target collateralization ratio and margin to be\r\n\t *         maintained by this contract. See collateralizationRatio().\r\n\t *         Setting both parameters to 0 turns off collateralization.\r\n\t *         This is a priviledged function restricted to the contract owner.\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                (defaults to 66%)\r\n\t * @param _collateralizationRatio The percent value relative to the\r\n\t *                                maximum allowed that this contract\r\n\t *                                will target for collateralization\r\n\t *                                margin (defaults to 8%)\r\n\t */\r\n\tfunction setCollateralizationRatio(uint256 _collateralizationRatio, uint256 _collateralizationMargin) public override onlyOwner nonReentrant\r\n\t{\r\n\t\tdrm.setCollateralizationRatio(_collateralizationRatio, _collateralizationMargin);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This method is overriden from GTokenBase and sets up the reserve\r\n\t *      after a deposit comes along. It basically adjusts the\r\n\t *      collateralization to reflect the new increased reserve\r\n\t *      balance. This method uses the GCDelegatedReserveManager to\r\n\t *      adjust the reserve. See GCDelegatedReserveManager.sol.\r\n\t * @param _cost The amount of reserve being deposited (ignored).\r\n\t * @return _success A boolean indicating whether or not the operation\r\n\t *                  succeeded.\r\n\t */\r\n\tfunction _prepareDeposit(uint256 _cost) internal override returns (bool _success)\r\n\t{\r\n\t\t_cost; // silences warnings\r\n\t\treturn drm.adjustReserve(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This method is overriden from GTokenBase and sets up the reserve\r\n\t *      before a withdrawal comes along. It basically calculates the\r\n\t *      the amount that will be left in the reserve, in terms of cToken\r\n\t *      cost, and adjusts the collateralization accordingly. This\r\n\t *      method uses the GCDelegatedReserveManager to adjust the reserve.\r\n\t *      See GCDelegatedReserveManager.sol.\r\n\t * @param _cost The amount of reserve being withdrawn and that needs to\r\n\t *              be immediately liquid.\r\n\t * @return _success A boolean indicating whether or not the operation succeeded.\r\n\t *                  The operation may fail if it is not possible to recover\r\n\t *                  the required liquidity (e.g. low liquidity in the markets).\r\n\t */\r\n\tfunction _prepareWithdrawal(uint256 _cost) internal override returns (bool _success)\r\n\t{\r\n\t\treturn drm.adjustReserve(GCFormulae._calcUnderlyingCostFromCost(_cost, GC.fetchExchangeRate(reserveToken)));\r\n\t}\r\n}\r\n\r\n// File: contracts/GEtherBridge.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This contract serves as a useful bridge between ETH and the WETH\r\n *      ERC-20 based gTokens. It accepts deposits/withdrawals in ETH performing\r\n *      the wrapping/unwrapping behind the scenes.\r\n */\r\ncontract GEtherBridge\r\n{\r\n\t/**\r\n\t * @notice Accepts a deposit to the gToken using ETH. The gToken must\r\n\t *         have WETH as its reserveToken. This is a payable method and\r\n\t *         expects ETH to be sent; which in turn will be converted into\r\n\t *         shares. See GToken.sol and GTokenBase.sol for further\r\n\t *         documentation.\r\n\t * @param _growthToken The WETH based gToken.\r\n\t */\r\n\tfunction deposit(address _growthToken) public payable\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _cost = msg.value;\r\n\t\taddress _reserveToken = GToken(_growthToken).reserveToken();\r\n\t\trequire(_reserveToken == $.WETH, \"ETH operation not supported by token\");\r\n\t\tG.safeWrap(_cost);\r\n\t\tG.approveFunds(_reserveToken, _growthToken, _cost);\r\n\t\tGToken(_growthToken).deposit(_cost);\r\n\t\tuint256 _netShares = G.getBalance(_growthToken);\r\n\t\tG.pushFunds(_growthToken, _from, _netShares);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Accepts a withdrawal to the gToken using ETH. The gToken must\r\n\t *         have WETH as its reserveToken. This method will redeem the\r\n\t *         sender's required balance in shares; which in turn will receive\r\n\t *         ETH. See GToken.sol and GTokenBase.sol for further documentation.\r\n\t * @param _growthToken The WETH based gToken.\r\n\t * @param _grossShares The number of shares to be redeemed.\r\n\t */\r\n\tfunction withdraw(address _growthToken, uint256 _grossShares) public\r\n\t{\r\n\t\taddress payable _from = msg.sender;\r\n\t\taddress _reserveToken = GToken(_growthToken).reserveToken();\r\n\t\trequire(_reserveToken == $.WETH, \"ETH operation not supported by token\");\r\n\t\tG.pullFunds(_growthToken, _from, _grossShares);\r\n\t\tGToken(_growthToken).withdraw(_grossShares);\r\n\t\tuint256 _cost = G.getBalance(_reserveToken);\r\n\t\tG.safeUnwrap(_cost);\r\n\t\t_from.transfer(_cost);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Accepts a deposit to the gcToken using ETH. The gcToken must\r\n\t *         have WETH as its underlyingToken. This is a payable method and\r\n\t *         expects ETH to be sent; which in turn will be converted into\r\n\t *         shares. See GCToken.sol and GCTokenBase.sol for further\r\n\t *         documentation.\r\n\t * @param _growthToken The WETH based gcToken (e.g. gcETH).\r\n\t */\r\n\tfunction depositUnderlying(address _growthToken) public payable\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _underlyingCost = msg.value;\r\n\t\taddress _underlyingToken = GCToken(_growthToken).underlyingToken();\r\n\t\trequire(_underlyingToken == $.WETH, \"ETH operation not supported by token\");\r\n\t\tG.safeWrap(_underlyingCost);\r\n\t\tG.approveFunds(_underlyingToken, _growthToken, _underlyingCost);\r\n\t\tGCToken(_growthToken).depositUnderlying(_underlyingCost);\r\n\t\tuint256 _netShares = G.getBalance(_growthToken);\r\n\t\tG.pushFunds(_growthToken, _from, _netShares);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Accepts a withdrawal to the gcToken using ETH. The gcToken must\r\n\t *         have WETH as its underlyingToken. This method will redeem the\r\n\t *         sender's required balance in shares; which in turn will receive\r\n\t *         ETH. See GCToken.sol and GCTokenBase.sol for further documentation.\r\n\t * @param _growthToken The WETH based gcToken (e.g. gcETH).\r\n\t * @param _grossShares The number of shares to be redeemed.\r\n\t */\r\n\tfunction withdrawUnderlying(address _growthToken, uint256 _grossShares) public\r\n\t{\r\n\t\taddress payable _from = msg.sender;\r\n\t\taddress _underlyingToken = GCToken(_growthToken).underlyingToken();\r\n\t\trequire(_underlyingToken == $.WETH, \"ETH operation not supported by token\");\r\n\t\tG.pullFunds(_growthToken, _from, _grossShares);\r\n\t\tGCToken(_growthToken).withdrawUnderlying(_grossShares);\r\n\t\tuint256 _underlyingCost = G.getBalance(_underlyingToken);\r\n\t\tG.safeUnwrap(_underlyingCost);\r\n\t\t_from.transfer(_underlyingCost);\r\n\t}\r\n\r\n\treceive() external payable {} // not to be used directly\r\n}\r\n\r\n// File: contracts/GTokens.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Definition of gDAI. As a gToken Type 0, it uses DAI as reserve and\r\n * distributes to other gToken types.\r\n */\r\ncontract gDAI is GTokenType0\r\n{\r\n\tconstructor ()\r\n\t\tGTokenType0(\"growth DAI\", \"gDAI\", 18, $.GRO, $.DAI) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of gUSDC. As a gToken Type 0, it uses USDC as reserve and\r\n * distributes to other gToken types.\r\n */\r\ncontract gUSDC is GTokenType0\r\n{\r\n\tconstructor ()\r\n\t\tGTokenType0(\"growth USDC\", \"gUSDC\", 6, $.GRO, $.USDC) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of gETH. As a gToken Type 0, it uses WETH as reserve and\r\n * distributes to other gToken types.\r\n */\r\ncontract gETH is GTokenType0\r\n{\r\n\tconstructor ()\r\n\t\tGTokenType0(\"growth ETH\", \"gETH\", 18, $.GRO, $.WETH) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of gWBTC. As a gToken Type 0, it uses WBTC as reserve and\r\n * distributes to other gToken types.\r\n */\r\ncontract gWBTC is GTokenType0\r\n{\r\n\tconstructor ()\r\n\t\tGTokenType0(\"growth WBTC\", \"gWBTC\", 8, $.GRO, $.WBTC) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of gcDAI. As a gcToken Type 1, it uses cDAI as reserve\r\n * and employs leverage to maximize returns.\r\n */\r\ncontract gcDAI is GCTokenType1\r\n{\r\n\tconstructor ()\r\n\t\tGCTokenType1(\"growth cDAI v2\", \"gcDAI\", 8, $.GRO, $.cDAI, $.COMP) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of gcUSDC. As a gcToken Type 1, it uses cUSDC as reserve\r\n * and employs leverage to maximize returns.\r\n */\r\ncontract gcUSDC is GCTokenType1\r\n{\r\n\tconstructor ()\r\n\t\tGCTokenType1(\"growth cUSDC v2\", \"gcUSDC\", 8, $.GRO, $.cUSDC, $.COMP) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of gcETH. As a gcToken Type 2, it uses cETH as reserve\r\n * which serves as collateral for minting gDAI.\r\n */\r\ncontract gcETH is GCTokenType2\r\n{\r\n\tconstructor (address _growthToken)\r\n\t\tGCTokenType2(\"growth cETH\", \"gcETH\", 8, $.GRO, $.cETH, $.COMP, $.cDAI, _growthToken) public\r\n\t{\r\n\t}\r\n\r\n\treceive() external payable {} // not to be used directly\r\n}\r\n\r\n/**\r\n * @notice Definition of gcWBTC. As a gcToken Type 2, it uses cWBTC as reserve\r\n * which serves as collateral for minting gDAI.\r\n */\r\ncontract gcWBTC is GCTokenType2\r\n{\r\n\tconstructor (address _growthToken)\r\n\t\tGCTokenType2(\"growth cWBTC\", \"gcWBTC\", 8, $.GRO, $.cWBTC, $.COMP, $.cDAI, _growthToken) public\r\n\t{\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_growthToken\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_growthToken\",\"type\":\"address\"}],\"name\":\"depositUnderlying\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_growthToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_grossShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_growthToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_grossShares\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GEtherBridge", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "G:a7d74e1380dff89a31b39ece005b17b92e03f58c", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://753abd674e82edcdcf161349624d26968e414e965e037c72f631246b8455b81f"}