{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n// File: LAKE_Vesting_Private.sol\r\n\r\n\r\npragma solidity = 0.8.21;\r\n\r\n\r\ninterface Token {\r\n    function balanceOf(address) external view returns(uint);\r\n}\r\n\r\n/* \r\nLOCKING WITH REWARDS CONTRACT\r\n    - Allows to deposit [DEPOSIT_TOKEN_ADDRESS]\r\n    - Allows to claim and withdraw [TOKEN_ADDRESS]\r\n    - Each user goes through 3 phases:\r\n        - Everything locked \r\n        - Claiming Mode: Divided in [TOTAL_WITHDRAWS] periods\r\n        - Unlocking Mode: Divided in [TOTAL_WITHDRAWS] periods\r\n    - Each phase has a duration of [FULL_LOCKUP_PERIOD]\r\n    - Claiming is only available once per period during the Claiming Mode, and has a max amount to be claimed equal to [MAX_MONTHLY_REWARDS]\r\n    - Unlocking is only available once per period during the Unlocking Mode, and will also claim the claimable rewards (up to [MAX_MONTHLY_REWARDS])\r\n    - The last unlock will unlock and claim all the non-unlocked and non-claimed tokens without limit\r\n    - To claim for the first time, user has to wait for [FULL_LOCKUP_PERIOD] + [TIME_1_MONTH_ADJUSTED]\r\n    - To unlock for the first time, user has to wait for [FULL_LOCKUP_PERIOD] * 2 + [TIME_1_MONTH_ADJUSTED]\r\n    - The total claimed amount must be 100% of the deposited amount. Meaning the total amount received at the end by an user must be 200% of the deposited amount \r\n    - Naming of rewards:\r\n        - Claimable rewards: Amount of rewards that can be redeemed\r\n        - Pending rewards: Amount of generated rewards less the already claimed rewards\r\n        - Generated rewards: Amount of generated rewards since tokens were deposited by the user\r\n    - Times considerations for phases & periods:\r\n        - 1 month = 30 days\r\n        - 1 year = 12 months of 30 days\r\n*/\r\n\r\ncontract LakeVestingPrivate {\r\n    address public immutable TOKEN_ADDRESS;  // ERC20 withdraw token contract address\r\n    address public immutable DEPOSIT_TOKEN_ADDRESS;  // ERC20 deposit token contract address\r\n    address public constant BURN_ADDRESS =\r\n        0x000000000000000000000000000000000000dEaD;  // Burn address\r\n\r\n    uint256 public constant FULL_LOCKUP_PERIOD = 360 days;     // Time for each phase = 360 days\r\n    uint256 public constant TIME_1_MONTH_ADJUSTED = 30 days;   // Time for each period = 30 days\r\n    uint256 public constant TOTAL_WITHDRAWS = 12;              // Num periods = Max number of withdraws/claims = 12\r\n    uint8 public constant TOKEN_RATIO = 2;                     // Amount of tokens to be claimed + withdrawn has to be 2 times the amount deposited\r\n    uint256 public totalDeposited;                             // Total amount deposited\r\n    uint256 public totalPendingToGet;                          // Total amount deposited * 2 - Total amount withdrawn or claimed (Total amount pending to be gotten by users from the contract)\r\n    \r\n\r\n    uint256 public constant REWARD_RATE = 6666; // 66.66% APY\r\n    uint256 public constant REWARD_INTERVAL = 365 days;\r\n\r\n    uint256 public constant MAX_MONTHLY_REWARDS = 1e5 ether;\r\n\r\n    mapping(address => uint64) public lockingTime;      // Depositing time by an address\r\n    mapping(address => uint256) public depositedAmount; // Total deposited ERC-20 tokens by an address\r\n    mapping(address => uint256) public remainingAmount; // Remaining locked ERC-20 tokens by an address [deposited - withdrawn]\r\n    mapping(address => uint256) public withdrawnAmount; // Total unlocked ERC-20 tokens by an address\r\n    mapping(address => uint256) public claimedAmount;   // Total claimed ERC-20 tokens (as rewards) by an address [ MAX(claimedAmount) = depositedAmount ]\r\n\r\n    // bool[23] --> last month not needed\r\n    mapping(address => bool[TOTAL_WITHDRAWS * 2 - 1]) private monthlyClaim; // Indicate if the user already claimed during the current period\r\n\r\n    event Locked(address indexed, uint256 indexed amount);\r\n    event Unlocked(address indexed, uint256 indexed amount);\r\n    event Claimed(address indexed, uint256 indexed amount);\r\n\r\n    constructor(address _lockToken, address _unlockToken) {\r\n        require(_lockToken != address(0) && _unlockToken != address(0), \"Null address\");\r\n        DEPOSIT_TOKEN_ADDRESS = _lockToken;\r\n        TOKEN_ADDRESS = _unlockToken;\r\n    }\r\n    /*\r\n    Allows to deposit tokens [DEPOSIT_TOKEN_ADDRESS]\r\n    @param amount: Amount to deposit.\r\n    */\r\n    function lock(uint256 amount) external {\r\n        require(depositedAmount[msg.sender] == 0, \"Already locked tokens\");\r\n        require(amount > 0, \"Cannot deposit 0 tokens\");\r\n        /* Check the contract holds enough tokens to withdraw by doing a externall call \"balanceOf()\", \r\n        which is a view function from a trusted contract (LAK3 token contract), avoiding \"checks-effects-interactions\" pattern violation risks */\r\n        require(Token(TOKEN_ADDRESS).balanceOf(address(this)) >= (TOKEN_RATIO * amount) + totalPendingToGet , \"Contract does not hold enough tokens\");\r\n\r\n        depositedAmount[msg.sender] = amount;\r\n        remainingAmount[msg.sender] = amount;\r\n        lockingTime[msg.sender] = uint64(block.timestamp);\r\n        totalDeposited += amount;\r\n        totalPendingToGet += TOKEN_RATIO * amount;\r\n\r\n        SafeERC20.safeTransferFrom(IERC20(DEPOSIT_TOKEN_ADDRESS), msg.sender, BURN_ADDRESS, amount);\r\n\r\n        emit Locked(msg.sender, amount);\r\n    }\r\n\r\n    /*\r\n    Allows to withdraw all unlockable tokens [TOKEN_ADDRESS], as well as claim all claimable rewards [TOKEN_ADDRESS]\r\n    */\r\n    function unLock() external {\r\n        uint256 _amount = getUnlockableAmount(msg.sender);\r\n        require(_amount > 0, \"Nothing to unlock\");\r\n\r\n        uint256 _rewards = getClaimableRewards(msg.sender);\r\n        \r\n\r\n        if (\r\n            block.timestamp - lockingTime[msg.sender] < FULL_LOCKUP_PERIOD * 3\r\n        ) {\r\n            uint256 currentPeriodIndex = (block.timestamp -\r\n                lockingTime[msg.sender] -\r\n                FULL_LOCKUP_PERIOD) / TIME_1_MONTH_ADJUSTED;\r\n            monthlyClaim[msg.sender][currentPeriodIndex - 1] = true;\r\n        }\r\n\r\n        /* underflow/overflow cannot happen:\r\n            - Max of _rewards = Max of _amount = remainingAmount\r\n            - Max of withdrawnAmount = Max of claimedAmount = depositedAmount\r\n            - Max of (_amount + _rewards) = totalPendingToGet\r\n        */\r\n        unchecked { \r\n            claimedAmount[msg.sender] += _rewards;\r\n            remainingAmount[msg.sender] -= _amount;\r\n            withdrawnAmount[msg.sender] += _amount;\r\n            totalPendingToGet -= (_amount + _rewards);\r\n        }\r\n        _amount += _rewards;\r\n        \r\n        SafeERC20.safeTransfer(IERC20(TOKEN_ADDRESS), msg.sender, _amount);\r\n\r\n        emit Unlocked(msg.sender, _amount);\r\n    }\r\n\r\n    /*\r\n    Allows to claim all claimable rewards [TOKEN_ADDRESS]\r\n    */\r\n    function claim() external {\r\n        require(isInClaimingMode(msg.sender), \"Not claiming period\");\r\n\r\n        uint256 _toSend = getClaimableRewards(msg.sender);\r\n\r\n        require(_toSend > 0, \"Nothing to claim\");\r\n\r\n        uint256 currentPeriodIndex = (block.timestamp -\r\n            lockingTime[msg.sender] -\r\n            FULL_LOCKUP_PERIOD) / TIME_1_MONTH_ADJUSTED;\r\n            \r\n        monthlyClaim[msg.sender][currentPeriodIndex - 1] = true;\r\n\r\n        /* underflow/overflow cannot happen:\r\n            - Max of _toSend = deposited\r\n            - Max of _toSend = totalPendingToGet\r\n        */\r\n        unchecked {\r\n            claimedAmount[msg.sender] += _toSend;\r\n            totalPendingToGet -= _toSend;\r\n        }\r\n        \r\n        SafeERC20.safeTransfer(IERC20(TOKEN_ADDRESS), msg.sender, _toSend);\r\n\r\n        emit Claimed(msg.sender, _toSend);\r\n    }\r\n\r\n    /*\r\n    Get the amount of claimable rewards [TOKEN_ADDRESS]\r\n    @param _wallet: Address to check\r\n    */\r\n    function getClaimableRewards(address _wallet)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            block.timestamp - lockingTime[_wallet] <\r\n            FULL_LOCKUP_PERIOD + TIME_1_MONTH_ADJUSTED\r\n        ) return 0;\r\n\r\n        uint256 claimableAmount = getPendingRewards(_wallet);\r\n\r\n        // Check the monthly limit\r\n        if (block.timestamp - lockingTime[_wallet] < FULL_LOCKUP_PERIOD * 3) {\r\n            uint256 currentPeriodIndex = (block.timestamp -\r\n                lockingTime[_wallet] -\r\n                FULL_LOCKUP_PERIOD) / TIME_1_MONTH_ADJUSTED;\r\n            if (monthlyClaim[_wallet][currentPeriodIndex - 1]) return 0;\r\n            if (claimableAmount > MAX_MONTHLY_REWARDS)\r\n                claimableAmount = MAX_MONTHLY_REWARDS;\r\n        }\r\n        return claimableAmount;\r\n    }\r\n\r\n    /*\r\n    Get the amount of pending rewards [TOKEN_ADDRESS]\r\n    @param _wallet: Address to check\r\n    */\r\n    function getPendingRewards(address _wallet) public view returns (uint256) {\r\n        if (remainingAmount[_wallet] == 0) return 0;\r\n\r\n        uint256 pendingRewards = getGeneratedRewards(_wallet);\r\n        \r\n        /* underflow/overflow cannot happen:\r\n            - pendingRewards is always >= claimedAmount\r\n        */\r\n        unchecked {\r\n            pendingRewards -= claimedAmount[_wallet];\r\n        }\r\n        \r\n\r\n        return pendingRewards;\r\n    }\r\n\r\n    /*\r\n    Get the amount of generated rewards [TOKEN_ADDRESS]\r\n    @param _wallet: Address to check\r\n    */\r\n    function getGeneratedRewards(address _wallet)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (remainingAmount[_wallet] == 0) return 0;\r\n        uint256 generatedRewards;\r\n\r\n        if (\r\n            // >= 18 months (540 days) --> all the rewards are generated (100% of the deposited amount)\r\n            block.timestamp - lockingTime[_wallet] >=\r\n            FULL_LOCKUP_PERIOD + (FULL_LOCKUP_PERIOD / 2)\r\n        ) {\r\n            generatedRewards = depositedAmount[_wallet];\r\n        } else {\r\n            // < 18 months --> Needs calculation (66.66% APY)\r\n            uint256 timeDiff = block.timestamp - lockingTime[_wallet];\r\n\r\n            generatedRewards =\r\n                (((depositedAmount[_wallet] * REWARD_RATE) / 1e4) * timeDiff) /\r\n                REWARD_INTERVAL;\r\n        }\r\n\r\n        return generatedRewards;\r\n    }\r\n\r\n    /*\r\n    Get the amount of unlockable tokens [TOKEN_ADDRESS]\r\n    @param _wallet: Address to check\r\n    */\r\n    function getUnlockableAmount(address _wallet)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (remainingAmount[_wallet] == 0) return 0;\r\n        if (!isInUnlockingMode(_wallet)) return 0;\r\n        uint256 numWithdraws = getNumUnlockPeriods(_wallet);\r\n        uint256 _toSend = (numWithdraws * depositedAmount[_wallet]) /\r\n            TOTAL_WITHDRAWS -\r\n            withdrawnAmount[_wallet];\r\n\r\n        if (\r\n            _toSend > remainingAmount[_wallet] ||\r\n            remainingAmount[_wallet] - _toSend < numWithdraws // decimals check (for the last withdraw) - 0,000000000000000012\r\n        ) {\r\n            _toSend = remainingAmount[_wallet];\r\n        }\r\n\r\n        return _toSend;\r\n    }\r\n\r\n    /*\r\n    Get the number of unlockable periods (30 days)\r\n    @param _wallet: Address to check\r\n    */\r\n    function getNumUnlockPeriods(address _wallet)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (block.timestamp -\r\n                lockingTime[_wallet] -\r\n                (FULL_LOCKUP_PERIOD * 2)) / TIME_1_MONTH_ADJUSTED;\r\n    }\r\n\r\n    /*\r\n    Get if is in the claiming phase or not\r\n    @param _wallet: Address to check\r\n    */\r\n    function isInClaimingMode(address _wallet) public view returns (bool) {\r\n        if (remainingAmount[_wallet] == 0) return false;\r\n        return\r\n            (block.timestamp - lockingTime[_wallet] >=\r\n                FULL_LOCKUP_PERIOD + TIME_1_MONTH_ADJUSTED) &&\r\n            (block.timestamp - lockingTime[_wallet] <\r\n                FULL_LOCKUP_PERIOD * 2 + TIME_1_MONTH_ADJUSTED);\r\n    }\r\n\r\n    /*\r\n    Get if is in the unlocking phase or not\r\n    @param _wallet: Address to check\r\n    */\r\n    function isInUnlockingMode(address _wallet) public view returns (bool) {\r\n        if (remainingAmount[_wallet] == 0) return false;\r\n        return (block.timestamp - lockingTime[_wallet] >=\r\n            FULL_LOCKUP_PERIOD * 2 + TIME_1_MONTH_ADJUSTED);\r\n    }\r\n\r\n    /*\r\n    Get the time (in seconds) till the next unlock\r\n    @param _wallet: Address to check\r\n    returns 0 if remaining tokens is 0\r\n    returns 0 if unlockable amount is greater than 0\r\n    */\r\n    function getTimeUntilNextUnlock(address _wallet)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {   \r\n        uint _res = 0;\r\n        if (\r\n            remainingAmount[_wallet] == 0 ||\r\n            getUnlockableAmount(_wallet) > 0 \r\n        ){\r\n            // must return 0\r\n        } else if (!isInUnlockingMode(_wallet)){\r\n            _res = lockingTime[_wallet] +\r\n                   FULL_LOCKUP_PERIOD *\r\n                   2 +\r\n                   TIME_1_MONTH_ADJUSTED -\r\n                   block.timestamp;\r\n        } else {\r\n            uint256 numPeriods = getNumUnlockPeriods(_wallet);\r\n            _res = lockingTime[_wallet] +\r\n                   (FULL_LOCKUP_PERIOD * 2) +\r\n                   (numPeriods + 1) *\r\n                   TIME_1_MONTH_ADJUSTED -\r\n                   block.timestamp;\r\n        } \r\n        return _res;\r\n        \r\n    }\r\n\r\n    /*\r\n    Get the time (in seconds) till the next claim\r\n    @param _wallet: Address to check\r\n    returns 0 if remaining tokens is 0\r\n    returns 0 if claimable amount is greater than 0\r\n    returns 0 if unlocking phase is completed\r\n    */\r\n    function getTimeUntilNextClaim(address _wallet)\r\n        external\r\n        view\r\n        returns (uint256)\r\n\r\n    {\r\n        uint256 _res = 0;\r\n        if (\r\n            remainingAmount[_wallet] == 0 || \r\n            block.timestamp - lockingTime[_wallet] >= FULL_LOCKUP_PERIOD * 3 ||\r\n            getClaimableRewards(_wallet) > 0\r\n        ){\r\n            // must return 0\r\n        } else if (isInUnlockingMode(_wallet)) {\r\n            _res = getTimeUntilNextUnlock(_wallet);\r\n        } else if (isInClaimingMode(_wallet)) {\r\n            uint256 numPeriods = (block.timestamp -\r\n                lockingTime[_wallet] -\r\n                FULL_LOCKUP_PERIOD) / TIME_1_MONTH_ADJUSTED;\r\n            _res =\r\n                lockingTime[_wallet] +\r\n                FULL_LOCKUP_PERIOD +\r\n                (numPeriods + 1) *\r\n                TIME_1_MONTH_ADJUSTED -\r\n                block.timestamp;\r\n        } else {\r\n            _res =\r\n                lockingTime[_wallet] +\r\n                FULL_LOCKUP_PERIOD +\r\n                TIME_1_MONTH_ADJUSTED -\r\n                block.timestamp;\r\n        }\r\n\r\n        return _res;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unlockToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FULL_LOCKUP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MONTHLY_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_1_MONTH_ADJUSTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_WITHDRAWS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getGeneratedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTimeUntilNextClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTimeUntilNextUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUnlockableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isInClaimingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isInUnlockingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingToGet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LakeVestingPrivate", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb2ed33bf0dd4b8a4abf4b091bfbf499341ba6c600000000000000000000000013d074303c95a34d304f29928dc8a16dec797e9e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6333d7788fa5644e342ab0c604145fd9f7f19201f0f631cc4f807ef5d033d321"}