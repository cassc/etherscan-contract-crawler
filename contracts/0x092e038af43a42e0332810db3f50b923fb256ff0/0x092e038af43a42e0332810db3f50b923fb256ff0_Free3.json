{"SourceCode": "// SPDX-License-Identifier: CC0\r\n\r\n\r\n/*\r\n /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$        /$$$$$$\r\n| $$_____/| $$__  $$| $$_____/| $$_____/       /$$__  $$\r\n| $$      | $$  \\ $$| $$      | $$            |__/  \\ $$\r\n| $$$$$   | $$$$$$$/| $$$$$   | $$$$$            /$$$$$/\r\n| $$__/   | $$__  $$| $$__/   | $$__/           |___  $$\r\n| $$      | $$  \\ $$| $$      | $$             /$$  \\ $$\r\n| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      |  $$$$$$/\r\n|__/      |__/  |__/|________/|________/       \\______/\r\n\r\n\r\n\r\n /$$\r\n| $$\r\n| $$$$$$$  /$$   /$$\r\n| $$__  $$| $$  | $$\r\n| $$  \\ $$| $$  | $$\r\n| $$  | $$| $$  | $$\r\n| $$$$$$$/|  $$$$$$$\r\n|_______/  \\____  $$\r\n           /$$  | $$\r\n          |  $$$$$$/\r\n           \\______/\r\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\r\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\r\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\r\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\r\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\r\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\r\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\r\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\r\n\r\n\r\nCC0 2021\r\n*/\r\n\r\n\r\npragma solidity ^0.8.11;\r\n\r\n \r\ninterface IFree {\r\n  function mint(uint256 collectionId, address to) external;\r\n  function ownerOf(uint256 tokenId) external returns (address owner);\r\n  function tokenIdToCollectionId(uint256 tokenId) external returns (uint256 collectionId);\r\n  function appendAttributeToToken(uint256 tokenId, string memory attrKey, string memory attrValue) external;\r\n}\r\n\r\n\r\ncontract Free3 {\r\n  IFree public immutable free;\r\n\r\n  struct Stake {\r\n    uint256 firstStakeBlockNumber;\r\n    uint256 secondStakeBlockNumber;\r\n    uint256 mintBlockNumber;\r\n    uint256 totalStaked;\r\n  }\r\n\r\n  mapping(address => Stake) public addressToStakes;\r\n  mapping(uint256 => bool) public free0TokenIdUsed;\r\n\r\n  address public administrator;\r\n  uint256 public immutable stakePeriod;\r\n  uint256 public immutable progressPeriodExpiration;\r\n\r\n  constructor(address freeAddr, uint256 _stakePeriod, uint256 _progressPeriodExpiration) {\r\n    free = IFree(freeAddr);\r\n    stakePeriod = _stakePeriod;\r\n    progressPeriodExpiration = _progressPeriodExpiration;\r\n    administrator = msg.sender;\r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == administrator, 'Admin only');\r\n    _;\r\n  }\r\n\r\n  function transferAdministratorship(address newAdministrator) public onlyAdmin {\r\n    administrator = newAdministrator;\r\n  }\r\n\r\n  function firstStake() public payable {\r\n    Stake storage stake = addressToStakes[msg.sender];\r\n    require(stake.firstStakeBlockNumber == 0, 'You have already attempted a first stake');\r\n    require(msg.value >= 0.25 ether, 'You must stake at least 0.25 ether');\r\n\r\n    stake.firstStakeBlockNumber = block.number;\r\n    stake.totalStaked += msg.value;\r\n  }\r\n\r\n  function secondStake() public payable {\r\n    Stake storage stake = addressToStakes[msg.sender];\r\n    require(stake.firstStakeBlockNumber != 0, 'You have not attempted a first stake');\r\n    require(stake.secondStakeBlockNumber == 0, 'You have already attempted a second stake');\r\n    require(\r\n      block.number > stake.firstStakeBlockNumber + stakePeriod\r\n      && block.number < stake.firstStakeBlockNumber + progressPeriodExpiration,\r\n      'You must wait between 5000 and 5100 blocks to make your second stake'\r\n    );\r\n    require(msg.value >= 0.25 ether, 'You must stake at least 0.25 ether');\r\n\r\n    stake.secondStakeBlockNumber = block.number;\r\n    stake.totalStaked += msg.value;\r\n  }\r\n\r\n  function withdraw(address staker) public onlyAdmin {\r\n    Stake storage stake = addressToStakes[staker];\r\n\r\n    bool firstStakeFailed = block.number > stake.firstStakeBlockNumber + progressPeriodExpiration;\r\n    bool secondStakeFailed = block.number > stake.secondStakeBlockNumber + progressPeriodExpiration;\r\n    bool ethStillStaked = stake.totalStaked > 0;\r\n    bool isMinted = stake.mintBlockNumber > 0;\r\n    require(\r\n      firstStakeFailed && secondStakeFailed && ethStillStaked && !isMinted,\r\n      'Can only withdraw if one of two stakes have failed, eth is still staked, and token has not been minted'\r\n    );\r\n\r\n    payable(administrator).transfer(stake.totalStaked);\r\n    stake.totalStaked = 0;\r\n  }\r\n\r\n  function claim(uint256 free0TokenId) public {\r\n    Stake storage stake = addressToStakes[msg.sender];\r\n\r\n    require(stake.mintBlockNumber == 0, 'You have already minted');\r\n    require(\r\n      block.number > stake.secondStakeBlockNumber + stakePeriod\r\n      && block.number < stake.secondStakeBlockNumber + progressPeriodExpiration,\r\n      'You must wait between 5000 and 5100 blocks to claim'\r\n    );\r\n    require(free.ownerOf(free0TokenId) == msg.sender, 'You must be the owner of this Free0');\r\n    require(free.tokenIdToCollectionId(free0TokenId) == 0, 'Invalid Free0');\r\n    require(!free0TokenIdUsed[free0TokenId], 'This Free0 has already been used to mint a Free3');\r\n    free.appendAttributeToToken(free0TokenId, 'Used For Free3 Mint', 'true');\r\n\r\n    free0TokenIdUsed[free0TokenId] = true;\r\n    stake.mintBlockNumber = block.number;\r\n\r\n    free.mint(3, msg.sender);\r\n    payable(msg.sender).transfer(stake.totalStaked);\r\n    stake.totalStaked = 0;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"freeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_progressPeriodExpiration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstStakeBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondStakeBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"free0TokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"free\",\"outputs\":[{\"internalType\":\"contract IFree\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"free0TokenIdUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressPeriodExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdministrator\",\"type\":\"address\"}],\"name\":\"transferAdministratorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Free3", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000030b541f1182ef19c56a39634b2fdaca5a0f2a741000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000013ec", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ee609b1515b5e3fc319c6536690e39d5e0f023bfdac76166be50a84e51cde7f"}