{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/mainnet/EtherOrcs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../ERC20.sol\\\";\\r\\nimport \\\"./ERC721-Orcs.sol\\\"; \\r\\n\\r\\nimport \\\"../interfaces/Interfaces.sol\\\";\\r\\n\\r\\n//    ___ _   _               ___            \\r\\n//  | __| |_| |_  ___ _ _   / _ \\\\ _ _ __ ___\\r\\n//  | _||  _| ' \\\\/ -_) '_| | (_) | '_/ _(_-<\\r\\n//  |___|\\\\__|_||_\\\\___|_|    \\\\___/|_| \\\\__/__/\\r\\n//\\r\\n\\r\\ncontract EtherOrcs is ERC721O {\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    Global STATE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public constant  cooldown = 10 minutes;\\r\\n    uint256 public constant  startingTime = 1633951800 + 4.5 hours;\\r\\n\\r\\n    address public migrator;\\r\\n\\r\\n    bytes32 internal entropySauce;\\r\\n\\r\\n    ERC20 public zug;\\r\\n\\r\\n    mapping (address => bool)     public auth;\\r\\n    mapping (uint256 => Orc)      public orcs;\\r\\n    mapping (uint256 => Action)   public activities;\\r\\n    mapping (Places  => LootPool) public lootPools;\\r\\n    \\r\\n    uint256 mintedFromThis = 0;\\r\\n    bool mintOpen = false;\\r\\n\\r\\n    MetadataHandlerLike public metadaHandler;\\r\\n    address public raids = 0x47DC8e20C15f6deAA5cBFeAe6cf9946aCC89af59;\\r\\n    mapping(bytes4 => address) implementer;\\r\\n\\r\\n    address constant impl = 0x7d98439fD9b5989D0897124A977869d9a678Ec85;\\r\\n\\r\\n    address public castle;\\r\\n\\r\\n    function setImplementer(bytes4[] calldata funcs, address source) external onlyOwner {\\r\\n        for (uint256 index = 0; index < funcs.length; index++) {\\r\\n            implementer[funcs[index]] = source; \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 id) external view returns(string memory) {\\r\\n        Orc memory orc = orcs[id];\\r\\n        return metadaHandler.getTokenURI(uint16(id), orc.body, orc.helm, orc.mainhand, orc.offhand, orc.level, orc.zugModifier);\\r\\n    }\\r\\n\\r\\n    event ActionMade(address owner, uint256 id, uint256 timestamp, uint8 activity);\\r\\n\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                DATA STRUCTURES \\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    struct LootPool { \\r\\n        uint8  minLevel; uint8  minLootTier; uint16  cost;   uint16 total;\\r\\n        uint16 tier_1;   uint16 tier_2;      uint16 tier_3; uint16 tier_4;\\r\\n    }\\r\\n\\r\\n    struct Orc { uint8 body; uint8 helm; uint8 mainhand; uint8 offhand; uint16 level; uint16 zugModifier; uint32 lvlProgress; }\\r\\n\\r\\n    enum   Actions { UNSTAKED, FARMING, TRAINING }\\r\\n    struct Action  { address owner; uint88 timestamp; Actions action; }\\r\\n\\r\\n    // These are all the places you can go search for loot\\r\\n    enum Places { \\r\\n        TOWN, DUNGEON, CRYPT, CASTLE, DRAGONS_LAIR, THE_ETHER, \\r\\n        TAINTED_KINGDOM, OOZING_DEN, ANCIENT_CHAMBER, ORC_GODS \\r\\n    }   \\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    MODIFIERS \\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    modifier noCheaters() {\\r\\n        uint256 size = 0;\\r\\n        address acc = msg.sender;\\r\\n        assembly { size := extcodesize(acc)}\\r\\n\\r\\n        require(auth[msg.sender] || (msg.sender == tx.origin && size == 0), \\\"you're trying to cheat!\\\");\\r\\n        _;\\r\\n\\r\\n        // We'll use the last caller hash to add entropy to next caller\\r\\n        entropySauce = keccak256(abi.encodePacked(acc, block.coinbase));\\r\\n    }\\r\\n\\r\\n    modifier ownerOfOrc(uint256 id, address who_) { \\r\\n        require(ownerOf[id] == who_ || activities[id].owner == who_, \\\"not your orc\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwnerOfOrc(uint256 id) {\\r\\n         require(ownerOf[id] == msg.sender || activities[id].owner == msg.sender, \\\"not your orc\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == admin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    PUBLIC FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setAdmin(address admin_) external onlyOwner {\\r\\n        admin = admin_;\\r\\n        auth[admin_] = true;\\r\\n    }\\r\\n\\r\\n    function doAction(uint256 id, Actions action_) public ownerOfOrc(id, msg.sender) noCheaters {\\r\\n       _doAction(id, msg.sender, action_, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _doAction(uint256 id, address orcOwner, Actions action_, address who_) internal ownerOfOrc(id, who_) {\\r\\n        Action memory action = activities[id];\\r\\n        require(action.action != action_, \\\"already doing that\\\");\\r\\n\\r\\n        // Picking the largest value between block.timestamp, action.timestamp and startingTime\\r\\n        uint88 timestamp = uint88(block.timestamp > action.timestamp ? block.timestamp : action.timestamp);\\r\\n\\r\\n        if (action.action == Actions.UNSTAKED)  _transfer(orcOwner, address(this), id);\\r\\n     \\r\\n        else {\\r\\n            if (block.timestamp > action.timestamp) _claim(id);\\r\\n            timestamp = timestamp > action.timestamp ? timestamp : action.timestamp;\\r\\n        }\\r\\n\\r\\n        address owner_ = action_ == Actions.UNSTAKED ? address(0) : orcOwner;\\r\\n        if (action_ == Actions.UNSTAKED) _transfer(address(this), orcOwner, id);\\r\\n\\r\\n        activities[id] = Action({owner: owner_, action: action_,timestamp: timestamp});\\r\\n        emit ActionMade(orcOwner, id, block.timestamp, uint8(action_));\\r\\n    }\\r\\n\\r\\n\\r\\n    function doActionWithManyOrcs(uint256[] calldata ids, Actions action_) external {\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            _doAction(ids[index], msg.sender, action_, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pillageWithManyOrcs(uint256[] calldata ids, Places place, bool tryHelm, bool tryMainhand, bool tryOffhand) external {\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            pillage(ids[index], place, tryHelm, tryMainhand,tryOffhand);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim(uint256[] calldata ids) external {\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            _claim(ids[index]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _claim(uint256 id) internal noCheaters {\\r\\n        Orc    memory orc    = orcs[id];\\r\\n        Action memory action = activities[id];\\r\\n\\r\\n        if(block.timestamp <= action.timestamp) return;\\r\\n\\r\\n        uint256 timeDiff = uint256(block.timestamp - action.timestamp);\\r\\n\\r\\n        if (action.action == Actions.TRAINING) {\\r\\n            if (orcs[id].level > 0 && orcs[id].lvlProgress < 1000){\\r\\n                orcs[id].lvlProgress = (1000 * orcs[id].level) + orcs[id].lvlProgress;\\r\\n            }\\r\\n            orcs[id].lvlProgress += uint32(timeDiff * 3000 / 1 days);\\r\\n            orcs[id].level       = uint16(orcs[id].lvlProgress / 1000);\\r\\n        }\\r\\n\\r\\n        activities[id].timestamp = uint88(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function pillage(uint256 id, Places place, bool tryHelm, bool tryMainhand, bool tryOffhand) public isOwnerOfOrc(id) noCheaters {\\r\\n        require(block.timestamp >= uint256(activities[id].timestamp), \\\"on cooldown\\\");\\r\\n        require(place != Places.ORC_GODS,  \\\"You can't pillage the Orc God\\\");\\r\\n        require(_tier(orcs[id].mainhand) < 10);\\r\\n\\r\\n        if(activities[id].timestamp < block.timestamp) _claim(id); // Need to claim to not have equipment reatroactively multiplying\\r\\n\\r\\n        uint256 rand_ = _rand();\\r\\n  \\r\\n        LootPool memory pool = lootPools[place];\\r\\n        require(orcs[id].level >= uint16(pool.minLevel), \\\"below minimum level\\\");\\r\\n\\r\\n        if (pool.cost > 0) {\\r\\n            zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\\r\\n        } \\r\\n        {\\r\\n        uint8 item;\\r\\n        if (tryHelm) {\\r\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"HELM\\\", id));\\r\\n            if (item != 0 ) orcs[id].helm = item;\\r\\n        }\\r\\n        if (tryMainhand) {\\r\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"MAINHAND\\\", id));\\r\\n            if (item != 0 ) orcs[id].mainhand = item;\\r\\n        }\\r\\n        if (tryOffhand) {\\r\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"OFFHAND\\\", id));\\r\\n            if (item != 0 ) orcs[id].offhand = item;\\r\\n        }\\r\\n\\r\\n        if (uint(place) > 1) lootPools[place] = pool;\\r\\n        }\\r\\n\\r\\n        // Update zug modifier\\r\\n        Orc memory orc = orcs[id];\\r\\n        uint16 zugModifier_ = _tier(orc.helm) + _tier(orc.mainhand) + _tier(orc.offhand);\\r\\n\\r\\n        orcs[id].zugModifier = zugModifier_;\\r\\n\\r\\n        activities[id].timestamp = uint88(block.timestamp + cooldown);\\r\\n    } \\r\\n\\r\\n    function sendToRaid(uint256[] calldata ids, uint8 location_, bool double_) external noCheaters { \\r\\n        require(address(raids) != address(0), \\\"raids not set\\\");\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            if (activities[ids[index]].action != Actions.UNSTAKED) _doAction(ids[index], msg.sender, Actions.UNSTAKED, msg.sender);\\r\\n            _transfer(msg.sender, raids, ids[index]);\\r\\n        }\\r\\n        RaidsLike(raids).stakeManyAndStartCampaign(ids, msg.sender, location_, double_);\\r\\n    }\\r\\n\\r\\n    function startRaidCampaign(uint256[] calldata ids, uint8 location_, bool double_) external noCheaters { \\r\\n        require(address(raids) != address(0), \\\"raids not set\\\");\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            require(msg.sender == RaidsLike(raids).commanders(ids[index]) && ownerOf[ids[index]] == address(raids), \\\"not staked or not your orc\\\");\\r\\n        }\\r\\n        RaidsLike(raids).startCampaignWithMany(ids, location_, double_);\\r\\n    }\\r\\n\\r\\n    function returnFromRaid(uint256[] calldata ids, Actions action_) external noCheaters { \\r\\n        RaidsLike raidsContract = RaidsLike(raids);\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            require(msg.sender == raidsContract.commanders(ids[index]), \\\"not your orc\\\");\\r\\n            raidsContract.unstake(ids[index]);\\r\\n            if (action_ != Actions.UNSTAKED) _doAction(ids[index], msg.sender, action_, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pull(address owner_, uint256[] calldata ids) external {\\r\\n        require (auth[msg.sender], \\\"not auth\\\");\\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n            if (activities[ids[index]].action != Actions.UNSTAKED) _doAction(ids[index], owner_, Actions.UNSTAKED, owner_);\\r\\n            _transfer(owner_, msg.sender, ids[index]);\\r\\n        }\\r\\n        CastleLike(msg.sender).pullCallback(owner_, ids);\\r\\n    }\\r\\n\\r\\n    function manuallyAdjustOrc(uint256 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress) external {\\r\\n        require(msg.sender == admin || auth[msg.sender], \\\"not authorized\\\");\\r\\n        orcs[id].body = body;\\r\\n        orcs[id].helm = helm;\\r\\n        orcs[id].mainhand = mainhand;\\r\\n        orcs[id].offhand = offhand;\\r\\n        orcs[id].level = level;\\r\\n        orcs[id].lvlProgress = lvlProgress;\\r\\n        orcs[id].zugModifier = zugModifier;\\r\\n    }\\r\\n\\r\\n    function setAuth(address add, bool status) external {\\r\\n        require(msg.sender == admin);\\r\\n        auth[add] = status;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    VIEWERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function claimable(uint256 id) external view returns (uint256 amount) {\\r\\n        uint256 timeDiff = block.timestamp > activities[id].timestamp ? uint256(block.timestamp - activities[id].timestamp) : 0;\\r\\n        amount = activities[id].action == Actions.FARMING ? claimableZug(timeDiff, orcs[id].zugModifier) : timeDiff * 3000 / 1 days;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    INTERNAL  HELPERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @dev take an available item from a pool\\r\\n    function _getItemFromPool(LootPool memory pool, uint256 rand) internal pure returns (LootPool memory, uint8 item) {\\r\\n        uint draw = rand % pool.total--; \\r\\n\\r\\n        if (draw > pool.tier_1 + pool.tier_2 + pool.tier_3 && pool.tier_4-- > 0) {\\r\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 3) * 4);     \\r\\n            return (pool, item);\\r\\n        }\\r\\n\\r\\n        if (draw > pool.tier_1 + pool.tier_2 && pool.tier_3-- > 0) {\\r\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 2) * 4);\\r\\n            return (pool, item);\\r\\n        }\\r\\n\\r\\n        if (draw > pool.tier_1 && pool.tier_2-- > 0) {\\r\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 1) * 4);\\r\\n            return (pool, item);\\r\\n        }\\r\\n\\r\\n        if (pool.tier_1-- > 0) {\\r\\n            item = uint8((draw % 4 + 1) + pool.minLootTier * 4);\\r\\n            return (pool, item);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimableZug(uint256, uint16) internal pure returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /// @dev Convert an id to its tier\\r\\n    function _tier(uint16 id) internal pure returns (uint16) {\\r\\n        if (id == 0) return 0;\\r\\n        return ((id - 1) / 4 );\\r\\n    }\\r\\n\\r\\n    /// @dev Create a bit more of randomness\\r\\n    function _randomize(uint256 rand, string memory val, uint256 spicy) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encode(rand, val, spicy)));\\r\\n    }\\r\\n\\r\\n    function _rand() internal view returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, block.basefee, block.timestamp, entropySauce)));\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    FALLBACK HANDLER \\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n\\r\\n    function _delegate(address implementation) internal virtual {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n\\r\\n    fallback() external {\\r\\n        if(implementer[msg.sig] == address(0)) {\\r\\n            _delegate(impl);\\r\\n        } else {\\r\\n            _delegate(implementer[msg.sig]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\r\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\r\\n/// Taken from Solmate: https://github.com/Rari-Capital/solmate\\r\\n\\r\\nabstract contract ERC20 {\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                  EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             METADATA STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function name() external view virtual returns (string memory);\\r\\n    function symbol() external view virtual returns (string memory);\\r\\n    function decimals() external view virtual returns (uint8);\\r\\n\\r\\n    // string public constant name     = \\\"ZUG\\\";\\r\\n    // string public constant symbol   = \\\"ZUG\\\";\\r\\n    // uint8  public constant decimals = 18;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             ERC20 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    mapping(address => bool) public isMinter;\\r\\n\\r\\n    address public ruler;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC20 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor() { ruler = msg.sender;}\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool) {\\r\\n        allowance[msg.sender][spender] = value;\\r\\n\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool) {\\r\\n        balanceOf[msg.sender] -= value;\\r\\n\\r\\n        // This is safe because the sum of all user\\r\\n        // balances can't exceed type(uint256).max!\\r\\n        unchecked {\\r\\n            balanceOf[to] += value;\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, to, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\r\\n            allowance[from][msg.sender] -= value;\\r\\n        }\\r\\n\\r\\n        balanceOf[from] -= value;\\r\\n\\r\\n        // This is safe because the sum of all user\\r\\n        // balances can't exceed type(uint256).max!\\r\\n        unchecked {\\r\\n            balanceOf[to] += value;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             ORC PRIVILEGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function mint(address to, uint256 value) external {\\r\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO MINT\\\");\\r\\n        _mint(to, value);\\r\\n    }\\r\\n\\r\\n    function burn(address from, uint256 value) external {\\r\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO BURN\\\");\\r\\n        _burn(from, value);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                         Ruler Function\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setMinter(address minter, bool status) external {\\r\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\r\\n\\r\\n        isMinter[minter] = status;\\r\\n    }\\r\\n\\r\\n    function setRuler(address ruler_) external {\\r\\n        require(msg.sender == ruler ||ruler == address(0), \\\"NOT ALLOWED TO RULE\\\");\\r\\n\\r\\n        ruler = ruler_;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                          INTERNAL UTILS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _mint(address to, uint256 value) internal {\\r\\n        totalSupply += value;\\r\\n\\r\\n        // This is safe because the sum of all user\\r\\n        // balances can't exceed type(uint256).max!\\r\\n        unchecked {\\r\\n            balanceOf[to] += value;\\r\\n        }\\r\\n\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 value) internal {\\r\\n        balanceOf[from] -= value;\\r\\n\\r\\n        // This is safe because a user won't ever\\r\\n        // have a balance larger than totalSupply!\\r\\n        unchecked {\\r\\n            totalSupply -= value;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/mainnet/ERC721-Orcs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation,\\r\\n/// including the MetaData, and partially, Enumerable extensions.\\r\\ncontract ERC721O {\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                  EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n    \\r\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenId);\\r\\n    \\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n    \\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             METADATA STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    \\r\\n    address        implementation_;\\r\\n    address public admin; //Lame requirement from opensea\\r\\n    \\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             ERC-721 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n    uint256 public oldSupply;\\r\\n    uint256 public minted;\\r\\n    \\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    \\r\\n    mapping(uint256 => address) public ownerOf;\\r\\n        \\r\\n    mapping(uint256 => address) public getApproved;\\r\\n \\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             VIEW FUNCTION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function owner() external view returns (address) {\\r\\n        return admin;\\r\\n    }\\r\\n    \\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC-20-LIKE LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    \\r\\n    function transfer(address to, uint256 tokenId) external {\\r\\n        require(msg.sender == ownerOf[tokenId], \\\"NOT_OWNER\\\");\\r\\n        \\r\\n        _transfer(msg.sender, to, tokenId);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC-721 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    \\r\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\\r\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\r\\n    }\\r\\n    \\r\\n    function approve(address spender, uint256 tokenId) external {\\r\\n        address owner_ = ownerOf[tokenId];\\r\\n        \\r\\n        require(msg.sender == owner_ || isApprovedForAll[owner_][msg.sender], \\\"NOT_APPROVED\\\");\\r\\n        \\r\\n        getApproved[tokenId] = spender;\\r\\n        \\r\\n        emit Approval(owner_, spender, tokenId); \\r\\n    }\\r\\n    \\r\\n    function setApprovalForAll(address operator, bool approved) external {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n        \\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public {        \\r\\n        require(\\r\\n            msg.sender == from \\r\\n            || msg.sender == getApproved[tokenId]\\r\\n            || isApprovedForAll[from][msg.sender], \\r\\n            \\\"NOT_APPROVED\\\"\\r\\n        );\\r\\n        \\r\\n        _transfer(from, to, tokenId);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n    \\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {\\r\\n        transferFrom(from, to, tokenId); \\r\\n        \\r\\n        if (to.code.length != 0) {\\r\\n            // selector = `onERC721Received(address,address,uint,bytes)`\\r\\n            (, bytes memory returned) = to.staticcall(abi.encodeWithSelector(0x150b7a02,\\r\\n                msg.sender, address(0), tokenId, data));\\r\\n                \\r\\n            bytes4 selector = abi.decode(returned, (bytes4));\\r\\n            \\r\\n            require(selector == 0x150b7a02, \\\"NOT_ERC721_RECEIVER\\\");\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                          INTERNAL UTILS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\r\\n        require(ownerOf[tokenId] == from, \\\"not owner\\\");\\r\\n\\r\\n        balanceOf[from]--; \\r\\n        balanceOf[to]++;\\r\\n        \\r\\n        delete getApproved[tokenId];\\r\\n        \\r\\n        ownerOf[tokenId] = to;\\r\\n        emit Transfer(from, to, tokenId); \\r\\n\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal { \\r\\n        require(ownerOf[tokenId] == address(0), \\\"ALREADY_MINTED\\\");\\r\\n\\r\\n        totalSupply++;\\r\\n        \\r\\n        // This is safe because the sum of all user\\r\\n        // balances can't exceed type(uint256).max!\\r\\n        unchecked {\\r\\n            balanceOf[to]++;\\r\\n        }\\r\\n        \\r\\n        ownerOf[tokenId] = to;\\r\\n                \\r\\n        emit Transfer(address(0), to, tokenId); \\r\\n    }\\r\\n    \\r\\n    function _burn(uint256 tokenId) internal { \\r\\n        address owner_ = ownerOf[tokenId];\\r\\n        \\r\\n        require(ownerOf[tokenId] != address(0), \\\"NOT_MINTED\\\");\\r\\n        \\r\\n        totalSupply--;\\r\\n        balanceOf[owner_]--;\\r\\n        \\r\\n        delete ownerOf[tokenId];\\r\\n                \\r\\n        emit Transfer(owner_, address(0), tokenId); \\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface OrcishLike {\\r\\n    function pull(address owner, uint256[] calldata ids) external;\\r\\n    function manuallyAdjustOrc(uint256 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress) external;\\r\\n    function transfer(address to, uint256 tokenId) external;\\r\\n    function orcs(uint256 id) external view returns(uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress);\\r\\n    function allies(uint256 id) external view returns (uint8 class, uint16 level, uint32 lvlProgress, uint16 modF, uint8 skillCredits, bytes22 details);\\r\\n    function adjustAlly(uint256 id, uint8 class_, uint16 level_, uint32 lvlProgress_, uint16 modF_, uint8 skillCredits_, bytes22 details_) external;\\r\\n    function ogres(uint256 id) external view returns(uint16 level, uint32 lvlProgress, uint16 modF, uint8 skillCredits, uint8 body, uint8 mouth, uint8 nose, uint8 eyes, uint8 armor, uint8 mainhand, uint8 offhand);\\r\\n    function claim(uint256[] calldata ids) external;\\r\\n    function rogue(bytes22 details) external pure returns(uint8 body, uint8 face, uint8 boots, uint8 pants,uint8 shirt,uint8 hair ,uint8 armor ,uint8 mainhand,uint8 offhand);\\r\\n}\\r\\n\\r\\n\\r\\n        \\r\\n\\r\\ninterface PortalLike {\\r\\n    function sendMessage(bytes calldata message_) external;\\r\\n}\\r\\n\\r\\ninterface OracleLike {\\r\\n    function request() external returns (uint64 key);\\r\\n    function getRandom(uint64 id) external view returns(uint256 rand);\\r\\n}\\r\\n\\r\\ninterface MetadataHandlerLike {\\r\\n    function getTokenURI(uint16 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface MetadataHandlerAllies {\\r\\n    function getTokenURI(uint256 id_, uint256 class_, uint256 level_, uint256 modF_, uint256 skillCredits_, bytes22 details_) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface RaidsLike {\\r\\n    function stakeManyAndStartCampaign(uint256[] calldata ids_, address owner_, uint256 location_, bool double_) external;\\r\\n    function startCampaignWithMany(uint256[] calldata ids, uint256 location_, bool double_) external;\\r\\n    function commanders(uint256 id) external returns(address);\\r\\n    function unstake(uint256 id) external;\\r\\n}\\r\\n\\r\\ninterface RaidsLikePoly {\\r\\n    function stakeManyAndStartCampaign(uint256[] calldata ids_, address owner_, uint256 location_, bool double_, uint256[] calldata potions_, uint256[] calldata runes_) external;\\r\\n    function startCampaignWithMany(uint256[] calldata ids, uint256 location_, bool double_,  uint256[] calldata potions_, uint256[] calldata runes_) external;\\r\\n    function commanders(uint256 id) external returns(address);\\r\\n    function unstake(uint256 id) external;\\r\\n}\\r\\n\\r\\ninterface CastleLike {\\r\\n    function pullCallback(address owner, uint256[] calldata ids) external;\\r\\n}\\r\\n\\r\\ninterface EtherOrcsLike {\\r\\n    function ownerOf(uint256 id) external view returns (address owner_);\\r\\n    function activities(uint256 id) external view returns (address owner, uint88 timestamp, uint8 action);\\r\\n    function orcs(uint256 orcId) external view returns (uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress);\\r\\n}\\r\\n\\r\\ninterface ERC20Like {\\r\\n    function balanceOf(address from) external view returns(uint256 balance);\\r\\n    function burn(address from, uint256 amount) external;\\r\\n    function mint(address from, uint256 amount) external;\\r\\n    function transfer(address to, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface ERC1155Like {\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n    function mint(address to, uint256 id, uint256 amount) external;\\r\\n    function burn(address from, uint256 id, uint256 amount) external;\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data) external;\\r\\n}\\r\\n\\r\\ninterface ERC721Like {\\r\\n    function transferFrom(address from, address to, uint256 id) external;   \\r\\n    function transfer(address to, uint256 id) external;\\r\\n    function ownerOf(uint256 id) external returns (address owner);\\r\\n    function mint(address to, uint256 tokenid) external;\\r\\n}\\r\\n\\r\\ninterface HallOfChampionsLike {\\r\\n    function joined(uint256 orcId) external view returns (uint256 joinDate);\\r\\n} \\r\\n\\r\\ninterface AlliesLike {\\r\\n    function allies(uint256 id) external view returns (uint8 class, uint16 level, uint32 lvlProgress, uint16 modF, uint8 skillCredits, bytes22 details);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"activity\",\"type\":\"uint8\"}],\"name\":\"ActionMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"timestamp\",\"type\":\"uint88\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"castle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action_\",\"type\":\"uint8\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action_\",\"type\":\"uint8\"}],\"name\":\"doActionWithManyOrcs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EtherOrcs.Places\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lootPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"minLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minLootTier\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"cost\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_3\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_4\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"helm\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mainhand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"offhand\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"zugModifier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"lvlProgress\",\"type\":\"uint32\"}],\"name\":\"manuallyAdjustOrc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadaHandler\",\"outputs\":[{\"internalType\":\"contract MetadataHandlerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orcs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"helm\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mainhand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"offhand\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"zugModifier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"lvlProgress\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum EtherOrcs.Places\",\"name\":\"place\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tryHelm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryMainhand\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryOffhand\",\"type\":\"bool\"}],\"name\":\"pillage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"enum EtherOrcs.Places\",\"name\":\"place\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tryHelm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryMainhand\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryOffhand\",\"type\":\"bool\"}],\"name\":\"pillageWithManyOrcs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action_\",\"type\":\"uint8\"}],\"name\":\"returnFromRaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"location_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"double_\",\"type\":\"bool\"}],\"name\":\"sendToRaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"funcs\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"setImplementer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"location_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"double_\",\"type\":\"bool\"}],\"name\":\"startRaidCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zug\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EtherOrcs", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}