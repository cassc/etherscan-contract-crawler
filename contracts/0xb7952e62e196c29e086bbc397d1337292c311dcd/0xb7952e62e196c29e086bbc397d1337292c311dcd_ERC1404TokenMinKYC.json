{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Token {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract IERC1404 {\r\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n    /// @param from Sending address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function  detectTransferRestriction (address from, address to, uint256 value) public virtual view returns (uint8);\r\n\r\n    /// @notice Returns a human-readable message for a given restriction code\r\n    /// @param restrictionCode Identifier for looking up a message\r\n    /// @return Text showing the restriction's reasoning\r\n    /// @dev Overwrite with your custom message and restrictionCode handling\r\n    function  messageForTransferRestriction  (uint8 restrictionCode) public virtual view returns (string memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC1404TokenMinKYC is IERC20Token, IERC1404 {\r\n\t\r\n\t// Set buy and sell restrictions on investors.  \r\n\t// date is Linux Epoch datetime\r\n\t// Both date must be less than current date time to allow the respective operation. Like to get tokens from others, receiver's buy restriction\r\n\t// must be less than current date time. \r\n\t// 0 means investor is not allowed to buy or sell his token.  0 indicates buyer or seller is not whitelisted. \r\n\t// this condition is checked in detectTransferRestriction\r\n    mapping (address => uint256) private _buyRestriction;  \r\n\tmapping (address => uint256) private _sellRestriction;\t\r\n\t\r\n\tmapping (address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\taddress private _owner;\r\n\t\r\n\t// These addresses can control addresses that can manage whitelisting of investor or in otherwords can call modifyKYCData\r\n    mapping (address => bool) private _whitelistControlAuthority;  \t\r\n\t\r\n\r\n\t// These events are defined in IERC20Token.sol\r\n    // event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n    // event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\r\n\t\r\n\t// ERC20 related functions\r\n\tuint256 public decimals = 18;\r\n\tstring public version = \"1.1\";\r\n\tstring public IssuancePlatform = \"DigiShares\";\r\n\tstring public issuanceProtocol = \"ERC-1404\";\r\n    uint256 private _totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n\t\r\n\t// Custom functions\r\n\tstring public ShareCertificate;\r\n\tstring public CompanyHomepage;\r\n\tstring public CompanyLegalDocs;\r\n\r\n\r\n\t// These variables control how many investors can have tokens\r\n\t// if allowedInvestors = 0 then there is no limit of investors \r\n\tuint256 public currentTotalInvestors = 0;\t\t\r\n\tuint256 public allowedInvestors = 0;\r\n\r\n\t// Transfer Allowed = true\r\n\t// Transfer not allowed = false\r\n\tbool public isTradingAllowed = true;\r\n\t\r\n\t\r\n\tconstructor(uint256 _initialSupply, string memory _name,  string memory _symbol, uint256 _allowedInvestors, uint256 _decimals, string memory _ShareCertificate, string memory _CompanyHomepage, string memory _CompanyLegalDocs, address _swapContractAddress ) {\r\n\r\n\t\t\tname = _name;\r\n\t\t\tsymbol = _symbol;\r\n\r\n\t\t\tdecimals = _decimals;\r\n\r\n\t\t\t_owner = msg.sender;\r\n\t\t\t_buyRestriction[_owner] = 1;\r\n\t\t\t_sellRestriction[_owner] = 1;\r\n\t\t\t_buyRestriction[_swapContractAddress] = 1;\r\n\t\t\t_sellRestriction[_swapContractAddress] = 1;\r\n\r\n\r\n\t\t\tallowedInvestors = _allowedInvestors;\r\n\r\n\t\t\t// Minting tokens for initial supply\r\n\t\t\t_totalSupply = _initialSupply;\r\n\t\t\t_balances[_owner] = _totalSupply;\r\n\r\n\t\t\t// add message sender to whitelist authority list\r\n\t\t\t_whitelistControlAuthority[_owner] = true;\r\n\r\n\t\t\tShareCertificate = _ShareCertificate;\r\n\t\t\tCompanyHomepage = _CompanyHomepage;\r\n\t\t\tCompanyLegalDocs = _CompanyLegalDocs;\r\n\r\n\t\t\temit Transfer(address(0), _owner, _totalSupply);\r\n\r\n\t}\r\n\r\n\r\n\r\n    function resetShareCertificate(string memory _ShareCertificate) \r\n\texternal \r\n\tonlyOwner {\r\n\t\t ShareCertificate = _ShareCertificate;\r\n    }\r\n\r\n    function resetCompanyHomepage(string memory _CompanyHomepage) \r\n\texternal \r\n\tonlyOwner {\r\n\t\t CompanyHomepage = _CompanyHomepage;\r\n    }\r\n\t\r\n    function resetCompanyLegalDocs(string memory _CompanyLegalDocs) \r\n\texternal \r\n\tonlyOwner {\r\n\t\t CompanyLegalDocs = _CompanyLegalDocs;\r\n    }\r\n\r\n\r\n\r\n\r\n\t// _allowedInvestors = 0    No limit on number of investors        \r\n\t// _allowedInvestors > 0 only X number of investors can have positive balance \r\n    function resetAllowedInvestors(uint256 _allowedInvestors) \r\n\texternal \r\n\tonlyOwner {\r\n\t\tif( _allowedInvestors != 0 )\r\n\t\t\trequire(_allowedInvestors >= currentTotalInvestors, \"Allowed Investors cannot be less than Current holders\");\r\n\r\n\t\t allowedInvestors = _allowedInvestors;\r\n    }\r\n\r\n\r\n    function flipTradingStatus() \r\n\texternal \r\n\tonlyOwner {\r\n\t\t isTradingAllowed = !isTradingAllowed;\r\n    }\r\n\r\n\r\n\t//-----------------------------------------------------------------------\r\n\t// Get or set current owner of this smart contract\r\n    function owner() \r\n\texternal \r\n\tview \r\n\treturns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Only owner can call function\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) \r\n\texternal \r\n\tonlyOwner {\r\n        require(newOwner != address(0), \"Zero address not allowed\");\r\n\t\t_owner = newOwner;\r\n    }\r\n\t//-----------------------------------------------------------------------\r\n\t\r\n  \r\n  \r\n\r\n\t  \r\n\r\n\r\n\t  \r\n \r\n\t//-----------------------------------------------------------------------\r\n    // Manage whitelist autority and KYC status\r\n\t\r\n\tfunction setWhitelistAuthorityStatus(address user)\r\n\texternal \r\n\tonlyOwner {\r\n\t\t_whitelistControlAuthority[user] = true;\r\n\t}\r\n\tfunction removeWhitelistAuthorityStatus(address user)\r\n\texternal \r\n\tonlyOwner {\r\n\t\tdelete _whitelistControlAuthority[user];\r\n\t}\t\r\n\tfunction getWhitelistAuthorityStatus(address user)\r\n\texternal \r\n\tview\r\n\treturns (bool) {\r\n\t\t return _whitelistControlAuthority[user];\r\n\t}\t\r\n\t\r\n\r\n  \t// Set buy and sell restrictions on investors \r\n\tfunction modifyKYCData (\r\n\t\taddress user, \r\n\t\tuint256 buyRestriction, \r\n\t\tuint256 sellRestriction \r\n\t) \r\n\texternal \r\n\t{ \r\n\t  \trequire(_whitelistControlAuthority[msg.sender] == true, \"Not Whitelist Authority\");\r\n\t\tsetupKYCDataForUser( user, buyRestriction, sellRestriction );\r\n\t}\r\n\r\n\tfunction bulkWhitelistWallets (\r\n\t\taddress[] memory user, \r\n\t\tuint256 buyRestriction, \r\n\t\tuint256 sellRestriction \r\n\t) \r\n\texternal \r\n\t{ \r\n\t\trequire(_whitelistControlAuthority[msg.sender] == true, \"Not Whitelist Authority\");\r\n\t\tfor (uint i=0; i<user.length; i++) {\r\n\t\t\tsetupKYCDataForUser( user[i], buyRestriction, sellRestriction );\t\t\t\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tfunction setupKYCDataForUser (\r\n\t\taddress user, \r\n\t\tuint256 buyRestriction, \r\n\t\tuint256 sellRestriction\r\n\t)\r\n\tinternal\r\n\t{\r\n\t\t_buyRestriction[user] = buyRestriction;\r\n\t\t_sellRestriction[user] = sellRestriction;\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction getKYCData(address user) \r\n\texternal \r\n\tview\r\n\treturns (uint256, uint256 ) {\r\n\t\t   return (_buyRestriction[user] , _sellRestriction[user] );\r\n\t}\r\n\t//-----------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\t//-----------------------------------------------------------------------\r\n\t// These are ERC1404 interface implementations \r\n\t\r\n    modifier notRestricted (address from, address to, uint256 value) {\r\n        uint8 restrictionCode = detectTransferRestriction(from, to, value);\r\n        require(restrictionCode == 1, messageForTransferRestriction(restrictionCode));\r\n        _;\r\n    }\r\n\t\r\n    function detectTransferRestriction (address _from, address _to, uint256 value) \r\n\toverride\r\n\tpublic \r\n\tview \r\n\treturns (uint8 status)\r\n    {\t\r\n\t      // check if trading is allowed \r\n\t\t  require(isTradingAllowed == true, \"Transfer not allowed\"); \t\r\n\r\n\t\t  require( value > 0, \"Value bring transferred cannot be 0\");\r\n\t\t  \r\n\t\t  require( _sellRestriction[_from] != 0  && _buyRestriction[_to] != 0, \"Not Whitelisted\" );\r\n\t\t  require( _sellRestriction[_from] <= block.timestamp && _buyRestriction[_to] <= block.timestamp, \"KYC Time Restriction\" );\r\n\t\t  \r\n\t\t\t// Following conditions make sure if number of token holders are within limit if enabled \r\n\t\t\t// allowedInvestors = 0 means no restriction on token holders\r\n\t\t\tif(allowedInvestors == 0)\r\n\t\t\t\treturn 1;\r\n\t\t\telse {\r\n\t\t\t\tif( _balances[_to] > 0 || _to == _owner) \r\n\t\t\t\t\t// token can be transferred if the reciver is alreay holding tokens and already counted in currentTotalInvestors\r\n\t\t\t\t\t// or receiver is the company account. Company account do not count in currentTotalInvestors\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(  currentTotalInvestors < allowedInvestors  )\r\n\t\t\t\t\t\t// currentTotalInvestors is within limits of allowedInvestors\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// In this section currentTotalInvestors = allowedInvestors and no more transaction are allowed,  \r\n\t\t\t\t\t\t// except following conditions \r\n\t\t\t\t\t\t// if whole balance is being transferred from sender to another whitelisted investor with 0 balance  and sender is no owner\r\n\t\t\t\t\t\t// in this situation any sender cannot send partial balance to new receiver as it will exceed allowedInvestors limt \r\n\t\t\t\t\t\t// sending the whole balance will exclude current holder from allowedInvestors and new receiver will be added in allowedInvestors \r\n\t\t\t\t\t\t// owner is excluded in this situation because if he send partial or full balance to new investor then it will exceed allowedInvestors\r\n\t\t\t\t\t\tif( _balances[_from] == value && _balances[_to] == 0 && _from != _owner)    \r\n\t\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n    }\r\n\r\n    function messageForTransferRestriction (uint8 restrictionCode)\r\n\toverride\r\n    public\t\r\n    pure \r\n\treturns (string memory message)\r\n    {\r\n        if (restrictionCode == 1) \r\n            message = \"Whitelisted\";\r\n         else \r\n            message = \"Not Whitelisted\";\r\n    }\r\n\t//-----------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n \tfunction totalSupply() \r\n\toverride\r\n\texternal \r\n\tview \r\n\treturns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\r\n    function balanceOf(address account) \r\n\toverride\r\n    external \r\n    view \r\n    returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\t\r\n\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    )  \r\n\toverride\r\n\texternal \r\n\treturns (bool)\r\n\t{\r\n        require(spender != address(0), \"Zero address not allowed\");\r\n\t\trequire(amount > 0, \"Amount cannot be 0\");\r\n\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n    }\r\n\r\n\r\n \r\n    function allowance(address ownby, address spender) \r\n\toverride\r\n\texternal \r\n\tview \r\n\treturns (uint256) {\r\n        return _allowances[ownby][spender];\r\n    }\r\n\r\n\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) \t\r\n\toverride\r\n\texternal \r\n\tnotRestricted (msg.sender, recipient, amount)\r\n\treturns (bool)\r\n\t{\r\n\t\ttransferSharesBetweenInvestors ( msg.sender, recipient, amount );\r\n\t\treturn true;\r\n    }\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) \r\n\toverride\r\n\texternal \r\n\tnotRestricted (sender, recipient, amount)\r\n\treturns (bool)\t\r\n\t{\t\r\n        require(_allowances[sender][msg.sender] >= amount, \"Amount cannot be greater than Allowance\" );\r\n\t\ttransferSharesBetweenInvestors ( sender, recipient, amount );\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\r\n\t\treturn true;\r\n    }\r\n\r\n\r\n\t// Force transfer of tokens\r\n\tfunction forceTransferToken(\r\n        address from,\r\n        uint256 amount\r\n\t)\r\n\tonlyOwner\r\n\texternal \r\n\treturns (bool)  {\r\n\t\ttransferSharesBetweenInvestors(from, _owner, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// Transfer tokens from one account to other\r\n\t// Also manage current number of account holders\r\n\tfunction transferSharesBetweenInvestors (\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\t\r\n\t)\r\n\tinternal\r\n\t{\r\n        \trequire(_balances[sender] >= amount, \" Amount greater than sender balance\");\r\n\t\t\t\r\n\t\t\t// owner account is not counted in currentTotalInvestors in below conditions\r\n\t\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\t\tif( _balances[sender] == 0 && sender != _owner )\r\n\t\t\t\tcurrentTotalInvestors = currentTotalInvestors - 1;\t\t\r\n\r\n\t\t\tif( _balances[recipient] == 0 && recipient != _owner )\r\n\t\t\t\tcurrentTotalInvestors = currentTotalInvestors + 1;\r\n\t\t\t_balances[recipient] = _balances[recipient] + amount;\r\n\r\n\t\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\r\n\r\n    function mint(address account, uint256 amount) \r\n\tonlyOwner \r\n\texternal \r\n\treturns (bool)\t{\r\n        require(account != address(0), \"Zero address not allowed\");\r\n\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[account] = _balances[account] + amount;\r\n        emit Transfer(address(0), account, amount);\r\n\t\treturn true;\r\n    }\r\n\r\n\r\n    function burn(address account, uint256 amount) \r\n\tonlyOwner\r\n\texternal \r\n\treturns (bool)\t{\r\n        require(account != address(0), \"Zero address not allowed\");\r\n        require(_balances[account] >= amount, \"Amount greater than balance\");\r\n\r\n        _totalSupply = _totalSupply - amount;\r\n        _balances[account] = _balances[account] - amount;\r\n        emit Transfer(account, address(0), amount);\r\n\t\treturn true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_allowedInvestors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ShareCertificate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_CompanyHomepage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_CompanyLegalDocs\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_swapContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CompanyHomepage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CompanyLegalDocs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IssuancePlatform\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ShareCertificate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownby\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"buyRestriction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRestriction\",\"type\":\"uint256\"}],\"name\":\"bulkWhitelistWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceTransferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getKYCData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWhitelistAuthorityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceProtocol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyRestriction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRestriction\",\"type\":\"uint256\"}],\"name\":\"modifyKYCData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeWhitelistAuthorityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedInvestors\",\"type\":\"uint256\"}],\"name\":\"resetAllowedInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CompanyHomepage\",\"type\":\"string\"}],\"name\":\"resetCompanyHomepage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CompanyLegalDocs\",\"type\":\"string\"}],\"name\":\"resetCompanyLegalDocs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ShareCertificate\",\"type\":\"string\"}],\"name\":\"resetShareCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setWhitelistAuthorityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC1404TokenMinKYC", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000a544553543535564552470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077435355645524700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b68747470733a2f2f696e766573746f722e636f72656573746174652e696f2f696e766573746f722f73686172652d63657274696669636174652f340000000000000000000000000000000000000000000000000000000000000000000000000d636f72656573746174652e696f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003868747470733a2f2f636f72656573746174652e6e65746c6966792e6170702f5465726d735f436f72656573746174655f323032322e7064660000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e70b4589c4c4a9b7bea918f9c8e7b4fc51785c0457903345754bcb8e1baa3d1"}