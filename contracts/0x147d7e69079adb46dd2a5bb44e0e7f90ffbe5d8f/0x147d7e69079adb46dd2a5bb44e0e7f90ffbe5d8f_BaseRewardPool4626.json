{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BaseRewardPool4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport { IRewards } from \\\"./Interfaces.sol\\\";\\nimport { BaseRewardPool, IDeposit } from \\\"./BaseRewardPool.sol\\\";\\nimport { IERC4626, IERC20Metadata } from \\\"./interfaces/IERC4626.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @title   BaseRewardPool4626\\n * @notice  Simply wraps the BaseRewardPool with the new IERC4626 Vault standard functions.\\n * @dev     See https://github.com/fei-protocol/ERC4626/blob/main/src/interfaces/IERC4626.sol#L58\\n *          This is not so much a vault as a Reward Pool, therefore asset:share ratio is always 1:1.\\n *          To create most utility for this RewardPool, the \\\"asset\\\" has been made to be the crvLP token,\\n *          as opposed to the cvxLP token. Therefore, users can easily deposit crvLP, and it will first\\n *          go to the Booster and mint the cvxLP before performing the normal staking function.\\n */\\ncontract BaseRewardPool4626 is BaseRewardPool, ReentrancyGuard, IERC4626 {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice The address of the underlying ERC20 token used for\\n     * the Vault for accounting, depositing, and withdrawing.\\n     */\\n    address public override asset;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev See BaseRewardPool.sol\\n     */\\n    constructor(\\n        uint256 pid_,\\n        address stakingToken_,\\n        address rewardToken_,\\n        address operator_,\\n        address rewardManager_,\\n        address lptoken_\\n    ) public BaseRewardPool(pid_, stakingToken_, rewardToken_, operator_, rewardManager_) {\\n        asset = lptoken_;\\n        IERC20(asset).safeApprove(operator_, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Total amount of the underlying asset that is \\\"managed\\\" by Vault.\\n     */\\n    function totalAssets() external view virtual override returns(uint256){\\n        return totalSupply();\\n    }\\n\\n    /**\\n     * @notice Mints `shares` Vault shares to `receiver`.\\n     * @dev Because `asset` is not actually what is collected here, first wrap to required token in the booster.\\n     */\\n    function deposit(uint256 assets, address receiver) public virtual override nonReentrant returns (uint256) {\\n        // Transfer \\\"asset\\\" (crvLP) from sender\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), assets);\\n\\n        // Convert crvLP to cvxLP through normal booster deposit process, but don't stake\\n        uint256 balBefore = stakingToken.balanceOf(address(this));\\n        IDeposit(operator).deposit(pid, assets, false);\\n        uint256 balAfter = stakingToken.balanceOf(address(this));\\n\\n        require(balAfter.sub(balBefore) >= assets, \\\"!deposit\\\");\\n\\n        // Perform stake manually, now that the funds have been received\\n        _processStake(assets, receiver);\\n\\n        emit Deposit(msg.sender, receiver, assets, assets);\\n        emit Staked(receiver, assets);\\n        return assets;\\n    }\\n\\n    /**\\n     * @notice Mints exactly `shares` Vault shares to `receiver`\\n     * by depositing `assets` of underlying tokens.\\n     */\\n    function mint(uint256 shares, address receiver) external virtual override returns (uint256) {\\n        return deposit(shares, receiver);\\n    }\\n\\n    /**\\n     * @notice Redeems `shares` from `owner` and sends `assets`\\n     * of underlying tokens to `receiver`.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override nonReentrant returns (uint256) {\\n        if (msg.sender != owner) {\\n            _approve(owner, msg.sender, _allowances[owner][msg.sender].sub(assets, \\\"ERC4626: withdrawal amount exceeds allowance\\\"));\\n        }\\n        \\n        _withdrawAndUnwrapTo(assets, owner, receiver);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, assets);\\n        return assets;\\n    }\\n\\n    /**\\n     * @notice Redeems `shares` from `owner` and sends `assets`\\n     * of underlying tokens to `receiver`.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external virtual override returns (uint256) {\\n        return withdraw(shares, receiver, owner);\\n    }\\n\\n    /**\\n     * @notice The amount of shares that the vault would\\n     * exchange for the amount of assets provided, in an\\n     * ideal scenario where all the conditions are met.\\n     */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return assets;\\n    }\\n\\n    /**\\n     * @notice The amount of assets that the vault would\\n     * exchange for the amount of shares provided, in an\\n     * ideal scenario where all the conditions are met.\\n     */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return shares;\\n    }\\n\\n    /**\\n     * @notice Total number of underlying assets that can\\n     * be deposited by `owner` into the Vault, where `owner`\\n     * corresponds to the input parameter `receiver` of a\\n     * `deposit` call.\\n     */\\n    function maxDeposit(address /* owner */) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     */    \\n    function previewDeposit(uint256 assets) external view virtual override returns(uint256){\\n        return convertToShares(assets);\\n    }\\n\\n    /**\\n     * @notice Total number of underlying shares that can be minted\\n     * for `owner`, where `owner` corresponds to the input\\n     * parameter `receiver` of a `mint` call.\\n     */\\n    function maxMint(address owner) external view virtual override returns (uint256) {\\n        return maxDeposit(owner);\\n    }\\n\\n    /**    \\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     */\\n    function previewMint(uint256 shares) external view virtual override returns(uint256){\\n        return convertToAssets(shares);\\n    }\\n\\n    /**\\n     * @notice Total number of underlying assets that can be\\n     * withdrawn from the Vault by `owner`, where `owner`\\n     * corresponds to the input parameter of a `withdraw` call.\\n     */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /**    \\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     */\\n    function previewWithdraw(uint256 assets) public view virtual override returns(uint256 shares){\\n        return convertToShares(assets);\\n    }\\n\\n    /**\\n     * @notice Total number of underlying shares that can be\\n     * redeemed from the Vault by `owner`, where `owner` corresponds\\n     * to the input parameter of a `redeem` call.\\n     */\\n    function maxRedeem(address owner) external view virtual override returns (uint256) {\\n        return maxWithdraw(owner);\\n    }\\n    /**    \\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     */\\n    function previewRedeem(uint256 shares) external view virtual override returns(uint256){\\n        return previewWithdraw(shares);\\n    }\\n\\n\\n    /* ========== IERC20 ========== */\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override returns (string memory) {\\n        return string(\\n            abi.encodePacked(IERC20Metadata(address(stakingToken)).name(), \\\" Vault\\\")\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return string(\\n            abi.encodePacked(IERC20Metadata(address(stakingToken)).symbol(), \\\"-vault\\\")\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() public view override(BaseRewardPool, IERC20) returns (uint256) {\\n        return BaseRewardPool.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) public view override(BaseRewardPool, IERC20) returns (uint256) {\\n        return BaseRewardPool.balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC4626: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC4626: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     */\\n    function transferFrom(address owner, address recipient, uint256 amount) external override returns (bool) {\\n        uint256 newAllowance = _allowances[owner][msg.sender].sub(amount, \\\"ERC4626: withdrawal amount exceeds allowance\\\");\\n        _approve(owner, msg.sender, newAllowance);\\n        _transfer(owner, recipient, amount);\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal updateReward(from) updateReward(to) virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        for(uint i=0; i < extraRewards.length; i++){\\n            IRewards(extraRewards[i]).withdraw(from , amount);\\n            IRewards(extraRewards[i]).stake(to, amount);\\n        }\\n\\n        _balances[from] = fromBalance.sub(amount);\\n        _balances[to] = _balances[to].add(amount);\\n        emit Transfer(from, to, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\n\\ninterface ICurveGauge {\\n    function deposit(uint256) external;\\n    function balanceOf(address) external view returns (uint256);\\n    function withdraw(uint256) external;\\n    function claim_rewards() external;\\n    function reward_tokens(uint256) external view returns(address);//v2\\n    function rewarded_token() external view returns(address);//v1\\n    function lp_token() external view returns(address);\\n}\\n\\ninterface ICurveVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n    function increase_amount(uint256) external;\\n    function increase_unlock_time(uint256) external;\\n    function withdraw() external;\\n    function smart_wallet_checker() external view returns (address);\\n    function commit_smart_wallet_checker(address) external;\\n    function apply_smart_wallet_checker() external;\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n    function approveWallet(address) external;\\n    function dao() external view returns (address);\\n}\\n\\ninterface IVoting{\\n    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\\n    function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory); \\n    function vote_for_gauge_weights(address,uint256) external;\\n}\\n\\ninterface IMinter{\\n    function mint(address) external;\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdraw(address, address, uint256) external returns (bool);\\n    function withdrawAll(address, address) external returns (bool);\\n    function createLock(uint256, uint256) external returns(bool);\\n    function increaseAmount(uint256) external returns(bool);\\n    function increaseTime(uint256) external returns(bool);\\n    function release() external returns(bool);\\n    function claimCrv(address) external returns (uint256);\\n    function claimRewards(address) external returns(bool);\\n    function claimFees(address,address) external returns (uint256);\\n    function setStashAccess(address, bool) external returns (bool);\\n    function vote(uint256,address,bool) external returns(bool);\\n    function voteGaugeWeight(address,uint256) external returns(bool);\\n    function balanceOfPool(address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function migrate(address to) external;\\n}\\n\\ninterface IRewards{\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash{\\n    function stashRewards() external returns (bool);\\n    function processStash() external returns (bool);\\n    function claimRewards() external returns (bool);\\n    function initialize(uint256 _pid, address _operator, address _staker, address _gauge, address _rewardFactory) external;\\n    function setExtraReward(address) external;\\n}\\n\\ninterface IFeeDistributor {\\n    function claimToken(address user, address token) external returns (uint256);\\n    function claimTokens(address user, address[] calldata tokens) external returns (uint256[] memory);\\n    function getTokenTimeCursor(address token) external view returns (uint256);\\n}\\n\\ninterface ITokenMinter{\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n}\\n\\ninterface IDeposit{\\n    function isShutdown() external view returns(bool);\\n    function balanceOf(address _account) external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\\n    function rewardClaimed(uint256,address,uint256) external;\\n    function withdrawTo(uint256,uint256,address) external;\\n    function claimRewards(uint256,address) external returns(bool);\\n    function rewardArbitrator() external returns(address);\\n    function setGaugeRedirect(uint256 _pid) external returns(bool);\\n    function owner() external returns(address);\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\n}\\n\\ninterface ICrvDeposit{\\n    function deposit(uint256, bool) external;\\n    function lockIncentive() external view returns(uint256);\\n}\\n\\ninterface IRewardFactory{\\n    function setAccess(address,bool) external;\\n    function CreateCrvRewards(uint256,address,address) external returns(address);\\n    function CreateTokenRewards(address,address,address) external returns(address);\\n    function activeRewardCount(address) external view returns(uint256);\\n    function addActiveReward(address,uint256) external returns(bool);\\n    function removeActiveReward(address,uint256) external returns(bool);\\n}\\n\\ninterface IStashFactory{\\n    function CreateStash(uint256,address,address,uint256) external returns(address);\\n    function setImplementation(address, address, address) external;\\n}\\n\\ninterface ITokenFactory{\\n    function CreateDepositToken(address) external returns(address);\\n}\\n\\ninterface IPools{\\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\\n    function forceAddPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\\n    function shutdownPool(uint256 _pid) external returns(bool);\\n    function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\\n    function poolLength() external view returns (uint256);\\n    function gaugeMap(address) external view returns(bool);\\n    function setPoolManager(address _poolM) external;\\n    function shutdownSystem() external;\\n    function setUsedAddress(address[] memory) external;\\n}\\n\\ninterface IVestedEscrow{\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\\n}\\n\\ninterface IRewardDeposit {\\n    function addReward(address, uint256) external;\\n}\\n\\ninterface ILocker {\\n    function lock(address _account, uint256 _amount) external;\\n    function checkpointEpoch() external;\\n    function epochCount() external view returns (uint256);\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n    function getReward(address _account, bool _stake) external;\\n    function getReward(address _account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/BaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: BaseRewardPool.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\nimport \\\"./Interfaces.sol\\\";\\nimport \\\"./interfaces/MathUtil.sol\\\";\\nimport \\\"./utils/Permission.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\\\";\\n\\n\\n/**\\n * @title   BaseRewardPool\\n * @author  Synthetix -> ConvexFinance\\n * @notice  Unipool rewards contract that is re-deployed from rFactory for each staking pool.\\n * @dev     Changes made here by ConvexFinance are to do with the delayed reward allocation. Curve is queued for\\n *          rewards and the distribution only begins once the new rewards are sufficiently large, or the epoch\\n *          has ended. Additionally, enables hooks for `extraRewards` that can be enabled at any point to\\n *          distribute a child reward token (i.e. a secondary one from Curve, or a separate one).\\n */\\ncontract BaseRewardPool is Permission {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable rewardToken;\\n    IERC20 public immutable stakingToken;\\n    uint256 public constant duration = 7 days;\\n\\n    address public immutable operator;\\n    address public immutable rewardManager;\\n\\n    uint256 public immutable pid;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public queuedRewards = 0;\\n    uint256 public currentRewards = 0;\\n    uint256 public historicalRewards = 0;\\n    uint256 public constant newRewardRatio = 830;\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) internal _balances;\\n\\n    address[] public extraRewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev This is called directly from RewardFactory\\n     * @param pid_           Effectively the pool identifier - used in the Booster\\n     * @param stakingToken_  Pool LP token\\n     * @param rewardToken_   Crv\\n     * @param operator_      Booster\\n     * @param rewardManager_ RewardFactory\\n     */\\n    constructor(\\n        uint256 pid_,\\n        address stakingToken_,\\n        address rewardToken_,\\n        address operator_,\\n        address rewardManager_\\n    ) public {\\n        pid = pid_;\\n        stakingToken = IERC20(stakingToken_);\\n        rewardToken = IERC20(rewardToken_);\\n        operator = operator_;\\n        rewardManager = rewardManager_;\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function extraRewardsLength() external view returns (uint256) {\\n        return extraRewards.length;\\n    }\\n\\n    function addExtraReward(address _reward) external returns (bool) {\\n        require(msg.sender == rewardManager, \\\"!authorized\\\");\\n        require(_reward != address(0), \\\"!reward setting\\\");\\n\\n        if (extraRewards.length >= 12) {\\n            return false;\\n        }\\n\\n        extraRewards.push(_reward);\\n        return true;\\n    }\\n\\n    function clearExtraRewards() external {\\n        require(msg.sender == rewardManager, \\\"!authorized\\\");\\n        delete extraRewards;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return MathUtil.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(\\n                rewards[account]\\n            );\\n    }\\n\\n    function stake(uint256 _amount) public returns (bool) {\\n        _processStake(_amount, msg.sender);\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, _amount);\\n\\n        return true;\\n    }\\n\\n    function stakeAll() external returns (bool) {\\n        uint256 balance = stakingToken.balanceOf(msg.sender);\\n        stake(balance);\\n        return true;\\n    }\\n\\n    function stakeFor(address _for, uint256 _amount) public returns (bool) {\\n        _processStake(_amount, _for);\\n\\n        //take away from sender\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(_for, _amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Generic internal staking function that basically does 3 things: update rewards based\\n     *      on previous balance, trigger also on any child contracts, then update balances.\\n     * @param _amount    Units to add to the users balance\\n     * @param _receiver  Address of user who will receive the stake\\n     */\\n    function _processStake(uint256 _amount, address _receiver) internal updateReward(_receiver) {\\n        require(_amount > 0, \\\"RewardPool : Cannot stake 0\\\");\\n\\n        //also stake to linked rewards\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IRewards(extraRewards[i]).stake(_receiver, _amount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n        _balances[_receiver] = _balances[_receiver].add(_amount);\\n\\n        emit Transfer(address(0), _receiver, _amount);\\n    }\\n\\n    function withdraw(uint256 amount, bool claim) public updateReward(msg.sender) returns (bool) {\\n        require(amount > 0, \\\"RewardPool : Cannot withdraw 0\\\");\\n\\n        //also withdraw from linked rewards\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IRewards(extraRewards[i]).withdraw(msg.sender, amount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n\\n        if (claim) {\\n            getReward(msg.sender, true);\\n        }\\n\\n        emit Transfer(msg.sender, address(0), amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawAll(bool claim) external {\\n        withdraw(_balances[msg.sender], claim);\\n    }\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) public returns (bool) {\\n        _withdrawAndUnwrapTo(amount, msg.sender, msg.sender);\\n        //get rewards too\\n        if (claim) {\\n            getReward(msg.sender, true);\\n        }\\n        return true;\\n    }\\n\\n    function _withdrawAndUnwrapTo(\\n        uint256 amount,\\n        address from,\\n        address receiver\\n    ) internal updateReward(from) returns (bool) {\\n        //also withdraw from linked rewards\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IRewards(extraRewards[i]).withdraw(from, amount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[from] = _balances[from].sub(amount);\\n\\n        //tell operator to withdraw from here directly to user\\n        IDeposit(operator).withdrawTo(pid, amount, receiver);\\n        emit Withdrawn(from, amount);\\n\\n        emit Transfer(from, address(0), amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawAllAndUnwrap(bool claim) external {\\n        withdrawAndUnwrap(_balances[msg.sender], claim);\\n    }\\n\\n    /**\\n     * @dev Gives a staker their rewards, with the option of claiming extra rewards\\n     * @param _account     Account for which to claim\\n     * @param _claimExtras Get the child rewards too?\\n     */\\n    function getReward(address _account, bool _claimExtras) public updateReward(_account) returns (bool) {\\n        uint256 reward = earned(_account);\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            rewardToken.safeTransfer(_account, reward);\\n            IDeposit(operator).rewardClaimed(pid, _account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n\\n        //also get rewards from linked rewards\\n        if (_claimExtras) {\\n            for (uint256 i = 0; i < extraRewards.length; i++) {\\n                IRewards(extraRewards[i]).getReward(_account);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Called by a staker to get their allocated rewards\\n     */\\n    function getReward() external returns (bool) {\\n        getReward(msg.sender, true);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sends oLIT to OptionsExerciser for converting it to LIT or liqLit, LIQ and extra rewards are sent to the user\\n     * @param _account      Account for which to claim\\n     * @param _claimExtras  Get the child rewards too?\\n     * @return rewardAmount oLIT amount claimed as reward\\n     */\\n    function getRewardFor(address _account, bool _claimExtras)\\n        public\\n        updateReward(_account)\\n        returns (uint256 rewardAmount)\\n    {\\n        require(hasPermission(_account, msg.sender), \\\"permission not granted\\\");\\n\\n        uint256 reward = earned(_account);\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            //olit to optionsExerciser\\n            rewardToken.safeTransfer(msg.sender, reward);\\n            //liq to account\\n            IDeposit(operator).rewardClaimed(pid, _account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n\\n        //also get rewards from linked rewards\\n        if (_claimExtras) {\\n            for (uint256 i = 0; i < extraRewards.length; i++) {\\n                IRewards(extraRewards[i]).getReward(_account);\\n            }\\n        }\\n        return reward;\\n    }\\n\\n    /**\\n     * @dev Processes queued rewards in isolation, providing the period has finished.\\n     *      This allows a cheaper way to trigger rewards on low value pools.\\n     */\\n    function processIdleRewards() external {\\n        if (block.timestamp >= periodFinish && queuedRewards > 0) {\\n            notifyRewardAmount(queuedRewards);\\n            queuedRewards = 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Called by the booster to allocate new Crv rewards to this pool\\n     *      Curve is queued for rewards and the distribution only begins once the new rewards are sufficiently\\n     *      large, or the epoch has ended.\\n     */\\n    function queueNewRewards(uint256 _rewards) external returns (bool) {\\n        require(msg.sender == operator, \\\"!authorized\\\");\\n\\n        _rewards = _rewards.add(queuedRewards);\\n\\n        if (block.timestamp >= periodFinish) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n            return true;\\n        }\\n\\n        //et = now - (finish-duration)\\n        uint256 elapsedTime = block.timestamp.sub(periodFinish.sub(duration));\\n        //current at now: rewardRate * elapsedTime\\n        uint256 currentAtNow = rewardRate * elapsedTime;\\n        uint256 queuedRatio = currentAtNow.mul(1000).div(_rewards);\\n\\n        //uint256 queuedRatio = currentRewards.mul(1000).div(_rewards);\\n        if (queuedRatio < newRewardRatio) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n        } else {\\n            queuedRewards = _rewards;\\n        }\\n        return true;\\n    }\\n\\n    function notifyRewardAmount(uint256 reward) internal updateReward(address(0)) {\\n        historicalRewards = historicalRewards.add(reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(duration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            reward = reward.add(leftover);\\n            rewardRate = reward.div(duration);\\n        }\\n        currentRewards = reward;\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(duration);\\n        emit RewardAdded(reward);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport { IERC20Metadata } from \\\"./IERC20Metadata.sol\\\";\\n\\n/// @title ERC4626 interface\\n/// See: https://eips.ethereum.org/EIPS/eip-4626\\n\\nabstract contract IERC4626 is IERC20Metadata {\\n\\n    /*////////////////////////////////////////////////////////\\n                      Events\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice `caller` has exchanged `assets` for `shares`, and transferred those `shares` to `owner`\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /// @notice `caller` has exchanged `shares`, owned by `owner`, for\\n    ///         `assets`, and transferred those `assets` to `receiver`.\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*////////////////////////////////////////////////////////\\n                      Vault properties\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice The address of the underlying ERC20 token used for\\n    /// the Vault for accounting, depositing, and withdrawing.\\n    function asset() external view virtual returns(address);\\n\\n    /// @notice Total amount of the underlying asset that\\n    /// is \\\"managed\\\" by Vault.\\n    function totalAssets() external view virtual returns(uint256);\\n\\n    /*////////////////////////////////////////////////////////\\n                      Deposit/Withdrawal Logic\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice Mints `shares` Vault shares to `receiver` by\\n    /// depositing exactly `assets` of underlying tokens.\\n    function deposit(uint256 assets, address receiver) external virtual returns(uint256 shares);\\n\\n    /// @notice Mints exactly `shares` Vault shares to `receiver`\\n    /// by depositing `assets` of underlying tokens.\\n    function mint(uint256 shares, address receiver) external virtual returns(uint256 assets);\\n\\n    /// @notice Redeems `shares` from `owner` and sends `assets`\\n    /// of underlying tokens to `receiver`.\\n    function withdraw(uint256 assets, address receiver, address owner) external virtual returns(uint256 shares);\\n\\n    /// @notice Redeems `shares` from `owner` and sends `assets`\\n    /// of underlying tokens to `receiver`.\\n    function redeem(uint256 shares, address receiver, address owner) external virtual returns(uint256 assets);\\n\\n    /*////////////////////////////////////////////////////////\\n                      Vault Accounting Logic\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice The amount of shares that the vault would\\n    /// exchange for the amount of assets provided, in an\\n    /// ideal scenario where all the conditions are met.\\n    function convertToShares(uint256 assets) external view virtual returns(uint256 shares);\\n\\n    /// @notice The amount of assets that the vault would\\n    /// exchange for the amount of shares provided, in an\\n    /// ideal scenario where all the conditions are met.\\n    function convertToAssets(uint256 shares) external view virtual returns(uint256 assets);\\n\\n    /// @notice Total number of underlying assets that can\\n    /// be deposited by `owner` into the Vault, where `owner`\\n    /// corresponds to the input parameter `receiver` of a\\n    /// `deposit` call.\\n    function maxDeposit(address owner) external view virtual returns(uint256 maxAssets);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their deposit at the current block, given\\n    /// current on-chain conditions.\\n    function previewDeposit(uint256 assets) external view virtual returns(uint256 shares);\\n\\n    /// @notice Total number of underlying shares that can be minted\\n    /// for `owner`, where `owner` corresponds to the input\\n    /// parameter `receiver` of a `mint` call.\\n    function maxMint(address owner) external view virtual returns(uint256 maxShares);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their mint at the current block, given\\n    /// current on-chain conditions.\\n    function previewMint(uint256 shares) external view virtual returns(uint256 assets);\\n\\n    /// @notice Total number of underlying assets that can be\\n    /// withdrawn from the Vault by `owner`, where `owner`\\n    /// corresponds to the input parameter of a `withdraw` call.\\n    function maxWithdraw(address owner) external view virtual returns(uint256 maxAssets);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their withdrawal at the current block,\\n    /// given current on-chain conditions.\\n    function previewWithdraw(uint256 assets) external view virtual returns(uint256 shares);\\n\\n    /// @notice Total number of underlying shares that can be\\n    /// redeemed from the Vault by `owner`, where `owner` corresponds\\n    /// to the input parameter of a `redeem` call.\\n    function maxRedeem(address owner) external view virtual returns(uint256 maxShares);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their redeemption at the current block,\\n    /// given current on-chain conditions.\\n    function previewRedeem(uint256 shares) external view virtual returns(uint256 assets);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MathUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Permission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @title   Permission\\n * @author  Liquis Finance\\n * @notice  A simple permissions system giving a `caller` the ability to act on behalf of `owner`\\n * @dev     Other than ERC20 Allowances, Permissions are boolean giving `caller` the ability\\n *          to call a specific contract function without further controls. \\n *          Permission are thought to allow users to give peripheral contracts permission to act\\n *          on their behalf in order to improve UX e.g. around claiming rewards.\\n */\\nabstract contract Permission {\\n\\n    event ModifyPermission(address owner, address caller, bool grant);\\n\\n    /// @dev Specify whether `caller` can act on behalf of `owner`\\n    mapping(address => mapping(address => bool)) private _permitted;\\n\\n    /**\\n     * @notice Allow (or revoke allowance) `caller` to act on behalf of `msg.sender`\\n     * @param caller Address of the `caller`\\n     * @param permitted Allow (true) or revoke (false) permission\\n     */\\n    function modifyPermission(address caller, bool permitted) external {\\n        _permitted[msg.sender][caller] = permitted;\\n        emit ModifyPermission(msg.sender, caller, permitted);\\n    }\\n\\n    /** \\n     * @notice Checks permission of `caller` to act on behalf of `owner`\\n     * @param owner Address of the `owner`\\n     * @param caller Address of the `caller`\\n     * @return permission Whether `caller` has the permission\\n     */\\n    function hasPermission(address owner, address caller) public view returns (bool) {\\n        return owner == caller || _permitted[owner][caller];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lptoken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"grant\",\"type\":\"bool\"}],\"name\":\"ModifyPermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"addExtraReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimExtras\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimExtras\",\"type\":\"bool\"}],\"name\":\"getRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historicalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permitted\",\"type\":\"bool\"}],\"name\":\"modifyPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processIdleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"queueNewRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAllAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BaseRewardPool4626", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003301e18b6f05af0caa5744ecbfb64cae0c1392c5000000000000000000000000627fee87d0d9d2c55098a06ac805db8f98b158aa000000000000000000000000631e58246a88c3957763e1469cb52f93bc1ddcf2000000000000000000000000368dda6c8cce7283f4ee2577b8cbe454f40f9a4800000000000000000000000005058071e3e799f0c6341f44843636e7c441c1fb", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}