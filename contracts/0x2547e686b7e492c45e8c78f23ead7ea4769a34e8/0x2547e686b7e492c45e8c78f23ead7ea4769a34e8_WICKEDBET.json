{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**WickedBet... Win the Lot! \r\n\r\n The first ever business to offer fully-insured global lotto bets with Crypto.\r\n\r\nLinktree: https://linktr.ee/wickedbet\r\n\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(ZERO);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != ZERO, \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract WICKEDBET is IERC20, Ownable {\r\n\r\n    address private WETH;\r\n\r\n    string private constant _name = \"Wicked Bet\";\r\n    string private constant _symbol = \"WIK\";\r\n    uint8 private constant _decimals = 18;\r\n    \r\n    uint256 _totalSupply = 1 * 10**8 * (10 ** _decimals);\r\n    uint256 public swapThreshold = _totalSupply / 1000; // Starting at 0.1%\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint[3] taxesCollected = [0, 0];\r\n\r\n    uint256 public launchedAt;\r\n    address public liquidityPool = DEAD;\r\n\r\n    // All fees are in basis points (100 = 1%)\r\n    uint256 private buyWik = 300;\r\n    uint256 private sellWik = 300;\r\n    uint256 private buyLP = 200;\r\n    uint256 private sellLP = 200;\r\n    uint256 private xferBurn = 50;\r\n\r\n    uint256 _baseBuyFee = buyWik + buyLP;\r\n    uint256 _baseSellFee = sellWik + sellLP;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address public factory;\r\n    address public wickedWallet = payable(0x000000000000000000000000000000000000dEaD);\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingOpen = false;\r\n\r\n    //Event Logs\r\n    event LiquidityPoolUpdated(address indexed _newPool);\r\n    event WickedWalletUpdated(address indexed _newWallet);\r\n    event RouterUpdated(IDEXRouter indexed _newRouter);\r\n    event BuyFeesUpdated(uint256 _newWik, uint256 _newLp);\r\n    event SellFeesUpdated(uint256 _neWik, uint256 _newLp);\r\n    event FeeExemptionChanged(address indexed _exemptWallet, bool _exempt);\r\n    event SwapbackSettingsChanged(bool _enabled, uint256 _newSwapbackAmount);\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            \r\n        WETH = router.WETH();\r\n        \r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[wickedWallet] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        _balances[owner()] = _totalSupply;\r\n    \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function launchSequence() external onlyOwner {\r\n\t    require(launchedAt == 0, \"Already launched\");\r\n        launchedAt = block.number;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function baseBuyFee() external view returns (uint256) {return _baseBuyFee; }\r\n    function baseSellFee() external view returns (uint256) {return _baseSellFee; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n//Transfer Functions\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(sender != owner() && recipient != owner()) { require(tradingOpen, \"Trading not active\"); }\r\n        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }\r\n    \tif(sender != pair && recipient != pair) { return _burnTransfer(sender, recipient, amount); }\r\n        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        \r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient] + finalAmount;\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }  \r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }  \r\n\r\n    function _burnTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint _burnFee = amount * xferBurn / 10000;\r\n        uint256 _finalAmount = !isFeeExempt[sender] ? amount - _burnFee : amount;\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + _finalAmount;\r\n\r\n        if(!isFeeExempt[sender]) { \r\n            _balances[DEAD] = _balances[DEAD] + _burnFee; \r\n            emit Burn(sender, DEAD, _burnFee); \r\n            }\r\n\r\n        emit Transfer(sender, recipient, _finalAmount);\r\n        return true;\r\n    }\r\n\r\n//Tax Functions\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 wikTaxB = amount * buyWik / 10000;\r\n\t    uint256 wikTaxS = amount * sellWik / 10000;\r\n        uint256 lpTaxB = amount * buyLP / 10000;\r\n\t    uint256 lpTaxS = amount * sellLP / 10000;\r\n        uint256 taxToGet;\r\n\r\n\t    if(sender == pair && recipient != address(pair) && !isFeeExempt[recipient]) {\r\n            taxToGet = wikTaxB + lpTaxB;\r\n\t        addTaxCollected(wikTaxB, lpTaxB);\r\n\t    }\r\n\r\n\t    if(!inSwapAndLiquify && sender != pair && tradingOpen) {\r\n\t        taxToGet = wikTaxS + lpTaxS;\r\n\t        addTaxCollected(wikTaxS, lpTaxS);\r\n\t    }\r\n\r\n        _balances[address(this)] = _balances[address(this)] + taxToGet;\r\n        emit Transfer(sender, address(this), taxToGet);\r\n\r\n        return amount - taxToGet;\r\n    }\r\n\r\n    function addTaxCollected(uint wik, uint lp) internal {\r\n        taxesCollected[0] += wik;\r\n        taxesCollected[1] += lp;\r\n    }\r\n\r\n//LP and Swapback Functions\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        approve(address(this), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityPool,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n    \r\n        uint256 tokenBalance = _balances[address(this)];\r\n        uint256 _totalCollected = taxesCollected[0] + taxesCollected[1];\r\n        uint256 wikShare = taxesCollected[0];\r\n        uint256 lpShare = taxesCollected[1];\r\n        uint256 tokensForLiquidity = lpShare / 2;  \r\n        uint256 amountToSwap = tokenBalance - tokensForLiquidity;\r\n\r\n        swapTokensForETH(amountToSwap);\r\n\r\n        uint256 totalETHBalance = address(this).balance;\r\n        uint256 ETHForWik = totalETHBalance * wikShare / _totalCollected;\r\n        uint256 ETHForLiquidity = totalETHBalance * lpShare / _totalCollected / 2;\r\n      \r\n        if (totalETHBalance > 0) {\r\n            payable(wickedWallet).transfer(ETHForWik);\r\n        }\r\n  \r\n        if (tokensForLiquidity > 0) {\r\n            addLiquidity(tokensForLiquidity, ETHForLiquidity);\r\n        }\r\n\r\n\t    delete taxesCollected;\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        swapBack();\r\n    }\r\n\r\n// Update/Change Functions\r\n\r\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n        emit FeeExemptionChanged(holder, exempt);\r\n    }\r\n\r\n    function setWickedWallet(address payable newWickedWallet) external onlyOwner {\r\n        require(newWickedWallet != address(0), \"Cannot be set to zero address\");\r\n        isFeeExempt[wickedWallet] = false;\r\n        wickedWallet = payable(newWickedWallet);\r\n        isFeeExempt[wickedWallet] = true;\r\n        emit WickedWalletUpdated(newWickedWallet);\r\n    }\r\n\r\n    function setLiquidityPool(address newLiquidityPool) external onlyOwner {\r\n        require(newLiquidityPool != address(0), \"Cannot be set to zero address\");\r\n        liquidityPool = newLiquidityPool;\r\n        emit LiquidityPoolUpdated(newLiquidityPool);\r\n    }\r\n\r\n    function changeSwapBackSettings(bool enableSwapback, uint256 newSwapbackLimit) external onlyOwner {\r\n        require(newSwapbackLimit >= 10000 * _decimals, \"Limit must be over 10,000 tokens\");\r\n        swapAndLiquifyEnabled  = enableSwapback;\r\n        swapThreshold = newSwapbackLimit;\r\n        emit SwapbackSettingsChanged(enableSwapback, newSwapbackLimit);\r\n    }\r\n\r\n\r\n    function updateBuyFees(uint256 newBuyWikFee, uint256 newBuyLpFee) public onlyOwner {\r\n\t    require(newBuyWikFee + newBuyLpFee <= 500, \"Fees Too High\");\r\n\t    buyWik = newBuyWikFee;\r\n\t    buyLP = newBuyLpFee;\r\n        emit BuyFeesUpdated(newBuyWikFee, newBuyLpFee);\r\n    }\r\n    \r\n    function updateSellFees(uint256 newSellWikFee,uint256 newSellLpFee) public onlyOwner {\r\n\t    require(newSellWikFee + newSellLpFee <= 500, \"Fees Too High\");\r\n\t    sellWik = newSellWikFee;\r\n\t    sellLP = newSellLpFee;\r\n        emit SellFeesUpdated(newSellWikFee, newSellLpFee);\r\n    }\r\n\r\n    function updateRouter(IDEXRouter _newRouter) external onlyOwner {\r\n        require(_newRouter != IDEXRouter(ZERO), \"Cannot be set to zero address\");\r\n        require(_newRouter != IDEXRouter(DEAD), \"Cannot be set to zero address\");\r\n        router = _newRouter;\r\n        emit RouterUpdated(_newRouter);\r\n    }\r\n\r\n    function clearStuckETH() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if(contractETHBalance > 0) { \r\n            payable(wickedWallet).transfer(contractETHBalance);\r\n    \t}\r\n    }\r\n\r\n    function clearStuckTokens(address contractAddress) external onlyOwner {\r\n        IERC20 erc20Token = IERC20(contractAddress);\r\n        uint256 balance = erc20Token.balanceOf(address(this));\r\n        erc20Token.transfer(wickedWallet, balance);\r\n        if(contractAddress == address(this)) { delete taxesCollected; }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newWik\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLp\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_exemptWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDEXRouter\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_neWik\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLp\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSwapbackAmount\",\"type\":\"uint256\"}],\"name\":\"SwapbackSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"WickedWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapbackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"clearStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWickedWallet\",\"type\":\"address\"}],\"name\":\"setWickedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyWikFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyLpFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellWikFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLpFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wickedWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WICKEDBET", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44e4af999ddd7a78baa993e4dd0d21bc92d2b6bf3a4bc966f7073a97dd2b06fa"}