{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUtil {\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ninterface ICurveGauge {\r\n    function deposit(uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function withdraw(uint256) external;\r\n    function claim_rewards() external;\r\n    function reward_tokens(uint256) external view returns(address);//v2\r\n    function rewarded_token() external view returns(address);//v1\r\n}\r\n\r\ninterface ICurveVoteEscrow {\r\n    function create_lock(uint256, uint256) external;\r\n    function increase_amount(uint256) external;\r\n    function increase_unlock_time(uint256) external;\r\n    function withdraw() external;\r\n    function smart_wallet_checker() external view returns (address);\r\n}\r\n\r\ninterface IWalletChecker {\r\n    function check(address) external view returns (bool);\r\n}\r\n\r\ninterface IVoting{\r\n    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\r\n    function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory); \r\n    function vote_for_gauge_weights(address,uint256) external;\r\n}\r\n\r\ninterface IMinter{\r\n    function mint(address) external;\r\n}\r\n\r\ninterface IRegistry{\r\n    function get_registry() external view returns(address);\r\n    function get_address(uint256 _id) external view returns(address);\r\n    function gauge_controller() external view returns(address);\r\n    function get_lp_token(address) external view returns(address);\r\n    function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\r\n}\r\n\r\ninterface IStaker{\r\n    function deposit(address, address) external;\r\n    function withdraw(address) external;\r\n    function withdraw(address, address, uint256) external;\r\n    function withdrawAll(address, address) external;\r\n    function createLock(uint256, uint256) external;\r\n    function increaseAmount(uint256) external;\r\n    function increaseTime(uint256) external;\r\n    function release() external;\r\n    function claimCrv(address) external returns (uint256);\r\n    function claimRewards(address) external;\r\n    function claimFees(address,address) external;\r\n    function setStashAccess(address, bool) external;\r\n    function vote(uint256,address,bool) external;\r\n    function voteGaugeWeight(address,uint256) external;\r\n    function balanceOfPool(address) external view returns (uint256);\r\n    function operator() external view returns (address);\r\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\r\n}\r\n\r\ninterface IRewards{\r\n    function stake(address, uint256) external;\r\n    function stakeFor(address, uint256) external;\r\n    function withdraw(address, uint256) external;\r\n    function exit(address) external;\r\n    function getReward(address) external;\r\n    function queueNewRewards(uint256) external;\r\n    function notifyRewardAmount(uint256) external;\r\n    function addExtraReward(address) external;\r\n    function stakingToken() external view returns (address);\r\n    function rewardToken() external view returns(address);\r\n    function earned(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IStash{\r\n    function stashRewards() external returns (bool);\r\n    function processStash() external returns (bool);\r\n    function claimRewards() external returns (bool);\r\n}\r\n\r\ninterface IFeeDistro{\r\n    function claim() external;\r\n    function token() external view returns(address);\r\n}\r\n\r\ninterface ITokenMinter{\r\n    function mint(address,uint256) external;\r\n    function burn(address,uint256) external;\r\n}\r\n\r\ninterface IDeposit{\r\n    function isShutdown() external view returns(bool);\r\n    function balanceOf(address _account) external view returns(uint256);\r\n    function totalSupply() external view returns(uint256);\r\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\r\n    function rewardClaimed(uint256,address,uint256) external;\r\n    function withdrawTo(uint256,uint256,address) external;\r\n    function claimRewards(uint256,address) external returns(bool);\r\n    function rewardArbitrator() external returns(address);\r\n    function setGaugeRedirect(uint256 _pid) external returns(bool);\r\n}\r\n\r\ninterface ICrvDeposit{\r\n    function deposit(uint256, bool) external;\r\n    function lockIncentive() external view returns(uint256);\r\n}\r\n\r\ninterface IRewardFactory{\r\n    function setAccess(address,bool) external;\r\n    function CreateCrvRewards(uint256,address) external returns(address);\r\n    function CreateTokenRewards(address,address,address) external returns(address);\r\n    function activeRewardCount(address) external view returns(uint256);\r\n    function addActiveReward(address,uint256) external returns(bool);\r\n    function removeActiveReward(address,uint256) external returns(bool);\r\n}\r\n\r\ninterface IStashFactory{\r\n    function CreateStash(uint256,address,address,uint256) external returns(address);\r\n}\r\n\r\ninterface ITokenFactory{\r\n    function CreateDepositToken(address) external returns(address);\r\n}\r\n\r\ninterface IPools{\r\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\r\n    function shutdownPool(uint256 _pid) external returns(bool);\r\n    function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\r\n    function poolLength() external view returns (uint256);\r\n    function gaugeMap(address) external view returns(bool);\r\n    function setPoolManager(address _poolM) external;\r\n}\r\n\r\ninterface IVestedEscrow{\r\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\ISushiRewarder.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ISushiRewarder {\r\n    using SafeERC20 for IERC20;\r\n    function onSushiReward(uint256 pid, address user, address recipient, uint256 sushiAmount, uint256 newLpAmount) external;\r\n    function pendingTokens(uint256 pid, address user, uint256 sushiAmount) external view returns (IERC20[] memory, uint256[] memory);\r\n}\r\n\r\n\r\n// File: contracts\\ConvexRewarder.sol\r\n\r\npragma solidity 0.6.12;\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-07-17\r\n */\r\n\r\n/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Docs: https://docs.synthetix.io/\r\n*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n\r\n\r\ninterface IMasterChefV2 {\r\n    function lpToken(uint i) external view returns (IERC20);\r\n}\r\n\r\ninterface IConvexChef{\r\n    function userInfo(uint256 _pid, address _account) external view returns(uint256,uint256);\r\n    function claim(uint256 _pid, address _account) external;\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\n\r\ncontract ConvexRewarder is ISushiRewarder{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public immutable rewardToken;\r\n    IERC20 public immutable stakingToken;\r\n    uint256 public constant duration = 5 days;\r\n\r\n    address public immutable rewardManager;\r\n    address public immutable sushiMasterChef;\r\n    address public immutable convexMasterChef;\r\n    uint256 public immutable chefPid;\r\n\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 public currentRewards = 0;\r\n    uint256 private _totalSupply;\r\n    uint256 public sushiPid;\r\n    uint256 public previousRewardDebt = 0;\r\n    bool public isInit = false;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _sushiBalances;\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    address[] public extraRewards;\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    constructor(\r\n        address stakingToken_,\r\n        address rewardToken_,\r\n        address rewardManager_,\r\n        address sushiMasterChef_,\r\n        address convexMasterChef_,\r\n        uint256 chefPid_\r\n    ) public {\r\n        stakingToken = IERC20(stakingToken_);\r\n        rewardToken = IERC20(rewardToken_);\r\n        rewardManager = rewardManager_;\r\n        sushiMasterChef = sushiMasterChef_;\r\n        convexMasterChef = convexMasterChef_;\r\n        chefPid = chefPid_;\r\n    }\r\n\r\n    //stake a dummy token into convex chef to start earning rewards\r\n    //initiate a week's worth of awards\r\n    function init(IERC20 dummyToken) external {\r\n        require(!isInit,\"already init\");\r\n        isInit = true;\r\n        uint256 balance = dummyToken.balanceOf(msg.sender);\r\n        require(balance != 0, \"Balance must exceed 0\");\r\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\r\n        dummyToken.approve(convexMasterChef, balance);\r\n        IConvexChef(convexMasterChef).deposit(chefPid, balance);\r\n        initRewards();\r\n    }\r\n\r\n    //claim from convex master chef and add to rewards\r\n    function harvestFromMasterChef() public {\r\n        IConvexChef(convexMasterChef).claim(chefPid, address(this));\r\n        notifyRewardAmount();\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account].add(_sushiBalances[account]);\r\n    }\r\n\r\n    function localBalanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function sushiBalanceOf(address account) public view returns (uint256) {\r\n        return _sushiBalances[account];\r\n    }\r\n\r\n    function extraRewardsLength() external view returns (uint256) {\r\n        return extraRewards.length;\r\n    }\r\n\r\n    function addExtraReward(address _reward) external {\r\n        require(msg.sender == rewardManager, \"!authorized\");\r\n        require(_reward != address(0),\"!reward setting\");\r\n\r\n        extraRewards.push(_reward);\r\n    }\r\n    function clearExtraRewards() external{\r\n        require(msg.sender == rewardManager, \"!authorized\");\r\n        delete extraRewards;\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return MathUtil.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        uint256 supply = totalSupply();\r\n        if (supply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(supply)\r\n            );\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return\r\n            _balances[account].add(_sushiBalances[account])\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n                .div(1e18)\r\n                .add(rewards[account]);\r\n    }\r\n\r\n    function stake(uint256 _amount)\r\n        public\r\n        updateReward(msg.sender)\r\n    {\r\n        require(_amount > 0, 'RewardPool : Cannot stake 0');\r\n\r\n        //check if new rewards should be pulled from convex chef\r\n        checkHarvest();\r\n\r\n        //also stake to linked rewards\r\n        uint256 length = extraRewards.length;\r\n        for(uint i=0; i < length; i++){\r\n            IRewards(extraRewards[i]).stake(msg.sender, _amount);\r\n        }\r\n\r\n        //add supply\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        //add to sender balance sheet\r\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\r\n        //take tokens from sender\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n\r\n    function stakeAll() external{\r\n        uint256 balance = stakingToken.balanceOf(msg.sender);\r\n        stake(balance);\r\n    }\r\n\r\n    function stakeFor(address _for, uint256 _amount)\r\n        public\r\n        updateReward(_for)\r\n    {\r\n        require(_amount > 0, 'RewardPool : Cannot stake 0');\r\n\r\n        //check if new rewards should be pulled from convex chef\r\n        checkHarvest();\r\n\r\n        //also stake to linked rewards\r\n        uint256 length = extraRewards.length;\r\n        for(uint i=0; i < length; i++){\r\n            IRewards(extraRewards[i]).stake(_for, _amount);\r\n        }\r\n\r\n         //add supply\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        //add to _for's balance sheet\r\n        _balances[_for] = _balances[_for].add(_amount);\r\n        //take tokens from sender\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount, bool claim)\r\n        public\r\n        updateReward(msg.sender)\r\n    {\r\n        require(_amount > 0, 'RewardPool : Cannot withdraw 0');\r\n\r\n        //also withdraw from linked rewards\r\n        uint256 length = extraRewards.length;\r\n        for(uint i=0; i < length; i++){\r\n            IRewards(extraRewards[i]).withdraw(msg.sender, _amount);\r\n        }\r\n\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n        stakingToken.safeTransfer(msg.sender, _amount);\r\n        emit Withdrawn(msg.sender, _amount);\r\n\r\n        if(claim){\r\n            getReward(msg.sender,true);\r\n        }\r\n    }\r\n\r\n    function withdrawAll(bool claim) external{\r\n        withdraw(_balances[msg.sender],claim);\r\n    }\r\n\r\n    function getReward(address _account, bool _claimExtras) public updateReward(_account){\r\n\r\n        uint256 reward = earned(_account);\r\n        if (reward > 0) {\r\n            rewards[_account] = 0;\r\n            rewardToken.safeTransfer(_account, reward);\r\n            emit RewardPaid(_account, reward);\r\n        }\r\n\r\n        //also get rewards from linked rewards\r\n        if(_claimExtras){\r\n            uint256 length = extraRewards.length;\r\n            for(uint i=0; i < length; i++){\r\n                IRewards(extraRewards[i]).getReward(_account);\r\n            }\r\n        }\r\n\r\n        //check if new rewards should be pulled from convex chef\r\n        checkHarvest();\r\n    }\r\n\r\n    function getReward() external{\r\n        getReward(msg.sender,true);\r\n    }\r\n\r\n    function checkHarvest() internal{\r\n        //if getting close to the end of the period\r\n        //claim and extend\r\n        if (periodFinish > 0 && block.timestamp >= periodFinish.sub(1 days)  ) {\r\n            harvestFromMasterChef();\r\n        }\r\n    }\r\n\r\n    //initialize the period of rewards\r\n    //since the reward rate should be same as speed as rewards coming in from the chef\r\n    // it will never catch up unless there is a seed\r\n    // (or if it mines for a week with 0 distribution)\r\n    function initRewards() internal updateReward(address(0)){\r\n        uint256 reward = rewardToken.balanceOf(address(this));\r\n        \r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = reward.div(duration);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            reward = reward.add(leftover);\r\n            rewardRate = reward.div(duration);\r\n        }\r\n        currentRewards = reward;\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(duration);\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    function notifyRewardAmount()\r\n        internal\r\n        updateReward(address(0))\r\n    {\r\n        if(!isInit){\r\n            //return smoothly if not init yet.\r\n            //allow stakers to join but dont start distribution\r\n            return;\r\n        }\r\n        //convex chef allows anyone to claim, so we have to look at reward debt difference\r\n        //so that we know how much we have claimed since previous notifyRewardAmount()\r\n        (,uint256 rewardDebt) = IConvexChef(convexMasterChef).userInfo(chefPid, address(this));\r\n        uint256 reward = rewardDebt.sub(previousRewardDebt);\r\n        previousRewardDebt = rewardDebt;\r\n        if(reward == 0) return;\r\n        \r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = reward.div(duration);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            reward = reward.add(leftover);\r\n            rewardRate = reward.div(duration);\r\n        }\r\n        currentRewards = reward;\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(duration);\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    function onSushiReward(\r\n        uint256 pid,\r\n        address user,\r\n        address recipient,\r\n        uint256 sushiAmount,\r\n        uint256 newLpAmount\r\n    )\r\n        override\r\n        external\r\n        updateReward(user)\r\n    {\r\n        require(msg.sender == sushiMasterChef);\r\n      \r\n        // On the first call, validate that the pid correctly maps to our stakingToken\r\n        // Sushi MasterChef does not allow modifying a pid after it has been set, so we can trust\r\n        // this to be safe in the future. If we did not validate the pid going forward, there\r\n        // could be an attack vector by setting this contract as rewardContract on a 2nd pid\r\n        uint256 _sushiPid = sushiPid;\r\n        if (_sushiPid == 0) {\r\n            require(IMasterChefV2(msg.sender).lpToken(pid) == stakingToken);\r\n            sushiPid = pid;\r\n        } else {\r\n            require(pid == _sushiPid);\r\n        }\r\n\r\n        if (sushiAmount > 0) {\r\n            // if sushiAmount > 0 the call is claiming sushi and should also claim other rewards\r\n\r\n            //sushi allows claiming for user and transferring to recipient, but we do not.\r\n            //just claim to original account\r\n            getReward(user,true);\r\n        }\r\n\r\n        uint256 userBalance = _sushiBalances[user];\r\n        if (newLpAmount > userBalance) {\r\n            // reported balance in sushi > internal accounting, user has deposited\r\n            uint256 amount = newLpAmount.sub(userBalance);\r\n            uint256 length = extraRewards.length;\r\n            for(uint i=0; i < length; i++){\r\n                IRewards(extraRewards[i]).stake(user, amount);\r\n            }\r\n            _totalSupply = _totalSupply.add(amount);\r\n            _sushiBalances[user] = newLpAmount;\r\n\r\n        } else if (newLpAmount < userBalance) {\r\n            // reported balance in sushi < internal accounting, user has withdrawn\r\n            uint256 amount = userBalance.sub(newLpAmount);\r\n            uint256 length = extraRewards.length;\r\n            for(uint i=0; i < length; i++){\r\n                IRewards(extraRewards[i]).withdraw(msg.sender, amount);\r\n            }\r\n            _totalSupply = _totalSupply.sub(amount);\r\n            _sushiBalances[user] = newLpAmount;\r\n        }\r\n    }\r\n\r\n    function pendingTokens(\r\n        uint256 pid,\r\n        address user,\r\n        uint256 sushiAmount\r\n    )\r\n        override\r\n        external\r\n        view\r\n        returns (IERC20[] memory, uint256[] memory)\r\n    {\r\n        //extra rewards length\r\n        uint256 length = extraRewards.length;\r\n\r\n        //combine base and extras\r\n        IERC20[] memory rewardTokens = new IERC20[](1+length);\r\n        rewardTokens[0] = rewardToken;\r\n        for(uint i=0; i < length; i++){\r\n           rewardTokens[1+i] = IERC20(IRewards(extraRewards[i]).rewardToken());\r\n        }\r\n        uint256[] memory earnedAmounts = new uint256[](1+length);\r\n        earnedAmounts[0] = earned(user);\r\n        for(uint i=0; i < length; i++){\r\n            earnedAmounts[1+i] = IRewards(extraRewards[i]).earned(user);\r\n        }\r\n        return (rewardTokens,earnedAmounts);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushiMasterChef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"convexMasterChef_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefPid_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"addExtraReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chefPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexMasterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimExtras\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFromMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"dummyToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"localBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sushiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpAmount\",\"type\":\"uint256\"}],\"name\":\"onSushiReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sushiAmount\",\"type\":\"uint256\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousRewardDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sushiBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiMasterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexRewarder", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000033f6ddaea2a8a54062e021873bcaee006cdf40070000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000a3c5a1e09150b75ff251c1a7815a07182c3de2fb000000000000000000000000ef0881ec094552b2e128cf945ef17a6752b4ec5d0000000000000000000000005f465e9fcffc217c5849906216581a657cd606050000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://beb8207404e64fbcaafb05d7f7891010c32fb260f88665f14e3262e011aef2d1"}