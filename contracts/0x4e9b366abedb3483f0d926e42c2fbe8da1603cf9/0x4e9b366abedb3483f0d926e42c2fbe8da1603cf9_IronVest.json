{"SourceCode": "// File: @openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20PermitUpgradeable {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = MathUpgradeable.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal onlyInitializing {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\r\n    function __AccessControl_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal onlyInitializing {\r\n    }\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(account),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20PermitUpgradeable token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable-Bridge/IronVestExtended.sol\r\n\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @author The ferrum network.\r\n/// @title This is a vesting contract named as IronVest.\r\n/// @dev This contract is upgradeable please use a framework i.e truffle or hardhat for deploying it.\r\n/// @notice This contract contains the power of accesscontrol.\r\n/// There are two different vesting defined in the contract with different functionalities.\r\n/// Have fun reading it. Hopefully it's bug-free. God Bless.\r\ncontract IronVest is\r\n    Initializable,\r\n    ReentrancyGuardUpgradeable,\r\n    AccessControlUpgradeable\r\n{\r\n    /// @notice Declaration of token interface with SafeErc20.\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    /// @notice This struct will save all the pool information about simple vesting i.e addVesting().\r\n    struct PoolInfo {\r\n        string poolName;\r\n        uint256 startTime; /// block.timestamp while creating new pool.\r\n        uint256 vestingEndTime; /// time stamp when to end the vesting.\r\n        address tokenAddress; /// token which we want to vest in the contract.\r\n        uint256 totalVestedTokens; /// total amount of tokens.\r\n        address[] usersAddresses; /// addresses of users an array.\r\n        uint256[] usersAlloc; /// allocation to user with respect to usersAddresses.\r\n    }\r\n\r\n    /// @notice Used to store information about the user in simple vesting.\r\n    struct UserInfo {\r\n        uint256 allocation; /// total allocation to a user.\r\n        uint256 claimedAmount; /// claimedAmnt + claimed.\r\n        uint256 remainingToBeClaimable; /// remaining claimable fully claimable once time ended.\r\n        uint256 lastWithdrawal; /// block.timestamp used for internal claimable calculation\r\n        uint256 releaseRatePerSec; /// calculated as vestingTime/(vestingTime-starttime)\r\n    }\r\n\r\n    /// @notice This struct will save all the pool information about simple vesting i.e addCliffVesting().\r\n    struct CliffPoolInfo {\r\n        string poolName;\r\n        uint256 startTime; /// block.timestamp while creating new pool.\r\n        uint256 vestingEndTime; /// total time to end cliff vesting.\r\n        uint256 cliffVestingEndTime; /// time in which user can vest cliff tokens should be less than vestingendtime.\r\n        uint256 nonCliffVestingPeriod; /// calculated as cliffPeriod-vestingEndTime. in seconds\r\n        uint256 cliffPeriodEndTime; ///in this time tenure the tokens keep locked in contract. a timestamp\r\n        address tokenAddress; /// token which we want to vest in the contract.\r\n        uint256 totalVestedTokens; /// total amount of tokens.\r\n        uint256 cliffLockPercentage10000; /// for percentage calculation using 10000 instead 100.\r\n        address[] usersAddresses; /// addresses of users an array.\r\n        uint256[] usersAlloc; /// allocation to user with respect to usersAddresses.\r\n    }\r\n\r\n    /// @notice Used to store information about the user in cliff vesting.\r\n    struct UserCliffInfo {\r\n        uint256 allocation; /// total allocation cliff+noncliff\r\n        uint256 cliffAlloc; /// (totalallocation*cliffPercentage)/10000\r\n        uint256 claimedAmnt; /// claimedAmnt-claimableClaimed.\r\n        uint256 tokensReleaseTime; /// the time we used to start vesting tokens.\r\n        uint256 remainingToBeClaimableCliff; /// remaining claimable fully claimable once time ended.\r\n        uint256 cliffReleaseRatePerSec; /// calculated as cliffAlloc/(cliffendtime -cliffPeriodendtime).\r\n        uint256 cliffLastWithdrawal; /// block.timestamp used for internal claimable calculation.\r\n    }\r\n\r\n    /// @notice Used to store information about the user of non cliff in cliff vesting.\r\n    struct UserNonCliffInfo {\r\n        uint256 allocation; /// total allocation cliff+noncliff\r\n        uint256 nonCliffAlloc; /// (totalallocation-cliffalloc)\r\n        uint256 claimedAmnt; /// claimedAmnt-claimableClaimed\r\n        uint256 tokensReleaseTime; /// the time we used to start vesting tokens.\r\n        uint256 remainingToBeClaimableNonCliff; /// remaining claimable fully claimable once time ended.\r\n        uint256 nonCliffReleaseRatePerSec; /// calculated as nonCliffAlloc/(cliffVestingEndTime-vestingEndTime).\r\n        uint256 nonCliffLastWithdrawal; /// used for internal claimable calculation.\r\n    }\r\n\r\n    /// @notice Vester role initilization.\r\n    bytes32 public constant VESTER_ROLE = keccak256(\"VESTER_ROLE\");\r\n    /// @notice Public variable to strore contract name.\r\n    string public vestingContractName;\r\n    /// @notice Unique identity of contract.\r\n    uint256 public vestingPoolSize;\r\n    /// @notice Signer address. Transaction supposed to be sign be this address.\r\n    address public signer;\r\n\r\n    /// Cliff mapping with the check if the specific pool relate to the cliff vesting or not.\r\n    mapping(uint256 => bool) public cliff;\r\n    /// Double mapping to check user information by address and poolid for cliff vesting.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    /// Double mapping to check user information by address and poolid for cliff vesting.\r\n    mapping(uint256 => mapping(address => UserCliffInfo)) public userCliffInfo;\r\n    /// Double mapping to check user information by address and poolid for cliff vesting.\r\n    mapping(uint256 => mapping(address => UserNonCliffInfo))\r\n        public userNonCliffInfo;\r\n    /// Hash Information to avoid the replay from same _messageHash\r\n    mapping(bytes32 => bool) public usedHashes;\r\n    /// Pool information against specific poolid for simple vesting.\r\n    mapping(uint256 => PoolInfo) internal _poolInfo;\r\n    /// Pool information against specific poolid for cliff vesting.\r\n    mapping(uint256 => CliffPoolInfo) internal _cliffPoolInfo;\r\n\r\n    /// @dev Creating events for all necessary values while adding simple vesting.\r\n    /// @notice vester address and poolId are indexed.\r\n    event AddVesting(\r\n        address indexed vester,\r\n        uint256 indexed poolId,\r\n        string poolName,\r\n        uint256 startTime,\r\n        uint256 vestingEndTime,\r\n        address tokenAddress,\r\n        uint256 totalVestedTokens,\r\n        address[] usersAddresses,\r\n        uint256[] usersAlloc\r\n    );\r\n\r\n    /// @dev Creating events for all necessary values while adding cliff vesting.\r\n    /// @notice vester address and poolId are indexed.\r\n    event CliffAddVesting(\r\n        address indexed vester,\r\n        uint256 indexed poolId,\r\n        string poolName,\r\n        uint256 vestingEndTime,\r\n        uint256 cliffVestingEndTime,\r\n        uint256 nonCliffVestingPeriod,\r\n        uint256 cliffPeriodEndTime,\r\n        address tokenAddress,\r\n        uint256 totalVestedTokens,\r\n        address[] usersAddresses,\r\n        uint256[] usersAlloc\r\n    );\r\n\r\n    /// @dev Whenever user claim their amount from simple vesting.\r\n    /// @notice beneficiary address and poolId are indexed.\r\n    event Claim(\r\n        uint256 indexed poolId,\r\n        uint256 claimed,\r\n        address indexed beneficiary,\r\n        uint256 remaining\r\n    );\r\n\r\n    /// @dev Whenever user claim their cliff amount from cliff vesting.\r\n    /// @notice beneficiary address and poolId are indexed.\r\n    event CliffClaim(\r\n        uint256 indexed poolId,\r\n        uint256 claimed,\r\n        address indexed beneficiary,\r\n        uint256 remaining\r\n    );\r\n\r\n    /// @dev Whenever user claim their non cliff amount from cliff vesting.\r\n    /// @notice beneficiary address and poolId are indexed.\r\n    event NonCliffClaim(\r\n        uint256 indexed poolId,\r\n        uint256 claimed,\r\n        address indexed beneficiary,\r\n        uint256 remaining\r\n    );\r\n\r\n    /// @notice Modifier to check if vester.\r\n    modifier onlyVester() {\r\n        require(\r\n            hasRole(VESTER_ROLE, _msgSender()),\r\n            \"AccessDenied : Only Vester Call This Function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if DEFAULT_ADMIN and Deployer of contract.\r\n    modifier onlyOwner() {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\r\n            \"AccessDenied : Only Admin Call This Function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev deploy the contract by upgradeable proxy by any framewrok.\r\n    /// @param _vestingName : A name to our vesting contract.\r\n    /// @param _signer : An address verification for facing the replay attack issues.\r\n    /// @notice Contract is upgradeable need initilization and deployer is default admin.\r\n    function initialize(string memory _vestingName, address _signer)\r\n        external\r\n        initializer\r\n    {\r\n        __ReentrancyGuard_init();\r\n        __AccessControl_init();\r\n        vestingContractName = _vestingName;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(VESTER_ROLE, _msgSender());\r\n        signer = _signer;\r\n    }\r\n\r\n    /// @dev Only callable by vester.\r\n    /// @param _poolName : Pool name is supposed to be any string.\r\n    /// @param _vestingEndTime : Vesting time is tenure in which token will be released.\r\n    /// @param _tokenAddress : Token address related to the vested token.\r\n    /// @param _usersAddresses : Users addresses whom the vester want to allocate tokens and it is an array.\r\n    /// @param _userAlloc : Users allocation of tokens with respect to address.\r\n    /// @param _signature : Signature of the signed by signer.\r\n    /// @param _keyHash : Specific keyhash value formed to stop replay.\r\n    /// @notice Create a new vesting.\r\n    function addVesting(\r\n        string memory _poolName,\r\n        uint256 _vestingEndTime,\r\n        address _tokenAddress,\r\n        address[] memory _usersAddresses,\r\n        uint256[] memory _userAlloc,\r\n        bytes memory _signature,\r\n        bytes memory _keyHash\r\n    ) external onlyVester nonReentrant {\r\n        require(\r\n            _usersAddresses.length == _userAlloc.length,\r\n            \"IIronVest Array : Length of _usersAddresses And _userAlloc Must Be Equal\"\r\n        );\r\n        require(\r\n            _vestingEndTime > block.timestamp,\r\n            \"IIronVest : Vesting End Time Should Be Greater Than Current Time\"\r\n        );\r\n        require(\r\n            signatureVerification(\r\n                _signature,\r\n                _poolName,\r\n                _tokenAddress,\r\n                _keyHash\r\n            ) == signer,\r\n            \"Signer : Invalid signer\"\r\n        );\r\n        uint256 totalVesting;\r\n        for (uint256 i = 0; i < _usersAddresses.length; i++) {\r\n            totalVesting += _userAlloc[i];\r\n            userInfo[vestingPoolSize][_usersAddresses[i]] = UserInfo(\r\n                _userAlloc[i],\r\n                0,\r\n                _userAlloc[i],\r\n                block.timestamp,\r\n                _userAlloc[i] / (_vestingEndTime - block.timestamp)\r\n            );\r\n        }\r\n        _poolInfo[vestingPoolSize] = PoolInfo(\r\n            _poolName,\r\n            block.timestamp,\r\n            _vestingEndTime,\r\n            _tokenAddress,\r\n            totalVesting,\r\n            _usersAddresses,\r\n            _userAlloc\r\n        );\r\n        IERC20Upgradeable(_tokenAddress).safeTransferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            totalVesting\r\n        );\r\n        emit AddVesting(\r\n            _msgSender(),\r\n            vestingPoolSize,\r\n            _poolName,\r\n            block.timestamp,\r\n            _vestingEndTime,\r\n            _tokenAddress,\r\n            totalVesting,\r\n            _usersAddresses,\r\n            _userAlloc\r\n        );\r\n        vestingPoolSize = vestingPoolSize + 1;\r\n        usedHashes[_messageHash(_poolName, _tokenAddress, _keyHash)] = true;\r\n    }\r\n\r\n    /// @dev User must have allocation in the pool.\r\n    /// @notice This is for claiming simple vesting.\r\n    /// @param _poolId : poolId from which pool user want to withdraw.\r\n    /// @notice Secured by nonReentrant\r\n    function claim(uint256 _poolId) external nonReentrant {\r\n        uint256 transferAble = claimable(_poolId, _msgSender());\r\n        require(transferAble > 0, \"IIronVest : Invalid TransferAble\");\r\n        IERC20Upgradeable(_poolInfo[_poolId].tokenAddress).safeTransfer(\r\n            _msgSender(),\r\n            transferAble\r\n        );\r\n        UserInfo storage info = userInfo[_poolId][_msgSender()];\r\n        uint256 claimed = (info.claimedAmount + transferAble);\r\n        uint256 remainingToBeClaimable = info.allocation - claimed;\r\n        info.claimedAmount = claimed;\r\n        info.remainingToBeClaimable = remainingToBeClaimable;\r\n        info.lastWithdrawal = block.timestamp;\r\n\r\n        emit Claim(_poolId, transferAble, _msgSender(), remainingToBeClaimable);\r\n    }\r\n\r\n    /// @dev Only callable by vester.\r\n    /// @param _poolName : Pool name is supposed to be any string.\r\n    /// @param _vestingEndTime : Vesting time is tenure in which token will be released.\r\n    /// @param _cliffVestingEndTime : cliff vesting time is the end time for releasing cliff tokens.\r\n    /// @param _cliffPeriodEndTime : cliff period is a period in which token will be locked.\r\n    /// @param _tokenAddress : Token address related to the vested token.\r\n    /// @param _cliffPercentage10000 : cliff percentage defines how may percentage should be allocated to cliff tokens.\r\n    /// @param _usersAddresses : Users addresses whom the vester want to allocate tokens and it is an array.\r\n    /// @param _userAlloc : Users allocation of tokens with respect to address.\r\n    /// @param _signature : Signature of the signed by signer.\r\n    /// @param _keyHash : Specific keyhash value formed to stop replay.\r\n    /// @notice Create a new vesting with cliff.\r\n    function addCliffVesting(\r\n        string memory _poolName,\r\n        uint256 _vestingEndTime,\r\n        uint256 _cliffVestingEndTime,\r\n        uint256 _cliffPeriodEndTime,\r\n        address _tokenAddress,\r\n        uint256 _cliffPercentage10000,\r\n        address[] memory _usersAddresses,\r\n        uint256[] memory _userAlloc,\r\n        bytes memory _signature,\r\n        bytes memory _keyHash\r\n    ) external onlyVester nonReentrant {\r\n        require(\r\n            _usersAddresses.length == _userAlloc.length,\r\n            \"IIronVest Array : Length of _usersAddresses And _userAlloc Must Be Equal\"\r\n        );\r\n        require(\r\n            _cliffVestingEndTime < _vestingEndTime,\r\n            \"IIronVest : Cliff Vesting End Time Must Be Lesser Than Vesting Time\"\r\n        );\r\n        require(\r\n            _cliffVestingEndTime > _cliffPeriodEndTime,\r\n            \"IIronVest : Cliff Vesting Time Must Be Greater Than Cliff Period\"\r\n        );\r\n        require(\r\n            _cliffPeriodEndTime > block.timestamp,\r\n            \"IIronVest : Cliff Vesting Time Must Be Lesser Than Vesting Time\"\r\n        );\r\n        require(\r\n            signatureVerification(\r\n                _signature,\r\n                _poolName,\r\n                _tokenAddress,\r\n                _keyHash\r\n            ) == signer,\r\n            \"Signer : Invalid signer\"\r\n        );\r\n        require(\r\n            _cliffPercentage10000 <= 5000,\r\n            \"Percentage : Percentage Should Be less Than 50%\"\r\n        );\r\n        uint256 totalVesting;\r\n        for (uint256 i = 0; i < _usersAddresses.length; i++) {\r\n            uint256 cliffAlloc = (_userAlloc[i] * _cliffPercentage10000) /\r\n                10000;\r\n            totalVesting += _userAlloc[i];\r\n            uint256 nonCliffReaminingTobeclaimable = _userAlloc[i] - cliffAlloc;\r\n            userCliffInfo[vestingPoolSize][_usersAddresses[i]] = UserCliffInfo(\r\n                _userAlloc[i],\r\n                cliffAlloc,\r\n                0,\r\n                _cliffPeriodEndTime,\r\n                cliffAlloc,\r\n                (cliffAlloc) / (_cliffVestingEndTime - _cliffPeriodEndTime),\r\n                _cliffPeriodEndTime\r\n            );\r\n            userNonCliffInfo[vestingPoolSize][\r\n                _usersAddresses[i]\r\n            ] = UserNonCliffInfo(\r\n                _userAlloc[i],\r\n                nonCliffReaminingTobeclaimable,\r\n                0,\r\n                _cliffPeriodEndTime,\r\n                nonCliffReaminingTobeclaimable,\r\n                (_userAlloc[i] - (cliffAlloc)) /\r\n                    (_vestingEndTime - _cliffPeriodEndTime),\r\n                _cliffPeriodEndTime\r\n            );\r\n        }\r\n        uint256 nonCliffVestingPeriod = _vestingEndTime - _cliffPeriodEndTime;\r\n        _cliffPoolInfo[vestingPoolSize] = CliffPoolInfo(\r\n            _poolName,\r\n            block.timestamp,\r\n            _vestingEndTime,\r\n            _cliffVestingEndTime,\r\n            nonCliffVestingPeriod,\r\n            _cliffPeriodEndTime,\r\n            _tokenAddress,\r\n            totalVesting,\r\n            _cliffPercentage10000,\r\n            _usersAddresses,\r\n            _userAlloc\r\n        );\r\n        IERC20Upgradeable(_tokenAddress).safeTransferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            totalVesting\r\n        );\r\n        cliff[vestingPoolSize] = true;\r\n        emit CliffAddVesting(\r\n            _msgSender(),\r\n            vestingPoolSize,\r\n            _poolName,\r\n            _vestingEndTime,\r\n            _cliffVestingEndTime,\r\n            nonCliffVestingPeriod,\r\n            _cliffPeriodEndTime,\r\n            _tokenAddress,\r\n            totalVesting,\r\n            _usersAddresses,\r\n            _userAlloc\r\n        );\r\n        vestingPoolSize = vestingPoolSize + 1;\r\n        usedHashes[_messageHash(_poolName, _tokenAddress, _keyHash)] = true;\r\n    }\r\n\r\n    /// @dev User must have allocation in the pool.\r\n    /// @notice This is for claiming cliff vesting.\r\n    /// @notice should be called if need to claim cliff amount.\r\n    /// @param _poolId : Pool Id from which pool user want to withdraw.\r\n    /// @notice Secured by nonReentrant.\r\n    function claimCliff(uint256 _poolId) external nonReentrant {\r\n        UserCliffInfo storage info = userCliffInfo[_poolId][_msgSender()];\r\n        require(\r\n            _cliffPoolInfo[_poolId].cliffPeriodEndTime < block.timestamp,\r\n            \"IIronVest : Cliff Period Is Not Over Yet\"\r\n        );\r\n\r\n        uint256 transferAble = cliffClaimable(_poolId, _msgSender());\r\n        require(transferAble > 0, \"IIronVest : Invalid TransferAble\");\r\n        IERC20Upgradeable(_cliffPoolInfo[_poolId].tokenAddress).safeTransfer(\r\n            _msgSender(),\r\n            transferAble\r\n        );\r\n        uint256 claimed = transferAble + info.claimedAmnt;\r\n        uint256 remainingTobeClaimable = info.cliffAlloc - claimed;\r\n        info.claimedAmnt = claimed;\r\n        info.remainingToBeClaimableCliff = remainingTobeClaimable;\r\n        info.cliffLastWithdrawal = block.timestamp;\r\n\r\n        emit CliffClaim(\r\n            _poolId,\r\n            transferAble,\r\n            _msgSender(),\r\n            remainingTobeClaimable\r\n        );\r\n    }\r\n\r\n    /// @dev User must have allocation in the pool.\r\n    /// @notice This is for claiming cliff vesting.\r\n    /// @notice should be called if need to claim non cliff amount.\r\n    /// @param _poolId : Pool Id from which pool user want to withdraw.\r\n    /// @notice Secured by nonReentrant.\r\n    function claimNonCliff(uint256 _poolId) external nonReentrant {\r\n        UserNonCliffInfo storage info = userNonCliffInfo[_poolId][_msgSender()];\r\n        require(\r\n            _cliffPoolInfo[_poolId].cliffPeriodEndTime < block.timestamp,\r\n            \"IIronVest : Cliff Period Is Not Over Yet\"\r\n        );\r\n\r\n        uint256 transferAble = nonCliffClaimable(_poolId, _msgSender());\r\n        uint256 claimed = transferAble + info.claimedAmnt;\r\n        require(transferAble > 0, \"IIronVest : Invalid TransferAble\");\r\n        IERC20Upgradeable(_cliffPoolInfo[_poolId].tokenAddress).safeTransfer(\r\n            _msgSender(),\r\n            transferAble\r\n        );\r\n        uint256 remainingTobeClaimable = info.nonCliffAlloc - claimed;\r\n        info.claimedAmnt = claimed;\r\n        info.remainingToBeClaimableNonCliff = remainingTobeClaimable;\r\n        info.nonCliffLastWithdrawal = block.timestamp;\r\n        emit NonCliffClaim(\r\n            _poolId,\r\n            transferAble,\r\n            _msgSender(),\r\n            remainingTobeClaimable\r\n        );\r\n    }\r\n\r\n    /// @dev this function use to withdraw tokens that send to the contract mistakenly\r\n    /// @param _token : Token address that is required to withdraw from contract.\r\n    /// @param _amount : How much tokens need to withdraw.\r\n    function emergencyWithdraw(IERC20Upgradeable _token, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20Upgradeable(_token).safeTransfer(_msgSender(), _amount);\r\n    }\r\n\r\n    /// @dev Functions is called by a default admin.\r\n    /// @param _signer : An address whom admin want to be a signer.\r\n    function setSigner(address _signer) external onlyOwner {\r\n        require(\r\n            _signer != address(0x00),\r\n            \"Invalid : Signer Address Is Invalid\"\r\n        );\r\n        signer = _signer;\r\n    }\r\n\r\n    /// @dev As we are using poolId as unique ID which is supposed to return pool info i.e\r\n    /// _poolInfo and _cliffPoolInfo but it unique for the contract level this function will\r\n    /// return the values from where this poolId relate to.\r\n    /// @param _poolId : Every Pool has a unique Id.\r\n    /// @return isCliff : If this Id relate to the cliffPool or note?\r\n    /// @return poolName : PoolName If exist.\r\n    /// @return startTime : When does this pool initialized .\r\n    /// @return vestingEndTime : Vesting End Time of this Pool.\r\n    /// @return cliffVestingEndTime : CliffVestingEndTime If exist and if also a cliffPool.\r\n    /// @return nonCliffVestingPeriod : Non CliffVesting Period If exist and also a cliffPool.\r\n    /// @return cliffPeriodEndTime : Cliff Period End Time If exist and also a cliffPool.\r\n    /// @return tokenAddress :  Vested token address If exist.\r\n    /// @return totalVestedTokens : total Vested Tokens If exist.\r\n    /// @return cliffLockPercentage : CliffLockPercentage If exist and also a cliffPool.\r\n    function poolInformation(uint256 _poolId)\r\n        external\r\n        view\r\n        returns (\r\n            bool isCliff,\r\n            string memory poolName,\r\n            uint256 startTime,\r\n            uint256 vestingEndTime,\r\n            uint256 cliffVestingEndTime,\r\n            uint256 nonCliffVestingPeriod,\r\n            uint256 cliffPeriodEndTime,\r\n            address tokenAddress,\r\n            uint256 totalVestedTokens,\r\n            uint256 cliffLockPercentage\r\n        )\r\n    {\r\n        bool isCliff = cliff[_poolId];\r\n        if (isCliff) {\r\n            CliffPoolInfo memory info = _cliffPoolInfo[_poolId];\r\n            return (\r\n                isCliff,\r\n                info.poolName,\r\n                info.startTime,\r\n                info.vestingEndTime,\r\n                info.cliffVestingEndTime,\r\n                info.nonCliffVestingPeriod,\r\n                info.cliffPeriodEndTime,\r\n                info.tokenAddress,\r\n                info.totalVestedTokens,\r\n                info.cliffLockPercentage10000\r\n            );\r\n        } else {\r\n            PoolInfo memory info = _poolInfo[_poolId];\r\n            return (\r\n                isCliff,\r\n                info.poolName,\r\n                info.startTime,\r\n                info.vestingEndTime,\r\n                0,\r\n                0,\r\n                0,\r\n                info.tokenAddress,\r\n                info.totalVestedTokens,\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev This is check claimable for simple vesting.\r\n    /// @param _poolId : Pool Id from which pool user want to check.\r\n    /// @param _user : User address for which user want to check claimables.\r\n    /// @return returning the claimable amount of the user\r\n    function claimable(uint256 _poolId, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 claimable;\r\n        UserInfo memory info = userInfo[_poolId][_user];\r\n        require(\r\n            info.allocation > 0,\r\n            \"Allocation : You Don't have allocation in this pool\"\r\n        );\r\n        if (_poolInfo[_poolId].vestingEndTime <= block.timestamp) {\r\n            claimable = info.remainingToBeClaimable;\r\n        } else\r\n            claimable =\r\n                (block.timestamp - info.lastWithdrawal) *\r\n                info.releaseRatePerSec;\r\n\r\n        return (claimable);\r\n    }\r\n\r\n    /// @dev This is check claimable for cliff vesting.\r\n    /// @param _poolId : Pool Id from which pool user want to check.\r\n    /// @param _user : User address for which user want to check claimables.\r\n    /// @return returning the claimable amount of the user from cliff vesting.\r\n    function cliffClaimable(uint256 _poolId, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 cliffClaimable;\r\n        UserCliffInfo memory info = userCliffInfo[_poolId][_user];\r\n        require(\r\n            info.allocation > 0,\r\n            \"Allocation : You Don't have allocation in this pool\"\r\n        );\r\n\r\n        if (_cliffPoolInfo[_poolId].cliffPeriodEndTime <= block.timestamp) {\r\n            if (\r\n                _cliffPoolInfo[_poolId].cliffVestingEndTime >= block.timestamp\r\n            ) {\r\n                cliffClaimable =\r\n                    (block.timestamp - info.cliffLastWithdrawal) *\r\n                    info.cliffReleaseRatePerSec;\r\n            } else cliffClaimable = info.remainingToBeClaimableCliff;\r\n        }\r\n\r\n        return (cliffClaimable);\r\n    }\r\n\r\n    /// @dev This is check claimable for non cliff vesting.\r\n    /// @param _poolId : Pool Id from which pool user want to check.\r\n    /// @param _user : User address for which user want to check claimables.\r\n    /// @return returning the claimable amount of the user from non cliff vesting.\r\n    function nonCliffClaimable(uint256 _poolId, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 nonCliffClaimable;\r\n        UserNonCliffInfo memory info = userNonCliffInfo[_poolId][_user];\r\n        require(\r\n            info.allocation > 0,\r\n            \"Allocation : You Don't have allocation in this pool\"\r\n        );\r\n\r\n        if (_cliffPoolInfo[_poolId].cliffPeriodEndTime <= block.timestamp) {\r\n            if (_cliffPoolInfo[_poolId].vestingEndTime >= block.timestamp) {\r\n                nonCliffClaimable =\r\n                    (block.timestamp - info.nonCliffLastWithdrawal) *\r\n                    info.nonCliffReleaseRatePerSec;\r\n            } else nonCliffClaimable = info.remainingToBeClaimableNonCliff;\r\n        }\r\n\r\n        return (nonCliffClaimable);\r\n    }\r\n\r\n    /// @dev For geting signer address from salt and sgnature.\r\n    /// @param _signature : signature provided signed by signer.\r\n    /// @param _poolName : Pool Name to name a pool.\r\n    /// @param _tokenAddress : tokenAddess of our vested tokesn.\r\n    /// @param _keyHash : keyhash value to stop replay.\r\n    /// @return Address of signer who signed the message hash.\r\n    function signatureVerification(\r\n        bytes memory _signature,\r\n        string memory _poolName,\r\n        address _tokenAddress,\r\n        bytes memory _keyHash\r\n    ) public view returns (address) {\r\n        bytes32 _salt = _messageHash(_poolName, _tokenAddress, _keyHash);\r\n        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(_signature);\r\n        require(!usedHashes[_salt], \"Message already used\");\r\n\r\n        address _user = _verifyMessage(_salt, v, r, s);\r\n        return _user;\r\n    }\r\n\r\n    /// @dev For splititng signature.\r\n    /// @param _sig : signature provided signed by signer\r\n    /// @return r : First 32 bytes stores the length of the signature.\r\n    /// @return s : add(sig, 32) = pointer of sig + 32\r\n    /// effectively, skips first 32 bytes of signature.\r\n    /// @return v : mload(p) loads next 32 bytes starting\r\n    /// at the memory address p into memory.\r\n    function _splitSignature(bytes memory _sig)\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        require(_sig.length == 65, \"invalid signature length\");\r\n\r\n        assembly {\r\n            /// First 32 bytes stores the length of the signature\r\n\r\n            /// add(_sig, 32) = pointer of _sig + 32\r\n            /// effectively, skips first 32 bytes of signature\r\n\r\n            /// mload(p) loads next 32 bytes starting at the memory address p into memory\r\n\r\n            /// first 32 bytes, after the length prefix\r\n            r := mload(add(_sig, 32))\r\n            /// second 32 bytes\r\n            s := mload(add(_sig, 64))\r\n            /// final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(_sig, 96)))\r\n        }\r\n\r\n        /// implicitly return (r, s, v)\r\n    }\r\n\r\n    /// @dev Verify and recover signer from salt and signature.\r\n    /// @param _salt : A hash value which contains concatened hash of different values.\r\n    /// @param _v : mload(p) loads next 32 bytes starting at the memory address p into memory.\r\n    /// @param _r : First 32 bytes stores the length of the signature.\r\n    /// @param _s : add(sig, 32) = pointer of sig + 32 effectively, skips first 32 bytes of signature.\r\n    /// @return signerAddress : Return the address of signer.\r\n    function _verifyMessage(\r\n        bytes32 _salt,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) internal pure returns (address signerAddress) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedHashMessage = keccak256(\r\n            abi.encodePacked(prefix, _salt)\r\n        );\r\n        address _signerAddress = ecrecover(prefixedHashMessage, _v, _r, _s);\r\n        return _signerAddress;\r\n    }\r\n\r\n    /// @dev create a message hash by concatincating the values.\r\n    /// @param _poolName : Pool name.\r\n    /// @param _tokenAddress : Vesting token address .\r\n    /// @param _keyHash : key hash value generated by our backend to stop replay attack.\r\n    /// also a chain Id so that a user can't replay the hash any other chain.\r\n    /// @return returning keccak hash of concate values.\r\n    function _messageHash(\r\n        string memory _poolName,\r\n        address _tokenAddress,\r\n        bytes memory _keyHash\r\n    ) internal view returns (bytes32) {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(_poolName, _tokenAddress, _keyHash, block.chainid)\r\n        );\r\n        return hash;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVestedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"usersAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"usersAlloc\",\"type\":\"uint256[]\"}],\"name\":\"AddVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffVestingEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonCliffVestingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffPeriodEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVestedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"usersAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"usersAlloc\",\"type\":\"uint256[]\"}],\"name\":\"CliffAddVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"CliffClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"NonCliffClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_vestingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffVestingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPeriodEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercentage10000\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_usersAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userAlloc\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_keyHash\",\"type\":\"bytes\"}],\"name\":\"addCliffVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_vestingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_usersAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userAlloc\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_keyHash\",\"type\":\"bytes\"}],\"name\":\"addVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claimCliff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claimNonCliff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cliffClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vestingName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"nonCliffClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"poolInformation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCliff\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffVestingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonCliffVestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriodEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalVestedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffLockPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_keyHash\",\"type\":\"bytes\"}],\"name\":\"signatureVerification\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCliffInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingToBeClaimableCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffReleaseRatePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffLastWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingToBeClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseRatePerSec\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNonCliffInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonCliffAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingToBeClaimableNonCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonCliffReleaseRatePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonCliffLastWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IronVest", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26c6ce7f20607683165a0f2e22eb5aa99af992f2047e4181c94153a00f6ad548"}