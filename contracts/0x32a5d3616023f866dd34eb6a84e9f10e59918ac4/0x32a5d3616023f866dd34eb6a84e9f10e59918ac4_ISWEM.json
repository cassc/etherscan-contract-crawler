{"SourceCode": "/*\r\n *   Tg:      https://t.me/IStandWithElonMusk\r\n *   Twitter: https://twitter.com/Imwithelonmusk\r\n *   Website: https://istandwithelonmusk.io/\r\n */\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.23;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only owner can call this\"); _; }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0); \r\n        emit OwnershipTransferred(address(0)); \r\n    }\r\n}\r\n\r\ncontract ISWEM is IERC20, Auth {\r\n    string private constant _name         = \"Woke Mind Virus\";\r\n    string private constant _symbol       = \"istandwithelonmusk\";\r\n    uint8  private constant _decimals     = 9;\r\n    uint256 private constant _totalSupply = 69_420_628 * (10**_decimals);\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint32 private _launchTime;\r\n    address payable private constant _walletMarketing = payable(0x875465B57Eef5Eda3cC0A4B5C89057fDcB0fa6D9);\r\n    uint256 private constant _taxSwapMin = _totalSupply / 200000;\r\n    uint256 private constant _taxSwapMax = _totalSupply / 1000;\r\n    mapping (address => bool) private _excluded;\r\n    mapping (address => bool) private _isLP;\r\n    address private _primaryLP;\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    bool private _tradingOpen;\r\n    bool private _zeroTaxMode;\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inTaxSwap = true; \r\n        _; \r\n        _inTaxSwap = false; \r\n    }\r\n\r\n    constructor() Auth(msg.sender) {\r\n        _balances[_owner] = _totalSupply * 5 / 100;\r\n        emit Transfer(address(0), _owner, _balances[_owner]);\r\n        _balances[address(this)] = _totalSupply - _balances[_owner];\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        _excluded[_owner] = true;\r\n        _excluded[address(this)] = true;\r\n        _excluded[_swapRouterAddress] = true;\r\n        _excluded[_walletMarketing] = true;\r\n        _launchTime = uint32(block.timestamp)*2;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(sender), \"Trading not open\");\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)]>0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isLP[_primaryLP] = true;\r\n        _tradingOpen = true;\r\n        _launchTime = uint32(block.timestamp);\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        require(checkLimits(sender, recipient, amount), \"Limits exceeded\");\r\n        if (!_tradingOpen) { require(_excluded[sender], \"Trading not open\"); }        \r\n        if ( !_inTaxSwap && _isLP[recipient] ) { _swapTaxAndLiquify(); }\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] -= amount;\r\n        if ( _taxAmount > 0 ) { _balances[address(this)] += _taxAmount; }\r\n        _balances[recipient] += _transferAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_excluded[sender]) { checkResult = true; } \r\n        return checkResult;\r\n    }\r\n\r\n    function checkLimits(address sender, address recipient, uint256 amount) private view returns (bool result) {\r\n        result = true;\r\n        if (!_excluded[recipient] && !_excluded[sender]) {            \r\n            (uint256 maxTx, uint256 maxWallet) = limits();\r\n            if (amount > maxTx) { result = false; }\r\n            if (!_isLP[recipient] && _balances[recipient] + amount > maxWallet) { result = false; }\r\n        }\r\n    }\r\n    function limits() public view returns (uint256 maxTxAmount, uint256 maxWalletAmount) {\r\n        maxTxAmount = _totalSupply; \r\n        maxWalletAmount = _totalSupply;\r\n        if (block.timestamp > _launchTime + 900) {\r\n            maxTxAmount = _totalSupply; // unlimited forever (limited by max wallet anyway)\r\n            maxWalletAmount = _totalSupply * 20 / 1000; // 2.0% forever\r\n        } else if (block.timestamp > _launchTime + 600) {\r\n            maxTxAmount = _totalSupply * 7 / 1000; // 0.7% for minutes 10-15\r\n            maxWalletAmount = _totalSupply * 15 / 1000; // 1.5% for minutes 10-15\r\n        } else {\r\n            maxTxAmount = _totalSupply * 5 / 1000; //0.5% for first 10 minutes\r\n            maxWalletAmount = _totalSupply * 10 / 1000; //1.0% for first 10 minutes\r\n        }\r\n    }\r\n\r\n    function removeAllFees() external onlyOwner {\r\n        _zeroTaxMode = true;\r\n    }\r\n\r\n    function _tax() private view returns(uint8) {\r\n        uint8 taxPercentage;\r\n        if (_zeroTaxMode) {\r\n            taxPercentage = 0; //after \"removeAllFees()\" is called, permanent.\r\n        } else if (block.timestamp > _launchTime + 900) {\r\n            taxPercentage = 5; //0.5% tax after 15 minutes\r\n        } else if (block.timestamp > _launchTime + 600) {\r\n            taxPercentage = 50; //5% tax minutes 10-15\r\n        } else if (block.timestamp > _launchTime + 180) {\r\n            taxPercentage = 100; //10% tax minutes 3-10\r\n        } else {\r\n            taxPercentage = 250; //5% tax minutes 0-3\r\n        }\r\n        return taxPercentage;\r\n    }\r\n\r\n    function tax() external view returns (uint8) {\r\n        return _tax()/10;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256 taxAmount) {\r\n        if ( _tradingOpen && !_excluded[sender] && !_excluded[recipient] ) { \r\n            if ( _isLP[sender] || _isLP[recipient] ) {\r\n                taxAmount = amount * _tax() / 1000;\r\n            }\r\n        }\r\n    }\r\n\r\n    function marketingWallet() external pure returns (address) {\r\n        return _walletMarketing;\r\n    }\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradingOpen ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n            _swapTaxTokensForEth(_taxTokensAvailable);\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { \r\n                (bool sent, bytes memory data) = _walletMarketing.call{value: _contractETHBalance}(\"\");\r\n                sent = true; data = bytes(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ISWEM", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b1674cc8654ee6a3551873049cc2fd4745a16b91dac19e0da98586d9c4f2aa50"}