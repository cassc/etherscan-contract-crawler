{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/TokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ncontract TokenVesting is Ownable{\\n\\n    IERC20 public token;\\n    uint256 public startTime; \\n\\n    struct UserVesting {\\n        uint256 totalTokens; \\n        uint256 initialUnlockPercentage; \\n        uint256 delayAfterStart; \\n        uint256 linearVestingDuration; \\n        uint256 claimedTokens; \\n    }\\n\\n    mapping(address => UserVesting) public vestingSchedules;\\n\\n    constructor() {}\\n\\n\\n    function init (address _token, uint256 _startTime)  external onlyOwner{\\n        token = IERC20(_token);\\n        startTime = _startTime;\\n    }\\n     function setStartTime ( uint256 _startTime)   external onlyOwner{\\n        startTime = _startTime;\\n    }\\n\\n    function setMultipleUserVesting(\\n            address[] calldata _users,\\n            uint256[] calldata _totalTokens,\\n            uint256[] calldata _initialUnlockPercentages,\\n            uint256[] calldata _delaysAfterStart,\\n            uint256[] calldata _linearVestingDurations,\\n            uint256[] calldata _claimedTokens\\n        ) external onlyOwner {\\n            require(\\n                _users.length == _totalTokens.length &&\\n                _users.length == _initialUnlockPercentages.length\\n                && _users.length == _delaysAfterStart.length \\n                && _users.length == _linearVestingDurations.length,\\n                \\\"Array lengths must be equal\\\"\\n                );\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            setUserVesting( _users[i],  _totalTokens[i],  _initialUnlockPercentages[i], \\n             _delaysAfterStart[i],  _linearVestingDurations[i],_claimedTokens[i]);\\n        }\\n    }\\n\\n    function setUserVesting(address _user, uint256 _totalTokens, uint256 _initialUnlockPercentage,\\n     uint256 _delayAfterStart, uint256 _linearVestingDuration,uint256 _claimedTokens) public onlyOwner {\\n        vestingSchedules[_user] = UserVesting({\\n            totalTokens: _totalTokens,\\n            initialUnlockPercentage: _initialUnlockPercentage,\\n            delayAfterStart: _delayAfterStart,\\n            linearVestingDuration: _linearVestingDuration,\\n            claimedTokens: _claimedTokens\\n        });\\n    }\\n     \\n    \\n    function calculateClaimableTokens(address _user) public view returns (uint256) {\\n        UserVesting storage vesting = vestingSchedules[_user];\\n        if (block.timestamp < startTime) {\\n            return 0; \\n        }\\n\\n        uint256 timeElapsed = block.timestamp - startTime;\\n        uint256 initUnlockClaimable = 0;\\n        uint256 linearClaimable = 0;\\n\\n        if (timeElapsed >= 0) {\\n            initUnlockClaimable = (vesting.totalTokens * vesting.initialUnlockPercentage) / 1000;\\n        }\\n\\n        if (timeElapsed > vesting.delayAfterStart) {\\n            uint256 timeSinceStartOfLinearVesting = timeElapsed - (vesting.delayAfterStart );\\n            uint256 linearVestingPeriodInSeconds = vesting.linearVestingDuration ;\\n            uint256 totalLinearVestingTokens = vesting.totalTokens - initUnlockClaimable; \\n            uint256 canClaimable = (totalLinearVestingTokens * timeSinceStartOfLinearVesting) / linearVestingPeriodInSeconds;\\n            linearClaimable = canClaimable > totalLinearVestingTokens ? totalLinearVestingTokens : canClaimable;\\n        }\\n\\n        return initUnlockClaimable + linearClaimable - vesting.claimedTokens;\\n    }\\n    \\n    function claimTokens() external {\\n        uint256 claimable = calculateClaimableTokens(msg.sender);\\n        require(claimable > 0, \\\"No claimable tokens\\\");\\n\\n        vestingSchedules[msg.sender].claimedTokens += claimable;\\n        require(token.transfer(msg.sender, claimable), \\\"Token transfer failed\\\");\\n        \\n    }\\n\\n    function withdrawTokens(address _token,uint256 amount)  external onlyOwner {\\n        uint256 contractBalance = IERC20(_token).balanceOf(address(this));\\n        require(amount <= contractBalance, \\\"Insufficient balance in contract\\\");\\n\\n        require(IERC20(_token).transfer(msg.sender, amount), \\\"Token transfer failed\\\");\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialUnlockPercentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_delaysAfterStart\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_linearVestingDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimedTokens\",\"type\":\"uint256[]\"}],\"name\":\"setMultipleUserVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialUnlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delayAfterStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_linearVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedTokens\",\"type\":\"uint256\"}],\"name\":\"setUserVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialUnlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayAfterStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"linearVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}