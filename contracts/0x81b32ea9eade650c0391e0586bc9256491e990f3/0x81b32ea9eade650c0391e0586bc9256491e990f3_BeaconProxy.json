{"SourceCode": "// File contracts/beacon/IBeacon.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBeacon {\r\n    function latestCopy() external view returns(address);\r\n}\r\n\r\n\r\n// File contracts/beacon/BeaconProxy.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract BeaconProxy {\r\n\r\n    bytes32 private constant BEACON_SLOT = keccak256(abi.encodePacked(\"fairmint.beaconproxy.beacon\"));\r\n\r\n    constructor() public {\r\n        _setBeacon(msg.sender);\r\n    }\r\n\r\n    function _setBeacon(address _beacon) private {\r\n        bytes32 slot = BEACON_SLOT;\r\n        assembly {\r\n            sstore(slot, _beacon)\r\n        }\r\n    }\r\n\r\n    function _getBeacon() internal view returns(address beacon) {\r\n        bytes32 slot = BEACON_SLOT;\r\n        assembly {\r\n            beacon := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _getMasterCopy() internal view returns(address) {\r\n        IBeacon beacon = IBeacon(_getBeacon());\r\n        return beacon.latestCopy();\r\n    }\r\n\r\n    fallback() external payable {\r\n        address copy = _getMasterCopy();\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), copy, 0, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(0, 0, size)\r\n            switch result\r\n            case 0 { revert(0, size) }\r\n            default { return(0, size) }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "BeaconProxy", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0xc1e16e98dd14058c45a7f0a639e241205a95035d", "SwarmSource": "ipfs://708e96778078df402acd1d78ee82eeedde4e0d3ea9fe834312ea1f5214bf45b0"}