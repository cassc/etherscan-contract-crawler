{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/router/modules/pool/curve/CurveV1Module.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IndexedToken, IPoolModule} from \\\"../../../interfaces/IPoolModule.sol\\\";\\nimport {ICurveV1Pool} from \\\"../../../interfaces/curve/ICurveV1Pool.sol\\\";\\nimport {UniversalTokenLib} from \\\"../../../libs/UniversalToken.sol\\\";\\n\\nimport {OnlyDelegateCall} from \\\"../../OnlyDelegateCall.sol\\\";\\n\\n/// @notice PoolModule for Curve V1 pools\\n/// @dev Implements IPoolModule interface to be used with pools added to LinkedPool router\\ncontract CurveV1Module is OnlyDelegateCall, IPoolModule {\\n    using UniversalTokenLib for address;\\n\\n    /// @inheritdoc IPoolModule\\n    function poolSwap(\\n        address pool,\\n        IndexedToken memory tokenFrom,\\n        IndexedToken memory tokenTo,\\n        uint256 amountIn\\n    ) external returns (uint256 amountOut) {\\n        assertDelegateCall();\\n        int128 i = int128(uint128(tokenFrom.index));\\n        int128 j = int128(uint128(tokenTo.index));\\n        tokenFrom.token.universalApproveInfinity(pool, amountIn);\\n        amountOut = ICurveV1Pool(pool).exchange(i, j, amountIn, 0);\\n    }\\n\\n    /// @inheritdoc IPoolModule\\n    function getPoolQuote(\\n        address pool,\\n        IndexedToken memory tokenFrom,\\n        IndexedToken memory tokenTo,\\n        uint256 amountIn,\\n        bool probePaused\\n    ) external view returns (uint256 amountOut) {\\n        int128 i = int128(uint128(tokenFrom.index));\\n        int128 j = int128(uint128(tokenTo.index));\\n        amountOut = ICurveV1Pool(pool).get_dy(i, j, amountIn);\\n    }\\n\\n    /// @dev same logic as LinkedPool.sol::_getPoolTokens\\n    function _numTokens(address pool) public view returns (uint256 numTokens) {\\n        while (true) {\\n            try ICurveV1Pool(pool).coins(numTokens) returns (address) {\\n                unchecked {\\n                    ++numTokens;\\n                }\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IPoolModule\\n    function getPoolTokens(address pool) external view returns (address[] memory tokens) {\\n        uint256 numTokens = _numTokens(pool);\\n        tokens = new address[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            tokens[i] = ICurveV1Pool(pool).coins(i);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/IPoolModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IndexedToken} from \\\"../libs/Structs.sol\\\";\\n\\ninterface IPoolModule {\\n    /// @notice Performs a swap via the given pool, assuming `tokenFrom` is already in the contract.\\n    /// After the call, the contract should have custody over the received `tokenTo` tokens.\\n    /// @dev This will be used via delegatecall from LinkedPool, which will have the custody over the initial tokens,\\n    /// and will only use the correct pool address for interacting with the Pool Module.\\n    /// Note: Pool Module is responsible for issuing the token approvals, if `pool` requires them.\\n    /// Note: execution needs to be reverted, if swap fails for any reason.\\n    /// @param pool         Address of the pool\\n    /// @param tokenFrom    Token to swap from\\n    /// @param tokenTo      Token to swap to\\n    /// @param amountIn     Amount of tokenFrom to swap\\n    /// @return amountOut   Amount of tokenTo received after the swap\\n    function poolSwap(\\n        address pool,\\n        IndexedToken memory tokenFrom,\\n        IndexedToken memory tokenTo,\\n        uint256 amountIn\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns a quote for a swap via the given pool.\\n    /// @dev This will be used by LinkedPool, which is supposed to pass only the correct pool address.\\n    /// Note: Pool Module should bubble the revert, if pool quote fails for any reason.\\n    /// Note: Pool Module should only revert if the pool is paused, if `probePaused` is true.\\n    /// @param pool         Address of the pool\\n    /// @param tokenFrom    Token to swap from\\n    /// @param tokenTo      Token to swap to\\n    /// @param amountIn     Amount of tokenFrom to swap\\n    /// @param probePaused  Whether to check if the pool is paused\\n    /// @return amountOut   Amount of tokenTo received after the swap\\n    function getPoolQuote(\\n        address pool,\\n        IndexedToken memory tokenFrom,\\n        IndexedToken memory tokenTo,\\n        uint256 amountIn,\\n        bool probePaused\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns the list of tokens in the pool. Tokens should be returned in the same order\\n    /// that is used by the pool for indexing.\\n    /// @dev Execution needs to be reverted, if pool tokens retrieval fails for any reason, e.g.\\n    /// if the given pool is not compatible with the Pool Module.\\n    /// @param pool         Address of the pool\\n    /// @return tokens      Array of tokens in the pool\\n    function getPoolTokens(address pool) external view returns (address[] memory tokens);\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/curve/ICurveV1Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ICurveV1Pool {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/router/libs/UniversalToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {TokenNotContract} from \\\"./Errors.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary UniversalTokenLib {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\\n    /// @dev This might trigger fallback, if ETH is transferred to the contract.\\n    /// Make sure this can not lead to reentrancy attacks.\\n    function universalTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // Don't do anything, if need to send tokens to this address\\n        if (to == address(this)) return;\\n        if (token == ETH_ADDRESS) {\\n            /// @dev Note: this can potentially lead to executing code in `to`.\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to.call{value: value}(\\\"\\\");\\n            require(success, \\\"ETH transfer failed\\\");\\n        } else {\\n            IERC20(token).safeTransfer(to, value);\\n        }\\n    }\\n\\n    /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\\n    /// to spend the given amount.\\n    function universalApproveInfinity(\\n        address token,\\n        address spender,\\n        uint256 amountToSpend\\n    ) internal {\\n        // ETH Chad doesn't require your approval\\n        if (token == ETH_ADDRESS) return;\\n        // No-op if allowance is already sufficient\\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\\n        if (allowance >= amountToSpend) return;\\n        // Otherwise, reset approval to 0 and set to max allowance\\n        if (allowance > 0) IERC20(token).safeApprove(spender, 0);\\n        IERC20(token).safeApprove(spender, type(uint256).max);\\n    }\\n\\n    /// @notice Returns the balance of the given token (or native ETH) for the given account.\\n    function universalBalanceOf(address token, address account) internal view returns (uint256) {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    /// @dev Checks that token is a contract and not ETH_ADDRESS.\\n    function assertIsContract(address token) internal view {\\n        // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\\n        if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\\n        // Check that token is not an EOA\\n        if (token.code.length == 0) revert TokenNotContract();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/modules/OnlyDelegateCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nabstract contract OnlyDelegateCall {\\n    address private immutable original;\\n\\n    constructor() {\\n        original = address(this);\\n    }\\n\\n    function assertDelegateCall() internal view {\\n        require(address(this) != original, \\\"Not a delegate call\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/libs/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13; // \\\"using A for B global\\\" requires 0.8.13 or higher\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 TOKEN AND POOL DESCRIPTION \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n/// @notice Struct representing a bridge token. Used as the return value in view functions.\\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\\n/// @param token    Bridge token address\\nstruct BridgeToken {\\n    string symbol;\\n    address token;\\n}\\n\\n/// @notice Struct used by IPoolHandler to represent a token in a pool\\n/// @param index    Token index in the pool\\n/// @param token    Token address\\nstruct IndexedToken {\\n    uint8 index;\\n    address token;\\n}\\n\\n/// @notice Struct representing a token, and the available Actions for performing a swap.\\n/// @param actionMask   Bitmask representing what actions (see ActionLib) are available for swapping a token\\n/// @param token        Token address\\nstruct LimitedToken {\\n    uint256 actionMask;\\n    address token;\\n}\\n\\n/// @notice Struct representing how pool tokens are stored by `SwapQuoter`.\\n/// @param isWeth   Whether the token represents Wrapped ETH.\\n/// @param token    Token address.\\nstruct PoolToken {\\n    bool isWeth;\\n    address token;\\n}\\n\\n/// @notice Struct representing a liquidity pool. Used as the return value in view functions.\\n/// @param pool         Pool address.\\n/// @param lpToken      Address of pool's LP token.\\n/// @param tokens       List of pool's tokens.\\nstruct Pool {\\n    address pool;\\n    address lpToken;\\n    PoolToken[] tokens;\\n}\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 ROUTER STRUCTS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n/// @notice Struct representing a quote request for swapping a bridge token.\\n/// Used in destination chain's SynapseRouter, hence the name \\\"Destination Request\\\".\\n/// @dev tokenOut is passed externally.\\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\\n/// @param amountIn Amount of bridge token to start with, before the bridge fee is applied\\nstruct DestRequest {\\n    string symbol;\\n    uint256 amountIn;\\n}\\n\\n/// @notice Struct representing a swap request for SynapseRouter.\\n/// @dev tokenIn is supplied separately.\\n/// @param routerAdapter    Contract that will perform the swap for the Router. Address(0) specifies a \\\"no swap\\\" query.\\n/// @param tokenOut         Token address to swap to.\\n/// @param minAmountOut     Minimum amount of tokens to receive after the swap, or tx will be reverted.\\n/// @param deadline         Latest timestamp for when the transaction needs to be executed, or tx will be reverted.\\n/// @param rawParams        ABI-encoded params for the swap that will be passed to `routerAdapter`.\\n///                         Should be DefaultParams for swaps via DefaultAdapter.\\nstruct SwapQuery {\\n    address routerAdapter;\\n    address tokenOut;\\n    uint256 minAmountOut;\\n    uint256 deadline;\\n    bytes rawParams;\\n}\\n\\nusing SwapQueryLib for SwapQuery global;\\n\\nlibrary SwapQueryLib {\\n    /// @notice Checks whether the router adapter was specified in the query.\\n    /// Query without a router adapter specifies that no action needs to be taken.\\n    function hasAdapter(SwapQuery memory query) internal pure returns (bool) {\\n        return query.routerAdapter != address(0);\\n    }\\n\\n    /// @notice Fills `routerAdapter` and `deadline` fields in query, if it specifies one of the supported Actions,\\n    /// and if a path for this action was found.\\n    function fillAdapterAndDeadline(SwapQuery memory query, address routerAdapter) internal pure {\\n        // Fill the fields only if some path was found.\\n        if (query.minAmountOut == 0) return;\\n        // Empty params indicates no action needs to be done, thus no adapter is needed.\\n        query.routerAdapter = query.rawParams.length == 0 ? address(0) : routerAdapter;\\n        // Set default deadline to infinity. Not using the value of 0,\\n        // which would lead to every swap to revert by default.\\n        query.deadline = type(uint256).max;\\n    }\\n}\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 ADAPTER STRUCTS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n/// @notice Struct representing parameters for swapping via DefaultAdapter.\\n/// @param action           Action that DefaultAdapter needs to perform.\\n/// @param pool             Liquidity pool that will be used for Swap/AddLiquidity/RemoveLiquidity actions.\\n/// @param tokenIndexFrom   Token index to swap from. Used for swap/addLiquidity actions.\\n/// @param tokenIndexTo     Token index to swap to. Used for swap/removeLiquidity actions.\\nstruct DefaultParams {\\n    Action action;\\n    address pool;\\n    uint8 tokenIndexFrom;\\n    uint8 tokenIndexTo;\\n}\\n\\n/// @notice All possible actions that DefaultAdapter could perform.\\nenum Action {\\n    Swap, // swap between two pools tokens\\n    AddLiquidity, // add liquidity in a form of a single pool token\\n    RemoveLiquidity, // remove liquidity in a form of a single pool token\\n    HandleEth // ETH <> WETH interaction\\n}\\n\\nusing ActionLib for Action global;\\n\\n/// @notice Library for dealing with bit masks which describe what set of Actions is available.\\nlibrary ActionLib {\\n    /// @notice Returns a bitmask with all possible actions set to True.\\n    function allActions() internal pure returns (uint256 actionMask) {\\n        actionMask = type(uint256).max;\\n    }\\n\\n    /// @notice Returns whether the given action is set to True in the bitmask.\\n    function isIncluded(Action action, uint256 actionMask) internal pure returns (bool) {\\n        return actionMask & mask(action) != 0;\\n    }\\n\\n    /// @notice Returns a bitmask with only the given action set to True.\\n    function mask(Action action) internal pure returns (uint256) {\\n        return 1 << uint256(action);\\n    }\\n\\n    /// @notice Returns a bitmask with only two given actions set to True.\\n    function mask(Action a, Action b) internal pure returns (uint256) {\\n        return mask(a) | mask(b);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/libs/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nerror DeadlineExceeded();\\nerror InsufficientOutputAmount();\\n\\nerror MsgValueIncorrect();\\nerror PoolNotFound();\\nerror TokenAddressMismatch();\\nerror TokenNotContract();\\nerror TokenNotETH();\\nerror TokensIdentical();\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@boringcrypto/=node_modules/@boringcrypto/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"sol-explore/=node_modules/sol-explore/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"synthetix/=node_modules/synthetix/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"_numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IndexedToken\",\"name\":\"tokenFrom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IndexedToken\",\"name\":\"tokenTo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"probePaused\",\"type\":\"bool\"}],\"name\":\"getPoolQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IndexedToken\",\"name\":\"tokenFrom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IndexedToken\",\"name\":\"tokenTo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"poolSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CurveV1Module", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b49e22f0bb6d9741612ca0f22831850a56d7f783244bd9fe10e54d1a01195cc1"}