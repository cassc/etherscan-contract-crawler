{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mojito/onchain/OnchainBuy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC721, IERC165} from \\\"../../openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"../../openzeppelin/token/ERC1155/IERC1155.sol\\\";\\nimport {ReentrancyGuard} from \\\"../../openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"../../openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"../../openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AdminControl} from \\\"../../manifold/libraries-solidity/access/AdminControl.sol\\\";\\nimport {IERC721CreatorCore} from \\\"../../manifold/creator-core/core/IERC721CreatorCore.sol\\\";\\nimport {IERC1155CreatorCore} from \\\"../../manifold/creator-core/core/IERC1155CreatorCore.sol\\\";\\nimport {ECDSA} from \\\"../../openzeppelin/utils/cryptography/ECDSA.sol\\\";\\n\\ninterface IPriceFeed {\\n    function getLatestPrice(\\n        uint256 amount,\\n        address fiat\\n    ) external view returns (uint256);\\n}\\n\\ninterface IRoyaltyEngine {\\n    function getRoyalty(\\n        address collectionAddress,\\n        uint256 tokenId\\n    ) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\\ninterface ITokenGating {\\n    function acquireGating(\\n        address collectionAddress,\\n        uint256 tokenId,\\n        address walletAddress\\n    ) external returns (bool);\\n}\\n\\n/**\\n * @title An onchain payment for buy now flow where owners can list the tokens for sale \\n and the buyers can buy the token using the buy function\\n */\\ncontract OnchainBuy is ReentrancyGuard, AdminControl {\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    /// @notice The metadata for a given Order\\n    /// @param nftStartTokenId the Nft token Id listed From\\n    /// @param nftEndTokenId the NFT token Id listed To\\n    /// @param maxCap the total supply for minting\\n    /// @param nftContractAddress the nft contract address\\n    /// @param minimumFiatPrice the minimum price of the listed tokens\\n    /// @param minimumCryptoPrice the cryptoprice of provided crypto\\n    /// @param paymentCurrency the payment currency for seller requirement\\n    /// @param paymentSettlement the settlement address and payment percentage provided in basis points\\n    /// @param TransactionStatus the status to be minted or transfered\\n    /// @param PaymentStatus the status to get the price from fiat conversion or crypto price provided\\n    /// @param tokenGatingContract the address of the gating contract\\n    struct PriceList {\\n        uint64 nftStartTokenId;\\n        uint64 nftEndTokenId;\\n        uint64 maxCap;\\n        address nftContractAddress;\\n        uint256 minimumFiatPrice; // in USD\\n        uint256[] minimumCryptoPrice; // in Crypto\\n        address[] paymentCurrency; // in ETH/ERC20\\n        settlementList paymentSettlement;\\n        TransactionStatus transactionStatus;\\n        PaymentStatus paymentStatus;\\n        address tokenGatingContract;\\n    }\\n    /// @notice The metadata for a given Order\\n    /// @param paymentSettlementAddress the settlement address for the listed tokens\\n    /// @param taxSettlementAddress the taxsettlement address for settlement of tax fee\\n    /// @param commissionAddress the commission address for settlement of commission fee\\n    /// @param platformSettlementAddress the platform address for settlement of platform fee\\n    /// @param commissionFeePercentage the commission fee given in basis points\\n    /// @param platformFeePercentage the platform fee given in basis points\\n    struct settlementList {\\n        address payable paymentSettlementAddress;\\n        address payable taxSettlementAddress;\\n        address payable commissionAddress;\\n        address payable platformSettlementAddress;\\n        uint16 commissionFeePercentage; // in basis points\\n        uint16 platformFeePercentage; // in basis points\\n    }\\n\\n    /// @notice The details to be provided to buy the token\\n    /// @param saleId the Id of the created sale\\n    /// @param tokenOwner the owner of the nft token\\n    /// @param tokenId the token Id of the owner owns\\n    /// @param tokenQuantity the token Quantity only required if minting\\n    /// @param quantity the quantity of tokens for 1155 only\\n    /// @param buyer the person who buys the nft\\n    /// @param paymentToken the type of payment currency that the buyers pay out\\n    /// @param paymentAmount the amount to be paid in the payment currency\\n    /// @param gatedCollection the gated nft collection need to be verified\\n    /// @param gatedTokenId the tokenId which was gated\\n    struct BuyList {\\n        string saleId;\\n        address tokenOwner;\\n        uint256 tokenId;\\n        uint64 tokenQuantity;\\n        uint64 quantity;\\n        address buyer;\\n        address paymentToken;\\n        uint256 paymentAmount;\\n        address gatedColletion;\\n        uint256 gatedTokenId;\\n    }\\n\\n    struct Discount {\\n        uint16 discountPercentage;\\n        uint32 expirationTime;\\n        string nonce;\\n        bytes signature;\\n        address signer;\\n    }\\n\\n    // TransactionStatus shows the preference for mint or transfer\\n    enum TransactionStatus {\\n        mint,\\n        transfer\\n    }\\n    // PaymentStatus shows the preference for fiat conversion or direct crypto\\n    enum PaymentStatus {\\n        fiat,\\n        crypto\\n    }\\n\\n    // Fee percentage to the Platform\\n    uint16 private platformFeePercentage;\\n\\n    // maxQuantity for 1155 NFT-tokens\\n    uint64 private max1155Quantity;\\n\\n    // admin approval requirement\\n    bool adminApprovalRequired;\\n\\n    // Platform Address\\n    address payable private platformAddress;\\n\\n    // The address of the Price Feed Aggregator to use via this contract\\n    IPriceFeed private priceFeedAddress;\\n\\n    // The address of the royaltySupport to use via this contract\\n    IRoyaltyEngine private royaltySupport;\\n\\n    // listing the sale details in sale Id\\n    mapping(string => PriceList) public listings;\\n\\n    // tokens used to be compared with maxCap\\n    mapping(string => uint256) public tokensUsed;\\n\\n    // validating saleId\\n    mapping(string => bool) usedSaleId;\\n\\n    // Discount validation\\n    mapping(bytes => bool) public discountUsed;\\n\\n    // Interface ID constants\\n    bytes4 private constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n    bytes4 private constant ERC1155_INTERFACE_ID = 0xd9b67a26;\\n\\n    /// @notice Emitted when sale is created\\n    /// @param saleList contains the details of sale created\\n    /// @param CreatedOrUpdated the details provide whether sale is created or updated\\n    event saleCreated(PriceList saleList, string CreatedOrUpdated);\\n\\n    /// @notice Emitted when sale is closed\\n    /// @param saleId contains the details of cancelled sale\\n    event saleClosed(string saleId);\\n\\n    /// @notice Emitted when an Buy Event is completed\\n    /// @param tokenContract The NFT Contract address\\n    /// @param buyingDetails consist of buyer details\\n    /// @param MintedtokenId consist of minted tokenId details\\n    /// @param tax paid to the taxsettlement Address\\n    /// @param paymentAmount total amount paid by buyer\\n    /// @param totalAmount the amount paid by the buyer\\n    event BuyExecuted(\\n        address indexed tokenContract,\\n        BuyList buyingDetails,\\n        uint256[] MintedtokenId,\\n        uint256 tax,\\n        uint256 paymentAmount,\\n        uint256 totalAmount\\n    );\\n\\n    /// @notice Emitted when an Royalty Payout is executed\\n    /// @param tokenId The NFT tokenId\\n    /// @param tokenContract The NFT Contract address\\n    /// @param recipient Address of the Royalty Recipient\\n    /// @param amount Amount sent to the royalty recipient address\\n    event RoyaltyPayout(\\n        address tokenContract,\\n        uint256 tokenId,\\n        address recipient,\\n        uint256 amount\\n    );\\n\\n    /// @param _platformAddress The Platform Address\\n    /// @param _platformFeePercentage The Platform fee percentage\\n    /// @param _max1155Quantity The max quantity we support for 1155 Nfts\\n    /// @param _priceFeedAddress the address of the pricefeed\\n    /// @param _royaltycontract the address to get the royalty data\\n    /// @param _adminApprovalRequired the bool data to specify the admin approval requirement\\n    constructor(\\n        address _platformAddress,\\n        uint16 _platformFeePercentage,\\n        uint64 _max1155Quantity,\\n        IPriceFeed _priceFeedAddress,\\n        IRoyaltyEngine _royaltycontract,\\n        bool _adminApprovalRequired\\n    ) {\\n        require(_platformAddress != address(0), \\\"Invalid Platform Address\\\");\\n        require(\\n            _platformFeePercentage < 10000,\\n            \\\"platformFee should be less than 10000\\\"\\n        );\\n        platformAddress = payable(_platformAddress);\\n        platformFeePercentage = _platformFeePercentage;\\n        max1155Quantity = _max1155Quantity;\\n        priceFeedAddress = _priceFeedAddress;\\n        royaltySupport = _royaltycontract;\\n        adminApprovalRequired = _adminApprovalRequired;\\n    }\\n\\n    /**\\n     * @notice creating a batch sales using batch details .\\n     * @param list gives the listing details to create a sale\\n     * @param saleId consist of the id of the listed sale\\n     */\\n    function createOrUpdateSale(\\n        PriceList calldata list,\\n        string calldata saleId\\n    ) external adminRequired {\\n        uint16 totalFeeBasisPoints;\\n        // checks for platform and commission fee to be less than 100 %\\n        if (list.paymentSettlement.platformFeePercentage != 0) {\\n            totalFeeBasisPoints += (list\\n                .paymentSettlement\\n                .platformFeePercentage +\\n                list.paymentSettlement.commissionFeePercentage);\\n        } else {\\n            totalFeeBasisPoints += (platformFeePercentage +\\n                list.paymentSettlement.commissionFeePercentage);\\n        }\\n        require(\\n            totalFeeBasisPoints < 10000,\\n            \\\"The total fee basis point should be less than 10000\\\"\\n        );\\n        // checks for valuable token start and end id for listing\\n        if (list.nftStartTokenId > 0 && list.nftEndTokenId > 0) {\\n            require(\\n                list.nftEndTokenId >= list.nftStartTokenId,\\n                \\\"This is not a valid NFT start or end token ID. Please verify that the range provided is correct\\\"\\n            );\\n        }\\n        // array for paymentCurrency and minimumPrice to be of same length\\n        require(\\n            list.paymentCurrency.length == list.minimumCryptoPrice.length,\\n            \\\"should provide equal length in price and payment address\\\"\\n        );\\n\\n        // checks to provide maxcap while listing only for minting\\n        if (list.transactionStatus == TransactionStatus.mint) {\\n            require(list.maxCap != 0, \\\"should provide maxCap for minting\\\");\\n\\n            require(\\n                list.nftStartTokenId == 0 && list.nftEndTokenId == 0,\\n                \\\"The NFTstarttokenid and NFTendtokenid should be 0 for minting\\\"\\n            );\\n        } else {\\n            require(\\n                list.maxCap == 0,\\n                \\\"maxCap should be 0 for preminted tokens\\\"\\n            );\\n        }\\n        // checks to provide only supported interface for nftContractAddress\\n        require(\\n            IERC165(list.nftContractAddress).supportsInterface(\\n                ERC721_INTERFACE_ID\\n            ) ||\\n                IERC165(list.nftContractAddress).supportsInterface(\\n                    ERC1155_INTERFACE_ID\\n                ),\\n            \\\"should provide only supported contract interfaces ERC 721/1155\\\"\\n        );\\n        // checks for paymentSettlementAddress should not be zero\\n        require(\\n            list.paymentSettlement.paymentSettlementAddress != address(0),\\n            \\\"should provide valid wallet address for settlement\\\"\\n        );\\n        // checks for taxSettlelentAddress should not be zero\\n        require(\\n            list.paymentSettlement.taxSettlementAddress != address(0),\\n            \\\"should provide valid wallet address for tax settlement\\\"\\n        );\\n        if (!usedSaleId[saleId]) {\\n            listings[saleId] = list;\\n\\n            usedSaleId[saleId] = true;\\n\\n            emit saleCreated(list, \\\"saleCreated\\\");\\n        } else if (usedSaleId[saleId]) {\\n            listings[saleId] = list;\\n            emit saleCreated(list, \\\"saleUpdated\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice End an sale, finalizing and paying out the respective parties.\\n     * @param list gives the listing details to buy the nfts\\n     * @param tax the amount of tax to be paid by the buyer\\n     */\\n    function buy(\\n        BuyList memory list,\\n        uint256 tax,\\n        Discount calldata discount\\n    ) external payable nonReentrant returns (uint256[] memory nftTokenId) {\\n        settlementList memory settlement = listings[list.saleId]\\n            .paymentSettlement;\\n        PriceList memory saleList = listings[list.saleId];\\n        // checks for saleId is created for sale\\n        require(usedSaleId[list.saleId], \\\"unsupported sale\\\");\\n\\n        // should be called by the contract admins or by the buyer\\n        require(\\n            isAdmin(msg.sender) || list.buyer == msg.sender,\\n            \\\"Only the buyer or admin or owner of this contract can call this function\\\"\\n        );\\n        \\n        if (saleList.tokenGatingContract != address(0)) {\\n            require(\\n                ITokenGating(saleList.tokenGatingContract).acquireGating(\\n                    list.gatedColletion,\\n                    list.gatedTokenId,\\n                    list.buyer\\n                ),\\n                \\\"please provede the required gated collection and token details to buy the nft\\\"\\n            );\\n        }\\n        uint16 discountinBps;\\n\\n        if (discount.discountPercentage > 0 || adminApprovalRequired ) {\\n            if(discount.discountPercentage > 0) {\\n            require(\\n                discount.discountPercentage < 10000,\\n                \\\"The total fee basis point should be less than 10000\\\"\\n            ); \\n            }\\n\\n            require(\\n                isAdmin(discount.signer),\\n                \\\"only owner or admin can sign for discount\\\"\\n            );\\n            require(\\n                !discountUsed[discount.signature],\\n                \\\"signature already applied\\\"\\n            );\\n            require(\\n                _verifySignature(\\n                    list.buyer,\\n                    discount.discountPercentage,\\n                    discount.expirationTime,\\n                    discount.signer,\\n                    discount.nonce,\\n                    discount.signature\\n                ),\\n                \\\"invalid discount signature\\\"\\n            );\\n            discountUsed[discount.signature] = true;\\n\\n            discountinBps = discount.discountPercentage;\\n        }\\n\\n        // handling the errors before buying the NFT\\n        (uint256 minimumPrice, address tokenContract) = errorHandling(\\n            list.saleId,\\n            list.tokenId,\\n            list.tokenQuantity,\\n            list.quantity,\\n            list.paymentToken,\\n            (list.paymentAmount + tax),\\n            list.buyer,\\n            discountinBps\\n        );\\n\\n        // Transferring  the NFT tokens to the buyer\\n        nftTokenId = _tokenTransaction(\\n            list.saleId,\\n            list.tokenOwner,\\n            tokenContract,\\n            list.buyer,\\n            list.tokenId,\\n            list.tokenQuantity,\\n            list.quantity,\\n            saleList.transactionStatus\\n        );\\n\\n        // transferring the tax amount given by buyer as tax to taxSettlementAddress\\n        if (tax > 0) {\\n            _handlePayment(\\n                list.buyer,\\n                settlement.taxSettlementAddress,\\n                list.paymentToken,\\n                tax\\n            );\\n        }\\n\\n        paymentTransaction(\\n            list.saleId,\\n            list.paymentAmount,\\n            list.buyer,\\n            list.paymentToken,\\n            list.tokenId,\\n            tokenContract,\\n            saleList.transactionStatus\\n        );\\n        emit BuyExecuted(\\n            tokenContract,\\n            list,\\n            nftTokenId,\\n            tax,\\n            minimumPrice,\\n            list.paymentAmount\\n        );\\n        return nftTokenId;\\n    }\\n\\n    /**\\n     * @notice payment settlement happens to all settlement address.\\n     * @param _saleId consist of the id of the listed sale\\n     * @param _totalAmount the totalAmount to be paid by the seller\\n     * @param _paymentToken the selected currency the payment is made\\n     * @param _transferredTokenId the tokenId of the transferred token\\n     * @param _tokenContract the nftcontract address of the supported sale\\n     * @param _status the transaction status for mint or transfer\\n     */\\n    function paymentTransaction(\\n        string memory _saleId,\\n        uint256 _totalAmount,\\n        address _paymentFrom,\\n        address _paymentToken,\\n        uint256 _transferredTokenId,\\n        address _tokenContract,\\n        TransactionStatus _status\\n    ) private {\\n        settlementList memory settlement = listings[_saleId].paymentSettlement;\\n\\n        uint256 totalCommession;\\n\\n        // transferring the platformFee amount  to the platformSettlementAddress\\n        if (\\n            settlement.platformSettlementAddress != address(0) &&\\n            settlement.platformFeePercentage > 0\\n        ) {\\n            _handlePayment(\\n                _paymentFrom,\\n                settlement.platformSettlementAddress,\\n                _paymentToken,\\n                totalCommession += ((_totalAmount *\\n                    settlement.platformFeePercentage) / 10000)\\n            );\\n        } else if (platformAddress != address(0) && platformFeePercentage > 0) {\\n            _handlePayment(\\n                _paymentFrom,\\n                platformAddress,\\n                _paymentToken,\\n                totalCommession += ((_totalAmount * platformFeePercentage) /\\n                    10000)\\n            );\\n        }\\n\\n        // transferring the commissionfee amount  to the commissionAddress\\n        if (\\n            settlement.commissionAddress != address(0) &&\\n            settlement.commissionFeePercentage > 0\\n        ) {\\n            totalCommession += ((_totalAmount *\\n                settlement.commissionFeePercentage) / 10000);\\n            _handlePayment(\\n                _paymentFrom,\\n                settlement.commissionAddress,\\n                _paymentToken,\\n                ((_totalAmount * settlement.commissionFeePercentage) / 10000)\\n            );\\n        }\\n\\n        _totalAmount = _totalAmount - totalCommession;\\n\\n        // Royalty Fee Payout Settlement\\n        if (royaltySupport != IRoyaltyEngine(address(0))) {\\n            _totalAmount = royaltyPayout(\\n                _paymentFrom,\\n                _transferredTokenId,\\n                _tokenContract,\\n                _totalAmount,\\n                _paymentToken,\\n                _status\\n            );\\n        }\\n        // Transfer the balance to the paymentSettlementAddress\\n        _handlePayment(\\n            _paymentFrom,\\n            settlement.paymentSettlementAddress,\\n            _paymentToken,\\n            _totalAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice handling the errors while buying the nfts.\\n     * @param _saleId the Id of the created sale\\n     * @param _tokenId the token Id of the owner owns\\n     * @param _tokenQuantity the token Quantity only required if minting\\n     * @param _quantity the quantity of tokens for 1155 only\\n     * @param _paymentToken the type of payment currency that the buyers pays\\n     * @param _paymentAmount the amount to be paid in the payment currency\\n     * @param _payee address of the buyer who buys the token\\n     */\\n    function errorHandling(\\n        string memory _saleId,\\n        uint256 _tokenId,\\n        uint256 _tokenQuantity,\\n        uint256 _quantity,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        address _payee,\\n        uint16 _discountBps\\n    ) private view returns (uint256 _minimumPrice, address _tokenContract) {\\n        PriceList memory saleList = listings[_saleId];\\n        // checks the nft to be buyed is supported in the saleId\\n        if (saleList.nftStartTokenId == 0 && saleList.nftEndTokenId > 0) {\\n            require(\\n                _tokenId <= saleList.nftEndTokenId,\\n                \\\"This is not a valid tokenId. Please verify that the tokenId provided is correct\\\"\\n            );\\n        } else if (\\n            saleList.nftStartTokenId > 0 && saleList.nftEndTokenId == 0\\n        ) {\\n            require(\\n                _tokenId >= saleList.nftStartTokenId,\\n                \\\"This is not a valid tokenId. Please verify that the tokenId provided is correct\\\"\\n            );\\n        } else if (saleList.nftStartTokenId > 0 && saleList.nftEndTokenId > 0) {\\n            require(\\n                _tokenId >= saleList.nftStartTokenId &&\\n                    _tokenId <= saleList.nftEndTokenId,\\n                \\\"This is not a valid tokenId. Please verify that the tokenId provided is correct\\\"\\n            );\\n        }\\n        // getting the payment currency and the price using saleId\\n        _tokenContract = saleList.nftContractAddress;\\n\\n        // getting the price using saleId\\n        if (saleList.paymentStatus == PaymentStatus.fiat) {\\n            _minimumPrice = priceFeedAddress.getLatestPrice(\\n                saleList.minimumFiatPrice,\\n                _paymentToken\\n            );\\n        } else if (saleList.paymentStatus == PaymentStatus.crypto) {\\n            for (uint256 i; i < saleList.paymentCurrency.length; i++) {\\n                if (saleList.paymentCurrency[i] == _paymentToken) {\\n                    _minimumPrice = saleList.minimumCryptoPrice[i];\\n                    break;\\n                }\\n            }\\n        }\\n        // check for the minimumPrice we get should not be zero\\n        require(\\n            _minimumPrice != 0,\\n            \\\"Please provide valid supported ERC20/ETH address\\\"\\n        );\\n        if (_discountBps > 0) {\\n            _minimumPrice =\\n                _minimumPrice -\\n                ((_minimumPrice * _discountBps) / 10000);\\n        }\\n\\n        if (saleList.transactionStatus == TransactionStatus.mint) {\\n            // checks for tokenQuantity for 1155 NFTs\\n            require(\\n                _quantity <= max1155Quantity,\\n                \\\"The maximum quantity allowed to purchase at one time should not be more than defined in max1155Quantity\\\"\\n            );\\n            if (\\n                IERC165(_tokenContract).supportsInterface(ERC721_INTERFACE_ID)\\n            ) {\\n                _minimumPrice = (_minimumPrice * _tokenQuantity);\\n            } else if (\\n                IERC165(_tokenContract).supportsInterface(ERC1155_INTERFACE_ID)\\n            ) {\\n                if (\\n                    IERC1155CreatorCore(_tokenContract).totalSupply(_tokenId) ==\\n                    0\\n                ) {\\n                    /* multiplying the total number of tokens and quantity with amount to get the \\n                     total price for 1155 nfts ofr minting*/\\n                    _minimumPrice = (_minimumPrice *\\n                        _tokenQuantity *\\n                        _quantity);\\n                } else {\\n                    /* multiplying the total number of tokens with amount to get the \\n                     total price for 721 nfts for minting*/\\n                    _minimumPrice = (_minimumPrice * _quantity);\\n                }\\n            }\\n        } else if (saleList.transactionStatus == TransactionStatus.transfer) {\\n            _minimumPrice = (_minimumPrice * _quantity);\\n        }\\n        if (_paymentToken == address(0)) {\\n            require(\\n                msg.value == _paymentAmount && _paymentAmount >= _minimumPrice,\\n                \\\"Insufficient funds or invalid amount. You need to pass a valid amount to complete this transaction\\\"\\n            );\\n        } else {\\n            // checks the buyer has sufficient amount to buy the nft\\n            require(\\n                IERC20(_paymentToken).balanceOf(_payee) >= _paymentAmount &&\\n                    _paymentAmount >= _minimumPrice,\\n                \\\"Insufficient funds. You should have sufficient balance to complete this transaction\\\"\\n            );\\n            // checks the buyer has provided approval for the contract to transfer the amount\\n            require(\\n                IERC20(_paymentToken).allowance(_payee, address(this)) >=\\n                    _paymentAmount,\\n                \\\"Insufficient approval from an ERC20 Token. Please provide approval to this contract and try again\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice handling royaltyPayout while buying the nfts.\\n     * @param _buyer the address of the buyer\\n     * @param _tokenId the token Id of the nft\\n     * @param _tokenContract the address of the nft contract\\n     * @param _amount the amount to be paid in the payment currency\\n     * @param _paymentToken the type of payment currency that the buyers pays\\n     * @param _status the status of minting or transferring of nfts\\n     */\\n    function royaltyPayout(\\n        address _buyer,\\n        uint256 _tokenId,\\n        address _tokenContract,\\n        uint256 _amount,\\n        address _paymentToken,\\n        TransactionStatus _status\\n    ) private returns (uint256 remainingProfit) {\\n        if (_status == TransactionStatus.transfer) {\\n            //  royalty payout for already minted tokens\\n            remainingProfit = _handleRoyaltyEnginePayout(\\n                _buyer,\\n                _tokenContract,\\n                _tokenId,\\n                _amount,\\n                _paymentToken\\n            );\\n        } \\n    }\\n\\n    /// @notice The details to be provided to buy the token\\n    /// @param _saleId the Id of the created sale\\n    /// @param _tokenOwner the owner of the nft token\\n    /// @param _tokenContract the address of the nft contract\\n    /// @param _buyer the address of the buyer\\n    /// @param _tokenId the token Id to be buyed by the buyer\\n    /// @param _tokenQuantity the token Quantity only required if minting\\n    /// @param _quantity the quantity of tokens for 1155 only\\n    /// @param _status the status of minting or transferring of nfts\\n    function _tokenTransaction(\\n        string memory _saleId,\\n        address _tokenOwner,\\n        address _tokenContract,\\n        address _buyer,\\n        uint256 _tokenId,\\n        uint256 _tokenQuantity,\\n        uint256 _quantity,\\n        TransactionStatus _status\\n    ) private returns (uint256[] memory nftTokenId) {\\n        if (IERC165(_tokenContract).supportsInterface(ERC721_INTERFACE_ID)) {\\n            if (_status == TransactionStatus.transfer) {\\n                require(\\n                    IERC721(_tokenContract).ownerOf(_tokenId) == _tokenOwner,\\n                    \\\"Invalid NFT Owner Address. Please check and try again\\\"\\n                );\\n                // Transferring the ERC721\\n                IERC721(_tokenContract).safeTransferFrom(\\n                    _tokenOwner,\\n                    _buyer,\\n                    _tokenId\\n                );\\n            } else if (_status == TransactionStatus.mint) {\\n                require(\\n                    tokensUsed[_saleId] + _tokenQuantity <=\\n                        listings[_saleId].maxCap,\\n                    \\\"The maximum quantity allowed to purchase ERC721 token has been sold out. Please contact the sale owner for more details\\\"\\n                );\\n                // Minting the ERC721 in a batch\\n                nftTokenId = IERC721CreatorCore(_tokenContract)\\n                    .mintExtensionBatch(_buyer, uint16(_tokenQuantity));\\n                tokensUsed[_saleId] = tokensUsed[_saleId] + _tokenQuantity;\\n            }\\n        } else if (\\n            IERC165(_tokenContract).supportsInterface(ERC1155_INTERFACE_ID)\\n        ) {\\n            if (_status == TransactionStatus.transfer) {\\n                uint256 ownerBalance = IERC1155(_tokenContract).balanceOf(\\n                    _tokenOwner,\\n                    _tokenId\\n                );\\n                require(\\n                    _quantity <= ownerBalance && _quantity > 0,\\n                    \\\"Insufficient token balance from the owner\\\"\\n                );\\n\\n                // Transferring the ERC1155\\n                IERC1155(_tokenContract).safeTransferFrom(\\n                    _tokenOwner,\\n                    _buyer,\\n                    _tokenId,\\n                    _quantity,\\n                    \\\"0x\\\"\\n                );\\n            } else if (_status == TransactionStatus.mint) {\\n                address[] memory to = new address[](1);\\n                uint256[] memory amounts = new uint256[](_tokenQuantity);\\n                string[] memory uris;\\n                to[0] = _buyer;\\n                amounts[0] = _quantity;\\n\\n                if (\\n                    IERC1155CreatorCore(_tokenContract).totalSupply(_tokenId) ==\\n                    0\\n                ) {\\n                    require(\\n                        tokensUsed[_saleId] < listings[_saleId].maxCap,\\n                        \\\"The maximum quantity allowed to purchase ERC1155 token has been sold out. Please contact the sale owner for more details\\\"\\n                    );\\n                    for (uint256 i; i < _tokenQuantity; i++) {\\n                        amounts[i] = _quantity;\\n                    }\\n                    // Minting ERC1155  of already existing tokens\\n                    nftTokenId = IERC1155CreatorCore(_tokenContract)\\n                        .mintExtensionNew(to, amounts, uris);\\n\\n                    tokensUsed[_saleId] = tokensUsed[_saleId] + _tokenQuantity;\\n                } else if (\\n                    IERC1155CreatorCore(_tokenContract).totalSupply(_tokenId) >\\n                    0\\n                ) {\\n                    uint256[] memory tokenId = new uint256[](1);\\n                    tokenId[0] = _tokenId;\\n                    // Minting new ERC1155 tokens\\n                    IERC1155CreatorCore(_tokenContract).mintExtensionExisting(\\n                        to,\\n                        tokenId,\\n                        amounts\\n                    );\\n                }\\n            }\\n        }\\n        return nftTokenId;\\n    }\\n\\n    /// @notice Settle the Payment based on the given parameters\\n    /// @param _from Address from whom the amount to be transferred\\n    /// @param _to Address to whom need to settle the payment\\n    /// @param _paymentToken Address of the ERC20 Payment Token\\n    /// @param _amount Amount to be transferred\\n    function _handlePayment(\\n        address _from,\\n        address payable _to,\\n        address _paymentToken,\\n        uint256 _amount\\n    ) private {\\n        bool success;\\n        if (_paymentToken == address(0)) {\\n            // transferreng the native currency\\n            (success, ) = _to.call{value: _amount}(new bytes(0));\\n            require(success, \\\"unable to debit native balance please try again\\\");\\n        } else {\\n            // transferring ERC20 currency\\n            IERC20(_paymentToken).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @notice Settle the Royalty Payment based on the given parameters\\n    /// @param _buyer the address of the buyer\\n    /// @param _tokenContract The NFT Contract address\\n    /// @param _tokenId The NFT tokenId\\n    /// @param _amount Amount to be transferred\\n    /// @param _payoutCurrency Address of the ERC20 Payout\\n    function _handleRoyaltyEnginePayout(\\n        address _buyer,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _payoutCurrency\\n    ) private returns (uint256) {\\n        // Store the initial amount\\n        uint256 amountRemaining = _amount;\\n        uint256 feeAmount;\\n\\n        // Verifying whether the token contract supports Royalties of supported interfaces\\n        (\\n            address payable[] memory recipients,\\n            uint256[] memory bps // Royalty amount denominated in basis points\\n        ) = royaltySupport.getRoyalty(_tokenContract, _tokenId);\\n        // Store the number of recipients\\n        uint256 totalRecipients = recipients.length;\\n\\n        // If there are no royalties, return the initial amount\\n        if (totalRecipients == 0) return _amount;\\n\\n        // Payout each royalty\\n        for (uint256 i = 0; i < totalRecipients; ) {\\n            // Cache the recipient and amount\\n            address payable recipient = recipients[i];\\n\\n            feeAmount = (bps[i] * _amount) / 10000;\\n\\n            // Ensure that we aren't somehow paying out more than we have\\n            require(\\n                amountRemaining >= feeAmount,\\n                \\\"insolvent: unable to complete royalty\\\"\\n            );\\n\\n            _handlePayment(_buyer, recipient, _payoutCurrency, feeAmount);\\n            emit RoyaltyPayout(_tokenContract, _tokenId, recipient, feeAmount);\\n\\n            // Cannot underflow as remaining amount is ensured to be greater than or equal to royalty amount\\n            unchecked {\\n                amountRemaining -= feeAmount;\\n                ++i;\\n            }\\n        }\\n\\n        return amountRemaining;\\n    }\\n\\n    function _verifySignature(\\n        address buyer,\\n        uint16 discountPercentage,\\n        uint32 expirationTime,\\n        address _signer,\\n        string calldata nonce,\\n        bytes calldata _signature\\n    ) internal view returns (bool) {\\n        require(\\n            expirationTime >= block.timestamp,\\n            \\\"discount signature is already expired\\\"\\n        );\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    buyer,\\n                    discountPercentage,\\n                    expirationTime,\\n                    nonce,\\n                    \\\"ONCHAINBUY\\\",\\n                    block.chainid\\n                )\\n            ).toEthSignedMessageHash().recover(_signature) == _signer;\\n    }\\n\\n    /// @notice get the listings currency and price\\n    /// @param saleId to get the details of sale\\n    function getListingPrice(\\n        string calldata saleId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory minimumCryptoPrice,\\n            address[] memory paymentCurrency\\n        )\\n    {\\n        minimumCryptoPrice = listings[saleId].minimumCryptoPrice;\\n        paymentCurrency = listings[saleId].paymentCurrency;\\n    }\\n\\n    /// @notice get contract state details\\n    function getContractData()\\n        external\\n        view\\n        returns (\\n            address _platformAddress,\\n            uint16 _platformFeePercentage,\\n            IPriceFeed _priceFeedAddress,\\n            IRoyaltyEngine _royaltySupport,\\n            uint64 _max1155Quantity\\n        )\\n    {\\n        _platformAddress = platformAddress;\\n        _platformFeePercentage = platformFeePercentage;\\n        _priceFeedAddress = priceFeedAddress;\\n        _royaltySupport = royaltySupport;\\n        _max1155Quantity = max1155Quantity;\\n    }\\n\\n    /// @notice Withdraw the funds to owner\\n    function withdraw(address paymentCurrency) external adminRequired {\\n        bool success;\\n        address payable to = payable(msg.sender);\\n        if (paymentCurrency == address(0)) {\\n            (success, ) = to.call{value: address(this).balance}(new bytes(0));\\n            require(success, \\\"withdraw to withdraw funds. Please try again\\\");\\n        } else if (paymentCurrency != address(0)) {\\n            // transferring ERC20 currency\\n            uint256 amount = IERC20(paymentCurrency).balanceOf(address(this));\\n            IERC20(paymentCurrency).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice cancel the sale of a listed token\\n    /// @param saleId to cancel the sale\\n    function cancelSale(string memory saleId) external adminRequired {\\n        require(\\n            usedSaleId[saleId],\\n            \\\"the saleId you have entered is invalid. Please validate\\\"\\n        );\\n\\n        delete (listings[saleId]);\\n        emit saleClosed(saleId);\\n    }\\n\\n    /// @notice set contract state details\\n    /// @param _platformAddress The Platform Address\\n    /// @param _platformFeePercentage The Platform fee percentage\\n    /// @param _max1155Quantity maxQuantity we support for 1155 NFTs\\n    /// @param _royaltyContract The contract intracts to get the royalty fee\\n    /// @param _pricefeed The contract intracts to get the chainlink feeded price\\n    function setContractData(\\n        address payable _platformAddress,\\n        uint16 _platformFeePercentage,\\n        uint64 _max1155Quantity,\\n        address _royaltyContract,\\n        address _pricefeed\\n    ) external adminRequired {\\n        platformAddress = _platformAddress;\\n        platformFeePercentage = _platformFeePercentage;\\n        max1155Quantity = _max1155Quantity;\\n        royaltySupport = IRoyaltyEngine(_royaltyContract);\\n        priceFeedAddress = IPriceFeed(_pricefeed);\\n    }\\n\\n    /// @notice set Admin approval requirement \\n    /// @param approval addmin approval as a boolean\\n    function setAdminApproval(bool approval) external adminRequired {\\n        adminApprovalRequired = approval;\\n    }\\n\\n    /// @notice get royalty payout details\\n    /// @param collectionAddress the nft contract address\\n    /// @param tokenId the nft token Id\\n    function getRoyaltyInfo(\\n        address collectionAddress,\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (address payable[] memory recipients, uint256[] memory bps)\\n    {\\n        (\\n            recipients,\\n            bps // Royalty amount denominated in basis points\\n        ) = royaltySupport.getRoyalty(collectionAddress, tokenId);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/creator-core/core/IERC1155CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator interface\\n */\\ninterface IERC1155CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintBaseNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token with no extension. Can only be called by an admin.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev mint a token from an extension. Can only be called by a registered extension.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintExtensionNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token from extension. Can only be called by a registered extension.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev burn tokens. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(address account, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given tokenId.\\n     */\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/manifold/creator-core/core/IERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n}\"\r\n    },\r\n    \"contracts/manifold/libraries-solidity/access/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"../../../openzeppelin/utils/introspection/ERC165.sol\\\";\\nimport \\\"../../../openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../../../openzeppelin/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IAdminControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(\\n            owner() == msg.sender || _admins.contains(msg.sender),\\n            \\\"AdminControl: Must be owner or admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins()\\n        external\\n        view\\n        override\\n        returns (address[] memory admins)\\n    {\\n        admins = new address[](_admins.length());\\n        for (uint256 i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public view override returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/libraries-solidity/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"../../../openzeppelin/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/creator-core/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"../../../openzeppelin/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n    event ExtensionRegistered(\\n        address indexed extension,\\n        address indexed sender\\n    );\\n    event ExtensionUnregistered(\\n        address indexed extension,\\n        address indexed sender\\n    );\\n    event ExtensionBlacklisted(\\n        address indexed extension,\\n        address indexed sender\\n    );\\n    event MintPermissionsUpdated(\\n        address indexed extension,\\n        address indexed permissions,\\n        address indexed sender\\n    );\\n    event RoyaltiesUpdated(\\n        uint256 indexed tokenId,\\n        address payable[] receivers,\\n        uint256[] basisPoints\\n    );\\n    event DefaultRoyaltiesUpdated(\\n        address payable[] receivers,\\n        uint256[] basisPoints\\n    );\\n    event ExtensionRoyaltiesUpdated(\\n        address indexed extension,\\n        address payable[] receivers,\\n        uint256[] basisPoints\\n    );\\n    event ExtensionApproveTransferUpdated(\\n        address indexed extension,\\n        bool enabled\\n    );\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI)\\n        external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(\\n        address extension,\\n        string calldata baseURI,\\n        bool baseURIIdentical\\n    ) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical)\\n        external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri)\\n        external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(\\n        uint256[] memory tokenId,\\n        string[] calldata uri\\n    ) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris)\\n        external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions)\\n        external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(\\n        uint256 tokenId,\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(\\n        address extension,\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory);\\n\\n    function getFeeBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/creator-core/core/CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"../../../openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../../openzeppelin/utils/Strings.sol\\\";\\nimport \\\"../../../openzeppelin/utils/introspection/ERC165.sol\\\";\\nimport \\\"../../../openzeppelin/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"../../../openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../../../openzeppelin-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../extensions/ICreatorExtensionTokenURI.sol\\\";\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core creator implementation\\n */\\nabstract contract CreatorCore is ReentrancyGuard, ICreatorCore, ERC165 {\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-assignment\\n    uint256 _tokenCount = 0;\\n\\n    // Track registered extensions data\\n    EnumerableSet.AddressSet internal _extensions;\\n    EnumerableSet.AddressSet internal _blacklistedExtensions;\\n    mapping(address => address) internal _extensionPermissions;\\n    mapping(address => bool) internal _extensionApproveTransfers;\\n\\n    // For tracking which extension a token was minted by\\n    mapping(uint256 => address) internal _tokensExtension;\\n\\n    // The baseURI for a given extension\\n    mapping(address => string) private _extensionBaseURI;\\n    mapping(address => bool) private _extensionBaseURIIdentical;\\n\\n    // The prefix for any tokens with a uri configured\\n    mapping(address => string) private _extensionURIPrefix;\\n\\n    // Mapping for individual token URIs\\n    mapping(uint256 => string) internal _tokenURIs;\\n\\n    // Royalty configurations\\n    mapping(address => address payable[]) internal _extensionRoyaltyReceivers;\\n    mapping(address => uint256[]) internal _extensionRoyaltyBPS;\\n    mapping(uint256 => address payable[]) internal _tokenRoyaltyReceivers;\\n    mapping(uint256 => uint256[]) internal _tokenRoyaltyBPS;\\n\\n    /**\\n     * External interface identifiers for royalties\\n     */\\n\\n    /**\\n     *  @dev CreatorCore\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     *\\n     *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n    /**\\n     *  @dev EIP-2981\\n     *\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ICreatorCore).interfaceId ||\\n            super.supportsInterface(interfaceId) ||\\n            interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE ||\\n            interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE ||\\n            interfaceId == _INTERFACE_ID_ROYALTIES_FOUNDATION ||\\n            interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n    }\\n\\n    /**\\n     * @dev Only allows registered extensions to call the specified function\\n     */\\n    modifier extensionRequired() {\\n        require(\\n            _extensions.contains(msg.sender),\\n            \\\"Must be registered extension\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows non-blacklisted extensions\\n     */\\n    modifier nonBlacklistRequired(address extension) {\\n        require(\\n            !_blacklistedExtensions.contains(extension),\\n            \\\"Extension blacklisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getExtensions}.\\n     */\\n    function getExtensions()\\n        external\\n        view\\n        override\\n        returns (address[] memory extensions)\\n    {\\n        extensions = new address[](_extensions.length());\\n        for (uint256 i = 0; i < _extensions.length(); i++) {\\n            extensions[i] = _extensions.at(i);\\n        }\\n        return extensions;\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(\\n        address extension,\\n        string calldata baseURI,\\n        bool baseURIIdentical\\n    ) internal {\\n        require(extension != address(this), \\\"Creator: Invalid\\\");\\n        require(\\n            extension.isContract(),\\n            \\\"Creator: Extension must be a contract\\\"\\n        );\\n        if (!_extensions.contains(extension)) {\\n            _extensionBaseURI[extension] = baseURI;\\n            _extensionBaseURIIdentical[extension] = baseURIIdentical;\\n            emit ExtensionRegistered(extension, msg.sender);\\n            _extensions.add(extension);\\n        }\\n    }\\n\\n    /**\\n     * @dev Unregister an extension\\n     */\\n    function _unregisterExtension(address extension) internal {\\n        if (_extensions.contains(extension)) {\\n            emit ExtensionUnregistered(extension, msg.sender);\\n            _extensions.remove(extension);\\n        }\\n    }\\n\\n    /**\\n     * @dev Blacklist an extension\\n     */\\n    function _blacklistExtension(address extension) internal {\\n        require(extension != address(this), \\\"Cannot blacklist yourself\\\");\\n        if (_extensions.contains(extension)) {\\n            emit ExtensionUnregistered(extension, msg.sender);\\n            _extensions.remove(extension);\\n        }\\n        if (!_blacklistedExtensions.contains(extension)) {\\n            emit ExtensionBlacklisted(extension, msg.sender);\\n            _blacklistedExtensions.add(extension);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set base token uri for an extension\\n     */\\n    function _setBaseTokenURIExtension(string calldata uri, bool identical)\\n        internal\\n    {\\n        _extensionBaseURI[msg.sender] = uri;\\n        _extensionBaseURIIdentical[msg.sender] = identical;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for an extension\\n     */\\n    function _setTokenURIPrefixExtension(string calldata prefix) internal {\\n        _extensionURIPrefix[msg.sender] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token of an extension\\n     */\\n    function _setTokenURIExtension(uint256 tokenId, string calldata uri)\\n        internal\\n    {\\n        require(_tokensExtension[tokenId] == msg.sender, \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Set base token uri for tokens with no extension\\n     */\\n    function _setBaseTokenURI(string memory uri) internal {\\n        _extensionBaseURI[address(this)] = uri;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for tokens with no extension\\n     */\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\n        _extensionURIPrefix[address(this)] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token with no extension\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal {\\n        require(_tokensExtension[tokenId] == address(this), \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Retrieve a token's URI\\n     */\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        address extension = _tokensExtension[tokenId];\\n        require(\\n            !_blacklistedExtensions.contains(extension),\\n            \\\"Extension blacklisted\\\"\\n        );\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            if (bytes(_extensionURIPrefix[extension]).length != 0) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            _extensionURIPrefix[extension],\\n                            _tokenURIs[tokenId]\\n                        )\\n                    );\\n            }\\n            return _tokenURIs[tokenId];\\n        }\\n\\n        if (\\n            ERC165Checker.supportsInterface(\\n                extension,\\n                type(ICreatorExtensionTokenURI).interfaceId\\n            )\\n        ) {\\n            return\\n                ICreatorExtensionTokenURI(extension).tokenURI(\\n                    address(this),\\n                    tokenId\\n                );\\n        }\\n        if (bytes(_extensionBaseURI[extension]).length != 0) {\\n            if (!_extensionBaseURIIdentical[extension]) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            _extensionBaseURI[extension],\\n                            tokenId.toString()\\n                        )\\n                    );\\n            } else {\\n                return _extensionBaseURI[extension];\\n            }\\n        } else {\\n            if (!_extensionBaseURIIdentical[address(this)])\\n            {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        _extensionBaseURI[address(this)],\\n                        tokenId.toString()\\n                    )\\n                );\\n            }else{\\n                return _extensionBaseURI[address(this)];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get token extension\\n     */\\n    function _tokenExtension(uint256 tokenId)\\n        internal\\n        view\\n        returns (address extension)\\n    {\\n        extension = _tokensExtension[tokenId];\\n\\n        require(extension != address(this), \\\"No extension for token\\\");\\n        require(\\n            !_blacklistedExtensions.contains(extension),\\n            \\\"Extension blacklisted\\\"\\n        );\\n\\n        return extension;\\n    }\\n\\n    /**\\n     * Helper to get royalties for a token\\n     */\\n    function _getRoyalties(uint256 tokenId)\\n        internal\\n        view\\n        returns (address payable[] storage, uint256[] storage)\\n    {\\n        return (_getRoyaltyReceivers(tokenId), _getRoyaltyBPS(tokenId));\\n    }\\n\\n    /**\\n     * Helper to get royalty receivers for a token\\n     */\\n    function _getRoyaltyReceivers(uint256 tokenId)\\n        internal\\n        view\\n        returns (address payable[] storage)\\n    {\\n        if (_tokenRoyaltyReceivers[tokenId].length > 0) {\\n            return _tokenRoyaltyReceivers[tokenId];\\n        } else if (\\n            _extensionRoyaltyReceivers[_tokensExtension[tokenId]].length > 0\\n        ) {\\n            return _extensionRoyaltyReceivers[_tokensExtension[tokenId]];\\n        }\\n        return _extensionRoyaltyReceivers[address(this)];\\n    }\\n\\n    /**\\n     * Helper to get royalty basis points for a token\\n     */\\n    function _getRoyaltyBPS(uint256 tokenId)\\n        internal\\n        view\\n        returns (uint256[] storage)\\n    {\\n        if (_tokenRoyaltyBPS[tokenId].length > 0) {\\n            return _tokenRoyaltyBPS[tokenId];\\n        } else if (_extensionRoyaltyBPS[_tokensExtension[tokenId]].length > 0) {\\n            return _extensionRoyaltyBPS[_tokensExtension[tokenId]];\\n        }\\n        return _extensionRoyaltyBPS[address(this)];\\n    }\\n\\n    function _getRoyaltyInfo(uint256 tokenId, uint256 value)\\n        internal\\n        view\\n        returns (address receiver, uint256 amount)\\n    {\\n        address payable[] storage receivers = _getRoyaltyReceivers(tokenId);\\n        require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n\\n        if (receivers.length == 0) {\\n            return (address(this), 0);\\n        }\\n        return (receivers[0], (_getRoyaltyBPS(tokenId)[0] * value) / 10000);\\n    }\\n\\n    /**\\n     * Set royalties for a token\\n     */\\n    function _setRoyalties(\\n        uint256 tokenId,\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) internal {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint256 i = 0; i < basisPoints.length; i++) {\\n            totalBasisPoints += basisPoints[i];\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n        _tokenRoyaltyReceivers[tokenId] = receivers;\\n        _tokenRoyaltyBPS[tokenId] = basisPoints;\\n        emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * Set royalties for all tokens of an extension\\n     */\\n    function _setRoyaltiesExtension(\\n        address extension,\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) internal {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint256 i = 0; i < basisPoints.length; i++) {\\n            totalBasisPoints += basisPoints[i];\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n        _extensionRoyaltyReceivers[extension] = receivers;\\n        _extensionRoyaltyBPS[extension] = basisPoints;\\n        if (extension == address(this)) {\\n            emit DefaultRoyaltiesUpdated(receivers, basisPoints);\\n        } else {\\n            emit ExtensionRoyaltiesUpdated(extension, receivers, basisPoints);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/creator-core/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"../../../openzeppelin/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_platformFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_max1155Quantity\",\"type\":\"uint64\"},{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltyEngine\",\"name\":\"_royaltycontract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_adminApprovalRequired\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"saleId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenQuantity\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gatedColletion\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gatedTokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OnchainBuy.BuyList\",\"name\":\"buyingDetails\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"MintedtokenId\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BuyExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"saleId\",\"type\":\"string\"}],\"name\":\"saleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nftStartTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nftEndTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxCap\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumFiatPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumCryptoPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"paymentCurrency\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taxSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"commissionAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"platformSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"commissionFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"platformFeePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct OnchainBuy.settlementList\",\"name\":\"paymentSettlement\",\"type\":\"tuple\"},{\"internalType\":\"enum OnchainBuy.TransactionStatus\",\"name\":\"transactionStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum OnchainBuy.PaymentStatus\",\"name\":\"paymentStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenGatingContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct OnchainBuy.PriceList\",\"name\":\"saleList\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"CreatedOrUpdated\",\"type\":\"string\"}],\"name\":\"saleCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"saleId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenQuantity\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gatedColletion\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gatedTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct OnchainBuy.BuyList\",\"name\":\"list\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"discountPercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"internalType\":\"struct OnchainBuy.Discount\",\"name\":\"discount\",\"type\":\"tuple\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftTokenId\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"saleId\",\"type\":\"string\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nftStartTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nftEndTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxCap\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumFiatPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumCryptoPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"paymentCurrency\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taxSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"commissionAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"platformSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"commissionFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"platformFeePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct OnchainBuy.settlementList\",\"name\":\"paymentSettlement\",\"type\":\"tuple\"},{\"internalType\":\"enum OnchainBuy.TransactionStatus\",\"name\":\"transactionStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum OnchainBuy.PaymentStatus\",\"name\":\"paymentStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenGatingContract\",\"type\":\"address\"}],\"internalType\":\"struct OnchainBuy.PriceList\",\"name\":\"list\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"saleId\",\"type\":\"string\"}],\"name\":\"createOrUpdateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"discountUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_platformFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltyEngine\",\"name\":\"_royaltySupport\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_max1155Quantity\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"saleId\",\"type\":\"string\"}],\"name\":\"getListingPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minimumCryptoPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"paymentCurrency\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nftStartTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nftEndTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxCap\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumFiatPrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taxSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"commissionAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"platformSettlementAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"commissionFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"platformFeePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct OnchainBuy.settlementList\",\"name\":\"paymentSettlement\",\"type\":\"tuple\"},{\"internalType\":\"enum OnchainBuy.TransactionStatus\",\"name\":\"transactionStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum OnchainBuy.PaymentStatus\",\"name\":\"paymentStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenGatingContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"}],\"name\":\"setAdminApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_platformFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_max1155Quantity\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_royaltyContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pricefeed\",\"type\":\"address\"}],\"name\":\"setContractData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokensUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OnchainBuy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009fd1620fb2e589d1b08812b5e9cee4f0a31a5b5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c830e706eabbd9a4f2f7ed309e5b519a3073d5f200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}