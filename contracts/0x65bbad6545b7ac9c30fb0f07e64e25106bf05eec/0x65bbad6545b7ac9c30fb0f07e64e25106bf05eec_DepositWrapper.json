{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/release/peripheral/DepositWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {Address} from \\\"openzeppelin-solc-0.8/utils/Address.sol\\\";\\nimport {ERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWETH} from \\\"../../external-interfaces/IWETH.sol\\\";\\nimport {IAddressListRegistry} from \\\"../../persistent/address-list-registry/IAddressListRegistry.sol\\\";\\nimport {AssetHelpers} from \\\"../../utils/0.8.19/AssetHelpers.sol\\\";\\nimport {IComptroller} from \\\"../core/fund/comptroller/IComptroller.sol\\\";\\n\\n/// @title DepositWrapper Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Logic related to wrapping deposit actions\\ncontract DepositWrapper is AssetHelpers {\\n    using SafeERC20 for ERC20;\\n\\n    IAddressListRegistry private immutable ADDRESS_LIST_REGISTRY;\\n    uint256 private immutable ALLOWED_EXCHANGES_LIST_ID;\\n    IWETH private immutable WRAPPED_NATIVE_ASSET;\\n\\n    constructor(address _addressListRegistryAddress, uint256 _allowedExchangesListId, IWETH _wrappedNativeAsset) {\\n        ADDRESS_LIST_REGISTRY = IAddressListRegistry(_addressListRegistryAddress);\\n        ALLOWED_EXCHANGES_LIST_ID = _allowedExchangesListId;\\n        WRAPPED_NATIVE_ASSET = _wrappedNativeAsset;\\n    }\\n\\n    /// @dev Needed in case WETH not fully used during exchangeAndBuyShares,\\n    /// to unwrap into ETH and refund\\n    receive() external payable {}\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Exchanges an ERC20 into a fund's denomination asset and then buys shares\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _minSharesQuantity The minimum quantity of shares to receive\\n    /// @param _inputAsset Asset to swap for the fund's denomination asset\\n    /// @param _maxInputAssetAmount The maximum amount of _inputAsset to use in the swap\\n    /// @param _exchange The exchange on which to swap ERC20 to denomination asset\\n    /// @param _exchangeApproveTarget The _exchange address that should be granted an ERC20 allowance\\n    /// @param _exchangeData The data with which to call the _exchange to execute the swap\\n    /// @param _exchangeMinReceived The minimum amount of the denomination asset to receive from the _exchange\\n    /// @return sharesReceived_ The actual amount of shares received\\n    /// @dev Use a reasonable _exchangeMinReceived always, in case the exchange\\n    /// does not perform as expected (low incoming asset amount, blend of assets, etc).\\n    function exchangeErc20AndBuyShares(\\n        IComptroller _comptrollerProxy,\\n        uint256 _minSharesQuantity,\\n        ERC20 _inputAsset,\\n        uint256 _maxInputAssetAmount,\\n        address _exchange,\\n        address _exchangeApproveTarget,\\n        bytes calldata _exchangeData,\\n        uint256 _exchangeMinReceived\\n    ) external returns (uint256 sharesReceived_) {\\n        // Receive the _maxInputAssetAmount from the caller\\n        _inputAsset.safeTransferFrom(msg.sender, address(this), _maxInputAssetAmount);\\n\\n        // Swap to the denominationAsset and buy fund shares\\n        sharesReceived_ = __exchangeAndBuyShares({\\n            _comptrollerProxy: _comptrollerProxy,\\n            _minSharesQuantity: _minSharesQuantity,\\n            _exchange: _exchange,\\n            _exchangeApproveTarget: _exchangeApproveTarget,\\n            _exchangeData: _exchangeData,\\n            _exchangeMinReceived: _exchangeMinReceived,\\n            _inputAsset: _inputAsset,\\n            _maxInputAssetAmount: _maxInputAssetAmount\\n        });\\n\\n        // Refund any remaining _inputAsset not used in the exchange\\n        uint256 remainingInputAsset = _inputAsset.balanceOf(address(this));\\n        if (remainingInputAsset > 0) {\\n            _inputAsset.safeTransfer(msg.sender, remainingInputAsset);\\n        }\\n\\n        return sharesReceived_;\\n    }\\n\\n    /// @notice Exchanges ETH into a fund's denomination asset and then buys shares\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _minSharesQuantity The minimum quantity of shares to buy with the sent ETH\\n    /// @param _exchange The exchange on which to execute the swap to the denomination asset\\n    /// @param _exchangeApproveTarget The address that should be given an allowance of WETH\\n    /// for the given _exchange\\n    /// @param _exchangeData The data with which to call the exchange to execute the swap\\n    /// to the denomination asset\\n    /// @param _exchangeMinReceived The minimum amount of the denomination asset\\n    /// to receive in the trade for investment (not necessary for WETH)\\n    /// @return sharesReceived_ The actual amount of shares received\\n    /// @dev Use a reasonable _exchangeMinReceived always, in case the exchange\\n    /// does not perform as expected (low incoming asset amount, blend of assets, etc).\\n    /// If the fund's denomination asset is WETH, _exchange, _exchangeApproveTarget, _exchangeData,\\n    /// and _exchangeMinReceived will be ignored.\\n    function exchangeEthAndBuyShares(\\n        IComptroller _comptrollerProxy,\\n        uint256 _minSharesQuantity,\\n        address _exchange,\\n        address _exchangeApproveTarget,\\n        bytes calldata _exchangeData,\\n        uint256 _exchangeMinReceived\\n    ) external payable returns (uint256 sharesReceived_) {\\n        ERC20 inputAsset = ERC20(address(WRAPPED_NATIVE_ASSET));\\n        uint256 maxInputAssetAmount = msg.value;\\n\\n        // Wrap ETH into WETH\\n        WRAPPED_NATIVE_ASSET.deposit{value: maxInputAssetAmount}();\\n\\n        // Empty `_exchange` signals no swap is necessary, i.e., denominationAsset is the native asset\\n        if (_exchange == address(0)) {\\n            return __buyShares({\\n                _comptrollerProxy: _comptrollerProxy,\\n                _buyer: msg.sender,\\n                _investmentAmount: maxInputAssetAmount,\\n                _minSharesQuantity: _minSharesQuantity,\\n                _denominationAssetAddress: address(inputAsset)\\n            });\\n        }\\n\\n        // Swap to the denominationAsset and buy fund shares\\n        sharesReceived_ = __exchangeAndBuyShares({\\n            _comptrollerProxy: _comptrollerProxy,\\n            _minSharesQuantity: _minSharesQuantity,\\n            _exchange: _exchange,\\n            _exchangeApproveTarget: _exchangeApproveTarget,\\n            _exchangeData: _exchangeData,\\n            _exchangeMinReceived: _exchangeMinReceived,\\n            _inputAsset: inputAsset,\\n            _maxInputAssetAmount: maxInputAssetAmount\\n        });\\n\\n        // Unwrap and refund any remaining WETH not used in the exchange\\n        uint256 remainingWeth = inputAsset.balanceOf(address(this));\\n        if (remainingWeth > 0) {\\n            WRAPPED_NATIVE_ASSET.withdraw(remainingWeth);\\n            Address.sendValue({recipient: payable(msg.sender), amount: remainingWeth});\\n        }\\n\\n        return sharesReceived_;\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper for buying shares\\n    function __buyShares(\\n        IComptroller _comptrollerProxy,\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity,\\n        address _denominationAssetAddress\\n    ) private returns (uint256 sharesReceived_) {\\n        // Give the ComptrollerProxy max allowance for its denomination asset as necessary\\n        __approveAssetMaxAsNeeded({\\n            _asset: _denominationAssetAddress,\\n            _target: address(_comptrollerProxy),\\n            _neededAmount: _investmentAmount\\n        });\\n\\n        return _comptrollerProxy.buySharesOnBehalf({\\n            _buyer: _buyer,\\n            _investmentAmount: _investmentAmount,\\n            _minSharesQuantity: _minSharesQuantity\\n        });\\n    }\\n\\n    /// @dev Helper to exchange an asset for the fund's denomination asset and then buy shares\\n    function __exchangeAndBuyShares(\\n        IComptroller _comptrollerProxy,\\n        uint256 _minSharesQuantity,\\n        address _exchange,\\n        address _exchangeApproveTarget,\\n        bytes calldata _exchangeData,\\n        uint256 _exchangeMinReceived,\\n        ERC20 _inputAsset,\\n        uint256 _maxInputAssetAmount\\n    ) private returns (uint256 sharesReceived_) {\\n        require(\\n            ADDRESS_LIST_REGISTRY.isInList({_id: ALLOWED_EXCHANGES_LIST_ID, _item: _exchange}),\\n            \\\"__exchangeAndBuyShares: Unallowed _exchange\\\"\\n        );\\n\\n        // Exchange the _inputAsset to the fund's denomination asset\\n        __approveAssetMaxAsNeeded({\\n            _asset: address(_inputAsset),\\n            _target: _exchangeApproveTarget,\\n            _neededAmount: _maxInputAssetAmount\\n        });\\n        Address.functionCall({target: _exchange, data: _exchangeData});\\n\\n        // Confirm the min amount of denomination asset was received in the exchange\\n        ERC20 denominationAsset = ERC20(_comptrollerProxy.getDenominationAsset());\\n        uint256 investmentAmount = denominationAsset.balanceOf(address(this));\\n        require(investmentAmount >= _exchangeMinReceived, \\\"__exchangeAndBuyShares: _exchangeMinReceived not met\\\");\\n\\n        // Buy fund shares\\n        return __buyShares({\\n            _comptrollerProxy: _comptrollerProxy,\\n            _buyer: msg.sender,\\n            _investmentAmount: investmentAmount,\\n            _minSharesQuantity: _minSharesQuantity,\\n            _denominationAssetAddress: address(denominationAsset)\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IWETH Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/address-list-registry/IAddressListRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IAddressListRegistry Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAddressListRegistry {\\n    enum UpdateType {\\n        None,\\n        AddOnly,\\n        RemoveOnly,\\n        AddAndRemove\\n    }\\n\\n    /////////////////////\\n    // LIST MANAGEMENT //\\n    /////////////////////\\n\\n    function addToList(uint256 _id, address[] calldata _items) external;\\n\\n    function attestLists(uint256[] calldata _ids, string[] calldata _descriptions) external;\\n\\n    function createList(address _owner, UpdateType _updateType, address[] calldata _initialItems)\\n        external\\n        returns (uint256 id_);\\n\\n    function removeFromList(uint256 _id, address[] calldata _items) external;\\n\\n    function setListOwner(uint256 _id, address _nextOwner) external;\\n\\n    function setListUpdateType(uint256 _id, UpdateType _nextUpdateType) external;\\n\\n    /////////////////\\n    // LIST SEARCH //\\n    /////////////////\\n\\n    function areAllInAllLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInAllLists_);\\n\\n    function areAllInList(uint256 _id, address[] memory _items) external view returns (bool areAllInList_);\\n\\n    function areAllInSomeOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInSomeOfLists_);\\n\\n    function areAllNotInAnyOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllNotInAnyOfLists_);\\n\\n    function areAllNotInList(uint256 _id, address[] memory _items) external view returns (bool areAllNotInList_);\\n\\n    function isInAllLists(uint256[] memory _ids, address _item) external view returns (bool isInAllLists_);\\n\\n    function isInList(uint256 _id, address _item) external view returns (bool isInList_);\\n\\n    function isInSomeOfLists(uint256[] memory _ids, address _item) external view returns (bool isInSomeOfLists_);\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    function getListCount() external view returns (uint256 count_);\\n\\n    function getListOwner(uint256 _id) external view returns (address owner_);\\n\\n    function getListUpdateType(uint256 _id) external view returns (UpdateType updateType_);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/0.8.19/AssetHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {ERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n\\n    /// @dev Helper to aggregate amounts of the same assets\\n    function __aggregateAssetAmounts(address[] memory _rawAssets, uint256[] memory _rawAmounts)\\n        internal\\n        pure\\n        returns (address[] memory aggregatedAssets_, uint256[] memory aggregatedAmounts_)\\n    {\\n        if (_rawAssets.length == 0) {\\n            return (aggregatedAssets_, aggregatedAmounts_);\\n        }\\n\\n        uint256 aggregatedAssetCount = 1;\\n        for (uint256 i = 1; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < i; j++) {\\n                if (_rawAssets[i] == _rawAssets[j]) {\\n                    contains = true;\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssetCount++;\\n            }\\n        }\\n\\n        aggregatedAssets_ = new address[](aggregatedAssetCount);\\n        aggregatedAmounts_ = new uint256[](aggregatedAssetCount);\\n        uint256 aggregatedAssetIndex;\\n        for (uint256 i; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < aggregatedAssetIndex; j++) {\\n                if (_rawAssets[i] == aggregatedAssets_[j]) {\\n                    contains = true;\\n\\n                    aggregatedAmounts_[j] += _rawAmounts[i];\\n\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssets_[aggregatedAssetIndex] = _rawAssets[i];\\n                aggregatedAmounts_[aggregatedAssetIndex] = _rawAmounts[i];\\n                aggregatedAssetIndex++;\\n            }\\n        }\\n\\n        return (aggregatedAssets_, aggregatedAmounts_);\\n    }\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(address _asset, address _target, uint256 _neededAmount) internal {\\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\\n        if (allowance < _neededAmount) {\\n            if (allowance > 0) {\\n                ERC20(_asset).safeApprove(_target, 0);\\n            }\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full asset balance from the current contract to a target\\n    function __pushFullAssetBalance(address _target, address _asset) internal returns (uint256 amountTransferred_) {\\n        amountTransferred_ = ERC20(_asset).balanceOf(address(this));\\n        if (amountTransferred_ > 0) {\\n            ERC20(_asset).safeTransfer(_target, amountTransferred_);\\n        }\\n\\n        return amountTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/core/fund/comptroller/IComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport {IVault} from \\\"../vault/IVault.sol\\\";\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    function activate(bool _isMigration) external;\\n\\n    function buyBackProtocolFeeShares(uint256 _sharesAmount) external;\\n\\n    function buyShares(uint256 _investmentAmount, uint256 _minSharesQuantity)\\n        external\\n        returns (uint256 sharesReceived_);\\n\\n    function buySharesOnBehalf(address _buyer, uint256 _investmentAmount, uint256 _minSharesQuantity)\\n        external\\n        returns (uint256 sharesReceived_);\\n\\n    function calcGav() external returns (uint256 gav_);\\n\\n    function calcGrossShareValue() external returns (uint256 grossShareValue_);\\n\\n    function callOnExtension(address _extension, uint256 _actionId, bytes calldata _callArgs) external;\\n\\n    function deployGasRelayPaymaster() external;\\n\\n    function depositToGasRelayPaymaster() external;\\n\\n    function destructActivated(uint256 _deactivateFeeManagerGasLimit, uint256 _payProtocolFeeGasLimit) external;\\n\\n    function destructUnactivated() external;\\n\\n    function doesAutoProtocolFeeSharesBuyback() external view returns (bool doesAutoBuyback_);\\n\\n    function getDenominationAsset() external view returns (address denominationAsset_);\\n\\n    function getDispatcher() external view returns (address dispatcher_);\\n\\n    function getExternalPositionManager() external view returns (address externalPositionManager_);\\n\\n    function getFeeManager() external view returns (address feeManager_);\\n\\n    function getFundDeployer() external view returns (address fundDeployer_);\\n\\n    function getGasRelayPaymaster() external view returns (address gasRelayPaymaster_);\\n\\n    function getIntegrationManager() external view returns (address integrationManager_);\\n\\n    function getLastSharesBoughtTimestampForAccount(address _who)\\n        external\\n        view\\n        returns (uint256 lastSharesBoughtTimestamp_);\\n\\n    function getMlnToken() external view returns (address mlnToken_);\\n\\n    function getPolicyManager() external view returns (address policyManager_);\\n\\n    function getProtocolFeeReserve() external view returns (address protocolFeeReserve_);\\n\\n    function getSharesActionTimelock() external view returns (uint256 sharesActionTimelock_);\\n\\n    function getValueInterpreter() external view returns (address valueInterpreter_);\\n\\n    function getVaultProxy() external view returns (address vaultProxy_);\\n\\n    function getWethToken() external view returns (address wethToken_);\\n\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external;\\n\\n    function permissionedVaultAction(IVault.VaultAction _action, bytes calldata _actionData) external;\\n\\n    function preTransferSharesHook(address _sender, address _recipient, uint256 _amount) external;\\n\\n    function preTransferSharesHookFreelyTransferable(address _sender) external view;\\n\\n    function redeemSharesForSpecificAssets(\\n        address _recipient,\\n        uint256 _sharesQuantity,\\n        address[] calldata _payoutAssets,\\n        uint256[] calldata _payoutAssetPercentages\\n    ) external returns (uint256[] memory payoutAmounts_);\\n\\n    function redeemSharesInKind(\\n        address _recipient,\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets,\\n        address[] calldata _assetsToSkip\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_);\\n\\n    function setAutoProtocolFeeSharesBuyback(bool _nextAutoProtocolFeeSharesBuyback) external;\\n\\n    function setGasRelayPaymaster(address _nextGasRelayPaymaster) external;\\n\\n    function setVaultProxy(address _vaultProxy) external;\\n\\n    function shutdownGasRelayPaymaster() external;\\n\\n    function vaultCallOnContract(address _contract, bytes4 _selector, bytes calldata _encodedArgs)\\n        external\\n        returns (bytes memory returnData_);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/release/core/fund/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport {IExternalPositionVault} from \\\"../../../../persistent/vault/interfaces/IExternalPositionVault.sol\\\";\\nimport {IFreelyTransferableSharesVault} from\\n    \\\"../../../../persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\\\";\\nimport {IMigratableVault} from \\\"../../../../persistent/vault/interfaces/IMigratableVault.sol\\\";\\nimport {IVaultCore} from \\\"../../../../persistent/vault/interfaces/IVaultCore.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IVaultCore, IMigratableVault, IFreelyTransferableSharesVault, IExternalPositionVault {\\n    enum VaultAction {\\n        None,\\n        // Shares management\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        // Asset management\\n        AddTrackedAsset,\\n        ApproveAssetSpender,\\n        RemoveTrackedAsset,\\n        WithdrawAssetTo,\\n        // External position management\\n        AddExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition\\n    }\\n\\n    function addAssetManagers(address[] calldata _managers) external;\\n\\n    function addTrackedAsset(address _asset) external;\\n\\n    function burnShares(address _target, uint256 _amount) external;\\n\\n    function buyBackProtocolFeeShares(uint256 _sharesAmount, uint256 _mlnValue, uint256 _gav) external;\\n\\n    function callOnContract(address _contract, bytes calldata _callData) external returns (bytes memory returnData_);\\n\\n    function canManageAssets(address _who) external view returns (bool canManageAssets_);\\n\\n    function canRelayCalls(address _who) external view returns (bool canRelayCalls_);\\n\\n    function claimOwnership() external;\\n\\n    function getActiveExternalPositions() external view returns (address[] memory activeExternalPositions_);\\n\\n    function getExternalPositionManager() external view returns (address externalPositionManager_);\\n\\n    function getFundDeployer() external view returns (address fundDeployer_);\\n\\n    function getMlnBurner() external view returns (address mlnBurner_);\\n\\n    function getMlnToken() external view returns (address mlnToken_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getPositionsLimit() external view returns (uint256 positionsLimit_);\\n\\n    function getProtocolFeeReserve() external view returns (address protocolFeeReserve_);\\n\\n    function getProtocolFeeTracker() external view returns (address protocolFeeTracker_);\\n\\n    function getTrackedAssets() external view returns (address[] memory trackedAssets_);\\n\\n    function isActiveExternalPosition(address _externalPosition)\\n        external\\n        view\\n        returns (bool isActiveExternalPosition_);\\n\\n    function isAssetManager(address _who) external view returns (bool isAssetManager_);\\n\\n    function isTrackedAsset(address _asset) external view returns (bool isTrackedAsset_);\\n\\n    function mintShares(address _target, uint256 _amount) external;\\n\\n    function payProtocolFee() external;\\n\\n    function receiveValidatedVaultAction(VaultAction _action, bytes calldata _actionData) external;\\n\\n    function removeAssetManagers(address[] calldata _managers) external;\\n\\n    function removeNominatedOwner() external;\\n\\n    function setAccessorForFundReconfiguration(address _nextAccessor) external;\\n\\n    function setFreelyTransferableShares() external;\\n\\n    function setMigrator(address _nextMigrator) external;\\n\\n    function setName(string calldata _nextName) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSymbol(string calldata _nextSymbol) external;\\n\\n    function transferShares(address _from, address _to, uint256 _amount) external;\\n\\n    function withdrawAssetTo(address _asset, address _target, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/vault/interfaces/IExternalPositionVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPositionVault interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\\ninterface IExternalPositionVault {\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IFreelyTransferableSharesVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Provides the interface for determining whether a vault's shares\\n/// are guaranteed to be freely transferable.\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IFreelyTransferableSharesVault {\\n    function sharesAreFreelyTransferable() external view returns (bool sharesAreFreelyTransferable_);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/vault/interfaces/IMigratableVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(address _owner, address _accessor, string calldata _fundName) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/vault/interfaces/IVaultCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IVaultCore interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for getters of core vault storage\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IVaultCore {\\n    function getAccessor() external view returns (address accessor_);\\n\\n    function getCreator() external view returns (address creator_);\\n\\n    function getMigrator() external view returns (address migrator_);\\n\\n    function getOwner() external view returns (address owner_);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"@uniswap/v3-core/=lib/uniswap-v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\r\n      \"openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\r\n      \"uniswap-v3-core/=lib/uniswap-v3-core/\",\r\n      \"uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\r\n      \"uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\",\r\n      \"uniswap-v3-periphery-0.8/=lib/uniswap-v3-periphery-0.8/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedExchangesListId\",\"type\":\"uint256\"},{\"internalType\":\"contract IWETH\",\"name\":\"_wrappedNativeAsset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_inputAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxInputAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeApproveTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeMinReceived\",\"type\":\"uint256\"}],\"name\":\"exchangeErc20AndBuyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesReceived_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeApproveTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeMinReceived\",\"type\":\"uint256\"}],\"name\":\"exchangeEthAndBuyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesReceived_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DepositWrapper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004eb4c7babfb5d54ab4857265b482fb6512d22dff0000000000000000000000000000000000000000000000000000000000000229000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}