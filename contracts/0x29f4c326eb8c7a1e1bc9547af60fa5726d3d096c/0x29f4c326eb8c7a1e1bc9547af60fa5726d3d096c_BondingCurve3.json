{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/initializable/BondingCurve3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../wallet/ShardedWallet.sol\\\";\\nimport \\\"../governance/IGovernance.sol\\\";\\nimport \\\"../interface/IERC1363Receiver.sol\\\";\\nimport \\\"../interface/IERC1363Spender.sol\\\";\\n\\ncontract LiquidityToken is ERC20 {\\n    address public controler;\\n\\n    modifier onlyControler() {\\n        require(msg.sender == controler);\\n        _;\\n    }\\n\\n    constructor() {\\n        controler = address(0xdead);\\n    }\\n\\n    function initialize(address controler_, string memory name_, string memory symbol_) public {\\n        require(controler == address(0));\\n        controler = controler_;\\n        _initialize(name_, symbol_);\\n    }\\n\\n    function controllerTransfer(address sender, address recipient, uint256 amount) public onlyControler {\\n        _transfer(sender, recipient, amount);\\n    }\\n\\n    function controllerMint(address account, uint256 amount) public onlyControler {\\n        _mint(account, amount);\\n    }\\n\\n    function controllerBurn(address account, uint256 amount) public onlyControler {\\n        _burn(account, amount);\\n    }\\n}\\n\\ncontract BondingCurve3 is IERC1363Spender {\\n    struct CurveCoordinates {\\n        uint256 x;\\n        uint256 k;\\n    }\\n\\n    struct Asset {\\n        uint256 underlyingSupply;\\n        uint256 feeToNiftex;\\n        uint256 feeToArtist;\\n    }\\n\\n    LiquidityToken immutable internal _template;\\n\\n    // bytes32 public constant PCT_FEE_SUPPLIERS = bytes32(uint256(keccak256(\\\"PCT_FEE_SUPPLIERS\\\")) - 1);\\n    bytes32 public constant PCT_FEE_SUPPLIERS  = 0xe4f5729eb40e38b5a39dfb36d76ead9f9bc286f06852595980c5078f1af7e8c9;\\n    // bytes32 public constant PCT_FEE_ARTIST    = bytes32(uint256(keccak256(\\\"PCT_FEE_ARTIST\\\")) - 1);\\n    bytes32 public constant PCT_FEE_ARTIST     = 0xdd0618e2e2a17ff193a933618181c8f8909dc169e9707cce1921893a88739ca0;\\n    // bytes32 public constant PCT_FEE_NIFTEX    = bytes32(uint256(keccak256(\\\"PCT_FEE_NIFTEX\\\")) - 1);\\n    bytes32 public constant PCT_FEE_NIFTEX     = 0xcfb1dd89e6f4506eca597e7558fbcfe22dbc7e0b9f2b3956e121d0e344d6f7aa;\\n    // bytes32 public constant LIQUIDITY_TIMELOCK   = bytes32(uint256(keccak256(\\\"LIQUIDITY_TIMELOCK\\\")) - 1);\\n    bytes32 public constant LIQUIDITY_TIMELOCK = 0x4babff57ebd34f251a515a845400ed950a51f0a64c92e803a3e144fc40623fa8;\\n\\n    LiquidityToken   public   etherLPToken;\\n    LiquidityToken   public   shardLPToken;\\n    CurveCoordinates public   curve;\\n    Asset            internal _etherLPExtra;\\n    Asset            internal _shardLPExtra;\\n    address          public   wallet;\\n    address          public   recipient;\\n    uint256          public   deadline;\\n    uint256          public   recordedTotalSupply;\\n\\n    event Initialized(address wallet);\\n    event ShardsBought(address indexed account, uint256 amount, uint256 cost);\\n    event ShardsSold(address indexed account, uint256 amount, uint256 payout);\\n    event ShardsSupplied(address indexed provider, uint256 amount);\\n    event EtherSupplied(address indexed provider, uint256 amount);\\n    event ShardsWithdrawn(address indexed provider, uint256 payout, uint256 shards, uint256 amountLPToken);\\n    event EtherWithdrawn(address indexed provider, uint256 value, uint256 payout, uint256 amountLPToken);\\n\\n    constructor() {\\n        _template = new LiquidityToken();\\n        wallet = address(0xdead);\\n    }\\n\\n    function initialize(\\n        uint256 supply,\\n        address wallet_,\\n        address recipient_,\\n        uint256 price\\n    )\\n    public payable\\n    {\\n        require(wallet == address(0));\\n        recordedTotalSupply   = ShardedWallet(payable(wallet_)).totalSupply();\\n        string memory name_   = ShardedWallet(payable(wallet_)).name();\\n        string memory symbol_ = ShardedWallet(payable(wallet_)).symbol();\\n\\n        etherLPToken = LiquidityToken(Clones.clone(address(_template)));\\n        shardLPToken = LiquidityToken(Clones.clone(address(_template)));\\n        etherLPToken.initialize(address(this), string(abi.encodePacked(name_, \\\"-EtherLP\\\")), string(abi.encodePacked(symbol_, \\\"-ELP\\\")));\\n        shardLPToken.initialize(address(this), string(abi.encodePacked(name_, \\\"-ShardLP\\\")), string(abi.encodePacked(symbol_, \\\"-SLP\\\")));\\n\\n        wallet    = wallet_;\\n        recipient = recipient_;\\n        deadline  = block.timestamp + ShardedWallet(payable(wallet_)).governance().getConfig(wallet_, LIQUIDITY_TIMELOCK);\\n        emit Initialized(wallet_);\\n\\n        // transfer assets\\n        if (supply > 0) {\\n            require(ShardedWallet(payable(wallet_)).transferFrom(msg.sender, address(this), supply));\\n        }\\n\\n        {\\n            // setup curve\\n            uint256 decimals_ = ShardedWallet(payable(wallet_)).decimals();\\n            curve.x = recordedTotalSupply;\\n            curve.k = recordedTotalSupply * recordedTotalSupply * price / 10**decimals_;\\n        }\\n\\n        // mint liquidity\\n        etherLPToken.controllerMint(address(this), msg.value);\\n        shardLPToken.controllerMint(address(this), supply);\\n        _etherLPExtra.underlyingSupply = msg.value;\\n        _shardLPExtra.underlyingSupply = supply;\\n        emit EtherSupplied(address(this), msg.value);\\n        emit ShardsSupplied(address(this), supply);\\n    }\\n\\n    function buyShards(uint256 amount, uint256 maxCost) public payable {\\n        uint256 cost = _buyShards(msg.sender, amount, maxCost);\\n\\n        require(cost <= msg.value);\\n        if (msg.value > cost) {\\n            Address.sendValue(payable(msg.sender), msg.value - cost);\\n        }\\n    }\\n\\n    function sellShards(uint256 amount, uint256 minPayout) public {\\n        require(ShardedWallet(payable(wallet)).transferFrom(msg.sender, address(this), amount));\\n        _sellShards(msg.sender, amount, minPayout);\\n    }\\n\\n    function supplyEther() public payable {\\n        _supplyEther(msg.sender, msg.value);\\n    }\\n\\n    function supplyShards(uint256 amount) public {\\n        require(ShardedWallet(payable(wallet)).transferFrom(msg.sender, address(this), amount));\\n        _supplyShards(msg.sender, amount);\\n    }\\n\\n    function onApprovalReceived(address owner, uint256 amount, bytes calldata data) public override returns (bytes4) {\\n        require(msg.sender == wallet);\\n        require(ShardedWallet(payable(wallet)).transferFrom(owner, address(this), amount));\\n\\n        bytes4 selector = abi.decode(data, (bytes4));\\n        if (selector == this.sellShards.selector) {\\n            (,uint256 minPayout) = abi.decode(data, (bytes4, uint256));\\n            _sellShards(owner, amount, minPayout);\\n        } else if (selector == this.supplyShards.selector) {\\n            _supplyShards(owner, amount);\\n        } else {\\n            revert(\\\"invalid selector in onApprovalReceived data\\\");\\n        }\\n\\n        return this.onApprovalReceived.selector;\\n    }\\n\\n    function _buyShards(address buyer, uint256 amount, uint256 maxCost) internal returns (uint256) {\\n        IGovernance governance = ShardedWallet(payable(wallet)).governance();\\n        address     owner      = ShardedWallet(payable(wallet)).owner();\\n        address     artist     = ShardedWallet(payable(wallet)).artistWallet();\\n\\n        // pause if someone else reclaimed the ownership of shardedWallet\\n        require(owner == address(0) || governance.isModule(wallet, owner));\\n\\n        // compute fees\\n        uint256[3] memory fees;\\n        fees[0] =                            governance.getConfig(wallet, PCT_FEE_SUPPLIERS);\\n        fees[1] =                            governance.getConfig(wallet, PCT_FEE_NIFTEX);\\n        fees[2] = artist == address(0) ? 0 : governance.getConfig(wallet, PCT_FEE_ARTIST);\\n\\n        uint256 amountWithFee = amount * (10**18 + fees[0] + fees[1] + fees[2]) / 10**18;\\n\\n        // check curve update\\n        uint256 newX = curve.x - amountWithFee;\\n        uint256 newY = curve.k / newX;\\n        require(newX > 0 && newY > 0);\\n\\n        // check cost\\n        uint256 cost = newY - curve.k / curve.x;\\n        require(cost <= maxCost);\\n\\n        // consistency check\\n        require(ShardedWallet(payable(wallet)).balanceOf(address(this)) - _shardLPExtra.feeToNiftex - _shardLPExtra.feeToArtist >= amount * (10**18 + fees[1] + fees[2]) / 10**18);\\n\\n        // update curve\\n        curve.x = curve.x - amount * (10**18 + fees[1] + fees[2]) / 10**18;\\n\\n        // update LP supply\\n        _shardLPExtra.underlyingSupply += amount * fees[0] / 10**18;\\n        _shardLPExtra.feeToNiftex      += amount * fees[1] / 10**18;\\n        _shardLPExtra.feeToArtist      += amount * fees[2] / 10**18;\\n\\n        // transfer\\n        ShardedWallet(payable(wallet)).transfer(buyer, amount);\\n\\n        emit ShardsBought(buyer, amount, cost);\\n        return cost;\\n    }\\n\\n    function _sellShards(address seller, uint256 amount, uint256 minPayout) internal returns (uint256) {\\n        IGovernance governance = ShardedWallet(payable(wallet)).governance();\\n        address     owner      = ShardedWallet(payable(wallet)).owner();\\n        address     artist     = ShardedWallet(payable(wallet)).artistWallet();\\n\\n        // pause if someone else reclaimed the ownership of shardedWallet\\n        require(owner == address(0) || governance.isModule(wallet, owner));\\n\\n        // compute fees\\n        uint256[3] memory fees;\\n        fees[0] =                            governance.getConfig(wallet, PCT_FEE_SUPPLIERS);\\n        fees[1] =                            governance.getConfig(wallet, PCT_FEE_NIFTEX);\\n        fees[2] = artist == address(0) ? 0 : governance.getConfig(wallet, PCT_FEE_ARTIST);\\n\\n        uint256 newX = curve.x + amount;\\n        uint256 newY = curve.k / newX;\\n        require(newX > 0 && newY > 0);\\n\\n        // check payout\\n        uint256 payout = curve.k / curve.x - newY;\\n        require(payout <= address(this).balance - _etherLPExtra.feeToNiftex - _etherLPExtra.feeToArtist);\\n        uint256 value = payout * (10**18 - fees[0] - fees[1] - fees[2]) / 10**18;\\n        require(value >= minPayout);\\n\\n        // update curve\\n        curve.x = newX;\\n\\n        // update LP supply\\n        _etherLPExtra.underlyingSupply += payout * fees[0] / 10**18;\\n        _etherLPExtra.feeToNiftex      += payout * fees[1] / 10**18;\\n        _etherLPExtra.feeToArtist      += payout * fees[2] / 10**18;\\n\\n        // transfer\\n        Address.sendValue(payable(seller), value);\\n\\n        emit ShardsSold(seller, amount, value);\\n        return value;\\n    }\\n\\n    function _supplyEther(address supplier, uint256 amount) internal {\\n        etherLPToken.controllerMint(supplier, calcNewEthLPTokensToIssue(amount));\\n        _etherLPExtra.underlyingSupply += amount;\\n\\n        emit EtherSupplied(supplier, amount);\\n    }\\n\\n\\n    function _supplyShards(address supplier, uint256 amount) internal {\\n        shardLPToken.controllerMint(supplier, calcNewShardLPTokensToIssue(amount));\\n        _shardLPExtra.underlyingSupply += amount;\\n\\n        emit ShardsSupplied(supplier, amount);\\n    }\\n\\n    function calcNewShardLPTokensToIssue(uint256 amount) public view returns (uint256) {\\n        uint256 pool = _shardLPExtra.underlyingSupply;\\n        if (pool == 0) { return amount; }\\n        uint256 proportion = amount * 10**18 / (pool + amount);\\n        return proportion * shardLPToken.totalSupply() / (10**18 - proportion);\\n    }\\n\\n    function calcNewEthLPTokensToIssue(uint256 amount) public view returns (uint256) {\\n        uint256 pool = _etherLPExtra.underlyingSupply;\\n        if (pool == 0) { return amount; }\\n        uint256 proportion = amount * 10**18 / (pool + amount);\\n        return proportion * etherLPToken.totalSupply() / (10**18 - proportion);\\n    }\\n\\n    function calcShardsForEthSuppliers() public view returns (uint256) {\\n        uint256 balance = ShardedWallet(payable(wallet)).balanceOf(address(this)) - _shardLPExtra.feeToNiftex - _shardLPExtra.feeToArtist;\\n        return balance < _shardLPExtra.underlyingSupply ? 0 : balance - _shardLPExtra.underlyingSupply;\\n    }\\n\\n    function calcEthForShardSuppliers() public view returns (uint256) {\\n        uint256 balance = address(this).balance - _etherLPExtra.feeToNiftex - _etherLPExtra.feeToArtist;\\n        return balance < _etherLPExtra.underlyingSupply ? 0 : balance - _etherLPExtra.underlyingSupply;\\n    }\\n\\n    function withdrawSuppliedEther(uint256 amount) external returns (uint256, uint256) {\\n        require(amount > 0);\\n\\n        uint256 etherLPTokenSupply = etherLPToken.totalSupply();\\n\\n        uint256 balance = address(this).balance - _etherLPExtra.feeToNiftex - _etherLPExtra.feeToArtist;\\n\\n        uint256 value = (balance <= _etherLPExtra.underlyingSupply)\\n        ? balance * amount / etherLPTokenSupply\\n        : _etherLPExtra.underlyingSupply * amount / etherLPTokenSupply;\\n\\n        uint256 payout = calcShardsForEthSuppliers() * amount / etherLPTokenSupply;\\n\\n        // update balances\\n        _etherLPExtra.underlyingSupply *= etherLPTokenSupply - amount;\\n        _etherLPExtra.underlyingSupply /= etherLPTokenSupply;\\n        etherLPToken.controllerBurn(msg.sender, amount);\\n\\n        // transfer\\n        Address.sendValue(payable(msg.sender), value);\\n        if (payout > 0) {\\n            ShardedWallet(payable(wallet)).transfer(msg.sender, payout);\\n        }\\n\\n        emit EtherWithdrawn(msg.sender, value, payout, amount);\\n\\n        return (value, payout);\\n    }\\n\\n    function withdrawSuppliedShards(uint256 amount) external returns (uint256, uint256) {\\n        require(amount > 0);\\n\\n        uint256 shardLPTokenSupply = shardLPToken.totalSupply();\\n\\n        uint256 balance = ShardedWallet(payable(wallet)).balanceOf(address(this)) - _shardLPExtra.feeToNiftex - _shardLPExtra.feeToArtist;\\n\\n        uint256 shards = (balance <= _shardLPExtra.underlyingSupply)\\n        ? balance * amount / shardLPTokenSupply\\n        : _shardLPExtra.underlyingSupply * amount / shardLPTokenSupply;\\n\\n        uint256 payout = calcEthForShardSuppliers() * amount / shardLPTokenSupply;\\n\\n        // update balances\\n        _shardLPExtra.underlyingSupply *= shardLPTokenSupply - amount;\\n        _shardLPExtra.underlyingSupply /= shardLPTokenSupply;\\n        shardLPToken.controllerBurn(msg.sender, amount);\\n\\n        // transfer\\n        ShardedWallet(payable(wallet)).transfer(msg.sender, shards);\\n        if (payout > 0) {\\n            Address.sendValue(payable(msg.sender), payout);\\n        }\\n\\n        emit ShardsWithdrawn(msg.sender, payout, shards, amount);\\n\\n        return (payout, shards);\\n    }\\n\\n    function withdrawNiftexOrArtistFees(address to) public {\\n        uint256 etherFees = 0;\\n        uint256 shardFees = 0;\\n\\n        if (msg.sender == ShardedWallet(payable(wallet)).artistWallet()) {\\n            etherFees += _etherLPExtra.feeToArtist;\\n            shardFees += _shardLPExtra.feeToArtist;\\n            delete _etherLPExtra.feeToArtist;\\n            delete _shardLPExtra.feeToArtist;\\n        }\\n\\n        if (msg.sender == ShardedWallet(payable(wallet)).governance().getNiftexWallet()) {\\n            etherFees += _etherLPExtra.feeToNiftex;\\n            shardFees += _shardLPExtra.feeToNiftex;\\n            delete _etherLPExtra.feeToNiftex;\\n            delete _shardLPExtra.feeToNiftex;\\n        }\\n\\n        Address.sendValue(payable(to), etherFees);\\n        ShardedWallet(payable(wallet)).transfer(to, shardFees);\\n    }\\n\\n    function rebaseWhenTotalSupplyChange() public {\\n        uint256 newTotalSupply_ = ShardedWallet(payable(wallet)).totalSupply();\\n        require (newTotalSupply_ != recordedTotalSupply);\\n        curve.k = curve.k * newTotalSupply_ / recordedTotalSupply * newTotalSupply_ / recordedTotalSupply; // new k = (new supply/old supply)^2 * old k, intentionally * / * / to avoid uint overflow;\\n        curve.x = curve.x * newTotalSupply_ / recordedTotalSupply; // new x = (new supply/old supply) * old x\\n        recordedTotalSupply = newTotalSupply_;\\n        assert(curve.k > 0);\\n        assert(curve.x > 0);\\n        assert(recordedTotalSupply > 0);\\n    }\\n\\n    function transferTimelockLiquidity() public {\\n        require(deadline < block.timestamp);\\n        etherLPToken.controllerTransfer(address(this), recipient, getEthLPTokens(address(this)));\\n        shardLPToken.controllerTransfer(address(this), recipient, getShardLPTokens(address(this)));\\n    }\\n\\n    function getEthLPTokens(address owner) public view returns (uint256) {\\n        return etherLPToken.balanceOf(owner);\\n    }\\n\\n    function getShardLPTokens(address owner) public view returns (uint256) {\\n        return shardLPToken.balanceOf(owner);\\n    }\\n\\n    function transferEthLPTokens(address to, uint256 amount) public {\\n        etherLPToken.controllerTransfer(msg.sender, to, amount);\\n    }\\n\\n    function transferShardLPTokens(address to, uint256 amount) public {\\n        shardLPToken.controllerTransfer(msg.sender, to, amount);\\n    }\\n\\n    function getCurrentPrice() external view returns (uint256) {\\n        return curve.k * 10**18 / curve.x / curve.x;\\n    }\\n\\n    function getEthSuppliers() external view returns (uint256, uint256, uint256, uint256) {\\n        return (_etherLPExtra.underlyingSupply, etherLPToken.totalSupply(), _etherLPExtra.feeToNiftex, _etherLPExtra.feeToArtist);\\n    }\\n\\n    function getShardSuppliers() external view returns (uint256, uint256, uint256, uint256) {\\n        return (_shardLPExtra.underlyingSupply, shardLPToken.totalSupply(), _shardLPExtra.feeToNiftex, _shardLPExtra.feeToArtist);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/initializable/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    function _initialize(string memory name_, string memory symbol_) internal virtual {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(account, _msgSender(), currentAllowance - amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/wallet/ShardedWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../governance/IGovernance.sol\\\";\\nimport \\\"../initializable/Ownable.sol\\\";\\nimport \\\"../initializable/ERC20.sol\\\";\\nimport \\\"../initializable/ERC1363.sol\\\";\\n\\ncontract ShardedWallet is Ownable, ERC20, ERC1363Approve\\n{\\n    // bytes32 public constant ALLOW_GOVERNANCE_UPGRADE = bytes32(uint256(keccak256(\\\"ALLOW_GOVERNANCE_UPGRADE\\\")) - 1);\\n    bytes32 public constant ALLOW_GOVERNANCE_UPGRADE = 0xedde61aea0459bc05d70dd3441790ccfb6c17980a380201b00eca6f9ef50452a;\\n\\n    IGovernance public governance;\\n    address public artistWallet;\\n\\n    event Received(address indexed sender, uint256 value, bytes data);\\n    event Execute(address indexed to, uint256 value, bytes data);\\n    event ModuleExecute(address indexed module, address indexed to, uint256 value, bytes data);\\n    event GovernanceUpdated(address indexed oldGovernance, address indexed newGovernance);\\n    event ArtistUpdated(address indexed oldArtist, address indexed newArtist);\\n\\n    modifier onlyModule()\\n    {\\n        require(_isModule(msg.sender), \\\"Access restricted to modules\\\");\\n        _;\\n    }\\n\\n    /*************************************************************************\\n     *                       Contructor and fallbacks                        *\\n     *************************************************************************/\\n    constructor()\\n    {\\n        governance = IGovernance(address(0xdead));\\n    }\\n\\n    receive()\\n    external payable\\n    {\\n        emit Received(msg.sender, msg.value, bytes(\\\"\\\"));\\n    }\\n\\n    fallback()\\n    external payable\\n    {\\n        address module = governance.getModule(address(this), msg.sig);\\n        if (module != address(0) && _isModule(module))\\n        {\\n            (bool success, /*bytes memory returndata*/) = module.staticcall(msg.data);\\n            // returning bytes in fallback is not supported until solidity 0.8.0\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                switch success\\n                case 0 { revert(0, returndatasize()) }\\n                default { return (0, returndatasize()) }\\n            }\\n        }\\n        else\\n        {\\n            emit Received(msg.sender, msg.value, msg.data);\\n        }\\n    }\\n\\n    /*************************************************************************\\n     *                            Initialization                             *\\n     *************************************************************************/\\n    function initialize(\\n        address         governance_,\\n        address         minter_,\\n        string calldata name_,\\n        string calldata symbol_,\\n        address         artistWallet_\\n    )\\n    external\\n    {\\n        require(address(governance) == address(0));\\n\\n        governance = IGovernance(governance_);\\n        Ownable._setOwner(minter_);\\n        ERC20._initialize(name_, symbol_);\\n        artistWallet = artistWallet_;\\n\\n        emit GovernanceUpdated(address(0), governance_);\\n    }\\n\\n    function _isModule(address module)\\n    internal view returns (bool)\\n    {\\n        return governance.isModule(address(this), module);\\n    }\\n\\n    /*************************************************************************\\n     *                          Owner interactions                           *\\n     *************************************************************************/\\n    function execute(address to, uint256 value, bytes calldata data)\\n    external onlyOwner()\\n    {\\n        Address.functionCallWithValue(to, data, value);\\n        emit Execute(to, value, data);\\n    }\\n\\n    function retrieve(address newOwner)\\n    external\\n    {\\n        ERC20._burn(msg.sender, Math.max(ERC20.totalSupply(), 1));\\n        Ownable._setOwner(newOwner);\\n    }\\n\\n    /*************************************************************************\\n     *                          Module interactions                          *\\n     *************************************************************************/\\n    function moduleExecute(address to, uint256 value, bytes calldata data)\\n    external onlyModule()\\n    {\\n        if (Address.isContract(to))\\n        {\\n            Address.functionCallWithValue(to, data, value);\\n        }\\n        else\\n        {\\n            Address.sendValue(payable(to), value);\\n        }\\n        emit ModuleExecute(msg.sender, to, value, data);\\n    }\\n\\n    function moduleMint(address to, uint256 value)\\n    external onlyModule()\\n    {\\n        ERC20._mint(to, value);\\n    }\\n\\n    function moduleBurn(address from, uint256 value)\\n    external onlyModule()\\n    {\\n        ERC20._burn(from, value);\\n    }\\n\\n    function moduleTransfer(address from, address to, uint256 value)\\n    external onlyModule()\\n    {\\n        ERC20._transfer(from, to, value);\\n    }\\n\\n    function moduleTransferOwnership(address to)\\n    external onlyModule()\\n    {\\n        Ownable._setOwner(to);\\n    }\\n\\n    function updateGovernance(address newGovernance)\\n    external onlyModule()\\n    {\\n        emit GovernanceUpdated(address(governance), newGovernance);\\n\\n        require(governance.getConfig(address(this), ALLOW_GOVERNANCE_UPGRADE) > 0);\\n        require(Address.isContract(newGovernance));\\n        governance = IGovernance(newGovernance);\\n    }\\n\\n    function updateArtistWallet(address newArtistWallet)\\n    external onlyModule()\\n    {\\n        emit ArtistUpdated(artistWallet, newArtistWallet);\\n\\n        artistWallet = newArtistWallet;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGovernance\\n{\\n    function isModule(address, address) external view returns (bool);\\n    function isAuthorized(address, address) external view returns (bool);\\n    function getModule(address, bytes4) external view returns (address);\\n    function getConfig(address, bytes32) external view returns (uint256);\\n    function getNiftexWallet() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC1363Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1363Receiver interface\\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\\n *  from ERC1363 token contracts.\\n */\\ninterface IERC1363Receiver {\\n  /*\\n   * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\\n   * 0x88a7ca5c === bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\n   */\\n\\n  /**\\n   * @notice Handle the receipt of ERC1363 tokens\\n   * @dev Any ERC1363 smart contract calls this function on the recipient\\n   * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\\n   * transfer. Return of other than the magic value MUST result in the\\n   * transaction being reverted.\\n   * Note: the token contract address is always the message sender.\\n   * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\\n   * @param from address The address which are token transferred from\\n   * @param value uint256 The amount of tokens transferred\\n   * @param data bytes Additional data with no specified format\\n   * @return `bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))`\\n   *  unless throwing\\n   */\\n  function onTransferReceived(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC1363Spender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1363Spender interface\\n * @dev Interface for any contract that wants to support `approveAndCall`\\n *  from ERC1363 token contracts.\\n */\\ninterface IERC1363Spender {\\n  /*\\n   * Note: the ERC-165 identifier for this interface is 0.8.04a2d0.\\n   * 0.8.04a2d0 === bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\n   */\\n\\n  /**\\n   * @notice Handle the approval of ERC1363 tokens\\n   * @dev Any ERC1363 smart contract calls this function on the recipient\\n   * after an `approve`. This function MAY throw to revert and reject the\\n   * approval. Return of other than the magic value MUST result in the\\n   * transaction being reverted.\\n   * Note: the token contract address is always the message sender.\\n   * @param owner address The address which called `approveAndCall` function\\n   * @param value uint256 The amount of tokens to be spent\\n   * @param data bytes Additional data with no specified format\\n   * @return `bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))`\\n   *  unless throwing\\n   */\\n  function onApprovalReceived(address owner, uint256 value, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/initializable/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _setOwner(address owner_) internal {\\n        emit OwnershipTransferred(_owner, owner_);\\n        _owner = owner_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/initializable/ERC1363.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../interface/IERC1363.sol\\\";\\nimport \\\"../interface/IERC1363Receiver.sol\\\";\\nimport \\\"../interface/IERC1363Spender.sol\\\";\\n\\nabstract contract ERC1363Transfer is ERC20, IERC1363Transfer {\\n    function transferAndCall(address to, uint256 value) public override returns (bool) {\\n        return transferAndCall(to, value, bytes(\\\"\\\"));\\n    }\\n\\n    function transferAndCall(address to, uint256 value, bytes memory data) public override returns (bool) {\\n        require(transfer(to, value));\\n        try IERC1363Receiver(to).onTransferReceived(_msgSender(), _msgSender(), value, data) returns (bytes4 selector) {\\n            require(selector == IERC1363Receiver(to).onTransferReceived.selector, \\\"ERC1363: onTransferReceived invalid result\\\");\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch {\\n            revert(\\\"ERC1363: onTransferReceived reverted without reason\\\");\\n        }\\n        return true;\\n    }\\n\\n    function transferFromAndCall(address from, address to, uint256 value) public override returns (bool) {\\n        return transferFromAndCall(from, to, value, bytes(\\\"\\\"));\\n    }\\n\\n    function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public override returns (bool) {\\n        require(transferFrom(from, to, value));\\n        try IERC1363Receiver(to).onTransferReceived(_msgSender(), from, value, data) returns (bytes4 selector) {\\n            require(selector == IERC1363Receiver(to).onTransferReceived.selector, \\\"ERC1363: onTransferReceived invalid result\\\");\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch {\\n            revert(\\\"ERC1363: onTransferReceived reverted without reason\\\");\\n        }\\n        return true;\\n    }\\n}\\n\\nabstract contract ERC1363Approve is ERC20, IERC1363Approve {\\n    function approveAndCall(address spender, uint256 value) public override returns (bool) {\\n        return approveAndCall(spender, value, bytes(\\\"\\\"));\\n    }\\n\\n    function approveAndCall(address spender, uint256 value, bytes memory data) public override returns (bool) {\\n        require(approve(spender, value));\\n        try IERC1363Spender(spender).onApprovalReceived(_msgSender(), value, data) returns (bytes4 selector) {\\n            require(selector == IERC1363Spender(spender).onApprovalReceived.selector, \\\"ERC1363: onApprovalReceived invalid result\\\");\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch {\\n            revert(\\\"ERC1363: onApprovalReceived reverted without reason\\\");\\n        }\\n        return true;\\n    }\\n}\\n\\nabstract contract ERC1363 is ERC1363Transfer, ERC1363Approve {}\\n\"\r\n    },\r\n    \"contracts/interface/IERC1363.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC1363Transfer {\\n    /*\\n    * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\\n    * 0x4bbee2df ===\\n    *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n    *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n    *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n    *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\\n    */\\n\\n    /**\\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 The amount of tokens to be transferred\\n     * @return true unless throwing\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 The amount of tokens to be transferred\\n     * @param data bytes Additional data with no specified format, sent in call to `to`\\n     * @return true unless throwing\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 The amount of tokens to be transferred\\n     * @return true unless throwing\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n\\n    /**\\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 The amount of tokens to be transferred\\n     * @param data bytes Additional data with no specified format, sent in call to `to`\\n     * @return true unless throwing\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\\ninterface IERC1363Approve {\\n  /*\\n   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\\n   * 0xfb9ec8ce ===\\n   *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n   *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n   */\\n  /**\\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n   * and then call `onApprovalReceived` on spender.\\n   * @param spender address The address which will spend the funds\\n   * @param value uint256 The amount of tokens to be spent\\n   */\\n  function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n  /**\\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n   * and then call `onApprovalReceived` on spender.\\n   * @param spender address The address which will spend the funds\\n   * @param value uint256 The amount of tokens to be spent\\n   * @param data bytes Additional data with no specified format, sent in call to `spender`\\n   */\\n  function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\\ninterface IERC1363 is IERC1363Transfer, IERC1363Approve {\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLPToken\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"ShardsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"ShardsSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShardsSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLPToken\",\"type\":\"uint256\"}],\"name\":\"ShardsWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDITY_TIMELOCK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCT_FEE_ARTIST\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCT_FEE_NIFTEX\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCT_FEE_SUPPLIERS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"buyShards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcEthForShardSuppliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcNewEthLPTokensToIssue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcNewShardLPTokensToIssue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcShardsForEthSuppliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherLPToken\",\"outputs\":[{\"internalType\":\"contract LiquidityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getEthLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthSuppliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getShardLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShardSuppliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onApprovalReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseWhenTotalSupplyChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordedTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"}],\"name\":\"sellShards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardLPToken\",\"outputs\":[{\"internalType\":\"contract LiquidityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyShards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEthLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferShardLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTimelockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawNiftexOrArtistFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSuppliedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSuppliedShards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BondingCurve3", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}