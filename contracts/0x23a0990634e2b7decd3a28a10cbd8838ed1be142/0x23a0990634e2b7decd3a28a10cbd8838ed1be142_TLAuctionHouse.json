{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TLAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Ownable} from \\\"openzeppelin/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"openzeppelin/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport {IERC721} from \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport {RoyaltyPayoutHelper} from \\\"tl-sol-tools/payments/RoyaltyPayoutHelper.sol\\\";\\nimport {AuctionHouseErrors} from \\\"tl-stacks/utils/CommonUtils.sol\\\";\\nimport {Auction, Sale, ITLAuctionHouseEvents} from \\\"tl-stacks/utils/TLAuctionHouseUtils.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            TL Auction House\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title TLAuctionHouse\\n/// @notice Transient Labs Auction House with Reserve Auctions and Buy Now Sales for ERC-721 tokens\\n/// @author transientlabs.xyz\\n/// @custom:version-last-updated 2.0.0\\ncontract TLAuctionHouse is\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard,\\n    RoyaltyPayoutHelper,\\n    ITLAuctionHouseEvents,\\n    AuctionHouseErrors\\n{\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                  Constants\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    string public constant VERSION = \\\"2.0.0\\\";\\n    uint256 public constant EXTENSION_TIME = 15 minutes;\\n    uint256 public constant BASIS = 10_000;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    address public protocolFeeReceiver; // the payout receiver for the protocol fee\\n    uint256 public minBidIncreasePerc; // the nominal bid increase percentage (out of BASIS) so bids can't be increased by just tiny amounts\\n    uint256 public minBidIncreaseLimit; // the absolute min bid increase amount (ex: 1 ether)\\n    uint256 public protocolFeePerc; // the nominal protocol fee percentage (out of BASIS) to charge the buyer or seller\\n    uint256 public protocolFeeLimit; // the absolute limit for the protocol fee (ex: 1 ether)\\n    mapping(address => mapping(uint256 => Auction)) internal _auctions; // nft address -> token id -> auction\\n    mapping(address => mapping(uint256 => Sale)) internal _sales; // nft address -> token id -> sale\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        address initSanctionsOracle,\\n        address initWethAddress,\\n        address initRoyaltyEngineAddress,\\n        address initProtocolFeeReceiver,\\n        uint256 initMinBidIncreasePerc,\\n        uint256 initMinBidIncreaseLimit,\\n        uint256 initProtocolFeePerc,\\n        uint256 initProtocolFeeLimit\\n    )\\n        Ownable()\\n        Pausable()\\n        ReentrancyGuard()\\n        RoyaltyPayoutHelper(initSanctionsOracle, initWethAddress, initRoyaltyEngineAddress)\\n    {\\n        _setMinBidIncreaseSettings(initMinBidIncreasePerc, initMinBidIncreaseLimit);\\n        _setProtocolFeeSettings(initProtocolFeeReceiver, initProtocolFeePerc, initProtocolFeeLimit);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Owner Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to set a new royalty engine address\\n    /// @dev Requires owner\\n    /// @param newRoyaltyEngine The new royalty engine address\\n    function setRoyaltyEngine(address newRoyaltyEngine) external onlyOwner {\\n        address prevRoyaltyEngine = address(royaltyEngine);\\n        _setRoyaltyEngineAddress(newRoyaltyEngine);\\n\\n        emit RoyaltyEngineUpdated(prevRoyaltyEngine, newRoyaltyEngine);\\n    }\\n\\n    /// @notice Function to set a new weth address\\n    /// @dev Requires owner\\n    /// @param newWethAddress The new weth address\\n    function setWethAddress(address newWethAddress) external onlyOwner {\\n        address prevWeth = weth;\\n        _setWethAddress(newWethAddress);\\n\\n        emit WethUpdated(prevWeth, newWethAddress);\\n    }\\n\\n    /// @notice Function to set the min bid increase settings\\n    /// @dev Requires owner\\n    /// @param newMinBidIncreasePerc The new minimum bid increase nominal percentage, out of `BASIS`\\n    /// @param newMinBidIncreaseLimit The new minimum bid increase absolute limit\\n    function setMinBidIncreaseSettings(uint256 newMinBidIncreasePerc, uint256 newMinBidIncreaseLimit)\\n        external\\n        onlyOwner\\n    {\\n        _setMinBidIncreaseSettings(newMinBidIncreasePerc, newMinBidIncreaseLimit);\\n    }\\n\\n    /// @notice Function to set the protocol fee settings\\n    /// @dev Requires owner\\n    /// @param newProtocolFeeReceiver The new protocol fee receiver\\n    /// @param newProtocolFeePerc The new protocol fee percentage, out of `BASIS`\\n    /// @param newProtocolFeeLimit The new protocol fee limit\\n    function setProtocolFeeSettings(\\n        address newProtocolFeeReceiver,\\n        uint256 newProtocolFeePerc,\\n        uint256 newProtocolFeeLimit\\n    ) external onlyOwner {\\n        _setProtocolFeeSettings(newProtocolFeeReceiver, newProtocolFeePerc, newProtocolFeeLimit);\\n    }\\n\\n    /// @notice Function to pause the contract\\n    /// @dev Requires owner\\n    /// @param status The boolean to set the internal pause variable\\n    function pause(bool status) external onlyOwner {\\n        if (status) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /// @notice Function to set the sanctions oracle\\n    /// @dev Requires owner\\n    /// @param newOracle The new oracle address\\n    function setSanctionsOracle(address newOracle) external onlyOwner {\\n        _updateSanctionsOracle(newOracle);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Auction Configuration Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to configure an auction\\n    /// @dev Requires the following items to be true\\n    ///     - contract is not paused\\n    ///     - the auction hasn't been configured yet for the current token owner\\n    ///     - msg.sender is the owner of the token\\n    ///     - auction house is approved for all\\n    ///     - payoutReceiver isn't the zero address\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @param payoutReceiver The address that receives the payout from the auction\\n    /// @param currencyAddress The currency to use\\n    /// @param reservePrice The auction reserve price\\n    /// @param auctionOpenTime The time at which bidding is allowed\\n    /// @param duration The duration of the auction after it is started\\n    /// @param reserveAuction A flag dictating if the auction is a reserve auction or regular scheduled auction\\n    function configureAuction(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address payoutReceiver,\\n        address currencyAddress,\\n        uint256 reservePrice,\\n        uint256 auctionOpenTime,\\n        uint256 duration,\\n        bool reserveAuction\\n    ) external whenNotPaused nonReentrant {\\n        // sanctions\\n        _isSanctioned(msg.sender, true);\\n        _isSanctioned(payoutReceiver, true);\\n\\n        IERC721 nft = IERC721(nftAddress);\\n        bool isNftOwner = _checkTokenOwnership(nft, tokenId, msg.sender);\\n        uint256 startTime = reserveAuction ? 0 : auctionOpenTime;\\n\\n        if (isNftOwner) {\\n            if (!_checkAuctionHouseApproval(nft, msg.sender)) revert AuctionHouseNotApproved();\\n            if (!_checkPayoutReceiver(payoutReceiver)) revert PayoutToZeroAddress();\\n        } else {\\n            revert CallerNotTokenOwner();\\n        }\\n\\n        Auction memory auction = Auction(\\n            msg.sender,\\n            payoutReceiver,\\n            currencyAddress,\\n            address(0),\\n            0,\\n            reservePrice,\\n            auctionOpenTime,\\n            startTime,\\n            duration\\n        );\\n\\n        _auctions[nftAddress][tokenId] = auction;\\n\\n        emit AuctionConfigured(msg.sender, nftAddress, tokenId, auction);\\n    }\\n\\n    /// @notice Function to cancel an auction\\n    /// @dev Requires the following to be true\\n    ///     - msg.sender to be the auction seller\\n    ///     - the auction cannot be started\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    function cancelAuction(address nftAddress, uint256 tokenId) external nonReentrant {\\n        IERC721 nft = IERC721(nftAddress);\\n        Auction memory auction = _auctions[nftAddress][tokenId];\\n        bool isNftOwner = _checkTokenOwnership(nft, tokenId, msg.sender);\\n\\n        if (msg.sender != auction.seller) {\\n            if (!isNftOwner) revert CallerNotTokenOwner();\\n        }\\n        if (auction.highestBidder != address(0)) revert AuctionStarted();\\n\\n        delete _auctions[nftAddress][tokenId];\\n\\n        emit AuctionCanceled(msg.sender, nftAddress, tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Auction Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to bid on an auction\\n    /// @dev Requires the following to be true\\n    ///     - contract is not paused\\n    ///     - block.timestamp is greater than the auction open timestamp\\n    ///     - bid meets or exceeds the reserve price / min bid price\\n    ///     - msg.sender has attached enough eth/erc20 as specified by `amount`\\n    ///     - protocol fee has been supplied, if needed\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @param amount The amount to bid in the currency address set in the auction\\n    function bid(address nftAddress, uint256 tokenId, uint256 amount) external payable whenNotPaused nonReentrant {\\n        _isSanctioned(msg.sender, true);\\n\\n        // cache items\\n        Auction memory auction = _auctions[nftAddress][tokenId];\\n        IERC721 nft = IERC721(nftAddress);\\n        bool firstBid;\\n        bool durationExtended;\\n\\n        // check if the auction is open\\n        if (auction.seller == address(0)) revert AuctionNotConfigured();\\n        if (block.timestamp < auction.auctionOpenTime) revert AuctionNotOpen();\\n\\n        if (auction.highestBidder == address(0)) {\\n            // first bid\\n            // - check bid amount\\n            // - clear sale\\n            // - start the auction (if reserve auction)\\n            // - escrow the NFT\\n            if (amount < auction.reservePrice) revert BidTooLow();\\n            delete _sales[nftAddress][tokenId];\\n            if (auction.startTime == 0) {\\n                auction.startTime = block.timestamp;\\n                firstBid = true;\\n            }\\n            // escrow nft\\n            if (nft.ownerOf(tokenId) != auction.seller) revert NftNotOwnedBySeller();\\n            nft.transferFrom(auction.seller, address(this), tokenId);\\n            if (nft.ownerOf(tokenId) != address(this)) revert NftNotTransferred();\\n        } else {\\n            // subsequent bids\\n            // - check if auction ended\\n            // - check bid amount\\n            // - refund previous bidder\\n            if (block.timestamp > auction.startTime + auction.duration) revert AuctionEnded();\\n            if (amount < _calcNextMinBid(auction.highestBid)) revert BidTooLow();\\n            uint256 refundAmount = auction.highestBid + _calcProtocolFee(auction.highestBid);\\n            if (auction.currencyAddress == address(0)) {\\n                _safeTransferETH(auction.highestBidder, refundAmount, weth);\\n            } else {\\n                _safeTransferERC20(auction.highestBidder, auction.currencyAddress, refundAmount);\\n            }\\n        }\\n\\n        // set highest bid\\n        auction.highestBid = amount;\\n        auction.highestBidder = msg.sender;\\n\\n        // extend auction if needed\\n        uint256 timeRemaining = auction.startTime + auction.duration - block.timestamp;\\n        if (timeRemaining < EXTENSION_TIME) {\\n            auction.duration += EXTENSION_TIME - timeRemaining;\\n            durationExtended = true;\\n        }\\n\\n        // store updated parameters to storage\\n        Auction storage sAuction = _auctions[nftAddress][tokenId];\\n        sAuction.highestBid = auction.highestBid;\\n        sAuction.highestBidder = auction.highestBidder;\\n        if (firstBid) sAuction.startTime = auction.startTime;\\n        if (durationExtended) sAuction.duration = auction.duration;\\n\\n        // calculate the protocol fee\\n        uint256 protocolFee = _calcProtocolFee(amount);\\n\\n        // transfer funds (move ERC20, refund ETH)\\n        uint256 totalAmount = amount + protocolFee;\\n        if (auction.currencyAddress == address(0)) {\\n            if (msg.value < totalAmount) revert InsufficientMsgValue();\\n            uint256 refund = msg.value - totalAmount;\\n            if (refund > 0) {\\n                _safeTransferETH(msg.sender, refund, weth);\\n            }\\n        } else {\\n            _safeTransferFromERC20(msg.sender, address(this), auction.currencyAddress, totalAmount);\\n            if (msg.value > 0) {\\n                _safeTransferETH(msg.sender, msg.value, weth);\\n            }\\n        }\\n\\n        emit AuctionBid(msg.sender, nftAddress, tokenId, auction);\\n    }\\n\\n    /// @notice Function to settle an auction\\n    /// @dev Can be called by anyone\\n    /// @dev Requires the following to be true\\n    ///     - auction has been started\\n    ///     - auction has ended\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    function settleAuction(address nftAddress, uint256 tokenId) external nonReentrant {\\n        // cache items\\n        Auction memory auction = _auctions[nftAddress][tokenId];\\n        IERC721 nft = IERC721(nftAddress);\\n\\n        // check requirements\\n        if (auction.highestBidder == address(0)) revert AuctionNotStarted();\\n        if (block.timestamp < auction.startTime + auction.duration) revert AuctionNotEnded();\\n\\n        // clear the auction\\n        delete _auctions[nftAddress][tokenId];\\n\\n        // payout auction\\n        _payout(nftAddress, tokenId, auction.currencyAddress, auction.highestBid, auction.payoutReceiver);\\n\\n        // transfer nft\\n        nft.transferFrom(address(this), auction.highestBidder, tokenId);\\n        if (nft.ownerOf(tokenId) != auction.highestBidder) revert NftNotTransferred();\\n\\n        emit AuctionSettled(msg.sender, nftAddress, tokenId, auction);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Sales Configuration Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to configure a buy now sale\\n    /// @dev Requires the following to be true\\n    ///     - contract is not paused\\n    ///     - the sale hasn't been configured yet by the current token owner\\n    ///     - an auction hasn't been started - this is captured by token ownership\\n    ///     - msg.sender is the owner of the token\\n    ///     - auction house is approved for all\\n    ///     - payoutReceiver isn't the zero address\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @param payoutReceiver The address that receives the payout from the sale\\n    /// @param currencyAddress The currency to use\\n    /// @param price The sale price\\n    /// @param saleOpenTime The time at which the sale opens\\n    function configureSale(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address payoutReceiver,\\n        address currencyAddress,\\n        uint256 price,\\n        uint256 saleOpenTime\\n    ) external whenNotPaused nonReentrant {\\n        // sanctions\\n        _isSanctioned(msg.sender, true);\\n        _isSanctioned(payoutReceiver, true);\\n\\n        IERC721 nft = IERC721(nftAddress);\\n        bool isNftOwner = _checkTokenOwnership(nft, tokenId, msg.sender);\\n\\n        if (isNftOwner) {\\n            if (!_checkAuctionHouseApproval(nft, msg.sender)) revert AuctionHouseNotApproved();\\n            if (!_checkPayoutReceiver(payoutReceiver)) revert PayoutToZeroAddress();\\n        } else {\\n            revert CallerNotTokenOwner();\\n        }\\n\\n        Sale memory sale = Sale(msg.sender, payoutReceiver, currencyAddress, price, saleOpenTime);\\n\\n        _sales[nftAddress][tokenId] = sale;\\n\\n        emit SaleConfigured(msg.sender, nftAddress, tokenId, sale);\\n    }\\n\\n    /// @notice Function to cancel a sale\\n    /// @dev Requires msg.sender to be the token owner\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    function cancelSale(address nftAddress, uint256 tokenId) external nonReentrant {\\n        IERC721 nft = IERC721(nftAddress);\\n        Sale memory sale = _sales[nftAddress][tokenId];\\n        bool isNftOwner = _checkTokenOwnership(nft, tokenId, msg.sender);\\n\\n        if (msg.sender != sale.seller) {\\n            if (!isNftOwner) revert CallerNotTokenOwner();\\n        }\\n\\n        delete _sales[nftAddress][tokenId];\\n\\n        emit SaleCanceled(msg.sender, nftAddress, tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Sales Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to buy a token\\n    /// @dev Requires the following to be true\\n    ///     - contract is not paused\\n    ///     - block.timestamp is greater than the sale open timestamp\\n    ///     - msg.sender has attached enough eth/erc20 as specified by the sale\\n    ///     - protocol fee has been supplied, if needed\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    function buyNow(address nftAddress, uint256 tokenId) external payable whenNotPaused nonReentrant {\\n        _isSanctioned(msg.sender, true);\\n\\n        // cache items\\n        Sale memory sale = _sales[nftAddress][tokenId];\\n        IERC721 nft = IERC721(nftAddress);\\n\\n        // check if the sale is open\\n        if (sale.seller == address(0)) revert SaleNotConfigured();\\n        if (block.timestamp < sale.saleOpenTime) revert SaleNotOpen();\\n\\n        // check that the nft is owned by the seller still\\n        if (nft.ownerOf(tokenId) != sale.seller) revert NftNotOwnedBySeller();\\n\\n        // clear storage\\n        delete _auctions[nftAddress][tokenId];\\n        delete _sales[nftAddress][tokenId];\\n\\n        // calculate the protocol fee\\n        uint256 protocolFee = _calcProtocolFee(sale.price);\\n\\n        // transfer funds to the contract, refunding if needed\\n        uint256 totalAmount = sale.price + protocolFee;\\n        if (sale.currencyAddress == address(0)) {\\n            if (msg.value < totalAmount) revert InsufficientMsgValue();\\n            uint256 refund = msg.value - totalAmount;\\n            if (refund > 0) {\\n                _safeTransferETH(msg.sender, refund, weth);\\n            }\\n        } else {\\n            _safeTransferFromERC20(msg.sender, address(this), sale.currencyAddress, totalAmount);\\n            if (msg.value > 0) {\\n                _safeTransferETH(msg.sender, msg.value, weth);\\n            }\\n        }\\n\\n        // payout sale\\n        _payout(nftAddress, tokenId, sale.currencyAddress, sale.price, sale.payoutReceiver);\\n\\n        // transfer nft\\n        nft.transferFrom(sale.seller, msg.sender, tokenId);\\n        if (nft.ownerOf(tokenId) != msg.sender) revert NftNotTransferred();\\n\\n        emit SaleFulfilled(msg.sender, nftAddress, tokenId, sale);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                External View Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to get a sale\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @return sale The sale struct\\n    function getSale(address nftAddress, uint256 tokenId) external view returns (Sale memory) {\\n        return _sales[nftAddress][tokenId];\\n    }\\n\\n    /// @notice function to get an auction\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @return auction The auction struct\\n    function getAuction(address nftAddress, uint256 tokenId) external view returns (Auction memory) {\\n        return _auctions[nftAddress][tokenId];\\n    }\\n\\n    /// @notice function to get the next minimum bid price for an auction\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @return uint256 The next minimum bid required\\n    function calcNextMinBid(address nftAddress, uint256 tokenId) external view returns (uint256) {\\n        return _calcNextMinBid(_auctions[nftAddress][tokenId].highestBid);\\n    }\\n\\n    /// @notice function to calculate the protocol fee\\n    /// @param amount The value to calculate the fee for\\n    /// @return uint256 The calculated fee\\n    function calcProtocolFee(uint256 amount) external view returns (uint256) {\\n        return _calcProtocolFee(amount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Internal Helper Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Internal function to set the min bid increase settings\\n    /// @param newMinBidIncreasePerc The new minimum bid increase nominal percentage, out of `BASIS`\\n    /// @param newMinBidIncreaseLimit The new minimum bid increase absolute limit\\n    function _setMinBidIncreaseSettings(uint256 newMinBidIncreasePerc, uint256 newMinBidIncreaseLimit) internal {\\n        if (newMinBidIncreasePerc > BASIS) revert PercentageTooLarge();\\n\\n        minBidIncreasePerc = newMinBidIncreasePerc;\\n        minBidIncreaseLimit = newMinBidIncreaseLimit;\\n\\n        emit MinBidIncreaseUpdated(newMinBidIncreasePerc, newMinBidIncreaseLimit);\\n    }\\n\\n    /// @notice Internal function to set the protocol fee settings\\n    /// @param newProtocolFeeReceiver The new protocol fee receiver\\n    /// @param newProtocolFeePerc The new protocol fee percentage, out of `BASIS`\\n    /// @param newProtocolFeeLimit The new protocol fee limit\\n    function _setProtocolFeeSettings(\\n        address newProtocolFeeReceiver,\\n        uint256 newProtocolFeePerc,\\n        uint256 newProtocolFeeLimit\\n    ) internal {\\n        if (newProtocolFeePerc > BASIS) revert PercentageTooLarge();\\n\\n        protocolFeeReceiver = newProtocolFeeReceiver;\\n        protocolFeePerc = newProtocolFeePerc;\\n        protocolFeeLimit = newProtocolFeeLimit;\\n\\n        emit ProtocolFeeUpdated(newProtocolFeeReceiver, newProtocolFeePerc, newProtocolFeeLimit);\\n    }\\n\\n    /// @notice Internal function to check if a token is owned by an address\\n    /// @param nft The nft contract\\n    /// @param tokenId The nft token id\\n    /// @param potentialTokenOwner The potential token owner to check against\\n    /// @return bool Indication of if the address in quesion is the owner of the token\\n    function _checkTokenOwnership(IERC721 nft, uint256 tokenId, address potentialTokenOwner)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return nft.ownerOf(tokenId) == potentialTokenOwner;\\n    }\\n\\n    /// @notice Internal function to check if the auction house is approved for all\\n    /// @param nft The nft contract\\n    /// @param seller The seller to check against\\n    /// @return bool Indication of if the auction house is approved for all by the seller\\n    function _checkAuctionHouseApproval(IERC721 nft, address seller) internal view returns (bool) {\\n        return nft.isApprovedForAll(seller, address(this));\\n    }\\n\\n    /// @notice Internal function to check if a payout address is a valid address\\n    /// @param payoutReceiver The payout address to check\\n    /// @return bool Indication of if the payout address is not the zero address\\n    function _checkPayoutReceiver(address payoutReceiver) internal pure returns (bool) {\\n        return payoutReceiver != address(0);\\n    }\\n\\n    /// @notice Internal function to calculate the next min bid price\\n    /// @param currentBid The current bid\\n    /// @return nextMinBid The next minimum bid\\n    function _calcNextMinBid(uint256 currentBid) internal view returns (uint256 nextMinBid) {\\n        uint256 bidIncrease = currentBid * minBidIncreasePerc / BASIS;\\n        if (bidIncrease > minBidIncreaseLimit) {\\n            bidIncrease = minBidIncreaseLimit;\\n        }\\n        nextMinBid = currentBid + bidIncrease;\\n    }\\n\\n    /// @notice Internal function to calculate the protocol fee\\n    /// @param amount The value of the sale\\n    /// @return fee The protocol fee\\n    function _calcProtocolFee(uint256 amount) internal view returns (uint256 fee) {\\n        fee = amount * protocolFeePerc / BASIS;\\n        if (fee > protocolFeeLimit) {\\n            fee = protocolFeeLimit;\\n        }\\n    }\\n\\n    /// @notice Internal function to payout from the contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id\\n    /// @param currencyAddress The currency address (ZERO ADDRESS == ETH)\\n    /// @param amount The sale/auction end price\\n    /// @param payoutReceiver The receiver for the sale payout (what's remaining after royalties)\\n    function _payout(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address currencyAddress,\\n        uint256 amount,\\n        address payoutReceiver\\n    ) internal {\\n        // calc protocol fee\\n        uint256 protocolFee = _calcProtocolFee(amount);\\n\\n        // payout royalties\\n        uint256 remainingAmount = _payoutRoyalties(nftAddress, tokenId, currencyAddress, amount);\\n\\n        // distribute protocol fee and remaining amount - should be escrowed in this contract\\n        if (currencyAddress == address(0)) {\\n            // transfer protocol fee\\n            _safeTransferETH(protocolFeeReceiver, protocolFee, weth);\\n            // transfer remaining value to payout receiver\\n            _safeTransferETH(payoutReceiver, remainingAmount, weth);\\n        } else {\\n            // transfer protocol fee\\n            _safeTransferERC20(protocolFeeReceiver, currencyAddress, protocolFee);\\n            // transfer remaining value to payout receiver\\n            _safeTransferERC20(payoutReceiver, currencyAddress, remainingAmount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/payments/RoyaltyPayoutHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {TransferHelper} from \\\"./TransferHelper.sol\\\";\\nimport {SanctionsCompliance} from \\\"./SanctionsCompliance.sol\\\";\\nimport {IRoyaltyEngineV1} from \\\"royalty-registry-solidity/IRoyaltyEngineV1.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                        Royalty Payout Helper\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title Royalty Payout Helper\\n/// @notice Abstract contract to help payout royalties using the Royalty Registry\\n/// @dev Does not manage updating the sanctions oracle and expects the child contract to implement\\n/// @author transientlabs.xyz\\n/// @custom:last-updated 2.5.0\\nabstract contract RoyaltyPayoutHelper is TransferHelper, SanctionsCompliance {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                  State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    address public weth;\\n    IRoyaltyEngineV1 public royaltyEngine;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                  Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param sanctionsOracle - the init sanctions oracle\\n    /// @param wethAddress - the init weth address\\n    /// @param royaltyEngineAddress - the init royalty engine address\\n    constructor(address sanctionsOracle, address wethAddress, address royaltyEngineAddress) SanctionsCompliance(sanctionsOracle) {\\n        weth = wethAddress;\\n        royaltyEngine = IRoyaltyEngineV1(royaltyEngineAddress);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Internal State Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to update the WETH address\\n    /// @dev Care should be taken to ensure proper access control for this function\\n    /// @param wethAddress The new WETH token address\\n    function _setWethAddress(address wethAddress) internal {\\n        weth = wethAddress;\\n    }\\n\\n    /// @notice Function to update the royalty engine address\\n    /// @dev Care should be taken to ensure proper access control for this function\\n    /// @param royaltyEngineAddress The new royalty engine address\\n    function _setRoyaltyEngineAddress(address royaltyEngineAddress) internal {\\n        royaltyEngine = IRoyaltyEngineV1(royaltyEngineAddress);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Royalty Payout Function\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to payout royalties from the contract balance based on sale price\\n    /// @dev if the call to the royalty engine reverts or if the return values are invalid, no payments are made\\n    /// @dev if the sum of the royalty payouts is greater than the salePrice, the loop exits early for gas savings (this shouldn't happen in reality)\\n    /// @dev if this is used in a call where tokens should be transferred from a sender, it is advisable to \\n    ///      first transfer the required amount to the contract and then call this function, as it will save on gas\\n    /// @param token The contract address for the token\\n    /// @param tokenId The token id\\n    /// @param currency The address of the currency to send to recipients (null address == ETH)\\n    /// @param salePrice The sale price for the token\\n    /// @return remainingSale The amount left over in the sale after paying out royalties\\n    function _payoutRoyalties(address token, uint256 tokenId, address currency, uint256 salePrice)\\n        internal\\n        returns (uint256 remainingSale)\\n    {\\n        remainingSale = salePrice;\\n        if (address(royaltyEngine).code.length == 0) return remainingSale;\\n        try royaltyEngine.getRoyalty(token, tokenId, salePrice) returns (\\n            address payable[] memory recipients, uint256[] memory amounts\\n        ) {\\n            if (recipients.length != amounts.length) return remainingSale;\\n\\n            for (uint256 i = 0; i < recipients.length; i++) {\\n                if (_isSanctioned(recipients[i], false)) continue; // don't pay to sanctioned addresses\\n                if (amounts[i] > remainingSale) break;\\n                remainingSale -= amounts[i];\\n                if (currency == address(0)) {\\n                    _safeTransferETH(recipients[i], amounts[i], weth);\\n                } else {\\n                    _safeTransferERC20(recipients[i], currency, amounts[i]);\\n                }\\n            }\\n\\n            return remainingSale;\\n        } catch {\\n            return remainingSale;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/CommonUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @dev Enum to encapsulate drop phases\\nenum DropPhase {\\n    NOT_CONFIGURED,\\n    NOT_STARTED,\\n    PRESALE,\\n    PUBLIC_SALE,\\n    ENDED\\n}\\n\\n/// @dev Enum to encapsulate drop types\\nenum DropType {\\n    NOT_CONFIGURED,\\n    REGULAR,\\n    VELOCITY\\n}\\n\\n/// @dev Errors for Drops\\ninterface DropErrors {\\n    error NotDropAdmin();\\n    error NotApprovedMintContract();\\n    error InvalidPayoutReceiver();\\n    error InvalidDropSupply();\\n    error DropNotConfigured();\\n    error DropAlreadyConfigured();\\n    error InvalidDropType();\\n    error NotAllowedForVelocityDrops();\\n    error MintZeroTokens();\\n    error NotOnAllowlist();\\n    error YouShallNotMint();\\n    error AlreadyReachedMintAllowance();\\n    error InvalidBatchArguments();\\n    error InsufficientFunds();\\n}\\n\\n/// @dev Errors for the Auction House\\ninterface AuctionHouseErrors {\\n    error PercentageTooLarge();\\n    error CallerNotTokenOwner();\\n    error AuctionHouseNotApproved();\\n    error PayoutToZeroAddress();\\n    error NftNotOwnedBySeller();\\n    error NftNotTransferred();\\n    error AuctionNotConfigured();\\n    error AuctionNotStarted();\\n    error AuctionStarted();\\n    error AuctionNotOpen();\\n    error BidTooLow();\\n    error AuctionEnded();\\n    error AuctionNotEnded();\\n    error InsufficientMsgValue();\\n    error SaleNotConfigured();\\n    error SaleNotOpen();\\n}\\n\"\r\n    },\r\n    \"src/utils/TLAuctionHouseUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @dev Auction struct\\n/// @param seller The seller of the token\\n/// @param payoutReceiver The address that receives any payout from the auction\\n/// @param currencyAddress The currency address - Zero address == ETH\\n/// @param highestBidder The highest bidder address\\n/// @param highestBid The highest bid\\n/// @param reservePrice The reserve price of the auction\\n/// @param auctionOpenTime The timestamp at which bidding is allowed\\n/// @param startTime The timestamp at which the auction was kicked off with a bid\\n/// @param duration The duration the auction should last after it is started\\nstruct Auction {\\n    address seller;\\n    address payoutReceiver;\\n    address currencyAddress;\\n    address highestBidder;\\n    uint256 highestBid;\\n    uint256 reservePrice;\\n    uint256 auctionOpenTime;\\n    uint256 startTime;\\n    uint256 duration;\\n}\\n\\n/// @dev Sale struct\\n/// @param seller The seller of the token\\n/// @param payoutReceiver The address that receives any payout from the auction\\n/// @param currencyAddress The currency address - Zero address == ETH\\n/// @param price The price for the nft\\nstruct Sale {\\n    address seller;\\n    address payoutReceiver;\\n    address currencyAddress;\\n    uint256 price;\\n    uint256 saleOpenTime;\\n}\\n\\ninterface ITLAuctionHouseEvents {\\n    event RoyaltyEngineUpdated(address indexed prevRoyaltyEngine, address indexed newRoyaltyEngine);\\n    event WethUpdated(address indexed prevWeth, address indexed newWeth);\\n    event MinBidIncreaseUpdated(uint256 indexed newMinBidIncreasePerc, uint256 indexed newMinBidIncreaseLimit);\\n    event ProtocolFeeUpdated(\\n        address indexed newProtocolFeeReceiver, uint256 indexed newProtocolFeePerc, uint256 indexed newProtocolFeeLimit\\n    );\\n\\n    event AuctionConfigured(\\n        address indexed sender, address indexed nftAddress, uint256 indexed tokenId, Auction auction\\n    );\\n    event AuctionCanceled(address indexed sender, address indexed nftAddress, uint256 indexed tokenId);\\n    event AuctionSettled(address indexed sender, address indexed nftAddress, uint256 indexed tokenId, Auction auction);\\n    event AuctionBid(address indexed sender, address indexed nftAddress, uint256 indexed tokenId, Auction auction);\\n\\n    event SaleConfigured(address indexed sender, address indexed nftAddress, uint256 indexed tokenId, Sale sale);\\n    event SaleCanceled(address indexed sender, address indexed nftAddress, uint256 indexed tokenId);\\n    event SaleFulfilled(address indexed sender, address indexed nftAddress, uint256 indexed tokenId, Sale sale);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/payments/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWETH, IERC20} from \\\"./IWETH.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev ETH transfer failed\\nerror ETHTransferFailed();\\n\\n/// @dev Transferred too few ERC-20 tokens\\nerror InsufficentERC20Transfer();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Transfer Helper\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title Transfer Helper\\n/// @notice Abstract contract that has helper function for sending ETH and ERC20's safely\\n/// @author transientlabs.xyz\\n/// @custom:last-updated 2.3.0\\nabstract contract TransferHelper {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                  State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                   ETH Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to force transfer ETH\\n    /// @dev On failure to send the ETH, the ETH is converted to WETH and sent\\n    /// @dev Care should be taken to always pass the proper WETH address that adheres to IWETH\\n    /// @param recipient The recipient of the ETH\\n    /// @param amount The amount of ETH to send\\n    /// @param weth The WETH token address\\n    function _safeTransferETH(address recipient, uint256 amount, address weth) internal {\\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            IWETH token = IWETH(weth);\\n            token.deposit{value: amount}();\\n            token.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                  ERC-20 Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to safely transfer ERC-20 tokens from the contract, without checking for token tax\\n    /// @dev Does not check if the sender has enough balance as that is handled by the token contract\\n    /// @dev Does not check for token tax as that could lock up funds in the contract\\n    /// @dev Reverts on failure to transfer\\n    /// @param recipient The recipient of the ERC-20 token\\n    /// @param currency The address of the ERC-20 token\\n    /// @param amount The amount of ERC-20 to send\\n    function _safeTransferERC20(address recipient, address currency, uint256 amount) internal {\\n        IERC20(currency).safeTransfer(recipient, amount);\\n    }\\n\\n    /// @notice Function to safely transfer ERC-20 tokens from another address to a recipient\\n    /// @dev Does not check if the sender has enough balance or allowance for this contract as that is handled by the token contract\\n    /// @dev Reverts on failure to transfer\\n    /// @dev Reverts if there is a token tax taken out\\n    /// @param sender The sender of the tokens\\n    /// @param recipient The recipient of the ERC-20 token\\n    /// @param currency The address of the ERC-20 token\\n    /// @param amount The amount of ERC-20 to send\\n    function _safeTransferFromERC20(address sender, address recipient, address currency, uint256 amount) internal {\\n        IERC20 token = IERC20(currency);\\n        uint256 intialBalance = token.balanceOf(recipient);\\n        token.safeTransferFrom(sender, recipient, amount);\\n        uint256 finalBalance = token.balanceOf(recipient);\\n        if (finalBalance - intialBalance < amount) revert InsufficentERC20Transfer();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/payments/SanctionsCompliance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Chainalysis Sanctions Oracle\\n//////////////////////////////////////////////////////////////////////////*/\\n\\ninterface ChainalysisSanctionsOracle {\\n    function isSanctioned(address addr) external view returns (bool);\\n}\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                              Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nerror SanctionedAddress();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Sanctions Compliance\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title Sanctions Compliance\\n/// @notice Abstract contract to comply with U.S. sanctioned addresses\\n/// @dev Uses the Chainalysis Sanctions Oracle for checking sanctions\\n/// @author transientlabs.xyz\\n/// @custom:last-updated 2.5.0\\ncontract SanctionsCompliance {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    ChainalysisSanctionsOracle public oracle;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    event SanctionsOracleUpdated(address indexed prevOracle, address indexed newOracle);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    constructor(address initOracle) {\\n        _updateSanctionsOracle(initOracle);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Internal Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Internal function to change the sanctions oracle\\n    /// @param newOracle The new sanctions oracle address\\n    function _updateSanctionsOracle(address newOracle) internal {\\n        address prevOracle = address(oracle);\\n        oracle = ChainalysisSanctionsOracle(newOracle);\\n\\n        emit SanctionsOracleUpdated(prevOracle, newOracle);\\n    }\\n\\n    /// @notice Internal function to check the sanctions oracle for an address\\n    /// @dev Disable sanction checking by setting the oracle to the zero address\\n    /// @param sender The address that is trying to send money\\n    /// @param shouldRevertIfSanctioned A flag indicating if the call should revert if the sender is sanctioned. Set to false if wanting to get a result.\\n    /// @return isSanctioned Boolean indicating if the sender is sanctioned\\n    function _isSanctioned(address sender, bool shouldRevertIfSanctioned) internal view returns (bool isSanctioned) {\\n        if (address(oracle) == address(0)) {\\n            return false;\\n        }\\n        isSanctioned = oracle.isSanctioned(sender);\\n        if (shouldRevertIfSanctioned && isSanctioned) revert SanctionedAddress();\\n        return isSanctioned;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/lib/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value)\\n        external\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/payments/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@manifoldxyz/libraries-solidity/=lib/tl-sol-tools/lib/royalty-registry-solidity/lib/libraries-solidity/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/tl-sol-tools/lib/royalty-registry-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/tl-sol-tools/lib/royalty-registry-solidity/lib/openzeppelin-contracts/contracts/\",\r\n      \"blocklist/=lib/tl-creator-contracts/lib/blocklist/src/\",\r\n      \"create2-helpers/=lib/tl-sol-tools/lib/royalty-registry-solidity/lib/create2-helpers/\",\r\n      \"create2-scripts/=lib/tl-sol-tools/lib/royalty-registry-solidity/lib/create2-helpers/script/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"libraries-solidity/=lib/tl-sol-tools/lib/royalty-registry-solidity/lib/libraries-solidity/contracts/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/tl-creator-contracts/lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/tl-creator-contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"royalty-registry-solidity/=lib/tl-sol-tools/lib/royalty-registry-solidity/contracts/\",\r\n      \"sstore2/=lib/tl-creator-contracts/lib/sstore2/contracts/\",\r\n      \"story-contract/=lib/tl-creator-contracts/lib/story-contract/src/\",\r\n      \"tl-blocklist/=lib/tl-creator-contracts/lib/blocklist/src/\",\r\n      \"tl-creator-contracts/=lib/tl-creator-contracts/src/\",\r\n      \"tl-sol-tools/=lib/tl-sol-tools/src/\",\r\n      \"tl-stacks/=src/\",\r\n      \"tl-story/=lib/tl-creator-contracts/lib/story-contract/src/\",\r\n      \"utils/=lib/utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initSanctionsOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initWethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initRoyaltyEngineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initProtocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initMinBidIncreasePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMinBidIncreaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initProtocolFeePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initProtocolFeeLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionHouseNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficentERC20Transfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftNotOwnedBySeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftNotTransferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentageTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SanctionedAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinBidIncreasePerc\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinBidIncreaseLimit\",\"type\":\"uint256\"}],\"name\":\"MinBidIncreaseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolFeeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newProtocolFeePerc\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newProtocolFeeLimit\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevRoyaltyEngine\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyEngine\",\"type\":\"address\"}],\"name\":\"RoyaltyEngineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SaleCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleOpenTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Sale\",\"name\":\"sale\",\"type\":\"tuple\"}],\"name\":\"SaleConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleOpenTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Sale\",\"name\":\"sale\",\"type\":\"tuple\"}],\"name\":\"SaleFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"SanctionsOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevWeth\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWeth\",\"type\":\"address\"}],\"name\":\"WethUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTENSION_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calcNextMinBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reserveAuction\",\"type\":\"bool\"}],\"name\":\"configureAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleOpenTime\",\"type\":\"uint256\"}],\"name\":\"configureSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionOpenTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSale\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleOpenTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Sale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncreaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncreasePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ChainalysisSanctionsOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyEngine\",\"outputs\":[{\"internalType\":\"contract IRoyaltyEngineV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinBidIncreasePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinBidIncreaseLimit\",\"type\":\"uint256\"}],\"name\":\"setMinBidIncreaseSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProtocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeeLimit\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyEngine\",\"type\":\"address\"}],\"name\":\"setRoyaltyEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setSanctionsOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWethAddress\",\"type\":\"address\"}],\"name\":\"setWethAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TLAuctionHouse", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000040c57923924b5c5c5455c48d93317139addac8fb000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000385603ab55642cb4dd5de3ae9e306809991804f000000000000000000000000351794499daf295ea10f646157c09ba3b460bef500000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000008ac7230489e80000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}