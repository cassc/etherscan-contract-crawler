{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/price-oracle/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function latestAnswer() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/price-oracle/interfaces/ITwapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ITwapOracle {\\n  /// @notice Return TWAP with 18 decimal places in the epoch ending at the specified timestamp.\\n  ///         Zero is returned if TWAP in the epoch is not available.\\n  /// @param timestamp End Timestamp in seconds of the epoch\\n  /// @return TWAP (18 decimal places) in the epoch, or zero if not available\\n  function getTwap(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Return the latest price with 18 decimal places.\\n  function getLatest() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/price-oracle/twap/ChainlinkTwapOracleV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/ITwapOracle.sol\\\";\\n\\n// This contract is almost a copy from https://github.com/tranchess/contract-core/blob/main/contracts/oracle/ChainlinkTwapOracleV3.sol\\n\\n// solhint-disable not-rely-on-time\\n// solhint-disable reason-string\\n\\ncontract ChainlinkTwapOracleV3 is ITwapOracle, Ownable {\\n  using SafeMath for uint256;\\n\\n  uint256 private constant EPOCH = 30 minutes;\\n  uint256 private constant MAX_ITERATION = 500;\\n\\n  event Update(uint256 timestamp, uint256 price);\\n\\n  /// @notice Chainlink aggregator used as the data source.\\n  address public immutable chainlinkAggregator;\\n\\n  /// @notice Minimum number of Chainlink rounds required in an epoch.\\n  uint256 public immutable chainlinkMinMessageCount;\\n\\n  /// @notice Maximum gap between an epoch start and a previous Chainlink round for the round\\n  ///         to be used in TWAP calculation.\\n  uint256 public immutable chainlinkMessageExpiration;\\n\\n  /// @dev A multipler that normalizes price from the Chainlink aggregator to 18 decimal places.\\n  uint256 private immutable _chainlinkPriceMultiplier;\\n\\n  string public symbol;\\n\\n  /// @dev Mapping of epoch end timestamp => TWAP\\n  mapping(uint256 => uint256) private _ownerUpdatedPrices;\\n\\n  constructor(\\n    address chainlinkAggregator_,\\n    uint256 chainlinkMinMessageCount_,\\n    uint256 chainlinkMessageExpiration_,\\n    string memory symbol_\\n  ) {\\n    chainlinkAggregator = chainlinkAggregator_;\\n    require(chainlinkMinMessageCount_ > 0);\\n    chainlinkMinMessageCount = chainlinkMinMessageCount_;\\n    chainlinkMessageExpiration = chainlinkMessageExpiration_;\\n    uint256 decimal = AggregatorV3Interface(chainlinkAggregator_).decimals();\\n    _chainlinkPriceMultiplier = 10**(uint256(18).sub(decimal));\\n    symbol = symbol_;\\n  }\\n\\n  /// @inheritdoc ITwapOracle\\n  function getLatest() external view override returns (uint256) {\\n    (, int256 answer, , uint256 updatedAt, ) = AggregatorV3Interface(chainlinkAggregator).latestRoundData();\\n    require(updatedAt >= block.timestamp - chainlinkMessageExpiration, \\\"Stale price oracle\\\");\\n    return uint256(answer).mul(_chainlinkPriceMultiplier);\\n  }\\n\\n  /// @inheritdoc ITwapOracle\\n  function getTwap(uint256 timestamp) external view override returns (uint256) {\\n    uint256 twap = _getTwapFromChainlink(timestamp);\\n    if (twap == 0) {\\n      // owner only update price at the end of every epoch.\\n      twap = _ownerUpdatedPrices[(timestamp / EPOCH) * EPOCH];\\n    }\\n    return twap;\\n  }\\n\\n  /// @notice Search for the last round before the given timestamp. Zeros are returned\\n  ///         if the search fails.\\n  function findLastRoundBefore(uint256 timestamp)\\n    public\\n    view\\n    returns (\\n      uint80 roundID,\\n      int256 answer,\\n      uint256 updatedAt\\n    )\\n  {\\n    (roundID, answer, , updatedAt, ) = AggregatorV3Interface(chainlinkAggregator).latestRoundData();\\n    if (updatedAt < timestamp + EPOCH) {\\n      // Fast path: sequentially check each round when the target epoch is in the near past.\\n      for (uint256 i = 0; i < MAX_ITERATION && updatedAt >= timestamp && answer != 0; i++) {\\n        roundID--;\\n        (, answer, , updatedAt, ) = _getChainlinkRoundData(roundID);\\n      }\\n    } else {\\n      // Slow path: binary search. During the search, the `roundID` round is always updated\\n      // at or after the given timestamp, and the `leftRoundID` round is either invalid or\\n      // updated before the given timestamp.\\n      uint80 step = 1;\\n      uint80 leftRoundID = 0;\\n      while (step <= roundID) {\\n        leftRoundID = roundID - step;\\n        (, answer, , updatedAt, ) = _getChainlinkRoundData(leftRoundID);\\n        if (updatedAt < timestamp || answer == 0) {\\n          break;\\n        }\\n        step <<= 1;\\n        roundID = leftRoundID;\\n      }\\n      while (leftRoundID + 1 < roundID) {\\n        uint80 midRoundID = (leftRoundID + roundID) / 2;\\n        (, answer, , updatedAt, ) = _getChainlinkRoundData(midRoundID);\\n        if (updatedAt < timestamp || answer == 0) {\\n          leftRoundID = midRoundID;\\n        } else {\\n          roundID = midRoundID;\\n        }\\n      }\\n      roundID = leftRoundID;\\n      (, answer, , updatedAt, ) = _getChainlinkRoundData(roundID);\\n    }\\n    if (updatedAt >= timestamp || answer == 0) {\\n      // The last round before the epoch end is not found, due to either incontinuous\\n      // round IDs caused by a phase change or abnormal `updatedAt` timestamps.\\n      return (0, 0, 0);\\n    }\\n  }\\n\\n  /// @dev Calculate TWAP of the given epoch from the Chainlink oracle.\\n  /// @param timestamp End timestamp of the epoch to be updated\\n  /// @return TWAP of the epoch calculated from Chainlink, or zero if there's no sufficient data\\n  function _getTwapFromChainlink(uint256 timestamp) private view returns (uint256) {\\n    require(block.timestamp >= timestamp, \\\"Too soon\\\");\\n    (uint80 roundID, int256 answer, uint256 updatedAt) = findLastRoundBefore(timestamp);\\n    if (answer == 0) {\\n      return 0;\\n    }\\n    uint256 sum = 0;\\n    uint256 sumTimestamp = timestamp;\\n    uint256 messageCount = 1;\\n    for (uint256 i = 0; i < MAX_ITERATION && updatedAt >= timestamp - EPOCH; i++) {\\n      sum = sum.add(uint256(answer).mul(sumTimestamp - updatedAt));\\n      sumTimestamp = updatedAt;\\n      if (roundID == 0) {\\n        break;\\n      }\\n      roundID--;\\n      (, int256 newAnswer, , uint256 newUpdatedAt, ) = _getChainlinkRoundData(roundID);\\n      if (newAnswer == 0 || newUpdatedAt > updatedAt || newUpdatedAt < timestamp - EPOCH - chainlinkMessageExpiration) {\\n        break; // Stop if the previous round is invalid\\n      }\\n      answer = newAnswer;\\n      updatedAt = newUpdatedAt;\\n      messageCount++;\\n    }\\n    if (messageCount >= chainlinkMinMessageCount) {\\n      sum = sum.add(uint256(answer).mul(sumTimestamp - (timestamp - EPOCH)));\\n      return sum.mul(_chainlinkPriceMultiplier) / EPOCH;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /// @dev Call `chainlinkAggregator.getRoundData(roundID)`. Return zero if the call reverts.\\n  function _getChainlinkRoundData(uint80 roundID)\\n    private\\n    view\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    (bool success, bytes memory returnData) = chainlinkAggregator.staticcall(\\n      abi.encodePacked(AggregatorV3Interface.getRoundData.selector, abi.encode(roundID))\\n    );\\n    if (success) {\\n      return abi.decode(returnData, (uint80, int256, uint256, uint256, uint80));\\n    } else {\\n      return (roundID, 0, 0, 0, roundID);\\n    }\\n  }\\n\\n  /// @notice Submit a TWAP with 18 decimal places by the owner.\\n  ///         This is allowed only when a epoch cannot be updated by either Chainlink or Uniswap.\\n  function updateTwapFromOwner(uint256 timestamp, uint256 price) external onlyOwner {\\n    require(timestamp % EPOCH == 0, \\\"Unaligned timestamp\\\");\\n    require(timestamp <= block.timestamp - EPOCH * 2, \\\"Not ready for owner\\\");\\n    require(_ownerUpdatedPrices[timestamp] == 0, \\\"Owner cannot update an existing epoch\\\");\\n\\n    uint256 chainlinkTwap = _getTwapFromChainlink(timestamp);\\n    require(chainlinkTwap == 0, \\\"Owner cannot overwrite Chainlink result\\\");\\n\\n    _ownerUpdatedPrices[timestamp] = price;\\n    emit Update(timestamp, price);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainlinkAggregator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkMinMessageCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkMessageExpiration_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainlinkAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkMessageExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkMinMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"findLastRoundBefore\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundID\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateTwapFromOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChainlinkTwapOracleV3", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cfe54b5cd566ab89272946f602d76ea879cab4a800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000057374455448000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}