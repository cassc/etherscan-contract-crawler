{"SourceCode": "// \"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity 0.8.2;\r\n\r\n/**\r\n * @title IERC20\r\n * @dev Basic interface of ERC20 Standard\r\n */\r\ninterface IERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract DoraID {\r\n  using SafeMath for uint256;\r\n\r\n  IERC20 public DORAYAKI;\r\n\r\n  uint256 constant public MIN_AUTH_STAKING = 10 ether;\r\n  uint256 constant public MIN_AUTH_DURATION = 30 days;\r\n\r\n  uint256 constant public FORCE_QUIT_THRESHOLD = 10000 ether;\r\n  uint256 constant public FORCE_QUIT_DURATION = 30 days;\r\n\r\n  uint256 constant public ACTIVATION_FEE = 10 ether * 10 days;\r\n  uint256 constant public MAX_STORED_POS = 20 * ACTIVATION_FEE;\r\n\r\n  struct UserInfo {\r\n    address parent;\r\n    address[] children;\r\n  \r\n    bool authenticated;\r\n    uint256 stakingAmount;\r\n    uint256 stakingEndTime;\r\n    uint256 proofOfStake;\r\n    uint256 lastSeen;\r\n  }\r\n\r\n  mapping(address => UserInfo) internal _users;\r\n\r\n  mapping(address => uint256) internal _tips;\r\n  mapping(address => address) internal _entrusteds;\r\n\r\n  bool private _rentrancyLock;\r\n\r\n  event Activate(address indexed _parent, address indexed _child);\r\n  event Stake(address indexed _user, uint256 _totalAmount, uint256 _endTime);\r\n\r\n  constructor(IERC20 _dora, address[] memory _initUserList, uint256[] memory _initPOSList) {\r\n    DORAYAKI = _dora;\r\n\r\n    require(_initUserList.length == _initPOSList.length, \"Parameter array length mismatch\");\r\n\r\n    for (uint256 i = 0; i < _initUserList.length; i++) {\r\n      address addr = _initUserList[i];\r\n      uint256 POS = _initPOSList[i];\r\n\r\n      _users[addr].proofOfStake = POS;\r\n      _activate(address(this), addr);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!_rentrancyLock, \"Reentrant error\");\r\n    _rentrancyLock = true;\r\n    _;\r\n    _rentrancyLock = false;\r\n  }\r\n\r\n  function statusOf(address _user) public view returns (bool authenticated, uint256 stakingAmount, uint256 stakingEndTime) {\r\n    UserInfo storage user = _users[_user];\r\n    authenticated = user.authenticated;\r\n    stakingAmount = user.stakingAmount;\r\n    stakingEndTime = user.stakingEndTime;\r\n  }\r\n\r\n  function proofOf(address _user) public view returns (uint256 proof) {\r\n    UserInfo storage user = _users[_user];\r\n    if (!user.authenticated) {\r\n      return 0;\r\n    }\r\n    proof = user.proofOfStake.add((block.timestamp.sub(user.lastSeen)).mul(user.stakingAmount));\r\n    if (user.proofOfStake <= MAX_STORED_POS && proof > MAX_STORED_POS) {\r\n      proof = MAX_STORED_POS;\r\n    }\r\n  }\r\n\r\n  function tipOf(address _user) public view returns (uint256 tip, address entrusted) {\r\n    tip = _tips[_user];\r\n    entrusted = _entrusteds[_user];\r\n  }\r\n\r\n  function parentOf(address _user) public view returns (address) {\r\n    return _users[_user].parent;\r\n  }\r\n\r\n  function childrenSizeOf(address _user) public view returns (uint256) {\r\n    return _users[_user].children.length;\r\n  }\r\n\r\n  function childOf(address _user, uint256 _index) public view returns (address) {\r\n    uint256 size = childrenSizeOf(_user);\r\n    require(_index < size, \"Overflow\");\r\n    return _users[_user].children[_index];\r\n  }\r\n\r\n  function stake(uint256 _amount, uint256 _endTime, uint256 _tip, address _entrusted) external {\r\n    uint256 tip = _tips[msg.sender];\r\n    if (tip > 0) {\r\n      _tips[msg.sender] = 0;\r\n      require(DORAYAKI.transfer(msg.sender, tip), \"ERC20 transfer error\");\r\n    }\r\n    _tips[msg.sender] = _tip;\r\n    require(DORAYAKI.transferFrom(msg.sender, address(this), _tip), \"ERC20 transfer error\");\r\n    _entrusteds[msg.sender] = _entrusted;\r\n    \r\n    stake(_amount, _endTime);\r\n  }\r\n  function stake(uint256 _amount, uint256 _endTime) public nonReentrant {\r\n    require(DORAYAKI.transferFrom(msg.sender, address(this), _amount), \"ERC20 transfer error\");\r\n\r\n    UserInfo storage user = _users[msg.sender];\r\n    _updatePOS(user);\r\n\r\n    require(user.stakingEndTime <= _endTime || user.stakingAmount == 0, \"Can not set an earlier staking time\");\r\n    \r\n    uint256 totalStaking = user.stakingAmount.add(_amount);\r\n\r\n    user.stakingAmount = totalStaking;\r\n    user.stakingEndTime = _endTime;\r\n\r\n    emit Stake(msg.sender, totalStaking, _endTime);\r\n  }\r\n\r\n  function unstake(uint256 _amount) external {\r\n    unstake(_amount, 0);\r\n  }\r\n  function unstake(uint256 _amount, uint256 _endTime) public nonReentrant {\r\n    UserInfo storage user = _users[msg.sender];\r\n    _updatePOS(user);\r\n\r\n    require(user.stakingEndTime < block.timestamp, \"Unfinished staking\");\r\n    require(user.stakingEndTime <= _endTime || _endTime == 0, \"Can not set an earlier staking time\");\r\n\r\n    uint256 tip = _tips[msg.sender];\r\n    if (tip > 0) {\r\n      _tips[msg.sender] = 0;\r\n      require(DORAYAKI.transfer(msg.sender, tip), \"ERC20 transfer error\");\r\n    }\r\n\r\n    uint256 remainder = user.stakingAmount.sub(_amount);\r\n  \r\n    user.stakingAmount = remainder;\r\n    user.stakingEndTime = _endTime;\r\n\r\n    require(DORAYAKI.transfer(msg.sender, _amount), \"ERC20 transfer error\");\r\n\r\n    emit Stake(msg.sender, remainder, _endTime);\r\n  }\r\n\r\n  function activate(address _newUser, uint256 _withTip) external {\r\n    uint256 tip = _tips[_newUser];\r\n    require(tip >= _withTip, \"The current tip is lower than expected\");\r\n    activate(_newUser);\r\n  }\r\n  function activate(address _newUser) public nonReentrant {\r\n    UserInfo storage user = _users[msg.sender];\r\n    _updatePOS(user);\r\n    UserInfo storage newUser = _users[_newUser];\r\n\r\n    address entrusted = _entrusteds[_newUser];\r\n    require(entrusted == address(0) || entrusted == msg.sender, \"The new user specifies the activator\");\r\n  \r\n    require(user.authenticated, \"No permission\");\r\n    require(user.proofOfStake >= ACTIVATION_FEE, \"Insufficient POS\");\r\n    user.proofOfStake -= ACTIVATION_FEE;\r\n  \r\n    require(!newUser.authenticated, \"The user has been activated\");\r\n    require(newUser.stakingAmount >= MIN_AUTH_STAKING, \"User's staking amount is not up to standard\");\r\n    require(newUser.stakingEndTime >= block.timestamp.add(MIN_AUTH_DURATION), \"User's staking time is not up to standard\");\r\n\r\n    uint256 tip = _tips[_newUser];\r\n    if (tip > 0) {\r\n      _tips[_newUser] = 0;\r\n      DORAYAKI.transfer(msg.sender, tip);\r\n    }\r\n    newUser.lastSeen = block.timestamp;\r\n    _activate(msg.sender, _newUser);\r\n  }\r\n\r\n  function forceQuit() external {\r\n    UserInfo storage user = _users[msg.sender];\r\n    _updatePOS(user);\r\n\r\n    require(user.stakingAmount >= FORCE_QUIT_THRESHOLD, \"Staking amount is not up to standard\");\r\n    user.stakingEndTime = block.timestamp + FORCE_QUIT_DURATION;\r\n\r\n    emit Stake(msg.sender, user.stakingAmount, user.stakingEndTime);\r\n  }\r\n\r\n  function _activate(address _parent, address _child) internal {\r\n    _users[_parent].children.push(_child);\r\n    _users[_child].parent = _parent;\r\n    _users[_child].authenticated = true;\r\n\r\n    emit Activate(_parent, _child);\r\n  }\r\n\r\n  function _updatePOS(UserInfo storage _user) internal returns (uint256 proof) {\r\n    if (_user.authenticated) {\r\n      proof = _user.proofOfStake.add((block.timestamp.sub(_user.lastSeen)).mul(_user.stakingAmount));\r\n    }\r\n    if (_user.proofOfStake <= MAX_STORED_POS && proof > MAX_STORED_POS) {\r\n      proof = MAX_STORED_POS;\r\n    }\r\n    _user.proofOfStake = proof;\r\n    _user.lastSeen = block.timestamp;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_dora\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initUserList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initPOSList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_child\",\"type\":\"address\"}],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTIVATION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DORAYAKI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORCE_QUIT_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORCE_QUIT_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STORED_POS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AUTH_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AUTH_STAKING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUser\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withTip\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"childrenSizeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceQuit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"parentOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"proofOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_entrusted\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authenticated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tipOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tip\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"entrusted\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DoraID", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc4171f45ef0ef66e76f979df021a34b46dcc81d000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000003ea9e0cee7bd3924b8f307555a05f24af245bb440000000000000000000000006418fc9ad45ebba33deffb42548a682d3dc1d3cd000000000000000000000000826f510031789fc36e923a15465996c3b43c59d3000000000000000000000000adcba9c5c8c33f7f71600c436f2f2b00babc99970000000000000000000000004937b01fdff0a02cc8416b5bd6c76a98958c85f1000000000000000000000000ceeeeee02243cbee73c0236cee6e53c427ee8ffb000000000000000000000000cc31c9cb03bfb995ff9ac62da615fb62b670aa1b0000000000000000000000004a8aeab4a0803b0df6e2a3013d070a685cf7c6570000000000000000000000004b313ee1af6fa0cebda973ad5ed02cbef7cc39fb0000000000000000000000007724e71cd6bcab24997332d9141b622d9b12ef2200000000000000000000000065e48050f924ce5b6b4d4a8d4e4240048b38d057000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000002caaf1dd9f3a1ffersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://57b3578bf53236480c753a1914ecbef2076281e47360bc744e112672f029f33a"}