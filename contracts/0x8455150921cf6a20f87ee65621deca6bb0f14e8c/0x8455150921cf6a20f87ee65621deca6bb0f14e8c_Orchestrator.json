{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n        \r\n    {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Various utilities useful for uint256.\r\n */\r\nlibrary UInt256Lib {\r\n\r\n    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\r\n\r\n    /**\r\n     * @dev Safely converts a uint256 to an int256.\r\n     */\r\n    function toInt256Safe(uint256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a <= MAX_INT256);\r\n        return int256(a);\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    bool private initialized;\r\n    bool private initializing;\r\n\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract already initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _   ;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Initializable {\r\n    address private _owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n    );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n    }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }  \r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    } \r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    // function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     return mod(a, b);\r\n    // }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n    event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n\r\n    );\r\n\r\n    event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  function initialize(string name, string symbol, uint8 decimals) public initializer {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ninterface ISync {\r\n    function sync() external;\r\n}\r\n\r\n/**\r\n * @title OracleBase ERC20 token\r\n * @dev This is part of an implementation of the OracleBase Ideal Money protocol.\r\n *      OracleBase is a normal ERC20 token, but its supply can be adjusted by splitting and\r\n *      combining tokens proportionally across all wallets.\r\n *\r\n *      OracleBase balances are internally represented with a hidden denomination, 'gons'.\r\n *      We support splitting the currency in expansion and combining the currency on contraction by\r\n *      changing the exchange rate between the hidden 'gons' and the public 'fragments'.\r\n */\r\ncontract OracleBase is ERC20Detailed, Ownable {\r\n    // PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\r\n    // Anytime there is division, there is a risk of numerical instability from rounding errors. In\r\n    // order to minimize this risk, we adhere to the following guidelines:\r\n    // 1) The conversion rate adopted is the number of gons that equals 1 fragment.\r\n    //    The inverse rate must not be used--TOTAL_GONS is always the numerator and _totalSupply is\r\n    //    always the denominator. (i.e. If you want to convert gons to fragments instead of\r\n    //    multiplying by the inverse rate, you should divide by the normal rate)\r\n    // 2) Gon balances converted into Fragments are always rounded down (truncated).\r\n    //\r\n    // We make the following guarantees:\r\n    // - If address 'A' transfers x Fragments to address 'B'. A's resulting external balance will\r\n    //   be decreased by precisely x Fragments, and B's external balance will be precisely\r\n    //   increased by x Fragments.\r\n    //\r\n    // We do not guarantee that the sum of all balances equals the result of calling totalSupply().\r\n    // This is because, for any conversion function 'f()' that has non-zero rounding error,\r\n    // f(x0) + f(x1) + ... + f(xn) is not always equal to f(x0 + x1 + ... xn).\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event LogMonetaryPolicyUpdated(address monetaryPolicy);\r\n    event LogOBEthPairAdded(address OBEthUniswapPair);\r\n\r\n    bool private rebasePausedDeprecated;\r\n    bool private tokenPausedDeprecated;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    uint256 private constant DECIMALS = 9;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 965 * 10**3 * 10**DECIMALS;     // Initial Supply 596_000 \r\n   \r\n\r\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\r\n    // Use the highest value that fits in a uint256 for max granularity.\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);  // (2^128) - 1\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n\r\n    //Uniswap pair contract\r\n    address public _OBEthUniswapPair;\r\n\r\n    mapping(address => uint256) private _gonBalances;\r\n\r\n    // This is denominated in Fragments, because the gons-fragments conversion might change before\r\n    // it's fully paid.\r\n    mapping (address => mapping (address => uint256)) private _allowedFragments;\r\n\r\n    /**\r\n     * @param OBEthUniswapPair_ The address of the uniswap pair(OracleBase~eth) contract to sync liquiity.\r\n     */\r\n    function setOBEthPairAddress(address OBEthUniswapPair_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _OBEthUniswapPair = OBEthUniswapPair_;\r\n        emit LogOBEthPairAdded(_OBEthUniswapPair);\r\n    }\r\n\r\n    /**\r\n     * @dev Notifies Fragments contract about a new rebase cycle.\r\n     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\r\n     * @return The total number of fragments after the supply adjustment.\r\n     */\r\n    function rebase(uint256 epoch, int256 supplyDelta)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        if (supplyDelta < 0) {\r\n            _totalSupply = _totalSupply.sub(uint256(supplyDelta.abs()));\r\n        } else {\r\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n        }\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        // From this point forward, _gonsPerFragment is taken as the source of truth.\r\n        // We recalculate a new _totalSupply to be in agreement with the _gonsPerFragment\r\n        // conversion rate.\r\n        // This means our applied supplyDelta can deviate from the requested supplyDelta,\r\n        // but this deviation is guaranteed to be < (_totalSupply^2)/(TOTAL_GONS - _totalSupply).\r\n        //\r\n        // In the case of _totalSupply <= MAX_UINT128 (our current supply cap), this\r\n        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\r\n        // ever increased, it must be re-included.\r\n        // _totalSupply = TOTAL_GONS.div(_gonsPerFragment)\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n        \r\n        //\r\n        ISync(_OBEthUniswapPair).sync();   // Uniswap ETH-OB Pair\r\n\r\n        return _totalSupply;\r\n    }\r\n\r\n    function tokenInitialize(address owner_)\r\n        internal\r\n    {\r\n        ERC20Detailed.initialize(\"ORACLEBASE\", \"OB\", uint8(DECIMALS));\r\n        Ownable.initialize(owner_);\r\n\r\n        rebasePausedDeprecated = false;\r\n        tokenPausedDeprecated = false;\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[owner_] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        emit Transfer(address(0x0), owner_, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @return The total number of fragments.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @param who The address to query.\r\n     * @return The balance of the specified address.\r\n     */\r\n    function balanceOf(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     * @return True on success, false otherwise.\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        uint256 gonValue = value.mul(_gonsPerFragment);\r\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\r\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\r\n     * @param owner_ The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @return The number of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner_, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param from The address you want to send tokens from.\r\n     * @param to The address you want to transfer to.\r\n     * @param value The amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value)\r\n        external\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\r\n\r\n        uint256 gonValue = value.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\r\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\n     * msg.sender. This method is included for ERC20 compatibility.\r\n     * increaseAllowance and decreaseAllowance should be used instead.\r\n     * Changing an allowance with this method brings the risk that someone may transfer both\r\n     * the old and the new allowance - if they are both greater than zero - if a transfer\r\n     * transaction is mined before the later approve() call is mined.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\r\n     * This method should be used instead of approve() to avoid the double approval vulnerability\r\n     * described above.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] =\r\n            _allowedFragments[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Median Oracle\r\n *\r\n * @notice Provides a value onchain that's aggregated from a whitelisted set of\r\n *         providers.\r\n */\r\ncontract TargetPriceOracle is Ownable {\r\n    \r\n    uint256 public currentMarketPrice;\r\n    /**\r\n     * @notice Pushes a targetPrice\r\n     * @param currentMarketPrice_ is expected to be 18 decimal fixed point number in WEI\r\n     */\r\n    function pushTargetReport(uint256 currentMarketPrice_) external onlyOwner\r\n    {\r\n        //\r\n        currentMarketPrice = currentMarketPrice_;\r\n    }\r\n\r\n    /**\r\n    * @return AggregatedValue: return the reported values.\r\n    *         valid: Boolean indicating an aggregated value was computed successfully.\r\n    */\r\n    function getData()\r\n        public\r\n        view\r\n        returns (uint256, bool)\r\n    {\r\n        \r\n        return (currentMarketPrice, true);\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Median Oracle\r\n *\r\n * @notice Provides a value onchain that's aggregated from a whitelisted set of\r\n *         providers.\r\n */\r\ncontract MarketPriceOracle is Ownable {\r\n    \r\n    uint256 public currentMarketPrice;\r\n    /**\r\n     * @notice Pushes a targetPrice\r\n     * @param currentMarketPrice_ is expected to be 18 decimal fixed point number in WEI\r\n     */\r\n    function pushMarketReport(uint256 currentMarketPrice_) external onlyOwner\r\n    {\r\n        //\r\n        currentMarketPrice = currentMarketPrice_;\r\n    }\r\n\r\n    /**\r\n    * @return AggregatedValue: return the reported values.\r\n    *         valid: Boolean indicating an aggregated value was computed successfully.\r\n    */\r\n    function getData()\r\n        public\r\n        view\r\n        returns (uint256, bool)\r\n    {\r\n        return (currentMarketPrice, true);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title uFragments Monetary Supply Policy\r\n * @dev This is an implementation of the uFragments Ideal Money protocol.\r\n *      uFragments operates symmetrically on expansion and contraction. It will both split and\r\n *      combine coins to maintain a stable unit price.\r\n *\r\n *      This component regulates the token supply of the uFragments ERC20 token in response to\r\n *      market oracles.\r\n */\r\ncontract UFragmentsPolicy is Ownable, TargetPriceOracle, MarketPriceOracle, OracleBase {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using UInt256Lib for uint256;\r\n\r\n    event LogRebase(\r\n        uint256 indexed epoch,\r\n        uint256 exchangeRate,\r\n        uint256 cpi,\r\n        int256 requestedSupplyAdjustment,\r\n        uint256 timestampSec\r\n    );\r\n\r\n    // If the current exchange rate is within this fractional distance from the target, no supply\r\n    // update is performed. Fixed point number--same format as the rate.\r\n    // (ie) abs(rate - targetRate) / targetRate < deviationThreshold, then no supply change.\r\n    // DECIMALS Fixed point number.\r\n    uint256 public deviationThreshold;\r\n    \r\n    // The rebase lag parameter, used to dampen the applied supply adjustment by 1 / rebaseLag\r\n    // Check setRebaseLag comments for more details.\r\n    // Natural number, no decimal places.\r\n    uint256 public rebaseLag;\r\n\r\n    // More than this much time must pass between rebase operations.\r\n    uint256 public minRebaseTimeIntervalSec;\r\n\r\n    // Block timestamp of last rebase operation\r\n    uint256 public lastRebaseTimestampSec;\r\n\r\n    // The rebase window begins this many seconds into the minRebaseTimeInterval period.\r\n    // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\r\n    uint256 public rebaseWindowOffsetSec;\r\n\r\n    // The length of the time window where a rebase operation is allowed to execute, in seconds.\r\n    uint256 public rebaseWindowLengthSec;\r\n\r\n    // The number of rebase cycles since inception\r\n    uint256 public epoch;\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n\r\n    // Due to the expression in computeSupplyDelta(), MAX_RATE * MAX_SUPPLY must fit into an int256.\r\n    // Both are 18 decimals fixed point numbers.\r\n    uint256 private constant MAX_RATE = 10**6 * 10**DECIMALS;\r\n    // MAX_SUPPLY = MAX_INT256 / MAX_RATE\r\n    uint256 private constant MAX_SUPPLY = ~(uint256(1) << 255) / MAX_RATE;\r\n    \r\n    /**\r\n     * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\r\n     *\r\n     * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\r\n     *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\r\n     *      and targetRate is TargetPriceOracleRate / baseCpi\r\n     */\r\n     \r\n    // uint256 public supplyDelta;\r\n    // uint256 public exchangeRate;\r\n    // int256 public targetRate ;\r\n    uint256 public priceChange ;\r\n    \r\n    int256 public supplyDeltaNew;\r\n\r\n    function policyRebase() internal  {\r\n        require(inRebaseWindow());\r\n\r\n        // This comparison also ensures there is no reentrancy.\r\n        require(lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now);\r\n\r\n        // Snap the rebase time to the start of this window.\r\n        lastRebaseTimestampSec = now.sub(\r\n             now.mod(minRebaseTimeIntervalSec)).add(rebaseWindowOffsetSec);\r\n\r\n        epoch = epoch.add(1);\r\n\r\n        uint256 targetRate;\r\n        bool targetRateValid;\r\n        (targetRate, targetRateValid) = TargetPriceOracle.getData();\r\n        require(targetRateValid);\r\n        \r\n        uint256 exchangeRate;\r\n        bool rateValid;\r\n        \r\n        (exchangeRate, rateValid) = MarketPriceOracle.getData();                     // fetch exchange rate in ETH\r\n        require(rateValid);\r\n\r\n        if (exchangeRate > MAX_RATE) {\r\n            exchangeRate = MAX_RATE;\r\n        }\r\n        \r\n        //\r\n        int256 supplyDelta = computeSupplyDelta(exchangeRate, targetRate);\r\n\r\n        // Apply the Dampening factor.\r\n        supplyDelta = supplyDelta.div(rebaseLag.toInt256Safe());\r\n\r\n        if (supplyDelta > 0 && OracleBase.totalSupply().add(uint256(supplyDelta)) > MAX_SUPPLY) {\r\n            supplyDelta = (MAX_SUPPLY.sub(OracleBase.totalSupply())).toInt256Safe();\r\n        }\r\n\r\n        uint256 supplyAfterRebase = OracleBase.rebase(epoch, supplyDelta);\r\n        assert(supplyAfterRebase <= MAX_SUPPLY);\r\n        emit LogRebase(epoch, exchangeRate, targetRate, supplyDelta, now);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the deviation threshold fraction. If the exchange rate given by the market\r\n     *         oracle is within this fractional distance from the targetRate, then no supply\r\n     *         modifications are made. DECIMALS fixed point number.\r\n     * @param deviationThreshold_ The new exchange rate threshold fraction.\r\n     */\r\n    function setDeviationThreshold(uint256 deviationThreshold_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        deviationThreshold = deviationThreshold_;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the rebase lag parameter.\r\n               It is used to dampen the applied supply adjustment by 1 / rebaseLag\r\n               If the rebase lag R, equals 1, the smallest value for R, then the full supply\r\n               correction is applied on each rebase cycle.\r\n               If it is greater than 1, then a correction of 1/R of is applied on each rebase.\r\n     * @param rebaseLag_ The new rebase lag parameter.\r\n     */\r\n    function setRebaseLag(uint256 rebaseLag_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(rebaseLag_ > 0);\r\n        rebaseLag = rebaseLag_;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the parameters which control the timing and frequency of\r\n     *         rebase operations.\r\n     *         a) the minimum time period that must elapse between rebase cycles.\r\n     *         b) the rebase window offset parameter.\r\n     *         c) the rebase window length parameter.\r\n     * @param minRebaseTimeIntervalSec_ More than this much time must pass between rebase\r\n     *        operations, in seconds.\r\n     * @param rebaseWindowOffsetSec_ The number of seconds from the beginning of\r\n              the rebase interval, where the rebase window begins.\r\n     * @param rebaseWindowLengthSec_ The length of the rebase window in seconds.\r\n     */\r\n    function setRebaseTimingParameters(\r\n        uint256 minRebaseTimeIntervalSec_,\r\n        uint256 rebaseWindowOffsetSec_,\r\n        uint256 rebaseWindowLengthSec_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(minRebaseTimeIntervalSec_ > 0);\r\n        require(rebaseWindowOffsetSec_ < minRebaseTimeIntervalSec_);\r\n\r\n        minRebaseTimeIntervalSec = minRebaseTimeIntervalSec_;\r\n        rebaseWindowOffsetSec = rebaseWindowOffsetSec_;\r\n        rebaseWindowLengthSec = rebaseWindowLengthSec_;\r\n    }\r\n\r\n    /**\r\n     * @dev ZOS upgradable contract initialization method.\r\n     *      It is called at the time of contract creation to invoke parent class initializers and\r\n     *      initialize the contract's state variables.\r\n     */\r\n    function policyInitialize(address _owner)\r\n        internal\r\n    {\r\n        // deviationThreshold       =   0.05e18 = 5e16\r\n        deviationThreshold          =   25 * 10 ** (DECIMALS-3);        // 50000000000000000\r\n        rebaseLag                   =   10;\r\n        minRebaseTimeIntervalSec    =   1 days;\r\n        rebaseWindowOffsetSec       =   72000;                          // 8PM UTC\r\n        rebaseWindowLengthSec       =   15 minutes;\r\n        lastRebaseTimestampSec      =   0;\r\n        epoch = 0;\r\n        OracleBase.tokenInitialize(_owner);\r\n    }\r\n\r\n    /**\r\n     * @return If the latest block timestamp is within the rebase time window it, returns true.\r\n     *         Otherwise, returns false.\r\n     */\r\n    function inRebaseWindow() public view returns (bool) {\r\n        return (\r\n            now.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec &&\r\n            now.mod(minRebaseTimeIntervalSec) < (rebaseWindowOffsetSec.add(rebaseWindowLengthSec))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return Computes the total supply adjustment in response to the exchange rate\r\n     *         and the targetRate.\r\n     */\r\n    function computeSupplyDelta(uint256 rate, uint256 targetRate)\r\n        private\r\n        view\r\n        returns (int256)\r\n    {\r\n        if (withinDeviationThreshold(rate, targetRate)) {\r\n            return 0;\r\n        }\r\n\r\n        // supplyDelta = totalSupply * (rate - targetRate) / targetRate\r\n        int256 targetRateSigned = targetRate.toInt256Safe();\r\n        return OracleBase.totalSupply().toInt256Safe()\r\n            .mul(rate.toInt256Safe().sub(targetRateSigned))\r\n            .div(targetRateSigned);\r\n    }\r\n\r\n    /**\r\n     * @param rate The current exchange rate, an 18 decimal fixed point number.\r\n     * @param targetRate The target exchange rate, an 18 decimal fixed point number.\r\n     * @return If the rate is within the deviation threshold from the target rate, returns true.\r\n     *         Otherwise, returns false.\r\n     */\r\n    function withinDeviationThreshold(uint256 rate, uint256 targetRate)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 absoluteDeviationThreshold = targetRate.mul(deviationThreshold)\r\n            .div(10 ** DECIMALS);\r\n\r\n        return (rate >= targetRate && rate.sub(targetRate) < absoluteDeviationThreshold)\r\n            || (rate < targetRate && targetRate.sub(rate) < absoluteDeviationThreshold);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title Orchestrator\r\n * @notice The orchestrator is the main entry point for rebase operations. It coordinates the policy\r\n * actions with external consumers.\r\n */\r\ncontract Orchestrator is Ownable, UFragmentsPolicy {\r\n\r\n    struct Transaction {\r\n        bool enabled;\r\n        address destination;\r\n        bytes data;\r\n    }\r\n\r\n    event TransactionFailed(address indexed destination, uint index, bytes data);\r\n\r\n    // Stable ordering is not guaranteed.\r\n    Transaction[] public transactions;\r\n\r\n    constructor() public {\r\n        Ownable.initialize(msg.sender);\r\n        UFragmentsPolicy.policyInitialize(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Main entry point to initiate a rebase operation.\r\n     *         The Orchestrator calls rebase on the policy and notifies downstream applications.\r\n     *         Contracts are guarded from calling, to avoid flash loan attacks on liquidity\r\n     *         providers.\r\n     *         If a transaction in the transaction list reverts, it is swallowed and the remaining\r\n     *         transactions are executed.\r\n     */\r\n    function rebase()\r\n        external\r\n    {\r\n        require(msg.sender == tx.origin);  // solhint-disable-line avoid-tx-origin\r\n\r\n        UFragmentsPolicy.policyRebase();\r\n\r\n        for (uint i = 0; i < transactions.length; i++) {\r\n            Transaction storage t = transactions[i];\r\n            if (t.enabled) {\r\n                bool result =\r\n                    externalCall(t.destination, t.data);\r\n                if (!result) {\r\n                    emit TransactionFailed(t.destination, i, t.data);\r\n                    revert(\"Transaction Failed\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a transaction that gets called for a downstream receiver of rebases\r\n     * @param destination Address of contract destination\r\n     * @param data Transaction data payload\r\n     */\r\n    function addTransaction(address destination, bytes data)\r\n        external\r\n        onlyOwner\r\n    {\r\n        transactions.push(Transaction({\r\n            enabled: true,\r\n            destination: destination,\r\n            data: data\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * @param index Index of transaction to remove.\r\n     *              Transaction ordering may have changed since adding.\r\n     */\r\n    function removeTransaction(uint index)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(index < transactions.length, \"index out of bounds\");\r\n\r\n        if (index < transactions.length - 1) {\r\n            transactions[index] = transactions[transactions.length - 1];\r\n        }\r\n\r\n        transactions.length--;\r\n    }\r\n\r\n    /**\r\n     * @param index Index of transaction. Transaction ordering may have changed since adding.\r\n     * @param enabled True for enabled, false for disabled.\r\n     */\r\n    function setTransactionEnabled(uint index, bool enabled)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(index < transactions.length, \"index must be in range of stored tx list\");\r\n        transactions[index].enabled = enabled;\r\n    }\r\n\r\n    /**\r\n     * @return Number of transactions, both enabled and disabled, in transactions list.\r\n     */\r\n    function transactionsSize()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return transactions.length;\r\n    }\r\n\r\n    /**\r\n     * @dev wrapper to call the encoded transactions on downstream consumers.\r\n     * @param destination Address of destination contract.\r\n     * @param data The encoded data payload.\r\n     * @return True on success\r\n     */\r\n    function externalCall(address destination, bytes data)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bool result;\r\n        assembly {  // solhint-disable-line no-inline-assembly\r\n            // \"Allocate\" memory for output\r\n            // (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let outputAddress := mload(0x40)\r\n\r\n            // First 32 bytes are the padded length of data, so exclude that\r\n            let dataAddress := add(data, 32)\r\n\r\n            result := call(\r\n                // 34710 is the value that solidity is currently emitting\r\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB)\r\n                // + callValueTransferGas (9000) + callNewAccountGas\r\n                // (25000, in case the destination address does not exist and needs creating)\r\n                sub(gas, 34710),\r\n\r\n\r\n                destination,\r\n                0, // transfer value in wei\r\n                dataAddress,\r\n                mload(data),  // Size of the input, in bytes. Stored in position 0 of the array.\r\n                outputAddress,\r\n                0  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"minRebaseTimeIntervalSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMarketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inRebaseWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minRebaseTimeIntervalSec_\",\"type\":\"uint256\"},{\"name\":\"rebaseWindowOffsetSec_\",\"type\":\"uint256\"},{\"name\":\"rebaseWindowLengthSec_\",\"type\":\"uint256\"}],\"name\":\"setRebaseTimingParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currentMarketPrice_\",\"type\":\"uint256\"}],\"name\":\"pushTargetReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rebaseLag_\",\"type\":\"uint256\"}],\"name\":\"setRebaseLag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRebaseTimestampSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currentMarketPrice_\",\"type\":\"uint256\"}],\"name\":\"pushMarketReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"deviationThreshold_\",\"type\":\"uint256\"}],\"name\":\"setDeviationThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseLag\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransactionEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseWindowOffsetSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionsSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyDeltaNew\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseWindowLengthSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"OBEthUniswapPair_\",\"type\":\"address\"}],\"name\":\"setOBEthPairAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"enabled\",\"type\":\"bool\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deviationThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_OBEthUniswapPair\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cpi\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestedSupplyAdjustment\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"timestampSec\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"monetaryPolicy\",\"type\":\"address\"}],\"name\":\"LogMonetaryPolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"OBEthUniswapPair\",\"type\":\"address\"}],\"name\":\"LogOBEthPairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "Orchestrator", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5201df1773cd7e8bfe940b57deebd98559780a64523257cd3888aed7a8f8884e"}