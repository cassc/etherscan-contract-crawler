{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ERC1404TokenMinKYCv13.flattened.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\nabstract contract IERC1404 {\\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\\n    /// @param from Sending address\\n    /// @param to Receiving address\\n    /// @param value Amount of tokens being transferred\\n    /// @return Code by which to reference message for rejection reasoning\\n    /// @dev Overwrite with your custom transfer restriction logic\\n    function  detectTransferRestriction (address from, address to, uint256 value) public virtual view returns (uint8);\\n\\n    /// @notice Returns a human-readable message for a given restriction code\\n    /// @param restrictionCode Identifier for looking up a message\\n    /// @return Text showing the restriction's reasoning\\n    /// @dev Overwrite with your custom message and restrictionCode handling\\n    function  messageForTransferRestriction  (uint8 restrictionCode) public virtual view returns (string memory);\\n}\\n\\ncontract ERC1404TokenMinKYCv13 is ERC20, Ownable, IERC1404 {\\n\\n\\t// Set receive and send restrictions on investors\\n\\t// date is Linux Epoch datetime\\n\\t// Default values is 0 which means investor is not whitelisted\\n    mapping (address => uint256) private _receiveRestriction;  \\n\\tmapping (address => uint256) private _sendRestriction;\\n\\n\\t// These addresses act as whitelist authority and can call modifyKYCData\\n\\t// There is possibility that issuer may let third party like Exchange to control \\n\\t// whitelisting addresses \\n    mapping (address => bool) private _whitelistControlAuthority;\\n\\n\\tevent TransferRestrictionDetected( address indexed from, address indexed to, string message, uint8 errorCode );\\n\\tevent BurnTokens(address indexed account, uint256 amount);\\n\\tevent MintTokens(address indexed account, uint256 amount);\\n\\tevent KYCDataForUserSet (address indexed account, uint256 receiveRestriction, uint256 sendRestriction);\\n    event ShareCertificateReset (string _ShareCertificate);\\n    event CompanyHomepageReset (string _CompanyHomepage);\\n    event CompanyLegalDocsReset (string _CompanyLegalDocs);\\n\\tevent AllowedInvestorsReset(uint64 _allowedInvestors);\\n\\tevent HoldingPeriodReset(uint64 _tradingHoldingPeriod);\\n\\tevent WhitelistAuthorityStatusSet(address user);\\n\\tevent WhitelistAuthorityStatusRemoved(address user);\\n\\tevent TransferFrom( address indexed spender, address indexed sender, address indexed recipient, uint256 amount );\\n\\tevent IssuerForceTransfer (address indexed from, address indexed to, uint256 amount);\\n\\n\\tstring public constant version = \\\"1.3\\\";\\n\\tstring public constant IssuancePlatform = \\\"DigiShares\\\";\\n\\tstring public constant issuanceProtocol = \\\"ERC-1404\\\";\\n\\tstring public ShareCertificate;\\n\\tstring public CompanyHomepage;\\n\\tstring public CompanyLegalDocs;\\n\\n\\t// These variables control how many investors can have non-zero token balance\\n\\t// if allowedInvestors = 0 then there is no limit of number of investors who can \\n\\t// hold non-zero balance\\n\\tuint8 private constant ANY_NUMBER_OF_TOKEN_HOLDERS_ALLOWED = 0; \\n\\tuint8 private immutable _decimals;\\t\\n\\tuint64 public currentTotalInvestors = 0;\\t\\t\\n\\tuint64 public allowedInvestors;\\n\\n\\t// Holding period in EpochTime, if set in future then it will stop \\n\\t// all transfers between investors\\n\\tuint64 public tradingHoldingPeriod = 1;\\n\\n\\t// Transfer Restriction Codes and corresponding error message in _messageForTransferRestriction\\n\\tuint8 private constant NO_TRANSFER_RESTRICTION_FOUND = 0;\\n\\tuint8 private constant MAX_ALLOWED_INVESTORS_EXCEED = 1;\\n\\tuint8 private constant TRANSFERS_DISABLED = 2;\\n\\tuint8 private constant TRANSFER_VALUE_CANNOT_ZERO = 3;\\n\\tuint8 private constant SENDER_NOT_WHITELISTED_OR_BLOCKED = 4;\\n\\tuint8 private constant RECEIVER_NOT_WHITELISTED_OR_BLOCKED = 5;\\n\\tuint8 private constant SENDER_UNDER_HOLDING_PERIOD = 6;\\n\\tuint8 private constant RECEIVER_UNDER_HOLDING_PERIOD = 7;\\n\\tstring[] private _messageForTransferRestriction = [\\n\\t\\t\\\"No transfer restrictions found\\\", \\n\\t\\t\\\"Max allowed addresses with non-zero restriction is in place, this transfer will exceed this limitation\\\", \\n\\t\\t\\\"All transfers are disabled because Holding Period is not yet expired\\\", \\n\\t\\t\\\"Zero transfer amount not allowed\\\",\\n\\t\\t\\\"Sender is not whitelisted or blocked\\\",\\n\\t\\t\\\"Receiver is not whitelisted or blocked\\\",\\n\\t\\t\\\"Sender is whitelisted but is not eligible to send tokens and under holding period (KYC time restriction)\\\",\\n\\t\\t\\\"Receiver is whitelisted but is not yet eligible to receive tokens in his wallet (KYC time restriction)\\\"\\n\\t];\\t\\n\\n\\tconstructor(\\n\\t\\tuint256 _initialSupply, \\n\\t\\tstring memory _name,  \\n\\t\\tstring memory _symbol, \\n\\t\\tuint64 _allowedInvestors, \\n\\t\\tuint8 _decimalsPlaces, \\n\\t\\tstring memory _ShareCertificate, \\n\\t\\tstring memory _CompanyHomepage, \\n\\t\\tstring memory _CompanyLegalDocs, \\n\\t\\taddress _atomicSwapContractAddress,\\n\\t\\tuint64  _tradingHoldingPeriod\\n\\t) ERC20(_name, _symbol)  {\\n\\n\\t\\t\\taddress tmpSenderAddress = msg.sender;\\n\\n\\t\\t\\t_decimals = _decimalsPlaces;\\n\\t\\t\\ttradingHoldingPeriod = _tradingHoldingPeriod;\\n\\n\\t\\t\\t// These variables set EPOCH time    1 = 1 January 1970\\n\\t\\t\\t_receiveRestriction[tmpSenderAddress] = 1;\\n\\t\\t\\t_sendRestriction[tmpSenderAddress] = 1;\\n\\t\\t\\t_receiveRestriction[_atomicSwapContractAddress] = 1;\\n\\t\\t\\t_sendRestriction[_atomicSwapContractAddress] = 1;\\n\\n\\t\\t\\tallowedInvestors = _allowedInvestors;\\n\\n\\t\\t\\t// add message sender to whitelist authority list\\n\\t\\t\\t_whitelistControlAuthority[tmpSenderAddress] = true;\\n\\n\\t\\t\\tShareCertificate = _ShareCertificate;\\n\\t\\t\\tCompanyHomepage = _CompanyHomepage;\\n\\t\\t\\tCompanyLegalDocs = _CompanyLegalDocs;\\n\\n\\t\\t\\t_mint(tmpSenderAddress , _initialSupply);\\n\\t\\t\\temit MintTokens(tmpSenderAddress, _initialSupply);\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------\\n\\t// Modifiers for this contract \\n\\t// ------------------------------------------------------------------------\\n    modifier onlyWhitelistControlAuthority () {\\n\\n\\t  \\trequire(_whitelistControlAuthority[msg.sender] == true, \\\"Only authorized addresses can control whitelisting of holder addresses\\\");\\n        _;\\n\\n    }\\n\\n    modifier notRestricted (\\n\\t\\taddress from, \\n\\t\\taddress to, \\n\\t\\tuint256 value \\n\\t) {\\n\\n        uint8 restrictionCode = detectTransferRestriction(from, to, value);\\n\\t\\tif( restrictionCode != NO_TRANSFER_RESTRICTION_FOUND ) {\\n\\n\\t\\t\\tstring memory errorMessage = messageForTransferRestriction(restrictionCode);\\n\\t\\t\\temit TransferRestrictionDetected( from, to, errorMessage, restrictionCode );\\n        \\trevert(errorMessage);\\n\\n\\t\\t} else \\n        \\t_;\\n\\n    }\\n\\n\\t// ERC20 interface\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\t\\n\\n    function mint (address account, uint256 amount)\\t\\t\\n    external        \\n\\tOwnable.onlyOwner\\n    returns (bool)\\n    {\\n\\t\\trequire ( account != address(0), \\\"Minting address cannot be zero\\\");\\n\\t\\trequire ( _receiveRestriction[account] != 0, \\\"Address is not yet whitelisted by issuer\\\" );\\n\\t\\trequire ( amount > 0, \\\"Zero amount cannot be minted\\\" );\\n\\t\\t\\n\\t\\t// This is special case while minting tokens. if issuer is trying to mint to a address while max token holder restriction\\n\\t\\t// is in place and smart contract already has max tpken holders then this will revert this transaction as it will result in\\n\\t\\t// currentTotalInvestors getting larger than allowedInvestors. The issuer account is exempted from this condition as\\n\\t\\t// issuer account is not counted in currentTotalInvestors\\n\\t\\tif( \\n\\t\\t\\t( account != Ownable.owner() ) &&       // issuer account is exempted from this condition\\n\\t\\t\\t( ERC20.balanceOf(account) == 0 ) &&    // account has zero balance so it will increase currentTotalInvestors\\n\\t\\t\\t( allowedInvestors != ANY_NUMBER_OF_TOKEN_HOLDERS_ALLOWED ) &&    // max number of token holder restriction is in place \\n\\t\\t\\t( currentTotalInvestors + 1 ) > allowedInvestors ) // make sure minting to account with 0 balance do not exceed allowedInvestors\\n\\t\\t{\\n\\t\\t\\trevert (\\\"Minting not allowed to this address as allowed token holder restriction is in place and minting will increase the allowed limit\\\");\\n\\t\\t}\\n\\n\\t\\t// minting will sure increase currentTotalInvestors if address balance is 0\\n\\t\\tif( ERC20.balanceOf(account) == 0 && account != Ownable.owner() ) {\\n\\t\\t\\tcurrentTotalInvestors = currentTotalInvestors + 1;\\n\\t\\t}\\n\\n\\t\\tERC20._mint(account, amount);\\t\\t \\n\\t\\temit MintTokens(account, amount);\\n\\t\\treturn true;\\n    }\\n\\n    function burn (address account, uint256 amount)\\n\\texternal     \\n\\tOwnable.onlyOwner\\n    returns (bool)\\n    {\\n\\t\\trequire( account != address(0), \\\"Burn address cannot be zero\\\");\\n\\t\\trequire ( amount > 0, \\\"Zero amount cannot be burned\\\" );\\t\\t\\n\\n\\t\\tERC20._burn(account, amount);\\n\\n\\t\\t// burning will decrease currentTotalInvestors if address balance becomes 0\\n\\t\\tif( ERC20.balanceOf(account) == 0 && account != Ownable.owner() ) {\\n\\t\\t\\tcurrentTotalInvestors = currentTotalInvestors - 1;\\n\\t\\t}\\n\\n\\t\\t emit BurnTokens(account, amount);\\t\\t \\n\\t\\t return true;\\n    }\\n\\n\\t// ------------------------------------------------------------------------\\n\\t// Token Links and Document information management \\n\\t// ------------------------------------------------------------------------\\n    function resetShareCertificate(\\n\\t\\tstring calldata _ShareCertificate\\n\\t) \\n\\texternal \\n\\tOwnable.onlyOwner {\\n\\n\\t\\t ShareCertificate = _ShareCertificate;\\n\\t\\t emit ShareCertificateReset (_ShareCertificate);\\n\\n    }\\n\\n    function resetCompanyHomepage(\\n\\t\\tstring calldata _CompanyHomepage\\n\\t) \\n\\texternal \\n\\tOwnable.onlyOwner {\\n\\n\\t\\t CompanyHomepage = _CompanyHomepage;\\n\\t\\t emit CompanyHomepageReset (_CompanyHomepage);\\n\\n    }\\n\\t\\n    function resetCompanyLegalDocs(\\n\\t\\tstring calldata _CompanyLegalDocs\\n\\t) \\n\\texternal \\n\\tOwnable.onlyOwner {\\n\\n\\t\\tCompanyLegalDocs = _CompanyLegalDocs;\\n\\t\\temit CompanyLegalDocsReset (_CompanyLegalDocs);\\n\\n    }\\n\\n\\t// --------------------------------------------------------------------------------------\\n\\t// Manage number of addresses who can hold non-zero balance and holding period management\\n\\t// --------------------------------------------------------------------------------------\\n\\t// _allowedInvestors = 0    No limit on number of investors (or number of addresses with non-zero balance)         \\n\\t// _allowedInvestors > 0    only X number of addresses can have non zero balance \\n    function resetAllowedInvestors(\\n\\t\\tuint64 _allowedInvestors\\n\\t) \\n\\texternal \\n\\tOwnable.onlyOwner {\\n\\n\\t\\tif( _allowedInvestors != ANY_NUMBER_OF_TOKEN_HOLDERS_ALLOWED && _allowedInvestors < currentTotalInvestors ) {\\n\\t\\t\\trevert( \\\"Allowed Token holders cannot be less than current token holders with non-zero balance\\\");\\n\\t\\t}\\n\\n\\t\\tallowedInvestors = _allowedInvestors;\\n\\t\\temit AllowedInvestorsReset(_allowedInvestors);\\n\\t\\t\\n    }\\n\\n    function setTradingHoldingPeriod (\\n\\t\\tuint64 _tradingHoldingPeriod\\n\\t) \\n\\texternal \\n\\tOwnable.onlyOwner {\\n\\n\\t\\t tradingHoldingPeriod = _tradingHoldingPeriod;\\n\\t\\t emit HoldingPeriodReset(_tradingHoldingPeriod);\\n\\n    }\\n\\n\\t//-----------------------------------------------------------------------\\n    // Manage whitelist authority and KYC status\\n\\t//-----------------------------------------------------------------------\\n\\t\\n\\tfunction setWhitelistAuthorityStatus(\\n\\t\\taddress user\\n\\t) \\n\\texternal \\n\\tOwnable.onlyOwner {\\n\\n\\t\\t_whitelistControlAuthority[user] = true;\\n\\t\\temit WhitelistAuthorityStatusSet(user);\\n\\n\\t}\\n\\n\\tfunction removeWhitelistAuthorityStatus(\\n\\t\\taddress user\\n\\t) \\n\\texternal \\n\\tOwnable.onlyOwner {\\n\\n\\t\\tdelete _whitelistControlAuthority[user];\\n\\t\\temit WhitelistAuthorityStatusRemoved(user);\\n\\n\\t}\\t\\n\\n\\tfunction getWhitelistAuthorityStatus(\\n\\t\\taddress user\\n\\t) \\n\\texternal \\n\\tview\\n\\treturns (bool) {\\n\\n\\t\\t return _whitelistControlAuthority[user];\\n\\n\\t}\\t\\n\\t\\n\\n  \\t// Set Receive and Send restrictions on addresses. Both values are EPOCH time\\n\\tfunction modifyKYCData (\\n\\t\\taddress account, \\n\\t\\tuint256 receiveRestriction, \\n\\t\\tuint256 sendRestriction \\n\\t) \\n\\texternal \\n\\tonlyWhitelistControlAuthority { \\n\\t\\tsetupKYCDataForUser( account, receiveRestriction, sendRestriction );\\n\\t}\\n\\n\\tfunction bulkWhitelistWallets (\\n\\t\\taddress[] calldata account, \\n\\t\\tuint256 receiveRestriction, \\n\\t\\tuint256 sendRestriction \\n\\t) \\n\\texternal \\n\\tonlyWhitelistControlAuthority { \\n\\n\\t\\tif(account.length > 50) {\\n\\t\\t\\trevert (\\\"Bulk whitelisting more than 50 addresses is not allowed\\\");\\n\\t\\t}\\n\\n\\t\\tfor (uint i=0; i<account.length; i++) {\\n\\t\\t\\tsetupKYCDataForUser( account[i], receiveRestriction, sendRestriction );\\t\\t\\t\\n\\t\\t}\\t\\t\\n\\n\\t}\\n\\n\\tfunction setupKYCDataForUser (\\n\\t\\taddress account, \\n\\t\\tuint256 receiveRestriction, \\n\\t\\tuint256 sendRestriction\\n\\t) internal {\\t\\n\\n\\t\\t_receiveRestriction[account] = receiveRestriction;\\n\\t\\t_sendRestriction[account] = sendRestriction;\\t\\t\\n\\t\\temit KYCDataForUserSet (account, receiveRestriction, sendRestriction);\\n\\n\\t}\\n\\n\\tfunction getKYCData ( \\n\\t\\taddress user \\n\\t) \\n\\texternal \\n\\tview\\n\\treturns ( uint256, uint256 ) {\\n\\n\\t\\treturn (_receiveRestriction[user] , _sendRestriction[user] );\\n\\n\\t}\\n\\t//-----------------------------------------------------------------------\\n\\n\\t//-----------------------------------------------------------------------\\n\\t// These are ERC1404 interface implementations \\n\\t//-----------------------------------------------------------------------\\n\\n    function detectTransferRestriction (address _from, address _to, uint256 value) \\n\\toverride\\n\\tpublic \\n\\tview \\n\\treturns ( uint8 status )  {\\t\\n\\n\\t      \\t// check if holding period is in effect on overall transfers and sender is not owner. \\n\\t\\t\\t// only owner is allowed to transfer under holding period\\n\\t\\t  \\tif(block.timestamp < tradingHoldingPeriod && _from != Ownable.owner()) {\\n\\t\\t\\t \\treturn TRANSFERS_DISABLED;   \\n\\t\\t\\t}\\n\\n\\t\\t  \\tif( value < 1) {\\n\\t\\t  \\t  \\treturn TRANSFER_VALUE_CANNOT_ZERO;   \\n\\t\\t\\t}\\n\\n\\t\\t  \\tif( _sendRestriction[_from] == 0 ) {\\n\\t\\t\\t\\treturn SENDER_NOT_WHITELISTED_OR_BLOCKED;   // Sender is not whitelisted or blocked\\n\\t\\t\\t}\\n\\n\\t\\t  \\tif( _receiveRestriction[_to] == 0 ) {\\n\\t\\t\\t\\treturn RECEIVER_NOT_WHITELISTED_OR_BLOCKED;\\t// Receiver is not whitelisted or blocked\\n\\t\\t\\t}\\n\\n\\t\\t\\tif( _sendRestriction[_from] > block.timestamp ) {\\n\\t\\t\\t\\treturn SENDER_UNDER_HOLDING_PERIOD;\\t// Receiver is whitelisted but is not eligible to send tokens and still under holding period (KYC time restriction)\\n\\t\\t\\t}\\n\\n\\t\\t\\tif( _receiveRestriction[_to] > block.timestamp ) {\\n\\t\\t\\t\\treturn RECEIVER_UNDER_HOLDING_PERIOD;\\t// Receiver is whitelisted but is not yet eligible to receive tokens in his wallet (KYC time restriction)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Following conditions make sure number of token holders will stay within limit if max token holder restriction is in place\\n\\t\\t\\t// allowedInvestors = 0 means no restriction on number of token holders and is the default setting\\n\\t\\t\\tif(allowedInvestors == ANY_NUMBER_OF_TOKEN_HOLDERS_ALLOWED) {\\n\\t\\t\\t\\treturn NO_TRANSFER_RESTRICTION_FOUND;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif( ERC20.balanceOf(_to) > 0 || _to == Ownable.owner()) {\\n\\t\\t\\t\\t\\t// token can be transferred if the receiver already holding tokens and already counted in currentTotalInvestors\\n\\t\\t\\t\\t\\t// or receiver is issuer account. issuer/owner account do not count in currentTotalInvestors\\n\\t\\t\\t\\t\\treturn NO_TRANSFER_RESTRICTION_FOUND;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// if To address has zero balance then check this transfer do not exceed allowedInvestors as \\n\\t\\t\\t\\t\\t// this transfer will surely increase currentTotalInvestors\\n\\t\\t\\t\\t\\tif(  currentTotalInvestors < allowedInvestors  ) {\\n\\t\\t\\t\\t\\t\\t// currentTotalInvestors is within limits of allowedInvestors\\n\\t\\t\\t\\t\\t\\treturn NO_TRANSFER_RESTRICTION_FOUND;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// In this section currentTotalInvestors = allowedInvestors and no more transfers to new investors are allowed\\n\\t\\t\\t\\t\\t\\t// except following conditions \\n\\t\\t\\t\\t\\t\\t// 1. sender is sending his whole balance to another whitelisted investor regardless he has any balance or not\\n\\t\\t\\t\\t\\t\\t// 2. sender must not be owner/issuer\\n\\t\\t\\t\\t\\t\\t//    owner sending his whole balance to investor will exceed allowedInvestors restriction if currentTotalInvestors = allowedInvestors\\n\\t\\t\\t\\t\\t\\tif( ERC20.balanceOf(_from) == value && _from != Ownable.owner()) {    \\n\\t\\t\\t\\t\\t\\t\\treturn NO_TRANSFER_RESTRICTION_FOUND;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn MAX_ALLOWED_INVESTORS_EXCEED;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n    }\\n\\n    function messageForTransferRestriction (uint8 restrictionCode)\\n\\toverride\\n    public\\t\\n    view \\n\\treturns ( string memory message )\\n    {\\n\\n\\t\\tif(restrictionCode <= (_messageForTransferRestriction.length - 1) ) {\\n\\t\\t\\tmessage = _messageForTransferRestriction[restrictionCode];\\n\\t\\t} else {\\n\\t\\t\\tmessage = \\\"Error code is not defined\\\";\\n\\t\\t}\\n\\n    }\\n\\t//-----------------------------------------------------------------------\\n\\n\\t//-----------------------------------------------------------------------\\n\\t// Transfers\\n\\t//-----------------------------------------------------------------------\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) \\t\\n\\toverride\\n\\tpublic \\n\\tnotRestricted (msg.sender, recipient, amount)\\n\\treturns (bool) {\\n\\n\\t\\ttransferSharesBetweenInvestors ( msg.sender, recipient, amount, true );\\n\\t\\treturn true;\\n\\n    }\\n\\n    function transferFrom (\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) \\n\\tpublic\\n\\toverride\\n\\tnotRestricted (sender, recipient, amount)\\n\\treturns (bool)\\t{\\t\\n\\n\\t\\ttransferSharesBetweenInvestors ( sender, recipient, amount, false );\\n\\t\\temit TransferFrom( msg.sender, sender, recipient, amount );\\n\\t\\treturn true;\\n\\n    }\\n\\n\\t// Force transfer of token back to issuer\\n\\tfunction forceTransferToken (\\n        address from,\\n        uint256 amount\\n\\t) \\n\\tOwnable.onlyOwner\\n\\texternal \\n\\treturns (bool)  {\\n\\t\\t\\n\\t\\ttransferSharesBetweenInvestors ( from, Ownable.owner(), amount, true );\\n\\t\\temit IssuerForceTransfer (from, Ownable.owner(), amount);\\n\\t\\treturn true;\\n\\n\\t}\\n\\n\\t// Transfer tokens from one account to other\\n\\t// Also manage current number of token holders\\n\\tfunction transferSharesBetweenInvestors (\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n\\t\\tbool simpleTransfer\\t   // true = transfer,   false = transferFrom\\n\\t) \\n\\tinternal {\\n\\n\\t\\t// Transfer will surely increase currentTotalInvestors if recipient current balance is 0\\n\\t\\tif( ERC20.balanceOf(recipient) == 0 && recipient != Ownable.owner() ) {\\n\\t\\t\\tcurrentTotalInvestors = currentTotalInvestors + 1;\\n\\t\\t}\\n\\n\\t\\tif( simpleTransfer == true ) {\\n\\t\\t\\tERC20._transfer(sender, recipient, amount);\\n\\t\\t} else {\\n\\t\\t\\tERC20.transferFrom(sender, recipient, amount);\\n\\t\\t}\\n\\n\\t\\tif( ERC20.balanceOf(sender) == 0 && sender != Ownable.owner() ) {\\n\\t\\t\\tcurrentTotalInvestors = currentTotalInvestors - 1;\\t\\t\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\n/*\\n\\n\\tVersion 1.1\\n\\n\\t1. Forceful take over of token   ( forceTransferToken )\\n\\n\\t2. Bulk whitelisting  ( bulkWhitelistWallets )\\n\\n\\tVersion 1.2\\n\\n\\t1. Dedicated transfer restriction codes defined in detectTransferRestriction and their descriptions in messageForTransferRestriction\\n\\n\\t2. Events for multiple activities being performed  \\n\\n\\t3. tradingHoldingPeriod - Holding period has been implemented. Admin can setup a future date and all investor transfers will be disabled \\n\\ttill that date. Previous it was a boolean variable with true and false\\n\\n\\tVersion 1.3\\n\\n\\t1. Integration with openzeppelin library\\n\\t\\n\\t2. detectTransferRestriction  restructure\\n\\n*/\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_allowedInvestors\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_decimalsPlaces\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_ShareCertificate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_CompanyHomepage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_CompanyLegalDocs\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_atomicSwapContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tradingHoldingPeriod\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_allowedInvestors\",\"type\":\"uint64\"}],\"name\":\"AllowedInvestorsReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_CompanyHomepage\",\"type\":\"string\"}],\"name\":\"CompanyHomepageReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_CompanyLegalDocs\",\"type\":\"string\"}],\"name\":\"CompanyLegalDocsReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_tradingHoldingPeriod\",\"type\":\"uint64\"}],\"name\":\"HoldingPeriodReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssuerForceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveRestriction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendRestriction\",\"type\":\"uint256\"}],\"name\":\"KYCDataForUserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ShareCertificate\",\"type\":\"string\"}],\"name\":\"ShareCertificateReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"errorCode\",\"type\":\"uint8\"}],\"name\":\"TransferRestrictionDetected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WhitelistAuthorityStatusRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WhitelistAuthorityStatusSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CompanyHomepage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CompanyLegalDocs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IssuancePlatform\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ShareCertificate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedInvestors\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"receiveRestriction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendRestriction\",\"type\":\"uint256\"}],\"name\":\"bulkWhitelistWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalInvestors\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceTransferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getKYCData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWhitelistAuthorityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceProtocol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiveRestriction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendRestriction\",\"type\":\"uint256\"}],\"name\":\"modifyKYCData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeWhitelistAuthorityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_allowedInvestors\",\"type\":\"uint64\"}],\"name\":\"resetAllowedInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CompanyHomepage\",\"type\":\"string\"}],\"name\":\"resetCompanyHomepage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CompanyLegalDocs\",\"type\":\"string\"}],\"name\":\"resetCompanyLegalDocs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ShareCertificate\",\"type\":\"string\"}],\"name\":\"resetShareCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tradingHoldingPeriod\",\"type\":\"uint64\"}],\"name\":\"setTradingHoldingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setWhitelistAuthorityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingHoldingPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC1404TokenMinKYCv13", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000262f64000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002600000000000000000000000003cb6df9845af79ab7c2af9530da0b046bacb6cf900000000000000000000000000000000000000000000000000000000646de5c60000000000000000000000000000000000000000000000000000000000000007475245562035350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074752455620353500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b68747470733a2f2f696e766573746f722e636f72656573746174652e696f2f696e766573746f722f73686172652d63657274696669636174652f320000000000000000000000000000000000000000000000000000000000000000000000000d636f72656573746174652e696f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}