{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CerealTokenMigrator {\r\n    address public immutable DRM_TOKEN_ADDRESS;\r\n    address public immutable CEP_TOKEN_ADDRESS;\r\n    address public treasury;\r\n    address public owner;\r\n    \r\n    bool public halted;\r\n\r\n    event TreasuryChanged(address indexed previousTreasury, address indexed newTreasury);\r\n    event ContractHalted(address indexed halter);\r\n    event ContractUnhalted(address indexed halter);\r\n    event TokensMigrated(address indexed to, uint256 amountSwapped);\r\n\r\n    \r\n    error CEREALTokenMigrator_ImproperlyInitialized();\r\n    error CEREALTokenMigrator_InvalidTreasury(address treasury);\r\n    error CEREALTokenMigrator_OnlyOwner(address caller);\r\n    error CEREALTokenMigrator_OnlyWhenNotHalted();\r\n    error CEREALTokenMigrator_ZeroSwap();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert CEREALTokenMigrator_OnlyOwner(msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenNotHalted() {\r\n        if (halted) revert CEREALTokenMigrator_OnlyWhenNotHalted();\r\n        _;\r\n    }\r\n\r\n    constructor(address _drmTokenAddress, address _cepTokenAddress, address _treasury) {\r\n        if (_drmTokenAddress == address(0) || _cepTokenAddress == address(0) ) {\r\n            revert CEREALTokenMigrator_ImproperlyInitialized();\r\n        }\r\n\r\n        owner = msg.sender;\r\n        halted = true;\r\n\r\n        DRM_TOKEN_ADDRESS = _drmTokenAddress;\r\n        CEP_TOKEN_ADDRESS = _cepTokenAddress;\r\n\r\n        treasury = _treasury;\r\n    }\r\n    \r\n    /* ========== TOKEN SWAPPING ========== */\r\n\r\n    function migrateAllDRM() external onlyWhenNotHalted {\r\n        uint256 amount = IERC20(DRM_TOKEN_ADDRESS).balanceOf(msg.sender);\r\n        _migrateTokens(amount);\r\n    }\r\n\r\n    function migrateDRM(uint256 _amount) external onlyWhenNotHalted {\r\n        _migrateTokens(_amount);\r\n    }\r\n\r\n    function _migrateTokens(uint256 _amount) internal {\r\n        if (_amount == 0) revert CEREALTokenMigrator_ZeroSwap();\r\n\r\n        // transfer user's BIT tokens to this contract\r\n        IERC20(DRM_TOKEN_ADDRESS).transferFrom(msg.sender, address(this), _amount);\r\n        \r\n        // transfer MNT tokens to user, if there are insufficient tokens, in the contract this will revert\r\n        IERC20(CEP_TOKEN_ADDRESS).transfer(msg.sender, _amount);\r\n\r\n        emit TokensMigrated(msg.sender, _amount);\r\n    }\r\n\r\n    /* ========== ADMIN UTILS ========== */\r\n\r\n    function setTreasury(address _treasury) public onlyOwner {\r\n        if (_treasury == address(0)) {\r\n            revert CEREALTokenMigrator_InvalidTreasury(_treasury);\r\n        }\r\n\r\n        emit TreasuryChanged(treasury, _treasury);\r\n\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    function haltContract() public onlyOwner {\r\n        halted = true;\r\n\r\n        emit ContractHalted(msg.sender);\r\n    }\r\n\r\n    function unhaltContract() public onlyOwner {\r\n        halted = false;\r\n\r\n        emit ContractUnhalted(msg.sender);\r\n    }\r\n\r\n    function withdrawDrmTokens() external onlyOwner {\r\n        uint256 balance = IERC20(DRM_TOKEN_ADDRESS).balanceOf(address(this));\r\n        require(balance > 0, \"No tokens to withdraw\");\r\n        IERC20(DRM_TOKEN_ADDRESS).transfer(treasury, balance);\r\n    }\r\n\r\n    function withdrawCepTokens() external onlyOwner {\r\n        uint256 balance = IERC20(CEP_TOKEN_ADDRESS).balanceOf(address(this));\r\n        require(balance > 0, \"No tokens to withdraw\");\r\n        IERC20(CEP_TOKEN_ADDRESS).transfer(treasury, balance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drmTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cepTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CEREALTokenMigrator_ImproperlyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"CEREALTokenMigrator_InvalidTreasury\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CEREALTokenMigrator_OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CEREALTokenMigrator_OnlyWhenNotHalted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CEREALTokenMigrator_ZeroSwap\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"halter\",\"type\":\"address\"}],\"name\":\"ContractHalted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"halter\",\"type\":\"address\"}],\"name\":\"ContractUnhalted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSwapped\",\"type\":\"uint256\"}],\"name\":\"TokensMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CEP_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRM_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haltContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateAllDRM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateDRM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unhaltContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDrmTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CerealTokenMigrator", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000089551b940e2a8ed8eccf509935bac9213fe305840000000000000000000000004168bbc34baea34e55721809911bca5baaef6ba60000000000000000000000003cfdbae9c0e5357e85dd44f817d5203be9ad9429", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://944530a396f864a6359cf4fb15a5fc8ac3149a640d4cfc5c0c86ca26412f8cba"}