{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Exchange pool processor abstract contract.\\n * @dev Keeps an enumerable set of designated exchange addresses as well as a single primary pool address.\\n */\\ninterface IPoolManager {\\n    /// @notice Primary exchange pool address.\\n    function primaryPool() external view returns (address);\\n\\n    /**\\n     * @notice Check if the given address is pool address.\\n     * @param addr Address to check.\\n     * @return bool True if the given address is pool address.\\n     */\\n    function isPoolAddress(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITaxHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\ninterface ITaxHandler {\\n    /**\\n     * @notice Get number of tokens to pay as tax.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     * @return taxAmount Number of tokens for tax.\\n     */\\n    function getTax(address benefactor, address beneficiary, uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasuryHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Treasury handler interface\\n * @dev Any class that implements this interface can be used for protocol-specific operations pertaining to the treasury.\\n */\\ninterface ITreasuryHandler {\\n    /**\\n     * @notice Perform operations before a transfer is executed.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     */\\n    function processTreasury(address benefactor, address beneficiary, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/WarpedPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IPoolManager} from \\\"./interfaces/IPoolManager.sol\\\";\\n\\n/**\\n * @title Exchange pool processor contract.\\n * @dev Keeps an enumerable set of designated exchange addresses as well as a single primary pool address.\\n */\\ncontract WarpedPoolManager is IPoolManager, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev Set of exchange pool addresses.\\n    EnumerableSet.AddressSet internal _exchangePools;\\n\\n    /// @notice Primary exchange pool address.\\n    address public override primaryPool;\\n\\n    /// @notice Emitted when an exchange pool address is added to the set of tracked pool addresses.\\n    event ExchangePoolAdded(address exchangePool);\\n\\n    /// @notice Emitted when an exchange pool address is removed from the set of tracked pool addresses.\\n    event ExchangePoolRemoved(address exchangePool);\\n\\n    /// @notice Emitted when the primary pool address is updated.\\n    event PrimaryPoolUpdated(address oldPrimaryPool, address newPrimaryPool);\\n\\n    /**\\n     * @notice Add an address to the set of exchange pool addresses.\\n     * @dev Nothing happens if the pool already exists in the set.\\n     * @param poolAddress Address of the pool to add.\\n     */\\n    function addExchangePool(address poolAddress) external onlyOwner {\\n        require(poolAddress != address(0), \\\"Zero address passed\\\");\\n        if (_exchangePools.add(poolAddress)) {\\n            emit ExchangePoolAdded(poolAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove an address from the set of exchange pool addresses.\\n     * @dev Remove from _exchangePools when given poolAddress is different to the current primaryPool, otherwise revert.\\n     * Nothing happens if the pool doesn't exist in the set.\\n     * @param poolAddress Address of the pool to remove.\\n     */\\n    function removeExchangePool(address poolAddress) external onlyOwner {\\n        require(poolAddress != primaryPool, \\\"Primary pool cannot be removed\\\");\\n        if (_exchangePools.remove(poolAddress)) {\\n            emit ExchangePoolRemoved(poolAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set exchange pool address as primary pool.\\n     * @dev To prevent issues, only addresses inside the set of exchange pool addresses can be selected as primary pool.\\n     * @param exchangePool Address of exchange pool to set as primary pool.\\n     */\\n    function setPrimaryPool(address exchangePool) external onlyOwner {\\n        require(_exchangePools.contains(exchangePool), \\\"Not registered as exchange pool\\\");\\n        require(primaryPool != exchangePool, \\\"Already primary pool address\\\");\\n\\n        address oldPrimaryPool = primaryPool;\\n        primaryPool = exchangePool;\\n\\n        emit PrimaryPoolUpdated(oldPrimaryPool, exchangePool);\\n    }\\n\\n    /**\\n     * @notice Check if the given address is pool address.\\n     * @param addr Address to check.\\n     * @return bool True if the given address is pool address.\\n     */\\n    function isPoolAddress(address addr) external view override returns (bool) {\\n        return _exchangePools.contains(addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WarpedTaxHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {ITaxHandler} from \\\"./interfaces/ITaxHandler.sol\\\";\\nimport {IPoolManager} from \\\"./interfaces/IPoolManager.sol\\\";\\n\\ncontract WarpedTaxHandler is ITaxHandler, Ownable {\\n    /// @notice limit number of NFT contracts\\n    uint8 public constant NFT_CONTRACTS_LIMIT = 10;\\n    /// @notice limit number of tax rate points\\n    uint8 public constant TAX_RATES_LIMIT = 10;\\n\\n    /// @notice NFTs to be used to determine user tax level.\\n    IERC721[] public nftContracts;\\n    /// @notice Bits representing levels of each NFTs: 1,2,4,8\\n    mapping(IERC721 => uint8) public nftLevels;\\n\\n    struct TaxRatePoint {\\n        uint256 threshold;\\n        uint256 rate;\\n    }\\n\\n    TaxRatePoint[] public taxRates;\\n    uint256 public basisTaxRate;\\n    uint256 public constant maxTaxRate = 400;\\n    bool public taxDisabled;\\n    IPoolManager public poolManager;\\n\\n    /// @notice Emitted when tax rates are updated.\\n    event TaxRatesUpdated(uint256[] thesholds, uint256[] rates, uint256 basisTaxRate);\\n\\n    /// @notice Emitted when nft contracts and levels are added.\\n    event NFTsAdded(address[] contracts, uint8[] levels);\\n\\n    /// @notice Emitted when nft contracts are removed.\\n    event NFTsRemoved(address[] contracts);\\n\\n    /// @notice Emitted when tax is paused.\\n    event TaxPaused();\\n\\n    /// @notice Emitted when tax is resumed.\\n    event TaxResumed();\\n\\n    /// @notice Constructor of tax handler contract\\n    /// @param _poolManager exchange pool manager address\\n    /// @param _nftContracts array of addresses of NFT contracts\\n    /// @param _levels array of levels of NFT contracts\\n    constructor(IPoolManager _poolManager, address[] memory _nftContracts, uint8[] memory _levels) {\\n        poolManager = _poolManager;\\n\\n        _addNFTs(_nftContracts, _levels);\\n        // init default tax rates\\n        basisTaxRate = 400;\\n        taxRates.push(TaxRatePoint(7, 100));\\n        taxRates.push(TaxRatePoint(5, 200));\\n        taxRates.push(TaxRatePoint(1, 300));\\n    }\\n\\n    /**\\n     * @notice Reset tax rate points.\\n     * @param thresholds of user level.\\n     * @param rates of tax per each threshold.\\n     * @param basisRate basis tax rate.\\n     *\\n     * Requirements:\\n     *\\n     * - values of `thresholds` must be placed in descending order.\\n     */\\n    function setTaxRates(uint256[] memory thresholds, uint256[] memory rates, uint256 basisRate) external onlyOwner {\\n        require(thresholds.length == rates.length, \\\"Invalid level points\\\");\\n        require(thresholds.length <= TAX_RATES_LIMIT, \\\"Tax rates limit exceeded\\\");\\n        require(basisRate > 0, \\\"Invalid base rate\\\");\\n        require(basisRate <= maxTaxRate, \\\"Base rate must be <= than max\\\");\\n\\n        delete taxRates;\\n        for (uint256 i = 0; i < thresholds.length; i++) {\\n            require(rates[i] <= maxTaxRate, \\\"Rate must be less than max rate\\\");\\n            if (i > 0) {\\n                require(thresholds[i] < thresholds[i - 1], \\\"Thresholds not descending order\\\");\\n            }\\n            taxRates.push(TaxRatePoint(thresholds[i], rates[i]));\\n        }\\n        basisTaxRate = basisRate;\\n\\n        emit TaxRatesUpdated(thresholds, rates, basisRate);\\n    }\\n\\n    /**\\n     * @notice Add addresses and their levels of NFTs(only ERC721).\\n     * @dev For future NFT launch, allow to add new NFT addresses and levels.\\n     * @param contracts NFT contract addresses.\\n     * @param levels NFT contract levels to be used for user level calculation.\\n     */\\n    function addNFTs(address[] memory contracts, uint8[] memory levels) external onlyOwner {\\n        require(contracts.length > 0 && levels.length > 0, \\\"Invalid parameters\\\");\\n        _addNFTs(contracts, levels);\\n    }\\n\\n    /**\\n     * @notice Remove nft level by address.\\n     * @param contracts NFT contract addresses.\\n     */\\n    function removeNFTs(address[] memory contracts) external onlyOwner {\\n        require(contracts.length > 0, \\\"Invalid parameters\\\");\\n        for (uint8 i = 0; i < contracts.length; i++) {\\n            for (uint8 j = 0; j < nftContracts.length; j++) {\\n                if (address(nftContracts[j]) == contracts[i]) {\\n                    // safely remove NFT contract from array\\n                    if (j < nftContracts.length - 1) {\\n                        nftContracts[j] = nftContracts[nftContracts.length - 1];\\n                    }\\n                    nftContracts.pop();\\n                    break;\\n                }\\n            }\\n            nftLevels[IERC721(contracts[i])] = 0;\\n        }\\n        emit NFTsRemoved(contracts);\\n    }\\n\\n    /**\\n     * @notice Set no tax for special period\\n     */\\n    function pauseTax() external onlyOwner {\\n        require(!taxDisabled, \\\"Already paused\\\");\\n        taxDisabled = true;\\n        emit TaxPaused();\\n    }\\n\\n    /**\\n     * @notice Resume tax handling\\n     */\\n    function resumeTax() external onlyOwner {\\n        require(taxDisabled, \\\"Not paused\\\");\\n        taxDisabled = false;\\n        emit TaxResumed();\\n    }\\n\\n    /**\\n     * @notice Get number of tokens to pay as tax.\\n     * @dev There is no easy way to differentiate between a user swapping\\n     * tokens and a user adding or removing liquidity to the pool. In both\\n     * cases tokens are transferred to or from the pool. This is an unfortunate\\n     * case where users have to accept being taxed on liquidity additions and\\n     * removal. To get around this issue a separate liquidity addition contract\\n     * can be deployed. This contract could be exempt from taxes if its\\n     * functionality is verified to only add and remove liquidity.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     * @return taxAmount Number of tokens for tax\\n     */\\n    function getTax(address benefactor, address beneficiary, uint256 amount) external view override returns (uint256) {\\n        if (taxDisabled) {\\n            return 0;\\n        }\\n\\n        // Transactions between regular users (this includes contracts) aren't taxed.\\n        if (!poolManager.isPoolAddress(benefactor) && !poolManager.isPoolAddress(beneficiary)) {\\n            return 0;\\n        }\\n\\n        // Transactions between pools aren't taxed.\\n        if (poolManager.isPoolAddress(benefactor) && poolManager.isPoolAddress(beneficiary)) {\\n            return 0;\\n        }\\n\\n        uint256 taxRate = 0;\\n        // If the benefactor is found in the set of exchange pools, then it's a buy transactions, otherwise a sell\\n        // transactions, because the other use cases have already been checked above.\\n        if (poolManager.isPoolAddress(benefactor)) {\\n            taxRate = _getTaxBasisPoints(beneficiary);\\n        } else {\\n            taxRate = _getTaxBasisPoints(benefactor);\\n        }\\n\\n        return (amount * taxRate) / 10000;\\n    }\\n\\n    /**\\n     * @notice Get percent of tax to pay for the given user.\\n     * @dev Basis tax percent will be varied based on user's ownership of NFTs\\n     * in the STARL metaverse. There are 3 user levels and user's level will be\\n     * determined by bit-or of nft levels he owned.\\n     * SATE: 8(4th bit), LM/LMvX: 4(3rd bit), PAL: 2(2nd bit), PN: 1(first bit)\\n     * bit-or >= 7 : 1%\\n     * bit-or >= 5 : 2%\\n     * bit-or >= 1 : 3%\\n     * @param user Address of user(buyer/seller address).\\n     * @return Number Basis tax percent in 2 decimal.\\n     */\\n    function _getTaxBasisPoints(address user) internal view returns (uint256) {\\n        uint256 userLevel = 0;\\n        // Max number of nft contracts is 10 so gas for the loop of nft contracts is less than about 141k.\\n        // Max number of tax rates is 10 so gas for the loop of tax rates is less than about 100k.\\n        // Total gas for both loops is less than about 241k so it will be not over the block gas limit.\\n        for (uint256 i = 0; i < nftContracts.length; i++) {\\n            IERC721 nft = nftContracts[i];\\n            if (nft.balanceOf(user) > 0) {\\n                userLevel = userLevel | nftLevels[nftContracts[i]];\\n            }\\n        }\\n        for (uint256 i = 0; i < taxRates.length; i++) {\\n            if (userLevel >= taxRates[i].threshold) {\\n                return taxRates[i].rate;\\n            }\\n        }\\n        return basisTaxRate;\\n    }\\n\\n    function _addNFTs(address[] memory contracts, uint8[] memory levels) internal {\\n        require(contracts.length == levels.length, \\\"Invalid parameters\\\");\\n        require(contracts.length + nftContracts.length <= NFT_CONTRACTS_LIMIT, \\\"No. of NFT contracts over limit\\\");\\n\\n        for (uint8 i = 0; i < contracts.length; i++) {\\n            require(contracts[i] != address(0), \\\"contract address is zero address\\\");\\n            require(IERC165(contracts[i]).supportsInterface(type(IERC721).interfaceId), \\\"IERC721 not implemented\\\");\\n            // nftLevels for existing contract is always bigger than zero.\\n            // So checking this value is enough to check the uniqueness of adding NFT contract address.\\n            require(nftLevels[IERC721(contracts[i])] == 0, \\\"Duplicate NFT contract\\\");\\n            require(levels[i] > 0, \\\"Invalid NFT level\\\");\\n\\n            nftContracts.push(IERC721(contracts[i]));\\n            nftLevels[IERC721(contracts[i])] = levels[i];\\n        }\\n\\n        emit NFTsAdded(contracts, levels);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WarpedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {ITaxHandler} from \\\"./interfaces/ITaxHandler.sol\\\";\\nimport {ITreasuryHandler} from \\\"./interfaces/ITreasuryHandler.sol\\\";\\n\\n/// @notice WARPED token contract\\n/// @dev extends standard ERC20 contract\\ncontract WarpedToken is ERC20, Ownable {\\n    uint8 private constant _DECIMALS = 18;\\n    uint256 private constant _T_TOTAL = 10_000_000_000 * 10 ** _DECIMALS;\\n    string private constant _NAME = \\\"WARPED\\\";\\n    string private constant _SYMBOL = \\\"WARPED\\\";\\n\\n    uint256 private constant _NOT_IN_TAX_PROCESSING = 1;\\n    uint256 private constant _TAX_PROCESSING = 2;\\n\\n    uint256 private _tax_processing_status = _NOT_IN_TAX_PROCESSING;\\n\\n    /// @notice Tax handler address\\n    ITaxHandler public taxHandler;\\n    /// @notice Treasury handler address\\n    ITreasuryHandler public treasuryHandler;\\n\\n    /// @notice Emitted when tax handler contract is updated.\\n    event TaxHandlerUpdated(address newAddress);\\n\\n    /// @notice Emitted when tax handler contract is updated.\\n    event TreasuryHandlerUpdated(address newAddress);\\n\\n    /// @notice Constructor of WARPED token contract\\n    /// @dev initialize with tax and treasury handler addresses.\\n    /// @param deployerAddress deployer address to receive total supply\\n    /// @param taxHandlerAddress tax handler contract address\\n    /// @param treasuryHandlerAddress treasury handler contract address\\n    constructor(\\n        address deployerAddress,\\n        address taxHandlerAddress,\\n        address treasuryHandlerAddress\\n    ) ERC20(_NAME, _SYMBOL) {\\n        require(deployerAddress != address(0), \\\"Deployer is zero address\\\");\\n        require(taxHandlerAddress != address(0), \\\"taxHandler is zero address\\\");\\n        require(treasuryHandlerAddress != address(0), \\\"treasuryHandler is zero address\\\");\\n        taxHandler = ITaxHandler(taxHandlerAddress);\\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\\n\\n        _mint(deployerAddress, _T_TOTAL);\\n    }\\n\\n    modifier skipWhenTaxProcessing() {\\n        if (_tax_processing_status == _TAX_PROCESSING) {\\n            return;\\n        }\\n\\n        _tax_processing_status = _TAX_PROCESSING;\\n        _;\\n\\n        _tax_processing_status = _NOT_IN_TAX_PROCESSING;\\n    }\\n\\n    /**\\n     * @notice Update tax handler\\n     * @param taxHandlerAddress address of tax handler contract.\\n     */\\n    function updateTaxHandler(address taxHandlerAddress) external onlyOwner {\\n        require(taxHandlerAddress != address(0x00), \\\"Zero tax handler address\\\");\\n        require(taxHandlerAddress != address(taxHandler), \\\"Same tax handler address\\\");\\n\\n        taxHandler = ITaxHandler(taxHandlerAddress);\\n        emit TaxHandlerUpdated(taxHandlerAddress);\\n    }\\n\\n    /**\\n     * @notice Update treasury handler\\n     * @param treasuryHandlerAddress address of treasury handler contract.\\n     */\\n    function updateTreasuryHandler(address treasuryHandlerAddress) external onlyOwner {\\n        require(treasuryHandlerAddress != address(0x00), \\\"Zero treasury handler address\\\");\\n        require(treasuryHandlerAddress != address(treasuryHandler), \\\"Same treasury handler address\\\");\\n\\n        treasuryHandler = ITreasuryHandler(treasuryHandlerAddress);\\n        emit TreasuryHandlerUpdated(treasuryHandlerAddress);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     * forward into beforeTokenTransferHandler function of treasury handler\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override skipWhenTaxProcessing {\\n        treasuryHandler.processTreasury(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_afterTokenTransfer}.\\n     * calculate tax, reward, and burn amount using tax handler and transfer using _transfer function\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override skipWhenTaxProcessing {\\n        if (from == address(0x0)) {\\n            // skip for mint\\n            return;\\n        }\\n\\n        uint256 taxAmount;\\n        taxAmount = taxHandler.getTax(from, to, amount);\\n        if (taxAmount > 0) {\\n            _transfer(to, address(treasuryHandler), taxAmount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WarpedTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {WarpedToken} from \\\"./WarpedToken.sol\\\";\\nimport {WarpedTaxHandler} from \\\"./WarpedTaxHandler.sol\\\";\\nimport {WarpedTreasuryHandler, IUniswapV2Router02} from \\\"./WarpedTreasuryHandler.sol\\\";\\nimport {WarpedPoolManager, EnumerableSet, IPoolManager} from \\\"./WarpedPoolManager.sol\\\";\\n\\nimport {IUniswapV2Factory} from \\\"./interfaces/IUniswapV2Router02.sol\\\";\\n\\n/**\\n * @title WARPED token manager.\\n * @dev Manage WARPED token such as creating token and adding liquidity.\\n */\\ncontract WarpedTokenManager is WarpedPoolManager {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Emitted when liquidity added successfully\\n    event LiquidityAdded(uint amountToken, uint amountETH, uint liquidity);\\n\\n    /// @notice WARPED token\\n    IERC20 public warpedToken;\\n    /// @notice Uniswap v2 router address\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /// @notice Constructor of WARPED token manager\\n    /// @dev Create TaxHandler, TreasuryHandler, and Token contract\\n    /// @param treasuryAddress final tax treasury address\\n    /// @param nftContracts array of addresses of NFT contracts to calculate tax rate\\n    /// @param nftLevels array of levels of NFT contracts to calculate tax rate\\n    constructor(address treasuryAddress, address[] memory nftContracts, uint8[] memory nftLevels) {\\n        require(treasuryAddress != address(0), \\\"treasury is zero address\\\");\\n\\n        // 1. Create treasury and tax Handler\\n        WarpedTreasuryHandler treasuryHandler = new WarpedTreasuryHandler(IPoolManager(this));\\n        WarpedTaxHandler taxHandler = new WarpedTaxHandler(IPoolManager(this), nftContracts, nftLevels);\\n\\n        // 2. Create token contract and initilize treasury handler\\n        WarpedToken tokenContract = new WarpedToken(_msgSender(), address(taxHandler), address(treasuryHandler));\\n        // Initialize treasury handler with created token contract\\n        treasuryHandler.initialize(treasuryAddress, address(tokenContract));\\n\\n        // 3. Transfer ownership of tax and transfer handlers into msgSender\\n        taxHandler.transferOwnership(_msgSender());\\n        treasuryHandler.transferOwnership(_msgSender());\\n\\n        // 4. Transfer ownership of token contract into msgSender\\n        tokenContract.transferOwnership(_msgSender());\\n        warpedToken = IERC20(tokenContract);\\n    }\\n\\n    /// @notice Ownable function to create and add liquidity\\n    /// @param amountToLiquidity amount of new tokens to add into liquidity\\n    function addLiquidity(uint256 amountToLiquidity) external payable onlyOwner {\\n        // 1. Receive token from deployer wallet\\n        warpedToken.safeTransferFrom(_msgSender(), address(this), amountToLiquidity);\\n\\n        // 2. Approve token to use by uniswap router\\n        warpedToken.safeApprove(address(UNISWAP_V2_ROUTER), amountToLiquidity);\\n\\n        // 3. Create uniswap pair\\n        address uniswapV2Pair = IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(\\n            address(warpedToken),\\n            UNISWAP_V2_ROUTER.WETH()\\n        );\\n\\n        // 4. Add liquidity\\n        (uint amountToken, uint amountETH, uint liquidity) = UNISWAP_V2_ROUTER.addLiquidityETH{\\n            value: address(this).balance\\n        }(address(warpedToken), amountToLiquidity, amountToLiquidity, msg.value, owner(), block.timestamp);\\n        emit LiquidityAdded(amountToken, amountETH, liquidity);\\n\\n        // 5. Add exchange pool and set primary pool\\n        _exchangePools.add(address(uniswapV2Pair));\\n        primaryPool = address(uniswapV2Pair);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WarpedTreasuryHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IUniswapV2Router02} from \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IPoolManager} from \\\"./interfaces/IPoolManager.sol\\\";\\nimport {ITreasuryHandler} from \\\"./interfaces/ITreasuryHandler.sol\\\";\\n\\n/**\\n * @title Treasury handler contract\\n * @dev Sells tokens that have accumulated through taxes and sends the resulting ETH to the treasury. If\\n * `liquidityBasisPoints` has been set to a non-zero value, then that percentage will instead be added to the designated\\n * liquidity pool.\\n */\\ncontract WarpedTreasuryHandler is ITreasuryHandler, Ownable {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    IPoolManager public poolManager;\\n\\n    /// @notice The Treasury address.\\n    address payable public treasury;\\n\\n    /// @notice The token that accumulates through taxes. This will be sold for ETH.\\n    IERC20 public token;\\n\\n    /// @notice The basis points of tokens to sell and add as liquidity to the pool.\\n    uint256 public liquidityBasisPoints;\\n\\n    /// @notice The maximum price impact the sell (initiated from this contract) may have.\\n    uint256 public priceImpactBasisPoints;\\n\\n    /// @dev swap contract balance if it's over this value\\n    uint256 private _taxSwap;\\n\\n    bool private _isInitialized;\\n\\n    /// @notice The Uniswap router that handles the sell and liquidity operations.\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /// @notice Emitted when the basis points value of tokens to add as liquidity is updated.\\n    event LiquidityBasisPointsUpdated(uint256 oldBasisPoints, uint256 newBasisPoints);\\n\\n    /// @notice Emitted when the maximum price impact basis points value is updated.\\n    event PriceImpactBasisPointsUpdated(uint256 oldBasisPoints, uint256 newBasisPoints);\\n\\n    /// @notice Emitted when the treasury address is updated.\\n    event TreasuryAddressUpdated(address oldTreasuryAddress, address newTreasuryAddress);\\n\\n    /// @notice Emitted when _taxSwap is updated.\\n    event TaxSwapUpdated(uint256 newValue);\\n\\n    /// @notice Emitted when liquidity added successfully\\n    event LiquidityAdded(uint amountToken, uint amountETH, uint liquidity);\\n\\n    /// @notice Constructor of tax handler contract\\n    /// @param _poolManager exchange pool manager address\\n    constructor(IPoolManager _poolManager) {\\n        poolManager = _poolManager;\\n    }\\n\\n    /**\\n     * @notice Allow contract to accept ETH.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    /**\\n     * @param treasuryAddress Address of treasury to use.\\n     * @param tokenAddress Address of token to accumulate and sell.\\n     */\\n    function initialize(address treasuryAddress, address tokenAddress) external onlyOwner {\\n        require(!_isInitialized, \\\"Already initialized\\\");\\n        require(treasuryAddress != address(0), \\\"treasury is zero address\\\");\\n        require(tokenAddress != address(0), \\\"token address is zero address\\\");\\n\\n        treasury = payable(treasuryAddress);\\n        token = IERC20(tokenAddress);\\n        liquidityBasisPoints = 0;\\n        priceImpactBasisPoints = 500;\\n        _taxSwap = 10_000_000 * 10 ** 18;\\n        _isInitialized = true;\\n    }\\n\\n    /**\\n     * @notice Perform operations before a sell action (or a liquidity addition) is executed. The accumulated tokens are\\n     * then sold for ETH. In case the number of accumulated tokens exceeds the price impact percentage threshold, then\\n     * the number will be adjusted to stay within the threshold. If a non-zero percentage is set for liquidity, then\\n     * that percentage will be added to the primary liquidity pool instead of being sold for ETH and sent to the\\n     * treasury.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     */\\n    function processTreasury(address benefactor, address beneficiary, uint256 amount) external override {\\n        if (!_isInitialized || benefactor == address(0x0)) {\\n            // skip when not initialized or mint\\n            return;\\n        }\\n\\n        // No actions are done on transfers other than sells.\\n        if (!poolManager.isPoolAddress(beneficiary)) {\\n            return;\\n        }\\n\\n        uint256 contractTokenBalance = token.balanceOf(address(this));\\n        if (contractTokenBalance > _taxSwap) {\\n            uint256 primaryPoolBalance = token.balanceOf(poolManager.primaryPool());\\n            uint256 maxPriceImpactSale = (primaryPoolBalance * priceImpactBasisPoints) / 10000;\\n\\n            contractTokenBalance = _taxSwap > amount ? amount : _taxSwap;\\n\\n            // Ensure the price impact is within reasonable bounds.\\n            if (contractTokenBalance > maxPriceImpactSale) {\\n                contractTokenBalance = maxPriceImpactSale;\\n            }\\n\\n            // The number of tokens to sell for liquidity purposes. This is calculated as follows:\\n            //\\n            //      B     P\\n            //  L = - * -----\\n            //      2   10000\\n            //\\n            // Where:\\n            //  L = tokens to sell for liquidity\\n            //  B = available token balance\\n            //  P = basis points of tokens to use for liquidity\\n            //\\n            // The number is divided by two to preserve the token side of the token/WETH pool.\\n            uint256 tokensForLiquidity = (contractTokenBalance * liquidityBasisPoints) / 20000;\\n            uint256 tokensForSwap = contractTokenBalance - tokensForLiquidity;\\n\\n            uint256 currentWeiBalance = address(this).balance;\\n            _swapTokensForEth(tokensForSwap);\\n            uint256 weiEarned = address(this).balance - currentWeiBalance;\\n\\n            // No need to divide this number, because that was only to have enough tokens remaining to pair with this\\n            // ETH value.\\n            uint256 weiForLiquidity = (weiEarned * liquidityBasisPoints) / 10000;\\n\\n            if (tokensForLiquidity > 0) {\\n                _addLiquidity(tokensForLiquidity, weiForLiquidity);\\n            }\\n\\n            // It's cheaper to get the active balance rather than calculating based off of the `currentWeiBalance` and\\n            // `weiForLiquidity` numbers.\\n            uint256 remainingWeiBalance = address(this).balance;\\n            if (remainingWeiBalance > 0) {\\n                treasury.sendValue(remainingWeiBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Set new liquidity basis points value.\\n     * @param newBasisPoints New liquidity basis points value. Cannot exceed 10,000 (i.e., 100%) as that would break the\\n     * calculation.\\n     */\\n    function setLiquidityBasisPoints(uint256 newBasisPoints) external onlyOwner {\\n        require(newBasisPoints <= 10000, \\\"Max is 10000\\\");\\n\\n        uint256 oldBasisPoints = liquidityBasisPoints;\\n        liquidityBasisPoints = newBasisPoints;\\n\\n        emit LiquidityBasisPointsUpdated(oldBasisPoints, newBasisPoints);\\n    }\\n\\n    /**\\n     * @notice Set new price impact basis points value.\\n     * @param newBasisPoints New price impact basis points value.\\n     */\\n    function setPriceImpactBasisPoints(uint256 newBasisPoints) external onlyOwner {\\n        require(newBasisPoints < 1500, \\\"Too high value\\\");\\n\\n        uint256 oldBasisPoints = priceImpactBasisPoints;\\n        priceImpactBasisPoints = newBasisPoints;\\n\\n        emit PriceImpactBasisPointsUpdated(oldBasisPoints, newBasisPoints);\\n    }\\n\\n    /**\\n     * @notice Set new treasury address.\\n     * @param newTreasuryAddress New treasury address.\\n     */\\n    function setTreasury(address newTreasuryAddress) external onlyOwner {\\n        require(newTreasuryAddress != address(0), \\\"Zero address\\\");\\n\\n        address oldTreasuryAddress = address(treasury);\\n        treasury = payable(newTreasuryAddress);\\n\\n        emit TreasuryAddressUpdated(oldTreasuryAddress, newTreasuryAddress);\\n    }\\n\\n    /**\\n     * @notice Withdraw any tokens or ETH stuck in the treasury handler.\\n     * @param tokenAddress Address of the token to withdraw. If set to the zero address, ETH will be withdrawn.\\n     * @param amount The number of tokens to withdraw.\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external onlyOwner {\\n        if (tokenAddress == address(0)) {\\n            treasury.sendValue(amount);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(address(treasury), amount);\\n        }\\n    }\\n\\n    function updateTaxSwap(uint256 taxSwap) external onlyOwner {\\n        require(taxSwap > 0, \\\"Zero taxSwap\\\");\\n        _taxSwap = taxSwap;\\n        emit TaxSwapUpdated(taxSwap);\\n    }\\n\\n    /**\\n     * @dev Swap accumulated tokens for ETH.\\n     * @param tokenAmount Number of tokens to swap for ETH.\\n     */\\n    function _swapTokensForEth(uint256 tokenAmount) internal {\\n        // The ETH/token pool is the primary pool. It always exists.\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\n\\n        // Call the getAmountsOut function to estimate the output amounts\\n        uint256[] memory amountsOut = UNISWAP_V2_ROUTER.getAmountsOut(tokenAmount, path);\\n        // Set the minimum amounts slightly below the estimated output amounts\\n        uint256 amountETHMin = amountsOut[1] - (amountsOut[1] / 100); // consider about 1 percent slippage\\n\\n        // Ensure the router can perform the swap for the designated number of tokens.\\n        token.safeApprove(address(UNISWAP_V2_ROUTER), tokenAmount);\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            amountETHMin,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Add liquidity to primary pool.\\n     * @param tokenAmount Number of tokens to add as liquidity.\\n     * @param weiAmount ETH value to pair with the tokens.\\n     */\\n    function _addLiquidity(uint256 tokenAmount, uint256 weiAmount) internal {\\n        // Ensure the router can perform the transfer for the designated number of tokens.\\n        token.safeApprove(address(UNISWAP_V2_ROUTER), tokenAmount);\\n\\n        // Create a dynamic array containing the token and ETH addresses in the desired order\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\n\\n        // Call the getAmountsOut function to estimate the output amounts\\n        uint256[] memory amountsOut = UNISWAP_V2_ROUTER.getAmountsOut(tokenAmount, path);\\n\\n        // Set the minimum amounts slightly below the estimated output amounts\\n        uint256 amountTokenMin = amountsOut[0] - (amountsOut[0] / 100); // consider about 1 percent slippage\\n        uint256 amountETHMin = amountsOut[1] - (amountsOut[1] / 100); // consider about 1 percent slippage\\n\\n        // Both minimum values are set to zero to allow for any form of slippage.\\n        (uint amountToken, uint amountETH, uint liquidity) = UNISWAP_V2_ROUTER.addLiquidityETH{value: weiAmount}(\\n            address(token),\\n            tokenAmount,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(treasury),\\n            block.timestamp\\n        );\\n        emit LiquidityAdded(amountToken, amountETH, liquidity);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"nftLevels\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangePool\",\"type\":\"address\"}],\"name\":\"ExchangePoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangePool\",\"type\":\"address\"}],\"name\":\"ExchangePoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPrimaryPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPrimaryPool\",\"type\":\"address\"}],\"name\":\"PrimaryPoolUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"addExchangePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToLiquidity\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPoolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"removeExchangePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangePool\",\"type\":\"address\"}],\"name\":\"setPrimaryPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warpedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WarpedTokenManager", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000009508bef82cbc940ddf1344b26fc2ce28ad71df1400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000500000000000000000000000048470fb3fe7108b9e15b2bf7aa15b7adf774d7210000000000000000000000001b2f625e11c2cb949b465f343fe866d7f30f204a0000000000000000000000003634847577a40af0a0f592fdbcc1903720112cf600000000000000000000000009243c5fc239a879825e816cf062b7c337ea541200000000000000000000000027cc171b16fdd2224e1f93ed7dccfcc6790ca4bf000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}