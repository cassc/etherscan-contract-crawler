{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"noderental.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title KaspaNodes Rental Contract\\r\\n * @dev This contract enables users to rent different types of KaspaNodes in exchange for KASNODE tokens.\\r\\n * Each node type has a specific rental price, payout amount, and rental period.\\r\\n * Users can claim their payout at the end of the rental period.\\r\\n * The contract owner can update node parameters and recover ERC20 tokens sent by mistake.\\r\\n */\\r\\ncontract NodeRental is Ownable {\\r\\n    IERC20 public kasnodeToken;\\r\\n    uint256 public constant TOTAL_SUPPLY = 28700000000 * (10 ** 18);\\r\\n\\r\\n    struct Node {\\r\\n        uint256 rentalPrice;\\r\\n        uint256 payoutAmount;\\r\\n        uint256 rentalPeriod;\\r\\n        string nodeType;\\r\\n    }\\r\\n\\r\\n    Node public rapidNode;\\r\\n    Node public ghostNode;\\r\\n    Node public heavyNode;\\r\\n\\r\\n    mapping(address => Node) public rentedNodes;\\r\\n    mapping(address => uint256) public rentalStartTime;\\r\\n\\r\\n    event NodeRented(address indexed renter, string nodeType, uint256 amount);\\r\\n    event PayoutClaimed(address indexed renter, string nodeType, uint256 amount);\\r\\n\\r\\n    bool public emergencyStopped = false;\\r\\n\\r\\n    modifier stopInEmergency {\\r\\n        require(!emergencyStopped, \\\"Contract is stopped in an emergency\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _kasnodeTokenAddress) Ownable(msg.sender) {\\r\\n        kasnodeToken = IERC20(_kasnodeTokenAddress);\\r\\n        rapidNode = Node(TOTAL_SUPPLY / 1000, 50 * (10 ** 18), 30 days, \\\"RapidNode\\\");\\r\\n        ghostNode = Node(TOTAL_SUPPLY / 100, 500 * (10 ** 18), 90 days, \\\"GhostNode\\\");\\r\\n        heavyNode = Node(TOTAL_SUPPLY / 20, 2500 * (10 ** 18), 180 days, \\\"HeavyNode\\\");\\r\\n    }\\r\\n\\r\\n    function rentRapidNode() external stopInEmergency {\\r\\n        rentNode(rapidNode);\\r\\n    }\\r\\n\\r\\n    function rentGhostNode() external stopInEmergency {\\r\\n        rentNode(ghostNode);\\r\\n    }\\r\\n\\r\\n    function rentHeavyNode() external stopInEmergency {\\r\\n        rentNode(heavyNode);\\r\\n    }\\r\\n\\r\\n    function rentNode(Node memory node) internal {\\r\\n        uint256 allowance = kasnodeToken.allowance(msg.sender, address(this));\\r\\n        require(allowance >= node.rentalPrice, \\\"Insufficient token allowance for node rental.\\\");\\r\\n        require(rentalStartTime[msg.sender] == 0 || rentalStartTime[msg.sender] + rentedNodes[msg.sender].rentalPeriod < block.timestamp, \\\"Current node rental is still active or not yet started.\\\");\\r\\n\\r\\n        kasnodeToken.transferFrom(msg.sender, owner(), node.rentalPrice);\\r\\n        rentedNodes[msg.sender] = node;\\r\\n        rentalStartTime[msg.sender] = block.timestamp;\\r\\n\\r\\n        emit NodeRented(msg.sender, node.nodeType, node.rentalPrice);\\r\\n    }\\r\\n\\r\\n    function claimPayout() external stopInEmergency {\\r\\n        Node memory userNode = rentedNodes[msg.sender];\\r\\n        require(userNode.rentalPrice > 0, \\\"You have not rented a node.\\\");\\r\\n        require(rentalStartTime[msg.sender] + userNode.rentalPeriod <= block.timestamp, \\\"Node rental period has not yet ended.\\\");\\r\\n\\r\\n        uint256 payoutAmount = userNode.payoutAmount;\\r\\n        require(payoutAmount > 0, \\\"No payout available.\\\");\\r\\n        require(kasnodeToken.balanceOf(address(this)) >= payoutAmount, \\\"Insufficient funds in the contract for payout.\\\");\\r\\n\\r\\n        kasnodeToken.transfer(msg.sender, payoutAmount);\\r\\n        rentalStartTime[msg.sender] = 0;\\r\\n\\r\\n        emit PayoutClaimed(msg.sender, userNode.nodeType, payoutAmount);\\r\\n    }\\r\\n\\r\\n    function updateNodeParameters(string memory nodeType, uint256 rentalPrice, uint256 payoutAmount, uint256 rentalPeriod) external onlyOwner {\\r\\n        if (keccak256(bytes(nodeType)) == keccak256(bytes(\\\"RapidNode\\\"))) {\\r\\n            rapidNode.rentalPrice = rentalPrice;\\r\\n            rapidNode.payoutAmount = payoutAmount;\\r\\n            rapidNode.rentalPeriod = rentalPeriod;\\r\\n        } else if (keccak256(bytes(nodeType)) == keccak256(bytes(\\\"GhostNode\\\"))) {\\r\\n            ghostNode.rentalPrice = rentalPrice;\\r\\n            ghostNode.payoutAmount = payoutAmount;\\r\\n            ghostNode.rentalPeriod = rentalPeriod;\\r\\n        } else if (keccak256(bytes(nodeType)) == keccak256(bytes(\\\"HeavyNode\\\"))) {\\r\\n            heavyNode.rentalPrice = rentalPrice;\\r\\n            heavyNode.payoutAmount = payoutAmount;\\r\\n            heavyNode.rentalPeriod = rentalPeriod;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function toggleEmergencyStop() external onlyOwner {\\r\\n        emergencyStopped = !emergencyStopped;\\r\\n    }\\r\\n\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\r\\n        require(tokenAddress != address(kasnodeToken), \\\"Cannot recover KASNODE tokens\\\");\\r\\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kasnodeTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NodeRented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ghostNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heavyNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kasnodeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rapidNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentGhostNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentHeavyNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentRapidNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rentalStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rentedNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEmergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nodeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentalPeriod\",\"type\":\"uint256\"}],\"name\":\"updateNodeParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NodeRental", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000065fc7f9819ed281608d6e81097de5ee3e69a293c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ec926ff532bf395b6c15d5e998c9a76643f8e60fc73d1ef0355103ee0fcf889"}