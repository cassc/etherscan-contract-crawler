{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/*\r\n\r\n      \u251c\u256c\r\n       \u2524\u2502\u2556         \u256c\u2510\r\n       \u256c\u2561\u2502\u256c       \u2553\u256c\u2524\u2562\u2510\r\n       \u2558\u2524\u2555\u251c\u256c\u2556    \u256c\u256c\u256c\u256c\u256c\u256c\u256b\u256b\u256b\u256b\u256b\u256b\u256b\u256c\u2563\u256c\u256c\u256b\u256c\u256c\u2566\u2556\u2555\r\n        \u256c\u2502\u2502\u255f\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2566\r\n        \u2562\u2524\u2502 \u2514\u2558\u2559\u255c\u255c\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u2557\u2566\r\n       \u2553\u2524\u2524\u2502           \u2558\u2559\u2514\u2514\u2569\u2569\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u2566\r\n       \u256c\u2524\u2518                 \u2552\u2552\u2502\u2502\u2569\u255c\u255c\u2569\u2569\u255c\u2559\u255c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2566\r\n                 \u2556\u2524\u2502         \u2514\u251c\u2524\u2502\u2558\u2502  \u2558 \u2510\u2502\u256a\u256c\u256a\u2502\u256c\u256b\u256c\u256c\u256c\u256c\u256c\u256c\u2556\r\n                   \u2514      \u2510           \u2552\u2502\u2502\u251c\u256a\u2524\u256b\u2502\u2502\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\r\n                         \u250c\u2502\u256a\u2518          \u2514\u2502\u255b\u2518\u2558\u255b\u2558\u2502\u2502\u256c\u256a\u251c\u256c\u256c\u256c\u256c\u256c\r\n                         \u255c\u2558     \u2500\u2510\u2552\u2556\u2556\u2564\u2567\u255c\u2569  \u2502\u2502 \u2558\u2514\u251c\u255b\u251c\u256c\u256c\u256c\u256c\u256c\u2550\r\n                                            \u2514\u255b     \u2514\u2514\u2502\u2559\u2514\r\n\r\n \r\nJOEL ON ETH\r\n\r\nTelegram: http://t.me/JOELonETH\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \" multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"new owner is zero address\");\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract JOELonETH is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedWallet;\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 1_000_000_000 * 10 ** _decimals;\r\n    string private constant _name = \"Joel\";\r\n    string private constant _symbol = \"JOEL\";\r\n\r\n    uint256 private constant onePercent = _totalSupply / 100;\r\n    uint256 private oneTokenOffset = 1 * 10 ** _decimals;\r\n\r\n    uint256 public maxAmountPerTx = onePercent * 2;\r\n    uint256 public maxAmountPerWallet = onePercent * 2;\r\n\r\n    uint256 public taxSwapThreshold = onePercent / 10; \r\n    uint256 public maxTaxSwap = onePercent / 2;\r\n    uint256 private ethMinimumTransfer = 1 * 10 ** _decimals; \r\n\r\n    uint256 private _initialTax = 20;\r\n    uint256 private _finalTax = 0;\r\n    uint256 private _reduceTaxAt = 30;\r\n    uint256 private _preventSwapBefore = 21;\r\n    uint256 private _buyCount = 0;\r\n\r\n    IUniswapV2Router02 private constant uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public uniswapV2Pair;\r\n\r\n    address payable private taxWallet;\r\n\r\n    bool private swapEnabled = false;\r\n    bool private inSwapAndLiquify = false;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        taxWallet = payable(_msgSender());\r\n\r\n        _isExcludedWallet[_msgSender()] = true;\r\n        _isExcludedWallet[address(this)] = true;\r\n        _isExcludedWallet[taxWallet] = true;\r\n\r\n        _allowances[address(this)][address(uniswapV2Router)] = type(uint).max;\r\n        _allowances[_msgSender()][address(uniswapV2Router)] = type(uint).max;\r\n\r\n        _balance[_msgSender()] = onePercent * 100;\r\n\r\n        emit Transfer(address(0), _msgSender(), onePercent * 100);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"low allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0) && spender != address(0), \"approve zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 _tax = 0;\r\n        if (!_isExcludedWallet[from] && !_isExcludedWallet[to]) {\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                require(balanceOf(to) + amount <= maxAmountPerWallet + oneTokenOffset, \"Exceed max amount per wallet\");\r\n                require(amount <= maxAmountPerTx + oneTokenOffset, \"Exceed max amount per tx\");\r\n                _tax = _buyCount > _reduceTaxAt ? _finalTax : _initialTax;\r\n                _buyCount++;\r\n            } else if (to == uniswapV2Pair) {\r\n                require(amount <= maxAmountPerTx + oneTokenOffset, \"Exceed max amount per tx\");\r\n                _tax = _buyCount > _reduceTaxAt ? _finalTax : _initialTax;\r\n            } else {\r\n                _tax = 0;\r\n            }\r\n        }\r\n\r\n        uint256 taxAmount = (amount * _tax) / 100;\r\n        uint256 transferAmount = amount - taxAmount;\r\n\r\n        _balance[from] = _balance[from] - amount;\r\n        _balance[address(this)] = _balance[address(this)] + taxAmount;\r\n\r\n        uint256 cAmount = _balance[address(this)];\r\n        if (!inSwapAndLiquify && from != uniswapV2Pair && to == uniswapV2Pair && swapEnabled && _buyCount > _preventSwapBefore) {\r\n            if (cAmount >= taxSwapThreshold) {\r\n                swapTokensForEth(min(amount,min(cAmount,maxTaxSwap)));\r\n                uint256 ethBalance = address(this).balance;\r\n                if (ethBalance > ethMinimumTransfer) {\r\n                    sendETHToFee(ethBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        _balance[to] = _balance[to] + transferAmount;\r\n\r\n        if (taxAmount > 0) {\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a > b) ? b : a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 _tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendETHToFee(uint256 _amount) private {\r\n        uint256 feeAmount = _amount;\r\n        taxWallet.transfer(feeAmount);\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == taxWallet, \"Invalid permission\");\r\n\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    function rescueStuckETH() external {\r\n        require(_msgSender() == taxWallet);\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance > 0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    function rescueStuckToken(address _address) external {\r\n        require(_msgSender() == taxWallet);\r\n        require(IERC20(_address).balanceOf(address(this)) > 0, \"Can't withdraw 0\");\r\n        IERC20(_address).transfer(taxWallet, IERC20(_address).balanceOf(address(this)));\r\n    }\r\n\r\n    function openTrade() external payable onlyOwner {\r\n        require(!swapEnabled, \"token is already enabled for trading\");\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function setMaxLimits() external onlyOwner {\r\n        maxAmountPerTx = onePercent * 100;\r\n        maxAmountPerWallet = onePercent * 100;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rescueStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMaxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JOELonETH", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bff9ed8b553bc4c356bd6e5a5356a65b546ba93ae40ddc05e447efd3e4d331b1"}