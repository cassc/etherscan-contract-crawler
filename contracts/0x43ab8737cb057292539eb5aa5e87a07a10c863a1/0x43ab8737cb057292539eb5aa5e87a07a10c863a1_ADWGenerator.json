{"SourceCode": "// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ADWKeyless.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract ADWGenerator is Ownable {\r\n    event NewCreation(\r\n        address indexed _from,\r\n        uint256 tokenId,\r\n        bytes32 submission\r\n    );\r\n    struct Fees {\r\n        uint256 basic_fee;\r\n        uint256 drippy_fee;\r\n        uint256 legendary_fee;\r\n        uint256 mythic_fee;\r\n    }\r\n\r\n    mapping(uint256 => bytes32) public submissions;\r\n    mapping(uint256 => uint256) public customFees;\r\n    bool public creationisActive = true;\r\n    Fees public creationFees =\r\n        Fees(0.0033 ether, 0.0066 ether, 0.0099 ether, 0.0132 ether);\r\n\r\n    uint256 public constant BASIC = 0;\r\n    uint256 public constant DRIPPY = 1;\r\n    uint256 public constant LEGENDARY = 2;\r\n    uint256 public constant MYTHIC = 3;\r\n\r\n    modifier whenCreationActive() {\r\n        require(creationisActive, \"Public burn is not active\");\r\n        _;\r\n    }\r\n\r\n    function togglePublicBurnActive() public onlyOwner {\r\n        creationisActive = !creationisActive;\r\n    }\r\n\r\n    function setCreationFee(\r\n        uint256 newBasic,\r\n        uint256 newDrippy,\r\n        uint256 newLegendary,\r\n        uint256 newMythic\r\n    ) public onlyOwner {\r\n        creationFees.basic_fee = newBasic;\r\n        creationFees.drippy_fee = newDrippy;\r\n        creationFees.legendary_fee = newLegendary;\r\n        creationFees.mythic_fee = newMythic;\r\n    }\r\n\r\n    function createCustomFee(uint256 tier, uint256 price) public onlyOwner {\r\n        require(tier > 3, \"invalid tier\");\r\n        customFees[tier] = price;\r\n    }\r\n\r\n    function submit(\r\n        uint256 tokenId,\r\n        uint256 tier,\r\n        bytes32 submission\r\n    ) public payable whenCreationActive {\r\n        if (tier == BASIC) {\r\n            require(msg.value >= creationFees.basic_fee, \"Invalid fee\");\r\n        } else if (tier == DRIPPY) {\r\n            require(msg.value >= creationFees.drippy_fee, \"Invalid fee\");\r\n        } else if (tier == LEGENDARY) {\r\n            require(msg.value >= creationFees.legendary_fee, \"Invalid fee\");\r\n        } else if (tier == MYTHIC) {\r\n            require(msg.value >= creationFees.mythic_fee, \"Invalid fee\");\r\n        } else if (customFees[tier] > 0) {\r\n            require(msg.value >= customFees[tier], \"Invalid fee\");\r\n        } else {\r\n            revert(\"Invalid fee\");\r\n        }\r\n\r\n        submissions[tokenId] = submission;\r\n        emit NewCreation(msg.sender, tokenId, submission);\r\n    }\r\n\r\n    function withdrawMoney() external onlyOwner {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed\");\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"submission\",\"type\":\"bytes32\"}],\"name\":\"NewCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRIPPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MYTHIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createCustomFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basic_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drippy_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"legendary_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mythic_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationisActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDrippy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLegendary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMythic\",\"type\":\"uint256\"}],\"name\":\"setCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"submissions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"submission\",\"type\":\"bytes32\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicBurnActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ADWGenerator", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7461386131aba1117eb7fbc5930756d7b66d7a5106a5099dfb5a5aa9895a0a60"}