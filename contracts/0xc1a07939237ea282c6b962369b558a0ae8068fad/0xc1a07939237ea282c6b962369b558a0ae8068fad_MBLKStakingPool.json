{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-12-15\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-12-11\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```solidity\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```solidity\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\r\n * to enforce additional security measures for this role.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: 1_sLP_1.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LPStaked is ERC20, Ownable,Pausable, AccessControl {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n    constructor() ERC20(\"LPStaked\", \"sLP\") {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(MINTER_ROLE, msg.sender);\r\n     }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n   \r\n    /**\r\n     * @dev Burns a specific amount of tokens from the sender's balance.\r\n     * @param amount The amount of tokens to be burned.\r\n     */\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address's balance.\r\n     * @param account The address whose tokens will be burned.\r\n     * @param amount The amount of tokens to be burned.\r\n     */\r\n    function burnFrom(address account, uint256 amount) external onlyRole(MINTER_ROLE) {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens and assigns them to the target address.\r\n     * @param account The address to which new tokens will be minted.\r\n     * @param amount The amount of tokens to be minted.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyRole(MINTER_ROLE) {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants the minter role to a new address.\r\n     * @param account The address to which the minter role will be granted.\r\n     */\r\n    function grantMinterRole(address account) external onlyOwner {\r\n        grantRole(MINTER_ROLE, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes the minter role from an address.\r\n     * @param account The address from which the minter role will be revoked.\r\n     */\r\n    function revokeMinterRole(address account) external onlyOwner {\r\n        revokeRole(MINTER_ROLE, account);\r\n    }\r\n     function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n        internal\r\n        whenNotPaused\r\n        override\r\n    {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}\r\n\r\n \r\n// File: 1_sMBLK_1.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MBLKStaked is ERC20, Ownable,Pausable, AccessControl {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n    constructor() ERC20(\"MBLKStaked\", \"sMBLK\") {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(MINTER_ROLE, msg.sender);\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n   \r\n    /**\r\n     * @dev Burns a specific amount of tokens from the sender's balance.\r\n     * @param amount The amount of tokens to be burned.\r\n     */\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address's balance.\r\n     * @param account The address whose tokens will be burned.\r\n     * @param amount The amount of tokens to be burned.\r\n     */\r\n    function burnFrom(address account, uint256 amount) external onlyRole(MINTER_ROLE) {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens and assigns them to the target address.\r\n     * @param account The address to which new tokens will be minted.\r\n     * @param amount The amount of tokens to be minted.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyRole(MINTER_ROLE) {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants the minter role to a new address.\r\n     * @param account The address to which the minter role will be granted.\r\n     */\r\n    function grantMinterRole(address account) external onlyOwner {\r\n        grantRole(MINTER_ROLE, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes the minter role from an address.\r\n     * @param account The address from which the minter role will be revoked.\r\n     */\r\n    function revokeMinterRole(address account) external onlyOwner {\r\n        revokeRole(MINTER_ROLE, account);\r\n    }\r\n     function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n        internal\r\n        whenNotPaused\r\n        override\r\n    {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}\r\n\r\n \r\n// File: NewStakingCOntract.sol\r\n\r\n\r\n\r\npragma solidity 0.8.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MBLKStakingPool is  Ownable,ReentrancyGuard {\r\n    \r\n    using SafeERC20 for IERC20;\r\n    IERC20 public immutable mblkToken;     \r\n    MBLKStaked public immutable smblkToken;  \r\n    LPStaked public immutable slpToken;  \r\n    IERC20 public immutable lpToken;       \r\n  \r\n    // Struct to represent MBLK staking details for a user\r\n    struct MBLKStake {\r\n        uint256 mblkAmount;           // Amount of MBLK tokens staked\r\n        uint256 startTimestamp;       // Timestamp when the staking started\r\n        uint256 endTime;              // Timestamp when the staking ends\r\n        uint256 claimedReward;        // Amount of claimed rewards by the user\r\n        uint256 lastClaimedTimeStamp; // Timestamp of the last claimed reward\r\n        uint256 smblkMinted;          // Amount of sMBLK (staking MBLK) tokens minted as rewards\r\n        uint256 cycleId;              // Identifier of the staking cycle\r\n        // uint256 withdrawPeriod;\r\n        uint256 lastEndTime;\r\n    }\r\n    \r\n    // Struct representing the LP staking details for a user\r\n    struct LPStake {\r\n        uint256 lpAmount;               // Amount of liquidity provider tokens staked\r\n        uint256 startTimestamp;         // Timestamp when the LP staking started\r\n        uint256 endTime;                // Timestamp when the LP staking ends\r\n        uint256 claimedReward;          // Amount of claimed rewards by the LP\r\n        uint256 lastClaimedTimeStamp;   // Timestamp of the last claimed reward by the LP\r\n        uint256 slpMinted;              // Amount of sLP (staking LP) tokens minted as rewards\r\n        uint256 cycleId;                // Identifier of the staking cycle for LPs\r\n        // uint256 withdrawPeriod;\r\n        uint256 lastEndTime;\r\n    }\r\n\r\n   // Struct representing information related to a staking cycle\r\n    struct StakingInfo {\r\n        uint256 cycleId;           // Identifier for the staking cycle\r\n        uint256 blockTimeStamp;    // Timestamp of the block when the staking cycle was created\r\n        uint256 totalReward;       // Total reward allocated for current cycle \r\n        uint256 totalLpStaked;     // Total amount of Liquidity Provider (LP) tokens staked in this cycle\r\n        uint256 totalMblkStaked;   // Total amount of MBLK tokens staked in this cycle\r\n    }\r\n\r\n    // Mapping to store MBLKStake struct information associated with user addresses\r\n    mapping(address => MBLKStake) public userMblkStakes;\r\n\r\n    // Mapping to store LPStake struct information associated with user addresses\r\n    mapping(address => LPStake) public userLpStakes;\r\n\r\n    // Mapping to manage administrator privileges for specific addresses\r\n    mapping(address => bool) public isAdmin;\r\n\r\n    // Mapping to maintain StakingInfo struct data corresponding to specific cycle IDs\r\n    mapping(uint256 => StakingInfo) public stakingInfo;\r\n\r\n    // Total amount of MBLK tokens staked \r\n    uint256 public totalMblkStaked;\r\n\r\n    // Total amount of LP tokens staked \r\n    uint256 public totalLpStaked;\r\n\r\n    uint256 totalClaimedRewards;\r\n\r\n    // Total amount of sMBLK tokens minted  \r\n    uint256 public totalSmblkMinted;\r\n\r\n    // Total amount of sLP tokens minted  \r\n    uint256 public totalSlpMinted;\r\n\r\n    // Current cycle identifier\r\n    uint256 public currentCycleId;\r\n\r\n    // Timestamp of the last dynamic reward set\r\n    uint256 public lastDynamicRewardSet;\r\n\r\n    // Minimum time required to calculate rewards\r\n    uint256 public calculateRewardMinimumTime;\r\n\r\n    // Time allocated for fixed rewards\r\n    uint256 public  timeForFixedReward;\r\n\r\n    // Time allocated for dynamic rewards\r\n    uint256 public  timeForDynamicReward;\r\n\r\n    // Timestamp of the last fixed reward setting\r\n    uint256 public lastFixedRewardSet;\r\n\r\n    // Timestamp of the last total reward setting\r\n    uint256 public lastTotalRewardSetTimestamp;\r\n\r\n    // Fixed reward amount\r\n    uint256 public fixedReward;\r\n\r\n    // Dynamic reward amount\r\n    uint256 public dynamicReward;\r\n\r\n    // Total rewards across the platform\r\n    uint256 public totalRewards;\r\n\r\n    // Minimum duration for stake locking\r\n    uint256 public minimumStakeDuration;\r\n\r\n    // Boolean to check if rewards are set or not\r\n//bool isRewardSent;\r\n\r\n    //Boolean for Pause and unpause\r\n    bool isPaused;\r\n\r\n    // Wallet address for collecting fees\r\n    address public feesCollectionWallet;\r\n\r\n    // Percentage of fees charged  \r\n    uint256 public feesPercentage;\r\n\r\n    // mblk Reward percentage\r\n    uint256 public constant mblkRewardPercentage = 30;\r\n\r\n    // Lp Reward Percentage\r\n    uint256 public constant lpRewardPercentage = 70;\r\n\r\n    uint256 public unstakingPeriod;\r\n\r\n    \r\n    \r\n \r\n    //Events\r\n    event StakeMblk(address indexed user,uint256 mblkAmount);\r\n    event StakeLp(address indexed user,uint256 lpAmount);\r\n    event ClaimedRewardsMblk(address indexed user,uint256 rewardsAmount);\r\n    event ClaimedRewardsLp(address indexed user,uint256 rewardsAmount);\r\n    event MblkStakeUpdated(address userAddress, uint256 amount);\r\n    event LpStakeUpdated(address userAddress, uint256 amount);\r\n    event WithdrawnMblk(address indexed user, uint256 rewardsAmount);\r\n    event WithdrawnLp(address indexed user, uint256 rewardsAmount); \r\n    event FeesPercentageSet(uint256 percentage);\r\n    event TotalRewardSet(uint256 totalReward);\r\n    event DynamicRewardSet(uint256 dynamicReward);\r\n    event FixedRewardSet(uint256 newFixedReward);\r\n    event MinimumStakeDurationSet(uint256 duration);\r\n    event AdminRemoved( address adminToRemove);\r\n    event AdminAdded( address adminAddress);\r\n    event UpdatedCycleId(uint256 currentCycleId);\r\n    event WithDrawnAll(address owner,uint256 BalanceMBLK);\r\n    event FeesWalletSet(address feesCollectionWallet);\r\n    event MinimumCalculateRewardTimeSet(uint256 time);\r\n    event PausedStaking();\r\n    event UnpausedStaking();\r\n\r\n    /*\r\n    * @dev Modifer which allows ADMIN LIST TO ACCESS THE FUNCTION\r\n    */ \r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender], \"Only admins can call this function\");\r\n        _;\r\n    } \r\n\r\n    constructor(\r\n        address mblkTokenAddress,              // Address of the MBLK token contract\r\n        address lptokenAddress,                // Address of the LP token contract\r\n        address feesCollectionWalletAddress    // Address to collect fees or rewards\r\n    ) payable {\r\n        mblkToken = IERC20(mblkTokenAddress);  // Initializing MBLK token contract interface\r\n        lpToken = IERC20(lptokenAddress);      // Initializing LP token contract interface\r\n        feesCollectionWallet = feesCollectionWalletAddress; // Assigning the fees collection wallet address\r\n        smblkToken = new MBLKStaked();         // Deploying a new instance of MBLKStaked contract\r\n        slpToken = new LPStaked();             // Deploying a new instance of LPStaked contract\r\n        // isRewardSent = false;                  // Setting the initial state for isRewardSent\r\n        //calculateRewardMinimumTime = 6 hours;    // Setting the calculateRewardMinimumTime as 6 hours\r\n        isPaused = false; \r\n        feesPercentage = 30;\r\n        unstakingPeriod = 3 days;\r\n        isAdmin[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Stake a specified amount of MBLK tokens.\r\n     * @param mblkAmount The amount of MBLK tokens to stake.\r\n     *\r\n     * Requirements:\r\n     * - The staked amount must be greater than 0.\r\n     * - The user must not have an active MBLK stake (mblkAmount must be 0).\r\n     * - Transfer MBLK tokens from the sender to the staking contract.\r\n     * - Record stake-related information including start and end times, rewards, and cycle ID.\r\n     * - Mint and distribute SMBLK tokens to the staker.\r\n     * - Update the total MBLK staked and total SMBLK minted.\r\n     *\r\n     * Emits a StakeMBLK event to log the staking action.\r\n    */\r\n    function stakeMBLK(uint256 mblkAmount) nonReentrant external {\r\n        require(isPaused == false,\"Contract is paused\");\r\n        require(mblkAmount > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            mblkToken.balanceOf(msg.sender) >= mblkAmount,\r\n            \"Not enough Balance\"\r\n        );\r\n        require(\r\n            userMblkStakes[msg.sender].mblkAmount == 0,\r\n            \"Existing active stake found\"\r\n        ); \r\n        MBLKStake memory userStake = userMblkStakes[msg.sender];    \r\n\r\n        mblkToken.safeTransferFrom(msg.sender, address(this), mblkAmount);\r\n        uint256 blockTimeStamp = block.timestamp;   \r\n        totalMblkStaked += mblkAmount;\r\n        userStake.mblkAmount = mblkAmount;\r\n        userStake.startTimestamp = blockTimeStamp;\r\n        userStake.endTime = blockTimeStamp + minimumStakeDuration;\r\n        \r\n        userStake.lastEndTime = blockTimeStamp + minimumStakeDuration;\r\n       // userStake.withdrawPeriod = blockTimeStamp + minimumStakeDuration + unstakingPeriod;\r\n\r\n        userStake.lastClaimedTimeStamp = blockTimeStamp;\r\n        smblkToken.mint(msg.sender,mblkAmount);  \r\n        totalSmblkMinted += mblkAmount;\r\n        userStake.cycleId = currentCycleId + 1;\r\n        userStake.smblkMinted += mblkAmount;\r\n        userMblkStakes[msg.sender] = userStake;\r\n        emit StakeMblk(msg.sender,mblkAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Stake a specified amount of LP (Liquidity Provider) tokens.\r\n     * @param lpAmount The amount of LP tokens to stake.\r\n     *\r\n     * Requirements:\r\n     * - The staked amount must be greater than 0.\r\n     * - The sender must have a sufficient balance of LP tokens to stake.\r\n     * - The user must not have an active LP stake (lpAmount must be 0).\r\n     * - Transfer LP tokens from the sender to the staking contract.\r\n     * - Record stake-related information including start and end times, rewards, and cycle ID.\r\n     * - Mint and distribute SLP tokens to the staker.\r\n     * - Update the total LP tokens staked and total SLP tokens minted.\r\n     *\r\n     * Emits a StakeLP event to log the staking action.\r\n    */  \r\n    function stakeLP(uint256 lpAmount) nonReentrant external {\r\n        require(isPaused == false,\"Contract is paused\");\r\n        require(lpAmount > 0, \"Amount must be greater than 0 \" );\r\n        require(\r\n            lpToken.balanceOf(msg.sender) >= lpAmount,\r\n            \"Not enough Balance\"\r\n        );\r\n        require(\r\n            userLpStakes[msg.sender].lpAmount == 0,\r\n            \"Existing LP Stake Found\"\r\n        );\r\n        LPStake memory userStake = userLpStakes[msg.sender];\r\n        lpToken.safeTransferFrom(msg.sender,address(this), lpAmount);\r\n        totalLpStaked += lpAmount;\r\n        uint256 blockTimeStamp = block.timestamp;\r\n        userStake.lpAmount += lpAmount;\r\n        userStake.startTimestamp = blockTimeStamp;\r\n        userStake.endTime = blockTimeStamp + minimumStakeDuration;\r\n        userStake.lastEndTime = blockTimeStamp + minimumStakeDuration;\r\n       // userStake.withdrawPeriod = blockTimeStamp + minimumStakeDuration + unstakingPeriod;\r\n\r\n        userStake.lastClaimedTimeStamp = blockTimeStamp;\r\n        slpToken.mint(msg.sender,lpAmount);          //Staked LP Token MInted to User Address\r\n        totalSlpMinted += lpAmount;\r\n        userStake.slpMinted += lpAmount;\r\n        userStake.cycleId = currentCycleId + 1; \r\n        userLpStakes[msg.sender] = userStake;\r\n        emit StakeLp(msg.sender, lpAmount); \r\n    }\r\n\r\n     /**\r\n     * @dev Update a user's stake with additional tokens.\r\n     * @param amount The amount of tokens to add to the user's stake.\r\n     * @param isMblk A boolean indicating whether the stake is for MBLK (true) or LP (false).\r\n     *\r\n     * Requirements:\r\n     * - The added amount must be greater than 0.\r\n     * - The calculated rewards must be claimed first (calculatedRewards must be 0).\r\n     * - If the stake is for MBLK, the user must have an existing active MBLK stake; if the stake is for LP, the user must have an existing active LP stake.\r\n     * - Transfer tokens from the sender to the staking contract.\r\n     * - Update stake-related information, including start and end times, rewards, and cycle ID.\r\n     *\r\n     * Emits an MblkStakeUpdated event if updating an MBLK stake, or an LpStakeUpdated event if updating an LP stake, to log the stake update.\r\n    */\r\n    function updateStake(uint256 amount, bool isMblk) public {\r\n        require(isPaused == false,\"Contract is paused\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        if(isMblk){\r\n            require(\r\n                mblkToken.balanceOf(msg.sender)>= amount,\r\n                \"Not enough balance\"\r\n            );\r\n            MBLKStake memory userStake = userMblkStakes[msg.sender];    \r\n            uint256 calculatedRewards = calculateReward(msg.sender,0,true);\r\n            require(calculatedRewards == 0, \"Please claim the rewards first\");\r\n            require(userStake.mblkAmount > 0,\"Existing active stake not found\");\r\n            mblkToken.safeTransferFrom(msg.sender, address(this), amount);\r\n            totalMblkStaked += amount;\r\n            userStake.mblkAmount += amount;\r\n            uint256 blockTimeStamp = block.timestamp; \r\n            userStake.startTimestamp = blockTimeStamp;\r\n            userStake.endTime = blockTimeStamp + minimumStakeDuration;\r\n            userStake.lastEndTime = blockTimeStamp + minimumStakeDuration;\r\n            smblkToken.mint(msg.sender, amount);   \r\n            totalSmblkMinted += amount;\r\n            //userStake.withdrawPeriod = blockTimeStamp + minimumStakeDuration + unstakingPeriod;\r\n            userStake.smblkMinted += amount;\r\n            userStake.cycleId = currentCycleId + 1; \r\n            userMblkStakes[msg.sender] = userStake;\r\n            emit MblkStakeUpdated(msg.sender,amount);   \r\n        } else {\r\n            require(\r\n                lpToken.balanceOf(msg.sender)>= amount,\r\n                \"Not enough balance\"\r\n            );\r\n            LPStake memory userStake = userLpStakes[msg.sender];\r\n            uint256 calculatedRewards = calculateReward(msg.sender,0,false);\r\n            require(calculatedRewards == 0, \"Please claim the rewards first\");\r\n            require(userStake.lpAmount > 0, \"Existing active stake not found\");\r\n            lpToken.safeTransferFrom(msg.sender,address(this), amount);  \r\n            totalLpStaked += amount;\r\n            userStake.lpAmount += amount;\r\n            uint256 blockTimeStamp = block.timestamp; \r\n            userStake.startTimestamp = blockTimeStamp;\r\n            userStake.endTime = blockTimeStamp + minimumStakeDuration;\r\n            userStake.lastEndTime = blockTimeStamp + minimumStakeDuration;\r\n           // userStake.withdrawPeriod = blockTimeStamp + minimumStakeDuration + unstakingPeriod;\r\n\r\n            slpToken.mint(msg.sender, amount);  \r\n            totalSlpMinted += amount;\r\n            userStake.slpMinted += amount;\r\n            userStake.cycleId = currentCycleId + 1;\r\n            userLpStakes[msg.sender] = userStake;\r\n\r\n            emit LpStakeUpdated(msg.sender,amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the rewards for a user based on their staking Parcentage.\r\n     * @param userAddress The address of the user.\r\n     * @param isMblk A boolean indicating whether the user has MBLK staked (true) or LP staked (false).\r\n     * @return The calculated reward amount for the user \r\n     *\r\n     * Requirements:\r\n     * - The user must have a staking amount greater than 0.\r\n     * - The owner/admin must have set the minimum time for calculating rewards (calculateRewardMinimumTime).\r\n     *\r\n     * The function calculates rewards by iterating through cycles, determining the user's stake percentage, and applying it to the total rewards.\r\n     * The calculated reward is based on the User Stake Percentage each cycle.\r\n    */\r\n    function calculateReward(address userAddress,uint256 uptoCycleId, bool isMblk) public view returns(uint256){ \r\n        require(isPaused == false,\"Contract is paused\");\r\n        require(\r\n            uptoCycleId <= currentCycleId,\r\n            \"uptoCycleId is out of range\"\r\n        );\r\n        // require(\r\n        //     calculateRewardMinimumTime > 0,\r\n        //     \"Owner Haven't Set calculate Reward minimum Time\"\r\n        // );\r\n        uint256 totalRewardsCalculated;\r\n        uint256 _iether = 10**18;\r\n        uint256 terminationValue;\r\n       // uint256 blockTimeStamp = block.timestamp;\r\n\r\n        if( uptoCycleId == 0){\r\n            terminationValue = currentCycleId;\r\n        }else{\r\n            terminationValue = uptoCycleId;\r\n        }\r\n\r\n        if(isMblk){\r\n            MBLKStake memory userStake = userMblkStakes[userAddress];\r\n            require(\r\n                userStake.mblkAmount > 0,\r\n                \"No Stakes Found\"\r\n            ); \r\n            //uint256 elapsedTimeFromLastClaimed = blockTimeStamp - userStake.lastClaimedTimeStamp;\r\n            // if(elapsedTimeFromLastClaimed >= calculateRewardMinimumTime){\r\n                for(uint256 i = userStake.cycleId; i <= terminationValue; i++){\r\n                    if(stakingInfo[i].totalMblkStaked == 0 ){ continue; }\r\n                    uint256 totalRewardFromStakeInfo = stakingInfo[i].totalReward;\r\n                    uint256 totalMblkStakedFromStakeInfo = stakingInfo[i].totalMblkStaked;\r\n                    uint256 mblkStakePercentage = (userStake.mblkAmount * 100 * _iether)/(totalMblkStakedFromStakeInfo);\r\n                    uint256 numerator = mblkStakePercentage * totalRewardFromStakeInfo * _iether * mblkRewardPercentage;\r\n                    uint256 denominator = _iether * 10000 * _iether; \r\n                    uint256 totalRewardsPerCycle = numerator/denominator;\r\n                    totalRewardsCalculated += totalRewardsPerCycle;\r\n                }\r\n                return totalRewardsCalculated;\r\n            // } else {\r\n            //     return 0;\r\n            // }\r\n        } else {\r\n            LPStake memory userStake = userLpStakes[userAddress];\r\n            require(\r\n                userStake.lpAmount > 0,\r\n                \"No Stakes Found\"\r\n            );\r\n           // uint256 elapsedTimeFromLastClaimed = blockTimeStamp - userStake.lastClaimedTimeStamp;\r\n          //  if(elapsedTimeFromLastClaimed >= calculateRewardMinimumTime){\r\n                for(uint256 i = userStake.cycleId; i <= terminationValue; i++){\r\n                    if(stakingInfo[i].totalLpStaked == 0 ) { continue; }\r\n                    uint256 totalRewardFromStakeInfo = stakingInfo[i].totalReward;\r\n                    uint256 totalLpStakedFromStakeInfo = stakingInfo[i].totalLpStaked;\r\n                    uint256 lpStakePercentage = ( userStake.lpAmount * 100 * _iether )/(totalLpStakedFromStakeInfo);\r\n                    uint256 numerator = lpStakePercentage * totalRewardFromStakeInfo * _iether * lpRewardPercentage;\r\n                    uint256 denominator = _iether * 10000 * _iether;  \r\n                    uint256 totalRewardsPerCycle = numerator/denominator;\r\n                    totalRewardsCalculated += totalRewardsPerCycle;\r\n                }\r\n            return totalRewardsCalculated;\r\n            // }else{\r\n            //     return 0;\r\n            // }\r\n        }\r\n    }\r\n\r\n    function getUserFees(uint256 amount) public view returns(uint256) {\r\n        if(amount == 0 ) return 0;\r\n        uint256 numerator  = (amount * feesPercentage * 1e18);\r\n        uint256 denominator = ( 10000 * 1e18);\r\n        uint256 feeAmount = numerator/denominator;\r\n        return feeAmount;\r\n    }\r\n\r\n    function getMinimumWithdrawableAmount(bool isMblk)  public view returns(uint256){\r\n        if(isMblk){\r\n        //MBLKStake memory userStake = userMblkStakes[msg.sender];\r\n        uint256 minimumWithdrawableAmount = (userMblkStakes[msg.sender].mblkAmount * 10)/ 100;\r\n        return minimumWithdrawableAmount;\r\n        }else{\r\n       // LPStake memory userStake = userLpStakes[msg.sender];\r\n        uint256 minimumWithdrawbleAmount = (userLpStakes[msg.sender].lpAmount * 10)/100;\r\n        return minimumWithdrawbleAmount;\r\n        }\r\n        // if(userMblkStakes[msg.sender].mblkAmount > 0){\r\n        //     return (userMblkStakes[msg.sender].mblkAmount * 10)/100;\r\n        // }else if(userLpStakes[msg.sender].lpAmount > 0){\r\n        //     return (userLpStakes[msg.sender].lpAmount / 10);\r\n        // }else{\r\n        //     return 0;\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * @dev Claim MBLK rewards for a user.\r\n     *\r\n     * This function allows a user to claim their MBLK rewards based on their staking Parcentage. The rewards are calculated using the 'calculateReward' function.\r\n     * A fee is deducted from the total rewards, and the remaining amount is transferred to the user. The fee amount is also transferred to a specified feesCollectionWallet.\r\n     *\r\n     * Requirements:\r\n     * - The user must have an active MBLK stake.\r\n     * - The calculated reward must be greater than 0.\r\n     *\r\n     * Emits a ClaimedRewardsMblk event to log the claimed rewards.\r\n     * \r\n     * \r\n     * \r\n    */\r\n\r\n    function claimRewardsMBLK(uint256 uptoCycleId) nonReentrant public{\r\n        require(isPaused == false,\"Contract is paused\");\r\n        uint256 cycleIdConsidered;\r\n        MBLKStake memory userStake = userMblkStakes[msg.sender];\r\n        require(\r\n            uptoCycleId <= currentCycleId,\r\n            \"uptoCycleId is greated than currentCycleId\"\r\n        );\r\n        require(\r\n            userStake.mblkAmount > 0,\r\n            \"No single MBLK stake found\"\r\n        );\r\n        if( uptoCycleId == 0){\r\n            cycleIdConsidered = currentCycleId;\r\n        }else {\r\n            cycleIdConsidered = uptoCycleId;\r\n        }\r\n        uint256 blockTimeStamp = block.timestamp;\r\n\r\n        if( userStake.endTime < blockTimeStamp){\r\n            if( (userStake.endTime + unstakingPeriod) == blockTimeStamp){\r\n                userStake.endTime = userStake.lastEndTime + minimumStakeDuration;\r\n                userStake.lastEndTime = userStake.endTime;\r\n            }\r\n            if( (userStake.endTime + unstakingPeriod) > blockTimeStamp){\r\n                userStake.lastEndTime = userStake.endTime;\r\n                userStake.endTime = userStake.lastEndTime + minimumStakeDuration;\r\n             }\r\n            if((userStake.endTime + unstakingPeriod) < blockTimeStamp){\r\n                uint256 diff = blockTimeStamp - userStake.endTime;\r\n                uint256 res = (diff / minimumStakeDuration) + 1;\r\n                uint256 daysPassed = minimumStakeDuration * res; \r\n                userStake.endTime = userStake.endTime + daysPassed; \r\n             \r\n                uint256 value = userStake.endTime - minimumStakeDuration;\r\n                if (blockTimeStamp >= (userStake.startTimestamp + value + unstakingPeriod)){\r\n                    userStake.lastEndTime = userStake.endTime;\r\n                }else{\r\n                    userStake.lastEndTime = userStake.endTime - minimumStakeDuration;\r\n                }\r\n            }\r\n        }\r\n        uint256 rewards = calculateReward(msg.sender,uptoCycleId,true);\r\n        require( rewards > 0, \"No rewards to claim\");\r\n        require(\r\n            mblkToken.balanceOf(address(this)) - (totalMblkStaked) >= rewards,\r\n            \"not enough balance in the contract\"\r\n        ); \r\n  \r\n         mblkToken.safeTransfer(msg.sender, rewards); \r\n        userStake.lastClaimedTimeStamp = blockTimeStamp;\r\n        userStake.claimedReward += rewards;\r\n        userStake.cycleId = cycleIdConsidered + 1;\r\n        totalClaimedRewards += rewards;\r\n        userMblkStakes[msg.sender] = userStake;\r\n\r\n        emit ClaimedRewardsMblk(msg.sender, rewards);\r\n    }\r\n\r\n \r\n\r\n    /**\r\n     * @dev Claim LP token rewards for a user.\r\n     *\r\n     * This function allows a user to claim their LP token rewards based on their staking Parcentage. The rewards are calculated using the 'calculateReward' function.\r\n     * A fee is deducted from the total rewards, and the remaining amount is transferred to the user. The fee amount is also transferred to a specified feesCollectionWallet.\r\n     *\r\n     * Requirements:\r\n     * - The user must have an active LP token stake.\r\n     * - The calculated reward must be greater than 0.\r\n     * - the rewards must be less then or equal to balanceOf totalRewards\r\n     *\r\n     * Emits a ClaimedRewardsLp event to log the claimed rewards.\r\n    */\r\n    function claimRewardsLP(uint256 uptoCycleId) nonReentrant public{\r\n        require(isPaused == false,\"Contract is paused\");\r\n        uint256 cycleIdConsidered;\r\n        LPStake memory userStake = userLpStakes[msg.sender];\r\n        require(\r\n            uptoCycleId <= currentCycleId,\r\n            \"uptoCycleId is greated than currentCycleId\"\r\n        );\r\n        require(\r\n            userStake.lpAmount > 0,\r\n            \"No LP Stake found\"\r\n        );\r\n        if(uptoCycleId == 0){\r\n            cycleIdConsidered = currentCycleId;\r\n        }else {\r\n            cycleIdConsidered = uptoCycleId;\r\n        }\r\n        uint256 blockTimeStamp = block.timestamp;\r\n        if( userStake.endTime < blockTimeStamp){\r\n            if( (userStake.endTime + unstakingPeriod) == blockTimeStamp){\r\n                userStake.endTime = userStake.lastEndTime + minimumStakeDuration;\r\n                userStake.lastEndTime = userStake.endTime;\r\n            }\r\n            if( (userStake.endTime + unstakingPeriod) > blockTimeStamp){\r\n                userStake.lastEndTime = userStake.endTime;\r\n                userStake.endTime = userStake.lastEndTime + minimumStakeDuration;\r\n             }\r\n            if((userStake.endTime + unstakingPeriod) < blockTimeStamp){\r\n                uint256 diff = blockTimeStamp - userStake.endTime;\r\n                uint256 res = (diff / minimumStakeDuration) + 1;\r\n                uint256 daysPassed = minimumStakeDuration * res; \r\n                userStake.endTime = userStake.endTime + daysPassed; \r\n             \r\n                uint256 value = userStake.endTime - minimumStakeDuration;\r\n                if (blockTimeStamp >= (userStake.startTimestamp + value + unstakingPeriod)){\r\n                    userStake.lastEndTime = userStake.endTime;\r\n                }else{\r\n                    userStake.lastEndTime = userStake.endTime - minimumStakeDuration;\r\n                }\r\n            }\r\n        }\r\n        uint256 rewards = calculateReward(msg.sender,cycleIdConsidered,false);\r\n        require( rewards > 0 , \"No rewards to claim\");\r\n        require(\r\n            mblkToken.balanceOf(address(this)) - totalMblkStaked >= rewards,\r\n            \"not enough balance in the contract\"\r\n        );\r\n         \r\n         mblkToken.safeTransfer(msg.sender, rewards);\r\n         userStake.claimedReward += rewards;\r\n        userStake.cycleId = cycleIdConsidered + 1;\r\n        userStake.lastClaimedTimeStamp = block.timestamp;\r\n        totalClaimedRewards += rewards;\r\n        userLpStakes[msg.sender] = userStake;\r\n\r\n        emit ClaimedRewardsLp(msg.sender, rewards);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a specified amount of MBLK tokens from the user's stake.\r\n     * @param amountTowithdraw The amount of MBLK tokens to withdraw.\r\n     *\r\n     * Requirements:\r\n     * - The user must have an active MBLK stake.\r\n     * - The calculated rewards must be claimed first (calculatedRewards must be 0).\r\n     * - The withdrawal can only occur after the minimum stake duration has passed.\r\n     * - The contract must have a sufficient balance of MBLK tokens.\r\n     *\r\n     * Effects:\r\n     * - Transfers the specified amount of MBLK tokens to the user.\r\n     * - Burns an equivalent amount of SMBLK tokens from the user's balance.\r\n     * - Updates the user's stake and total MBLK and SMBLK minted values.\r\n     *\r\n     * Emits a WithdrawnMblk event to log the MBLK withdrawal.\r\n    */\r\n    function withdrawMBLK(uint256 amountTowithdraw) nonReentrant external {\r\n        MBLKStake memory userStake = userMblkStakes[msg.sender];\r\n        uint256 blockTimeStamp = block.timestamp;\r\n       require(blockTimeStamp >= userStake.lastEndTime && blockTimeStamp <= (userStake.lastEndTime + unstakingPeriod),\"Can withdraw only in unstaking period\");\r\n        require(amountTowithdraw > 0,\"Amount to withdraw should be greater than 0\");\r\n        if( isPaused == false){\r\n                require(\r\n                        userStake.lastEndTime < block.timestamp,\r\n                        \"Can not withdraw before Minimum Stake Duration\"\r\n                );\r\n                uint256 calculatedRewards = calculateReward(msg.sender,0,true);   \r\n                require(calculatedRewards == 0,\"Please claim the rewards first\");\r\n        } \r\n        require(userStake.mblkAmount > 0,\"No active stake found\");\r\n        require(\r\n            userStake.mblkAmount >= amountTowithdraw,\r\n            \"Not enough MBLK Staked\"\r\n        );\r\n        require(\r\n            mblkToken.balanceOf(address(this)) >= amountTowithdraw,\r\n            \"Contract balance is not enough\"\r\n        );\r\n        \r\n        uint256 feeAmount = getUserFees(amountTowithdraw);\r\n        require(feeAmount > 0, \"Please add more Amount to withdraw\");\r\n        require(amountTowithdraw > ((userStake.mblkAmount * 9) / 100),\"Cannot withdraw less than 10 %\");\r\n        uint256 amountToSend = amountTowithdraw - feeAmount;\r\n        \r\n        mblkToken.safeTransfer(msg.sender, amountToSend);\r\n        mblkToken.safeTransfer(feesCollectionWallet,feeAmount);\r\n       // mblkToken.safeTransfer(msg.sender, amountTowithdraw);  \r\n        smblkToken.burnFrom(msg.sender, amountTowithdraw);\r\n            userStake.mblkAmount -= amountTowithdraw;\r\n            userStake.smblkMinted -= amountTowithdraw;\r\n            totalSmblkMinted -= amountTowithdraw;\r\n            totalMblkStaked -= amountTowithdraw;\r\n            userMblkStakes[msg.sender] = userStake;\r\n            emit WithdrawnMblk(msg.sender,amountTowithdraw); \r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a specified amount of LP (Liquidity Provider) tokens from the user's stake.\r\n     * @param amountToWithdraw The amount of LP tokens to withdraw.\r\n     *\r\n     * Requirements:\r\n     * - The user must have an active LP token stake.\r\n     * - The calculated rewards must be claimed first (calculatedRewards must be 0).\r\n     * - The withdrawal can only occur after the minimum stake duration has passed.\r\n     * - The contract must have a sufficient balance of LP tokens and SMBLK tokens.\r\n     *\r\n     * Effects:\r\n     * - Transfers the specified amount of LP tokens to the user.\r\n     * - Burns an equivalent amount of SMBLK tokens from the user's balance.\r\n     * - Updates the user's stake, total LP staked, and total SLP minted values.\r\n     *\r\n     * Emits a WithdrawnLp event to log the LP token withdrawal.\r\n    */\r\n    function withdrawLP(uint256 amountToWithdraw) nonReentrant external {\r\n        LPStake memory userStake = userLpStakes[msg.sender];\r\n        uint256 blockTimeStamp = block.timestamp;\r\n          require(blockTimeStamp >= userStake.lastEndTime && blockTimeStamp <= (userStake.lastEndTime + unstakingPeriod),\"Can withdraw only in unstaking period\");\r\n        require(amountToWithdraw > 0,\"Amount to withdraw should be greater than 0\");\r\n        if( isPaused == false){\r\n                require(\r\n                        userStake.lastEndTime < block.timestamp,\r\n                        \"Can not withdraw before Minimum Stake Duration\"\r\n                );\r\n                uint256 calculatedRewards = calculateReward(msg.sender,0,false);   \r\n                require(calculatedRewards == 0,\"Please claim the rewards first\");\r\n        } \r\n        require(userStake.lpAmount > 0,\"No active stake found\");\r\n        require(userStake.lpAmount >= amountToWithdraw,\"Not enough LP Staked\");\r\n        require(\r\n            userStake.lpAmount >= amountToWithdraw, \r\n            \"Contract balance is not enough\"\r\n        );\r\n        require(\r\n            slpToken.balanceOf(msg.sender) >= amountToWithdraw,\r\n            \"user smblk Balance is not enough\"\r\n        );\r\n        require(\r\n            lpToken.balanceOf(address(this)) >= amountToWithdraw,\r\n            \"Contract Balance is not enough\"\r\n        );\r\n\r\n        slpToken.burnFrom(msg.sender,amountToWithdraw);\r\n\r\n        uint256 feeAmount = getUserFees(amountToWithdraw);\r\n        require(feeAmount > 0, \"Please add more Amount to withdraw\");\r\n        require(amountToWithdraw > ((userStake.lpAmount * 9) / 100),\"Cannot withdraw less than 10 %\");\r\n        uint256 amountToSend = amountToWithdraw - feeAmount;\r\n        \r\n        lpToken.safeTransfer(msg.sender, amountToSend);\r\n        lpToken.safeTransfer(feesCollectionWallet,feeAmount);\r\n        userStake.lpAmount -= amountToWithdraw;\r\n        totalLpStaked -= amountToWithdraw;\r\n        totalSlpMinted -= amountToWithdraw;\r\n        userStake.slpMinted -= amountToWithdraw;\r\n        userLpStakes[msg.sender] = userStake;\r\n        emit WithdrawnLp(msg.sender, amountToWithdraw);\r\n    }\r\n \r\n    /**\r\n     * @dev Update the current staking cycle information.\r\n     *\r\n     * This function increments the currentCycleId, records the block timestamp, and updates the staking information for the new cycle, including total rewards, LP tokens staked, and MBLK tokens staked.\r\n     *\r\n     * Requirements:\r\n     * - Only the admin can call this function.\r\n     *\r\n     * Emits an UpdatedCycleId event with the new cycle's identifier.\r\n    */  \r\n    function updateCycleId() public onlyAdmin{\r\n       // require(isRewardSent == true,\"Rewards are not set\");\r\n        currentCycleId++;\r\n        uint256 blockTimeStamp = block.timestamp;\r\n        StakingInfo memory currentStakeInfo = stakingInfo[currentCycleId];\r\n        currentStakeInfo.cycleId =  currentCycleId;\r\n        currentStakeInfo.blockTimeStamp = blockTimeStamp;\r\n        currentStakeInfo.totalReward = totalRewards;\r\n        currentStakeInfo.totalLpStaked = totalLpStaked;\r\n        currentStakeInfo.totalMblkStaked = totalMblkStaked;\r\n        stakingInfo[currentCycleId] = currentStakeInfo;\r\n       // isRewardSent = false;\r\n\r\n        emit UpdatedCycleId(currentCycleId);\r\n    }\r\n \r\n    /**\r\n     * @dev Set a fixed reward value for staking.\r\n     * @param newFixedReward The fixed reward value to be set.\r\n     *\r\n     * Requirements:\r\n     * - Only the admin can call this function.\r\n     * - The time since the last fixed reward update must be greater than or equal to 'timeForFixedReward'.\r\n     *\r\n     * Effects:\r\n     * - Updates the 'fixedReward' value.\r\n     * - Calls 'setTotalRewards' to set total rewards based on the fixed reward.\r\n     *\r\n     * Emits a FixedRewardSet event to log the update of the fixed reward value.\r\n    */\r\n    function setFixedReward(address vestingAddress, uint256 newFixedReward) external onlyAdmin{\r\n        uint256 blocktimeStamp = block.timestamp;\r\n        uint256 timeSpent = blocktimeStamp - lastFixedRewardSet; \r\n        require(timeSpent >= timeForFixedReward, \"Can not set before Minimum Time\");\r\n        mblkToken.safeTransferFrom(vestingAddress,address(this),newFixedReward);\r\n        lastFixedRewardSet = blocktimeStamp;\r\n        fixedReward = newFixedReward;\r\n        setTotalRewards();\r\n\r\n        emit FixedRewardSet(newFixedReward);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set the dynamic reward value, but only if enough time has passed since the last update.\r\n     * @param newDynamicReward The new dynamic reward value to set.\r\n     *\r\n     * Requirements:\r\n     * - The function can only be called by the admin.\r\n     * - The time elapsed since the last dynamic reward update must be greater than or equal to `   timeForDynamicReward`.\r\n     * - If the time requirement is met, the dynamic reward value is updated, and `setTotalRewards` is called.\r\n     *\r\n     * Emits a DynamicRewardSet event with the new dynamic reward value.\r\n    */\r\n    function setDynamicReward(address vestingAddress, uint256 newDynamicReward) external onlyAdmin{\r\n        uint256 blocktimeStamp = block.timestamp;\r\n        uint256 timeSpent = blocktimeStamp - lastDynamicRewardSet;\r\n        require(timeSpent >= timeForDynamicReward,\"Can not set Before minimum time\");\r\n        mblkToken.safeTransferFrom(vestingAddress,address(this),newDynamicReward);\r\n        lastDynamicRewardSet = blocktimeStamp;\r\n        dynamicReward = newDynamicReward; \r\n        setTotalRewards();\r\n        emit DynamicRewardSet(newDynamicReward);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the total rewards for staking.\r\n     *\r\n     * Effects:\r\n     * - Calculates the 'totalRewards' by adding the 'fixedReward' and 'dynamicReward'.\r\n     * - Records the timestamp when the total rewards were last set.\r\n     *\r\n     * Emits a TotalRewardSet event to log the update of the total rewards.\r\n    */\r\n    function setTotalRewards() internal {\r\n        totalRewards = fixedReward + dynamicReward;\r\n        lastTotalRewardSetTimestamp = block.timestamp;\r\n        emit TotalRewardSet(totalRewards);\r\n    }\r\n \r\n    function setRewards(uint256 newFixedReward, uint256 newDynamicReward) public onlyAdmin{\r\n        require(newFixedReward > 0 , \"newFixedReward cannot be 0\");\r\n        require(newDynamicReward > 0 , \"newDynamicReward cannot be 0\");\r\n        fixedReward = newFixedReward;\r\n        dynamicReward = newDynamicReward;\r\n        totalRewards = fixedReward + dynamicReward;\r\n        emit TotalRewardSet(totalRewards);\r\n    }\r\n \r\n\r\n    function setRewardTime(uint256 timeForRewards) public onlyOwner{\r\n        timeForDynamicReward = timeForRewards;\r\n        timeForFixedReward = timeForRewards;\r\n    }\r\n    /**\r\n     * @dev Set the fees percentage for reward distribution.\r\n     * @param percentage The fees percentage to be set (0-10000, where 10000 represents 100%).\r\n     *\r\n     * Requirements:\r\n     * - Only the admin can call this function.\r\n     * - The provided percentage must be within the valid range (0-10000).\r\n     *\r\n     * Effects:\r\n     * - Updates the 'feesPercentage' for fee calculations.\r\n     *\r\n     * Emits a FeesPercentageSet event to log the update of the fees percentage.\r\n    */\r\n    function setFeesPercentage(uint256 percentage) external onlyOwner{\r\n        require(percentage > 0 && percentage <= 1500, \"Percentage out of range (0-1500)\");\r\n        feesPercentage = percentage;\r\n        emit FeesPercentageSet(percentage);\r\n    } \r\n\r\n    /**\r\n     * @dev Add a new address as an admin.\r\n     * @param newAdmin The address to be added as a new admin.\r\n     *\r\n     * Requirements:\r\n     * - Only the contract owner can call this function.\r\n     *\r\n     * Effects:\r\n     * - Grants administrative privileges to the specified address by setting 'isAdmin[newAdmin]' to true.\r\n     *\r\n     * Emits an AdminAdded event to log the addition of a new admin.\r\n    */\r\n    function addAdmin(address newAdmin) public onlyOwner {\r\n        isAdmin[newAdmin] = true;\r\n        emit AdminAdded(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an address from the list of admins.\r\n     * @param adminAddress The address to be removed from the list of admins.\r\n     *\r\n     * Requirements:\r\n     * - Only the contract owner can call this function.\r\n     *\r\n     * Effects:\r\n     * - Revokes administrative privileges from the specified address by setting 'isAdmin[adminAddress]' to false.\r\n     *\r\n     * Emits an AdminRemoved event to log the removal of an admin.\r\n     */\r\n    function removeAdmin(address adminAddress) public onlyOwner{\r\n        isAdmin[adminAddress] = false; \r\n        emit AdminRemoved(adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the minimum stake duration in minutes.\r\n     * @param durationInMinutes The minimum stake duration in minutes to be set.\r\n     *\r\n     * Requirements:\r\n     * - The provided duration must be greater than 0.\r\n     *\r\n     * Effects:\r\n     * - Converts the input duration in minutes to seconds and updates the 'minimumStakeDuration' variable.\r\n     *\r\n     * Emits a MinimumStakeDurationSet event to log the update of the minimum stake duration.\r\n    */\r\n    function setMinimumStakeDuration(uint256 durationInMinutes) external onlyOwner{\r\n        require(durationInMinutes > 0, \"Given Value is 0\"); \r\n        minimumStakeDuration = durationInMinutes * 60;\r\n        emit MinimumStakeDurationSet(durationInMinutes);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the address where collected fees will be sent.\r\n     * @param walletAddress The address where collected fees will be transferred to.\r\n     *\r\n     * Requirements:\r\n     * - Only the contract owner can call this function.\r\n     *\r\n     * Effects:\r\n     * - Updates the 'feesCollectionWallet' with the provided wallet address.\r\n    */\r\n    function setFeeWalletAddress(address walletAddress) public onlyOwner{\r\n        feesCollectionWallet = walletAddress;\r\n        emit FeesWalletSet(walletAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the minimum time duration for calculating rewards.\r\n     * @param durationInMinutes The minimum time duration in minutes for calculating rewards.\r\n     *\r\n     * Requirements:\r\n     * - Only the contract owner can call this function.\r\n     *\r\n     * Effects:\r\n     * - Converts the input duration in minutes to seconds and updates 'calculateRewardMinimumTime'.\r\n    */\r\n    function setMinimumCalculateRewardTime(uint256 durationInMinutes) public onlyOwner{  \r\n        require(durationInMinutes > 0, \"calculate reward minimum time can not be 0\");    \r\n        calculateRewardMinimumTime = durationInMinutes * 60;\r\n        emit MinimumCalculateRewardTimeSet(calculateRewardMinimumTime);\r\n    }\r\n\r\n\r\n    function setUnStakingPeriod(uint256 durationInMinutes) public onlyOwner{\r\n        require(durationInMinutes > 0,\"cannot be 0\");\r\n        unstakingPeriod = durationInMinutes * 60;       \r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw MBLK from the contract by the owner.\r\n     *\r\n     * Requirements:\r\n     * - Only the contract owner can call this function.\r\n     *\r\n     * Effects:\r\n     * - Transfers the amount of Rewards Deposited of MBLK by owner from the contract to the owner's address.\r\n     *\r\n     * Emits a WithDrawnAll event to log the withdrawal of MBLK \r\n    */ \r\n    function withdrawOnlyOwner() public onlyOwner{\r\n        uint256 ownersDepositedFundsAsRewards = mblkToken.balanceOf(address(this)) - totalMblkStaked;\r\n        mblkToken.safeTransfer(msg.sender, ownersDepositedFundsAsRewards);\r\n        emit WithDrawnAll(msg.sender,ownersDepositedFundsAsRewards );\r\n    }\r\n\r\n    function pauseStaking() public onlyOwner{\r\n        require( isPaused == false, \"Already Paused\");\r\n        isPaused = true;\r\n        emit PausedStaking();\r\n    }\r\n\r\n    function unPauseStaking() public onlyOwner {\r\n        require( isPaused == true,\"Already Unpaused\");\r\n        isPaused = false;\r\n        emit UnpausedStaking();\r\n    }\r\n    /**\r\n     * @dev Get the total amount of SMBLK (Staked MBLK) minted.\r\n     * @return The total number of SMBLK tokens that have been minted as rewards.\r\n    */\r\n    function totalSMBLK()public view returns(uint256){\r\n        return totalSmblkMinted;\r\n    }\r\n \r\n    /**\r\n     * @dev Get the total amount of SLP (Staked LP) tokens minted.\r\n     * @return The total number of SLP tokens that have been minted as rewards.\r\n    */\r\n    function totalSLP()public view returns(uint256){\r\n        return totalSlpMinted;\r\n    }\r\n\r\n    /**\r\n     * @dev Get information about a user's MBLK stake.\r\n     * @param userAddress The address of the user.\r\n     * @return (\r\n     *   1. The amount of MBLK staked by the user,\r\n     *   2. The start timestamp of the stake,\r\n     *   3. The end timestamp of the stake,\r\n     *   4. The claimed reward amount,\r\n     *   5. The last claimed timestamp,\r\n     *   6. The amount of Staked MBLK minted,\r\n     * )\r\n    */\r\n    function userMBLKStakeInformation( \r\n        address userAddress\r\n    ) \r\n        public \r\n        view \r\n        returns(\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256, \r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        MBLKStake memory userStake = userMblkStakes[userAddress];\r\n        return(\r\n            userStake.mblkAmount,\r\n            userStake.startTimestamp,\r\n            userStake.endTime,\r\n            userStake.claimedReward, \r\n            userStake.lastClaimedTimeStamp,\r\n            userStake.smblkMinted\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get information about a user's LP stake.\r\n     * @param userAddress The address of the user.\r\n     * @return (\r\n     *   1. The amount of LP tokens staked by the user,\r\n     *   2. The start timestamp of the stake,\r\n     *   3. The end timestamp of the stake,\r\n     *   4. The claimed reward amount,\r\n     *   5. The last claimed timestamp,\r\n     *   6. The amount of Staked LP tokens minted,\r\n     * )\r\n    */\r\n    function userLPStakesInformation( \r\n        address userAddress\r\n    ) \r\n        public \r\n        view \r\n        returns(\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n         \r\n        )\r\n    {\r\n        LPStake memory userStake = userLpStakes[userAddress]; \r\n        return(\r\n            userStake.lpAmount,\r\n            userStake.startTimestamp,\r\n            userStake.endTime,\r\n            userStake.claimedReward, \r\n            userStake.lastClaimedTimeStamp, \r\n            userStake.slpMinted\r\n           \r\n        ); \r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of rewards available for distribution.\r\n     * @return The total number of rewards \r\n     */\r\n\r\n    function getTotalRewards()public view returns(uint256) {\r\n        return totalRewards;\r\n    } \r\n\r\n    function getTotalClaimedRewards() public view returns (uint256 ){\r\n        return totalClaimedRewards;\r\n    }\r\n \r\n    /**\r\n     * @dev Get staking information for a specific cycle.\r\n     * @param _cycleId The identifier of the staking cycle to retrieve information for.\r\n     * @return (\r\n     *   1. The cycle ID,\r\n     *   2. The block timestamp when the cycle was updated,\r\n     *   3. The total amount of MBLK tokens staked in the cycle,\r\n     *   4. The total reward associated with the cycle,\r\n     *   5. The total amount of LP tokens staked in the cycle.\r\n     * )\r\n     *\r\n     * Requirements:\r\n     * - The provided _cycleId must be within a valid range (not exceeding currentCycleId).\r\n     */\r\n    function getStakingInfo(\r\n        uint256 _cycleId\r\n    ) \r\n        public \r\n        view \r\n        returns(\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    { \r\n        require(_cycleId <= currentCycleId, \"Cycle Id is out of Range\");\r\n        return(\r\n            stakingInfo[_cycleId].cycleId,\r\n            stakingInfo[_cycleId].blockTimeStamp,\r\n            stakingInfo[_cycleId].totalMblkStaked,\r\n            stakingInfo[_cycleId].totalReward, \r\n            stakingInfo[_cycleId].totalLpStaked\r\n        ); \r\n    } \r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mblkTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lptokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feesCollectionWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminToRemove\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewardsLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewardsMblk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicReward\",\"type\":\"uint256\"}],\"name\":\"DynamicRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"FeesPercentageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feesCollectionWallet\",\"type\":\"address\"}],\"name\":\"FeesWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFixedReward\",\"type\":\"uint256\"}],\"name\":\"FixedRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LpStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MblkStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MinimumCalculateRewardTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"MinimumStakeDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PausedStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"StakeLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mblkAmount\",\"type\":\"uint256\"}],\"name\":\"StakeMblk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"TotalRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpausedStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentCycleId\",\"type\":\"uint256\"}],\"name\":\"UpdatedCycleId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BalanceMBLK\",\"type\":\"uint256\"}],\"name\":\"WithDrawnAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnMblk\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uptoCycleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMblk\",\"type\":\"bool\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRewardMinimumTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uptoCycleId\",\"type\":\"uint256\"}],\"name\":\"claimRewardsLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uptoCycleId\",\"type\":\"uint256\"}],\"name\":\"claimRewardsMBLK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollectionWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isMblk\",\"type\":\"bool\"}],\"name\":\"getMinimumWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cycleId\",\"type\":\"uint256\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUserFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDynamicRewardSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFixedRewardSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalRewardSetTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mblkRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mblkToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDynamicReward\",\"type\":\"uint256\"}],\"name\":\"setDynamicReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"setFeeWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setFeesPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFixedReward\",\"type\":\"uint256\"}],\"name\":\"setFixedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInMinutes\",\"type\":\"uint256\"}],\"name\":\"setMinimumCalculateRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInMinutes\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeForRewards\",\"type\":\"uint256\"}],\"name\":\"setRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFixedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDynamicReward\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInMinutes\",\"type\":\"uint256\"}],\"name\":\"setUnStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slpToken\",\"outputs\":[{\"internalType\":\"contract LPStaked\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smblkToken\",\"outputs\":[{\"internalType\":\"contract MBLKStaked\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"stakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mblkAmount\",\"type\":\"uint256\"}],\"name\":\"stakeMBLK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLpStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMblkStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeForDynamicReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeForFixedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMblkStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSMBLK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSlpMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSmblkMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCycleId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMblk\",\"type\":\"bool\"}],\"name\":\"updateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userLPStakesInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLpStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slpMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userMBLKStakeInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMblkStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mblkAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"smblkMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTowithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawMBLK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOnlyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MBLKStakingPool", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f47245e9a3ba3dca8b004e34afc1290b1d435a520000000000000000000000008180eb8d90023fd91b7254eb442bf3d09d0042de000000000000000000000000f56c9be0c43fef3b648f5b63a1274b12eeb945d6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b5238863d9c7280935da6daa40f884a82c3d1c9fa091414489cad77bcd9417f3"}