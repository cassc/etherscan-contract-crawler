{"SourceCode": "// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.4.2\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File contracts/NAMXVesting.sol\r\npragma solidity 0.8.19;\r\n\r\ncontract NAMXvesting is ReentrancyGuard {\r\n\r\n    struct LockData{\r\n        uint256 amounts;\r\n        uint256 timestamps;\r\n    }\r\n    \r\n    bool public initialLocksSet;\r\n    \r\n    mapping(address => LockData[]) public lockData;\r\n    mapping(address => uint256) public withdrawn;\r\n    mapping(address => uint256) public lockedTokens;\r\n    mapping(address => uint256) public claimTime;\r\n\r\n    IERC20 public TargetToken;\r\n    \r\n\r\n    constructor(IERC20 tokenAddress) {\r\n        TargetToken = tokenAddress;\r\n    }\r\n\r\n    function _setUpLock(address _account, uint256 _amount, uint256 _timestamp) private returns (uint256){\r\n        lockData[_account].push(LockData(_amount, _timestamp));\r\n        lockedTokens[_account] = _amount;\r\n        claimTime[_account] = _timestamp;\r\n        return _amount;\r\n    }\r\n\r\n    function _setUpLocks() private {\r\n        uint256 tokensNeeded = 0;\r\n\r\n        // 120 million - unlock on Thursday May 01 2025 00:00:00 GMT+0000\r\n        tokensNeeded += _setUpLock(0xCAD2594b9F4c9FE14b5f143bA80ADB260C30A1e7, 120_000_000 ether, 1704042000); \r\n        tokensNeeded += _setUpLock(0xD3A4b021688ECDfe824A7E1d75378aea0327325F, 120_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0x958857f700c804464b9313de463C495fd49669A8, 120_000_000 ether, 1704042000);\r\n\r\n        //24 million\r\n        tokensNeeded += _setUpLock(0x4DC804E6965a2f7F106aCD783697648676C8d3A8, 24_000_000 ether, 1704042000);\r\n        \r\n        \r\n        //18 million\r\n        tokensNeeded += _setUpLock(0x2E91E11CfdC44605dA1A3F21cd90e425d1E87c76, 18_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0xc9Bf46b0dF89810E1F0305c33AA757e3C06d2917, 18_000_000 ether, 1704042000);\r\n        \r\n\r\n        //12 million\r\n        tokensNeeded += _setUpLock(0x3aea9D189f955317A137909cd5b6D55920126acE, 12_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0x36cdc8AA3Ef883F3023c1f339A9bC4d783D12398, 12_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0x7A053926f816F442721a1a50b72d3FaF05D61764, 12_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0x2a7813A24F3F65C5cE28fe867bae4AddfF39538d, 12_000_000 ether, 1704042000);\r\n        \r\n        //6 million\r\n        tokensNeeded += _setUpLock(0x8131d7167E051c455c5f9beD56129c8D43AB2C87, 6_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0x9391F927600BA804135c10E9e3Bf3D994d126953, 6_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0x71b8b2b035528a31A435500E61Ab3CAADf02BE79, 6_000_000 ether, 1704042000);\r\n        tokensNeeded += _setUpLock(0x4b666c25dc3854b54E636cc318FCb3C11D61eb9d, 6_000_000 ether, 1704042000);\r\n\r\n\r\n\r\n        require(TargetToken.transferFrom(msg.sender, address(this), tokensNeeded), \"Please approve tokens first and check max transaction limits\");\r\n    }\r\n\r\n    function setUpAutomaticLocks() external {\r\n        require(!initialLocksSet, \"Initial locks already set\");\r\n\r\n        _setUpLocks();\r\n\r\n        initialLocksSet = true;\r\n    }\r\n\r\n    function lock(uint256 amount, uint256 releaseTimestamp) external {\r\n        _lock(msg.sender, amount, releaseTimestamp);\r\n    }\r\n\r\n    function lockFor(address account, uint256 amount, uint256 releaseTimestamp) external {\r\n        _lock(account, amount, releaseTimestamp);\r\n    }\r\n\r\n    function _lock(address _account, uint256 _amount, uint256 _releaseTimestamp) internal {\r\n        require(lockData[_account].length == 0, \"Lock/Vesting for this address already exist\");\r\n\r\n        _setUpLock(_account, _amount, _releaseTimestamp);\r\n\r\n        require(TargetToken.transferFrom(msg.sender, address(this), _amount), \"Please approve tokens first\");\r\n    }\r\n\r\n\r\n    function vest(uint256[] memory amounts, uint256[] memory releaseTimestamps) external {\r\n        _vest(msg.sender, amounts, releaseTimestamps);\r\n    }\r\n\r\n    function vestFor(address account, uint256[] memory amounts, uint256[] memory releaseTimestamps) external {\r\n        _vest(account, amounts, releaseTimestamps);\r\n    }\r\n\r\n    function _vest(address account, uint256[] memory _amounts, uint256[] memory _releaseTimestamps) internal {\r\n        require(lockData[account].length == 0, \"Lock/Vesting for this address already exist\");\r\n        require(_amounts.length == _releaseTimestamps.length, \"Wrong amount of variables\");\r\n\r\n        for(uint i=1; i<_releaseTimestamps.length; i++) {\r\n            require(_releaseTimestamps[i-1] < _releaseTimestamps[i], \"Wrong sequence of timestamps\");\r\n        }\r\n\r\n        uint256 tokensNeeded = 0;\r\n\r\n        for(uint i=0; i<_amounts.length; i++) {\r\n            tokensNeeded += _setUpLock(account, _amounts[i], _releaseTimestamps[i]);\r\n        }\r\n\r\n        require(TargetToken.transferFrom(msg.sender, address(this), tokensNeeded), \"Please approve tokens first\");\r\n    }\r\n\r\n    function canClaim(address account) public view returns (uint256) {\r\n        uint256 amount = 0;\r\n        for (uint i=0; i<lockData[account].length; i++) {\r\n            if (lockData[account][i].timestamps <= block.timestamp) {\r\n                amount += lockData[account][i].amounts;\r\n            } else break;\r\n        }\r\n\r\n        return amount - withdrawn[account];\r\n    }\r\n\r\n    function claim() external nonReentrant {\r\n        uint256 claimable = canClaim(msg.sender);\r\n\r\n        require(TargetToken.transfer(msg.sender, claimable), \"Cannot transfer tokens\");\r\n        \r\n        withdrawn[msg.sender] += claimable;\r\n        lockedTokens[msg.sender] = 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TargetToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLocksSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUpAutomaticLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"vestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NAMXvesting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000eda43fa2f35ea174a7e9b73658b18a7da00adf38", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://27aa818855e7ff45c8fd7a71aeeeab460166a29c0e29d0a6ff2e14fbbdff24e2"}