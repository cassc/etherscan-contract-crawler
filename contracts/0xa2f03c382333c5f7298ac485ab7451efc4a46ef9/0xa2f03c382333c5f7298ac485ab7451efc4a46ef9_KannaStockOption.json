{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKannaStockOption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n *   __\\n *  |  | ___\\\\|/_     ____    ____  _\\\\|/_\\n *  |  |/ /\\\\__  \\\\   /    \\\\  /    \\\\ \\\\__  \\\\\\n *  |    <  / __ \\\\_|   |  \\\\|   |  \\\\ / __ \\\\_\\n *  |__|_ \\\\(____  /|___|  /|___|  /(____  /\\n *       \\\\/     \\\\/      \\\\/      \\\\/      \\\\/\\n *            __                    __                       __   .__\\n *    _______/  |_   ____    ____  |  | __   ____  ______  _/  |_ |__|  ____    ____\\n *   /  ___/\\\\   __\\\\ /  _ \\\\ _/ ___\\\\ |  |/ /  /  _ \\\\ \\\\____ \\\\ \\\\   __\\\\|  | /  _ \\\\  /    \\\\\\n *   \\\\___ \\\\  |  |  (  <_> )\\\\  \\\\___ |    <  (  <_> )|  |_> > |  |  |  |(  <_> )|   |  \\\\\\n *  /____  > |__|   \\\\____/  \\\\___  >|__|_ \\\\  \\\\____/ |   __/  |__|  |__| \\\\____/ |___|  /\\n *       \\\\/                     \\\\/      \\\\/         |__|                            \\\\/\\n *\\n *  @title KNN Stock Option (Vesting)\\n *  @author KANNA Team\\n *  @custom:github  https://github.com/kanna-coin\\n *  @custom:site https://kannacoin.io\\n *  @custom:discord https://discord.kannacoin.io\\n */\\ninterface IKannaStockOption is IERC165 {\\n    enum Status {\\n        Cliff,\\n        Lock,\\n        Vesting\\n    }\\n\\n    function totalVested() external view returns (uint256);\\n    function vestingForecast(uint256 date) external view returns (uint256);\\n    function availableToWithdraw() external view returns (uint256);\\n    function status() external view returns (Status);\\n    function withdraw(uint256 amountToWithdraw) external;\\n    function finalize() external;\\n    function abort() external;\\n}\\n\"\r\n    },\r\n    \"contracts/KannaStockOption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IKannaStockOption} from \\\"./interfaces/IKannaStockOption.sol\\\";\\n\\n/**\\n *   __\\n *  |  | ___\\\\|/_     ____    ____  _\\\\|/_\\n *  |  |/ /\\\\__  \\\\   /    \\\\  /    \\\\ \\\\__  \\\\\\n *  |    <  / __ \\\\_|   |  \\\\|   |  \\\\ / __ \\\\_\\n *  |__|_ \\\\(____  /|___|  /|___|  /(____  /\\n *       \\\\/     \\\\/      \\\\/      \\\\/      \\\\/\\n *            __                    __                       __   .__\\n *    _______/  |_   ____    ____  |  | __   ____  ______  _/  |_ |__|  ____    ____\\n *   /  ___/\\\\   __\\\\ /  _ \\\\ _/ ___\\\\ |  |/ /  /  _ \\\\ \\\\____ \\\\ \\\\   __\\\\|  | /  _ \\\\  /    \\\\\\n *   \\\\___ \\\\  |  |  (  <_> )\\\\  \\\\___ |    <  (  <_> )|  |_> > |  |  |  |(  <_> )|   |  \\\\\\n *  /____  > |__|   \\\\____/  \\\\___  >|__|_ \\\\  \\\\____/ |   __/  |__|  |__| \\\\____/ |___|  /\\n *       \\\\/                     \\\\/      \\\\/         |__|                            \\\\/\\n *\\n *  @title KNN Stock Option (Vesting)\\n *  @author KANNA Team\\n *  @custom:github  https://github.com/kanna-coin\\n *  @custom:site https://kannacoin.io\\n *  @custom:discord https://discord.kannacoin.io\\n */\\ncontract KannaStockOption is IKannaStockOption, Ownable, ReentrancyGuard {\\n    IERC20 _token;\\n    uint256 _startDate;\\n    uint256 _daysOfVesting;\\n    uint256 _daysOfCliff;\\n    uint256 _daysOfLock;\\n    uint256 _percentOfGrant;\\n    uint256 _amount;\\n    address _beneficiary;\\n    uint256 _grantAmount;\\n    uint256 _withdrawn;\\n    uint256 _lockEndDate;\\n    uint256 _cliffEndDate;\\n    uint256 _vestingEndDate;\\n    bool _finalized;\\n    uint256 _finalizedAt;\\n    bool _initialized;\\n    uint256 _initializedAt;\\n    uint256 _lastWithdrawalTime;\\n\\n    event Initialize(\\n        address tokenAddress,\\n        uint256 startDate,\\n        uint256 daysOfVesting,\\n        uint256 daysOfCliff,\\n        uint256 daysOfLock,\\n        uint256 percentOfGrant,\\n        uint256 amount,\\n        address beneficiary,\\n        uint256 initializedAt\\n    );\\n\\n    event Withdraw(address indexed beneficiary, uint256 amount, uint256 elapsed);\\n\\n    event Finalize(address indexed initiator, uint256 amount, uint256 elapsed);\\n\\n    event Abort(address indexed beneficiary, uint256 amount);\\n\\n    function initialize(\\n        address tokenAddress,\\n        uint256 startDate,\\n        uint256 daysOfVesting,\\n        uint256 daysOfCliff,\\n        uint256 daysOfLock,\\n        uint256 percentOfGrant,\\n        uint256 amount,\\n        address beneficiary\\n    ) external {\\n        if (owner() != address(0)) {\\n            _checkOwner();\\n        }\\n        require(_initialized == false, \\\"KannaStockOption: contract already initialized\\\");\\n        require(startDate > 0, \\\"KannaStockOption: startDate is zero\\\");\\n        require(daysOfVesting > 0, \\\"KannaStockOption: daysOfVesting is zero\\\");\\n        require(amount > 0, \\\"KannaStockOption: amount is zero\\\");\\n        require(beneficiary != address(0), \\\"KannaStockOption: beneficiary is zero\\\");\\n        require(\\n            daysOfCliff + daysOfLock <= daysOfVesting,\\n            \\\"KannaStockOption: daysOfCliff plus daysOfLock overflows daysOfVesting\\\"\\n        );\\n        require(percentOfGrant <= 100, \\\"KannaStockOption: percentOfGrant is greater than 100\\\");\\n\\n        _token = IERC20(tokenAddress);\\n\\n        require(_token.allowance(_msgSender(), address(this)) >= amount, \\\"KannaStockOption: insufficient allowance\\\");\\n        require(_token.transferFrom(_msgSender(), address(this), amount), \\\"KannaStockOption: insufficient balance\\\");\\n\\n        _startDate = startDate;\\n        _daysOfVesting = daysOfVesting;\\n        _daysOfCliff = daysOfCliff;\\n        _daysOfLock = daysOfLock;\\n        _percentOfGrant = percentOfGrant;\\n        _amount = amount;\\n        _beneficiary = beneficiary;\\n\\n        _grantAmount = (_amount * _percentOfGrant) / 100;\\n\\n        _cliffEndDate = startDate + (daysOfCliff * 1 days);\\n        _lockEndDate = _cliffEndDate + (daysOfLock * 1 days);\\n        _vestingEndDate = startDate + (daysOfVesting * 1 days);\\n\\n        _finalized = false;\\n        _withdrawn = 0;\\n        _initialized = true;\\n        _initializedAt = block.timestamp;\\n\\n        emit Initialize(\\n            tokenAddress,\\n            startDate,\\n            daysOfVesting,\\n            daysOfCliff,\\n            daysOfLock,\\n            percentOfGrant,\\n            amount,\\n            beneficiary,\\n            block.timestamp\\n        );\\n\\n        if (owner() == address(0)) {\\n            _transferOwnership(_msgSender());\\n        }\\n    }\\n\\n    function timestamp() public view returns (uint256) {\\n        return _finalized ? _finalizedAt : block.timestamp;\\n    }\\n\\n    function totalVested() public view initialized returns (uint256) {\\n        if (timestamp() < _cliffEndDate) return 0;\\n        if (timestamp() >= _vestingEndDate) return _amount;\\n\\n        return (_amount * (timestamp() - _startDate)) / (_vestingEndDate - _startDate);\\n    }\\n\\n    function vestingForecast(uint256 date) public view initialized returns (uint256) {\\n        require(date >= _startDate, \\\"KannaStockOption: date is before startDate\\\");\\n\\n        if (date < _cliffEndDate) return 0;\\n        if (date >= _vestingEndDate) return _amount;\\n\\n        return (_amount * (date - _startDate)) / (_vestingEndDate - _startDate);\\n    }\\n\\n    function availableToWithdraw() public view initialized returns (uint256) {\\n        if (timestamp() < _cliffEndDate) return 0;\\n        if (timestamp() >= _vestingEndDate) return _amount - _withdrawn;\\n\\n        if (block.timestamp < _lockEndDate && totalVested() > _grantAmount) return _grantAmount - _withdrawn;\\n\\n        return totalVested() - _withdrawn;\\n    }\\n\\n    function finalize() public nonReentrant initialized {\\n        require(\\n            _msgSender() == owner() || _msgSender() == _beneficiary,\\n            \\\"KannaStockOption: caller is not the owner or beneficiary\\\"\\n        );\\n        require(_finalized == false, \\\"KannaStockOption: contract already finalized\\\");\\n\\n        uint256 availableAmount = availableToWithdraw();\\n\\n        if (availableAmount > 0) {\\n            _withdrawn += availableAmount;\\n            _token.transfer(_beneficiary, availableAmount);\\n        }\\n\\n        uint256 leftover = _amount - totalVested();\\n\\n        if (leftover > 0) {\\n            _token.transfer(owner(), leftover);\\n        }\\n\\n        _finalizedAt = block.timestamp;\\n        _finalized = true;\\n\\n        emit Finalize(_msgSender(), availableAmount, _finalizedAt - _initializedAt);\\n    }\\n\\n    function status() public view returns (Status) {\\n        if (timestamp() < _cliffEndDate) return Status.Cliff;\\n        if (timestamp() >= _vestingEndDate) return Status.Vesting;\\n\\n        return Status.Lock;\\n    }\\n\\n    function maxGrantAmount() public view returns (uint256) {\\n        return _grantAmount;\\n    }\\n\\n    function withdraw(uint256 amountToWithdraw) public nonReentrant initialized {\\n        require(_msgSender() == _beneficiary, \\\"KannaStockOption: caller is not the beneficiary\\\");\\n        require(amountToWithdraw > 0, \\\"KannaStockOption: invalid amountToWithdraw\\\");\\n        require(\\n            amountToWithdraw <= availableToWithdraw(),\\n            \\\"KannaStockOption: amountToWithdraw is greater than availableToWithdraw\\\"\\n        );\\n\\n        uint256 withdrawDate = block.timestamp;\\n\\n        require(withdrawDate - _lastWithdrawalTime >= 1 days, \\\"KannaStockOption: Only one withdrawal allowed per day\\\");\\n\\n        _withdrawn += amountToWithdraw;\\n        _token.transfer(_beneficiary, amountToWithdraw);\\n\\n        emit Withdraw(_msgSender(), amountToWithdraw, withdrawDate - _initializedAt);\\n\\n        if (_withdrawn == _amount) {\\n            _finalizedAt = withdrawDate;\\n            _finalized = true;\\n\\n            emit Finalize(_msgSender(), amountToWithdraw, _finalizedAt - _initializedAt);\\n        }\\n\\n        _lastWithdrawalTime = withdrawDate;\\n    }\\n\\n    function abort() public nonReentrant {\\n        require(_token.balanceOf(address(this)) > 0, \\\"KannaStockOption: contract has no balance\\\");\\n        require(_msgSender() == _beneficiary, \\\"KannaStockOption: caller is not the beneficiary\\\");\\n\\n        uint256 returnedAmount = _token.balanceOf(address(this));\\n\\n        _token.transfer(owner(), returnedAmount);\\n        _finalized = true;\\n        emit Abort(_msgSender(), returnedAmount);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IKannaStockOption).interfaceId;\\n    }\\n\\n    modifier initialized() {\\n        require(_initialized, \\\"KannaStockOption: contract is not initialized\\\");\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Abort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"elapsed\",\"type\":\"uint256\"}],\"name\":\"Finalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daysOfVesting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daysOfCliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daysOfLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentOfGrant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initializedAt\",\"type\":\"uint256\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"elapsed\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysOfVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysOfCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysOfLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentOfGrant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGrantAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum IKannaStockOption.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"vestingForecast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KannaStockOption", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}