{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PDProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\n// external deps\\nimport { IAccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Initializable } from \\\"@solidstate/contracts/security/initializable/Initializable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/security/reentrancy_guard/ReentrancyGuard.sol\\\";\\nimport { ECDSAUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport { EIP712 } from \\\"solady/utils/EIP712.sol\\\";\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport { SafeTransferLib } from \\\"solady/utils/SafeTransferLib.sol\\\";\\nimport { LibString } from \\\"solady/utils/LibString.sol\\\";\\nimport { Multicallable } from \\\"solady/utils/Multicallable.sol\\\";\\n\\n// D4A constants, structs, enums && errors\\nimport { BASIS_POINT, SIGNER_ROLE, BASIC_DAO_RESERVE_NFT_NUMBER } from \\\"contracts/interface/D4AConstants.sol\\\";\\nimport {\\n    UpdateRewardParam,\\n    DaoMintInfo,\\n    UserMintInfo,\\n    MintNftInfo,\\n    Whitelist,\\n    NftMinterCapInfo\\n} from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { DaoTag } from \\\"contracts/interface/D4AEnums.sol\\\";\\nimport \\\"contracts/interface/D4AErrors.sol\\\";\\n\\n// interfaces\\nimport { IPriceTemplate } from \\\"./interface/IPriceTemplate.sol\\\";\\nimport { IRewardTemplate } from \\\"./interface/IRewardTemplate.sol\\\";\\nimport { IPermissionControl } from \\\"./interface/IPermissionControl.sol\\\";\\nimport { ID4AProtocolReadable } from \\\"./interface/ID4AProtocolReadable.sol\\\";\\nimport { IPDProtocol } from \\\"./interface/IPDProtocol.sol\\\";\\nimport { IPDCreate } from \\\"contracts/interface/IPDCreate.sol\\\";\\n\\n// D4A storages && contracts\\nimport { ProtocolStorage } from \\\"contracts/storages/ProtocolStorage.sol\\\";\\nimport { DaoStorage } from \\\"contracts/storages/DaoStorage.sol\\\";\\nimport { CanvasStorage } from \\\"contracts/storages/CanvasStorage.sol\\\";\\nimport { PriceStorage } from \\\"contracts/storages/PriceStorage.sol\\\";\\nimport { RewardStorage } from \\\"./storages/RewardStorage.sol\\\";\\nimport { SettingsStorage } from \\\"./storages/SettingsStorage.sol\\\";\\nimport { GrantStorage } from \\\"contracts/storages/GrantStorage.sol\\\";\\nimport { BasicDaoStorage } from \\\"contracts/storages/BasicDaoStorage.sol\\\";\\nimport { D4AERC20 } from \\\"./D4AERC20.sol\\\";\\nimport { D4AERC721 } from \\\"./D4AERC721.sol\\\";\\nimport { D4AFeePool } from \\\"./feepool/D4AFeePool.sol\\\";\\nimport { D4AVestingWallet } from \\\"contracts/feepool/D4AVestingWallet.sol\\\";\\nimport { ProtocolChecker } from \\\"contracts/ProtocolChecker.sol\\\";\\n\\nimport \\\"forge-std/Test.sol\\\";\\n\\ncontract PDProtocol is IPDProtocol, ProtocolChecker, Initializable, Multicallable, ReentrancyGuard, EIP712, Test {\\n    using LibString for string;\\n\\n    bytes32 internal constant _MINTNFT_TYPEHASH =\\n        keccak256(\\\"MintNFT(bytes32 canvasID,bytes32 tokenURIHash,uint256 flatPrice)\\\");\\n\\n    function initialize() public reinitializer(4) {\\n        uint256 reservedDaoAmount = SettingsStorage.layout().reservedDaoAmount;\\n        ProtocolStorage.Layout storage protocolStorage = ProtocolStorage.layout();\\n        protocolStorage.lastestDaoIndexes[uint8(DaoTag.D4A_DAO)] = reservedDaoAmount;\\n        protocolStorage.lastestDaoIndexes[uint8(DaoTag.BASIC_DAO)] = reservedDaoAmount;\\n    }\\n\\n    function createCanvasAndMintNFT(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string memory canvasUri,\\n        address to,\\n        string calldata tokenUri,\\n        bytes calldata signature,\\n        uint256 flatPrice,\\n        bytes32[] memory proof,\\n        address nftOwner\\n    )\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        _createCanvas(daoId, canvasId, canvasUri, to);\\n        if (\\n            DaoStorage.layout().daoInfos[daoId].daoTag == DaoTag.BASIC_DAO\\n                && !BasicDaoStorage.layout().basicDaoInfos[daoId].unlocked\\n                && flatPrice != BasicDaoStorage.layout().basicDaoNftFlatPrice\\n        ) {\\n            revert NotBasicDaoNftFlatPrice();\\n        }\\n        _checkMintEligibility(daoId, msg.sender, proof, 1);\\n        _verifySignature(daoId, canvasId, tokenUri, flatPrice, signature);\\n        DaoStorage.layout().daoInfos[daoId].daoMintInfo.userMintInfos[msg.sender].minted += 1;\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        DaoStorage.layout().daoInfos[daoId].dailyMint[l.drb.currentRound()] += 1;\\n        return _mintNft(daoId, canvasId, tokenUri, flatPrice, nftOwner);\\n    }\\n\\n    function _createCanvas(bytes32 daoId, bytes32 canvasId, string memory canvasUri, address to) internal {\\n        (bool succ,) = address(this).delegatecall(\\n            abi.encodeCall(IPDCreate.createCanvas, (daoId, canvasId, canvasUri, new bytes32[](0), to))\\n        );\\n        if (!succ) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function mintNFT(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string calldata tokenUri,\\n        bytes32[] calldata proof,\\n        uint256 nftFlatPrice,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        _checkMintEligibility(daoId, msg.sender, proof, 1);\\n        _verifySignature(daoId, canvasId, tokenUri, nftFlatPrice, signature);\\n        DaoStorage.layout().daoInfos[daoId].daoMintInfo.userMintInfos[msg.sender].minted += 1;\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        DaoStorage.layout().daoInfos[daoId].dailyMint[l.drb.currentRound()] += 1;\\n        return _mintNft(daoId, canvasId, tokenUri, nftFlatPrice, msg.sender);\\n    }\\n\\n    function mintNFTAndTransfer(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string calldata tokenUri,\\n        bytes32[] calldata proof,\\n        uint256 nftFlatPrice,\\n        bytes calldata signature,\\n        address to\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256 tokenId)\\n    {\\n        _checkMintEligibility(daoId, msg.sender, proof, 1);\\n        _verifySignature(daoId, canvasId, tokenUri, nftFlatPrice, signature);\\n        DaoStorage.layout().daoInfos[daoId].daoMintInfo.userMintInfos[msg.sender].minted += 1;\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        DaoStorage.layout().daoInfos[daoId].dailyMint[l.drb.currentRound()] += 1;\\n        tokenId = _mintNft(daoId, canvasId, tokenUri, nftFlatPrice, to);\\n    }\\n\\n    function batchMint(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        bytes32[] calldata proof,\\n        MintNftInfo[] calldata mintNftInfos,\\n        bytes[] calldata signatures\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory ret = new uint256[](0);\\n        return ret;\\n    }\\n\\n    function claimProjectERC20Reward(bytes32 daoId) public nonReentrant returns (uint256 daoCreatorReward) {\\n        _checkPauseStatus();\\n        _checkPauseStatus(daoId);\\n        _checkDaoExist(daoId);\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        (bool succ, bytes memory data) = l.rewardTemplates[uint8(daoInfo.rewardTemplateType)].delegatecall(\\n            abi.encodeWithSelector(\\n                IRewardTemplate.claimDaoCreatorReward.selector,\\n                daoId,\\n                l.protocolFeePool,\\n                l.ownerProxy.ownerOf(daoId),\\n                l.drb.currentRound(),\\n                daoInfo.token\\n            )\\n        );\\n        require(succ);\\n        (, daoCreatorReward) = abi.decode(data, (uint256, uint256));\\n\\n        emit D4AClaimProjectERC20Reward(daoId, daoInfo.token, daoCreatorReward);\\n    }\\n\\n    function claimCanvasReward(bytes32 canvasId) public nonReentrant returns (uint256) {\\n        _checkPauseStatus();\\n        _checkPauseStatus(canvasId);\\n        _checkCanvasExist(canvasId);\\n        bytes32 daoId = CanvasStorage.layout().canvasInfos[canvasId].daoId;\\n        _checkDaoExist(daoId);\\n        _checkPauseStatus(daoId);\\n\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        (bool succ, bytes memory data) = l.rewardTemplates[uint8(daoInfo.rewardTemplateType)].delegatecall(\\n            abi.encodeWithSelector(\\n                IRewardTemplate.claimCanvasCreatorReward.selector,\\n                daoId,\\n                canvasId,\\n                l.ownerProxy.ownerOf(canvasId),\\n                l.drb.currentRound(),\\n                daoInfo.token\\n            )\\n        );\\n        require(succ);\\n        uint256 amount = abi.decode(data, (uint256));\\n\\n        emit D4AClaimCanvasReward(daoId, canvasId, daoInfo.token, amount);\\n\\n        return amount;\\n    }\\n\\n    function claimNftMinterReward(bytes32 daoId, address minter) public nonReentrant returns (uint256) {\\n        _checkPauseStatus();\\n        _checkDaoExist(daoId);\\n        _checkPauseStatus(daoId);\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        (bool succ, bytes memory data) = l.rewardTemplates[uint8(daoInfo.rewardTemplateType)].delegatecall(\\n            abi.encodeWithSelector(\\n                IRewardTemplate.claimNftMinterReward.selector, daoId, minter, l.drb.currentRound(), daoInfo.token\\n            )\\n        );\\n        require(succ);\\n        uint256 amount = abi.decode(data, (uint256));\\n\\n        emit D4AClaimNftMinterReward(daoId, daoInfo.token, amount);\\n\\n        return amount;\\n    }\\n\\n    struct ExchangeERC20ToETHLocalVars {\\n        uint256 tokenCirculation;\\n        uint256 tokenAmount;\\n    }\\n\\n    function exchangeERC20ToETH(bytes32 daoId, uint256 tokenAmount, address to) public nonReentrant returns (uint256) {\\n        _checkPauseStatus();\\n        _checkPauseStatus(daoId);\\n\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        address token = daoInfo.token;\\n        address daoFeePool = daoInfo.daoFeePool;\\n\\n        D4AERC20(token).burn(msg.sender, tokenAmount);\\n        D4AERC20(token).mint(daoFeePool, tokenAmount);\\n\\n        RewardStorage.RewardInfo storage rewardInfo = RewardStorage.layout().rewardInfos[daoId];\\n        if (rewardInfo.rewardIssuePendingRound != 0) {\\n            uint256 roundReward =\\n                ID4AProtocolReadable(address(this)).getRoundReward(daoId, rewardInfo.rewardIssuePendingRound);\\n            rewardInfo.rewardIssuePendingRound = 0;\\n            D4AERC20(token).mint(address(this), roundReward);\\n        }\\n\\n        ExchangeERC20ToETHLocalVars memory vars;\\n        vars.tokenCirculation = D4AERC20(token).totalSupply() + tokenAmount - D4AERC20(token).balanceOf(daoFeePool);\\n\\n        if (vars.tokenCirculation == 0) return 0;\\n\\n        GrantStorage.Layout storage grantStorage = GrantStorage.layout();\\n        D4AVestingWallet vestingWallet = D4AVestingWallet(payable(grantStorage.vestingWallets[daoId]));\\n        vars.tokenAmount = tokenAmount;\\n        if (address(vestingWallet) != address(0)) {\\n            vestingWallet.release();\\n            address[] memory allowedTokenList = grantStorage.allowedTokenList;\\n            for (uint256 i; i < allowedTokenList.length;) {\\n                vestingWallet.release(allowedTokenList[i]);\\n                uint256 grantTokenAmount =\\n                    (vars.tokenAmount * IERC20(allowedTokenList[i]).balanceOf(daoFeePool)) / vars.tokenCirculation;\\n                if (grantTokenAmount > 0) {\\n                    emit D4AExchangeERC20ToERC20(\\n                        daoId, msg.sender, to, allowedTokenList[i], vars.tokenAmount, grantTokenAmount\\n                    );\\n                    D4AFeePool(payable(daoFeePool)).transfer(allowedTokenList[i], payable(to), grantTokenAmount);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        uint256 availableETH = daoFeePool.balance\\n            - (\\n                PriceStorage.layout().daoFloorPrices[daoId] == 0\\n                    ? 0\\n                    : rewardInfo.totalWeights[SettingsStorage.layout().drb.currentRound()]\\n            );\\n        uint256 ethAmount = (tokenAmount * availableETH) / vars.tokenCirculation;\\n\\n        if (ethAmount != 0) D4AFeePool(payable(daoFeePool)).transfer(address(0x0), payable(to), ethAmount);\\n\\n        emit D4AExchangeERC20ToETH(daoId, msg.sender, to, tokenAmount, ethAmount);\\n\\n        return ethAmount;\\n    }\\n\\n    function _checkCanvasExist(bytes32 canvasId) internal view {\\n        if (!CanvasStorage.layout().canvasInfos[canvasId].canvasExist) revert CanvasNotExist();\\n    }\\n\\n    function _checkMintEligibility(\\n        bytes32 daoId,\\n        address account,\\n        bytes32[] memory proof,\\n        uint256 amount\\n    )\\n        internal\\n        view\\n    {\\n        if (SettingsStorage.layout().drb.currentRound() < DaoStorage.layout().daoInfos[daoId].startRound) {\\n            revert DaoNotStarted();\\n        }\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        if (\\n            DaoStorage.layout().daoInfos[daoId].dailyMint[l.drb.currentRound()] + amount\\n                > BasicDaoStorage.layout().basicDaoInfos[daoId].dailyMintCap\\n                && BasicDaoStorage.layout().basicDaoInfos[daoId].dailyMintCap != 0\\n        ) revert ExceedDailyMintCap();\\n        {\\n            if (!_ableToMint(daoId, account, proof, amount)) revert ExceedMinterMaxMintAmount();\\n        }\\n    }\\n\\n    function _ableToMint(\\n        bytes32 daoId,\\n        address account,\\n        bytes32[] memory proof,\\n        uint256 amount\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        /*\\n        Checking priority\\n        1. blacklist\\n        2. if whitelist on, designated user mint cap\\n        3. NFT holder pass mint cap\\n        4. dao mint cap\\n        */\\n        IPermissionControl permissionControl = SettingsStorage.layout().permissionControl;\\n\\n        // \u5728\u9ed1\u540d\u5355\u4e2d\uff0c\u65e0\u6cd5\u94f8\u9020\uff0crevert\\n        if (permissionControl.isMinterBlacklisted(daoId, account)) {\\n            revert Blacklisted();\\n        }\\n        DaoMintInfo storage daoMintInfo = DaoStorage.layout().daoInfos[daoId].daoMintInfo;\\n        uint32 daoMintCap = daoMintInfo.daoMintCap;\\n        UserMintInfo memory userMintInfo = daoMintInfo.userMintInfos[account];\\n\\n        Whitelist memory whitelist = permissionControl.getWhitelist(daoId);\\n        bool isWhitelistOff = whitelist.minterMerkleRoot == bytes32(0) && whitelist.minterNFTHolderPasses.length == 0\\n            && DaoStorage.layout().daoInfos[daoId].nftMinterCapInfo.length == 0;\\n\\n        uint256 expectedMinted = userMintInfo.minted + amount;\\n\\n        // \u6ca1\u6709\u767d\u540d\u5355\uff0c\u5224\u65ad\u94f8\u9020\u8bf7\u6c42\u4e0e\u5168\u5c40\u94f8\u9020\u4e0a\u9650\u7684\u5927\u5c0f\\n        if (isWhitelistOff) {\\n            return daoMintCap == 0 ? true : expectedMinted <= daoMintCap;\\n        }\\n\\n        // \u5f00\u542f\u767d\u540d\u5355 && \u5728\u767d\u540d\u5355\u4e2d\\n        if (permissionControl.inMinterWhitelist(daoId, account, proof)) {\\n            //revert NotInWhitelist();\\n            if (userMintInfo.mintCap != 0) return expectedMinted <= userMintInfo.mintCap;\\n            return true;\\n        }\\n        // \u7528\u6237MintCap\u4e0d\u4e3a0\uff0c\u68c0\u67e5\u8bf7\u6c42\u94f8\u9020\u7684\u6570\u91cf\u5982\u679c\u5c0f\u4e8e\u7b49\u4e8eMintCap\u5219\u8fd4\u56detrue\uff0c\u5426\u5219false\\n\\n        // // \u7528\u6237\u6ca1\u6709\u94f8\u9020\u4e0a\u9650\uff0c\u4f46\u662fNFTHolder\u6709\u94f8\u9020\u4e0a\u9650\uff0c\u5e76\u4e14\u6301\u6709\u62e5\u6709\u94f8\u9020\u6743\u9650\u7684NFT\uff0c\u68c0\u67e5\u8bf7\u6c42\u94f8\u9020\u7684\u6570\u91cf\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8eNFTHolderMintCap\\n        // if (NFTHolderMintCap != 0 && permissionControl.inMinterNFTHolderPasses(whitelist, account)) {\\n        //     return expectedMinted <= NFTHolderMintCap;\\n        // }\\n\\n        // \u68c0\u6d4b\u7528\u6237\u662f\u5426\u6301\u6709\u5e26\u6709\u94f8\u9020\u4e0a\u9650\u7684\u767d\u540d\u5355ERC-721\\n        return _ableToMintFor721(daoId, expectedMinted, account);\\n    }\\n\\n    function _ableToMintFor721(bytes32 daoId, uint256 expectedMinted, address account) internal view returns (bool) {\\n        IPermissionControl permissionControl = SettingsStorage.layout().permissionControl;\\n        NftMinterCapInfo[] memory nftMinterCapInfo = DaoStorage.layout().daoInfos[daoId].nftMinterCapInfo;\\n        uint256 length = nftMinterCapInfo.length;\\n        uint256 minMintCap = 1_000_000;\\n        bool hasMinterCapNft = false;\\n        console2.log(\\\"length:\\\", length);\\n        for (uint256 i; i < length;) {\\n            // \u5224\u65ad\u7528\u6237\u662f\u5426\u62e5\u6709\u5217\u8868\u4e2d\u7684ERC721\\n            console2.log(\\\"erc721:\\\", nftMinterCapInfo[i].nftAddress);\\n\\n            if (IERC721Upgradeable(nftMinterCapInfo[i].nftAddress).balanceOf(account) > 0) {\\n                hasMinterCapNft = true;\\n                if (nftMinterCapInfo[i].nftMintCap < minMintCap) {\\n                    minMintCap = nftMinterCapInfo[i].nftMintCap;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (hasMinterCapNft) {\\n            return expectedMinted <= minMintCap;\\n        }\\n        Whitelist memory whitelist = permissionControl.getWhitelist(daoId);\\n        return permissionControl.inMinterNFTHolderPasses(whitelist, account);\\n        // \u68c0\u67e5\u662f\u5426\u8fbe\u5230Dao\u7684\u5168\u5c40\u4e0a\u9650\\n        //if (daoMintCap != 0) return expectedMinted <= daoMintCap;\\n    }\\n\\n    function _verifySignature(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string calldata tokenUri,\\n        uint256 nftFlatPrice,\\n        bytes calldata signature\\n    )\\n        internal\\n        view\\n    {\\n        // check for special token URIs first\\n        if (_isSpecialTokenUri(daoId, tokenUri)) return;\\n\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        bytes32 digest =\\n            _hashTypedData(keccak256(abi.encode(_MINTNFT_TYPEHASH, canvasId, keccak256(bytes(tokenUri)), nftFlatPrice)));\\n        address signer = ECDSAUpgradeable.recover(digest, signature);\\n        if (\\n            !IAccessControlUpgradeable(address(this)).hasRole(SIGNER_ROLE, signer)\\n                && signer != l.ownerProxy.ownerOf(canvasId)\\n        ) revert InvalidSignature();\\n    }\\n\\n    function _isSpecialTokenUri(bytes32 daoId, string memory tokenUri) internal view returns (bool) {\\n        string memory specialTokenUriPrefix = BasicDaoStorage.layout().specialTokenUriPrefix;\\n        string memory daoIndex = LibString.toString(DaoStorage.layout().daoInfos[daoId].daoIndex);\\n        if (!tokenUri.startsWith(specialTokenUriPrefix.concat(daoIndex).concat(\\\"-\\\"))) return false;\\n        // strip prefix, daoIndex at the start and `.json` at the end\\n        string memory tokenIndexString =\\n            tokenUri.slice(bytes(specialTokenUriPrefix).length + bytes(daoIndex).length + 1, bytes(tokenUri).length - 5);\\n        // try parse tokenIndex from string to uint256;\\n        uint256 tokenIndex;\\n        for (uint256 i; i < bytes(tokenIndexString).length; ++i) {\\n            if (bytes(tokenIndexString)[i] < \\\"0\\\" || bytes(tokenIndexString)[i] > \\\"9\\\") return false;\\n            tokenIndex = tokenIndex * 10 + (uint8(bytes(tokenIndexString)[i]) - 48);\\n        }\\n        if (tokenIndex == 0 || tokenIndex > BASIC_DAO_RESERVE_NFT_NUMBER) return false;\\n        return true;\\n    }\\n\\n    function _fetchRightTokenUri(bytes32 daoId, uint256 tokenId) internal view returns (string memory) {\\n        string memory daoIndex = LibString.toString(DaoStorage.layout().daoInfos[daoId].daoIndex);\\n        return BasicDaoStorage.layout().specialTokenUriPrefix.concat(daoIndex).concat(\\\"-\\\").concat(\\n            LibString.toString(tokenId)\\n        ).concat(\\\".json\\\");\\n    }\\n\\n    function _mintNft(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string memory tokenUri,\\n        uint256 flatPrice,\\n        address to\\n    )\\n        internal\\n        returns (uint256 tokenId)\\n    {\\n        // for special token uri, if two same speical token uris are passes in at the same time, should fetch right\\n        // token uri first, then check for uri non-existence\\n        {\\n            BasicDaoStorage.BasicDaoInfo storage basicDaoInfo = BasicDaoStorage.layout().basicDaoInfos[daoId];\\n            if (_isSpecialTokenUri(daoId, tokenUri)) {\\n                ++basicDaoInfo.tokenId;\\n                if (canvasId != basicDaoInfo.canvasIdOfSpecialNft) {\\n                    revert NotCanvasIdOfSpecialTokenUri();\\n                }\\n                if (flatPrice != BasicDaoStorage.layout().basicDaoNftFlatPrice) revert NotBasicDaoNftFlatPrice();\\n                tokenUri = _fetchRightTokenUri(daoId, basicDaoInfo.tokenId);\\n                tokenId = basicDaoInfo.tokenId;\\n            }\\n        }\\n\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        {\\n            _checkPauseStatus();\\n            _checkPauseStatus(canvasId);\\n            _checkCanvasExist(canvasId);\\n            _checkUriNotExist(tokenUri);\\n        }\\n\\n        _checkPauseStatus(daoId);\\n\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        if (daoInfo.nftTotalSupply >= daoInfo.nftMaxSupply) revert NftExceedMaxAmount();\\n\\n        ProtocolStorage.layout().uriExists[keccak256(abi.encodePacked(tokenUri))] = true;\\n\\n        // get next mint price\\n        uint256 price;\\n        {\\n            uint256 currentRound = l.drb.currentRound();\\n            uint256 nftPriceFactor = daoInfo.nftPriceFactor;\\n            price = _getCanvasNextPrice(daoId, canvasId, flatPrice, daoInfo.startRound, currentRound, nftPriceFactor);\\n            _updatePrice(currentRound, daoId, canvasId, price, flatPrice, nftPriceFactor);\\n        }\\n\\n        // split fee\\n        uint256 daoFee;\\n        bytes32 tempDaoId = daoId;\\n        bytes32 tempCanvasId = canvasId;\\n        CanvasStorage.CanvasInfo storage canvasInfo = CanvasStorage.layout().canvasInfos[canvasId];\\n        uint256 canvasRebateRatioInBps;\\n        {\\n            address protocolFeePool = l.protocolFeePool;\\n            address daoFeePool = daoInfo.daoFeePool;\\n            address canvasOwner = l.ownerProxy.ownerOf(tempCanvasId);\\n            uint256 daoShare = (\\n                flatPrice == 0\\n                    ? ID4AProtocolReadable(address(this)).getDaoFeePoolETHRatio(tempDaoId)\\n                    : ID4AProtocolReadable(address(this)).getDaoFeePoolETHRatioFlatPrice(tempDaoId)\\n            ) * price;\\n\\n            if (\\n                (price - daoShare / BASIS_POINT - (price * l.protocolMintFeeRatioInBps) / BASIS_POINT) != 0\\n                    && ID4AProtocolReadable(address(this)).getNftMinterERC20Ratio(tempDaoId) != 0\\n            ) canvasRebateRatioInBps = canvasInfo.canvasRebateRatioInBps;\\n            daoFee = _splitFee(protocolFeePool, daoFeePool, canvasOwner, price, daoShare, canvasRebateRatioInBps);\\n        }\\n\\n        _updateReward(\\n            daoId,\\n            canvasId,\\n            PriceStorage.layout().daoFloorPrices[tempDaoId] == 0 ? 1 ether : daoFee,\\n            canvasRebateRatioInBps\\n        );\\n\\n        // mint\\n        tokenId = D4AERC721(daoInfo.nft).mintItem(to, tokenUri, tokenId);\\n        {\\n            daoInfo.nftTotalSupply++;\\n            canvasInfo.tokenIds.push(tokenId);\\n            ProtocolStorage.layout().nftHashToCanvasId[keccak256(abi.encodePacked(tempDaoId, tokenId))] = canvasId;\\n        }\\n\\n        emit D4AMintNFT(daoId, canvasId, tokenId, tokenUri, price);\\n    }\\n\\n    function _updatePrice(\\n        uint256 currentRound,\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        uint256 price,\\n        uint256 flatPrice,\\n        uint256 nftPriceMultiplyFactor\\n    )\\n        internal\\n    {\\n        if (flatPrice == 0) {\\n            (bool succ,) = SettingsStorage.layout().priceTemplates[uint8(\\n                DaoStorage.layout().daoInfos[daoId].priceTemplateType\\n            )].delegatecall(\\n                abi.encodeWithSelector(\\n                    IPriceTemplate.updateCanvasPrice.selector,\\n                    daoId,\\n                    canvasId,\\n                    currentRound,\\n                    price,\\n                    nftPriceMultiplyFactor\\n                )\\n            );\\n            require(succ);\\n        }\\n    }\\n\\n    struct BatchMintLocalVars {\\n        uint256 length;\\n        uint256 currentRound;\\n        uint256 nftPriceFactor;\\n        uint256 daoTotalShare;\\n        uint256 totalPrice;\\n    }\\n\\n    function _getCanvasNextPrice(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        uint256 flatPrice,\\n        uint256 startRound,\\n        uint256 currentRound,\\n        uint256 priceFactor\\n    )\\n        internal\\n        view\\n        returns (uint256 price)\\n    {\\n        PriceStorage.Layout storage priceStorage = PriceStorage.layout();\\n        uint256 daoFloorPrice = priceStorage.daoFloorPrices[daoId];\\n        PriceStorage.MintInfo memory maxPrice = priceStorage.daoMaxPrices[daoId];\\n        PriceStorage.MintInfo memory mintInfo = priceStorage.canvasLastMintInfos[canvasId];\\n        if (flatPrice == 0) {\\n            price = IPriceTemplate(\\n                SettingsStorage.layout().priceTemplates[uint8(DaoStorage.layout().daoInfos[daoId].priceTemplateType)]\\n            ).getCanvasNextPrice(startRound, currentRound, priceFactor, daoFloorPrice, maxPrice, mintInfo);\\n        } else {\\n            price = flatPrice;\\n        }\\n    }\\n\\n    function _updateReward(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        uint256 daoFeeAmount,\\n        uint256 canvasRebateRatioInBps\\n    )\\n        internal\\n    {\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n\\n        (bool succ,) = SettingsStorage.layout().rewardTemplates[uint8(\\n            DaoStorage.layout().daoInfos[daoId].rewardTemplateType\\n        )].delegatecall(\\n            abi.encodeWithSelector(\\n                IRewardTemplate.updateReward.selector,\\n                UpdateRewardParam(\\n                    daoId,\\n                    canvasId,\\n                    daoInfo.token,\\n                    daoInfo.startRound,\\n                    l.drb.currentRound(),\\n                    daoInfo.mintableRound,\\n                    daoFeeAmount,\\n                    l.protocolERC20RatioInBps,\\n                    ID4AProtocolReadable(address(this)).getDaoCreatorERC20Ratio(daoId),\\n                    ID4AProtocolReadable(address(this)).getCanvasCreatorERC20Ratio(daoId),\\n                    ID4AProtocolReadable(address(this)).getNftMinterERC20Ratio(daoId),\\n                    canvasRebateRatioInBps\\n                )\\n            )\\n        );\\n        if (!succ) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function _splitFee(\\n        address protocolFeePool,\\n        address daoFeePool,\\n        address canvasOwner,\\n        uint256 price,\\n        uint256 daoShare,\\n        uint256 canvasRebateRatioInBps\\n    )\\n        internal\\n        returns (uint256 daoFee)\\n    {\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n\\n        daoFee = daoShare / BASIS_POINT;\\n        uint256 protocolFee = (price * l.protocolMintFeeRatioInBps) / BASIS_POINT;\\n        uint256 canvasFee = price - daoFee - protocolFee;\\n        uint256 rebateAmount = (canvasFee * canvasRebateRatioInBps) / BASIS_POINT;\\n        canvasFee -= rebateAmount;\\n        if (msg.value < price - rebateAmount) revert NotEnoughEther();\\n        uint256 dust = msg.value + rebateAmount - price;\\n\\n        if (protocolFee > 0) SafeTransferLib.safeTransferETH(protocolFeePool, protocolFee);\\n        if (daoFee > 0) SafeTransferLib.safeTransferETH(daoFeePool, daoFee);\\n        if (canvasFee > 0) SafeTransferLib.safeTransferETH(canvasOwner, canvasFee);\\n        if (dust > 0) SafeTransferLib.safeTransferETH(msg.sender, dust);\\n    }\\n\\n    function _domainNameAndVersion() internal pure override returns (string memory name, string memory version) {\\n        name = \\\"ProtoDaoProtocol\\\";\\n        version = \\\"1\\\";\\n    }\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/initializable/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IInitializable } from './IInitializable.sol';\\nimport { InitializableInternal } from './InitializableInternal.sol';\\n\\nabstract contract Initializable is IInitializable, InitializableInternal {}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/reentrancy_guard/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IReentrancyGuard } from './IReentrancyGuard.sol';\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard is IReentrancyGuard {\\n    uint256 internal constant REENTRANCY_STATUS_LOCKED = 2;\\n    uint256 internal constant REENTRANCY_STATUS_UNLOCKED = 1;\\n\\n    modifier nonReentrant() {\\n        if (ReentrancyGuardStorage.layout().status == REENTRANCY_STATUS_LOCKED)\\n            revert ReentrancyGuard__ReentrantCall();\\n        _lockReentrancyGuard();\\n        _;\\n        _unlockReentrancyGuard();\\n    }\\n\\n    /**\\n     * @notice lock functions that use the nonReentrant modifier\\n     */\\n    function _lockReentrancyGuard() internal virtual {\\n        ReentrancyGuardStorage.layout().status = REENTRANCY_STATUS_LOCKED;\\n    }\\n\\n    /**\\n     * @notice unlock funtions that use the nonReentrant modifier\\n     */\\n    function _unlockReentrancyGuard() internal virtual {\\n        ReentrancyGuardStorage.layout().status = REENTRANCY_STATUS_UNLOCKED;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Contract for EIP-712 typed structured data hashing and signing.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/EIP712.sol)\\n/// @author Modified from Solbase (https://github.com/Sol-DAO/solbase/blob/main/src/utils/EIP712.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol)\\n/// Note, this implementation:\\n/// - Uses `address(this)` for the `verifyingContract` field.\\n/// - Does NOT use the optional EIP-712 salt.\\n/// - Does NOT use any EIP-712 extensions.\\n/// This is for simplicity and to save gas.\\n/// If you need to customize, please fork / modify accordingly.\\nabstract contract EIP712 {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                  CONSTANTS AND IMMUTABLES                  */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev `keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")`.\\n    bytes32 internal constant _DOMAIN_TYPEHASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    address private immutable _cachedThis;\\n    uint256 private immutable _cachedChainId;\\n    bytes32 private immutable _cachedNameHash;\\n    bytes32 private immutable _cachedVersionHash;\\n    bytes32 private immutable _cachedDomainSeparator;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                        CONSTRUCTOR                         */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Cache the hashes for cheaper runtime gas costs.\\n    /// In the case of upgradeable contracts (i.e. proxies),\\n    /// or if the chain id changes due to a hard fork,\\n    /// the domain separator will be seamlessly calculated on-the-fly.\\n    constructor() {\\n        _cachedThis = address(this);\\n        _cachedChainId = block.chainid;\\n\\n        (string memory name, string memory version) = _domainNameAndVersion();\\n        bytes32 nameHash = keccak256(bytes(name));\\n        bytes32 versionHash = keccak256(bytes(version));\\n        _cachedNameHash = nameHash;\\n        _cachedVersionHash = versionHash;\\n\\n        bytes32 separator;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Load the free memory pointer.\\n            mstore(m, _DOMAIN_TYPEHASH)\\n            mstore(add(m, 0x20), nameHash)\\n            mstore(add(m, 0x40), versionHash)\\n            mstore(add(m, 0x60), chainid())\\n            mstore(add(m, 0x80), address())\\n            separator := keccak256(m, 0xa0)\\n        }\\n        _cachedDomainSeparator = separator;\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   FUNCTIONS TO OVERRIDE                    */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Please override this function to return the domain name and version.\\n    /// ```\\n    ///     function _domainNameAndVersion()\\n    ///         internal\\n    ///         pure\\n    ///         virtual\\n    ///         returns (string memory name, string memory version)\\n    ///     {\\n    ///         name = \\\"Solady\\\";\\n    ///         version = \\\"1\\\";\\n    ///     }\\n    /// ```\\n    function _domainNameAndVersion()\\n        internal\\n        pure\\n        virtual\\n        returns (string memory name, string memory version);\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     HASHING OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the EIP-712 domain separator.\\n    function _domainSeparator() internal view virtual returns (bytes32 separator) {\\n        separator = _cachedDomainSeparator;\\n        if (_cachedDomainSeparatorInvalidated()) {\\n            separator = _buildDomainSeparator();\\n        }\\n    }\\n\\n    /// @dev Returns the hash of the fully encoded EIP-712 message for this domain,\\n    /// given `structHash`, as defined in\\n    /// https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct.\\n    ///\\n    /// The hash can be used together with {ECDSA-recover} to obtain the signer of a message:\\n    /// ```\\n    ///     bytes32 digest = _hashTypedData(keccak256(abi.encode(\\n    ///         keccak256(\\\"Mail(address to,string contents)\\\"),\\n    ///         mailTo,\\n    ///         keccak256(bytes(mailContents))\\n    ///     )));\\n    ///     address signer = ECDSA.recover(digest, signature);\\n    /// ```\\n    function _hashTypedData(bytes32 structHash) internal view virtual returns (bytes32 digest) {\\n        bytes32 separator = _cachedDomainSeparator;\\n        if (_cachedDomainSeparatorInvalidated()) {\\n            separator = _buildDomainSeparator();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the digest.\\n            mstore(0x00, 0x1901000000000000) // Store \\\"\\\\x19\\\\x01\\\".\\n            mstore(0x1a, separator) // Store the domain separator.\\n            mstore(0x3a, structHash) // Store the struct hash.\\n            digest := keccak256(0x18, 0x42)\\n            // Restore the part of the free memory slot that was overwritten.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                    EIP-5267 OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev See: https://eips.ethereum.org/EIPS/eip-5267\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        fields = hex\\\"0f\\\"; // `0b01111`.\\n        (name, version) = _domainNameAndVersion();\\n        chainId = block.chainid;\\n        verifyingContract = address(this);\\n        salt = salt; // `bytes32(0)`.\\n        extensions = extensions; // `new uint256[](0)`.\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the EIP-712 domain separator.\\n    function _buildDomainSeparator() private view returns (bytes32 separator) {\\n        bytes32 nameHash = _cachedNameHash;\\n        bytes32 versionHash = _cachedVersionHash;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Load the free memory pointer.\\n            mstore(m, _DOMAIN_TYPEHASH)\\n            mstore(add(m, 0x20), nameHash)\\n            mstore(add(m, 0x40), versionHash)\\n            mstore(add(m, 0x60), chainid())\\n            mstore(add(m, 0x80), address())\\n            separator := keccak256(m, 0xa0)\\n        }\\n    }\\n\\n    /// @dev Returns if the cached domain separator has been invalidated.\\n    function _cachedDomainSeparatorInvalidated() private view returns (bool result) {\\n        uint256 cachedChainId = _cachedChainId;\\n        address cachedThis = _cachedThis;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := iszero(and(eq(chainid(), cachedChainId), eq(address(), cachedThis)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n/// responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// Note: This implementation does NOT protect against gas griefing.\\n    /// Please use `forceSafeTransferETH` for gas griefing protection.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overridden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x0c, 0x70a08231000000000000000000000000)\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            // The `amount` argument is already written to the memory word at 0x60.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x14, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x34.\\n            amount := mload(0x34)\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x00, 0x70a08231000000000000000000000000)\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/LibString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\nlibrary LibString {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The `length` of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            str := add(mload(0x40), 0x80)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                str := add(str, w) // `sub(str, 1)`.\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory str) {\\n        if (value >= 0) {\\n            return toString(uint256(value));\\n        }\\n        unchecked {\\n            str = toString(uint256(-value));\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let length := mload(str) // Load the string length.\\n            mstore(str, 0x2d) // Store the '-' character.\\n            str := sub(str, 1) // Move back the string pointer by a byte.\\n            mstore(str, add(length, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `length` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `length * 2 + 2` bytes.\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value, length);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `length` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `length * 2` bytes.\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory str)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\\n            // Allocate the memory.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(str, add(length, length))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                str := add(str, w) // `sub(str, 2)`.\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(str, start)) { break }\\n            }\\n\\n            if temp {\\n                // Store the function selector of `HexLengthInsufficient()`.\\n                mstore(0x00, 0x2194895a)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := sub(end, str)\\n            // Move the pointer and write the length.\\n            str := sub(str, 0x20)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(add(str, o), 0x3078) // Write the \\\"0x\\\" prefix, accounting for leading zero.\\n            str := sub(add(str, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\n            let strLength := mload(str) // Get the length.\\n            str := add(str, o) // Move the pointer, accounting for leading zero.\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            str := add(mload(0x40), 0x80)\\n            // Allocate the memory.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                str := add(str, w) // `sub(str, 2)`.\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := sub(end, str)\\n            // Move the pointer and write the length.\\n            str := sub(str, 0x20)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\n        str = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(str, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            str := mload(0x40)\\n\\n            // Allocate the memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(str, 0x80))\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            str := add(str, 2)\\n            mstore(str, 40)\\n\\n            let o := add(str, 0x20)\\n            mstore(add(o, 40), 0)\\n\\n            value := shl(96, value)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(raw)\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(str, add(length, length)) // Store the length of the output.\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let o := add(str, 0x20)\\n            let end := add(raw, length)\\n\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(7, div(not(0), 255))\\n            result := 1\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // For performance and bytecode compactness, all indices of the following operations\\n    // are byte (ASCII) offsets, not UTF character offsets.\\n\\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\\n    function replace(string memory subject, string memory search, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            let searchLength := mload(search)\\n            let replacementLength := mload(replacement)\\n\\n            subject := add(subject, 0x20)\\n            search := add(search, 0x20)\\n            replacement := add(replacement, 0x20)\\n            result := add(mload(0x40), 0x20)\\n\\n            let subjectEnd := add(subject, subjectLength)\\n            if iszero(gt(searchLength, subjectLength)) {\\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\\n                let h := 0\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\n                let s := mload(search)\\n                for {} 1 {} {\\n                    let t := mload(subject)\\n                    // Whether the first `searchLength % 32` bytes of\\n                    // `subject` and `search` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\n                                mstore(result, t)\\n                                result := add(result, 1)\\n                                subject := add(subject, 1)\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let o := 0 } 1 {} {\\n                            mstore(add(result, o), mload(add(replacement, o)))\\n                            o := add(o, 0x20)\\n                            if iszero(lt(o, replacementLength)) { break }\\n                        }\\n                        result := add(result, replacementLength)\\n                        subject := add(subject, searchLength)\\n                        if searchLength {\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(result, t)\\n                    result := add(result, 1)\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\n                }\\n            }\\n\\n            let resultRemainder := result\\n            result := add(mload(0x40), 0x20)\\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\\n            // Copy the rest of the string one word at a time.\\n            for {} lt(subject, subjectEnd) {} {\\n                mstore(resultRemainder, mload(subject))\\n                resultRemainder := add(resultRemainder, 0x20)\\n                subject := add(subject, 0x20)\\n            }\\n            result := sub(result, 0x20)\\n            let last := add(add(result, 0x20), k) // Zeroize the slot after the string.\\n            mstore(last, 0)\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n            mstore(result, k) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function indexOf(string memory subject, string memory search, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let subjectLength := mload(subject) } 1 {} {\\n                if iszero(mload(search)) {\\n                    if iszero(gt(from, subjectLength)) {\\n                        result := from\\n                        break\\n                    }\\n                    result := subjectLength\\n                    break\\n                }\\n                let searchLength := mload(search)\\n                let subjectStart := add(subject, 0x20)\\n\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\\n\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\n                let s := mload(add(search, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\\n\\n                if iszero(lt(searchLength, 0x20)) {\\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, searchLength), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function indexOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = indexOf(subject, search, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let searchLength := mload(search)\\n                if gt(searchLength, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), searchLength)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\n                    if eq(keccak256(subject, searchLength), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function lastIndexOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `search`.\\n    function startsWith(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLength := mload(search)\\n            // Just using keccak256 directly is actually cheaper.\\n            // forgefmt: disable-next-item\\n            result := and(\\n                iszero(gt(searchLength, mload(subject))),\\n                eq(\\n                    keccak256(add(subject, 0x20), searchLength),\\n                    keccak256(add(search, 0x20), searchLength)\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `search`.\\n    function endsWith(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLength := mload(search)\\n            let subjectLength := mload(subject)\\n            // Whether `search` is not longer than `subject`.\\n            let withinRange := iszero(gt(searchLength, subjectLength))\\n            // Just using keccak256 directly is actually cheaper.\\n            // forgefmt: disable-next-item\\n            result := and(\\n                withinRange,\\n                eq(\\n                    keccak256(\\n                        // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\\n                        add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\\n                        searchLength\\n                    ),\\n                    keccak256(add(search, 0x20), searchLength)\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            if iszero(or(iszero(times), iszero(subjectLength))) {\\n                subject := add(subject, 0x20)\\n                result := mload(0x40)\\n                let output := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let o := 0 } 1 {} {\\n                        mstore(add(output, o), mload(add(subject, o)))\\n                        o := add(o, 0x20)\\n                        if iszero(lt(o, subjectLength)) { break }\\n                    }\\n                    output := add(output, subjectLength)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(output, 0) // Zeroize the slot after the string.\\n                let resultLength := sub(output, add(result, 0x20))\\n                mstore(result, resultLength) // Store the length.\\n                // Allocate the memory.\\n                mstore(0x40, add(result, add(resultLength, 0x20)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let resultLength := sub(end, start)\\n                mstore(result, resultLength)\\n                subject := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let o := and(add(resultLength, 0x1f), w) } 1 {} {\\n                    mstore(add(result, o), mload(add(subject, o)))\\n                    o := add(o, w) // `sub(o, 0x20)`.\\n                    if iszero(o) { break }\\n                }\\n                // Zeroize the slot after the string.\\n                mstore(add(add(result, 0x20), resultLength), 0)\\n                // Allocate memory for the length and the bytes,\\n                // rounded up to a multiple of 32.\\n                mstore(0x40, add(result, and(add(resultLength, 0x3f), w)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = slice(subject, start, uint256(int256(-1)));\\n    }\\n\\n    /// @dev Returns all the indices of `search` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            let searchLength := mload(search)\\n\\n            if iszero(gt(searchLength, subjectLength)) {\\n                subject := add(subject, 0x20)\\n                search := add(search, 0x20)\\n                result := add(mload(0x40), 0x20)\\n\\n                let subjectStart := subject\\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\\n                let h := 0\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\n                let s := mload(search)\\n                for {} 1 {} {\\n                    let t := mload(subject)\\n                    // Whether the first `searchLength % 32` bytes of\\n                    // `subject` and `search` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\n                                subject := add(subject, 1)\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Append to `result`.\\n                        mstore(result, sub(subject, subjectStart))\\n                        result := add(result, 0x20)\\n                        // Advance `subject` by `searchLength`.\\n                        subject := add(subject, searchLength)\\n                        if searchLength {\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\n                }\\n                let resultEnd := result\\n                // Assign `result` to the free memory pointer.\\n                result := mload(0x40)\\n                // Store the length of `result`.\\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(resultEnd, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            let prevIndex := 0\\n            for {} 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let elementLength := sub(index, prevIndex)\\n                    mstore(element, elementLength)\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(elementLength, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    // Zeroize the slot after the string.\\n                    mstore(add(add(element, 0x20), elementLength), 0)\\n                    // Allocate memory for the length and the bytes,\\n                    // rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(elementLength, 0x3f), w)))\\n                    // Store the `element` into the array.\\n                    mstore(indexPtr, element)\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            result := mload(0x40)\\n            let aLength := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLength, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLength := mload(b)\\n            let output := add(result, aLength)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLength, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLength := add(aLength, bLength)\\n            let last := add(add(result, 0x20), totalLength)\\n            // Zeroize the slot after the string.\\n            mstore(last, 0)\\n            // Stores the length.\\n            mstore(result, totalLength)\\n            // Allocate memory for the length and the bytes,\\n            // rounded up to a multiple of 32.\\n            mstore(0x40, and(add(last, 0x1f), w))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(subject)\\n            if length {\\n                result := add(mload(0x40), 0x20)\\n                subject := add(subject, 1)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                let w := not(0)\\n                for { let o := length } 1 {} {\\n                    o := add(o, w)\\n                    let b := and(0xff, mload(add(subject, o)))\\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\\n                    if iszero(o) { break }\\n                }\\n                result := mload(0x40)\\n                mstore(result, length) // Store the length.\\n                let last := add(add(result, 0x20), length)\\n                mstore(last, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {\\n                let end := add(s, mload(s))\\n                result := add(mload(0x40), 0x20)\\n                // Store the bytes of the packed offsets and strides into the scratch space.\\n                // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n                mstore(0x1f, 0x900094)\\n                mstore(0x08, 0xc0000000a6ab)\\n                // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n                mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(result, c)\\n                    result := add(result, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(result, mload(and(t, 0x1f)))\\n                result := add(result, shr(5, t))\\n            }\\n            let last := result\\n            mstore(last, 0) // Zeroize the slot after the string.\\n            result := mload(0x40)\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {\\n                let end := add(s, mload(s))\\n                result := add(mload(0x40), 0x20)\\n                // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n                // Store \\\"0123456789abcdef\\\" in scratch space.\\n                // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n                // into the scratch space.\\n                mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n                // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(result, c)\\n                        result := add(result, 1)\\n                        continue\\n                    }\\n                    mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(result, 1), c)\\n                    result := add(result, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(result, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    result := add(result, 6)\\n                    continue\\n                }\\n                mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(result, 1), mload(add(c, 8)))\\n                result := add(result, 2)\\n            }\\n            let last := result\\n            mstore(last, 0) // Zeroize the slot after the string.\\n            result := mload(0x40)\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behaviour is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Grab the free memory pointer.\\n            result := mload(0x40)\\n            // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(0x40, add(result, 0x40))\\n            // Zeroize the length slot.\\n            mstore(result, 0)\\n            // Store the length and bytes.\\n            mstore(add(result, 0x1f), packed)\\n            // Right pad with zeroes.\\n            mstore(add(add(result, 0x20), mload(result)), 0)\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLength := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes of `a` and `b`.\\n                    or(\\n                        shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\\n                        mload(sub(add(b, 0x1e), aLength))\\n                    ),\\n                    // `totalLength != 0 && totalLength < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLength, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behaviour is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Grab the free memory pointer.\\n            resultA := mload(0x40)\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retSize), 0)\\n            // Store the return offset.\\n            mstore(retStart, 0x20)\\n            // End the transaction, returning the string.\\n            return(retStart, retSize)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/Multicallable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Contract that enables a single call to call multiple methods on itself.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Multicallable.sol)\\nabstract contract Multicallable {\\n    /// @dev Apply `DELEGATECALL` with the current contract to each calldata in `data`,\\n    /// and store the `abi.encode` formatted results of each `DELEGATECALL` into `results`.\\n    /// If any of the `DELEGATECALL`s reverts, the entire context is reverted,\\n    /// and the error is bubbled up.\\n    ///\\n    /// This function is deliberately made non-payable to guard against double-spending.\\n    /// (See: https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong)\\n    ///\\n    /// For efficiency, this function will directly return the results, terminating the context.\\n    /// If called internally, it must be called at the end of a function\\n    /// that returns `(bytes[] memory)`.\\n    function multicall(bytes[] calldata data) public virtual returns (bytes[] memory) {\\n        assembly {\\n            mstore(0x00, 0x20)\\n            mstore(0x20, data.length) // Store `data.length` into `results`.\\n            // Early return if no data.\\n            if iszero(data.length) { return(0x00, 0x40) }\\n\\n            let results := 0x40\\n            // `shl` 5 is equivalent to multiplying by 0x20.\\n            let end := shl(5, data.length)\\n            // Copy the offsets from calldata into memory.\\n            calldatacopy(0x40, data.offset, end)\\n            // Offset into `results`.\\n            let resultsOffset := end\\n            // Pointer to the end of `results`.\\n            end := add(results, end)\\n\\n            for {} 1 {} {\\n                // The offset of the current bytes in the calldata.\\n                let o := add(data.offset, mload(results))\\n                let memPtr := add(resultsOffset, 0x40)\\n                // Copy the current bytes from calldata to the memory.\\n                calldatacopy(\\n                    memPtr,\\n                    add(o, 0x20), // The offset of the current bytes' bytes.\\n                    calldataload(o) // The length of the current bytes.\\n                )\\n                if iszero(delegatecall(gas(), address(), memPtr, calldataload(o), 0x00, 0x00)) {\\n                    // Bubble up the revert if the delegatecall reverts.\\n                    returndatacopy(0x00, 0x00, returndatasize())\\n                    revert(0x00, returndatasize())\\n                }\\n                // Append the current `resultsOffset` into `results`.\\n                mstore(results, resultsOffset)\\n                results := add(results, 0x20)\\n                // Append the `returndatasize()`, and the return data.\\n                mstore(memPtr, returndatasize())\\n                returndatacopy(add(memPtr, 0x20), 0x00, returndatasize())\\n                // Advance the `resultsOffset` by `returndatasize() + 0x20`,\\n                // rounded up to the next multiple of 32.\\n                resultsOffset :=\\n                    and(add(add(resultsOffset, returndatasize()), 0x3f), 0xffffffffffffffe0)\\n                if iszero(lt(results, end)) { break }\\n            }\\n            return(0x00, add(resultsOffset, 0x40))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/D4AConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nuint256 constant BASIS_POINT = 10_000;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0;\\nbytes32 constant PROTOCOL_ROLE = keccak256(\\\"PROTOCOL_ROLE\\\");\\nbytes32 constant OPERATION_ROLE = keccak256(\\\"OPERATION_ROLE\\\");\\nbytes32 constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\nbytes32 constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n\\nuint256 constant BASIC_DAO_RESERVE_NFT_NUMBER = 1000;\\n\"\r\n    },\r\n    \"contracts/interface/D4AStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { PriceTemplateType, RewardTemplateType } from \\\"./D4AEnums.sol\\\";\\n\\nstruct DaoMetadataParam {\\n    uint256 startDrb;\\n    uint256 mintableRounds;\\n    uint256 floorPriceRank;\\n    uint256 maxNftRank;\\n    uint96 royaltyFee;\\n    string projectUri;\\n    uint256 projectIndex;\\n}\\n\\nstruct DaoMintInfo {\\n    uint32 daoMintCap; // Dao\u7684\u94f8\u9020\u4e0a\u9650\\n    uint32 NFTHolderMintCap; // NftHolder\u7684\u94f8\u9020\u4e0a\u9650\\n    mapping(address minter => UserMintInfo) userMintInfos; // \u7ed9\u5b9aminter\u7684\u5730\u5740\uff0c\u83b7\u53d6\u5df2\u7ecfmint\u7684\u4e2a\u6570\u4ee5\u53camintCap\\n}\\n\\nstruct NftMinterCapInfo {\\n    address nftAddress;\\n    uint256 nftMintCap;\\n}\\n\\nstruct NftMinterCap {\\n    mapping(address nftAddress => bool) nftExistInMapping;\\n    mapping(address nftAddress => uint256) nftHolderMintCap;\\n}\\n\\nstruct UserMintInfo {\\n    uint32 minted;\\n    uint32 mintCap;\\n}\\n\\nstruct DaoMintCapParam {\\n    uint32 daoMintCap;\\n    UserMintCapParam[] userMintCapParams;\\n}\\n\\nstruct UserMintCapParam {\\n    address minter;\\n    uint32 mintCap;\\n}\\n\\nstruct DaoETHAndERC20SplitRatioParam {\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n}\\n\\nstruct TemplateParam {\\n    PriceTemplateType priceTemplateType;\\n    uint256 priceFactor;\\n    RewardTemplateType rewardTemplateType;\\n    uint256 rewardDecayFactor;\\n    bool isProgressiveJackpot;\\n}\\n\\nstruct UpdateRewardParam {\\n    bytes32 daoId;\\n    bytes32 canvasId;\\n    address token;\\n    uint256 startRound;\\n    uint256 currentRound;\\n    uint256 totalRound;\\n    uint256 daoFeeAmount;\\n    uint256 protocolERC20RatioInBps;\\n    uint256 daoCreatorERC20RatioInBps;\\n    uint256 canvasCreatorERC20RatioInBps;\\n    uint256 nftMinterERC20RatioInBps;\\n    uint256 canvasRebateRatioInBps;\\n}\\n\\nstruct MintNftInfo {\\n    string tokenUri;\\n    uint256 flatPrice;\\n}\\n\\nstruct Blacklist {\\n    address[] minterAccounts;\\n    address[] canvasCreatorAccounts;\\n}\\n\\nstruct Whitelist {\\n    bytes32 minterMerkleRoot;\\n    address[] minterNFTHolderPasses;\\n    bytes32 canvasCreatorMerkleRoot;\\n    address[] canvasCreatorNFTHolderPasses;\\n}\\n\\nstruct BasicDaoParam {\\n    uint256 initTokenSupplyRatio;\\n    bytes32 canvasId;\\n    string canvasUri;\\n    string daoName;\\n}\\n\\n// \u4fee\u6539Dao\u4e2d\u53c2\u6570\u7684\u7ed3\u6784\u4f53\uff0c\u88ab\u7528\u4e8esetDaoParams\u65b9\u6cd5\\nstruct SetDaoParam {\\n    bytes32 daoId;\\n    uint256 nftMaxSupplyRank;\\n    uint256 mintableRoundRank;\\n    uint256 daoFloorPriceRank;\\n    PriceTemplateType priceTemplateType;\\n    uint256 nftPriceFactor;\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n    uint256 dailyMintCap;\\n    uint256 addedDaoToken;\\n}\\n\\nstruct SetMintCapAndPermissionParam {\\n    bytes32 daoId;\\n    uint32 daoMintCap;\\n    UserMintCapParam[] userMintCapParams;\\n    NftMinterCapInfo[] nftMinterCapInfo;\\n    Whitelist whitelist;\\n    Blacklist blacklist;\\n    Blacklist unblacklist;\\n}\\n\\nstruct SetRatioParam {\\n    bytes32 daoId;\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n}\"\r\n    },\r\n    \"contracts/interface/D4AEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nenum PriceTemplateType {\\n    EXPONENTIAL_PRICE_VARIATION,\\n    LINEAR_PRICE_VARIATION\\n}\\n\\nenum RewardTemplateType {\\n    LINEAR_REWARD_ISSUANCE,\\n    EXPONENTIAL_REWARD_ISSUANCE\\n}\\n\\nenum TemplateChoice {\\n    PRICE,\\n    REWARD\\n}\\n\\nenum DaoTag {\\n    D4A_DAO,\\n    BASIC_DAO\\n}\\n\\nenum DeployMethod {\\n    REMOVE,\\n    REPLACE,\\n    ADD,\\n    REMOVE_AND_ADD\\n}\\n\"\r\n    },\r\n    \"contracts/interface/D4AErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nerror NotDaoOwner();\\n\\nerror NotCanvasOwner();\\n\\nerror NotRole(bytes32 role, address account);\\n\\nerror NotCaller(address caller);\\n\\nerror RoyaltyFeeRatioOutOfRange();\\n\\nerror UnauthorizedToExchangeRoyaltyTokenToETH();\\n\\nerror Blacklisted();\\n\\nerror NotInWhitelist();\\n\\nerror InvalidETHRatio();\\n\\nerror ExceedMaxMintableRound();\\n\\nerror ExceedDaoMintableRound();\\n\\nerror NewMintableRoundsFewerThanRewardIssuedRounds();\\n\\nerror InvalidRound();\\n\\nerror ExceedMinterMaxMintAmount();\\n\\nerror NftExceedMaxAmount();\\n\\nerror ZeroFloorPriceCannotUseLinearPriceVariation();\\n\\nerror D4APaused();\\n\\nerror Paused(bytes32 id);\\n\\nerror UriAlreadyExist(string uri);\\n\\nerror UriNotExist(string uri);\\n\\nerror DaoIndexTooLarge();\\n\\nerror DaoIndexAlreadyExist();\\n\\nerror InvalidSignature();\\n\\nerror DaoNotExist();\\n\\nerror CanvasNotExist();\\n\\nerror PriceTooLow();\\n\\nerror NotEnoughEther();\\n\\nerror D4AProjectAlreadyExist(bytes32 daoId);\\n\\nerror D4ACanvasAlreadyExist(bytes32 canvasId);\\n\\nerror StartRoundAlreadyPassed();\\n\\nerror DaoNotStarted();\\n\\nerror NotOperationRole();\\n\\nerror UnableToUnlock();\\n\\nerror BasicDaoLocked();\\n\\nerror NotCanvasIdOfSpecialTokenUri();\\n\\nerror NotBasicDaoNftFlatPrice();\\n\\nerror SupplyOutOfRange();\\n\\nerror ExceedDailyMintCap();\"\r\n    },\r\n    \"contracts/interface/IPriceTemplate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { PriceStorage } from \\\"contracts/storages/PriceStorage.sol\\\";\\n\\ninterface IPriceTemplate {\\n    function getCanvasNextPrice(\\n        uint256 startRound,\\n        uint256 currentRound,\\n        uint256 priceFactor,\\n        uint256 daoFloorPrice,\\n        PriceStorage.MintInfo memory maxPrice,\\n        PriceStorage.MintInfo memory mintInfo\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateCanvasPrice(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        uint256 currentRound,\\n        uint256 price,\\n        uint256 priceMultiplierInBps\\n    )\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRewardTemplate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { UpdateRewardParam } from \\\"contracts/interface/D4AStructs.sol\\\";\\n\\ninterface IRewardTemplate {\\n    function updateReward(UpdateRewardParam memory param) external payable;\\n\\n    function claimDaoCreatorReward(\\n        bytes32 daoId,\\n        address protocolFeePool,\\n        address daoCreator,\\n        uint256 currentRound,\\n        address token\\n    )\\n        external\\n        returns (uint256 protocolClaimableReward, uint256 daoCreatorClaimableReward);\\n\\n    function claimCanvasCreatorReward(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        address canvasCreator,\\n        uint256 currentRound,\\n        address token\\n    )\\n        external\\n        returns (uint256 claimableReward);\\n\\n    function claimNftMinterReward(\\n        bytes32 daoId,\\n        address nftMinter,\\n        uint256 currentRound,\\n        address token\\n    )\\n        external\\n        returns (uint256 claimableReward);\\n\\n    function setRewardCheckpoint(bytes32 daoId, int256 mintableRoundDelta, uint256 totalRewardDelta) external payable;\\n\\n    function getRoundReward(bytes32 daoId, uint256 round) external view returns (uint256 rewardAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPermissionControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport { Whitelist, Blacklist } from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { ID4AOwnerProxy } from \\\"contracts/interface/ID4AOwnerProxy.sol\\\";\\n\\ninterface IPermissionControl {\\n    event MinterBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event CanvasCreatorBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event MinterUnBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event CanvasCreatorUnBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event WhitelistModified(bytes32 indexed daoId, Whitelist whitelist);\\n\\n    function getWhitelist(bytes32 daoId) external view returns (Whitelist calldata whitelist);\\n\\n    function addPermissionWithSignature(\\n        bytes32 daoId,\\n        Whitelist calldata whitelist,\\n        Blacklist calldata blacklist,\\n        bytes calldata signature\\n    )\\n        external;\\n\\n    function addPermission(bytes32 daoId, Whitelist calldata whitelist, Blacklist calldata blacklist) external;\\n\\n    function modifyPermission(\\n        bytes32 daoId,\\n        Whitelist calldata whitelist,\\n        Blacklist calldata blacklist,\\n        Blacklist calldata unblacklist\\n    )\\n        external;\\n\\n    function isMinterBlacklisted(bytes32 daoId, address _account) external view returns (bool);\\n\\n    function isCanvasCreatorBlacklisted(bytes32 daoId, address _account) external view returns (bool);\\n\\n    function inMinterWhitelist(\\n        bytes32 daoId,\\n        address _account,\\n        bytes32[] calldata _proof\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function inMinterNFTHolderPasses(Whitelist memory whitelist, address account) external view returns (bool);\\n\\n    function inCanvasCreatorWhitelist(\\n        bytes32 daoId,\\n        address _account,\\n        bytes32[] calldata _proof\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function inCanvasCreatorNFTHolderPasses(Whitelist memory whitelist, address account) external view returns (bool);\\n\\n    function setOwnerProxy(ID4AOwnerProxy _ownerProxy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AProtocolReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ID4AProtocolReadable {\\n    // legacy functions\\n    function getProjectCanvasAt(bytes32 daoId, uint256 index) external view returns (bytes32);\\n\\n    function getProjectInfo(bytes32 daoId)\\n        external\\n        view\\n        returns (\\n            uint256 startRound,\\n            uint256 mintableRound,\\n            uint256 maxNftAmount,\\n            address daoFeePool,\\n            uint96 royaltyFeeRatioInBps,\\n            uint256 index,\\n            string memory daoUri,\\n            uint256 erc20TotalSupply\\n        );\\n\\n    function getProjectFloorPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getProjectTokens(bytes32 daoId) external view returns (address token, address nft);\\n\\n    function getCanvasNFTCount(bytes32 canvasId) external view returns (uint256);\\n\\n    function getTokenIDAt(bytes32 canvasId, uint256 index) external view returns (uint256);\\n\\n    function getCanvasProject(bytes32 canvasId) external view returns (bytes32);\\n\\n    function getCanvasURI(bytes32 canvasId) external view returns (string memory);\\n\\n    function getProjectCanvasCount(bytes32 daoId) external view returns (uint256);\\n\\n    // new functions\\n    // DAO related functions\\n    function getDaoStartRound(bytes32 daoId) external view returns (uint256 startRound);\\n\\n    function getDaoMintableRound(bytes32 daoId) external view returns (uint256 mintableRound);\\n\\n    function getDaoIndex(bytes32 daoId) external view returns (uint256 index);\\n\\n    function getDaoUri(bytes32 daoId) external view returns (string memory daoUri);\\n\\n    function getDaoFeePool(bytes32 daoId) external view returns (address daoFeePool);\\n\\n    function getDaoToken(bytes32 daoId) external view returns (address token);\\n\\n    function getDaoTokenMaxSupply(bytes32 daoId) external view returns (uint256 tokenMaxSupply);\\n\\n    function getDaoNft(bytes32 daoId) external view returns (address nft);\\n\\n    function getDaoNftMaxSupply(bytes32 daoId) external view returns (uint256 nftMaxSupply);\\n\\n    function getDaoNftTotalSupply(bytes32 daoId) external view returns (uint256 nftTotalSupply);\\n\\n    function getDaoNftRoyaltyFeeRatioInBps(bytes32 daoId) external view returns (uint96 royaltyFeeRatioInBps);\\n\\n    function getDaoExist(bytes32 daoId) external view returns (bool);\\n\\n    function getDaoCanvases(bytes32 daoId) external view returns (bytes32[] memory canvases);\\n\\n    function getDaoPriceTemplate(bytes32 daoId) external view returns (address priceTemplate);\\n\\n    function getDaoPriceFactor(bytes32 daoId) external view returns (uint256 priceFactor);\\n\\n    function getDaoRewardTemplate(bytes32 daoId) external view returns (address rewardTemplate);\\n\\n    function getDaoMintCap(bytes32 daoId) external view returns (uint32);\\n\\n    function getDaoNftHolderMintCap(bytes32 daoId) external view returns (uint32);\\n\\n    function getUserMintInfo(\\n        bytes32 daoId,\\n        address account\\n    )\\n        external\\n        view\\n        returns (uint32 minted, uint32 userMintCap);\\n\\n    function getDaoFeePoolETHRatio(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoFeePoolETHRatioFlatPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoTag(bytes32 daoId) external view returns (string memory);\\n\\n    // canvas related functions\\n    function getCanvasDaoId(bytes32 canvasId) external view returns (bytes32 daoId);\\n\\n    function getCanvasTokenIds(bytes32 canvasId) external view returns (uint256[] memory tokenIds);\\n\\n    function getCanvasIndex(bytes32 canvasId) external view returns (uint256);\\n\\n    function getCanvasUri(bytes32 canvasId) external view returns (string memory canvasUri);\\n\\n    function getCanvasRebateRatioInBps(bytes32 canvasId) external view returns (uint256 rebateRatioInBps);\\n\\n    function getCanvasExist(bytes32 canvasId) external view returns (bool);\\n\\n    // prices related functions\\n    function getCanvasLastPrice(bytes32 canvasId) external view returns (uint256 round, uint256 price);\\n\\n    function getCanvasNextPrice(bytes32 canvasId) external view returns (uint256 price);\\n\\n    function getDaoMaxPriceInfo(bytes32 daoId) external view returns (uint256 round, uint256 price);\\n\\n    function getDaoFloorPrice(bytes32 daoId) external view returns (uint256 floorPrice);\\n\\n    // reward related functions\\n    function getDaoRewardStartRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 startRound);\\n\\n    function getDaoRewardTotalRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalRound);\\n\\n    function getDaoTotalReward(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalReward);\\n\\n    function getDaoRewardDecayFactor(bytes32 daoId) external view returns (uint256 rewardDecayFactor);\\n\\n    function getDaoRewardIsProgressiveJackpot(bytes32 daoId) external view returns (bool isProgressiveJackpot);\\n\\n    function getDaoRewardLastActiveRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 lastActiveRound);\\n\\n    function getDaoRewardActiveRounds(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256[] memory activeRounds);\\n\\n    function getDaoCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getCanvasCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getNftMinterClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getTotalWeight(bytes32 daoId, uint256 round) external view returns (uint256 totalWeight);\\n\\n    function getProtocolWeight(bytes32 daoId, uint256 round) external view returns (uint256 protocolWeight);\\n\\n    function getDaoCreatorWeight(bytes32 daoId, uint256 round) external view returns (uint256 creatorWeight);\\n\\n    function getCanvasCreatorWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 creatorWeight);\\n\\n    function getNftMinterWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 minterWeight);\\n\\n    function getDaoCreatorERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getCanvasCreatorERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getNftMinterERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getRoundReward(bytes32 daoId, uint256 round) external view returns (uint256);\\n\\n    function getRewardTillRound(bytes32 daoId, uint256 round) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPDProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { MintNftInfo } from \\\"./D4AStructs.sol\\\";\\n\\ninterface IPDProtocol {\\n    event D4AMintNFT(bytes32 daoId, bytes32 canvasId, uint256 tokenId, string tokenUri, uint256 price);\\n\\n    event D4AClaimProjectERC20Reward(bytes32 daoId, address token, uint256 amount);\\n\\n    event D4AClaimCanvasReward(bytes32 daoId, bytes32 canvasId, address token, uint256 amount);\\n\\n    event D4AClaimNftMinterReward(bytes32 daoId, address token, uint256 amount);\\n\\n    event D4AExchangeERC20ToERC20(\\n        bytes32 daoId, address owner, address to, address grantToken, uint256 tokenAmount, uint256 grantTokenAmount\\n    );\\n\\n    event D4AExchangeERC20ToETH(bytes32 daoId, address owner, address to, uint256 tokenAmount, uint256 ethAmount);\\n\\n    function initialize() external;\\n\\n    function createCanvasAndMintNFT(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string memory canvasUri,\\n        address to,\\n        string calldata tokenUri,\\n        bytes calldata signature,\\n        uint256 flatPrice,\\n        bytes32[] memory proof,\\n        address nftOwner\\n    )\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function mintNFT(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string calldata tokenUri,\\n        bytes32[] calldata proof,\\n        uint256 nftFlatPrice,\\n        bytes calldata signature\\n    )\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function mintNFTAndTransfer(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string calldata tokenUri,\\n        bytes32[] calldata proof,\\n        uint256 nftFlatPrice,\\n        bytes calldata signature,\\n        address to\\n    )\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function batchMint(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        bytes32[] calldata proof,\\n        MintNftInfo[] calldata mintNftInfos,\\n        bytes[] calldata signatures\\n    )\\n        external\\n        payable\\n        returns (uint256[] memory);\\n\\n    function claimProjectERC20Reward(bytes32 daoId) external returns (uint256);\\n\\n    function claimCanvasReward(bytes32 canvasId) external returns (uint256);\\n\\n    function claimNftMinterReward(bytes32 daoId, address minter) external returns (uint256);\\n\\n    function exchangeERC20ToETH(bytes32 daoId, uint256 amount, address to) external returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interface/IPDCreate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { DaoMetadataParam, BasicDaoParam } from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { ICreate } from \\\"contracts/interface/ICreate.sol\\\";\\n\\ninterface IPDCreate is ICreate {\\n    function createBasicDao(\\n        DaoMetadataParam memory daoMetadataParam,\\n        BasicDaoParam memory basicDaoParam\\n    )\\n        external\\n        payable\\n        returns (bytes32 daoId);\\n\\n    function createOwnerBasicDao(\\n        DaoMetadataParam memory daoMetadataParam,\\n        BasicDaoParam memory basicDaoParam\\n    )\\n        external\\n        payable\\n        returns (bytes32 daoId);\\n\\n    function createContinuousDao(\\n        bytes32 existDaoId,\\n        DaoMetadataParam memory daoMetadataParam,\\n        BasicDaoParam memory basicDaoParam,\\n        bool needMintableWork,\\n        uint256 dailyMintCap\\n    )\\n        external\\n        payable\\n        returns (bytes32 daoId);\\n\\n    function createCanvas(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string calldata canvasUri,\\n        bytes32[] calldata proof,\\n        address to\\n    )\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/storages/ProtocolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary ProtocolStorage {\\n    struct Layout {\\n        mapping(bytes32 => bytes32) nftHashToCanvasId;\\n        mapping(bytes32 => bool) uriExists;\\n        uint256[256] lastestDaoIndexes;\\n        uint256 d4aDaoIndexBitMap;\\n        uint256 basicDaoIndexBitMap;\\n        mapping(uint256 daoIndex => bytes32 daoId)[256] daoIndexToIds;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.ProtocolStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/DaoStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { PriceTemplateType, RewardTemplateType, DaoTag } from \\\"../interface/D4AEnums.sol\\\";\\nimport { DaoMintInfo, NftMinterCapInfo, NftMinterCap } from \\\"contracts/interface/D4AStructs.sol\\\";\\n\\nlibrary DaoStorage {\\n    struct DaoInfo {\\n        // metadata\\n        uint256 startRound;\\n        uint256 mintableRound;\\n        uint256 daoIndex;\\n        string daoUri;\\n        address daoFeePool;\\n        // token related info\\n        address token;\\n        uint256 tokenMaxSupply;\\n        // nft related info\\n        address nft;\\n        uint256 nftMaxSupply;\\n        uint256 nftTotalSupply;\\n        uint96 royaltyFeeRatioInBps;\\n        // miscellanous\\n        bool daoExist;\\n        PriceTemplateType priceTemplateType;\\n        RewardTemplateType rewardTemplateType;\\n        DaoTag daoTag;\\n        DaoMintInfo daoMintInfo;\\n        bytes32[] canvases;\\n        uint256 nftPriceFactor;\\n        uint256 daoFeePoolETHRatioInBps;\\n        uint256 daoFeePoolETHRatioInBpsFlatPrice;\\n        NftMinterCap nftMinterCap;\\n        NftMinterCapInfo[] nftMinterCapInfo;\\n        mapping(uint256 => uint256) dailyMint;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 daoId => DaoInfo) daoInfos;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.DaoStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/storages/CanvasStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary CanvasStorage {\\n    struct CanvasInfo {\\n        bytes32 daoId;\\n        uint256[] tokenIds;\\n        uint256 index;\\n        string canvasUri;\\n        bool canvasExist;\\n        uint256 canvasRebateRatioInBps;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 canvasId => CanvasInfo) canvasInfos;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.CanvasStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/PriceStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary PriceStorage {\\n    struct MintInfo {\\n        uint256 round;\\n        uint256 price;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 canvasId => MintInfo mintInfo) canvasLastMintInfos;\\n        mapping(bytes32 daoId => MintInfo) daoMaxPrices;\\n        mapping(bytes32 daoId => uint256 floorPrice) daoFloorPrices;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.PriceStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/RewardStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary RewardStorage {\\n    struct RewardCheckpoint {\\n        uint256 startRound;\\n        uint256 totalRound;\\n        uint256 totalReward;\\n        uint256 lastActiveRound; // deprecated\\n        uint256[] activeRounds;\\n        // claimable round index\\n        uint256 daoCreatorClaimableRoundIndex;\\n        mapping(bytes32 canvasId => uint256 claimableRoundIndex) canvasCreatorClaimableRoundIndexes;\\n        mapping(address nftMinter => uint256 claimableRoundIndex) nftMinterClaimableRoundIndexes;\\n    }\\n\\n    struct RewardInfo {\\n        RewardCheckpoint[] rewardCheckpoints;\\n        uint256 rewardIssuePendingRound;\\n        uint256 rewardDecayFactor;\\n        bool isProgressiveJackpot;\\n        // weights\\n        mapping(uint256 round => uint256 totalWeight) totalWeights; // also total ETH in DAO fee pool at given round\\n        mapping(uint256 round => uint256 weight) protocolWeights;\\n        mapping(uint256 round => uint256 weight) daoCreatorWeights;\\n        mapping(uint256 round => mapping(bytes32 canvasId => uint256 weight)) canvasCreatorWeights;\\n        mapping(uint256 round => mapping(address nftMinter => uint256 weight)) nftMinterWeights;\\n        uint256 daoCreatorERC20RatioInBps;\\n        uint256 canvasCreatorERC20RatioInBps;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 daoId => RewardInfo rewardInfo) rewardInfos;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.RewardStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/SettingsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\nimport { ID4ADrb } from \\\"../interface/ID4ADrb.sol\\\";\\nimport { ID4AFeePoolFactory } from \\\"../interface/ID4AFeePoolFactory.sol\\\";\\nimport { ID4AERC20Factory } from \\\"../interface/ID4AERC20Factory.sol\\\";\\nimport { ID4AERC721Factory } from \\\"../interface/ID4AERC721Factory.sol\\\";\\nimport { ID4AOwnerProxy } from \\\"../interface/ID4AOwnerProxy.sol\\\";\\nimport { IPermissionControl } from \\\"../interface/IPermissionControl.sol\\\";\\n\\nlibrary SettingsStorage {\\n    struct Layout {\\n        // fee related\\n        uint256 createDaoFeeAmount;\\n        uint256 createCanvasFeeAmount;\\n        uint256 protocolMintFeeRatioInBps;\\n        uint256 daoFeePoolMintFeeRatioInBps;\\n        uint256 daoFeePoolMintFeeRatioInBpsFlatPrice;\\n        uint256 protocolRoyaltyFeeRatioInBps;\\n        uint256 minRoyaltyFeeRatioInBps;\\n        uint256 maxRoyaltyFeeRatioInBps;\\n        uint256 protocolERC20RatioInBps;\\n        uint256 daoCreatorERC20RatioInBps;\\n        uint256 canvasCreatorERC20RatioInBps;\\n        // contract address\\n        address protocolFeePool;\\n        ID4ADrb drb;\\n        ID4AERC20Factory erc20Factory;\\n        ID4AERC721Factory erc721Factory;\\n        ID4AFeePoolFactory feePoolFactory;\\n        ID4AOwnerProxy ownerProxy;\\n        IPermissionControl permissionControl;\\n        address createProjectProxy;\\n        // params\\n        uint256 tokenMaxSupply;\\n        uint256 maxMintableRound; //366\\n        uint256[] mintableRounds;\\n        uint256[] daoFloorPrices;\\n        uint256[] nftMaxSupplies;\\n        address assetOwner;\\n        bool isProtocolPaused;\\n        mapping(bytes32 => bool) pauseStatuses;\\n        uint256 reservedDaoAmount;\\n        address[256] priceTemplates;\\n        address[256] rewardTemplates;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.Settings\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/GrantStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary GrantStorage {\\n    struct Layout {\\n        mapping(bytes32 daoId => address vestingWallet) vestingWallets;\\n        mapping(address token => bool isTokenAllowed) tokensAllowed;\\n        address[] allowedTokenList;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.GrantStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/BasicDaoStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary BasicDaoStorage {\\n    struct BasicDaoInfo {\\n        bool unlocked;\\n        bytes32 canvasIdOfSpecialNft;\\n        uint256 tokenId;\\n        uint256 dailyMintCap;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 daoId => BasicDaoInfo basicDaoInfo) basicDaoInfos;\\n        string specialTokenUriPrefix;\\n        uint256 basicDaoNftFlatPrice;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.BasicDaoStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/D4AERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interface/ID4AERC20Factory.sol\\\";\\n\\ncontract D4AERC20 is Initializable, ERC20PermitUpgradeable, AccessControlUpgradeable {\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant BURNER = keccak256(\\\"BURNER\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(string memory name, string memory symbol, address _minter) public initializer {\\n        __ERC20Permit_init(name);\\n        __ERC20_init(name, symbol);\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER, _minter); // TODO: remove this\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        require(hasRole(MINTER, msg.sender), \\\"only for minter\\\");\\n        super._mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) public {\\n        require(hasRole(BURNER, msg.sender), \\\"only for burner\\\");\\n        super._burn(from, amount);\\n    }\\n\\n    function changeAdmin(address new_admin) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(msg.sender != new_admin, \\\"new admin cannot be same as old one\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, new_admin);\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\\ncontract D4AERC20Factory is ID4AERC20Factory {\\n    using Clones for address;\\n\\n    D4AERC20 public impl;\\n\\n    event NewD4AERC20(address addr);\\n\\n    constructor() {\\n        impl = new D4AERC20();\\n    }\\n\\n    function createD4AERC20(string memory _name, string memory _symbol, address _minter) public returns (address) {\\n        address t = address(impl).clone();\\n        D4AERC20(t).initialize(_name, _symbol, _minter);\\n        D4AERC20(t).changeAdmin(msg.sender);\\n        emit NewD4AERC20(t);\\n        return t;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/D4AERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721RoyaltyUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract D4AERC721 is\\n    Initializable,\\n    ERC721URIStorageUpgradeable,\\n    AccessControlUpgradeable,\\n    ERC721RoyaltyUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    CountersUpgradeable.Counter internal _tokenIds;\\n\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant ROYALTY_OWNER = keccak256(\\\"ROYALTY\\\");\\n\\n    string internal project_uri;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function setContractUri(string memory _uri) public onlyOwner {\\n        project_uri = _uri;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return project_uri;\\n    }\\n\\n    function initialize(string memory name, string memory symbol, uint256) public virtual initializer {\\n        __D4AERC721_init(name, symbol);\\n    }\\n\\n    function __D4AERC721_init(string memory name, string memory symbol) internal onlyInitializing {\\n        __ERC721_init(name, symbol);\\n        __ERC721URIStorage_init();\\n        __ERC721Royalty_init();\\n\\n        __AccessControl_init();\\n        __Ownable_init();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _tokenIds.reset();\\n    }\\n\\n    function mintItem(address player, string memory uri, uint256) public virtual onlyRole(MINTER) returns (uint256) {\\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(player, newItemId);\\n        _setTokenURI(newItemId, uri);\\n        return newItemId;\\n    }\\n\\n    function setRoyaltyInfo(address _receiver, uint96 _royaltyFeeInBips) public onlyRole(ROYALTY_OWNER) {\\n        _setDefaultRoyalty(_receiver, _royaltyFeeInBips);\\n    }\\n\\n    function _burn(uint256 _tokenId) internal override(ERC721URIStorageUpgradeable, ERC721RoyaltyUpgradeable) {\\n        super._burn(_tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721URIStorageUpgradeable, AccessControlUpgradeable, ERC721RoyaltyUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function changeAdmin(address new_admin) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(msg.sender != new_admin, \\\"new admin cannot be same as old one\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, new_admin);\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/feepool/D4AFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract D4AFeePool is AccessControlUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    string public name;\\n    uint256 public turnover;\\n\\n    bytes32 public constant AUTO_TRANSFER = keccak256(\\\"AUTO_TRANSFER\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(string memory _name) public initializer {\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        name = _name;\\n    }\\n\\n    function transfer(\\n        address erc20_token_addr,\\n        address payable to,\\n        uint256 tokens\\n    )\\n        public\\n        nonReentrant\\n        returns (bool success)\\n    {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(AUTO_TRANSFER, msg.sender),\\n            \\\"only admin or auto transfer can call this\\\"\\n        );\\n\\n        if (erc20_token_addr == address(0x0)) {\\n            (bool succ,) = to.call{ value: tokens }(\\\"\\\");\\n            require(succ, \\\"transfer eth failed\\\");\\n            return true;\\n        }\\n\\n        IERC20Upgradeable(erc20_token_addr).safeTransfer(to, tokens);\\n        return true;\\n    }\\n\\n    receive() external payable {\\n        turnover += msg.value;\\n    }\\n\\n    function changeAdmin(address new_admin) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(msg.sender != new_admin, \\\"new admin cannot be same as old one\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, new_admin);\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\\ncontract D4AFeePoolFactory {\\n    using Clones for address;\\n\\n    D4AFeePool public impl;\\n    address public proxy_admin;\\n\\n    constructor() {\\n        proxy_admin = address(new ProxyAdmin());\\n        ProxyAdmin(proxy_admin).transferOwnership(msg.sender);\\n        impl = new D4AFeePool();\\n    }\\n\\n    event NewD4AFeePool(address proxy, address admin);\\n\\n    function createD4AFeePool(string memory _name) public returns (address pool) {\\n        bytes memory data = abi.encodeWithSignature(\\\"initialize(string)\\\", _name);\\n        TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(impl), proxy_admin, data);\\n        D4AFeePool(payable(address(proxy))).changeAdmin(msg.sender);\\n        emit NewD4AFeePool(address(proxy), proxy_admin);\\n        return address(proxy);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/feepool/D4AVestingWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (finance/VestingWallet.sol)\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solady/utils/SafeTransferLib.sol\\\";\\n\\n/**\\n * @title VestingWallet\\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\\n * The vesting schedule is customizable through the {vestedAmount} function.\\n *\\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n */\\ncontract D4AVestingWallet {\\n    error ZeroAddress();\\n    error InvalidAmount();\\n\\n    event EtherReleased(uint256 amount);\\n    event ERC20Released(address indexed token, uint256 amount);\\n\\n    uint256 private _released;\\n    mapping(address => uint256) private _erc20Released;\\n    address private immutable _beneficiary;\\n\\n    uint256 internal _lastUpdatedDaoTokenIssuance;\\n    mapping(address token => uint256 lastUpdatedDaoTokenIssuance) internal _lastUpdatedDaoTokenIssuances;\\n\\n    address internal immutable _daoToken;\\n    uint256 internal immutable _totalDaoTokenIssuance;\\n    uint256 internal immutable _initDaoTokenBalance;\\n\\n    constructor(address beneficiaryAddress, address daoToken, uint256 totalDaoTokenIssuance) payable {\\n        if (beneficiaryAddress == address(0) || daoToken == address(0)) revert ZeroAddress();\\n        if (totalDaoTokenIssuance == 0) revert InvalidAmount();\\n\\n        _beneficiary = beneficiaryAddress;\\n        _daoToken = daoToken;\\n        _initDaoTokenBalance = IERC20(_daoToken).totalSupply();\\n        _totalDaoTokenIssuance = totalDaoTokenIssuance;\\n    }\\n\\n    function release() public virtual {\\n        uint256 amount = releasable();\\n        if (amount > 0) {\\n            _released += amount;\\n            _lastUpdatedDaoTokenIssuance = IERC20(_daoToken).totalSupply() - _initDaoTokenBalance;\\n            emit EtherReleased(amount);\\n            SafeTransferLib.safeTransferETH(payable(beneficiary()), amount);\\n        }\\n    }\\n\\n    function release(address token) public virtual {\\n        uint256 amount = releasable(token);\\n        if (amount > 0) {\\n            _erc20Released[token] += amount;\\n            _lastUpdatedDaoTokenIssuances[token] = IERC20(_daoToken).totalSupply() - _initDaoTokenBalance;\\n            emit ERC20Released(token, amount);\\n            SafeTransferLib.safeTransfer(token, beneficiary(), amount);\\n        }\\n    }\\n\\n    function releasable() public view virtual returns (uint256) {\\n        uint256 daoTokenIncrease = IERC20(_daoToken).totalSupply() - _lastUpdatedDaoTokenIssuance - _initDaoTokenBalance;\\n        return daoTokenIncrease * address(this).balance / (_totalDaoTokenIssuance - _lastUpdatedDaoTokenIssuance);\\n    }\\n\\n    function releasable(address token) public view virtual returns (uint256) {\\n        uint256 daoTokenIncrease =\\n            IERC20(_daoToken).totalSupply() - _lastUpdatedDaoTokenIssuances[token] - _initDaoTokenBalance;\\n        return daoTokenIncrease * IERC20(token).balanceOf(address(this))\\n            / (_totalDaoTokenIssuance - _lastUpdatedDaoTokenIssuances[token]);\\n    }\\n\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    function released() public view virtual returns (uint256) {\\n        return _released;\\n    }\\n\\n    function released(address token) public view virtual returns (uint256) {\\n        return _erc20Released[token];\\n    }\\n\\n    function getDaoToken() public view virtual returns (address) {\\n        return _daoToken;\\n    }\\n\\n    function getLastUpdatedDaoTokenIssuance() public view virtual returns (uint256) {\\n        return _lastUpdatedDaoTokenIssuance;\\n    }\\n\\n    function getLastUpdatedDaoTokenIssuance(address token) public view virtual returns (uint256) {\\n        return _lastUpdatedDaoTokenIssuances[token];\\n    }\\n\\n    function getTotalDaoTokenIssuance() public view virtual returns (uint256) {\\n        return _totalDaoTokenIssuance;\\n    }\\n\\n    receive() external payable virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/ProtocolChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"contracts/interface/D4AErrors.sol\\\";\\nimport { ProtocolStorage } from \\\"contracts/storages/ProtocolStorage.sol\\\";\\nimport { DaoStorage } from \\\"contracts/storages/DaoStorage.sol\\\";\\nimport { SettingsStorage } from \\\"contracts/storages/SettingsStorage.sol\\\";\\n\\nabstract contract ProtocolChecker {\\n    function _checkPauseStatus() internal view {\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        if (l.isProtocolPaused) {\\n            revert D4APaused();\\n        }\\n    }\\n\\n    function _checkPauseStatus(bytes32 id) internal view {\\n        SettingsStorage.Layout storage l = SettingsStorage.layout();\\n        if (l.pauseStatuses[id]) {\\n            revert Paused(id);\\n        }\\n    }\\n\\n    function _checkUriExist(string calldata uri) internal view {\\n        if (!_uriExist(uri)) {\\n            revert UriNotExist(uri);\\n        }\\n    }\\n\\n    function _checkUriNotExist(string memory uri) internal view {\\n        if (_uriExist(uri)) {\\n            revert UriAlreadyExist(uri);\\n        }\\n    }\\n\\n    function _checkCaller(address caller) internal view {\\n        if (caller != msg.sender) {\\n            revert NotCaller(caller);\\n        }\\n    }\\n\\n    function _uriExist(string memory uri) internal view returns (bool) {\\n        return ProtocolStorage.layout().uriExists[keccak256(abi.encodePacked(uri))];\\n    }\\n\\n    function _checkDaoExist(bytes32 daoId) internal view {\\n        if (!DaoStorage.layout().daoInfos[daoId].daoExist) revert DaoNotExist();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/Test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\n// \ud83d\udcac ABOUT\\n// Forge Std's default Test.\\n\\n// \ud83e\udde9 MODULES\\nimport {console} from \\\"./console.sol\\\";\\nimport {console2} from \\\"./console2.sol\\\";\\nimport {safeconsole} from \\\"./safeconsole.sol\\\";\\nimport {StdAssertions} from \\\"./StdAssertions.sol\\\";\\nimport {StdChains} from \\\"./StdChains.sol\\\";\\nimport {StdCheats} from \\\"./StdCheats.sol\\\";\\nimport {stdError} from \\\"./StdError.sol\\\";\\nimport {StdInvariant} from \\\"./StdInvariant.sol\\\";\\nimport {stdJson} from \\\"./StdJson.sol\\\";\\nimport {stdMath} from \\\"./StdMath.sol\\\";\\nimport {StdStorage, stdStorage} from \\\"./StdStorage.sol\\\";\\nimport {StdStyle} from \\\"./StdStyle.sol\\\";\\nimport {StdUtils} from \\\"./StdUtils.sol\\\";\\nimport {Vm} from \\\"./Vm.sol\\\";\\n\\n// \ud83d\udce6 BOILERPLATE\\nimport {TestBase} from \\\"./Base.sol\\\";\\nimport {DSTest} from \\\"ds-test/test.sol\\\";\\n\\n// \u2b50\ufe0f TEST\\n// Note: DSTest and any contracts that inherit it must be inherited first, https://github.com/foundry-rs/forge-std/pull/241\\nabstract contract Test is DSTest, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils, TestBase {\\n// Note: IS_TEST() must return true.\\n// Note: Must have failure system, https://github.com/dapphub/ds-test/blob/cd98eff28324bfac652e63a239a60632a761790b/src/test.sol#L39-L76.\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/initializable/IInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IInitializableInternal } from './IInitializableInternal.sol';\\n\\ninterface IInitializable is IInitializableInternal {}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/initializable/InitializableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IInitializableInternal } from './IInitializableInternal.sol';\\nimport { InitializableStorage } from './InitializableStorage.sol';\\n\\nabstract contract InitializableInternal is IInitializableInternal {\\n    using AddressUtils for address;\\n    using InitializableStorage for InitializableStorage.Layout;\\n\\n    modifier initializer() {\\n        _setInitializedVersion(1);\\n        _;\\n    }\\n\\n    modifier reinitializer(uint8 version) {\\n        _setInitializedVersion(version);\\n        _;\\n    }\\n\\n    function _setInitializedVersion(uint8 version) internal virtual {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n\\n        if (l.initialized >= version)\\n            revert Initializable__AlreadyInitialized();\\n\\n        l.initialized = version;\\n        emit Initialized(version);\\n    }\\n\\n    function _getInitializedVersion()\\n        internal\\n        view\\n        virtual\\n        returns (uint8 version)\\n    {\\n        version = InitializableStorage.layout().initialized;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/reentrancy_guard/IReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/reentrancy_guard/ReentrancyGuardStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AOwnerProxy {\\n    function ownerOf(bytes32 hash) external view returns (address);\\n    function initOwnerOf(bytes32 hash, address addr) external returns (bool);\\n    function transferOwnership(bytes32 hash, address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ICreate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ICreate {\\n    event NewProject(\\n        bytes32 daoId, string daoUri, address daoFeePool, address token, address nft, uint256 royaltyFeeRatioInBps\\n    );\\n\\n    event NewCanvas(bytes32 daoId, bytes32 canvasId, string canvasUri);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4ADrb.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ID4ADrb {\\n    event CheckpointSet(uint256 startDrb, uint256 startBlock, uint256 blocksPerDrbE18);\\n\\n    function getCheckpointsLength() external view returns (uint256);\\n\\n    function getStartBlock(uint256 drb) external view returns (uint256);\\n\\n    function getDrb(uint256 blockNumber) external view returns (uint256);\\n\\n    function currentRound() external view returns (uint256);\\n\\n    function setNewCheckpoint(uint256 startDrb, uint256 startBlock, uint256 blocksPerDrbE18) external;\\n\\n    function modifyLastCheckpoint(uint256 startDrb, uint256 startBlock, uint256 blocksPerDrbE18) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AFeePoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AFeePoolFactory {\\n    function createD4AFeePool(string memory _name) external returns (address pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AERC20Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AERC20Factory {\\n    function createD4AERC20(string memory _name, string memory _symbol, address _minter) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AERC721Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AERC721Factory {\\n    function createD4AERC721(\\n        string memory name,\\n        string memory symbol,\\n        uint256 startTokenId\\n    )\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./ERC20PermitUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC4906Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906Upgradeable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721RoyaltyUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../common/ERC2981Upgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721RoyaltyUpgradeable is Initializable, ERC2981Upgradeable, ERC721Upgradeable {\\n    function __ERC721Royalty_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Royalty_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, ERC2981Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        ITransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(address) external;\\n\\n    function upgradeTo(address) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                revert(\\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() private {\\n        require(msg.value == 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\"\r\n    },\r\n    \"lib/forge-std/src/console2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\\nlibrary console2 {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _castLogPayloadViewToPure(\\n        function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\\n    }\\n\\n    function _sendLogPayloadView(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, int256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,int256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\"\r\n    },\r\n    \"lib/forge-std/src/safeconsole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\n/// @author philogy <https://github.com/philogy>\\n/// @dev Code generated automatically by script.\\nlibrary safeconsole {\\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\\n\\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\\n    // for the view-to-pure log trick.\\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\\n        function(uint256, uint256) internal pure pureSendLogPayload;\\n        assembly {\\n            pureSendLogPayload := fnIn\\n        }\\n        pureSendLogPayload(offset, size);\\n    }\\n\\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\\n        assembly {\\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\\n        }\\n    }\\n\\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\\n        assembly {\\n            pureMemcopy := fnIn\\n        }\\n        pureMemcopy(fromOffset, toOffset, length);\\n    }\\n\\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\\n        assembly {\\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\\n        }\\n    }\\n\\n    function logMemory(uint256 offset, uint256 length) internal pure {\\n        if (offset >= 0x60) {\\n            // Sufficient memory before slice to prepare call header.\\n            bytes32 m0;\\n            bytes32 m1;\\n            bytes32 m2;\\n            assembly {\\n                m0 := mload(sub(offset, 0x60))\\n                m1 := mload(sub(offset, 0x40))\\n                m2 := mload(sub(offset, 0x20))\\n                // Selector of `logBytes(bytes)`.\\n                mstore(sub(offset, 0x60), 0xe17bf956)\\n                mstore(sub(offset, 0x40), 0x20)\\n                mstore(sub(offset, 0x20), length)\\n            }\\n            _sendLogPayload(offset - 0x44, length + 0x44);\\n            assembly {\\n                mstore(sub(offset, 0x60), m0)\\n                mstore(sub(offset, 0x40), m1)\\n                mstore(sub(offset, 0x20), m2)\\n            }\\n        } else {\\n            // Insufficient space, so copy slice forward, add header and reverse.\\n            bytes32 m0;\\n            bytes32 m1;\\n            bytes32 m2;\\n            uint256 endOffset = offset + length;\\n            assembly {\\n                m0 := mload(add(endOffset, 0x00))\\n                m1 := mload(add(endOffset, 0x20))\\n                m2 := mload(add(endOffset, 0x40))\\n            }\\n            _memcopy(offset, offset + 0x60, length);\\n            assembly {\\n                // Selector of `logBytes(bytes)`.\\n                mstore(add(offset, 0x00), 0xe17bf956)\\n                mstore(add(offset, 0x20), 0x20)\\n                mstore(add(offset, 0x40), length)\\n            }\\n            _sendLogPayload(offset + 0x1c, length + 0x44);\\n            _memcopy(offset + 0x60, offset, length);\\n            assembly {\\n                mstore(add(endOffset, 0x00), m0)\\n                mstore(add(endOffset, 0x20), m1)\\n                mstore(add(endOffset, 0x40), m2)\\n            }\\n        }\\n    }\\n\\n    function log(address p0) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            // Selector of `log(address)`.\\n            mstore(0x00, 0x2c2ecbc2)\\n            mstore(0x20, p0)\\n        }\\n        _sendLogPayload(0x1c, 0x24);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n        }\\n    }\\n\\n    function log(bool p0) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            // Selector of `log(bool)`.\\n            mstore(0x00, 0x32458eed)\\n            mstore(0x20, p0)\\n        }\\n        _sendLogPayload(0x1c, 0x24);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n        }\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            // Selector of `log(uint256)`.\\n            mstore(0x00, 0xf82c50f1)\\n            mstore(0x20, p0)\\n        }\\n        _sendLogPayload(0x1c, 0x24);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n        }\\n    }\\n\\n    function log(bytes32 p0) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(string)`.\\n            mstore(0x00, 0x41304fac)\\n            mstore(0x20, 0x20)\\n            writeString(0x40, p0)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(address,address)`.\\n            mstore(0x00, 0xdaf0d4aa)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(address,bool)`.\\n            mstore(0x00, 0x75b605d3)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(address,uint256)`.\\n            mstore(0x00, 0x8309e8a8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,string)`.\\n            mstore(0x00, 0x759f86bb)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x40)\\n            writeString(0x60, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(bool,address)`.\\n            mstore(0x00, 0x853c4849)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(bool,bool)`.\\n            mstore(0x00, 0x2a110e83)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(bool,uint256)`.\\n            mstore(0x00, 0x399174d3)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,string)`.\\n            mstore(0x00, 0x8feac525)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x40)\\n            writeString(0x60, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(uint256,address)`.\\n            mstore(0x00, 0x69276c86)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(uint256,bool)`.\\n            mstore(0x00, 0x1c9d7eb3)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            // Selector of `log(uint256,uint256)`.\\n            mstore(0x00, 0xf666715a)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x44);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,string)`.\\n            mstore(0x00, 0x643fd0df)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x40)\\n            writeString(0x60, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(string,address)`.\\n            mstore(0x00, 0x319af333)\\n            mstore(0x20, 0x40)\\n            mstore(0x40, p1)\\n            writeString(0x60, p0)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(string,bool)`.\\n            mstore(0x00, 0xc3b55635)\\n            mstore(0x20, 0x40)\\n            mstore(0x40, p1)\\n            writeString(0x60, p0)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(string,uint256)`.\\n            mstore(0x00, 0xb60e72cc)\\n            mstore(0x20, 0x40)\\n            mstore(0x40, p1)\\n            writeString(0x60, p0)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,string)`.\\n            mstore(0x00, 0x4b5c4277)\\n            mstore(0x20, 0x40)\\n            mstore(0x40, 0x80)\\n            writeString(0x60, p0)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,address,address)`.\\n            mstore(0x00, 0x018c84c2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,address,bool)`.\\n            mstore(0x00, 0xf2a66286)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,address,uint256)`.\\n            mstore(0x00, 0x17fe6185)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(address,address,string)`.\\n            mstore(0x00, 0x007150be)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,bool,address)`.\\n            mstore(0x00, 0xf11699ed)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,bool,bool)`.\\n            mstore(0x00, 0xeb830c92)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,bool,uint256)`.\\n            mstore(0x00, 0x9c4f99fb)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(address,bool,string)`.\\n            mstore(0x00, 0x212255cc)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,uint256,address)`.\\n            mstore(0x00, 0x7bc0d848)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,uint256,bool)`.\\n            mstore(0x00, 0x678209a8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(address,uint256,uint256)`.\\n            mstore(0x00, 0xb69bcaf6)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(address,uint256,string)`.\\n            mstore(0x00, 0xa1f2e8aa)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(address,string,address)`.\\n            mstore(0x00, 0xf08744e8)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(address,string,bool)`.\\n            mstore(0x00, 0xcf020fb1)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(address,string,uint256)`.\\n            mstore(0x00, 0x67dd6ff1)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(address,string,string)`.\\n            mstore(0x00, 0xfb772265)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, 0xa0)\\n            writeString(0x80, p1)\\n            writeString(0xc0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,address,address)`.\\n            mstore(0x00, 0xd2763667)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,address,bool)`.\\n            mstore(0x00, 0x18c9c746)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,address,uint256)`.\\n            mstore(0x00, 0x5f7b9afb)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(bool,address,string)`.\\n            mstore(0x00, 0xde9a9270)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,bool,address)`.\\n            mstore(0x00, 0x1078f68d)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,bool,bool)`.\\n            mstore(0x00, 0x50709698)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,bool,uint256)`.\\n            mstore(0x00, 0x12f21602)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(bool,bool,string)`.\\n            mstore(0x00, 0x2555fa46)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,uint256,address)`.\\n            mstore(0x00, 0x088ef9d2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,uint256,bool)`.\\n            mstore(0x00, 0xe8defba9)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(bool,uint256,uint256)`.\\n            mstore(0x00, 0x37103367)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(bool,uint256,string)`.\\n            mstore(0x00, 0xc3fc3970)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(bool,string,address)`.\\n            mstore(0x00, 0x9591b953)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(bool,string,bool)`.\\n            mstore(0x00, 0xdbb4c247)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(bool,string,uint256)`.\\n            mstore(0x00, 0x1093ee11)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(bool,string,string)`.\\n            mstore(0x00, 0xb076847f)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, 0xa0)\\n            writeString(0x80, p1)\\n            writeString(0xc0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,address,address)`.\\n            mstore(0x00, 0xbcfd9be0)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,address,bool)`.\\n            mstore(0x00, 0x9b6ec042)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,address,uint256)`.\\n            mstore(0x00, 0x5a9b5ed5)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(uint256,address,string)`.\\n            mstore(0x00, 0x63cb41f9)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,bool,address)`.\\n            mstore(0x00, 0x35085f7b)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,bool,bool)`.\\n            mstore(0x00, 0x20718650)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,bool,uint256)`.\\n            mstore(0x00, 0x20098014)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(uint256,bool,string)`.\\n            mstore(0x00, 0x85775021)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,uint256,address)`.\\n            mstore(0x00, 0x5c96b331)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,uint256,bool)`.\\n            mstore(0x00, 0x4766da72)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            // Selector of `log(uint256,uint256,uint256)`.\\n            mstore(0x00, 0xd1ed7a3c)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x64);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(uint256,uint256,string)`.\\n            mstore(0x00, 0x71d04af2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x60)\\n            writeString(0x80, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(uint256,string,address)`.\\n            mstore(0x00, 0x7afac959)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(uint256,string,bool)`.\\n            mstore(0x00, 0x4ceda75a)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(uint256,string,uint256)`.\\n            mstore(0x00, 0x37aa7d4c)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, p2)\\n            writeString(0x80, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(uint256,string,string)`.\\n            mstore(0x00, 0xb115611f)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x60)\\n            mstore(0x60, 0xa0)\\n            writeString(0x80, p1)\\n            writeString(0xc0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,address,address)`.\\n            mstore(0x00, 0xfcec75e0)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,address,bool)`.\\n            mstore(0x00, 0xc91d5ed4)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,address,uint256)`.\\n            mstore(0x00, 0x0d26b925)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(string,address,string)`.\\n            mstore(0x00, 0xe0e9ad4f)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xa0)\\n            writeString(0x80, p0)\\n            writeString(0xc0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,bool,address)`.\\n            mstore(0x00, 0x932bbb38)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,bool,bool)`.\\n            mstore(0x00, 0x850b7ad6)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,bool,uint256)`.\\n            mstore(0x00, 0xc95958d6)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(string,bool,string)`.\\n            mstore(0x00, 0xe298f47d)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xa0)\\n            writeString(0x80, p0)\\n            writeString(0xc0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,uint256,address)`.\\n            mstore(0x00, 0x1c7ec448)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,uint256,bool)`.\\n            mstore(0x00, 0xca7733b1)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            // Selector of `log(string,uint256,uint256)`.\\n            mstore(0x00, 0xca47c4eb)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xa4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(string,uint256,string)`.\\n            mstore(0x00, 0x5970e089)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xa0)\\n            writeString(0x80, p0)\\n            writeString(0xc0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(string,string,address)`.\\n            mstore(0x00, 0x95ed0195)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, 0xa0)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n            writeString(0xc0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(string,string,bool)`.\\n            mstore(0x00, 0xb0e0f9b5)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, 0xa0)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n            writeString(0xc0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            // Selector of `log(string,string,uint256)`.\\n            mstore(0x00, 0x5821efa1)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, 0xa0)\\n            mstore(0x60, p2)\\n            writeString(0x80, p0)\\n            writeString(0xc0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xe4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            // Selector of `log(string,string,string)`.\\n            mstore(0x00, 0x2ced7cef)\\n            mstore(0x20, 0x60)\\n            mstore(0x40, 0xa0)\\n            mstore(0x60, 0xe0)\\n            writeString(0x80, p0)\\n            writeString(0xc0, p1)\\n            writeString(0x100, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x124);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n        }\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,address,address)`.\\n            mstore(0x00, 0x665bf134)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,address,bool)`.\\n            mstore(0x00, 0x0e378994)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,address,uint256)`.\\n            mstore(0x00, 0x94250d77)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,address,address,string)`.\\n            mstore(0x00, 0xf808da20)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,bool,address)`.\\n            mstore(0x00, 0x9f1bc36e)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,bool,bool)`.\\n            mstore(0x00, 0x2cd4134a)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,bool,uint256)`.\\n            mstore(0x00, 0x3971e78c)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,address,bool,string)`.\\n            mstore(0x00, 0xaa6540c8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,uint256,address)`.\\n            mstore(0x00, 0x8da6def5)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,uint256,bool)`.\\n            mstore(0x00, 0x9b4254e2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,address,uint256,uint256)`.\\n            mstore(0x00, 0xbe553481)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,address,uint256,string)`.\\n            mstore(0x00, 0xfdb4f990)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,address,string,address)`.\\n            mstore(0x00, 0x8f736d16)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,address,string,bool)`.\\n            mstore(0x00, 0x6f1a594e)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,address,string,uint256)`.\\n            mstore(0x00, 0xef1cefe7)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,address,string,string)`.\\n            mstore(0x00, 0x21bdaf25)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,address,address)`.\\n            mstore(0x00, 0x660375dd)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,address,bool)`.\\n            mstore(0x00, 0xa6f50b0f)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,address,uint256)`.\\n            mstore(0x00, 0xa75c59de)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,bool,address,string)`.\\n            mstore(0x00, 0x2dd778e6)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,bool,address)`.\\n            mstore(0x00, 0xcf394485)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,bool,bool)`.\\n            mstore(0x00, 0xcac43479)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,bool,uint256)`.\\n            mstore(0x00, 0x8c4e5de6)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,bool,bool,string)`.\\n            mstore(0x00, 0xdfc4a2e8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,uint256,address)`.\\n            mstore(0x00, 0xccf790a1)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,uint256,bool)`.\\n            mstore(0x00, 0xc4643e20)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,bool,uint256,uint256)`.\\n            mstore(0x00, 0x386ff5f4)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,bool,uint256,string)`.\\n            mstore(0x00, 0x0aa6cfad)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,bool,string,address)`.\\n            mstore(0x00, 0x19fd4956)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,bool,string,bool)`.\\n            mstore(0x00, 0x50ad461d)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,bool,string,uint256)`.\\n            mstore(0x00, 0x80e6a20b)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,bool,string,string)`.\\n            mstore(0x00, 0x475c5c33)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,address,address)`.\\n            mstore(0x00, 0x478d1c62)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,address,bool)`.\\n            mstore(0x00, 0xa1bcc9b3)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,address,uint256)`.\\n            mstore(0x00, 0x100f650e)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,uint256,address,string)`.\\n            mstore(0x00, 0x1da986ea)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,bool,address)`.\\n            mstore(0x00, 0xa31bfdcc)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,bool,bool)`.\\n            mstore(0x00, 0x3bf5e537)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,bool,uint256)`.\\n            mstore(0x00, 0x22f6b999)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,uint256,bool,string)`.\\n            mstore(0x00, 0xc5ad85f9)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,uint256,address)`.\\n            mstore(0x00, 0x20e3984d)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,uint256,bool)`.\\n            mstore(0x00, 0x66f1bc67)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(address,uint256,uint256,uint256)`.\\n            mstore(0x00, 0x34f0e636)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,uint256,uint256,string)`.\\n            mstore(0x00, 0x4a28c017)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,uint256,string,address)`.\\n            mstore(0x00, 0x5c430d47)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,uint256,string,bool)`.\\n            mstore(0x00, 0xcf18105c)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,uint256,string,uint256)`.\\n            mstore(0x00, 0xbf01f891)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,uint256,string,string)`.\\n            mstore(0x00, 0x88a8c406)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,address,address)`.\\n            mstore(0x00, 0x0d36fa20)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,address,bool)`.\\n            mstore(0x00, 0x0df12b76)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,address,uint256)`.\\n            mstore(0x00, 0x457fe3cf)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,string,address,string)`.\\n            mstore(0x00, 0xf7e36245)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,bool,address)`.\\n            mstore(0x00, 0x205871c2)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,bool,bool)`.\\n            mstore(0x00, 0x5f1d5c9f)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,bool,uint256)`.\\n            mstore(0x00, 0x515e38b6)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,string,bool,string)`.\\n            mstore(0x00, 0xbc0b61fe)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,uint256,address)`.\\n            mstore(0x00, 0x63183678)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,uint256,bool)`.\\n            mstore(0x00, 0x0ef7e050)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(address,string,uint256,uint256)`.\\n            mstore(0x00, 0x1dc8e1b8)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,string,uint256,string)`.\\n            mstore(0x00, 0x448830a8)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,string,string,address)`.\\n            mstore(0x00, 0xa04e2f87)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,string,string,bool)`.\\n            mstore(0x00, 0x35a5071f)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(address,string,string,uint256)`.\\n            mstore(0x00, 0x159f8927)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(address,string,string,string)`.\\n            mstore(0x00, 0x5d02c50b)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,address,address)`.\\n            mstore(0x00, 0x1d14d001)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,address,bool)`.\\n            mstore(0x00, 0x46600be0)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,address,uint256)`.\\n            mstore(0x00, 0x0c66d1be)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,address,address,string)`.\\n            mstore(0x00, 0xd812a167)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,bool,address)`.\\n            mstore(0x00, 0x1c41a336)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,bool,bool)`.\\n            mstore(0x00, 0x6a9c478b)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,bool,uint256)`.\\n            mstore(0x00, 0x07831502)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,address,bool,string)`.\\n            mstore(0x00, 0x4a66cb34)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,uint256,address)`.\\n            mstore(0x00, 0x136b05dd)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,uint256,bool)`.\\n            mstore(0x00, 0xd6019f1c)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,address,uint256,uint256)`.\\n            mstore(0x00, 0x7bf181a1)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,address,uint256,string)`.\\n            mstore(0x00, 0x51f09ff8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,address,string,address)`.\\n            mstore(0x00, 0x6f7c603e)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,address,string,bool)`.\\n            mstore(0x00, 0xe2bfd60b)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,address,string,uint256)`.\\n            mstore(0x00, 0xc21f64c7)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,address,string,string)`.\\n            mstore(0x00, 0xa73c1db6)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,address,address)`.\\n            mstore(0x00, 0xf4880ea4)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,address,bool)`.\\n            mstore(0x00, 0xc0a302d8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,address,uint256)`.\\n            mstore(0x00, 0x4c123d57)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,bool,address,string)`.\\n            mstore(0x00, 0xa0a47963)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,bool,address)`.\\n            mstore(0x00, 0x8c329b1a)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,bool,bool)`.\\n            mstore(0x00, 0x3b2a5ce0)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,bool,uint256)`.\\n            mstore(0x00, 0x6d7045c1)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,bool,bool,string)`.\\n            mstore(0x00, 0x2ae408d4)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,uint256,address)`.\\n            mstore(0x00, 0x54a7a9a0)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,uint256,bool)`.\\n            mstore(0x00, 0x619e4d0e)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,bool,uint256,uint256)`.\\n            mstore(0x00, 0x0bb00eab)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,bool,uint256,string)`.\\n            mstore(0x00, 0x7dd4d0e0)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,bool,string,address)`.\\n            mstore(0x00, 0xf9ad2b89)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,bool,string,bool)`.\\n            mstore(0x00, 0xb857163a)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,bool,string,uint256)`.\\n            mstore(0x00, 0xe3a9ca2f)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,bool,string,string)`.\\n            mstore(0x00, 0x6d1e8751)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,address,address)`.\\n            mstore(0x00, 0x26f560a8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,address,bool)`.\\n            mstore(0x00, 0xb4c314ff)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,address,uint256)`.\\n            mstore(0x00, 0x1537dc87)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,uint256,address,string)`.\\n            mstore(0x00, 0x1bb3b09a)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,bool,address)`.\\n            mstore(0x00, 0x9acd3616)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,bool,bool)`.\\n            mstore(0x00, 0xceb5f4d7)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,bool,uint256)`.\\n            mstore(0x00, 0x7f9bbca2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,uint256,bool,string)`.\\n            mstore(0x00, 0x9143dbb1)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,uint256,address)`.\\n            mstore(0x00, 0x00dd87b9)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,uint256,bool)`.\\n            mstore(0x00, 0xbe984353)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(bool,uint256,uint256,uint256)`.\\n            mstore(0x00, 0x374bb4b2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,uint256,uint256,string)`.\\n            mstore(0x00, 0x8e69fb5d)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,uint256,string,address)`.\\n            mstore(0x00, 0xfedd1fff)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,uint256,string,bool)`.\\n            mstore(0x00, 0xe5e70b2b)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,uint256,string,uint256)`.\\n            mstore(0x00, 0x6a1199e2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,uint256,string,string)`.\\n            mstore(0x00, 0xf5bc2249)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,address,address)`.\\n            mstore(0x00, 0x2b2b18dc)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,address,bool)`.\\n            mstore(0x00, 0x6dd434ca)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,address,uint256)`.\\n            mstore(0x00, 0xa5cada94)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,string,address,string)`.\\n            mstore(0x00, 0x12d6c788)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,bool,address)`.\\n            mstore(0x00, 0x538e06ab)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,bool,bool)`.\\n            mstore(0x00, 0xdc5e935b)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,bool,uint256)`.\\n            mstore(0x00, 0x1606a393)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,string,bool,string)`.\\n            mstore(0x00, 0x483d0416)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,uint256,address)`.\\n            mstore(0x00, 0x1596a1ce)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,uint256,bool)`.\\n            mstore(0x00, 0x6b0e5d53)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(bool,string,uint256,uint256)`.\\n            mstore(0x00, 0x28863fcb)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,string,uint256,string)`.\\n            mstore(0x00, 0x1ad96de6)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,string,string,address)`.\\n            mstore(0x00, 0x97d394d8)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,string,string,bool)`.\\n            mstore(0x00, 0x1e4b87e5)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(bool,string,string,uint256)`.\\n            mstore(0x00, 0x7be0c3eb)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(bool,string,string,string)`.\\n            mstore(0x00, 0x1762e32a)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,address,address)`.\\n            mstore(0x00, 0x2488b414)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,address,bool)`.\\n            mstore(0x00, 0x091ffaf5)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,address,uint256)`.\\n            mstore(0x00, 0x736efbb6)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,address,address,string)`.\\n            mstore(0x00, 0x031c6f73)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,bool,address)`.\\n            mstore(0x00, 0xef72c513)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,bool,bool)`.\\n            mstore(0x00, 0xe351140f)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,bool,uint256)`.\\n            mstore(0x00, 0x5abd992a)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,address,bool,string)`.\\n            mstore(0x00, 0x90fb06aa)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,uint256,address)`.\\n            mstore(0x00, 0x15c127b5)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,uint256,bool)`.\\n            mstore(0x00, 0x5f743a7c)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,address,uint256,uint256)`.\\n            mstore(0x00, 0x0c9cd9c1)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,address,uint256,string)`.\\n            mstore(0x00, 0xddb06521)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,address,string,address)`.\\n            mstore(0x00, 0x9cba8fff)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,address,string,bool)`.\\n            mstore(0x00, 0xcc32ab07)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,address,string,uint256)`.\\n            mstore(0x00, 0x46826b5d)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,address,string,string)`.\\n            mstore(0x00, 0x3e128ca3)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,address,address)`.\\n            mstore(0x00, 0xa1ef4cbb)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,address,bool)`.\\n            mstore(0x00, 0x454d54a5)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,address,uint256)`.\\n            mstore(0x00, 0x078287f5)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,bool,address,string)`.\\n            mstore(0x00, 0xade052c7)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,bool,address)`.\\n            mstore(0x00, 0x69640b59)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,bool,bool)`.\\n            mstore(0x00, 0xb6f577a1)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,bool,uint256)`.\\n            mstore(0x00, 0x7464ce23)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,bool,bool,string)`.\\n            mstore(0x00, 0xdddb9561)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,uint256,address)`.\\n            mstore(0x00, 0x88cb6041)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,uint256,bool)`.\\n            mstore(0x00, 0x91a02e2a)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,bool,uint256,uint256)`.\\n            mstore(0x00, 0xc6acc7a8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,bool,uint256,string)`.\\n            mstore(0x00, 0xde03e774)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,bool,string,address)`.\\n            mstore(0x00, 0xef529018)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,bool,string,bool)`.\\n            mstore(0x00, 0xeb928d7f)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,bool,string,uint256)`.\\n            mstore(0x00, 0x2c1d0746)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,bool,string,string)`.\\n            mstore(0x00, 0x68c8b8bd)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,address,address)`.\\n            mstore(0x00, 0x56a5d1b1)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,address,bool)`.\\n            mstore(0x00, 0x15cac476)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,address,uint256)`.\\n            mstore(0x00, 0x88f6e4b2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,uint256,address,string)`.\\n            mstore(0x00, 0x6cde40b8)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,bool,address)`.\\n            mstore(0x00, 0x9a816a83)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,bool,bool)`.\\n            mstore(0x00, 0xab085ae6)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,bool,uint256)`.\\n            mstore(0x00, 0xeb7f6fd2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,uint256,bool,string)`.\\n            mstore(0x00, 0xa5b4fc99)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,uint256,address)`.\\n            mstore(0x00, 0xfa8185af)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,uint256,bool)`.\\n            mstore(0x00, 0xc598d185)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        assembly {\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\\n            mstore(0x00, 0x193fb800)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x84);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,uint256,uint256,string)`.\\n            mstore(0x00, 0x59cfcbe3)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x80)\\n            writeString(0xa0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,uint256,string,address)`.\\n            mstore(0x00, 0x42d21db7)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,uint256,string,bool)`.\\n            mstore(0x00, 0x7af6ab25)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,uint256,string,uint256)`.\\n            mstore(0x00, 0x5da297eb)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,uint256,string,string)`.\\n            mstore(0x00, 0x27d8afd2)\\n            mstore(0x20, p0)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0x80)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p2)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,address,address)`.\\n            mstore(0x00, 0x6168ed61)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,address,bool)`.\\n            mstore(0x00, 0x90c30a56)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,address,uint256)`.\\n            mstore(0x00, 0xe8d3018d)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,string,address,string)`.\\n            mstore(0x00, 0x9c3adfa1)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,bool,address)`.\\n            mstore(0x00, 0xae2ec581)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,bool,bool)`.\\n            mstore(0x00, 0xba535d9c)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,bool,uint256)`.\\n            mstore(0x00, 0xcf009880)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,string,bool,string)`.\\n            mstore(0x00, 0xd2d423cd)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,uint256,address)`.\\n            mstore(0x00, 0x3b2279b4)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,uint256,bool)`.\\n            mstore(0x00, 0x691a8f74)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(uint256,string,uint256,uint256)`.\\n            mstore(0x00, 0x82c25b74)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,string,uint256,string)`.\\n            mstore(0x00, 0xb7b914ca)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,string,string,address)`.\\n            mstore(0x00, 0xd583c602)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,string,string,bool)`.\\n            mstore(0x00, 0xb3a6b6bd)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(uint256,string,string,uint256)`.\\n            mstore(0x00, 0xb028c9bd)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(uint256,string,string,string)`.\\n            mstore(0x00, 0x21ad0683)\\n            mstore(0x20, p0)\\n            mstore(0x40, 0x80)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p1)\\n            writeString(0xe0, p2)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,address,address)`.\\n            mstore(0x00, 0xed8f28f6)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,address,bool)`.\\n            mstore(0x00, 0xb59dbd60)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,address,uint256)`.\\n            mstore(0x00, 0x8ef3f399)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,address,address,string)`.\\n            mstore(0x00, 0x800a1c67)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,bool,address)`.\\n            mstore(0x00, 0x223603bd)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,bool,bool)`.\\n            mstore(0x00, 0x79884c2b)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,bool,uint256)`.\\n            mstore(0x00, 0x3e9f866a)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,address,bool,string)`.\\n            mstore(0x00, 0x0454c079)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,uint256,address)`.\\n            mstore(0x00, 0x63fb8bc5)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,uint256,bool)`.\\n            mstore(0x00, 0xfc4845f0)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,address,uint256,uint256)`.\\n            mstore(0x00, 0xf8f51b1e)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,address,uint256,string)`.\\n            mstore(0x00, 0x5a477632)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,address,string,address)`.\\n            mstore(0x00, 0xaabc9a31)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,address,string,bool)`.\\n            mstore(0x00, 0x5f15d28c)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,address,string,uint256)`.\\n            mstore(0x00, 0x91d1112e)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,address,string,string)`.\\n            mstore(0x00, 0x245986f2)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,address,address)`.\\n            mstore(0x00, 0x33e9dd1d)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,address,bool)`.\\n            mstore(0x00, 0x958c28c6)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,address,uint256)`.\\n            mstore(0x00, 0x5d08bb05)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,bool,address,string)`.\\n            mstore(0x00, 0x2d8e33a4)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,bool,address)`.\\n            mstore(0x00, 0x7190a529)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,bool,bool)`.\\n            mstore(0x00, 0x895af8c5)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,bool,uint256)`.\\n            mstore(0x00, 0x8e3f78a9)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,bool,bool,string)`.\\n            mstore(0x00, 0x9d22d5dd)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,uint256,address)`.\\n            mstore(0x00, 0x935e09bf)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,uint256,bool)`.\\n            mstore(0x00, 0x8af7cf8a)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,bool,uint256,uint256)`.\\n            mstore(0x00, 0x64b5bb67)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,bool,uint256,string)`.\\n            mstore(0x00, 0x742d6ee7)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,bool,string,address)`.\\n            mstore(0x00, 0xe0625b29)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,bool,string,bool)`.\\n            mstore(0x00, 0x3f8a701d)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,bool,string,uint256)`.\\n            mstore(0x00, 0x24f91465)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,bool,string,string)`.\\n            mstore(0x00, 0xa826caeb)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,address,address)`.\\n            mstore(0x00, 0x5ea2b7ae)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,address,bool)`.\\n            mstore(0x00, 0x82112a42)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,address,uint256)`.\\n            mstore(0x00, 0x4f04fdc6)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,uint256,address,string)`.\\n            mstore(0x00, 0x9ffb2f93)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,bool,address)`.\\n            mstore(0x00, 0xe0e95b98)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,bool,bool)`.\\n            mstore(0x00, 0x354c36d6)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,bool,uint256)`.\\n            mstore(0x00, 0xe41b6f6f)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,uint256,bool,string)`.\\n            mstore(0x00, 0xabf73a98)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,uint256,address)`.\\n            mstore(0x00, 0xe21de278)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,uint256,bool)`.\\n            mstore(0x00, 0x7626db92)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            // Selector of `log(string,uint256,uint256,uint256)`.\\n            mstore(0x00, 0xa7a87853)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n        }\\n        _sendLogPayload(0x1c, 0xc4);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,uint256,uint256,string)`.\\n            mstore(0x00, 0x854b3496)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0xc0)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,uint256,string,address)`.\\n            mstore(0x00, 0x7c4632a4)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,uint256,string,bool)`.\\n            mstore(0x00, 0x7d24491d)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,uint256,string,uint256)`.\\n            mstore(0x00, 0xc67ea9d1)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,uint256,string,string)`.\\n            mstore(0x00, 0x5ab84e1f)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, p1)\\n            mstore(0x60, 0xc0)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p2)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,address,address)`.\\n            mstore(0x00, 0x439c7bef)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,address,bool)`.\\n            mstore(0x00, 0x5ccd4e37)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,address,uint256)`.\\n            mstore(0x00, 0x7cc3c607)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,string,address,string)`.\\n            mstore(0x00, 0xeb1bff80)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,bool,address)`.\\n            mstore(0x00, 0xc371c7db)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,bool,bool)`.\\n            mstore(0x00, 0x40785869)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,bool,uint256)`.\\n            mstore(0x00, 0xd6aefad2)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,string,bool,string)`.\\n            mstore(0x00, 0x5e84b0ea)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,uint256,address)`.\\n            mstore(0x00, 0x1023f7b2)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,uint256,bool)`.\\n            mstore(0x00, 0xc3a8a654)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            // Selector of `log(string,string,uint256,uint256)`.\\n            mstore(0x00, 0xf45d7d2c)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n        }\\n        _sendLogPayload(0x1c, 0x104);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,string,uint256,string)`.\\n            mstore(0x00, 0x5d1a971a)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, p2)\\n            mstore(0x80, 0x100)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n            writeString(0x120, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,string,string,address)`.\\n            mstore(0x00, 0x6d572f44)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, 0x100)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n            writeString(0x120, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,string,string,bool)`.\\n            mstore(0x00, 0x2c1754ed)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, 0x100)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n            writeString(0x120, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            // Selector of `log(string,string,string,uint256)`.\\n            mstore(0x00, 0x8eafb02b)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, 0x100)\\n            mstore(0x80, p3)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n            writeString(0x120, p2)\\n        }\\n        _sendLogPayload(0x1c, 0x144);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n        }\\n    }\\n\\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\\n        bytes32 m0;\\n        bytes32 m1;\\n        bytes32 m2;\\n        bytes32 m3;\\n        bytes32 m4;\\n        bytes32 m5;\\n        bytes32 m6;\\n        bytes32 m7;\\n        bytes32 m8;\\n        bytes32 m9;\\n        bytes32 m10;\\n        bytes32 m11;\\n        bytes32 m12;\\n        assembly {\\n            function writeString(pos, w) {\\n                let length := 0\\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\\n                mstore(pos, length)\\n                let shift := sub(256, shl(3, length))\\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\\n            }\\n            m0 := mload(0x00)\\n            m1 := mload(0x20)\\n            m2 := mload(0x40)\\n            m3 := mload(0x60)\\n            m4 := mload(0x80)\\n            m5 := mload(0xa0)\\n            m6 := mload(0xc0)\\n            m7 := mload(0xe0)\\n            m8 := mload(0x100)\\n            m9 := mload(0x120)\\n            m10 := mload(0x140)\\n            m11 := mload(0x160)\\n            m12 := mload(0x180)\\n            // Selector of `log(string,string,string,string)`.\\n            mstore(0x00, 0xde68f20a)\\n            mstore(0x20, 0x80)\\n            mstore(0x40, 0xc0)\\n            mstore(0x60, 0x100)\\n            mstore(0x80, 0x140)\\n            writeString(0xa0, p0)\\n            writeString(0xe0, p1)\\n            writeString(0x120, p2)\\n            writeString(0x160, p3)\\n        }\\n        _sendLogPayload(0x1c, 0x184);\\n        assembly {\\n            mstore(0x00, m0)\\n            mstore(0x20, m1)\\n            mstore(0x40, m2)\\n            mstore(0x60, m3)\\n            mstore(0x80, m4)\\n            mstore(0xa0, m5)\\n            mstore(0xc0, m6)\\n            mstore(0xe0, m7)\\n            mstore(0x100, m8)\\n            mstore(0x120, m9)\\n            mstore(0x140, m10)\\n            mstore(0x160, m11)\\n            mstore(0x180, m12)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdAssertions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\nimport {DSTest} from \\\"ds-test/test.sol\\\";\\nimport {stdMath} from \\\"./StdMath.sol\\\";\\n\\nabstract contract StdAssertions is DSTest {\\n    event log_array(uint256[] val);\\n    event log_array(int256[] val);\\n    event log_array(address[] val);\\n    event log_named_array(string key, uint256[] val);\\n    event log_named_array(string key, int256[] val);\\n    event log_named_array(string key, address[] val);\\n\\n    function fail(string memory err) internal virtual {\\n        emit log_named_string(\\\"Error\\\", err);\\n        fail();\\n    }\\n\\n    function assertFalse(bool data) internal virtual {\\n        assertTrue(!data);\\n    }\\n\\n    function assertFalse(bool data, string memory err) internal virtual {\\n        assertTrue(!data, err);\\n    }\\n\\n    function assertEq(bool a, bool b) internal virtual {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [bool]\\\");\\n            emit log_named_string(\\\"      Left\\\", a ? \\\"true\\\" : \\\"false\\\");\\n            emit log_named_string(\\\"     Right\\\", b ? \\\"true\\\" : \\\"false\\\");\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(bool a, bool b, string memory err) internal virtual {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    function assertEq(bytes memory a, bytes memory b) internal virtual {\\n        assertEq0(a, b);\\n    }\\n\\n    function assertEq(bytes memory a, bytes memory b, string memory err) internal virtual {\\n        assertEq0(a, b, err);\\n    }\\n\\n    function assertEq(uint256[] memory a, uint256[] memory b) internal virtual {\\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\\n            emit log(\\\"Error: a == b not satisfied [uint[]]\\\");\\n            emit log_named_array(\\\"      Left\\\", a);\\n            emit log_named_array(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(int256[] memory a, int256[] memory b) internal virtual {\\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\\n            emit log(\\\"Error: a == b not satisfied [int[]]\\\");\\n            emit log_named_array(\\\"      Left\\\", a);\\n            emit log_named_array(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(address[] memory a, address[] memory b) internal virtual {\\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\\n            emit log(\\\"Error: a == b not satisfied [address[]]\\\");\\n            emit log_named_array(\\\"      Left\\\", a);\\n            emit log_named_array(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(uint256[] memory a, uint256[] memory b, string memory err) internal virtual {\\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    function assertEq(int256[] memory a, int256[] memory b, string memory err) internal virtual {\\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    function assertEq(address[] memory a, address[] memory b, string memory err) internal virtual {\\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    // Legacy helper\\n    function assertEqUint(uint256 a, uint256 b) internal virtual {\\n        assertEq(uint256(a), uint256(b));\\n    }\\n\\n    function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta) internal virtual {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"      Left\\\", a);\\n            emit log_named_uint(\\\"     Right\\\", b);\\n            emit log_named_uint(\\\" Max Delta\\\", maxDelta);\\n            emit log_named_uint(\\\"     Delta\\\", delta);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta, string memory err) internal virtual {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqAbs(a, b, maxDelta);\\n        }\\n    }\\n\\n    function assertApproxEqAbsDecimal(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals) internal virtual {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [uint]\\\");\\n            emit log_named_decimal_uint(\\\"      Left\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"     Right\\\", b, decimals);\\n            emit log_named_decimal_uint(\\\" Max Delta\\\", maxDelta, decimals);\\n            emit log_named_decimal_uint(\\\"     Delta\\\", delta, decimals);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqAbsDecimal(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals, string memory err)\\n        internal\\n        virtual\\n    {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqAbsDecimal(a, b, maxDelta, decimals);\\n        }\\n    }\\n\\n    function assertApproxEqAbs(int256 a, int256 b, uint256 maxDelta) internal virtual {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [int]\\\");\\n            emit log_named_int(\\\"       Left\\\", a);\\n            emit log_named_int(\\\"      Right\\\", b);\\n            emit log_named_uint(\\\" Max Delta\\\", maxDelta);\\n            emit log_named_uint(\\\"     Delta\\\", delta);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqAbs(int256 a, int256 b, uint256 maxDelta, string memory err) internal virtual {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqAbs(a, b, maxDelta);\\n        }\\n    }\\n\\n    function assertApproxEqAbsDecimal(int256 a, int256 b, uint256 maxDelta, uint256 decimals) internal virtual {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [int]\\\");\\n            emit log_named_decimal_int(\\\"      Left\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"     Right\\\", b, decimals);\\n            emit log_named_decimal_uint(\\\" Max Delta\\\", maxDelta, decimals);\\n            emit log_named_decimal_uint(\\\"     Delta\\\", delta, decimals);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqAbsDecimal(int256 a, int256 b, uint256 maxDelta, uint256 decimals, string memory err)\\n        internal\\n        virtual\\n    {\\n        uint256 delta = stdMath.delta(a, b);\\n\\n        if (delta > maxDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqAbsDecimal(a, b, maxDelta, decimals);\\n        }\\n    }\\n\\n    function assertApproxEqRel(\\n        uint256 a,\\n        uint256 b,\\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\\n    ) internal virtual {\\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"        Left\\\", a);\\n            emit log_named_uint(\\\"       Right\\\", b);\\n            emit log_named_decimal_uint(\\\" Max % Delta\\\", maxPercentDelta * 100, 18);\\n            emit log_named_decimal_uint(\\\"     % Delta\\\", percentDelta * 100, 18);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqRel(\\n        uint256 a,\\n        uint256 b,\\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\\n        string memory err\\n    ) internal virtual {\\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqRel(a, b, maxPercentDelta);\\n        }\\n    }\\n\\n    function assertApproxEqRelDecimal(\\n        uint256 a,\\n        uint256 b,\\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\\n        uint256 decimals\\n    ) internal virtual {\\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [uint]\\\");\\n            emit log_named_decimal_uint(\\\"        Left\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"       Right\\\", b, decimals);\\n            emit log_named_decimal_uint(\\\" Max % Delta\\\", maxPercentDelta * 100, 18);\\n            emit log_named_decimal_uint(\\\"     % Delta\\\", percentDelta * 100, 18);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqRelDecimal(\\n        uint256 a,\\n        uint256 b,\\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\\n        uint256 decimals,\\n        string memory err\\n    ) internal virtual {\\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals);\\n        }\\n    }\\n\\n    function assertApproxEqRel(int256 a, int256 b, uint256 maxPercentDelta) internal virtual {\\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [int]\\\");\\n            emit log_named_int(\\\"        Left\\\", a);\\n            emit log_named_int(\\\"       Right\\\", b);\\n            emit log_named_decimal_uint(\\\" Max % Delta\\\", maxPercentDelta * 100, 18);\\n            emit log_named_decimal_uint(\\\"     % Delta\\\", percentDelta * 100, 18);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqRel(int256 a, int256 b, uint256 maxPercentDelta, string memory err) internal virtual {\\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqRel(a, b, maxPercentDelta);\\n        }\\n    }\\n\\n    function assertApproxEqRelDecimal(int256 a, int256 b, uint256 maxPercentDelta, uint256 decimals) internal virtual {\\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log(\\\"Error: a ~= b not satisfied [int]\\\");\\n            emit log_named_decimal_int(\\\"        Left\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"       Right\\\", b, decimals);\\n            emit log_named_decimal_uint(\\\" Max % Delta\\\", maxPercentDelta * 100, 18);\\n            emit log_named_decimal_uint(\\\"     % Delta\\\", percentDelta * 100, 18);\\n            fail();\\n        }\\n    }\\n\\n    function assertApproxEqRelDecimal(int256 a, int256 b, uint256 maxPercentDelta, uint256 decimals, string memory err)\\n        internal\\n        virtual\\n    {\\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\\n\\n        uint256 percentDelta = stdMath.percentDelta(a, b);\\n\\n        if (percentDelta > maxPercentDelta) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals);\\n        }\\n    }\\n\\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {\\n        assertEqCall(target, callDataA, target, callDataB, true);\\n    }\\n\\n    function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)\\n        internal\\n        virtual\\n    {\\n        assertEqCall(targetA, callDataA, targetB, callDataB, true);\\n    }\\n\\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)\\n        internal\\n        virtual\\n    {\\n        assertEqCall(target, callDataA, target, callDataB, strictRevertData);\\n    }\\n\\n    function assertEqCall(\\n        address targetA,\\n        bytes memory callDataA,\\n        address targetB,\\n        bytes memory callDataB,\\n        bool strictRevertData\\n    ) internal virtual {\\n        (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);\\n        (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);\\n\\n        if (successA && successB) {\\n            assertEq(returnDataA, returnDataB, \\\"Call return data does not match\\\");\\n        }\\n\\n        if (!successA && !successB && strictRevertData) {\\n            assertEq(returnDataA, returnDataB, \\\"Call revert data does not match\\\");\\n        }\\n\\n        if (!successA && successB) {\\n            emit log(\\\"Error: Calls were not equal\\\");\\n            emit log_named_bytes(\\\"  Left call revert data\\\", returnDataA);\\n            emit log_named_bytes(\\\" Right call return data\\\", returnDataB);\\n            fail();\\n        }\\n\\n        if (successA && !successB) {\\n            emit log(\\\"Error: Calls were not equal\\\");\\n            emit log_named_bytes(\\\"  Left call return data\\\", returnDataA);\\n            emit log_named_bytes(\\\" Right call revert data\\\", returnDataB);\\n            fail();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdChains.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\nimport {VmSafe} from \\\"./Vm.sol\\\";\\n\\n/**\\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\\n * alias used in this contract, which can be found as the first argument to the\\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\\n *\\n * There are two main ways to use this contract:\\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\\n *      `setChain(string memory chainAlias, Chain memory chain)`\\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\\n *\\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\\n * `defaultRpcUrls`.\\n *\\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\\n *\\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\\n * we want to retrieve the RPC URL for `mainnet`:\\n *   - If you have specified data with `setChain`, it will return that.\\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\\n *   - If neither of the above conditions is met, the default data is returned.\\n *\\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\\n */\\nabstract contract StdChains {\\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    bool private stdChainsInitialized;\\n\\n    struct ChainData {\\n        string name;\\n        uint256 chainId;\\n        string rpcUrl;\\n    }\\n\\n    struct Chain {\\n        // The chain name.\\n        string name;\\n        // The chain's Chain ID.\\n        uint256 chainId;\\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\\n        string chainAlias;\\n        // A default RPC endpoint for this chain.\\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\\n        string rpcUrl;\\n    }\\n\\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\\n    mapping(string => Chain) private chains;\\n    // Maps from the chain's alias to it's default RPC URL.\\n    mapping(string => string) private defaultRpcUrls;\\n    // Maps from a chain ID to it's alias.\\n    mapping(uint256 => string) private idToAlias;\\n\\n    bool private fallbackToDefaultRpcUrls = true;\\n\\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\\n        require(bytes(chainAlias).length != 0, \\\"StdChains getChain(string): Chain alias cannot be the empty string.\\\");\\n\\n        initializeStdChains();\\n        chain = chains[chainAlias];\\n        require(\\n            chain.chainId != 0,\\n            string(abi.encodePacked(\\\"StdChains getChain(string): Chain with alias \\\\\\\"\\\", chainAlias, \\\"\\\\\\\" not found.\\\"))\\n        );\\n\\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\\n    }\\n\\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\\n        require(chainId != 0, \\\"StdChains getChain(uint256): Chain ID cannot be 0.\\\");\\n        initializeStdChains();\\n        string memory chainAlias = idToAlias[chainId];\\n\\n        chain = chains[chainAlias];\\n\\n        require(\\n            chain.chainId != 0,\\n            string(abi.encodePacked(\\\"StdChains getChain(uint256): Chain with ID \\\", vm.toString(chainId), \\\" not found.\\\"))\\n        );\\n\\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\\n    }\\n\\n    // set chain info, with priority to argument's rpcUrl field.\\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\\n        require(\\n            bytes(chainAlias).length != 0,\\n            \\\"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\\\"\\n        );\\n\\n        require(chain.chainId != 0, \\\"StdChains setChain(string,ChainData): Chain ID cannot be 0.\\\");\\n\\n        initializeStdChains();\\n        string memory foundAlias = idToAlias[chain.chainId];\\n\\n        require(\\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\\n            string(\\n                abi.encodePacked(\\n                    \\\"StdChains setChain(string,ChainData): Chain ID \\\",\\n                    vm.toString(chain.chainId),\\n                    \\\" already used by \\\\\\\"\\\",\\n                    foundAlias,\\n                    \\\"\\\\\\\".\\\"\\n                )\\n            )\\n        );\\n\\n        uint256 oldChainId = chains[chainAlias].chainId;\\n        delete idToAlias[oldChainId];\\n\\n        chains[chainAlias] =\\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\\n        idToAlias[chain.chainId] = chainAlias;\\n    }\\n\\n    // set chain info, with priority to argument's rpcUrl field.\\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\\n    }\\n\\n    function _toUpper(string memory str) private pure returns (string memory) {\\n        bytes memory strb = bytes(str);\\n        bytes memory copy = new bytes(strb.length);\\n        for (uint256 i = 0; i < strb.length; i++) {\\n            bytes1 b = strb[i];\\n            if (b >= 0x61 && b <= 0x7A) {\\n                copy[i] = bytes1(uint8(b) - 32);\\n            } else {\\n                copy[i] = b;\\n            }\\n        }\\n        return string(copy);\\n    }\\n\\n    // lookup rpcUrl, in descending order of priority:\\n    // current -> config (foundry.toml) -> environment variable -> default\\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain) private returns (Chain memory) {\\n        if (bytes(chain.rpcUrl).length == 0) {\\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\\n                chain.rpcUrl = configRpcUrl;\\n            } catch (bytes memory err) {\\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \\\"_RPC_URL\\\"));\\n                if (fallbackToDefaultRpcUrls) {\\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\\n                } else {\\n                    chain.rpcUrl = vm.envString(envName);\\n                }\\n                // distinguish 'not found' from 'cannot read'\\n                bytes memory notFoundError =\\n                    abi.encodeWithSignature(\\\"CheatCodeError\\\", string(abi.encodePacked(\\\"invalid rpc url \\\", chainAlias)));\\n                if (keccak256(notFoundError) != keccak256(err) || bytes(chain.rpcUrl).length == 0) {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, err), mload(err))\\n                    }\\n                }\\n            }\\n        }\\n        return chain;\\n    }\\n\\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\\n        fallbackToDefaultRpcUrls = useDefault;\\n    }\\n\\n    function initializeStdChains() private {\\n        if (stdChainsInitialized) return;\\n\\n        stdChainsInitialized = true;\\n\\n        // If adding an RPC here, make sure to test the default RPC URL in `testRpcs`\\n        setChainWithDefaultRpcUrl(\\\"anvil\\\", ChainData(\\\"Anvil\\\", 31337, \\\"http://127.0.0.1:8545\\\"));\\n        setChainWithDefaultRpcUrl(\\n            \\\"mainnet\\\", ChainData(\\\"Mainnet\\\", 1, \\\"https://mainnet.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\n            \\\"goerli\\\", ChainData(\\\"Goerli\\\", 5, \\\"https://goerli.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\n            \\\"sepolia\\\", ChainData(\\\"Sepolia\\\", 11155111, \\\"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\\"optimism\\\", ChainData(\\\"Optimism\\\", 10, \\\"https://mainnet.optimism.io\\\"));\\n        setChainWithDefaultRpcUrl(\\\"optimism_goerli\\\", ChainData(\\\"Optimism Goerli\\\", 420, \\\"https://goerli.optimism.io\\\"));\\n        setChainWithDefaultRpcUrl(\\\"arbitrum_one\\\", ChainData(\\\"Arbitrum One\\\", 42161, \\\"https://arb1.arbitrum.io/rpc\\\"));\\n        setChainWithDefaultRpcUrl(\\n            \\\"arbitrum_one_goerli\\\", ChainData(\\\"Arbitrum One Goerli\\\", 421613, \\\"https://goerli-rollup.arbitrum.io/rpc\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\\"arbitrum_nova\\\", ChainData(\\\"Arbitrum Nova\\\", 42170, \\\"https://nova.arbitrum.io/rpc\\\"));\\n        setChainWithDefaultRpcUrl(\\\"polygon\\\", ChainData(\\\"Polygon\\\", 137, \\\"https://polygon-rpc.com\\\"));\\n        setChainWithDefaultRpcUrl(\\n            \\\"polygon_mumbai\\\", ChainData(\\\"Polygon Mumbai\\\", 80001, \\\"https://rpc-mumbai.maticvigil.com\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\\"avalanche\\\", ChainData(\\\"Avalanche\\\", 43114, \\\"https://api.avax.network/ext/bc/C/rpc\\\"));\\n        setChainWithDefaultRpcUrl(\\n            \\\"avalanche_fuji\\\", ChainData(\\\"Avalanche Fuji\\\", 43113, \\\"https://api.avax-test.network/ext/bc/C/rpc\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\n            \\\"bnb_smart_chain\\\", ChainData(\\\"BNB Smart Chain\\\", 56, \\\"https://bsc-dataseed1.binance.org\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\n            \\\"bnb_smart_chain_testnet\\\",\\n            ChainData(\\\"BNB Smart Chain Testnet\\\", 97, \\\"https://rpc.ankr.com/bsc_testnet_chapel\\\")\\n        );\\n        setChainWithDefaultRpcUrl(\\\"gnosis_chain\\\", ChainData(\\\"Gnosis Chain\\\", 100, \\\"https://rpc.gnosischain.com\\\"));\\n    }\\n\\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\\n        string memory rpcUrl = chain.rpcUrl;\\n        defaultRpcUrls[chainAlias] = rpcUrl;\\n        chain.rpcUrl = \\\"\\\";\\n        setChain(chainAlias, chain);\\n        chain.rpcUrl = rpcUrl; // restore argument\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdCheats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {StdStorage, stdStorage} from \\\"./StdStorage.sol\\\";\\nimport {Vm} from \\\"./Vm.sol\\\";\\n\\nabstract contract StdCheatsSafe {\\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    uint256 private constant UINT256_MAX =\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    bool private gasMeteringOff;\\n\\n    // Data structures to parse Transaction objects from the broadcast artifact\\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\\n    // and then converted to the one that is used by the user for better UX.\\n\\n    struct RawTx1559 {\\n        string[] arguments;\\n        address contractAddress;\\n        string contractName;\\n        // json value name = function\\n        string functionSig;\\n        bytes32 hash;\\n        // json value name = tx\\n        RawTx1559Detail txDetail;\\n        // json value name = type\\n        string opcode;\\n    }\\n\\n    struct RawTx1559Detail {\\n        AccessList[] accessList;\\n        bytes data;\\n        address from;\\n        bytes gas;\\n        bytes nonce;\\n        address to;\\n        bytes txType;\\n        bytes value;\\n    }\\n\\n    struct Tx1559 {\\n        string[] arguments;\\n        address contractAddress;\\n        string contractName;\\n        string functionSig;\\n        bytes32 hash;\\n        Tx1559Detail txDetail;\\n        string opcode;\\n    }\\n\\n    struct Tx1559Detail {\\n        AccessList[] accessList;\\n        bytes data;\\n        address from;\\n        uint256 gas;\\n        uint256 nonce;\\n        address to;\\n        uint256 txType;\\n        uint256 value;\\n    }\\n\\n    // Data structures to parse Transaction objects from the broadcast artifact\\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\\n    // and then converted to the one that is used by the user for better UX.\\n\\n    struct TxLegacy {\\n        string[] arguments;\\n        address contractAddress;\\n        string contractName;\\n        string functionSig;\\n        string hash;\\n        string opcode;\\n        TxDetailLegacy transaction;\\n    }\\n\\n    struct TxDetailLegacy {\\n        AccessList[] accessList;\\n        uint256 chainId;\\n        bytes data;\\n        address from;\\n        uint256 gas;\\n        uint256 gasPrice;\\n        bytes32 hash;\\n        uint256 nonce;\\n        bytes1 opcode;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 txType;\\n        address to;\\n        uint8 v;\\n        uint256 value;\\n    }\\n\\n    struct AccessList {\\n        address accessAddress;\\n        bytes32[] storageKeys;\\n    }\\n\\n    // Data structures to parse Receipt objects from the broadcast artifact.\\n    // The Raw structs is what is parsed from the JSON\\n    // and then converted to the one that is used by the user for better UX.\\n\\n    struct RawReceipt {\\n        bytes32 blockHash;\\n        bytes blockNumber;\\n        address contractAddress;\\n        bytes cumulativeGasUsed;\\n        bytes effectiveGasPrice;\\n        address from;\\n        bytes gasUsed;\\n        RawReceiptLog[] logs;\\n        bytes logsBloom;\\n        bytes status;\\n        address to;\\n        bytes32 transactionHash;\\n        bytes transactionIndex;\\n    }\\n\\n    struct Receipt {\\n        bytes32 blockHash;\\n        uint256 blockNumber;\\n        address contractAddress;\\n        uint256 cumulativeGasUsed;\\n        uint256 effectiveGasPrice;\\n        address from;\\n        uint256 gasUsed;\\n        ReceiptLog[] logs;\\n        bytes logsBloom;\\n        uint256 status;\\n        address to;\\n        bytes32 transactionHash;\\n        uint256 transactionIndex;\\n    }\\n\\n    // Data structures to parse the entire broadcast artifact, assuming the\\n    // transactions conform to EIP1559.\\n\\n    struct EIP1559ScriptArtifact {\\n        string[] libraries;\\n        string path;\\n        string[] pending;\\n        Receipt[] receipts;\\n        uint256 timestamp;\\n        Tx1559[] transactions;\\n        TxReturn[] txReturns;\\n    }\\n\\n    struct RawEIP1559ScriptArtifact {\\n        string[] libraries;\\n        string path;\\n        string[] pending;\\n        RawReceipt[] receipts;\\n        TxReturn[] txReturns;\\n        uint256 timestamp;\\n        RawTx1559[] transactions;\\n    }\\n\\n    struct RawReceiptLog {\\n        // json value = address\\n        address logAddress;\\n        bytes32 blockHash;\\n        bytes blockNumber;\\n        bytes data;\\n        bytes logIndex;\\n        bool removed;\\n        bytes32[] topics;\\n        bytes32 transactionHash;\\n        bytes transactionIndex;\\n        bytes transactionLogIndex;\\n    }\\n\\n    struct ReceiptLog {\\n        // json value = address\\n        address logAddress;\\n        bytes32 blockHash;\\n        uint256 blockNumber;\\n        bytes data;\\n        uint256 logIndex;\\n        bytes32[] topics;\\n        uint256 transactionIndex;\\n        uint256 transactionLogIndex;\\n        bool removed;\\n    }\\n\\n    struct TxReturn {\\n        string internalType;\\n        string value;\\n    }\\n\\n    struct Account {\\n        address addr;\\n        uint256 key;\\n    }\\n\\n    enum AddressType {\\n        Payable,\\n        NonPayable,\\n        ZeroAddress,\\n        Precompile,\\n        ForgeAddress\\n    }\\n\\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\\n        // Nothing to check if `token` is not a contract.\\n        uint256 tokenCodeSize;\\n        assembly {\\n            tokenCodeSize := extcodesize(token)\\n        }\\n        require(tokenCodeSize > 0, \\\"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\\\");\\n\\n        bool success;\\n        bytes memory returnData;\\n\\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\\n\\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\\n    }\\n\\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\\n    // backwards compatibility, since this name was used in the original PR which has already has\\n    // a release. This function can be removed in a future release once we want a breaking change.\\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\\n        assumeNotBlacklisted(token, addr);\\n    }\\n\\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\\n        if (addressType == AddressType.Payable) {\\n            assumeNotPayable(addr);\\n        } else if (addressType == AddressType.NonPayable) {\\n            assumePayable(addr);\\n        } else if (addressType == AddressType.ZeroAddress) {\\n            assumeNotZeroAddress(addr);\\n        } else if (addressType == AddressType.Precompile) {\\n            assumeNotPrecompile(addr);\\n        } else if (addressType == AddressType.ForgeAddress) {\\n            assumeNotForgeAddress(addr);\\n        }\\n    }\\n\\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\\n        assumeAddressIsNot(addr, addressType1);\\n        assumeAddressIsNot(addr, addressType2);\\n    }\\n\\n    function assumeAddressIsNot(\\n        address addr,\\n        AddressType addressType1,\\n        AddressType addressType2,\\n        AddressType addressType3\\n    ) internal virtual {\\n        assumeAddressIsNot(addr, addressType1);\\n        assumeAddressIsNot(addr, addressType2);\\n        assumeAddressIsNot(addr, addressType3);\\n    }\\n\\n    function assumeAddressIsNot(\\n        address addr,\\n        AddressType addressType1,\\n        AddressType addressType2,\\n        AddressType addressType3,\\n        AddressType addressType4\\n    ) internal virtual {\\n        assumeAddressIsNot(addr, addressType1);\\n        assumeAddressIsNot(addr, addressType2);\\n        assumeAddressIsNot(addr, addressType3);\\n        assumeAddressIsNot(addr, addressType4);\\n    }\\n\\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\\n    // `addr` and checking the `success` return value.\\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\\n    // implemented by `addr`, which should be taken into account when this function is used.\\n    function _isPayable(address addr) private returns (bool) {\\n        require(\\n            addr.balance < UINT256_MAX,\\n            \\\"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\\\"\\n        );\\n        uint256 origBalanceTest = address(this).balance;\\n        uint256 origBalanceAddr = address(addr).balance;\\n\\n        vm.deal(address(this), 1);\\n        (bool success,) = payable(addr).call{value: 1}(\\\"\\\");\\n\\n        // reset balances\\n        vm.deal(address(this), origBalanceTest);\\n        vm.deal(addr, origBalanceAddr);\\n\\n        return success;\\n    }\\n\\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\\n    // implemented by `addr`, which should be taken into account when this function is used. See the\\n    // `_isPayable` method for more information.\\n    function assumePayable(address addr) internal virtual {\\n        vm.assume(_isPayable(addr));\\n    }\\n\\n    function assumeNotPayable(address addr) internal virtual {\\n        vm.assume(!_isPayable(addr));\\n    }\\n\\n    function assumeNotZeroAddress(address addr) internal pure virtual {\\n        vm.assume(addr != address(0));\\n    }\\n\\n    function assumeNotPrecompile(address addr) internal pure virtual {\\n        assumeNotPrecompile(addr, _pureChainId());\\n    }\\n\\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\\n        // address), but the same rationale for excluding them applies so we include those too.\\n\\n        // These should be present on all EVM-compatible chains.\\n        vm.assume(addr < address(0x1) || addr > address(0x9));\\n\\n        // forgefmt: disable-start\\n        if (chainId == 10 || chainId == 420) {\\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\\n        } else if (chainId == 42161 || chainId == 421613) {\\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\\n        } else if (chainId == 43114 || chainId == 43113) {\\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\\n        }\\n        // forgefmt: disable-end\\n    }\\n\\n    function assumeNotForgeAddress(address addr) internal pure virtual {\\n        // vm and console addresses\\n        vm.assume(addr != address(vm) || addr != 0x000000000000000000636F6e736F6c652e6c6f67);\\n    }\\n\\n    function readEIP1559ScriptArtifact(string memory path)\\n        internal\\n        view\\n        virtual\\n        returns (EIP1559ScriptArtifact memory)\\n    {\\n        string memory data = vm.readFile(path);\\n        bytes memory parsedData = vm.parseJson(data);\\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\\n        EIP1559ScriptArtifact memory artifact;\\n        artifact.libraries = rawArtifact.libraries;\\n        artifact.path = rawArtifact.path;\\n        artifact.timestamp = rawArtifact.timestamp;\\n        artifact.pending = rawArtifact.pending;\\n        artifact.txReturns = rawArtifact.txReturns;\\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\\n        return artifact;\\n    }\\n\\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\\n        for (uint256 i; i < rawTxs.length; i++) {\\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\\n        }\\n        return txs;\\n    }\\n\\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\\n        Tx1559 memory transaction;\\n        transaction.arguments = rawTx.arguments;\\n        transaction.contractName = rawTx.contractName;\\n        transaction.functionSig = rawTx.functionSig;\\n        transaction.hash = rawTx.hash;\\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\\n        transaction.opcode = rawTx.opcode;\\n        return transaction;\\n    }\\n\\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\\n        internal\\n        pure\\n        virtual\\n        returns (Tx1559Detail memory)\\n    {\\n        Tx1559Detail memory txDetail;\\n        txDetail.data = rawDetail.data;\\n        txDetail.from = rawDetail.from;\\n        txDetail.to = rawDetail.to;\\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\\n        txDetail.txType = _bytesToUint(rawDetail.txType);\\n        txDetail.value = _bytesToUint(rawDetail.value);\\n        txDetail.gas = _bytesToUint(rawDetail.gas);\\n        txDetail.accessList = rawDetail.accessList;\\n        return txDetail;\\n    }\\n\\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\\n        string memory deployData = vm.readFile(path);\\n        bytes memory parsedDeployData = vm.parseJson(deployData, \\\".transactions\\\");\\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\\n        return rawToConvertedEIPTx1559s(rawTxs);\\n    }\\n\\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\\n        string memory deployData = vm.readFile(path);\\n        string memory key = string(abi.encodePacked(\\\".transactions[\\\", vm.toString(index), \\\"]\\\"));\\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\\n        return rawToConvertedEIPTx1559(rawTx);\\n    }\\n\\n    // Analogous to readTransactions, but for receipts.\\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\\n        string memory deployData = vm.readFile(path);\\n        bytes memory parsedDeployData = vm.parseJson(deployData, \\\".receipts\\\");\\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\\n        return rawToConvertedReceipts(rawReceipts);\\n    }\\n\\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\\n        string memory deployData = vm.readFile(path);\\n        string memory key = string(abi.encodePacked(\\\".receipts[\\\", vm.toString(index), \\\"]\\\"));\\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\\n        return rawToConvertedReceipt(rawReceipt);\\n    }\\n\\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\\n        for (uint256 i; i < rawReceipts.length; i++) {\\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\\n        }\\n        return receipts;\\n    }\\n\\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\\n        Receipt memory receipt;\\n        receipt.blockHash = rawReceipt.blockHash;\\n        receipt.to = rawReceipt.to;\\n        receipt.from = rawReceipt.from;\\n        receipt.contractAddress = rawReceipt.contractAddress;\\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\\n        receipt.status = _bytesToUint(rawReceipt.status);\\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\\n        receipt.logsBloom = rawReceipt.logsBloom;\\n        receipt.transactionHash = rawReceipt.transactionHash;\\n        return receipt;\\n    }\\n\\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\\n        internal\\n        pure\\n        virtual\\n        returns (ReceiptLog[] memory)\\n    {\\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\\n        for (uint256 i; i < rawLogs.length; i++) {\\n            logs[i].logAddress = rawLogs[i].logAddress;\\n            logs[i].blockHash = rawLogs[i].blockHash;\\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\\n            logs[i].data = rawLogs[i].data;\\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\\n            logs[i].topics = rawLogs[i].topics;\\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\\n            logs[i].removed = rawLogs[i].removed;\\n        }\\n        return logs;\\n    }\\n\\n    // Deploy a contract by fetching the contract bytecode from\\n    // the artifacts directory\\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\\n        }\\n\\n        require(addr != address(0), \\\"StdCheats deployCode(string,bytes): Deployment failed.\\\");\\n    }\\n\\n    function deployCode(string memory what) internal virtual returns (address addr) {\\n        bytes memory bytecode = vm.getCode(what);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\\n        }\\n\\n        require(addr != address(0), \\\"StdCheats deployCode(string): Deployment failed.\\\");\\n    }\\n\\n    /// @dev deploy contract with value on construction\\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\\n        }\\n\\n        require(addr != address(0), \\\"StdCheats deployCode(string,bytes,uint256): Deployment failed.\\\");\\n    }\\n\\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\\n        bytes memory bytecode = vm.getCode(what);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\\n        }\\n\\n        require(addr != address(0), \\\"StdCheats deployCode(string,uint256): Deployment failed.\\\");\\n    }\\n\\n    // creates a labeled address and the corresponding private key\\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\\n        addr = vm.addr(privateKey);\\n        vm.label(addr, name);\\n    }\\n\\n    // creates a labeled address\\n    function makeAddr(string memory name) internal virtual returns (address addr) {\\n        (addr,) = makeAddrAndKey(name);\\n    }\\n\\n    // Destroys an account immediately, sending the balance to beneficiary.\\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\\n    // only after tx ends, this will run immediately.\\n    function destroyAccount(address who, address beneficiary) internal virtual {\\n        uint256 currBalance = who.balance;\\n        vm.etch(who, abi.encode());\\n        vm.deal(who, 0);\\n        vm.resetNonce(who);\\n\\n        uint256 beneficiaryBalance = beneficiary.balance;\\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\\n    }\\n\\n    // creates a struct containing both a labeled address and the corresponding private key\\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\\n        (account.addr, account.key) = makeAddrAndKey(name);\\n    }\\n\\n    function deriveRememberKey(string memory mnemonic, uint32 index)\\n        internal\\n        virtual\\n        returns (address who, uint256 privateKey)\\n    {\\n        privateKey = vm.deriveKey(mnemonic, index);\\n        who = vm.rememberKey(privateKey);\\n    }\\n\\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\\n        require(b.length <= 32, \\\"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\\\");\\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\\n    }\\n\\n    function isFork() internal view virtual returns (bool status) {\\n        try vm.activeFork() {\\n            status = true;\\n        } catch (bytes memory) {}\\n    }\\n\\n    modifier skipWhenForking() {\\n        if (!isFork()) {\\n            _;\\n        }\\n    }\\n\\n    modifier skipWhenNotForking() {\\n        if (isFork()) {\\n            _;\\n        }\\n    }\\n\\n    modifier noGasMetering() {\\n        vm.pauseGasMetering();\\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\\n        // it back on until we exit the top level function that used the modifier\\n        //\\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\\n        // so we only turn metering back on at the end of the funcA\\n        bool gasStartedOff = gasMeteringOff;\\n        gasMeteringOff = true;\\n\\n        _;\\n\\n        // if gas metering was on when this modifier was called, turn it back on at the end\\n        if (!gasStartedOff) {\\n            gasMeteringOff = false;\\n            vm.resumeGasMetering();\\n        }\\n    }\\n\\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\\n    // Checker changed `chainid` from pure to view in 0.8.0.\\n    function _viewChainId() private view returns (uint256 chainId) {\\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        address(this); // Silence warnings in older Solc versions.\\n    }\\n\\n    function _pureChainId() private pure returns (uint256 chainId) {\\n        function() internal view returns (uint256) fnIn = _viewChainId;\\n        function() internal pure returns (uint256) pureChainId;\\n        assembly {\\n            pureChainId := fnIn\\n        }\\n        chainId = pureChainId();\\n    }\\n}\\n\\n// Wrappers around cheatcodes to avoid footguns\\nabstract contract StdCheats is StdCheatsSafe {\\n    using stdStorage for StdStorage;\\n\\n    StdStorage private stdstore;\\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    // Skip forward or rewind time by the specified number of seconds\\n    function skip(uint256 time) internal virtual {\\n        vm.warp(block.timestamp + time);\\n    }\\n\\n    function rewind(uint256 time) internal virtual {\\n        vm.warp(block.timestamp - time);\\n    }\\n\\n    // Setup a prank from an address that has some ether\\n    function hoax(address msgSender) internal virtual {\\n        vm.deal(msgSender, 1 << 128);\\n        vm.prank(msgSender);\\n    }\\n\\n    function hoax(address msgSender, uint256 give) internal virtual {\\n        vm.deal(msgSender, give);\\n        vm.prank(msgSender);\\n    }\\n\\n    function hoax(address msgSender, address origin) internal virtual {\\n        vm.deal(msgSender, 1 << 128);\\n        vm.prank(msgSender, origin);\\n    }\\n\\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\\n        vm.deal(msgSender, give);\\n        vm.prank(msgSender, origin);\\n    }\\n\\n    // Start perpetual prank from an address that has some ether\\n    function startHoax(address msgSender) internal virtual {\\n        vm.deal(msgSender, 1 << 128);\\n        vm.startPrank(msgSender);\\n    }\\n\\n    function startHoax(address msgSender, uint256 give) internal virtual {\\n        vm.deal(msgSender, give);\\n        vm.startPrank(msgSender);\\n    }\\n\\n    // Start perpetual prank from an address that has some ether\\n    // tx.origin is set to the origin parameter\\n    function startHoax(address msgSender, address origin) internal virtual {\\n        vm.deal(msgSender, 1 << 128);\\n        vm.startPrank(msgSender, origin);\\n    }\\n\\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\\n        vm.deal(msgSender, give);\\n        vm.startPrank(msgSender, origin);\\n    }\\n\\n    function changePrank(address msgSender) internal virtual {\\n        vm.stopPrank();\\n        vm.startPrank(msgSender);\\n    }\\n\\n    function changePrank(address msgSender, address txOrigin) internal virtual {\\n        vm.stopPrank();\\n        vm.startPrank(msgSender, txOrigin);\\n    }\\n\\n    // The same as Vm's `deal`\\n    // Use the alternative signature for ERC20 tokens\\n    function deal(address to, uint256 give) internal virtual {\\n        vm.deal(to, give);\\n    }\\n\\n    // Set the balance of an account for any ERC20 token\\n    // Use the alternative signature to update `totalSupply`\\n    function deal(address token, address to, uint256 give) internal virtual {\\n        deal(token, to, give, false);\\n    }\\n\\n    // Set the balance of an account for any ERC1155 token\\n    // Use the alternative signature to update `totalSupply`\\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\\n        dealERC1155(token, to, id, give, false);\\n    }\\n\\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\\n        // get current balance\\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\\n        uint256 prevBal = abi.decode(balData, (uint256));\\n\\n        // update balance\\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\\n\\n        // update total supply\\n        if (adjust) {\\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\\n            uint256 totSup = abi.decode(totSupData, (uint256));\\n            if (give < prevBal) {\\n                totSup -= (prevBal - give);\\n            } else {\\n                totSup += (give - prevBal);\\n            }\\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\\n        }\\n    }\\n\\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\\n        // get current balance\\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\\n        uint256 prevBal = abi.decode(balData, (uint256));\\n\\n        // update balance\\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\\n\\n        // update total supply\\n        if (adjust) {\\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\\n            require(\\n                totSupData.length != 0,\\n                \\\"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\\\"\\n            );\\n            uint256 totSup = abi.decode(totSupData, (uint256));\\n            if (give < prevBal) {\\n                totSup -= (prevBal - give);\\n            } else {\\n                totSup += (give - prevBal);\\n            }\\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\\n        }\\n    }\\n\\n    function dealERC721(address token, address to, uint256 id) internal virtual {\\n        // check if token id is already minted and the actual owner.\\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\\n        require(successMinted, \\\"StdCheats deal(address,address,uint,bool): id not minted.\\\");\\n\\n        // get owner current balance\\n        (, bytes memory fromBalData) =\\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\\n\\n        // get new user current balance\\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\\n\\n        // update balances\\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\\n\\n        // update owner\\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\\n    }\\n\\n    function deployCodeTo(string memory what, address where) internal virtual {\\n        deployCodeTo(what, \\\"\\\", 0, where);\\n    }\\n\\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\\n        deployCodeTo(what, args, 0, where);\\n    }\\n\\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\\n        bytes memory creationCode = vm.getCode(what);\\n        vm.etch(where, abi.encodePacked(creationCode, args));\\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\\\"\\\");\\n        require(success, \\\"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\\\");\\n        vm.etch(where, runtimeBytecode);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdError.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test\\npragma solidity >=0.6.2 <0.9.0;\\n\\nlibrary stdError {\\n    bytes public constant assertionError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x01);\\n    bytes public constant arithmeticError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x11);\\n    bytes public constant divisionError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x12);\\n    bytes public constant enumConversionError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x21);\\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x22);\\n    bytes public constant popError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x31);\\n    bytes public constant indexOOBError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32);\\n    bytes public constant memOverflowError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x41);\\n    bytes public constant zeroVarError = abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x51);\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdInvariant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nabstract contract StdInvariant {\\n    struct FuzzSelector {\\n        address addr;\\n        bytes4[] selectors;\\n    }\\n\\n    address[] private _excludedContracts;\\n    address[] private _excludedSenders;\\n    address[] private _targetedContracts;\\n    address[] private _targetedSenders;\\n\\n    string[] private _excludedArtifacts;\\n    string[] private _targetedArtifacts;\\n\\n    FuzzSelector[] private _targetedArtifactSelectors;\\n    FuzzSelector[] private _targetedSelectors;\\n\\n    // Functions for users:\\n    // These are intended to be called in tests.\\n\\n    function excludeContract(address newExcludedContract_) internal {\\n        _excludedContracts.push(newExcludedContract_);\\n    }\\n\\n    function excludeSender(address newExcludedSender_) internal {\\n        _excludedSenders.push(newExcludedSender_);\\n    }\\n\\n    function excludeArtifact(string memory newExcludedArtifact_) internal {\\n        _excludedArtifacts.push(newExcludedArtifact_);\\n    }\\n\\n    function targetArtifact(string memory newTargetedArtifact_) internal {\\n        _targetedArtifacts.push(newTargetedArtifact_);\\n    }\\n\\n    function targetArtifactSelector(FuzzSelector memory newTargetedArtifactSelector_) internal {\\n        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);\\n    }\\n\\n    function targetContract(address newTargetedContract_) internal {\\n        _targetedContracts.push(newTargetedContract_);\\n    }\\n\\n    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {\\n        _targetedSelectors.push(newTargetedSelector_);\\n    }\\n\\n    function targetSender(address newTargetedSender_) internal {\\n        _targetedSenders.push(newTargetedSender_);\\n    }\\n\\n    // Functions for forge:\\n    // These are called by forge to run invariant tests and don't need to be called in tests.\\n\\n    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\\n        excludedArtifacts_ = _excludedArtifacts;\\n    }\\n\\n    function excludeContracts() public view returns (address[] memory excludedContracts_) {\\n        excludedContracts_ = _excludedContracts;\\n    }\\n\\n    function excludeSenders() public view returns (address[] memory excludedSenders_) {\\n        excludedSenders_ = _excludedSenders;\\n    }\\n\\n    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\\n        targetedArtifacts_ = _targetedArtifacts;\\n    }\\n\\n    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\\n    }\\n\\n    function targetContracts() public view returns (address[] memory targetedContracts_) {\\n        targetedContracts_ = _targetedContracts;\\n    }\\n\\n    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\\n        targetedSelectors_ = _targetedSelectors;\\n    }\\n\\n    function targetSenders() public view returns (address[] memory targetedSenders_) {\\n        targetedSenders_ = _targetedSenders;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdJson.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {VmSafe} from \\\"./Vm.sol\\\";\\n\\n// Helpers for parsing and writing JSON files\\n// To parse:\\n// ```\\n// using stdJson for string;\\n// string memory json = vm.readFile(\\\"some_peth\\\");\\n// json.parseUint(\\\"<json_path>\\\");\\n// ```\\n// To write:\\n// ```\\n// using stdJson for string;\\n// string memory json = \\\"deploymentArtifact\\\";\\n// Contract contract = new Contract();\\n// json.serialize(\\\"contractAddress\\\", address(contract));\\n// json = json.serialize(\\\"deploymentTimes\\\", uint(1));\\n// // store the stringified JSON to the 'json' variable we have been using as a key\\n// // as we won't need it any longer\\n// string memory json2 = \\\"finalArtifact\\\";\\n// string memory final = json2.serialize(\\\"depArtifact\\\", json);\\n// final.write(\\\"<some_path>\\\");\\n// ```\\n\\nlibrary stdJson {\\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\\n        return vm.parseJson(json, key);\\n    }\\n\\n    function readUint(string memory json, string memory key) internal returns (uint256) {\\n        return vm.parseJsonUint(json, key);\\n    }\\n\\n    function readUintArray(string memory json, string memory key) internal returns (uint256[] memory) {\\n        return vm.parseJsonUintArray(json, key);\\n    }\\n\\n    function readInt(string memory json, string memory key) internal returns (int256) {\\n        return vm.parseJsonInt(json, key);\\n    }\\n\\n    function readIntArray(string memory json, string memory key) internal returns (int256[] memory) {\\n        return vm.parseJsonIntArray(json, key);\\n    }\\n\\n    function readBytes32(string memory json, string memory key) internal returns (bytes32) {\\n        return vm.parseJsonBytes32(json, key);\\n    }\\n\\n    function readBytes32Array(string memory json, string memory key) internal returns (bytes32[] memory) {\\n        return vm.parseJsonBytes32Array(json, key);\\n    }\\n\\n    function readString(string memory json, string memory key) internal returns (string memory) {\\n        return vm.parseJsonString(json, key);\\n    }\\n\\n    function readStringArray(string memory json, string memory key) internal returns (string[] memory) {\\n        return vm.parseJsonStringArray(json, key);\\n    }\\n\\n    function readAddress(string memory json, string memory key) internal returns (address) {\\n        return vm.parseJsonAddress(json, key);\\n    }\\n\\n    function readAddressArray(string memory json, string memory key) internal returns (address[] memory) {\\n        return vm.parseJsonAddressArray(json, key);\\n    }\\n\\n    function readBool(string memory json, string memory key) internal returns (bool) {\\n        return vm.parseJsonBool(json, key);\\n    }\\n\\n    function readBoolArray(string memory json, string memory key) internal returns (bool[] memory) {\\n        return vm.parseJsonBoolArray(json, key);\\n    }\\n\\n    function readBytes(string memory json, string memory key) internal returns (bytes memory) {\\n        return vm.parseJsonBytes(json, key);\\n    }\\n\\n    function readBytesArray(string memory json, string memory key) internal returns (bytes[] memory) {\\n        return vm.parseJsonBytesArray(json, key);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\\n        return vm.serializeBool(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeBool(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\\n        return vm.serializeUint(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeUint(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\\n        return vm.serializeInt(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeInt(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\\n        return vm.serializeAddress(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeAddress(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\\n        return vm.serializeBytes32(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeBytes32(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\\n        return vm.serializeBytes(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeBytes(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, string memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeString(jsonKey, key, value);\\n    }\\n\\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\\n        internal\\n        returns (string memory)\\n    {\\n        return vm.serializeString(jsonKey, key, value);\\n    }\\n\\n    function write(string memory jsonKey, string memory path) internal {\\n        vm.writeJson(jsonKey, path);\\n    }\\n\\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\\n        vm.writeJson(jsonKey, path, valueKey);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\nlibrary stdMath {\\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        // Required or it will fail when `a = type(int256).min`\\n        if (a == INT256_MIN) {\\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\\n        }\\n\\n        return uint256(a > 0 ? a : -a);\\n    }\\n\\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\\n        // a and b are of the same sign\\n        // this works thanks to two's complement, the left-most bit is the sign bit\\n        if ((a ^ b) > -1) {\\n            return delta(abs(a), abs(b));\\n        }\\n\\n        // a and b are of opposite signs\\n        return abs(a) + abs(b);\\n    }\\n\\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 absDelta = delta(a, b);\\n\\n        return absDelta * 1e18 / b;\\n    }\\n\\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\\n        uint256 absDelta = delta(a, b);\\n        uint256 absB = abs(b);\\n\\n        return absDelta * 1e18 / absB;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\nimport {Vm} from \\\"./Vm.sol\\\";\\n\\nstruct StdStorage {\\n    mapping(address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;\\n    mapping(address => mapping(bytes4 => mapping(bytes32 => bool))) finds;\\n    bytes32[] _keys;\\n    bytes4 _sig;\\n    uint256 _depth;\\n    address _target;\\n    bytes32 _set;\\n}\\n\\nlibrary stdStorageSafe {\\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\\n    event WARNING_UninitedSlot(address who, uint256 slot);\\n\\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\\n        return bytes4(keccak256(bytes(sigStr)));\\n    }\\n\\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\\n    // slot complexity:\\n    //  if flat, will be bytes32(uint256(uint));\\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\\n    function find(StdStorage storage self) internal returns (uint256) {\\n        address who = self._target;\\n        bytes4 fsig = self._sig;\\n        uint256 field_depth = self._depth;\\n        bytes32[] memory ins = self._keys;\\n\\n        // calldata to test against\\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\\n            return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\\n        }\\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\\n        vm.record();\\n        bytes32 fdat;\\n        {\\n            (, bytes memory rdat) = who.staticcall(cald);\\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\\n        }\\n\\n        (bytes32[] memory reads,) = vm.accesses(address(who));\\n        if (reads.length == 1) {\\n            bytes32 curr = vm.load(who, reads[0]);\\n            if (curr == bytes32(0)) {\\n                emit WARNING_UninitedSlot(who, uint256(reads[0]));\\n            }\\n            if (fdat != curr) {\\n                require(\\n                    false,\\n                    \\\"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\\\"\\n                );\\n            }\\n            emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));\\n            self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);\\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\\n        } else if (reads.length > 1) {\\n            for (uint256 i = 0; i < reads.length; i++) {\\n                bytes32 prev = vm.load(who, reads[i]);\\n                if (prev == bytes32(0)) {\\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\\n                }\\n                // store\\n                vm.store(who, reads[i], bytes32(hex\\\"1337\\\"));\\n                bool success;\\n                bytes memory rdat;\\n                {\\n                    (success, rdat) = who.staticcall(cald);\\n                    fdat = bytesToBytes32(rdat, 32 * field_depth);\\n                }\\n\\n                if (success && fdat == bytes32(hex\\\"1337\\\")) {\\n                    // we found which of the slots is the actual one\\n                    emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));\\n                    self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);\\n                    self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\\n                    vm.store(who, reads[i], prev);\\n                    break;\\n                }\\n                vm.store(who, reads[i], prev);\\n            }\\n        } else {\\n            revert(\\\"stdStorage find(StdStorage): No storage use detected for target.\\\");\\n        }\\n\\n        require(\\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))],\\n            \\\"stdStorage find(StdStorage): Slot(s) not found.\\\"\\n        );\\n\\n        delete self._target;\\n        delete self._sig;\\n        delete self._keys;\\n        delete self._depth;\\n\\n        return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\\n    }\\n\\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\\n        self._target = _target;\\n        return self;\\n    }\\n\\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\\n        self._sig = _sig;\\n        return self;\\n    }\\n\\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\\n        self._sig = sigs(_sig);\\n        return self;\\n    }\\n\\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\\n        self._keys.push(bytes32(uint256(uint160(who))));\\n        return self;\\n    }\\n\\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\\n        self._keys.push(bytes32(amt));\\n        return self;\\n    }\\n\\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\\n        self._keys.push(key);\\n        return self;\\n    }\\n\\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\\n        self._depth = _depth;\\n        return self;\\n    }\\n\\n    function read(StdStorage storage self) private returns (bytes memory) {\\n        address t = self._target;\\n        uint256 s = find(self);\\n        return abi.encode(vm.load(t, bytes32(s)));\\n    }\\n\\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\\n        return abi.decode(read(self), (bytes32));\\n    }\\n\\n    function read_bool(StdStorage storage self) internal returns (bool) {\\n        int256 v = read_int(self);\\n        if (v == 0) return false;\\n        if (v == 1) return true;\\n        revert(\\\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\\\");\\n    }\\n\\n    function read_address(StdStorage storage self) internal returns (address) {\\n        return abi.decode(read(self), (address));\\n    }\\n\\n    function read_uint(StdStorage storage self) internal returns (uint256) {\\n        return abi.decode(read(self), (uint256));\\n    }\\n\\n    function read_int(StdStorage storage self) internal returns (int256) {\\n        return abi.decode(read(self), (int256));\\n    }\\n\\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\\n        bytes32 out;\\n\\n        uint256 max = b.length > 32 ? 32 : b.length;\\n        for (uint256 i = 0; i < max; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\\n        bytes memory result = new bytes(b.length * 32);\\n        for (uint256 i = 0; i < b.length; i++) {\\n            bytes32 k = b[i];\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                mstore(add(result, add(32, mul(32, i))), k)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nlibrary stdStorage {\\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\\n        return stdStorageSafe.sigs(sigStr);\\n    }\\n\\n    function find(StdStorage storage self) internal returns (uint256) {\\n        return stdStorageSafe.find(self);\\n    }\\n\\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\\n        return stdStorageSafe.target(self, _target);\\n    }\\n\\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\\n        return stdStorageSafe.sig(self, _sig);\\n    }\\n\\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\\n        return stdStorageSafe.sig(self, _sig);\\n    }\\n\\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\\n        return stdStorageSafe.with_key(self, who);\\n    }\\n\\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\\n        return stdStorageSafe.with_key(self, amt);\\n    }\\n\\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\\n        return stdStorageSafe.with_key(self, key);\\n    }\\n\\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\\n        return stdStorageSafe.depth(self, _depth);\\n    }\\n\\n    function checked_write(StdStorage storage self, address who) internal {\\n        checked_write(self, bytes32(uint256(uint160(who))));\\n    }\\n\\n    function checked_write(StdStorage storage self, uint256 amt) internal {\\n        checked_write(self, bytes32(amt));\\n    }\\n\\n    function checked_write_int(StdStorage storage self, int256 val) internal {\\n        checked_write(self, bytes32(uint256(val)));\\n    }\\n\\n    function checked_write(StdStorage storage self, bool write) internal {\\n        bytes32 t;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            t := write\\n        }\\n        checked_write(self, t);\\n    }\\n\\n    function checked_write(StdStorage storage self, bytes32 set) internal {\\n        address who = self._target;\\n        bytes4 fsig = self._sig;\\n        uint256 field_depth = self._depth;\\n        bytes32[] memory ins = self._keys;\\n\\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\\n            find(self);\\n        }\\n        bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);\\n\\n        bytes32 fdat;\\n        {\\n            (, bytes memory rdat) = who.staticcall(cald);\\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\\n        }\\n        bytes32 curr = vm.load(who, slot);\\n\\n        if (fdat != curr) {\\n            require(\\n                false,\\n                \\\"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\\\"\\n            );\\n        }\\n        vm.store(who, slot, set);\\n        delete self._target;\\n        delete self._sig;\\n        delete self._keys;\\n        delete self._depth;\\n    }\\n\\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\\n        return stdStorageSafe.read_bytes32(self);\\n    }\\n\\n    function read_bool(StdStorage storage self) internal returns (bool) {\\n        return stdStorageSafe.read_bool(self);\\n    }\\n\\n    function read_address(StdStorage storage self) internal returns (address) {\\n        return stdStorageSafe.read_address(self);\\n    }\\n\\n    function read_uint(StdStorage storage self) internal returns (uint256) {\\n        return stdStorageSafe.read_uint(self);\\n    }\\n\\n    function read_int(StdStorage storage self) internal returns (int256) {\\n        return stdStorageSafe.read_int(self);\\n    }\\n\\n    // Private function so needs to be copied over\\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\\n        bytes32 out;\\n\\n        uint256 max = b.length > 32 ? 32 : b.length;\\n        for (uint256 i = 0; i < max; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    // Private function so needs to be copied over\\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\\n        bytes memory result = new bytes(b.length * 32);\\n        for (uint256 i = 0; i < b.length; i++) {\\n            bytes32 k = b[i];\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                mstore(add(result, add(32, mul(32, i))), k)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdStyle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport {VmSafe} from \\\"./Vm.sol\\\";\\n\\nlibrary StdStyle {\\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    string constant RED = \\\"\\\\u001b[91m\\\";\\n    string constant GREEN = \\\"\\\\u001b[92m\\\";\\n    string constant YELLOW = \\\"\\\\u001b[93m\\\";\\n    string constant BLUE = \\\"\\\\u001b[94m\\\";\\n    string constant MAGENTA = \\\"\\\\u001b[95m\\\";\\n    string constant CYAN = \\\"\\\\u001b[96m\\\";\\n    string constant BOLD = \\\"\\\\u001b[1m\\\";\\n    string constant DIM = \\\"\\\\u001b[2m\\\";\\n    string constant ITALIC = \\\"\\\\u001b[3m\\\";\\n    string constant UNDERLINE = \\\"\\\\u001b[4m\\\";\\n    string constant INVERSE = \\\"\\\\u001b[7m\\\";\\n    string constant RESET = \\\"\\\\u001b[0m\\\";\\n\\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\\n        return string(abi.encodePacked(style, self, RESET));\\n    }\\n\\n    function red(string memory self) internal pure returns (string memory) {\\n        return styleConcat(RED, self);\\n    }\\n\\n    function red(uint256 self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function red(int256 self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function red(address self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function red(bool self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function redBytes(bytes memory self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function green(string memory self) internal pure returns (string memory) {\\n        return styleConcat(GREEN, self);\\n    }\\n\\n    function green(uint256 self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function green(int256 self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function green(address self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function green(bool self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function yellow(string memory self) internal pure returns (string memory) {\\n        return styleConcat(YELLOW, self);\\n    }\\n\\n    function yellow(uint256 self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellow(int256 self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellow(address self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellow(bool self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function blue(string memory self) internal pure returns (string memory) {\\n        return styleConcat(BLUE, self);\\n    }\\n\\n    function blue(uint256 self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blue(int256 self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blue(address self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blue(bool self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function magenta(string memory self) internal pure returns (string memory) {\\n        return styleConcat(MAGENTA, self);\\n    }\\n\\n    function magenta(uint256 self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magenta(int256 self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magenta(address self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magenta(bool self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function cyan(string memory self) internal pure returns (string memory) {\\n        return styleConcat(CYAN, self);\\n    }\\n\\n    function cyan(uint256 self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyan(int256 self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyan(address self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyan(bool self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function bold(string memory self) internal pure returns (string memory) {\\n        return styleConcat(BOLD, self);\\n    }\\n\\n    function bold(uint256 self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function bold(int256 self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function bold(address self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function bold(bool self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function dim(string memory self) internal pure returns (string memory) {\\n        return styleConcat(DIM, self);\\n    }\\n\\n    function dim(uint256 self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dim(int256 self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dim(address self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dim(bool self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function italic(string memory self) internal pure returns (string memory) {\\n        return styleConcat(ITALIC, self);\\n    }\\n\\n    function italic(uint256 self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italic(int256 self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italic(address self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italic(bool self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function underline(string memory self) internal pure returns (string memory) {\\n        return styleConcat(UNDERLINE, self);\\n    }\\n\\n    function underline(uint256 self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underline(int256 self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underline(address self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underline(bool self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function inverse(string memory self) internal pure returns (string memory) {\\n        return styleConcat(INVERSE, self);\\n    }\\n\\n    function inverse(uint256 self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverse(int256 self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverse(address self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverse(bool self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/StdUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {IMulticall3} from \\\"./interfaces/IMulticall3.sol\\\";\\nimport {VmSafe} from \\\"./Vm.sol\\\";\\n\\nabstract contract StdUtils {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTANTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n    uint256 private constant INT256_MIN_ABS =\\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\\n    uint256 private constant SECP256K1_ORDER =\\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\\n    uint256 private constant UINT256_MAX =\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                 INTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\\n        require(min <= max, \\\"StdUtils bound(uint256,uint256,uint256): Max is less than min.\\\");\\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\\n        if (x >= min && x <= max) return x;\\n\\n        uint256 size = max - min + 1;\\n\\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\\n        // This helps ensure coverage of the min/max values.\\n        if (x <= 3 && size > x) return min + x;\\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\\n\\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\\n        if (x > max) {\\n            uint256 diff = x - max;\\n            uint256 rem = diff % size;\\n            if (rem == 0) return max;\\n            result = min + rem - 1;\\n        } else if (x < min) {\\n            uint256 diff = min - x;\\n            uint256 rem = diff % size;\\n            if (rem == 0) return min;\\n            result = max - rem + 1;\\n        }\\n    }\\n\\n    function bound(uint256 x, uint256 min, uint256 max) internal view virtual returns (uint256 result) {\\n        result = _bound(x, min, max);\\n        console2_log(\\\"Bound Result\\\", result);\\n    }\\n\\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\\n        require(min <= max, \\\"StdUtils bound(int256,int256,int256): Max is less than min.\\\");\\n\\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\\n        // int256 : -(2**255) ~ (2**255 - 1)\\n        // uint256:     0     ~ (2**256 - 1)\\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\\n        //\\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\\n        // So, use `~uint256(x) + 1` instead.\\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\\n\\n        uint256 y = _bound(_x, _min, _max);\\n\\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\\n    }\\n\\n    function bound(int256 x, int256 min, int256 max) internal view virtual returns (int256 result) {\\n        result = _bound(x, min, max);\\n        console2_log(\\\"Bound result\\\", vm.toString(result));\\n    }\\n\\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\\n    }\\n\\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\\n        require(b.length <= 32, \\\"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\\\");\\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\\n    }\\n\\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\\n        // forgefmt: disable-start\\n        // The integer zero is treated as an empty byte string, and as a result it only has a length prefix, 0x80, computed via 0x80 + 0.\\n        // A one byte integer uses its own value as its length prefix, there is no additional \\\"0x80 + length\\\" prefix that comes before it.\\n        if (nonce == 0x00)      return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, bytes1(0x80))));\\n        if (nonce <= 0x7f)      return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, uint8(nonce))));\\n\\n        // Nonces greater than 1 byte all follow a consistent encoding scheme, where each value is preceded by a prefix of 0x80 + length.\\n        if (nonce <= 2**8 - 1)  return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployer, bytes1(0x81), uint8(nonce))));\\n        if (nonce <= 2**16 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployer, bytes1(0x82), uint16(nonce))));\\n        if (nonce <= 2**24 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployer, bytes1(0x83), uint24(nonce))));\\n        // forgefmt: disable-end\\n\\n        // More details about RLP encoding can be found here: https://eth.wiki/fundamentals/rlp\\n        // 0xda = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x84 ++ nonce)\\n        // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\\n        // 0x84 = 0x80 + 0x04 (0x04 = the bytes length of the nonce, 4 bytes, in hex)\\n        // We assume nobody can have a nonce large enough to require more than 32 bytes.\\n        return addressFromLast20Bytes(\\n            keccak256(abi.encodePacked(bytes1(0xda), bytes1(0x94), deployer, bytes1(0x84), uint32(nonce)))\\n        );\\n    }\\n\\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\\n        internal\\n        pure\\n        virtual\\n        returns (address)\\n    {\\n        return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, initcodeHash)));\\n    }\\n\\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\\n        return computeCreate2Address(salt, initCodeHash, CREATE2_FACTORY);\\n    }\\n\\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\\n        return hashInitCode(creationCode, \\\"\\\");\\n    }\\n\\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\\n    /// @param args the ABI-encoded arguments to the constructor of C\\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(creationCode, args));\\n    }\\n\\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\\n    function getTokenBalances(address token, address[] memory addresses)\\n        internal\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        uint256 tokenCodeSize;\\n        assembly {\\n            tokenCodeSize := extcodesize(token)\\n        }\\n        require(tokenCodeSize > 0, \\\"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\\\");\\n\\n        // ABI encode the aggregate call to Multicall3.\\n        uint256 length = addresses.length;\\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            // 0x70a08231 = bytes4(\\\"balanceOf(address)\\\"))\\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\\n        }\\n\\n        // Make the aggregate call.\\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\\n\\n        // ABI decode the return data and return the balances.\\n        balances = new uint256[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            balances[i] = abi.decode(returnData[i], (uint256));\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                 PRIVATE FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\\n\\n    function console2_log(string memory p0, uint256 p1) private view {\\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n        status;\\n    }\\n\\n    function console2_log(string memory p0, string memory p1) private view {\\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n        status;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/Vm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\n// Cheatcodes are marked as view/pure/none using the following rules:\\n// 0. A call's observable behaviour includes its return value, logs, reverts and state writes,\\n// 1. If you can influence a later call's observable behaviour, you're neither `view` nor `pure (you are modifying some state be it the EVM, interpreter, filesystem, etc),\\n// 2. Otherwise if you can be influenced by an earlier call, or if reading some state, you're `view`,\\n// 3. Otherwise you're `pure`.\\n\\ninterface VmSafe {\\n    enum CallerMode {\\n        None,\\n        Broadcast,\\n        RecurrentBroadcast,\\n        Prank,\\n        RecurrentPrank\\n    }\\n\\n    struct Log {\\n        bytes32[] topics;\\n        bytes data;\\n        address emitter;\\n    }\\n\\n    struct Rpc {\\n        string key;\\n        string url;\\n    }\\n\\n    struct DirEntry {\\n        string errorMessage;\\n        string path;\\n        uint64 depth;\\n        bool isDir;\\n        bool isSymlink;\\n    }\\n\\n    struct FsMetadata {\\n        bool isDir;\\n        bool isSymlink;\\n        uint256 length;\\n        bool readOnly;\\n        uint256 modified;\\n        uint256 accessed;\\n        uint256 created;\\n    }\\n\\n    // Loads a storage slot from an address\\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\\n    // Signs data\\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\\n    // Gets the address for a given private key\\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\\n    // Gets the nonce of an account\\n    function getNonce(address account) external view returns (uint64 nonce);\\n    // Performs a foreign function call via the terminal\\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\\n    // Sets environment variables\\n    function setEnv(string calldata name, string calldata value) external;\\n    // Reads environment variables, (name) => (value)\\n    function envBool(string calldata name) external view returns (bool value);\\n    function envUint(string calldata name) external view returns (uint256 value);\\n    function envInt(string calldata name) external view returns (int256 value);\\n    function envAddress(string calldata name) external view returns (address value);\\n    function envBytes32(string calldata name) external view returns (bytes32 value);\\n    function envString(string calldata name) external view returns (string memory value);\\n    function envBytes(string calldata name) external view returns (bytes memory value);\\n    // Reads environment variables as arrays\\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\\n    // Read environment variables with default value\\n    function envOr(string calldata name, bool defaultValue) external returns (bool value);\\n    function envOr(string calldata name, uint256 defaultValue) external returns (uint256 value);\\n    function envOr(string calldata name, int256 defaultValue) external returns (int256 value);\\n    function envOr(string calldata name, address defaultValue) external returns (address value);\\n    function envOr(string calldata name, bytes32 defaultValue) external returns (bytes32 value);\\n    function envOr(string calldata name, string calldata defaultValue) external returns (string memory value);\\n    function envOr(string calldata name, bytes calldata defaultValue) external returns (bytes memory value);\\n    // Read environment variables as arrays with default value\\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\\n        external\\n        returns (bool[] memory value);\\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\\n        external\\n        returns (uint256[] memory value);\\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\\n        external\\n        returns (int256[] memory value);\\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\\n        external\\n        returns (address[] memory value);\\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\\n        external\\n        returns (bytes32[] memory value);\\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\\n        external\\n        returns (string[] memory value);\\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\\n        external\\n        returns (bytes[] memory value);\\n    // Records all storage reads and writes\\n    function record() external;\\n    // Gets all accessed reads and write slot from a recording session, for a given address\\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\\n    // Gets the _creation_ bytecode from an artifact file. Takes in the relative path to the json file\\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\\n    // Gets the _deployed_ bytecode from an artifact file. Takes in the relative path to the json file\\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\\n    // Labels an address in call traces\\n    function label(address account, string calldata newLabel) external;\\n    // Gets the label for the specified address\\n    function getLabel(address account) external returns (string memory currentLabel);\\n    // Using the address that calls the test contract, has the next call (at this call depth only) create a transaction that can later be signed and sent onchain\\n    function broadcast() external;\\n    // Has the next call (at this call depth only) create a transaction with the address provided as the sender that can later be signed and sent onchain\\n    function broadcast(address signer) external;\\n    // Has the next call (at this call depth only) create a transaction with the private key provided as the sender that can later be signed and sent onchain\\n    function broadcast(uint256 privateKey) external;\\n    // Using the address that calls the test contract, has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain\\n    function startBroadcast() external;\\n    // Has all subsequent calls (at this call depth only) create transactions with the address provided that can later be signed and sent onchain\\n    function startBroadcast(address signer) external;\\n    // Has all subsequent calls (at this call depth only) create transactions with the private key provided that can later be signed and sent onchain\\n    function startBroadcast(uint256 privateKey) external;\\n    // Stops collecting onchain transactions\\n    function stopBroadcast() external;\\n\\n    // Get the path of the current project root.\\n    function projectRoot() external view returns (string memory path);\\n    // Reads the entire content of file to string. `path` is relative to the project root.\\n    function readFile(string calldata path) external view returns (string memory data);\\n    // Reads the entire content of file as binary. `path` is relative to the project root.\\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\\n    // Reads next line of file to string.\\n    function readLine(string calldata path) external view returns (string memory line);\\n    // Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\\n    // `path` is relative to the project root.\\n    function writeFile(string calldata path, string calldata data) external;\\n    // Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\\n    // `path` is relative to the project root.\\n    function writeFileBinary(string calldata path, bytes calldata data) external;\\n    // Writes line to file, creating a file if it does not exist.\\n    // `path` is relative to the project root.\\n    function writeLine(string calldata path, string calldata data) external;\\n    // Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\\n    // `path` is relative to the project root.\\n    function closeFile(string calldata path) external;\\n    // Removes a file from the filesystem.\\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    // - `path` points to a directory.\\n    // - The file doesn't exist.\\n    // - The user lacks permissions to remove the file.\\n    // `path` is relative to the project root.\\n    function removeFile(string calldata path) external;\\n    // Creates a new, empty directory at the provided path.\\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    // - User lacks permissions to modify `path`.\\n    // - A parent of the given path doesn't exist and `recursive` is false.\\n    // - `path` already exists and `recursive` is false.\\n    // `path` is relative to the project root.\\n    function createDir(string calldata path, bool recursive) external;\\n    // Removes a directory at the provided path.\\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    // - `path` doesn't exist.\\n    // - `path` isn't a directory.\\n    // - User lacks permissions to modify `path`.\\n    // - The directory is not empty and `recursive` is false.\\n    // `path` is relative to the project root.\\n    function removeDir(string calldata path, bool recursive) external;\\n    // Reads the directory at the given path recursively, up to `max_depth`.\\n    // `max_depth` defaults to 1, meaning only the direct children of the given directory will be returned.\\n    // Follows symbolic links if `follow_links` is true.\\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\\n        external\\n        view\\n        returns (DirEntry[] memory entries);\\n    // Reads a symbolic link, returning the path that the link points to.\\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    // - `path` is not a symbolic link.\\n    // - `path` does not exist.\\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\\n    // Given a path, query the file system to get information about a file, directory, etc.\\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\\n\\n    // Convert values to a string\\n    function toString(address value) external pure returns (string memory stringifiedValue);\\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\\n    function toString(bool value) external pure returns (string memory stringifiedValue);\\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\\n    // Convert values from a string\\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\\n    // Record all the transaction logs\\n    function recordLogs() external;\\n    // Gets all the recorded logs\\n    function getRecordedLogs() external returns (Log[] memory logs);\\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path m/44'/60'/0'/0/{index}\\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at {derivationPath}{index}\\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\\n        external\\n        pure\\n        returns (uint256 privateKey);\\n    // Adds a private key to the local forge wallet and returns the address\\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\\n    //\\n    // parseJson\\n    //\\n    // ----\\n    // In case the returned value is a JSON object, it's encoded as a ABI-encoded tuple. As JSON objects\\n    // don't have the notion of ordered, but tuples do, they JSON object is encoded with it's fields ordered in\\n    // ALPHABETICAL order. That means that in order to successfully decode the tuple, we need to define a tuple that\\n    // encodes the fields in the same order, which is alphabetical. In the case of Solidity structs, they are encoded\\n    // as tuples, with the attributes in the order in which they are defined.\\n    // For example: json = { 'a': 1, 'b': 0xa4tb......3xs}\\n    // a: uint256\\n    // b: address\\n    // To decode that json, we need to define a struct or a tuple as follows:\\n    // struct json = { uint256 a; address b; }\\n    // If we defined a json struct with the opposite order, meaning placing the address b first, it would try to\\n    // decode the tuple in that order, and thus fail.\\n    // ----\\n    // Given a string of JSON, return it as ABI-encoded\\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\\n\\n    // The following parseJson cheatcodes will do type coercion, for the type that they indicate.\\n    // For example, parseJsonUint will coerce all values to a uint256. That includes stringified numbers '12'\\n    // and hex numbers '0xEF'.\\n    // Type coercion works ONLY for discrete values or arrays. That means that the key must return a value or array, not\\n    // a JSON object.\\n    function parseJsonUint(string calldata, string calldata) external returns (uint256);\\n    function parseJsonUintArray(string calldata, string calldata) external returns (uint256[] memory);\\n    function parseJsonInt(string calldata, string calldata) external returns (int256);\\n    function parseJsonIntArray(string calldata, string calldata) external returns (int256[] memory);\\n    function parseJsonBool(string calldata, string calldata) external returns (bool);\\n    function parseJsonBoolArray(string calldata, string calldata) external returns (bool[] memory);\\n    function parseJsonAddress(string calldata, string calldata) external returns (address);\\n    function parseJsonAddressArray(string calldata, string calldata) external returns (address[] memory);\\n    function parseJsonString(string calldata, string calldata) external returns (string memory);\\n    function parseJsonStringArray(string calldata, string calldata) external returns (string[] memory);\\n    function parseJsonBytes(string calldata, string calldata) external returns (bytes memory);\\n    function parseJsonBytesArray(string calldata, string calldata) external returns (bytes[] memory);\\n    function parseJsonBytes32(string calldata, string calldata) external returns (bytes32);\\n    function parseJsonBytes32Array(string calldata, string calldata) external returns (bytes32[] memory);\\n\\n    // Serialize a key and value to a JSON object stored in-memory that can be later written to a file\\n    // It returns the stringified version of the specific JSON file up to that moment.\\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\\n        external\\n        returns (string memory json);\\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\\n        external\\n        returns (string memory json);\\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\\n        external\\n        returns (string memory json);\\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\\n        external\\n        returns (string memory json);\\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\\n        external\\n        returns (string memory json);\\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\\n        external\\n        returns (string memory json);\\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\\n        external\\n        returns (string memory json);\\n\\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\\n        external\\n        returns (string memory json);\\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\\n        external\\n        returns (string memory json);\\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\\n        external\\n        returns (string memory json);\\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\\n        external\\n        returns (string memory json);\\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\\n        external\\n        returns (string memory json);\\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\\n        external\\n        returns (string memory json);\\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    //\\n    // writeJson\\n    //\\n    // ----\\n    // Write a serialized JSON object to a file. If the file exists, it will be overwritten.\\n    // Let's assume we want to write the following JSON to a file:\\n    //\\n    // { \\\"boolean\\\": true, \\\"number\\\": 342, \\\"object\\\": { \\\"title\\\": \\\"finally json serialization\\\" } }\\n    //\\n    // ```\\n    //  string memory json1 = \\\"some key\\\";\\n    //  vm.serializeBool(json1, \\\"boolean\\\", true);\\n    //  vm.serializeBool(json1, \\\"number\\\", uint256(342));\\n    //  json2 = \\\"some other key\\\";\\n    //  string memory output = vm.serializeString(json2, \\\"title\\\", \\\"finally json serialization\\\");\\n    //  string memory finalJson = vm.serialize(json1, \\\"object\\\", output);\\n    //  vm.writeJson(finalJson, \\\"./output/example.json\\\");\\n    // ```\\n    // The critical insight is that every invocation of serialization will return the stringified version of the JSON\\n    // up to that point. That means we can construct arbitrary JSON objects and then use the return stringified version\\n    // to serialize them as values to another JSON object.\\n    //\\n    // json1 and json2 are simply keys used by the backend to keep track of the objects. So vm.serializeJson(json1,..)\\n    // will find the object in-memory that is keyed by \\\"some key\\\".\\n    function writeJson(string calldata json, string calldata path) external;\\n    // Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key>\\n    // This is useful to replace a specific value of a JSON file, without having to parse the entire thing\\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\\n    // Returns the RPC url for the given alias\\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\\n    // Returns all rpc urls and their aliases `[alias, url][]`\\n    function rpcUrls() external view returns (string[2][] memory urls);\\n    // Returns all rpc urls and their aliases as structs.\\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\\n    // If the condition is false, discard this run's fuzz inputs and generate new ones.\\n    function assume(bool condition) external pure;\\n    // Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\\n    function pauseGasMetering() external;\\n    // Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\\n    function resumeGasMetering() external;\\n    // Writes a breakpoint to jump to in the debugger\\n    function breakpoint(string calldata char) external;\\n    // Writes a conditional breakpoint to jump to in the debugger\\n    function breakpoint(string calldata char, bool value) external;\\n}\\n\\ninterface Vm is VmSafe {\\n    // Sets block.timestamp\\n    function warp(uint256 newTimestamp) external;\\n    // Sets block.height\\n    function roll(uint256 newHeight) external;\\n    // Sets block.basefee\\n    function fee(uint256 newBasefee) external;\\n    // Sets block.difficulty\\n    // Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\\n    // If used on unsupported EVM versions it will revert.\\n    function difficulty(uint256 newDifficulty) external;\\n    // Sets block.prevrandao\\n    // Not available on EVM versions before Paris. Use `difficulty` instead.\\n    // If used on unsupported EVM versions it will revert.\\n    function prevrandao(bytes32 newPrevrandao) external;\\n    // Sets block.chainid\\n    function chainId(uint256 newChainId) external;\\n    // Sets tx.gasprice\\n    function txGasPrice(uint256 newGasPrice) external;\\n    // Stores a value to an address' storage slot.\\n    function store(address target, bytes32 slot, bytes32 value) external;\\n    // Sets the nonce of an account; must be higher than the current nonce of the account\\n    function setNonce(address account, uint64 newNonce) external;\\n    // Sets the nonce of an account to an arbitrary value\\n    function setNonceUnsafe(address account, uint64 newNonce) external;\\n    // Resets the nonce of an account to 0 for EOAs and 1 for contract accounts\\n    function resetNonce(address account) external;\\n    // Sets the *next* call's msg.sender to be the input address\\n    function prank(address msgSender) external;\\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\\n    function startPrank(address msgSender) external;\\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\\n    function prank(address msgSender, address txOrigin) external;\\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\\n    function startPrank(address msgSender, address txOrigin) external;\\n    // Resets subsequent calls' msg.sender to be `address(this)`\\n    function stopPrank() external;\\n    // Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification\\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\\n    // Sets an address' balance\\n    function deal(address account, uint256 newBalance) external;\\n    // Sets an address' code\\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\\n    // Marks a test as skipped. Must be called at the top of the test.\\n    function skip(bool skipTest) external;\\n    // Expects an error on next call\\n    function expectRevert(bytes calldata revertData) external;\\n    function expectRevert(bytes4 revertData) external;\\n    function expectRevert() external;\\n\\n    // Prepare an expected log with all four checks enabled.\\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\\n    // logs were emitted in the expected order with the expected topics and data.\\n    // Second form also checks supplied address against emitting contract.\\n    function expectEmit() external;\\n    function expectEmit(address emitter) external;\\n\\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\\n    // Second form also checks supplied address against emitting contract.\\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\\n        external;\\n\\n    // Mocks a call to an address, returning specified data.\\n    // Calldata can either be strict or a partial match, e.g. if you only\\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\\n    // function will be mocked.\\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\\n    // Mocks a call to an address with a specific msg.value, returning specified data.\\n    // Calldata match takes precedence over msg.value in case of ambiguity.\\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\\n    // Reverts a call to an address with specified revert data.\\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\\n    // Reverts a call to an address with a specific msg.value, with specified revert data.\\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\\n        external;\\n    // Clears all mocked calls\\n    function clearMockedCalls() external;\\n    // Expects a call to an address with the specified calldata.\\n    // Calldata can either be a strict or a partial match\\n    function expectCall(address callee, bytes calldata data) external;\\n    // Expects given number of calls to an address with the specified calldata.\\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\\n    // Expects a call to an address with the specified msg.value and calldata\\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\\n    // Expects given number of calls to an address with the specified msg.value and calldata\\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\\n    // Expect a call to an address with the specified msg.value, gas, and calldata.\\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\\n    // Expects given number of calls to an address with the specified msg.value, gas, and calldata.\\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\\n    // Expect a call to an address with the specified msg.value and calldata, and a *minimum* amount of gas.\\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\\n    // Expect given number of calls to an address with the specified msg.value and calldata, and a *minimum* amount of gas.\\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\\n        external;\\n    // Only allows memory writes to offsets [0x00, 0x60) \u222a [min, max) in the current subcontext. If any other\\n    // memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\\n    function expectSafeMemory(uint64 min, uint64 max) external;\\n    // Only allows memory writes to offsets [0x00, 0x60) \u222a [min, max) in the next created subcontext.\\n    // If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\\n    // to the set.\\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\\n    // Sets block.coinbase\\n    function coinbase(address newCoinbase) external;\\n    // Snapshot the current state of the evm.\\n    // Returns the id of the snapshot that was created.\\n    // To revert a snapshot use `revertTo`\\n    function snapshot() external returns (uint256 snapshotId);\\n    // Revert the state of the EVM to a previous snapshot\\n    // Takes the snapshot id to revert to.\\n    // This deletes the snapshot and all snapshots taken after the given snapshot id.\\n    function revertTo(uint256 snapshotId) external returns (bool success);\\n    // Creates a new fork with the given endpoint and block and returns the identifier of the fork\\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\\n    // Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork\\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\\n    // Creates a new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before the transaction,\\n    // and returns the identifier of the fork\\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\\n    // Creates _and_ also selects a new fork with the given endpoint and block and returns the identifier of the fork\\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\\n    // Creates _and_ also selects new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before\\n    // the transaction, returns the identifier of the fork\\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\\n    // Creates _and_ also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork\\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\\n    // Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\\n    function selectFork(uint256 forkId) external;\\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\\n    function activeFork() external view returns (uint256 forkId);\\n    // Updates the currently active fork to given block number\\n    // This is similar to `roll` but for the currently active fork\\n    function rollFork(uint256 blockNumber) external;\\n    // Updates the currently active fork to given transaction\\n    // this will `rollFork` with the number of the block the transaction was mined in and replays all transaction mined before it in the block\\n    function rollFork(bytes32 txHash) external;\\n    // Updates the given fork to given block number\\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\\n    // Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block\\n    function rollFork(uint256 forkId, bytes32 txHash) external;\\n    // Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\\n    // Meaning, changes made to the state of this account will be kept when switching forks\\n    function makePersistent(address account) external;\\n    function makePersistent(address account0, address account1) external;\\n    function makePersistent(address account0, address account1, address account2) external;\\n    function makePersistent(address[] calldata accounts) external;\\n    // Revokes persistent status from the address, previously added via `makePersistent`\\n    function revokePersistent(address account) external;\\n    function revokePersistent(address[] calldata accounts) external;\\n    // Returns true if the account is marked as persistent\\n    function isPersistent(address account) external view returns (bool persistent);\\n    // In forking mode, explicitly grant the given address cheatcode access\\n    function allowCheatcodes(address account) external;\\n    // Fetches the given transaction from the active fork and executes it on the current state\\n    function transact(bytes32 txHash) external;\\n    // Fetches the given transaction from the given fork and executes it on the current state\\n    function transact(uint256 forkId, bytes32 txHash) external;\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\nimport {StdStorage} from \\\"./StdStorage.sol\\\";\\nimport {Vm, VmSafe} from \\\"./Vm.sol\\\";\\n\\nabstract contract CommonBase {\\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\\\"hevm cheat code\\\"))));\\n    // console.sol and console2.sol work by executing a staticcall to this address.\\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\\\"foundry default caller\\\"))));\\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\\n    // Deterministic deployment address of the Multicall3 contract.\\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\\n    // The order of the secp256k1 curve.\\n    uint256 internal constant SECP256K1_ORDER =\\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\\n\\n    uint256 internal constant UINT256_MAX =\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    Vm internal constant vm = Vm(VM_ADDRESS);\\n    StdStorage internal stdstore;\\n}\\n\\nabstract contract TestBase is CommonBase {}\\n\\nabstract contract ScriptBase is CommonBase {\\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/lib/ds-test/src/test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.5.0;\\n\\ncontract DSTest {\\n    event log                    (string);\\n    event logs                   (bytes);\\n\\n    event log_address            (address);\\n    event log_bytes32            (bytes32);\\n    event log_int                (int);\\n    event log_uint               (uint);\\n    event log_bytes              (bytes);\\n    event log_string             (string);\\n\\n    event log_named_address      (string key, address val);\\n    event log_named_bytes32      (string key, bytes32 val);\\n    event log_named_decimal_int  (string key, int val, uint decimals);\\n    event log_named_decimal_uint (string key, uint val, uint decimals);\\n    event log_named_int          (string key, int val);\\n    event log_named_uint         (string key, uint val);\\n    event log_named_bytes        (string key, bytes val);\\n    event log_named_string       (string key, string val);\\n\\n    bool public IS_TEST = true;\\n    bool private _failed;\\n\\n    address constant HEVM_ADDRESS =\\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\\n\\n    modifier mayRevert() { _; }\\n    modifier testopts(string memory) { _; }\\n\\n    function failed() public returns (bool) {\\n        if (_failed) {\\n            return _failed;\\n        } else {\\n            bool globalFailed = false;\\n            if (hasHEVMContext()) {\\n                (, bytes memory retdata) = HEVM_ADDRESS.call(\\n                    abi.encodePacked(\\n                        bytes4(keccak256(\\\"load(address,bytes32)\\\")),\\n                        abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"))\\n                    )\\n                );\\n                globalFailed = abi.decode(retdata, (bool));\\n            }\\n            return globalFailed;\\n        }\\n    }\\n\\n    function fail() internal virtual {\\n        if (hasHEVMContext()) {\\n            (bool status, ) = HEVM_ADDRESS.call(\\n                abi.encodePacked(\\n                    bytes4(keccak256(\\\"store(address,bytes32,bytes32)\\\")),\\n                    abi.encode(HEVM_ADDRESS, bytes32(\\\"failed\\\"), bytes32(uint256(0x01)))\\n                )\\n            );\\n            status; // Silence compiler warnings\\n        }\\n        _failed = true;\\n    }\\n\\n    function hasHEVMContext() internal view returns (bool) {\\n        uint256 hevmCodeSize = 0;\\n        assembly {\\n            hevmCodeSize := extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)\\n        }\\n        return hevmCodeSize > 0;\\n    }\\n\\n    modifier logs_gas() {\\n        uint startGas = gasleft();\\n        _;\\n        uint endGas = gasleft();\\n        emit log_named_uint(\\\"gas\\\", startGas - endGas);\\n    }\\n\\n    function assertTrue(bool condition) internal {\\n        if (!condition) {\\n            emit log(\\\"Error: Assertion Failed\\\");\\n            fail();\\n        }\\n    }\\n\\n    function assertTrue(bool condition, string memory err) internal {\\n        if (!condition) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertTrue(condition);\\n        }\\n    }\\n\\n    function assertEq(address a, address b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [address]\\\");\\n            emit log_named_address(\\\"      Left\\\", a);\\n            emit log_named_address(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq(address a, address b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string (\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    function assertEq(bytes32 a, bytes32 b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [bytes32]\\\");\\n            emit log_named_bytes32(\\\"      Left\\\", a);\\n            emit log_named_bytes32(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string (\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n    function assertEq32(bytes32 a, bytes32 b) internal {\\n        assertEq(a, b);\\n    }\\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\\n        assertEq(a, b, err);\\n    }\\n\\n    function assertEq(int a, int b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [int]\\\");\\n            emit log_named_int(\\\"      Left\\\", a);\\n            emit log_named_int(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq(int a, int b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n    function assertEq(uint a, uint b) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"      Left\\\", a);\\n            emit log_named_uint(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq(uint a, uint b, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n    function assertEqDecimal(int a, int b, uint decimals) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"      Left\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"     Right\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEqDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\\n        if (a != b) {\\n            emit log(\\\"Error: a == b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"      Left\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"     Right\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a != b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEqDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertNotEq(address a, address b) internal {\\n        if (a == b) {\\n            emit log(\\\"Error: a != b not satisfied [address]\\\");\\n            emit log_named_address(\\\"      Left\\\", a);\\n            emit log_named_address(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertNotEq(address a, address b, string memory err) internal {\\n        if (a == b) {\\n            emit log_named_string (\\\"Error\\\", err);\\n            assertNotEq(a, b);\\n        }\\n    }\\n\\n    function assertNotEq(bytes32 a, bytes32 b) internal {\\n        if (a == b) {\\n            emit log(\\\"Error: a != b not satisfied [bytes32]\\\");\\n            emit log_named_bytes32(\\\"      Left\\\", a);\\n            emit log_named_bytes32(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertNotEq(bytes32 a, bytes32 b, string memory err) internal {\\n        if (a == b) {\\n            emit log_named_string (\\\"Error\\\", err);\\n            assertNotEq(a, b);\\n        }\\n    }\\n    function assertNotEq32(bytes32 a, bytes32 b) internal {\\n        assertNotEq(a, b);\\n    }\\n    function assertNotEq32(bytes32 a, bytes32 b, string memory err) internal {\\n        assertNotEq(a, b, err);\\n    }\\n\\n    function assertNotEq(int a, int b) internal {\\n        if (a == b) {\\n            emit log(\\\"Error: a != b not satisfied [int]\\\");\\n            emit log_named_int(\\\"      Left\\\", a);\\n            emit log_named_int(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertNotEq(int a, int b, string memory err) internal {\\n        if (a == b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertNotEq(a, b);\\n        }\\n    }\\n    function assertNotEq(uint a, uint b) internal {\\n        if (a == b) {\\n            emit log(\\\"Error: a != b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"      Left\\\", a);\\n            emit log_named_uint(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertNotEq(uint a, uint b, string memory err) internal {\\n        if (a == b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertNotEq(a, b);\\n        }\\n    }\\n    function assertNotEqDecimal(int a, int b, uint decimals) internal {\\n        if (a == b) {\\n            emit log(\\\"Error: a != b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"      Left\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"     Right\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertNotEqDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a == b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertNotEqDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertNotEqDecimal(uint a, uint b, uint decimals) internal {\\n        if (a == b) {\\n            emit log(\\\"Error: a != b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"      Left\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"     Right\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertNotEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a == b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertNotEqDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertGt(uint a, uint b) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGt(uint a, uint b, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGt(a, b);\\n        }\\n    }\\n    function assertGt(int a, int b) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGt(int a, int b, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGt(a, b);\\n        }\\n    }\\n    function assertGtDecimal(int a, int b, uint decimals) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGtDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\\n        if (a <= b) {\\n            emit log(\\\"Error: a > b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a <= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGtDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertGe(uint a, uint b) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGe(uint a, uint b, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGe(a, b);\\n        }\\n    }\\n    function assertGe(int a, int b) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertGe(int a, int b, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGe(a, b);\\n        }\\n    }\\n    function assertGeDecimal(int a, int b, uint decimals) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGeDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\\n        if (a < b) {\\n            emit log(\\\"Error: a >= b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a < b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertGeDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertLt(uint a, uint b) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLt(uint a, uint b, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLt(a, b);\\n        }\\n    }\\n    function assertLt(int a, int b) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLt(int a, int b, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLt(a, b);\\n        }\\n    }\\n    function assertLtDecimal(int a, int b, uint decimals) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLtDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\\n        if (a >= b) {\\n            emit log(\\\"Error: a < b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a >= b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLtDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertLe(uint a, uint b) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [uint]\\\");\\n            emit log_named_uint(\\\"  Value a\\\", a);\\n            emit log_named_uint(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLe(uint a, uint b, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLe(a, b);\\n        }\\n    }\\n    function assertLe(int a, int b) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [int]\\\");\\n            emit log_named_int(\\\"  Value a\\\", a);\\n            emit log_named_int(\\\"  Value b\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertLe(int a, int b, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLe(a, b);\\n        }\\n    }\\n    function assertLeDecimal(int a, int b, uint decimals) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [decimal int]\\\");\\n            emit log_named_decimal_int(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_int(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLeDecimal(a, b, decimals);\\n        }\\n    }\\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\\n        if (a > b) {\\n            emit log(\\\"Error: a <= b not satisfied [decimal uint]\\\");\\n            emit log_named_decimal_uint(\\\"  Value a\\\", a, decimals);\\n            emit log_named_decimal_uint(\\\"  Value b\\\", b, decimals);\\n            fail();\\n        }\\n    }\\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\\n        if (a > b) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertLeDecimal(a, b, decimals);\\n        }\\n    }\\n\\n    function assertEq(string memory a, string memory b) internal {\\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\\n            emit log(\\\"Error: a == b not satisfied [string]\\\");\\n            emit log_named_string(\\\"      Left\\\", a);\\n            emit log_named_string(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq(string memory a, string memory b, string memory err) internal {\\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq(a, b);\\n        }\\n    }\\n\\n    function assertNotEq(string memory a, string memory b) internal {\\n        if (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b))) {\\n            emit log(\\\"Error: a != b not satisfied [string]\\\");\\n            emit log_named_string(\\\"      Left\\\", a);\\n            emit log_named_string(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertNotEq(string memory a, string memory b, string memory err) internal {\\n        if (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b))) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertNotEq(a, b);\\n        }\\n    }\\n\\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\\n        ok = true;\\n        if (a.length == b.length) {\\n            for (uint i = 0; i < a.length; i++) {\\n                if (a[i] != b[i]) {\\n                    ok = false;\\n                }\\n            }\\n        } else {\\n            ok = false;\\n        }\\n    }\\n    function assertEq0(bytes memory a, bytes memory b) internal {\\n        if (!checkEq0(a, b)) {\\n            emit log(\\\"Error: a == b not satisfied [bytes]\\\");\\n            emit log_named_bytes(\\\"      Left\\\", a);\\n            emit log_named_bytes(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\\n        if (!checkEq0(a, b)) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertEq0(a, b);\\n        }\\n    }\\n\\n    function assertNotEq0(bytes memory a, bytes memory b) internal {\\n        if (checkEq0(a, b)) {\\n            emit log(\\\"Error: a != b not satisfied [bytes]\\\");\\n            emit log_named_bytes(\\\"      Left\\\", a);\\n            emit log_named_bytes(\\\"     Right\\\", b);\\n            fail();\\n        }\\n    }\\n    function assertNotEq0(bytes memory a, bytes memory b, string memory err) internal {\\n        if (checkEq0(a, b)) {\\n            emit log_named_string(\\\"Error\\\", err);\\n            assertNotEq0(a, b);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/initializable/IInitializableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IInitializableInternal {\\n    error Initializable__AlreadyInitialized();\\n\\n    event Initialized(uint8 version);\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/initializable/InitializableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary InitializableStorage {\\n    struct Layout {\\n        uint8 initialized;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC4906Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/interfaces/IMulticall3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface IMulticall3 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    struct Call3 {\\n        address target;\\n        bool allowFailure;\\n        bytes callData;\\n    }\\n\\n    struct Call3Value {\\n        address target;\\n        bool allowFailure;\\n        uint256 value;\\n        bytes callData;\\n    }\\n\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] calldata calls)\\n        external\\n        payable\\n        returns (uint256 blockNumber, bytes[] memory returnData);\\n\\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\\n\\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\\n\\n    function blockAndAggregate(Call[] calldata calls)\\n        external\\n        payable\\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\\n\\n    function getBasefee() external view returns (uint256 basefee);\\n\\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\\n\\n    function getBlockNumber() external view returns (uint256 blockNumber);\\n\\n    function getChainId() external view returns (uint256 chainid);\\n\\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\\n\\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\\n\\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\\n\\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\\n\\n    function getEthBalance(address addr) external view returns (uint256 balance);\\n\\n    function getLastBlockHash() external view returns (bytes32 blockHash);\\n\\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\\n        external\\n        payable\\n        returns (Result[] memory returnData);\\n\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\\n        external\\n        payable\\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solidstate/=node_modules/@solidstate/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"Blacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanvasNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"D4APaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DaoNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DaoNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedDailyMintCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMinterMaxMintAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initializable__AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftExceedMaxAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBasicDaoNftFlatPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCanvasIdOfSpecialTokenUri\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughEther\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"UriAlreadyExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"D4AClaimCanvasReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"D4AClaimNftMinterReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"D4AClaimProjectERC20Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"grantToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grantTokenAmount\",\"type\":\"uint256\"}],\"name\":\"D4AExchangeERC20ToERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"D4AExchangeERC20ToETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"D4AMintNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flatPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct MintNftInfo[]\",\"name\":\"mintNftInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"batchMint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"claimCanvasReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"claimNftMinterReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"claimProjectERC20Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daoCreatorReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"canvasUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flatPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"name\":\"createCanvasAndMintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"exchangeERC20ToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"nftFlatPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"nftFlatPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintNFTAndTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PDProtocol", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}