{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PrivateVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IStripToken.sol\\\";\\n\\ncontract PrivateVesting {\\n    using SafeMath for uint256;\\n\\n    struct VestingSchedule {\\n        uint256 totalAmount; // Total amount of tokens to be vested.\\n        uint256 amountWithdrawn; // The amount that has been withdrawn.\\n        uint256 startTime;\\n    }\\n\\n    address private owner;\\n    address private presaleContract; // Presale contract\\n    address payable public multiSigAdmin; // MultiSig contract address : The address where to withdraw funds\\n\\n    mapping(address => VestingSchedule) public recipients;\\n\\n    uint256 constant MAX_UINT256 = type(uint256).max;\\n    uint256 constant TOTAL_SUPPLY = 500e27;\\n    uint256 constant UNLOCK_UNIT = 10; // 10% of the total allocation will be unlocked\\n    uint256 constant INITIAL_LOCK_PERIOD = 45 days; // No tokens will be unlocked for the first 45 days\\n\\n    uint256 public vestingAllocation; // Max amount which will be locked in vesting contract\\n\\n    uint256 private totalAllocated; // The amount of allocated tokens\\n\\n    event VestingScheduleRegistered(address registeredAddress, uint256 totalAmount);\\n    event VestingSchedulesRegistered(address[] registeredAddresses, uint256[] totalAmounts);\\n    event MultiSigAdminUpdated(address _multiSigAdmin);\\n\\n    IStripToken public stripToken;\\n\\n    /********************** Modifiers ***********************/\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Requires Owner Role\\\");\\n        _;\\n    }\\n\\n    modifier onlyMultiSigAdmin() {\\n        require(msg.sender == multiSigAdmin || presaleContract == msg.sender, \\\"Should be multiSig contract\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _stripToken,\\n        address _presaleContract,\\n        address payable _multiSigAdmin\\n    ) {\\n        owner = msg.sender;\\n\\n        stripToken = IStripToken(_stripToken);\\n        presaleContract = _presaleContract;\\n        multiSigAdmin = _multiSigAdmin;\\n        vestingAllocation = TOTAL_SUPPLY;\\n\\n        /// Allow presale contract to withdraw unsold strip tokens to multiSig admin\\n        stripToken.approve(presaleContract, MAX_UINT256);\\n    }\\n\\n    function setMultiSigAdminAddress(address payable _multiSigAdmin) external onlyOwner {\\n        require(_multiSigAdmin != address(0x00));\\n        multiSigAdmin = _multiSigAdmin;\\n        emit MultiSigAdminUpdated(multiSigAdmin);\\n    }\\n\\n    function setPresaleContractAddress(address _presaleContract) external onlyOwner {\\n        require(_presaleContract != address(0x00));\\n        presaleContract = _presaleContract;\\n        stripToken.approve(_presaleContract, MAX_UINT256);\\n    }\\n\\n    function setVestingAllocation(uint256 _newAlloc) external onlyOwner {\\n        require(_newAlloc <= TOTAL_SUPPLY, \\\"setVestingAllocation: Exceeds total supply\\\");\\n        vestingAllocation = _newAlloc;\\n    }\\n\\n    /**\\n     * @dev Private function to add a recipient to vesting schedule\\n     * @param _recipient the address to be added\\n     * @param _totalAmount integer variable to indicate strip amount of the recipient\\n     */\\n\\n    function addRecipient(\\n        address _recipient,\\n        uint256 _totalAmount,\\n        bool isPresaleBuyer\\n    ) private {\\n        require(_recipient != address(0x00), \\\"addRecipient: Invalid recipient address\\\");\\n        require(_totalAmount > 0, \\\"addRecipient: Cannot vest 0\\\");\\n        require(!isPresaleBuyer || (isPresaleBuyer && recipients[_recipient].totalAmount == 0), \\\"addRecipient: Already allocated\\\");\\n        require(\\n            totalAllocated.sub(recipients[_recipient].totalAmount).add(_totalAmount) <= vestingAllocation,\\n            \\\"addRecipient: Total Allocation Overflow\\\"\\n        );\\n\\n        totalAllocated = totalAllocated.sub(recipients[_recipient].totalAmount).add(_totalAmount);\\n\\n        recipients[_recipient] = VestingSchedule({totalAmount: _totalAmount, amountWithdrawn: 0, startTime: block.timestamp});\\n    }\\n\\n    /**\\n     * @dev Add new recipient to vesting schedule\\n     * @param _newRecipient the address to be added\\n     * @param _totalAmount integer variable to indicate strip amount of the recipient\\n     */\\n\\n    function addNewRecipient(\\n        address _newRecipient,\\n        uint256 _totalAmount,\\n        bool isPresaleBuyer\\n    ) external onlyMultiSigAdmin {\\n        addRecipient(_newRecipient, _totalAmount, isPresaleBuyer);\\n\\n        emit VestingScheduleRegistered(_newRecipient, _totalAmount);\\n    }\\n\\n    /**\\n     * @dev Add new recipients to vesting schedule\\n     * @param _newRecipients the addresses to be added\\n     * @param _totalAmounts integer array to indicate strip amount of recipients\\n     */\\n\\n    function addNewRecipients(\\n        address[] memory _newRecipients,\\n        uint256[] memory _totalAmounts,\\n        bool isPresaleBuyer\\n    ) external onlyMultiSigAdmin {\\n        for (uint256 i = 0; i < _newRecipients.length; i++) {\\n            addRecipient(_newRecipients[i], _totalAmounts[i], isPresaleBuyer);\\n        }\\n\\n        emit VestingSchedulesRegistered(_newRecipients, _totalAmounts);\\n    }\\n\\n    /**\\n     * @dev Gets the locked strip amount of a beneficiary\\n     * @param beneficiary address of beneficiary\\n     */\\n    function getLocked(address beneficiary) external view returns (uint256) {\\n        return recipients[beneficiary].totalAmount.sub(getVested(beneficiary));\\n    }\\n\\n    /**\\n     * @dev Gets the claimable strip amount of a beneficiary\\n     * @param beneficiary address of beneficiary\\n     */\\n    function getWithdrawable(address beneficiary) public view returns (uint256) {\\n        return getVested(beneficiary).sub(recipients[beneficiary].amountWithdrawn);\\n    }\\n\\n    /**\\n     * @dev Claim unlocked strip tokens of a recipient\\n     * @param _recipient address of recipient\\n     */\\n    function withdrawToken(address _recipient) external returns (uint256) {\\n        VestingSchedule storage _vestingSchedule = recipients[msg.sender];\\n        if (_vestingSchedule.totalAmount == 0) return 0;\\n\\n        uint256 _vested = getVested(msg.sender);\\n        uint256 _withdrawable = _vested.sub(recipients[msg.sender].amountWithdrawn);\\n        _vestingSchedule.amountWithdrawn = _vested;\\n\\n        require(_withdrawable > 0, \\\"withdraw: Nothing to withdraw\\\");\\n        require(stripToken.transfer(_recipient, _withdrawable));\\n\\n        return _withdrawable;\\n    }\\n\\n    /**\\n     * @dev Get claimable strip token amount of a beneficiary\\n     * @param beneficiary address of beneficiary\\n     */\\n    function getVested(address beneficiary) public view virtual returns (uint256 _amountVested) {\\n        require(beneficiary != address(0x00), \\\"getVested: Invalid address\\\");\\n        VestingSchedule memory _vestingSchedule = recipients[beneficiary];\\n\\n        if (\\n            (_vestingSchedule.totalAmount == 0) ||\\n            (block.timestamp < _vestingSchedule.startTime) ||\\n            (block.timestamp < _vestingSchedule.startTime.add(INITIAL_LOCK_PERIOD))\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 vestedPercent = 0;\\n        uint256 firstVestingPoint = _vestingSchedule.startTime.add(INITIAL_LOCK_PERIOD);\\n        uint256 vestingPeriod = 270 days;\\n\\n        uint256 secondVestingPoint = firstVestingPoint.add(vestingPeriod);\\n        if (block.timestamp > firstVestingPoint && block.timestamp <= secondVestingPoint) {\\n            vestedPercent = 10 + (block.timestamp - firstVestingPoint).mul(90).div(vestingPeriod);\\n        } else if (block.timestamp > secondVestingPoint) {\\n            vestedPercent = 100;\\n        }\\n\\n        uint256 vestedAmount = _vestingSchedule.totalAmount.mul(vestedPercent).div(100);\\n        if (vestedAmount > _vestingSchedule.totalAmount) {\\n            return _vestingSchedule.totalAmount;\\n        }\\n\\n        return vestedAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStripToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStripToken is IERC20 {\\n    function decimals() external view returns (uint256);\\n    function setMultiSigAdminAddress(address) external;\\n    function recoverERC20(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stripToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presaleContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_multiSigAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_multiSigAdmin\",\"type\":\"address\"}],\"name\":\"MultiSigAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"registeredAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"VestingSchedulesRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPresaleBuyer\",\"type\":\"bool\"}],\"name\":\"addNewRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPresaleBuyer\",\"type\":\"bool\"}],\"name\":\"addNewRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountVested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_multiSigAdmin\",\"type\":\"address\"}],\"name\":\"setMultiSigAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleContract\",\"type\":\"address\"}],\"name\":\"setPresaleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAlloc\",\"type\":\"uint256\"}],\"name\":\"setVestingAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stripToken\",\"outputs\":[{\"internalType\":\"contract IStripToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrivateVesting", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9cb6838902ccf711f16a9ea5a1170f8e9853c020000000000000000000000000cb3f599d2f0db0149f7413c211fa17f34288321000000000000000000000000194fe3f75d69ea398486e1e48105a83367663b28", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}