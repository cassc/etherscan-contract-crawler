{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./StakingRecord.sol\\\";\\nimport \\\"./StakingRateInfo.sol\\\";\\nimport \\\"./StakingPeriod.sol\\\";\\n\\ncontract StakingContract is Ownable, ReentrancyGuard {\\n    uint public constant DAY = 3600 * 24;\\n    // uint public constant DAY = 1;       // For test\\n\\n    address public upcAddress = 0xCADC40cE57164b3193cCAAf0E5C498F8180DEF5f;     //testnet\\n    // address public upcAddress = 0x487d62468282Bd04ddf976631C23128A425555EE;     //mainnet\\n\\n    mapping (uint => StakingRateInfo) public stakingInfos;\\n\\n    mapping (address => bool) public staked;\\n\\n    StakingRecord[] public records;\\n\\n    uint public stakingAmountLimit = 10 ** 6 * 10 ** 5;\\n\\n    uint public totalStakingAmount;\\n\\n    mapping (string=>address) referralCodes;\\n\\n    uint public referralFee = 20;       //20%\\n\\n    event SetUPCAddress(address upcAddress);\\n\\n    event Stake(uint id, address staker, uint amount, uint stakedAt, uint stakingInfoID, string referralCode, uint reward, uint referralReward);\\n\\n    event Claim(uint id, address staker, uint claimAmount);\\n\\n    event ClaimReferralFee(uint id, address referrer, uint claimAmount);\\n\\n    event Deposit(uint amount);\\n\\n    event GenerateReferralCode(address staker, string code);\\n\\n    event SetStakingPeriod(uint id, StakingPeriod[] periods);\\n\\n    constructor () Ownable(msg.sender){\\n        stakingInfos[1].day = 180; stakingInfos[1].apy = 100;\\n        stakingInfos[2].day = 90; stakingInfos[2].apy = 50;\\n        stakingInfos[3].day = 30; stakingInfos[3].apy = 20;\\n    }\\n\\n    function stake(uint amount, uint stakingInfoID, string memory referralCode) public nonReentrant {\\n        require(amount >= 0, \\\"It's not able to stake 0 UPC.\\\");\\n        require(isStakablePeriod(stakingInfoID), \\\"Out of staking period.\\\");\\n        require(totalStakingAmount + amount <= stakingAmountLimit, \\\"Staking amount limit exceeds.\\\");\\n        if (bytes(referralCode).length != 0) {\\n            require(referralCodes[referralCode] != msg.sender, \\\"Not able to use own referral code.\\\");\\n        }\\n        \\n        require(IERC20(upcAddress).allowance(msg.sender, address(this)) >= amount, \\\"UPC token is not allowed.\\\");\\n        require(IERC20(upcAddress).balanceOf(msg.sender) >= amount, \\\"UPC token balance is not enough.\\\");\\n        require(IERC20(upcAddress).transferFrom(msg.sender, address(this), amount), \\\"UPC token transfer failed.\\\");\\n\\n        records.push(StakingRecord(msg.sender, amount, block.timestamp, false, stakingInfoID, referralCode, false));\\n\\n        totalStakingAmount += amount;\\n\\n        staked[msg.sender] = true;\\n\\n        emit Stake(records.length - 1, msg.sender, amount, block.timestamp, stakingInfoID, referralCode, finalClaimableAmount(records.length - 1), referralAmount(records.length - 1));\\n    }\\n\\n    function isStakablePeriod(uint id) public view returns(bool) {\\n        for (uint i = 0; i < stakingInfos[id].periods.length; i++) {\\n            if (block.timestamp >= stakingInfos[id].periods[i].from && block.timestamp <= stakingInfos[id].periods[i].to) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isClaimable(uint id) public view returns(bool) {\\n        if (records[id].claimed) {\\n            return false;\\n        }\\n\\n        if (block.timestamp - records[id].stakedAt < DAY * stakingInfos[records[id].stakingRateInfoID].day) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function referralAmount(uint id) public view returns(uint) {\\n        if (records[id].claimedReferralFee) {\\n            return 0;\\n        }\\n\\n        if (bytes(records[id].referralCode).length == 0) {\\n            return 0;\\n        }\\n\\n        if (referralCodes[records[id].referralCode] == address(0)) {\\n            return 0;\\n        }\\n\\n        return finalClaimableAmount(id) * referralFee / 100;\\n    }\\n\\n    function finalClaimableAmount(uint id) public view returns(uint) {\\n        if (records[id].claimed) {\\n            return 0;\\n        }\\n\\n        return records[id].amount * stakingInfos[records[id].stakingRateInfoID].apy * (DAY * stakingInfos[records[id].stakingRateInfoID].day) / 100 / 365 / DAY;\\n    }\\n\\n    function claim(uint id) public {\\n        require(msg.sender == records[id].staker, \\\"Only owner can claim.\\\");\\n        require(isClaimable(id), \\\"This staking record is not able to claim.\\\");\\n\\n        uint amount = finalClaimableAmount(id);\\n\\n        require(IERC20(upcAddress).transfer(msg.sender, records[id].amount + amount), \\\"Claim failed.\\\");\\n\\n        records[id].claimed = true;\\n\\n        emit Claim(id, msg.sender, amount);\\n    }\\n\\n    function claimReferralFee(uint id) public {\\n        require(msg.sender == referralCodes[records[id].referralCode], \\\"Only referer can claim the referral fee.\\\");\\n        require(block.timestamp - records[id].stakedAt >= DAY * stakingInfos[records[id].stakingRateInfoID].day, \\\"It is not able to claim, yet\\\");\\n        require(!records[id].claimedReferralFee, \\\"Alreay claimed.\\\");\\n\\n        uint amount = referralAmount(id);\\n        require(IERC20(upcAddress).transfer(msg.sender, amount), \\\"Claim failed.\\\");\\n\\n        records[id].claimedReferralFee = true;\\n\\n        emit ClaimReferralFee(id, msg.sender, amount);\\n    }\\n\\n    function generateReferralCode() public {\\n        require(staked[msg.sender] == true, \\\"You should have at least one staking record.\\\");\\n\\n        string memory code = randomString(6);\\n        referralCodes[code] = msg.sender;\\n\\n        emit GenerateReferralCode(msg.sender, code);\\n    }\\n\\n    function deposit(uint amount) public onlyOwner {\\n        require(IERC20(upcAddress).allowance(msg.sender, address(this)) >= amount, \\\"UPC token is not allowed.\\\");\\n        \\n        require(IERC20(upcAddress).transferFrom(msg.sender, address(this), amount), \\\"Deposit failed.\\\");\\n\\n        emit Deposit(amount);\\n    }\\n\\n    function shouldDeposit() public view returns(uint){\\n        uint neccessaryAmount = neccessaryUPC();\\n\\n        if (neccessaryAmount < IERC20(upcAddress).balanceOf(address(this))) {\\n            return 0;\\n        }\\n\\n        return neccessaryAmount - IERC20(upcAddress).balanceOf(address(this));\\n    }\\n\\n    function Withdrawable() public view returns(uint) {\\n        uint neccessaryAmount = neccessaryUPC();\\n\\n        if (neccessaryAmount >= IERC20(upcAddress).balanceOf(address(this))) {\\n            return 0;\\n        }\\n\\n        return IERC20(upcAddress).balanceOf(address(this)) - neccessaryAmount;\\n    }\\n\\n    function neccessaryUPC() private view returns(uint) {\\n        uint ret = 0;\\n        for (uint i = 0; i < records.length; i++) {\\n            ret += finalClaimableAmount(i) + referralAmount(i);\\n            if (!records[i].claimed) {\\n                ret += records[i].amount;\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function withdraw(uint amount) public onlyOwner {\\n        // bool isPeriodOver = true;\\n        // for (uint id = 1; id <= 3; id++) {\\n        //     for (uint i = 0; i < stakingInfos[id].periods.length; i++) {\\n        //         if (block.timestamp < stakingInfos[id].periods[i].to) {\\n        //             isPeriodOver = false;\\n        //             break;\\n        //         }\\n        //     }\\n        // }\\n        // require(isPeriodOver, \\\"It's able to stake now.\\\");\\n\\n        require(IERC20(upcAddress).transfer(msg.sender, amount), \\\"Withdraw failed.\\\");\\n    }\\n\\n    function setUPCAddress(address addr) public onlyOwner {\\n        upcAddress = addr;\\n\\n        stakingAmountLimit = 10 ** 6 * 10 ** 5;\\n\\n        emit SetUPCAddress(addr);\\n    }\\n\\n\\n    function setStakingPeriod(uint id, StakingPeriod[] memory periods) public onlyOwner {\\n        for (uint i = 0; i < stakingInfos[id].periods.length; i++) {\\n            stakingInfos[id].periods.pop();\\n        }\\n\\n        for (uint i = 0; i < periods.length; i++) {\\n            stakingInfos[id].periods.push(periods[i]);\\n        }\\n\\n        emit SetStakingPeriod(id, periods);\\n    }\\n\\n    function setStakingLimit(uint limit) public onlyOwner {\\n        stakingAmountLimit = limit;\\n    }\\n\\n    function setReferralFee(uint fee) public onlyOwner {\\n        require(fee <= 100, \\\"Referral Fee should be less than 100%.\\\");\\n\\n        referralFee = fee;\\n    }\\n\\n    function randomString(uint size) private view returns(string memory){\\n        bytes memory randomWord = new bytes(size);\\n        // since we have 26 letters\\n        bytes memory chars = new bytes(26);\\n        chars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\";\\n        for (uint i = 0; i < size; i++) {\\n            uint randomNumber=random(26, i);\\n            // Index access for string is not possible\\n            randomWord[i] = chars[randomNumber];\\n        }\\n        return string(randomWord);\\n    }\\n\\n    function random(uint number, uint randomIndex) public view returns(uint){\\n        return uint(keccak256(abi.encodePacked(block.timestamp,block.prevrandao,  \\n        msg.sender,randomIndex))) % number;\\n    }\\n\\n    function pushRecord(address staker, uint amount, uint stakedAt, uint stakingInfoID, string memory referralCode) public onlyOwner {\\n        records.push(StakingRecord(staker, amount, stakedAt, false, stakingInfoID, referralCode, false));\\n\\n        emit Stake(records.length - 1, staker, amount, stakedAt, stakingInfoID, referralCode, finalClaimableAmount(records.length - 1), referralAmount(records.length - 1));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingPeriod.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nstruct StakingPeriod {\\n    uint from;\\n    uint to;\\n}\"\r\n    },\r\n    \"contracts/StakingRateInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./StakingPeriod.sol\\\";\\n\\nstruct StakingRateInfo {\\n    uint day;\\n    uint apy;\\n    StakingPeriod[] periods;\\n}\"\r\n    },\r\n    \"contracts/StakingRecord.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nstruct StakingRecord {\\n    address staker;\\n    uint amount;\\n    uint stakedAt;\\n    bool claimed;\\n    uint stakingRateInfoID;\\n    string referralCode;\\n    bool claimedReferralFee;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimReferralFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"GenerateReferralCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StakingPeriod[]\",\"name\":\"periods\",\"type\":\"tuple[]\"}],\"name\":\"SetStakingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upcAddress\",\"type\":\"address\"}],\"name\":\"SetUPCAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingInfoID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralReward\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"finalClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isStakablePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingInfoID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"pushRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomIndex\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingRateInfoID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"claimedReferralFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"referralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setStakingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingPeriod[]\",\"name\":\"periods\",\"type\":\"tuple[]\"}],\"name\":\"setStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setUPCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingInfoID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}