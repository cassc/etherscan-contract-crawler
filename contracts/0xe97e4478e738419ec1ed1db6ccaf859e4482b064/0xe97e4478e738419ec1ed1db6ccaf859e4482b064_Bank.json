{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVerifier {\r\n    function verifyProof(bytes calldata _proof, uint256[] calldata _publicInputs) external returns (bool);\r\n}\r\n\r\ncontract BankFactory {\r\n    mapping(address => address) public bankRegistry;\r\n    IVerifier public depositVerifier;\r\n    IVerifier public transferVerifier;\r\n    IVerifier public withdrawVerifier;\r\n    IVerifier public lockVerifier;\r\n    IVerifier public processVerifier;\r\n\r\n    event BankCreated(address indexed token, address bankAddress);\r\n\r\n    constructor(address _depositVerifier, address _transferVerifier, address _withdrawVerifier, address _lockVerifier, address _processVerifier) {\r\n        depositVerifier = IVerifier(_depositVerifier);\r\n        transferVerifier = IVerifier(_transferVerifier);\r\n        withdrawVerifier = IVerifier(_withdrawVerifier);\r\n        lockVerifier = IVerifier(_lockVerifier);\r\n        processVerifier = IVerifier(_processVerifier);\r\n    }\r\n\r\n    function createBank(address token) external {\r\n        require(bankRegistry[token] == address(0), \"Bank already exists for token\");\r\n        Bank newBank = new Bank(token, address(depositVerifier), address(transferVerifier), address(withdrawVerifier), address(lockVerifier), address(processVerifier));\r\n        bankRegistry[token] = address(newBank);\r\n        emit BankCreated(token, address(newBank));\r\n    }\r\n}\r\n\r\ncontract Bank {\r\n    address public token;\r\n    IVerifier private depositVerifier;\r\n    IVerifier private transferVerifier;\r\n    IVerifier private withdrawVerifier;\r\n    IVerifier private lockVerifier;\r\n    IVerifier private processVerifier;\r\n\r\n    constructor(address _token, address _depositVerifier, address _transferVerifier, address _withdrawVerifier, address _lockVerifier, address _processVerifier) {\r\n        token = _token;\r\n        depositVerifier = IVerifier(_depositVerifier);\r\n        transferVerifier = IVerifier(_transferVerifier);\r\n        withdrawVerifier = IVerifier(_withdrawVerifier);\r\n        lockVerifier = IVerifier(_lockVerifier);\r\n        processVerifier = IVerifier(_processVerifier);\r\n    }\r\n\r\n    function initiateDeposit(uint256 amount, bytes calldata proof) external {\r\n        bool validDeposit = depositVerifier.verifyProof(proof, new uint256[](0));\r\n        require(validDeposit, \"Invalid deposit proof\");\r\n    }\r\n\r\n    function initiateTransfer(address recipient, uint256 amount, bytes calldata proof) external {\r\n        bool validTransfer = transferVerifier.verifyProof(proof, new uint256[](0));\r\n        require(validTransfer, \"Invalid transfer proof\");\r\n    }\r\n\r\n    function initiateWithdraw(address to, uint256 amount, bytes calldata proof) external {\r\n        bool validWithdraw = withdrawVerifier.verifyProof(proof, new uint256[](0));\r\n        require(validWithdraw, \"Invalid withdraw proof\");\r\n    }\r\n\r\n    function finalizeDeposit(bytes calldata proof) external {\r\n        bool validDepositFinalization = processVerifier.verifyProof(proof, new uint256[](0));\r\n        require(validDepositFinalization, \"Invalid deposit finalization proof\");\r\n    }\r\n\r\n    function finalizeTransfer(bytes calldata proof) external {\r\n        bool validTransferFinalization = processVerifier.verifyProof(proof, new uint256[](0));\r\n        require(validTransferFinalization, \"Invalid transfer finalization proof\");\r\n    }\r\n\r\n    function activateLock(bytes calldata proof) external {\r\n        bool validLockActivation = lockVerifier.verifyProof(proof, new uint256[](0));\r\n        require(validLockActivation, \"Invalid lock activation proof\");\r\n    }\r\n\r\n    function releaseLock(bytes calldata proof) external {\r\n        bool validLockRelease = lockVerifier.verifyProof(proof, new uint256[](0));\r\n        require(validLockRelease, \"Invalid lock release proof\");\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_processVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"activateLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"finalizeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"initiateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"releaseLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Bank", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006304c96e12e4d0e86d52bfa23dc4ab4fe18806680000000000000000000000007ca68aa7600cb54b36416dc34ee4c282f2bde8b50000000000000000000000005f29c03b148a6257cb394877c3cffdf6d40d968e000000000000000000000000349b246b5f6019313efe64e1d5d2484161cbc0a80000000000000000000000008e996d4c095540f4a8768d53aff101467216554a0000000000000000000000007ca68aa7600cb54b36416dc34ee4c282f2bde8b5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://017ed98a4bcbb5c1233ee1387963e3dd9e74f59d8f7480b9e12232f4c2ee0052"}