{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ApproveTransferUpdated(address extension);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    /**\\n     * @dev Set the default approve transfer contract location.\\n     */\\n    function setApproveTransfer(address extension) external; \\n\\n    /**\\n     * @dev Get the default approve transfer contract location.\\n     */\\n    function getApproveTransfer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/AuctionDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"./PolyOneDrop.sol\\\";\\nimport \\\"../interfaces/IPolyOneDrop.sol\\\";\\n\\n/**\\n * @title PolyOne Auction Drop\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Implements the functionality required for English Auctions in the PolyOne contract ecosystem\\n */\\ncontract AuctionDrop is IPolyOneDrop, PolyOneDrop {\\n  mapping(uint256 dropId => mapping(uint256 tokenIndex => Bid currentBid)) public highestBid;\\n\\n  constructor(address _polyOneCore) PolyOneDrop(_polyOneCore) {}\\n\\n  function registerPurchaseIntent(\\n    uint256 _dropId,\\n    uint256 _tokenIndex,\\n    address _bidder,\\n    uint256 _amount,\\n    bytes calldata\\n  ) external payable onlyPolyOneCore returns (bool, address, string memory, Royalties memory) {\\n    Drop storage drop = _validatePurchaseIntent(_dropId, _tokenIndex);\\n    Bid memory currentBid = highestBid[_dropId][_tokenIndex];\\n    uint256 minimumBid = currentBid.amount == 0 ? drop.startingPrice : currentBid.amount + drop.bidIncrement;\\n\\n    if (_amount < minimumBid) {\\n      revert InvalidPurchasePrice(_amount);\\n    }\\n\\n    if (currentBid.amount != 0) {\\n      polyOneCore.transferEth(currentBid.bidder, currentBid.amount);\\n    }\\n\\n    highestBid[_dropId][_tokenIndex] = Bid(_bidder, _amount);\\n\\n    uint64 bidExtensionTime = polyOneCore.bidExtensionTime();\\n\\n    if (drop.startDate + drop.dropLength - block.timestamp < bidExtensionTime) {\\n      drop.dropLength += bidExtensionTime;\\n      emit DropExtended(_dropId, drop.dropLength);\\n    }\\n\\n    return (false, drop.collection, \\\"\\\", drop.royalties);\\n  }\\n\\n  function validateTokenClaim(\\n    uint256 _dropId,\\n    uint256 _tokenIndex,\\n    address _caller,\\n    bytes calldata\\n  ) external onlyPolyOneCore returns (address, string memory, Bid memory, Royalties memory) {\\n    if (!listingEnded(_dropId, _tokenIndex)) {\\n      revert DropInProgress(_dropId);\\n    }\\n    if (claimed[_dropId][_tokenIndex]) {\\n      revert TokenAlreadyClaimed(_dropId, _tokenIndex);\\n    }\\n    Bid memory currentBid = highestBid[_dropId][_tokenIndex];\\n    if (currentBid.bidder != _caller && !_validateDelegatedClaim(_dropId, _caller)) {\\n      revert InvalidClaim(_dropId, _tokenIndex, _caller);\\n    }\\n    claimed[_dropId][_tokenIndex] = true;\\n    return (drops[_dropId].collection, drops[_dropId].baseTokenURI, currentBid, drops[_dropId].royalties);\\n  }\\n\\n  function listingActive(uint256 _dropId, uint256) external view returns (bool) {\\n    return\\n      PolyOneLibrary.isDateInPast(drops[_dropId].startDate) &&\\n      !PolyOneLibrary.isDateInPast(drops[_dropId].startDate + drops[_dropId].dropLength);\\n  }\\n\\n  function listingEnded(uint256 _dropId, uint256) public view returns (bool) {\\n    return PolyOneLibrary.isDateInPast(drops[_dropId].startDate + drops[_dropId].dropLength);\\n  }\\n\\n  function listingClaimed(uint256 _dropId, uint256 _tokenIndex) external view returns (bool) {\\n    return claimed[_dropId][_tokenIndex];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/PolyOneCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/**\\n * @title Interface for PolyOneCreator\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Interface for the PolyOneCreator Proxy contract\\n */\\ninterface IPolyOneCreator {\\n  /**\\n   * @notice The original creator of the contract. This is the only address that can reclaim ownership of the contract from PolyOneCore\\n   * @return The address of the creator\\n   */\\n  function creator() external view returns (address);\\n\\n  /**\\n   * @notice The address of the Manifold implementation contract (ERC721CreatorImplementation or ERC1155CreatorImplementation)\\n   * @return The address of the implementation contract\\n   */\\n  function implementation() external view returns (address);\\n}\\n\\n/**\\n * @title PolyOneCreator\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @custom:contributor manifoldxyz (manifold.xyz)\\n * @notice Deployable Proxy contract that delagates implementation to Manifold Core and registers the PolyOneCore contract as administrator\\n */\\ncontract PolyOneCreator is Proxy, IPolyOneCreator {\\n  address public immutable creator;\\n\\n  /**\\n   * @param _name The name of the collection\\n   * @param _symbol The symbol for the collection\\n   * @param _implementationContract The address of the Manifold implementation contract (ERC721CreatorImplementation or ERC1155CreatorImplementation)\\n   * @param _polyOneCore The address of the PolyOneCore contract\\n   * @param _operatorFilter The address of the OpenSea Filter Registry contract\\n   */\\n  constructor(string memory _name, string memory _symbol, address _implementationContract, address _polyOneCore, address _operatorFilter) {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = _implementationContract;\\n\\n    require(_implementationContract != address(0), \\\"Implementation cannot be 0x0\\\");\\n    require(_implementationContract.code.length > 0, \\\"Implementation must be a contract\\\");\\n    (bool initSuccess, ) = _implementationContract.delegatecall(abi.encodeWithSignature(\\\"initialize(string,string)\\\", _name, _symbol));\\n    require(initSuccess, \\\"Initialization failed\\\");\\n\\n    require(_operatorFilter != address(0), \\\"Operator Filter cannot be 0x0\\\");\\n    require(_operatorFilter.code.length > 0, \\\"Operator Filter must be a contract\\\");\\n    (bool approveOpenSeaSuccess, ) = _implementationContract.delegatecall(\\n      abi.encodeWithSignature(\\\"setApproveTransfer(address)\\\", _operatorFilter)\\n    );\\n    require(approveOpenSeaSuccess, \\\"OpenSea Registry approval failed\\\");\\n\\n    require(_polyOneCore != address(0), \\\"PolyOneCore cannot be 0x0\\\");\\n    require(_polyOneCore.code.length > 0, \\\"PolyOneCore must be a contract\\\");\\n    (bool approvePolyOneSuccess, ) = _implementationContract.delegatecall(\\n      abi.encodeWithSignature(\\\"transferOwnership(address)\\\", _polyOneCore)\\n    );\\n    require(approvePolyOneSuccess, \\\"PolyOneCore transfer failed\\\");\\n\\n    creator = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  function implementation() public view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function _implementation() internal view override returns (address) {\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/PolyOneDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../implementations/PolyOneCreator.sol\\\";\\nimport \\\"../interfaces/IPolyOneCore.sol\\\";\\nimport \\\"../interfaces/IPolyOneDrop.sol\\\";\\nimport \\\"../libraries/PolyOneLibrary.sol\\\";\\n\\n/**\\n * @title PolyOneDrop\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Partial abstract implementation of shared functionality for drop contracts\\n */\\nabstract contract PolyOneDrop is IPolyOneDrop, ERC165 {\\n  IPolyOneCore public polyOneCore;\\n\\n  mapping(uint256 dropId => Drop dropParameters) public drops;\\n  mapping(uint256 dropId => mapping(uint256 tokenIndex => bool isClaimed)) public claimed;\\n\\n  constructor(address _polyOneCore) {\\n    PolyOneLibrary.checkZeroAddress(_polyOneCore, \\\"poly one core\\\");\\n    polyOneCore = IPolyOneCore(_polyOneCore);\\n  }\\n\\n  function createDrop(uint256 _dropId, Drop calldata _drop, bytes calldata) external onlyPolyOneCore {\\n    PolyOneLibrary.checkZeroAddress(_drop.collection, \\\"collection\\\");\\n    if (_dropExists(_dropId)) {\\n      revert DropAlreadyExists(_dropId);\\n    }\\n    if (PolyOneLibrary.isDateInPast(_drop.startDate)) {\\n      revert InvalidDate(_drop.startDate);\\n    }\\n\\n    drops[_dropId] = _drop;\\n  }\\n\\n  function updateDrop(uint256 _dropId, Drop calldata _drop, bytes calldata) external onlyPolyOneCore {\\n    if (!_dropExists(_dropId)) {\\n      revert DropNotFound(_dropId);\\n    }\\n    if (PolyOneLibrary.isDateInPast(drops[_dropId].startDate)) {\\n      revert DropInProgress(_dropId);\\n    }\\n    if (PolyOneLibrary.isDateInPast(_drop.startDate)) {\\n      revert InvalidDate(_drop.startDate);\\n    }\\n\\n    drops[_dropId] = Drop(\\n      _drop.startingPrice,\\n      _drop.bidIncrement,\\n      _drop.qty,\\n      _drop.startDate,\\n      _drop.dropLength,\\n      drops[_dropId].collection,\\n      _drop.baseTokenURI,\\n      _drop.royalties\\n    );\\n  }\\n\\n  function updateDropRoyalties(uint256 _dropId, Royalties calldata _royalties) external onlyPolyOneCore {\\n    if (!_dropExists(_dropId)) {\\n      revert DropNotFound(_dropId);\\n    }\\n    if (PolyOneLibrary.isDateInPast(drops[_dropId].startDate)) {\\n      revert DropInProgress(_dropId);\\n    }\\n\\n    drops[_dropId].royalties = _royalties;\\n  }\\n\\n  /**\\n   * @dev Validate the purchase intent of a token in a drop\\n   * @param _dropId The drop id\\n   * @param _tokenIndex The index of the token in the drop\\n   * @return The drop in storage\\n   */\\n  function _validatePurchaseIntent(uint256 _dropId, uint256 _tokenIndex) internal view returns (Drop storage) {\\n    if (!_dropExists(_dropId)) {\\n      revert DropNotFound(_dropId);\\n    }\\n    Drop storage drop = drops[_dropId];\\n    if (_tokenIndex == 0 || _tokenIndex > drop.qty) {\\n      revert TokenNotFoundInDrop(_dropId, _tokenIndex);\\n    }\\n    if (claimed[_dropId][_tokenIndex]) {\\n      revert TokenAlreadyClaimed(_dropId, _tokenIndex);\\n    }\\n    if (!PolyOneLibrary.isDateInPast(drop.startDate)) {\\n      revert DropNotStarted(_dropId);\\n    }\\n    if (PolyOneLibrary.isDateInPast(drop.startDate + drop.dropLength)) {\\n      revert DropFinished(_dropId);\\n    }\\n    return drop;\\n  }\\n\\n  /**\\n   * @dev Check if a drop has been previously created on this contract\\n   */\\n  function _dropExists(uint256 _dropId) internal view returns (bool) {\\n    return drops[_dropId].collection != address(0);\\n  }\\n\\n  /**\\n   * @dev Validate a claim on behalf of a claimant\\n   *      This should allow the creator or an admin of PolyOneCore to initiate the claim process\\n   * @param _dropId The id of the drop to validate\\n   * @param _caller The address of the caller\\n   * @return True if the claim is valid\\n   */\\n  function _validateDelegatedClaim(uint256 _dropId, address _caller) internal view returns (bool) {\\n    return\\n      (polyOneCore.hasRole(polyOneCore.POLY_ONE_ADMIN_ROLE(), _caller)) || _caller == IPolyOneCreator(drops[_dropId].collection).creator();\\n  }\\n\\n  /**\\n   * @dev Functions with the onlyPolyOneCore modifier attached should only be callable by the PolyOne Core contract\\n   */\\n  modifier onlyPolyOneCore() {\\n    if (msg.sender != address(polyOneCore)) {\\n      revert PolyOneLibrary.InvalidCaller(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IPolyOneDrop).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPolyOneCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"../interfaces/IPolyOneDrop.sol\\\";\\n\\n/**\\n * @title Interface for PolyOne Core\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Performs core functionality to faciliate the creation of drops, listings and administrative functions\\n */\\ninterface IPolyOneCore is IAccessControl {\\n  /**\\n   * @dev Structure of the parameters required for the registering of a new collection\\n   * @param registered Whether the collection is registered\\n   * @param isERC721 Whether the collection is an ERC721 (true) or ERC1155 (false)\\n   */\\n  struct Collection {\\n    bool registered;\\n    bool isERC721;\\n  }\\n\\n  /**\\n   * @dev Structure of a signature request for an action by a PolyOne Creator\\n   * @param signature The signature of the request\\n   * @param timestamp The timestamp of the signature\\n   */\\n  struct SignedRequest {\\n    bytes signature;\\n    uint256 timestamp;\\n  }\\n\\n  /**\\n   * @notice Thrown if a contract address is already registered\\n   * @param contractAddress The address of the contract\\n   */\\n  error AddressAlreadyRegistered(address contractAddress);\\n\\n  /**\\n   * @notice Thrown if a collection was expected to be registered but currently isn't\\n   * @param collection The address of the collection contract\\n   */\\n  error CollectionNotRegistered(address collection);\\n\\n  /**\\n   * @notice Thrown if an unregistered contract is being used to create a drop\\n   * @param dropContract The address of the unregistered contract\\n   */\\n  error DropContractNotRegistered(address dropContract);\\n\\n  /**\\n   * @dev Thrown if a transfer of eth fails\\n   * @param destination The intented recipient\\n   * @param amount The amount of eth to be transferred\\n   */\\n  error EthTransferFailed(address destination, uint256 amount);\\n\\n  /**\\n   * @dev Thrown if attempting to transfer an invalid eth amount\\n   */\\n  error InvalidEthAmount();\\n\\n  /**\\n   * @dev Thrown if attempting to interact with a collection that is not of the expected type\\n   * @param collection The address of the collection contract\\n   */\\n  error CollectionTypeMismatch(address collection);\\n\\n  /**\\n   * @dev Thrown if attempting to create or update a drop with invalid royalty settings\\n   */\\n  error InvalidRoyaltySettings();\\n\\n  /**\\n   * @dev Thrown if attempting to create or update a drop with invalid PolyOne fee settings\\n   */\\n  error InvalidPolyOneFee();\\n\\n  /**\\n   * @dev Thrown if attempting to create or udpate a drop without including the PolyOne fee wallet\\n   */\\n  error FeeWalletNotIncluded();\\n\\n  /**\\n   * @dev Thrown if an arbitrary call to a collection contract fails\\n   * @param error The error thrown by the contract being called\\n   */\\n  error CallCollectionFailed(bytes error);\\n\\n  /**\\n   * @notice Emitted when a creator is allowed to access the PolyOne contract ecosystem\\n   * @param creator address of the creator\\n   */\\n  event CreatorAllowed(address indexed creator);\\n\\n  /**\\n   * @dev Thrown if an invalid signature has been used as a parameter for a function requiring signature validation\\n   */\\n  error InvalidSignature();\\n\\n  /**\\n   * @dev Thrown if a signature that has already being used is used again\\n   */\\n  error SignatureAlreadyUsed();\\n\\n  /**\\n   * @notice Emitted when a creator is revoked access to the PolyOne contract ecosystem\\n   * @param creator address of the creator\\n   */\\n  event CreatorRevoked(address indexed creator);\\n\\n  /**\\n   * @notice Emitted when a drop contract is registered\\n   * @param dropContract The address of the drop contract implementation\\n   */\\n  event DropContractRegistered(address indexed dropContract);\\n\\n  /**\\n   * @notice Emitted when a new token collection is registered\\n   * @param collection The address of the collection contract\\n   * @param creator The address of the creator who owns the contract\\n   * @param isERC721 Whether the collection is an ERC721 (true) or ERC1155 (false)\\n   */\\n  event CollectionRegistered(address indexed collection, address indexed creator, bool isERC721);\\n\\n  /**\\n   * @notice Emitted when a new drop is created for a collection\\n   * @param dropContract The address of the drop contract for which the drop was created\\n   * @param dropId the id of the newly created drop\\n   */\\n  event DropCreated(address indexed dropContract, uint256 dropId);\\n\\n  /**\\n   * @notice Emitted when a purchase intent is created for an auction or fixed price drop\\n   * @param dropContract The address of the drop contract for which the purchase intent was created\\n   * @param dropId The id of the drop for which the purchase intent was created\\n   * @param tokenIndex The index of the token in the drop for which the purchase intent was created\\n   * @param bidder The address of the bidder who registered the purchase intent\\n   * @param amount The amount of the purchase\\n   */\\n  event PurchaseIntentRegistered(address indexed dropContract, uint256 dropId, uint256 tokenIndex, address indexed bidder, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when a token is claimed by a claimant\\n   * @param collection The address of the token contract\\n   * @param tokenId The id of the newly minted token\\n   * @param dropId The id of the drop from which the token was minted\\n   * @param tokenIndex The index of the token in the drop\\n   * @param claimant The address of the claimant\\n   */\\n  event TokenClaimed(address indexed collection, uint256 tokenId, uint256 dropId, uint256 tokenIndex, address indexed claimant);\\n\\n  /**\\n   * @notice Emitted when an existing drop is updated\\n   * @param dropContract The address of the drop contract for which teh drop was updated\\n   * @param _dropId The id of the drop that was updated\\n   */\\n  event DropUpdated(address indexed dropContract, uint256 _dropId);\\n\\n  /**\\n   * @notice Emitted when the PolyOne primary fee wallet is updated\\n   * @param feeWallet The new PolyOne primary fee wallet\\n   */\\n  event PrimaryFeeWalletUpdated(address feeWallet);\\n\\n  /**\\n   * @notice Emitted when the PolyOne secondary fee wallet is updated\\n   * @param feeWallet The new PolyOne secondary fee wallet\\n   */\\n  event SecondaryFeeWalletUpdated(address feeWallet);\\n\\n  /**\\n   * @notice Emitted when the PolyOne default primary or secondary fees are updated\\n   * @param primaryFee The new primary sale fee\\n   * @param secondaryFee The new secondary sale fee\\n   */\\n  event DefaultFeesUpdated(uint16 primaryFee, uint16 secondaryFee);\\n\\n  /**\\n   * @notice Emitted when the PolyOne authorised signer address is updated\\n   * @param signer The address of the authorised signer\\n   */\\n  event RequestSignerUpdated(address indexed signer);\\n\\n  /**\\n   * @notice Emitted when a collection contract is called with arbitrary calldata\\n   * @param collection The address of the collection contract\\n   * @param caller The address of the caller\\n   * @param data The data passed to the collection contract\\n   */\\n  event CollectionContractCalled(address indexed collection, address indexed caller, bytes data);\\n\\n  /**\\n   * @notice Emitted when ether is transferred to a destination account\\n   * @param destination The address of the destination account\\n   * @param amount The amount of ether transferred\\n   */\\n  event EthTransferred(address indexed destination, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when the bid extension time is updated by an admin\\n   * @param bidExtensionTime The new bid extension time\\n   */\\n  event BidExtensionTimeUpdated(uint256 bidExtensionTime);\\n\\n  /**\\n   * @notice Allow a creator to access the PolyOne contract ecosystem\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {CreatorAllowed} event\\n   * @param _creator address of the creator\\n   */\\n  function allowCreator(address _creator) external;\\n\\n  /**\\n   * @notice Revoke creator access from the PolyOne contract ecosystem\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {CreatorRevoked} event\\n   * @param _creator address of the creator\\n   */\\n  function revokeCreator(address _creator) external;\\n\\n  /**\\n   * @notice Register a new drop contract implementation to be used for Poly One token drops\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {DropContractRegistered} event\\n   *      _dropContract must implement the IPolyOneDrop interface\\n   * @param _dropContract The address of the drop contract implementation\\n   */\\n  function registerDropContract(address _dropContract) external;\\n\\n  /**\\n   * @notice Register an ERC721 or ERC1155 collection to the PolyOne ecosystem\\n   * @dev The contract must extend the ERC721Creator or ERC1155Creator contracts to be compatible.\\n   *      Only callable by the POLY_ONE_CREATOR_ROLE, and caller must be the contract owner.\\n   *      The PolyOneCore contract must be assigned as an admin in the collection contract.\\n   *      Emits a {CollectionRegistered} event.\\n   * @param _collection The address of the token contract to register\\n   * @param _isERC721 Is the contract an ERC721 standard (true) or ERC1155 (false)\\n   * @param _signedRequest A signed request to allow the creator to register the collection\\n   */\\n  function registerCollection(address _collection, bool _isERC721, SignedRequest calldata _signedRequest) external;\\n\\n  /**\\n   * @notice Create a new drop for an already registered collection and tokens that are already minted\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   *      Caller must be assigned as the owner of the contract in the PolyOneCore contract\\n   *      Emits a {DropCreated} event\\n   * @param _dropContract The implementation contract for the drop to be created\\n   * @param _drop The drop parameters (see {NewDrop} struct)\\n   * @param _signedRequest A signed request to allow the creator to create the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * */\\n  function createDrop(\\n    address _dropContract,\\n    IPolyOneDrop.Drop memory _drop,\\n    SignedRequest calldata _signedRequest,\\n    bytes calldata _data\\n  ) external;\\n\\n  /**\\n   * @notice Update an existing drop.\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   *      Caller must be assigned as the owner of the contract in the PolyOneCore contract\\n   *      Emits a {DropUpdated} event\\n   *      The collection address will be excluded from the update\\n   *      The drop must not have started yet\\n   * @param _dropId The id of the previously created drop to update\\n   * @param _dropContract The address of the drop contract to which the drop is registered\\n   * @param _drop The updated drop information (not that collection address will be excluded)\\n   * @param _signedRequest A signed request to allow the creator to update the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   */\\n  function updateDrop(\\n    uint256 _dropId,\\n    address _dropContract,\\n    IPolyOneDrop.Drop memory _drop,\\n    SignedRequest calldata _signedRequest,\\n    bytes calldata _data\\n  ) external;\\n\\n  /**\\n   * @notice Update the royalties\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   *      Emits a {DropUpdatedEvent}\\n   *      The drop must not have started yet\\n   *      Only the total of saleReceivers are validated, there is not validation that PolyOne fees are included\\n   * @param _dropId The id of the previously created drop to update\\n   * @param _dropContract The address of the drop contract to which the drop is registered\\n   * @param _royalties The updated royalties information\\n   */\\n  function updateDropRoyalties(uint256 _dropId, address _dropContract, IPolyOneDrop.Royalties memory _royalties) external;\\n\\n  /**\\n   * @notice Register a bid for an existing drop\\n   * @dev Will call to an external contract for the bidding implementation depending on the drop type\\n   *      Emits a {PurchaseIntentRegistered} event\\n   * @param _dropId The id of the drop to register a bid for\\n   * @param _dropContract The contract for the type of drop to claim a token from\\n   * @param _tokenIndex The index of the token in the drop to bid on\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @param _useAsyncTransfer If true, async transfer will be used for funds distribution instead of a direct call\\n   */\\n  function registerPurchaseIntent(\\n    uint256 _dropId,\\n    address _dropContract,\\n    uint256 _tokenIndex,\\n    bytes calldata _data,\\n    bool _useAsyncTransfer\\n  ) external payable;\\n\\n  /**\\n   * @notice Claim a token that has been won in an auction style drop\\n   * @dev This will always revert for fixed price (instant) style drops as the token has already been claimed\\n   *      Only callable by the winner of the sale\\n   * @param _dropId The id of the drop to claim a token from\\n   * @param _dropContract The contract for the type of drop to claim a token from\\n   * @param _tokenIndex The index in the drop of the token to claim\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @param _useAsyncTransfer If true, async transfer will be used for funds distribution instead of a direct call\\n   */\\n  function claimToken(uint256 _dropId, address _dropContract, uint256 _tokenIndex, bytes calldata _data, bool _useAsyncTransfer) external;\\n\\n  /**\\n   * @notice Mint new tokens to an existing registered ERC721 collection.\\n   *         This can be called by the creator of the collection to mint individual tokens that are not listed\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   * @param _collection The address of the collection to mint the token for\\n   * @param _recipient The recipient of the tokens\\n   * @param _qty The number of tokens being minted\\n   * @param _baseTokenURI The base tokenURI the tokens to be minted\\n   * @param _royaltyReceivers The addresses to receive seconary royalties (not including PolyOne fees)\\n   * @param _royaltyBasisPoints The percentage of royalties for each wallet to receive (in bps)\\n   */\\n  function mintTokensERC721(\\n    address _collection,\\n    address _recipient,\\n    uint256 _qty,\\n    string calldata _baseTokenURI,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @notice Mint new tokens to an existing registered ERC1155 collection.\\n   *         This can be called by the creator of the collection to mint individual tokens that are not listed\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   * @param _collection The address of the collection to mint the token for\\n   * @param _tokenURIs The base tokenURI for each new token to be minted\\n   * @param _tokenIds The ids of the tokens to mint\\n   * @param _royaltyReceivers The addresses to receive seconary royalties (not including PolyOne fees)\\n   * @param _royaltyBasisPoints The percentage of royalties for each wallet to receive (in bps)\\n   * @param _receivers The addresses to mint tokens to\\n   * @param _amounts The amounts of tokens to mint to each address\\n   * @param _existingTokens Is the set of tokens already existing in the collection (true) or a new batch of tokens (false). Cannot be mixed\\n   */\\n  function mintTokensERC1155(\\n    address _collection,\\n    string[] calldata _tokenURIs,\\n    uint256[] calldata _tokenIds,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints,\\n    address[] calldata _receivers,\\n    uint256[] calldata _amounts,\\n    bool _existingTokens\\n  ) external;\\n\\n  /**\\n   * @notice Make an arbitrary contract call to the collection contract\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {CollectionContractCalled} event\\n   * @param _data The data to call the collection contract with\\n   */\\n  function callCollectionContract(address _collection, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Mapping of drop contracts to whether they are registered\\n   * @param _dropContract The address of the drop contract\\n   * @return A boolean indicating whether the drop contract is registered\\n   */\\n  function dropContracts(address _dropContract) external view returns (bool);\\n\\n  /**\\n   * @notice Mapping of token contract addresses to their collection data\\n   * @param _collection The address of the collection token contract\\n   * @return registered Whether the collection is registered\\n   * @return isERC721 Whether the collection is an ERC721 (true) or ERC1155 (false)\\n   */\\n  function collections(address _collection) external view returns (bool registered, bool isERC721);\\n\\n  /**\\n   * @notice Mapping of dropIds to the tokenId assigned to the drop for ERC1155 mints to differentiate between new and existing mint cases\\n   * @param _dropId The id of the drop to get the token id for\\n   * @return The tokenId assigned to the drop\\n   */\\n  function dropTokenIds(uint256 _dropId) external view returns (uint256);\\n\\n  /**\\n   * @notice The number of drops that have been created. This counter is used to create incremental ids for each new drop registered\\n   * @dev The counter is incremented before the new drop is created, hence the first drop is always 1\\n   */\\n  function dropCounter() external view returns (uint256);\\n\\n  /**\\n   * @notice The PolyOne fee wallet to collection primary and secondary sales\\n   */\\n  function primaryFeeWallet() external view returns (address payable);\\n\\n  /**\\n   * @notice The PolyOne fee wallet to collection primary and secondary sales\\n   */\\n  function secondaryFeeWallet() external view returns (address payable);\\n\\n  /**\\n   * @notice The PolyOne authorized request signer\\n   */\\n  function requestSigner() external view returns (address);\\n\\n  /**\\n   * @notice The default primary sale fee to apply to new collections and drops (in bps)\\n   */\\n  function defaultPrimaryFee() external view returns (uint16);\\n\\n  /**\\n   * @notice The default secondary sale fee to apply to new collections and drops (in bps)\\n   */\\n  function defaultSecondaryFee() external view returns (uint16);\\n\\n  /**\\n   * @notice The bid extension time for auction style drops (in seconds)\\n   */\\n  function bidExtensionTime() external view returns (uint64);\\n\\n  /**\\n   * @notice A mapping of used signatures to prevent replay attacks\\n   * @param _signature The signature to check\\n   */\\n  function usedSignatures(bytes memory _signature) external view returns (bool);\\n\\n  /**\\n   * @notice Set the address for PolyOne fees from primary sales to be sent to\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _feeWallet The new fee wallet\\n   */\\n  function setPrimaryFeeWallet(address payable _feeWallet) external;\\n\\n  /**\\n   * @notice Set the address for PolyOne fees from secondary sales to be sent to\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _feeWallet The new fee wallet\\n   */\\n  function setSecondaryFeeWallet(address payable _feeWallet) external;\\n\\n  /**\\n   * @notice Set the default primary fee that is applied to new collections\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _newFee The new fee to set\\n   */\\n  function setDefaultPrimaryFee(uint16 _newFee) external;\\n\\n  /**\\n   * @notice Set the default secondary fee that is applied to new collection\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _newFee The new fee to set\\n   */\\n  function setDefaultSecondaryFee(uint16 _newFee) external;\\n\\n  /**\\n   * @notice Set the bid extension time for auction style drops\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   *      Emits a {BidExtensionTimeUpdated} event\\n   * @param _newBidExtensionTime The new bid extension time to set\\n   */\\n  function setBidExtensionTime(uint64 _newBidExtensionTime) external;\\n\\n  /**\\n   * @notice Set the authorised signer for the contract\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   *      Emits a {AuthorisedSignerUpdated} event\\n   * @param _signer The address to set as the authorised signer\\n   */\\n  function setRequestSigner(address _signer) external;\\n\\n  /**\\n   * @notice Initiates an async transfer for an ether amount to a destination address\\n   * @dev Only callable by registered PolyOneDrop contracts\\n   *      Emits an Escrow {Deposited} event\\n   * @param _destination The address to send the amount to\\n   * @param _amount The amount to send (in wei)\\n   */\\n  function transferEth(address _destination, uint256 _amount) external;\\n\\n  /**\\n   * @notice Poly One Administrators allowed to perform administrative functions\\n   * @return The bytes32 representation of the POLY_ONE_ADMIN_ROLE\\n   */\\n  function POLY_ONE_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Poly One Creators allowed to mint new collections and create listings for their tokens\\n   * @return The bytes32 representation of the POLY_ONE_CREATOR_ROLE\\n   */\\n  function POLY_ONE_CREATOR_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice The maximum default primary fee that can be set by the POLY_ONE_ADMIN_ROLE\\n   * @return The maximum default primary fee\\n   */\\n  function MAX_PRIMARY_FEE() external view returns (uint16);\\n\\n  /**\\n   * @notice The maximum default secondary fee that can be set by the POLY_ONE_ADMIN_ROLE\\n   * @return The maximum default secondary fee\\n   */\\n  function MAX_SECONDARY_FEE() external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPolyOneDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Interface for PolyOne Drop\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Base interface for the creation of PolyOne drop listing contracts\\n */\\ninterface IPolyOneDrop {\\n  /**\\n   * @dev Structure of parameters required for the creation of a new drop\\n   * @param startingPrice The starting price of the drop\\n   * @param bidIncrement The bid increment of the drop (can be left as zero for fixed-price drops)\\n   * @param qty The quantity of tokens in the drop\\n   * @param startDate The start date of the drop (in seconds)\\n   * @param dropLength The length of the drop (in seconds)\\n   * @param collection The address of the collection that the drop was created for\\n   * @param baseTokenURI The tokenURI that the drop will use for the minted token metadata\\n   * @param royalties THe primary and secondary royalties for the drop\\n   */\\n  struct Drop {\\n    uint256 startingPrice;\\n    uint128 bidIncrement;\\n    uint128 qty;\\n    uint64 startDate;\\n    uint64 dropLength;\\n    address collection;\\n    string baseTokenURI;\\n    Royalties royalties;\\n  }\\n\\n  /**\\n   * @dev Structure of parameters required for primary sale and secondary royalties\\n   *      This must include PolyOne's primary sale and secondary royalties\\n   *      The secondary royalties are optional but the primary sale royalties are not (they must total 100% in bps)\\n   * @param royaltyReceivers The addresses of the secondary royalty receivers. The PolyOne fee wallet should be the first in the array\\n   * @param royaltyBasisPoints The basis points of each of the secondary royalty receivers\\n   * @param saleReceivers The addresses of the primary sale receivers. The PolyOne fee wallet should be the first in the array\\n   * @param saleBasisPoints The basis points of each of the primary sale receivers\\n   */\\n  struct Royalties {\\n    address payable[] royaltyReceivers;\\n    uint256[] royaltyBasisPoints;\\n    address payable[] saleReceivers;\\n    uint256[] saleBasisPoints;\\n  }\\n\\n  /**\\n   * @dev Structure of parameters required for a bid on a drop\\n   * @param bidder The address of the bidder\\n   * @param amount The value of the bid in wei\\n   */\\n  struct Bid {\\n    address bidder;\\n    uint256 amount;\\n  }\\n\\n  /**\\n   * @dev Thrown if a drop is being access that does not exist on the drop contract\\n   * @param dropId The id of the drop that does not exist\\n   */\\n  error DropNotFound(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if a token is being accessed that does not exist in a drop (i.e token index out of the drop range)\\n   * @param dropId The id of the drop being accessed\\n   * @param tokenIndex The index of the token being accessed\\n   */\\n  error TokenNotFoundInDrop(uint256 dropId, uint256 tokenIndex);\\n\\n  /**\\n   * @dev Thrown if a drop is being created that already exists on the drop contract\\n   * @param dropId The id of the drop that already exists\\n   */\\n  error DropAlreadyExists(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown when attempting to modify a date that is not permitted (e.g a date in the past)\\n   * @param date The date that is invalid\\n   */\\n  error InvalidDate(uint256 date);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase a drop which has not started yet\\n   * @param dropId The id of the drop\\n   */\\n  error DropNotStarted(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase a drop which has already finished\\n   * @param dropId The id of the drop\\n   */\\n  error DropFinished(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if attempting to claim a drop which has not yet finished\\n   * @param dropId The id of the drop\\n   */\\n  error DropInProgress(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase or bid on a token with an invalid amount\\n   * @param price The price that was attempted to be paid\\n   */\\n  error InvalidPurchasePrice(uint256 price);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase or claim a token that has already been claimed\\n   * @param dropId The id of the drop\\n   * @param tokenIndex The index of the token in the drop\\n   */\\n  error TokenAlreadyClaimed(uint256 dropId, uint256 tokenIndex);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase or claim a token that has already been claimed or is not claimable by the caller\\n   * @param dropId The id of the drop\\n   * @param tokenIndex The index of the token\\n   * @param claimant The address attempting to claim a token\\n   */\\n  error InvalidClaim(uint256 dropId, uint256 tokenIndex, address claimant);\\n\\n  /**\\n   * @dev Emitted when a drop is extended by a bid extension mechanism\\n   * @param dropId The id of the drop that was extended\\n   * @param newDropLength The new length of the drop\\n   */\\n  event DropExtended(uint256 indexed dropId, uint256 newDropLength);\\n\\n  /**\\n   * @notice Registers a new upcoming drop\\n   * @param _dropId The id of the new drop to create\\n   * @param _drop The parameters for the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   */\\n  function createDrop(uint256 _dropId, Drop calldata _drop, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Update an existing drop\\n   * @param _dropId The id of the existing drop\\n   * @param _drop The updated parameters for the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   */\\n  function updateDrop(uint256 _dropId, Drop calldata _drop, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Update the royalties for an existing drop\\n   * @param _dropId The id of the existing drop\\n   * @param _royalties The updated royalties for the drop\\n   */\\n  function updateDropRoyalties(uint256 _dropId, Royalties calldata _royalties) external;\\n\\n  /**\\n   * @notice Register a bid (or intent to purchase) a token from PolyOne\\n   * @dev For fixed price drops, the amount must be equal to the starting price, and the token will be transferred instantly.\\n   *      For auction style drops, the amount must be greater than the starting price.\\n   * @param _dropId The id of the drop to place a purchase for\\n   * @param _tokenIndex The index of the token to purchase in this drop\\n   * @param _bidder The address of the bidder\\n   * @param _amount The amount of the purchase intent (in wei)\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @return instantClaim Whether this should be an instant claim (for fixed priced drop) or not (for auction style drops)\\n   * @return collection The collection address of the new token to be minted (if instant claim is also true)\\n   * @return tokenURI The token URI of the new token to be minted (if instant claim is also true)\\n   * @return royalties The royalties for the new token to be minted (if instant claim is also true)\\n   */\\n  function registerPurchaseIntent(\\n    uint256 _dropId,\\n    uint256 _tokenIndex,\\n    address _bidder,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external payable returns (bool instantClaim, address collection, string memory tokenURI, Royalties memory royalties);\\n\\n  /**\\n   * @notice Validates that a token is allowed to be claimed by the claimant based on the status of the drop\\n   * @dev This will always revert for fixed price drops (where the bid increment is zero)\\n   *      This will return the claim data for fixed price drops if the token has been won by the claimaint and the auction has ended\\n   * @param _dropId The id of the drop to claim a token from\\n   * @param _tokenIndex The index of the token to claim\\n   * @param _caller The address of the claimant\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @return collection The collection address of the new token to be minted\\n   * @return tokenURI The token URI of the new token to be minted\\n   * @return claim The winning claim information (bidder and bid amount)\\n   * @return royalties The royalties for the new token to be minted\\n   */\\n  function validateTokenClaim(\\n    uint256 _dropId,\\n    uint256 _tokenIndex,\\n    address _caller,\\n    bytes calldata _data\\n  ) external returns (address collection, string memory tokenURI, Bid memory claim, Royalties memory royalties);\\n\\n  /**\\n   * @notice Mapping of drop ids to the drop parameters\\n   * @param startingPrice The starting price of the drop\\n   * @param bidIncrement The bid increment of the drop (can be left as zero for fixed-price drops)\\n   * @param qty The quantity of tokens in the drop\\n   * @param startDate The start date of the drop (in seconds)\\n   * @param dropLength The length of the drop (in seconds)\\n   * @param collection The address of the collection that the drop was created for\\n   * @param baseTokenURI The tokenURI that the drop will use for the minted token metadata\\n   * @param royalties THe primary and secondary royalties for the drop\\n   */\\n  function drops(\\n    uint256 _id\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 startingPrice,\\n      uint128 bidIncrement,\\n      uint128 qty,\\n      uint64 startDate,\\n      uint64 dropLength,\\n      address collection,\\n      string memory baseTokenURI,\\n      Royalties memory royalties\\n    );\\n\\n  /**\\n   * @notice Check if there is a currently active listing for a token\\n   * @param _dropId The id of the drop\\n   * @param _tokenIndex The index of the token in the drop\\n   */\\n  function listingActive(uint256 _dropId, uint256 _tokenIndex) external view returns (bool);\\n\\n  /**\\n   * @notice Check if a token was previously listed and it has now ended either due to time or being claimed\\n   * @param _dropId The id of the drop\\n   * @param _tokenIndex The index of the token in the drop\\n   */\\n  function listingEnded(uint256 _dropId, uint256 _tokenIndex) external view returns (bool);\\n\\n  /**\\n   * @notice Check the current claimed status of a listing\\n   * @param _dropId The id of the drop\\n   * @param _tokenIndex The index of the token in the drop\\n   */\\n  function listingClaimed(uint256 _dropId, uint256 _tokenIndex) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PolyOneLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../implementations/PolyOneCreator.sol\\\";\\nimport \\\"../interfaces/IPolyOneDrop.sol\\\";\\n\\n/**\\n * @notice Shared helpers for Poly One contracts\\n */\\nlibrary PolyOneLibrary {\\n  /**\\n   * @dev Thrown whenever a zero-address check fails\\n   * @param field The name of the field on which the zero-address check failed\\n   */\\n  error ZeroAddress(string field);\\n\\n  /**\\n   * @notice Thrown when attempting to validate a collection which is not of the expected ERC721Creator or ERC1155Creator type\\n   */\\n  error InvalidContractType();\\n\\n  /**\\n   * @notice Throw if the caller is not the expected caller\\n   * @param _caller The caller of the function\\n   */\\n  error InvalidCaller(address _caller);\\n\\n  /**\\n   * @notice Thrown if the total sale distribution percentage is not 100\\n   */\\n  error InvalidSaleDistribution();\\n\\n  /**\\n   * @notice Thrown if an array total does not match\\n   */\\n  error ArrayTotalMismatch();\\n\\n  /**\\n   * @notice Check if a field is the zero address, if so revert with the field name\\n   * @param _address The address to check\\n   * @param _field The name of the field to check\\n   */\\n  function checkZeroAddress(address _address, string memory _field) internal pure {\\n    if (_address == address(0)) {\\n      revert ZeroAddress(_field);\\n    }\\n  }\\n\\n  bytes4 constant ERC721_INTERFACE_ID = type(IERC721Metadata).interfaceId;\\n  bytes4 constant ERC1155_INTERFACE_ID = type(IERC1155MetadataURI).interfaceId;\\n  bytes4 constant CREATOR_CORE_INTERFACE_ID = type(ICreatorCore).interfaceId;\\n\\n  /**\\n   * @notice Validate that a contract conforms to the expected standard by validating the interface support of an implementation contract\\n   *         via ERC165 `supportInterface` (see https://eips.ethereum.org/EIPS/eip-165)\\n   * @dev This will throw an unexpected error if the contract does not support ERC165\\n   * @param _contractAddress The address of the contract to validate\\n   * @param _isERC721 Whether the contract is an ERC721 (true) or ERC1155 (false)\\n   */\\n  function validateProxyCreatorContract(address _contractAddress, bool _isERC721) internal view {\\n    bytes4 expectedInterfaceId = _isERC721 ? ERC721_INTERFACE_ID : ERC1155_INTERFACE_ID;\\n    IERC165 implementation = IERC165(IPolyOneCreator(_contractAddress).implementation());\\n    if (!implementation.supportsInterface(expectedInterfaceId) || !implementation.supportsInterface(CREATOR_CORE_INTERFACE_ID)) {\\n      revert InvalidContractType();\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate that a contract implements the IPolyOneDrop interface\\n   * @param _contractAddress The address of the contract to validate\\n   */\\n  function validateDropContract(address _contractAddress) internal view {\\n    IERC165 implementation = IERC165(_contractAddress);\\n    if (!implementation.supportsInterface(type(IPolyOneDrop).interfaceId)) {\\n      revert InvalidContractType();\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate that a caller is the owner of a collection\\n   * @dev The contract address being check must inerit the OpenZeppelin Ownable standard\\n   * @param _contractAddress The address of the collection to validate\\n   * @param _caller The address of the owner to validate\\n   * @return True if the caller is the owner of the contract\\n   */\\n  function validateContractOwner(address _contractAddress, address _caller) internal view returns (bool) {\\n    address owner = Ownable(_contractAddress).owner();\\n    if (owner != _caller) {\\n      revert InvalidCaller(_caller);\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Validate that a caller is the creator of a PolyOneCreator contract\\n   * @param _contractAddress The address of the collection to validate\\n   * @param _caller The address of the caller to validate\\n   * @return True if the caller is the creator of the contract\\n   */\\n  function validateContractCreator(address _contractAddress, address _caller) internal view returns (bool) {\\n    address creator = IPolyOneCreator(_contractAddress).creator();\\n    if (creator != _caller) {\\n      revert InvalidCaller(_caller);\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Check if a date is in the past (before the current block timestamp)\\n   *         If the timestamps are equal, this is considered to be in the past\\n   */\\n  function isDateInPast(uint256 _date) internal view returns (bool) {\\n    return block.timestamp >= _date;\\n  }\\n\\n  /**\\n   * @dev Validate that the sum of all items in a uint array is equal to a given total\\n   * @param _array The array to validate\\n   * @param _total The total to validate against\\n   */\\n  function validateArrayTotal(uint256[] memory _array, uint256 _total) internal pure {\\n    uint256 total = 0;\\n    for (uint i = 0; i < _array.length; i++) {\\n      total += _array[i];\\n    }\\n    if (total != _total) {\\n      revert ArrayTotalMismatch();\\n    }\\n  }\\n\\n  /**\\n   * @dev Convert an address to an array of length 1 with a single address\\n   * @param _address The address to convert\\n   * @return A length 1 array containing _address\\n   */\\n  function addressToAddressArray(address _address) internal pure returns (address[] memory) {\\n    address[] memory array = new address[](1);\\n    array[0] = _address;\\n    return array;\\n  }\\n\\n  /**\\n   * @dev Convert a uint to an array of length 1 with a single address\\n   * @param _uint The uint to convert\\n   * @return A length 1 array containing _uint\\n   */\\n  function uintToUintArray(uint256 _uint) internal pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = _uint;\\n    return array;\\n  }\\n\\n  /**\\n   * @dev Convert a string array to an array of length 1 with a single string\\n   * @param _string The string to convert\\n   * @return A length 1 array containing _string\\n   */\\n  function stringToStringArray(string memory _string) internal pure returns (string[] memory) {\\n    string[] memory array = new string[](1);\\n    array[0] = _string;\\n    return array;\\n  }\\n\\n  /**\\n   * @dev Check if an address is a contract\\n   * @param _address The address to check\\n   */\\n  function isContract(address _address) internal view returns (bool) {\\n    uint32 size;\\n    assembly {\\n      size := extcodesize(_address)\\n    }\\n    return (size > 0);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_polyOneCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropFinished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropInProgress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"InvalidClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"InvalidDate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"InvalidPurchasePrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"TokenAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"TokenNotFoundInDrop\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDropLength\",\"type\":\"uint256\"}],\"name\":\"DropExtended\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bidIncrement\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"qty\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dropLength\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"royalties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPolyOneDrop.Drop\",\"name\":\"_drop\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bidIncrement\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"qty\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dropLength\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"royalties\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"}],\"name\":\"listingClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polyOneCore\",\"outputs\":[{\"internalType\":\"contract IPolyOneCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"registerPurchaseIntent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bidIncrement\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"qty\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dropLength\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"royalties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPolyOneDrop.Drop\",\"name\":\"_drop\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"updateDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"_royalties\",\"type\":\"tuple\"}],\"name\":\"updateDropRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"validateTokenClaim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolyOneDrop.Bid\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AuctionDrop", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e7593bf5982d8b28d0344b10d6cb842822013dc3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}