{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/glue/impl/bridge/CircleBridgeBaseImpl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../../helpers/Errors.sol\\\";\\r\\nimport \\\"../../helpers/TransferHelper.sol\\\";\\r\\nimport \\\"../../BridgeBase.sol\\\";\\r\\n\\r\\ninterface ICircleRouter {\\r\\n    function depositForBurn(\\r\\n        uint256 amount,\\r\\n        uint32 destinationDomain,\\r\\n        bytes32 mintRecipient,\\r\\n        address burnToken\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract CircleBridgeBaseImpl is BridgeBase, ReentrancyGuard {\\r\\n    ICircleRouter public immutable circleRouter;\\r\\n\\r\\n    constructor(\\r\\n        ICircleRouter _circleRouter,\\r\\n        address _router\\r\\n    ) BridgeBase(_router) {\\r\\n        circleRouter = _circleRouter;\\r\\n    }\\r\\n\\r\\n    event Bridge(\\r\\n        uint256 amount,\\r\\n        address fromToken,\\r\\n        uint256 toChainId,\\r\\n        address toAddress,\\r\\n        address toToken,\\r\\n        string channel,\\r\\n        uint256 channelFee\\r\\n    );\\r\\n\\r\\n    struct CircleData {\\r\\n        uint32 _destinationDomain;\\r\\n        address _toTokenAddress;\\r\\n        bytes32 _mintRecipient;\\r\\n        address _gasAddress;\\r\\n        uint256 _gasTokenAmount;\\r\\n        string _channel;\\r\\n        uint256 _channelFee;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function bridge(\\r\\n        address _fromAddress,\\r\\n        address _fromToken,\\r\\n        uint256 _amount,\\r\\n        address _receiverAddress,\\r\\n        uint256 _toChainId,\\r\\n        bytes memory _extraData,\\r\\n        address _feeAddress\\r\\n    ) external payable override onlyRouter nonReentrant {\\r\\n        require(_fromToken != NATIVE_TOKEN_ADDRESS, Errors.TOKEN_NOT_SUPPORTED);\\r\\n        CircleData memory _circleData = abi.decode(_extraData, (CircleData));\\r\\n\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            _fromToken,\\r\\n            _fromAddress,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        uint256 _channelFee = _circleData._channelFee;\\r\\n        if (_channelFee != 0) {\\r\\n            uint256 feeAmount = (_amount * _channelFee) / 1000000;\\r\\n            TransferHelper.safeTransfer(_fromToken, _feeAddress, feeAmount);\\r\\n            _amount = _amount - feeAmount;\\r\\n        }\\r\\n        TransferHelper.safeTransfer(\\r\\n            _fromToken,\\r\\n            _circleData._gasAddress,\\r\\n            _circleData._gasTokenAmount\\r\\n        );\\r\\n        uint256 bridgeAmt = _amount - _circleData._gasTokenAmount;\\r\\n        TransferHelper.safeApprove(_fromToken, address(circleRouter), bridgeAmt);\\r\\n        circleRouter.depositForBurn(\\r\\n            bridgeAmt,\\r\\n            _circleData._destinationDomain,\\r\\n            _circleData._mintRecipient,\\r\\n            _fromToken\\r\\n        );\\r\\n        emit Bridge(\\r\\n            _amount,\\r\\n            _fromToken,\\r\\n            _toChainId,\\r\\n            _receiverAddress,\\r\\n            _circleData._toTokenAddress,\\r\\n            _circleData._channel,\\r\\n            _channelFee\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/glue/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/glue/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary Errors {\\n    string internal constant ADDRESS_0_PROVIDED = \\\"ADDRESS_0_PROVIDED\\\";\\n    string internal constant DEX_NOT_ALLOWED = \\\"DEX_NOT_ALLOWED\\\";\\n    string internal constant TOKEN_NOT_SUPPORTED = \\\"TOKEN_NOT_SUPPORTED\\\";\\n    string internal constant SWAP_FAILED = \\\"SWAP_FAILED\\\";\\n    string internal constant VALUE_SHOULD_BE_ZERO = \\\"VALUE_SHOULD_BE_ZERO\\\";\\n    string internal constant VALUE_SHOULD_NOT_BE_ZERO = \\\"VALUE_SHOULD_NOT_BE_ZERO\\\";\\n    string internal constant VALUE_NOT_EQUAL_TO_AMOUNT = \\\"VALUE_NOT_EQUAL_TO_AMOUNT\\\";\\n\\n    string internal constant INVALID_AMT = \\\"INVALID_AMT\\\";\\n    string internal constant INVALID_ADDRESS = \\\"INVALID_ADDRESS\\\";\\n    string internal constant INVALID_SENDER = \\\"INVALID_SENDER\\\";\\n\\n    string internal constant UNKNOWN_TRANSFER_ID = \\\"UNKNOWN_TRANSFER_ID\\\";\\n    string internal constant CALL_DATA_MUST_SIGNED_BY_OWNER = \\\"CALL_DATA_MUST_SIGNED_BY_OWNER\\\";\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/glue/BridgeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./helpers/Errors.sol\\\";\\r\\nimport \\\"./helpers/TransferHelper.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract BridgeBase is Ownable {\\r\\n    address public router;\\r\\n    address public constant NATIVE_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n    \\r\\n\\r\\n    constructor(address _router) Ownable() {\\r\\n        router = _router;\\r\\n    }\\r\\n\\r\\n    event UpdateRouterAddress(address indexed routerAddress);\\r\\n\\r\\n    event WithdrawETH(uint256 amount);\\r\\n\\r\\n    event Withdraw(address token, uint256 amount);\\r\\n\\r\\n    modifier onlyRouter() {\\r\\n        require(msg.sender == router, Errors.INVALID_SENDER);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateRouterAddress(address newRouter) external onlyOwner {\\r\\n        router = newRouter;\\r\\n        emit UpdateRouterAddress(newRouter);\\r\\n    }\\r\\n\\r\\n    function bridge(\\r\\n        address _fromAddress,\\r\\n        address _fromToken,\\r\\n        uint256 _amount,\\r\\n        address _receiverAddress,\\r\\n        uint256 _toChainId,\\r\\n        bytes memory _extraData,\\r\\n        address feeAddress\\r\\n    ) external payable virtual;\\r\\n\\r\\n\\r\\n    function withdraw(address _token, address _receiverAddress, uint256 _amount) external onlyOwner {\\r\\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\\r\\n        TransferHelper.safeTransfer(_token, _receiverAddress, _amount);\\r\\n        emit Withdraw(_token, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawETH(address _receiverAddress, uint256 _amount) external onlyOwner {\\r\\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\\r\\n        TransferHelper.safeTransferETH(_receiverAddress, _amount);\\r\\n        emit WithdrawETH(_amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ICircleRouter\",\"name\":\"_circleRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"channelFee\",\"type\":\"uint256\"}],\"name\":\"Bridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"UpdateRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleRouter\",\"outputs\":[{\"internalType\":\"contract ICircleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CircleBridgeBaseImpl", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bd3fa81b58ba92a82136038b25adec7066af31550000000000000000000000006406df225a87d7ec187e11044257fec2ca0a354c", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}