{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/L1/rollup/L1MessageQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.16;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\nimport {IL2GasPriceOracle} from \\\"./IL2GasPriceOracle.sol\\\";\\nimport {IL1MessageQueue} from \\\"./IL1MessageQueue.sol\\\";\\n\\nimport {AddressAliasHelper} from \\\"../../libraries/common/AddressAliasHelper.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n// solhint-disable no-inline-assembly\\n// solhint-disable reason-string\\n\\n/// @title L1MessageQueue\\n/// @notice This contract will hold all L1 to L2 messages.\\n/// Each appended message is assigned with a unique and increasing `uint256` index.\\ncontract L1MessageQueue is OwnableUpgradeable, IL1MessageQueue {\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when owner updates gas oracle contract.\\n    /// @param _oldGasOracle The address of old gas oracle contract.\\n    /// @param _newGasOracle The address of new gas oracle contract.\\n    event UpdateGasOracle(address indexed _oldGasOracle, address indexed _newGasOracle);\\n\\n    /// @notice Emitted when owner updates EnforcedTxGateway contract.\\n    /// @param _oldGateway The address of old EnforcedTxGateway contract.\\n    /// @param _newGateway The address of new EnforcedTxGateway contract.\\n    event UpdateEnforcedTxGateway(address indexed _oldGateway, address indexed _newGateway);\\n\\n    /// @notice Emitted when owner updates max gas limit.\\n    /// @param _oldMaxGasLimit The old max gas limit.\\n    /// @param _newMaxGasLimit The new max gas limit.\\n    event UpdateMaxGasLimit(uint256 _oldMaxGasLimit, uint256 _newMaxGasLimit);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @notice The address of L1ScrollMessenger contract.\\n    address public messenger;\\n\\n    /// @notice The address of ScrollChain contract.\\n    address public scrollChain;\\n\\n    /// @notice The address EnforcedTxGateway contract.\\n    address public enforcedTxGateway;\\n\\n    /// @notice The address of GasOracle contract.\\n    address public gasOracle;\\n\\n    /// @notice The list of queued cross domain messages.\\n    bytes32[] public messageQueue;\\n\\n    /// @inheritdoc IL1MessageQueue\\n    uint256 public pendingQueueIndex;\\n\\n    /// @notice The max gas limit of L1 transactions.\\n    uint256 public maxGasLimit;\\n\\n    /// @dev The bitmap for dropped messages, where `droppedMessageBitmap[i]` keeps the bits from `[i*256, (i+1)*256)`.\\n    BitMapsUpgradeable.BitMap private droppedMessageBitmap;\\n\\n    /// @dev The bitmap for skipped messages, where `skippedMessageBitmap[i]` keeps the bits from `[i*256, (i+1)*256)`.\\n    mapping(uint256 => uint256) private skippedMessageBitmap;\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyMessenger() {\\n        require(_msgSender() == messenger, \\\"Only callable by the L1ScrollMessenger\\\");\\n        _;\\n    }\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _messenger,\\n        address _scrollChain,\\n        address _enforcedTxGateway,\\n        address _gasOracle,\\n        uint256 _maxGasLimit\\n    ) external initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n\\n        messenger = _messenger;\\n        scrollChain = _scrollChain;\\n        enforcedTxGateway = _enforcedTxGateway;\\n        gasOracle = _gasOracle;\\n        maxGasLimit = _maxGasLimit;\\n    }\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function nextCrossDomainMessageIndex() external view returns (uint256) {\\n        return messageQueue.length;\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function getCrossDomainMessage(uint256 _queueIndex) external view returns (bytes32) {\\n        return messageQueue[_queueIndex];\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function estimateCrossDomainMessageFee(uint256 _gasLimit) external view override returns (uint256) {\\n        address _oracle = gasOracle;\\n        if (_oracle == address(0)) return 0;\\n        return IL2GasPriceOracle(_oracle).estimateCrossDomainMessageFee(_gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function calculateIntrinsicGasFee(bytes memory _calldata) public view override returns (uint256) {\\n        address _oracle = gasOracle;\\n        if (_oracle == address(0)) return 0;\\n        return IL2GasPriceOracle(_oracle).calculateIntrinsicGasFee(_calldata);\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function computeTransactionHash(\\n        address _sender,\\n        uint256 _queueIndex,\\n        uint256 _value,\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes calldata _data\\n    ) public pure override returns (bytes32) {\\n        // We use EIP-2718 to encode the L1 message, and the encoding of the message is\\n        //      `TransactionType || TransactionPayload`\\n        // where\\n        //  1. `TransactionType` is 0x7E\\n        //  2. `TransactionPayload` is `rlp([queueIndex, gasLimit, to, value, data, sender])`\\n        //\\n        // The spec of rlp: https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\\n        uint256 transactionType = 0x7E;\\n        bytes32 hash;\\n        assembly {\\n            function get_uint_bytes(v) -> len {\\n                if eq(v, 0) {\\n                    len := 1\\n                    leave\\n                }\\n                for {\\n\\n                } gt(v, 0) {\\n\\n                } {\\n                    len := add(len, 1)\\n                    v := shr(8, v)\\n                }\\n            }\\n\\n            // This is used for both store uint and single byte.\\n            // Integer zero is special handled by geth to encode as `0x80`\\n            function store_uint_or_byte(_ptr, v, is_uint) -> ptr {\\n                ptr := _ptr\\n                switch lt(v, 128)\\n                case 1 {\\n                    switch and(iszero(v), is_uint)\\n                    case 1 {\\n                        // integer 0\\n                        mstore8(ptr, 0x80)\\n                    }\\n                    default {\\n                        // single byte in the [0x00, 0x7f]\\n                        mstore8(ptr, v)\\n                    }\\n                    ptr := add(ptr, 1)\\n                }\\n                default {\\n                    // 1-32 bytes long\\n                    let len := get_uint_bytes(v)\\n                    mstore8(ptr, add(len, 0x80))\\n                    ptr := add(ptr, 1)\\n                    mstore(ptr, shl(mul(8, sub(32, len)), v))\\n                    ptr := add(ptr, len)\\n                }\\n            }\\n\\n            function store_address(_ptr, v) -> ptr {\\n                ptr := _ptr\\n                // 20 bytes long\\n                mstore8(ptr, 0x94) // 0x80 + 0x14\\n                ptr := add(ptr, 1)\\n                mstore(ptr, shl(96, v))\\n                ptr := add(ptr, 0x14)\\n            }\\n\\n            // 1 byte for TransactionType\\n            // 4 byte for list payload length\\n            let start_ptr := add(mload(0x40), 5)\\n            let ptr := start_ptr\\n            ptr := store_uint_or_byte(ptr, _queueIndex, 1)\\n            ptr := store_uint_or_byte(ptr, _gasLimit, 1)\\n            ptr := store_address(ptr, _target)\\n            ptr := store_uint_or_byte(ptr, _value, 1)\\n\\n            switch eq(_data.length, 1)\\n            case 1 {\\n                // single byte\\n                ptr := store_uint_or_byte(ptr, byte(0, calldataload(_data.offset)), 0)\\n            }\\n            default {\\n                switch lt(_data.length, 56)\\n                case 1 {\\n                    // a string is 0-55 bytes long\\n                    mstore8(ptr, add(0x80, _data.length))\\n                    ptr := add(ptr, 1)\\n                    calldatacopy(ptr, _data.offset, _data.length)\\n                    ptr := add(ptr, _data.length)\\n                }\\n                default {\\n                    // a string is more than 55 bytes long\\n                    let len_bytes := get_uint_bytes(_data.length)\\n                    mstore8(ptr, add(0xb7, len_bytes))\\n                    ptr := add(ptr, 1)\\n                    mstore(ptr, shl(mul(8, sub(32, len_bytes)), _data.length))\\n                    ptr := add(ptr, len_bytes)\\n                    calldatacopy(ptr, _data.offset, _data.length)\\n                    ptr := add(ptr, _data.length)\\n                }\\n            }\\n            ptr := store_address(ptr, _sender)\\n\\n            let payload_len := sub(ptr, start_ptr)\\n            let value\\n            let value_bytes\\n            switch lt(payload_len, 56)\\n            case 1 {\\n                // the total payload of a list is 0-55 bytes long\\n                value := add(0xc0, payload_len)\\n                value_bytes := 1\\n            }\\n            default {\\n                // If the total payload of a list is more than 55 bytes long\\n                let len_bytes := get_uint_bytes(payload_len)\\n                value_bytes := add(len_bytes, 1)\\n                value := add(0xf7, len_bytes)\\n                value := shl(mul(len_bytes, 8), value)\\n                value := or(value, payload_len)\\n            }\\n            value := or(value, shl(mul(8, value_bytes), transactionType))\\n            value_bytes := add(value_bytes, 1)\\n            let value_bits := mul(8, value_bytes)\\n            value := or(shl(sub(256, value_bits), value), shr(value_bits, mload(start_ptr)))\\n            start_ptr := sub(start_ptr, value_bytes)\\n            mstore(start_ptr, value)\\n            hash := keccak256(start_ptr, sub(ptr, start_ptr))\\n        }\\n        return hash;\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function isMessageSkipped(uint256 _queueIndex) external view returns (bool) {\\n        if (_queueIndex >= pendingQueueIndex) return false;\\n\\n        return _isMessageSkipped(_queueIndex);\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function isMessageDropped(uint256 _queueIndex) external view returns (bool) {\\n        // it should be a skipped message first.\\n        return _isMessageSkipped(_queueIndex) && droppedMessageBitmap.get(_queueIndex);\\n    }\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function appendCrossDomainMessage(\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes calldata _data\\n    ) external override onlyMessenger {\\n        // validate gas limit\\n        _validateGasLimit(_gasLimit, _data);\\n\\n        // do address alias to avoid replay attack in L2.\\n        address _sender = AddressAliasHelper.applyL1ToL2Alias(_msgSender());\\n\\n        _queueTransaction(_sender, _target, 0, _gasLimit, _data);\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function appendEnforcedTransaction(\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes calldata _data\\n    ) external override {\\n        require(_msgSender() == enforcedTxGateway, \\\"Only callable by the EnforcedTxGateway\\\");\\n        // We will check it in EnforcedTxGateway, just in case.\\n        require(_sender.code.length == 0, \\\"only EOA\\\");\\n\\n        // validate gas limit\\n        _validateGasLimit(_gasLimit, _data);\\n\\n        _queueTransaction(_sender, _target, _value, _gasLimit, _data);\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function popCrossDomainMessage(\\n        uint256 _startIndex,\\n        uint256 _count,\\n        uint256 _skippedBitmap\\n    ) external {\\n        require(_msgSender() == scrollChain, \\\"Only callable by the ScrollChain\\\");\\n\\n        require(_count <= 256, \\\"pop too many messages\\\");\\n        require(pendingQueueIndex == _startIndex, \\\"start index mismatch\\\");\\n\\n        unchecked {\\n            // clear extra bits in `_skippedBitmap`, and if _count = 256, it's designed to overflow.\\n            uint256 mask = (1 << _count) - 1;\\n            _skippedBitmap &= mask;\\n\\n            uint256 bucket = _startIndex >> 8;\\n            uint256 offset = _startIndex & 0xff;\\n            skippedMessageBitmap[bucket] |= _skippedBitmap << offset;\\n            if (offset + _count > 256) {\\n                skippedMessageBitmap[bucket + 1] = _skippedBitmap >> (256 - offset);\\n            }\\n\\n            pendingQueueIndex = _startIndex + _count;\\n        }\\n\\n        emit DequeueTransaction(_startIndex, _count, _skippedBitmap);\\n    }\\n\\n    /// @inheritdoc IL1MessageQueue\\n    function dropCrossDomainMessage(uint256 _index) external onlyMessenger {\\n        require(_index < pendingQueueIndex, \\\"cannot drop pending message\\\");\\n\\n        require(_isMessageSkipped(_index), \\\"drop non-skipped message\\\");\\n        require(!droppedMessageBitmap.get(_index), \\\"message already dropped\\\");\\n        droppedMessageBitmap.set(_index);\\n\\n        emit DropTransaction(_index);\\n    }\\n\\n    /************************\\n     * Restricted Functions *\\n     ************************/\\n\\n    /// @notice Update the address of gas oracle.\\n    /// @dev This function can only called by contract owner.\\n    /// @param _newGasOracle The address to update.\\n    function updateGasOracle(address _newGasOracle) external onlyOwner {\\n        address _oldGasOracle = gasOracle;\\n        gasOracle = _newGasOracle;\\n\\n        emit UpdateGasOracle(_oldGasOracle, _newGasOracle);\\n    }\\n\\n    /// @notice Update the address of EnforcedTxGateway.\\n    /// @dev This function can only called by contract owner.\\n    /// @param _newGateway The address to update.\\n    function updateEnforcedTxGateway(address _newGateway) external onlyOwner {\\n        address _oldGateway = enforcedTxGateway;\\n        enforcedTxGateway = _newGateway;\\n\\n        emit UpdateEnforcedTxGateway(_oldGateway, _newGateway);\\n    }\\n\\n    /// @notice Update the max gas limit.\\n    /// @dev This function can only called by contract owner.\\n    /// @param _newMaxGasLimit The new max gas limit.\\n    function updateMaxGasLimit(uint256 _newMaxGasLimit) external onlyOwner {\\n        uint256 _oldMaxGasLimit = maxGasLimit;\\n        maxGasLimit = _newMaxGasLimit;\\n\\n        emit UpdateMaxGasLimit(_oldMaxGasLimit, _newMaxGasLimit);\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /// @dev Internal function to queue a L1 transaction.\\n    /// @param _sender The address of sender who will initiate this transaction in L2.\\n    /// @param _target The address of target contract to call in L2.\\n    /// @param _value The value passed\\n    /// @param _gasLimit The maximum gas should be used for this transaction in L2.\\n    /// @param _data The calldata passed to target contract.\\n    function _queueTransaction(\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes calldata _data\\n    ) internal {\\n        // compute transaction hash\\n        uint256 _queueIndex = messageQueue.length;\\n        bytes32 _hash = computeTransactionHash(_sender, _queueIndex, _value, _target, _gasLimit, _data);\\n        messageQueue.push(_hash);\\n\\n        // emit event\\n        emit QueueTransaction(_sender, _target, _value, uint64(_queueIndex), _gasLimit, _data);\\n    }\\n\\n    function _validateGasLimit(uint256 _gasLimit, bytes memory _calldata) internal view {\\n        require(_gasLimit <= maxGasLimit, \\\"Gas limit must not exceed maxGasLimit\\\");\\n        // check if the gas limit is above intrinsic gas\\n        uint256 intrinsicGas = calculateIntrinsicGasFee(_calldata);\\n        require(_gasLimit >= intrinsicGas, \\\"Insufficient gas limit, must be above intrinsic gas\\\");\\n    }\\n\\n    /// @dev Returns whether the bit at `index` is set.\\n    function _isMessageSkipped(uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return skippedMessageBitmap[bucket] & mask != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/L1/rollup/IL2GasPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL2GasPriceOracle {\\n    /// @notice Estimate fee for cross chain message call.\\n    /// @param _gasLimit Gas limit required to complete the message relay on L2.\\n    function estimateCrossDomainMessageFee(uint256 _gasLimit) external view returns (uint256);\\n\\n    /// @notice Estimate intrinsic gas fee for cross chain message call.\\n    /// @param _message The message to be relayed on L2.\\n    function calculateIntrinsicGasFee(bytes memory _message) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/L1/rollup/IL1MessageQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL1MessageQueue {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when a new L1 => L2 transaction is appended to the queue.\\n    /// @param sender The address of account who initiates the transaction.\\n    /// @param target The address of account who will receive the transaction.\\n    /// @param value The value passed with the transaction.\\n    /// @param queueIndex The index of this transaction in the queue.\\n    /// @param gasLimit Gas limit required to complete the message relay on L2.\\n    /// @param data The calldata of the transaction.\\n    event QueueTransaction(\\n        address indexed sender,\\n        address indexed target,\\n        uint256 value,\\n        uint64 queueIndex,\\n        uint256 gasLimit,\\n        bytes data\\n    );\\n\\n    /// @notice Emitted when some L1 => L2 transactions are included in L1.\\n    /// @param startIndex The start index of messages popped.\\n    /// @param count The number of messages popped.\\n    /// @param skippedBitmap A bitmap indicates whether a message is skipped.\\n    event DequeueTransaction(uint256 startIndex, uint256 count, uint256 skippedBitmap);\\n\\n    /// @notice Emitted when a message is dropped from L1.\\n    /// @param index The index of message dropped.\\n    event DropTransaction(uint256 index);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice The start index of all pending inclusion messages.\\n    function pendingQueueIndex() external view returns (uint256);\\n\\n    /// @notice Return the index of next appended message.\\n    /// @dev Also the total number of appended messages.\\n    function nextCrossDomainMessageIndex() external view returns (uint256);\\n\\n    /// @notice Return the message of in `queueIndex`.\\n    /// @param queueIndex The index to query.\\n    function getCrossDomainMessage(uint256 queueIndex) external view returns (bytes32);\\n\\n    /// @notice Return the amount of ETH should pay for cross domain message.\\n    /// @param gasLimit Gas limit required to complete the message relay on L2.\\n    function estimateCrossDomainMessageFee(uint256 gasLimit) external view returns (uint256);\\n\\n    /// @notice Return the amount of intrinsic gas fee should pay for cross domain message.\\n    /// @param _calldata The calldata of L1-initiated transaction.\\n    function calculateIntrinsicGasFee(bytes memory _calldata) external view returns (uint256);\\n\\n    /// @notice Return the hash of a L1 message.\\n    /// @param sender The address of sender.\\n    /// @param queueIndex The queue index of this message.\\n    /// @param value The amount of Ether transfer to target.\\n    /// @param target The address of target.\\n    /// @param gasLimit The gas limit provided.\\n    /// @param data The calldata passed to target address.\\n    function computeTransactionHash(\\n        address sender,\\n        uint256 queueIndex,\\n        uint256 value,\\n        address target,\\n        uint256 gasLimit,\\n        bytes calldata data\\n    ) external view returns (bytes32);\\n\\n    /// @notice Return whether the message is skipped.\\n    /// @param queueIndex The queue index of the message to check.\\n    function isMessageSkipped(uint256 queueIndex) external view returns (bool);\\n\\n    /// @notice Return whether the message is dropped.\\n    /// @param queueIndex The queue index of the message to check.\\n    function isMessageDropped(uint256 queueIndex) external view returns (bool);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Append a L1 to L2 message into this contract.\\n    /// @param target The address of target contract to call in L2.\\n    /// @param gasLimit The maximum gas should be used for relay this message in L2.\\n    /// @param data The calldata passed to target contract.\\n    function appendCrossDomainMessage(\\n        address target,\\n        uint256 gasLimit,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Append an enforced transaction to this contract.\\n    /// @dev The address of sender should be an EOA.\\n    /// @param sender The address of sender who will initiate this transaction in L2.\\n    /// @param target The address of target contract to call in L2.\\n    /// @param value The value passed\\n    /// @param gasLimit The maximum gas should be used for this transaction in L2.\\n    /// @param data The calldata passed to target contract.\\n    function appendEnforcedTransaction(\\n        address sender,\\n        address target,\\n        uint256 value,\\n        uint256 gasLimit,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Pop finalized messages from queue.\\n    ///\\n    /// @dev We can pop at most 256 messages each time. And if the message is not skipped,\\n    ///      the corresponding entry will be cleared.\\n    ///\\n    /// @param startIndex The start index to pop.\\n    /// @param count The number of messages to pop.\\n    /// @param skippedBitmap A bitmap indicates whether a message is skipped.\\n    function popCrossDomainMessage(\\n        uint256 startIndex,\\n        uint256 count,\\n        uint256 skippedBitmap\\n    ) external;\\n\\n    /// @notice Drop a skipped message from the queue.\\n    function dropCrossDomainMessage(uint256 index) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/common/AddressAliasHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary AddressAliasHelper {\\n    /// @dev The offset added to the address in L1.\\n    uint160 internal constant OFFSET = uint160(0x1111000000000000000000000000000000001111);\\n\\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n    /// the inbox to the msg.sender viewed in the L2\\n    /// @param l1Address the address in the L1 that triggered the tx to L2\\n    /// @return l2Address L2 address as viewed in msg.sender\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n        unchecked {\\n            l2Address = address(uint160(l1Address) + OFFSET);\\n        }\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l2Address L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n        unchecked {\\n            l1Address = address(uint160(l2Address) - OFFSET);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skippedBitmap\",\"type\":\"uint256\"}],\"name\":\"DequeueTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DropTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"queueIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"QueueTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldGateway\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGateway\",\"type\":\"address\"}],\"name\":\"UpdateEnforcedTxGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldGasOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGasOracle\",\"type\":\"address\"}],\"name\":\"UpdateGasOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMaxGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxGasLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxGasLimit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"appendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"appendEnforcedTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"calculateIntrinsicGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_queueIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"computeTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"dropCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforcedTxGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"estimateCrossDomainMessageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queueIndex\",\"type\":\"uint256\"}],\"name\":\"getCrossDomainMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_scrollChain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_enforcedTxGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queueIndex\",\"type\":\"uint256\"}],\"name\":\"isMessageDropped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queueIndex\",\"type\":\"uint256\"}],\"name\":\"isMessageSkipped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messageQueue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCrossDomainMessageIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingQueueIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skippedBitmap\",\"type\":\"uint256\"}],\"name\":\"popCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scrollChain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGateway\",\"type\":\"address\"}],\"name\":\"updateEnforcedTxGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGasOracle\",\"type\":\"address\"}],\"name\":\"updateGasOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxGasLimit\",\"type\":\"uint256\"}],\"name\":\"updateMaxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "L1MessageQueue", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}