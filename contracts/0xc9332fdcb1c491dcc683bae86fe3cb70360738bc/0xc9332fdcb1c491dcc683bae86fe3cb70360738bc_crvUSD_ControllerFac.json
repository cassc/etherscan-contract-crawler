{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title crvUSD ControllerFactory\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2023 - all rights reserved\r\n\"\"\"\r\n\r\ninterface ERC20:\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\r\n    def balanceOf(_user: address) -> uint256: view\r\n    def decimals() -> uint256: view\r\n\r\ninterface PriceOracle:\r\n    def price() -> uint256: view\r\n    def price_w() -> uint256: nonpayable\r\n\r\ninterface AMM:\r\n    def set_admin(_admin: address): nonpayable\r\n\r\ninterface Controller:\r\n    def total_debt() -> uint256: view\r\n    def minted() -> uint256: view\r\n    def redeemed() -> uint256: view\r\n    def collect_fees() -> uint256: nonpayable\r\n\r\ninterface MonetaryPolicy:\r\n    def rate_write() -> uint256: nonpayable\r\n\r\n\r\nevent AddMarket:\r\n    collateral: indexed(address)\r\n    controller: address\r\n    amm: address\r\n    monetary_policy: address\r\n    ix: uint256\r\n\r\nevent SetDebtCeiling:\r\n    addr: indexed(address)\r\n    debt_ceiling: uint256\r\n\r\nevent MintForMarket:\r\n    addr: indexed(address)\r\n    amount: uint256\r\n\r\nevent RemoveFromMarket:\r\n    addr: indexed(address)\r\n    amount: uint256\r\n\r\nevent SetImplementations:\r\n    amm: address\r\n    controller: address\r\n\r\nevent SetAdmin:\r\n    admin: address\r\n\r\nevent SetFeeReceiver:\r\n    fee_receiver: address\r\n\r\n\r\nMAX_CONTROLLERS: constant(uint256) = 50000\r\nSTABLECOIN: immutable(ERC20)\r\ncontrollers: public(address[MAX_CONTROLLERS])\r\namms: public(address[MAX_CONTROLLERS])\r\nadmin: public(address)\r\nfee_receiver: public(address)\r\ncontroller_implementation: public(address)\r\namm_implementation: public(address)\r\n\r\nn_collaterals: public(uint256)\r\ncollaterals: public(address[MAX_CONTROLLERS])\r\ncollaterals_index: public(HashMap[address, uint256[1000]])\r\n\r\ndebt_ceiling: public(HashMap[address, uint256])\r\ndebt_ceiling_residual: public(HashMap[address, uint256])\r\n\r\n# Limits\r\nMIN_A: constant(uint256) = 2\r\nMAX_A: constant(uint256) = 10000\r\nMIN_FEE: constant(uint256) = 10**6  # 1e-12, still needs to be above 0\r\nMAX_FEE: constant(uint256) = 10**17  # 10%\r\nMAX_ADMIN_FEE: constant(uint256) = 10**18  # 100%\r\nMAX_LOAN_DISCOUNT: constant(uint256) = 5 * 10**17\r\nMIN_LIQUIDATION_DISCOUNT: constant(uint256) = 10**16\r\n\r\nWETH: public(immutable(address))\r\n\r\n\r\n@external\r\ndef __init__(stablecoin: ERC20,\r\n             admin: address,\r\n             fee_receiver: address,\r\n             weth: address):\r\n    \"\"\"\r\n    @notice Factory which creates both controllers and AMMs from blueprints\r\n    @param stablecoin Stablecoin address\r\n    @param admin Admin of the factory (ideally DAO)\r\n    @param fee_receiver Receiver of interest and admin fees\r\n    @param weth Address of WETH contract address\r\n    \"\"\"\r\n    STABLECOIN = stablecoin\r\n    self.admin = admin\r\n    self.fee_receiver = fee_receiver\r\n    WETH = weth\r\n\r\n\r\n@internal\r\n@pure\r\ndef ln_int(_x: uint256) -> int256:\r\n    \"\"\"\r\n    @notice Logarithm ln() function based on log2. Not very gas-efficient but brief\r\n    \"\"\"\r\n    # adapted from: https://medium.com/coinmonks/9aef8515136e\r\n    # and vyper log implementation\r\n    # This can be much more optimal but that's not important here\r\n    x: uint256 = _x\r\n    res: uint256 = 0\r\n    for i in range(8):\r\n        t: uint256 = 2**(7 - i)\r\n        p: uint256 = 2**t\r\n        if x >= p * 10**18:\r\n            x /= p\r\n            res += t * 10**18\r\n    d: uint256 = 10**18\r\n    for i in range(59):  # 18 decimals: math.log2(10**10) == 59.7\r\n        if (x >= 2 * 10**18):\r\n            res += d\r\n            x /= 2\r\n        x = x * x / 10**18\r\n        d /= 2\r\n    # Now res = log2(x)\r\n    # ln(x) = log2(x) / log2(e)\r\n    return convert(res * 10**18 / 1442695040888963328, int256)\r\n## End of low-level math\r\n\r\n\r\n@external\r\n@view\r\ndef stablecoin() -> ERC20:\r\n    return STABLECOIN\r\n\r\n\r\n@internal\r\ndef _set_debt_ceiling(addr: address, debt_ceiling: uint256, update: bool):\r\n    \"\"\"\r\n    @notice Set debt ceiling for a market\r\n    @param addr Controller address\r\n    @param debt_ceiling Value for stablecoin debt ceiling\r\n    @param update Whether to actually update the debt ceiling (False is used for burning the residuals)\r\n    \"\"\"\r\n    old_debt_residual: uint256 = self.debt_ceiling_residual[addr]\r\n\r\n    if debt_ceiling > old_debt_residual:\r\n        to_mint: uint256 = debt_ceiling - old_debt_residual\r\n        STABLECOIN.mint(addr, to_mint)\r\n        self.debt_ceiling_residual[addr] = debt_ceiling\r\n        log MintForMarket(addr, to_mint)\r\n\r\n    if debt_ceiling < old_debt_residual:\r\n        diff: uint256 = min(old_debt_residual - debt_ceiling, STABLECOIN.balanceOf(addr))\r\n        STABLECOIN.burnFrom(addr, diff)\r\n        self.debt_ceiling_residual[addr] = old_debt_residual - diff\r\n        log RemoveFromMarket(addr, diff)\r\n\r\n    if update:\r\n        self.debt_ceiling[addr] = debt_ceiling\r\n        log SetDebtCeiling(addr, debt_ceiling)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_market(token: address, A: uint256, fee: uint256, admin_fee: uint256,\r\n               _price_oracle_contract: address,\r\n               monetary_policy: address, loan_discount: uint256, liquidation_discount: uint256,\r\n               debt_ceiling: uint256) -> address[2]:\r\n    \"\"\"\r\n    @notice Add a new market, creating an AMM and a Controller from a blueprint\r\n    @param token Collateral token address\r\n    @param A Amplification coefficient; one band size is 1/A\r\n    @param fee AMM fee in the market's AMM\r\n    @param admin_fee AMM admin fee\r\n    @param _price_oracle_contract Address of price oracle contract for this market\r\n    @param monetary_policy Monetary policy for this market\r\n    @param loan_discount Loan discount: allowed to borrow only up to x_down * (1 - loan_discount)\r\n    @param liquidation_discount Discount which defines a bad liquidation threshold\r\n    @param debt_ceiling Debt ceiling for this market\r\n    @return (Controller, AMM)\r\n    \"\"\"\r\n    assert msg.sender == self.admin, \"Only admin\"\r\n    assert A >= MIN_A and A <= MAX_A, \"Wrong A\"\r\n    assert fee <= MAX_FEE, \"Fee too high\"\r\n    assert fee >= MIN_FEE, \"Fee too low\"\r\n    assert admin_fee < MAX_ADMIN_FEE, \"Admin fee too high\"\r\n    assert liquidation_discount >= MIN_LIQUIDATION_DISCOUNT, \"Liquidation discount too low\"\r\n    assert loan_discount <= MAX_LOAN_DISCOUNT, \"Loan discount too high\"\r\n    assert loan_discount > liquidation_discount, \"need loan_discount>liquidation_discount\"\r\n    MonetaryPolicy(monetary_policy).rate_write()  # Test that MonetaryPolicy has correct ABI\r\n\r\n    p: uint256 = PriceOracle(_price_oracle_contract).price()  # This also validates price oracle ABI\r\n    assert p > 0\r\n    assert PriceOracle(_price_oracle_contract).price_w() == p\r\n    A_ratio: uint256 = 10**18 * A / (A - 1)\r\n\r\n    amm: address = create_from_blueprint(\r\n        self.amm_implementation,\r\n        STABLECOIN.address, 10**(18 - STABLECOIN.decimals()),\r\n        token, 10**(18 - ERC20(token).decimals()),  # <- This validates ERC20 ABI\r\n        A, isqrt(A_ratio * 10**18), self.ln_int(A_ratio),\r\n        p, fee, admin_fee, _price_oracle_contract,\r\n        code_offset=3)\r\n    controller: address = create_from_blueprint(\r\n        self.controller_implementation,\r\n        token, monetary_policy, loan_discount, liquidation_discount, amm,\r\n        code_offset=3)\r\n    AMM(amm).set_admin(controller)\r\n    self._set_debt_ceiling(controller, debt_ceiling, True)\r\n\r\n    N: uint256 = self.n_collaterals\r\n    self.collaterals[N] = token\r\n    for i in range(1000):\r\n        if self.collaterals_index[token][i] == 0:\r\n            self.collaterals_index[token][i] = 2**128 + N\r\n            break\r\n        assert i != 999, \"Too many controllers for same collateral\"\r\n    self.controllers[N] = controller\r\n    self.amms[N] = amm\r\n    self.n_collaterals = N + 1\r\n\r\n    log AddMarket(token, controller, amm, monetary_policy, N)\r\n    return [controller, amm]\r\n\r\n\r\n@external\r\n@view\r\ndef total_debt() -> uint256:\r\n    \"\"\"\r\n    @notice Sum of all debts across controllers\r\n    \"\"\"\r\n    total: uint256 = 0\r\n    n_collaterals: uint256 = self.n_collaterals\r\n    for i in range(MAX_CONTROLLERS):\r\n        if i == n_collaterals:\r\n            break\r\n        total += Controller(self.controllers[i]).total_debt()\r\n    return total\r\n\r\n\r\n@external\r\n@view\r\ndef get_controller(collateral: address, i: uint256 = 0) -> address:\r\n    \"\"\"\r\n    @notice Get controller address for collateral\r\n    @param collateral Address of collateral token\r\n    @param i Iterate over several controllers for collateral if needed\r\n    \"\"\"\r\n    return self.controllers[self.collaterals_index[collateral][i] - 2**128]\r\n\r\n\r\n@external\r\n@view\r\ndef get_amm(collateral: address, i: uint256 = 0) -> address:\r\n    \"\"\"\r\n    @notice Get AMM address for collateral\r\n    @param collateral Address of collateral token\r\n    @param i Iterate over several amms for collateral if needed\r\n    \"\"\"\r\n    return self.amms[self.collaterals_index[collateral][i] - 2**128]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_implementations(controller: address, amm: address):\r\n    \"\"\"\r\n    @notice Set new implementations (blueprints) for controller and amm. Doesn't change existing ones\r\n    @param controller Address of the controller blueprint\r\n    @param amm Address of the AMM blueprint\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    assert controller != empty(address)\r\n    assert amm != empty(address)\r\n    self.controller_implementation = controller\r\n    self.amm_implementation = amm\r\n    log SetImplementations(amm, controller)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_admin(admin: address):\r\n    \"\"\"\r\n    @notice Set admin of the factory (should end up with DAO)\r\n    @param admin Address of the admin\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self.admin = admin\r\n    log SetAdmin(admin)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_fee_receiver(fee_receiver: address):\r\n    \"\"\"\r\n    @notice Set fee receiver who earns interest (DAO)\r\n    @param fee_receiver Address of the receiver\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    assert fee_receiver != empty(address)\r\n    self.fee_receiver = fee_receiver\r\n    log SetFeeReceiver(fee_receiver)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_debt_ceiling(_to: address, debt_ceiling: uint256):\r\n    \"\"\"\r\n    @notice Set debt ceiling of the address - mint the token amount given for it\r\n    @param _to Address to allow borrowing for\r\n    @param debt_ceiling Maximum allowed to be allowed to mint for it\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self._set_debt_ceiling(_to, debt_ceiling, True)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef rug_debt_ceiling(_to: address):\r\n    \"\"\"\r\n    @notice Remove stablecoins above the debt ceiling from the address and burn them\r\n    @param _to Address to remove stablecoins from\r\n    \"\"\"\r\n    self._set_debt_ceiling(_to, self.debt_ceiling[_to], False)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef collect_fees_above_ceiling(_to: address):\r\n    \"\"\"\r\n    @notice If the receiver is the controller - increase the debt ceiling if it's not enough to claim admin fees\r\n            and claim them\r\n    @param _to Address of the controller\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    old_debt_residual: uint256 = self.debt_ceiling_residual[_to]\r\n    assert self.debt_ceiling[_to] > 0 or old_debt_residual > 0\r\n\r\n    admin_fees: uint256 = Controller(_to).total_debt() + Controller(_to).redeemed() - Controller(_to).minted()\r\n    b: uint256 = STABLECOIN.balanceOf(_to)\r\n    if admin_fees > b:\r\n        to_mint: uint256 = admin_fees - b\r\n        STABLECOIN.mint(_to, to_mint)\r\n        self.debt_ceiling_residual[_to] = old_debt_residual + to_mint\r\n    Controller(_to).collect_fees()", "ABI": "[{\"name\":\"AddMarket\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":true},{\"name\":\"controller\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amm\",\"type\":\"address\",\"indexed\":false},{\"name\":\"monetary_policy\",\"type\":\"address\",\"indexed\":false},{\"name\":\"ix\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetDebtCeiling\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\",\"indexed\":true},{\"name\":\"debt_ceiling\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"MintForMarket\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveFromMarket\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetImplementations\",\"inputs\":[{\"name\":\"amm\",\"type\":\"address\",\"indexed\":false},{\"name\":\"controller\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetAdmin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetFeeReceiver\",\"inputs\":[{\"name\":\"fee_receiver\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"stablecoin\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"fee_receiver\",\"type\":\"address\"},{\"name\":\"weth\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stablecoin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_market\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"A\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"admin_fee\",\"type\":\"uint256\"},{\"name\":\"_price_oracle_contract\",\"type\":\"address\"},{\"name\":\"monetary_policy\",\"type\":\"address\"},{\"name\":\"loan_discount\",\"type\":\"uint256\"},{\"name\":\"liquidation_discount\",\"type\":\"uint256\"},{\"name\":\"debt_ceiling\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[2]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_debt\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_controller\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_controller\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_amm\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_amm\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_implementations\",\"inputs\":[{\"name\":\"controller\",\"type\":\"address\"},{\"name\":\"amm\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_admin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_fee_receiver\",\"inputs\":[{\"name\":\"fee_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_debt_ceiling\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"debt_ceiling\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rug_debt_ceiling\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"collect_fees_above_ceiling\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controllers\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"amms\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee_receiver\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controller_implementation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"amm_implementation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"n_collaterals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collaterals\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collaterals_index\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"debt_ceiling\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"debt_ceiling_residual\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "crvUSD ControllerFactory", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e000000000000000000000000babe61887f1de2713c6f97e567623453d3c79f67000000000000000000000000ecb456ea5365865ebab8a2661b0c503410e9b347000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}