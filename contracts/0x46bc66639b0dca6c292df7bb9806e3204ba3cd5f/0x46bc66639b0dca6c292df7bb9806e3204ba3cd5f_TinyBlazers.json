{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) internal {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AsterfiStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract AsterFiStaking {\\r\\n  struct Stake {\\r\\n    address owner;\\r\\n    uint256 tokenId;\\r\\n    uint256 stakedAt;\\r\\n    uint256 unstakeAvailableAt;\\r\\n    bool active;\\r\\n  }\\r\\n\\r\\n  mapping(address => mapping(uint256 => Stake)) public stakes;\\r\\n  mapping(address => uint256[]) public stakedNFTs;\\r\\n\\r\\n  uint256 public stakingPeriod = 12 * 30 days;\\r\\n\\r\\n  function getStakeInfo(\\r\\n    address _owner,\\r\\n    uint256 _tokenId\\r\\n  ) external view returns (Stake memory) {\\r\\n    return stakes[_owner][_tokenId];\\r\\n  }\\r\\n\\r\\n  function getStakedNFTs(\\r\\n    address _owner\\r\\n  ) external view returns (uint256[] memory) {\\r\\n    return stakedNFTs[_owner];\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/AsterfiStakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\r\\n\\r\\ncontract AsterfiStakingContract {\\r\\n  struct Stake {\\r\\n    address owner;\\r\\n    uint256 tokenId;\\r\\n    uint256 stakedAt;\\r\\n    uint256 unstakeAvailableAt;\\r\\n    bool active;\\r\\n  }\\r\\n\\r\\n  mapping(address => mapping(uint256 => Stake)) public stakes;\\r\\n  mapping(address => uint256[]) public stakedNFTs;\\r\\n\\r\\n  uint256 public stakingPeriod = 1 minutes;\\r\\n  IERC721 public _AsterFiContract;\\r\\n\\r\\n  constructor() {\\r\\n    _AsterFiContract = IERC721(0xc6Bf836Eb4c65ac7546c1399239Cc9f45A1D0725);\\r\\n  }\\r\\n\\r\\n  function stake(uint256 _tokenId) external {\\r\\n    require(\\r\\n      _AsterFiContract.ownerOf(_tokenId) == msg.sender,\\r\\n      \\\"You don't own this NFT\\\"\\r\\n    );\\r\\n    require(stakes[msg.sender][_tokenId].active == false, 'NFT already staked');\\r\\n\\r\\n    stakes[msg.sender][_tokenId] = Stake(\\r\\n      msg.sender,\\r\\n      _tokenId,\\r\\n      block.timestamp,\\r\\n      block.timestamp + stakingPeriod,\\r\\n      true\\r\\n    );\\r\\n\\r\\n    stakedNFTs[msg.sender].push(_tokenId);\\r\\n\\r\\n    _AsterFiContract.transferFrom(msg.sender, address(this), _tokenId);\\r\\n  }\\r\\n\\r\\n  function unstake(uint256 _tokenId) external {\\r\\n    require(stakes[msg.sender][_tokenId].active == true, 'NFT not staked');\\r\\n    require(\\r\\n      stakes[msg.sender][_tokenId].unstakeAvailableAt <= block.timestamp,\\r\\n      'Cannot unstake yet'\\r\\n    );\\r\\n\\r\\n    uint256[] storage userStakedNFTs = stakedNFTs[msg.sender];\\r\\n    for (uint256 i = 0; i < userStakedNFTs.length; i++) {\\r\\n      if (userStakedNFTs[i] == _tokenId) {\\r\\n        userStakedNFTs[i] = userStakedNFTs[userStakedNFTs.length - 1];\\r\\n        userStakedNFTs.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    delete stakes[msg.sender][_tokenId];\\r\\n\\r\\n    _AsterFiContract.transferFrom(address(this), msg.sender, _tokenId);\\r\\n  }\\r\\n\\r\\n  function getStakeInfo(\\r\\n    address _owner,\\r\\n    uint256 _tokenId\\r\\n  ) external view returns (Stake memory) {\\r\\n    return stakes[_owner][_tokenId];\\r\\n  }\\r\\n\\r\\n  function getStakedNFTs(\\r\\n    address _owner\\r\\n  ) external view returns (uint256[] memory) {\\r\\n    return stakedNFTs[_owner];\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/credit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.23;\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\nimport './AsterfiStaking.sol';\\r\\n\\r\\ncontract CreditToken is Ownable2Step, ReentrancyGuard {\\r\\n  using Address for address;\\r\\n  AsterFiStaking private stakingContract;\\r\\n\\r\\n  address private constant ASTERFI_STAKING_CONTRACT =\\r\\n    0xa737CeC05f054e4f82d585e82fBbF9d3286CB5CC;\\r\\n\\r\\n  address public sipherToken = 0xE985A820e4862a0C1f8c10D23433509FB9465f6E;\\r\\n\\r\\n  uint256 public constant REWARD_AMOUNT = 10_000_000;\\r\\n  uint256 public constant REWARD_AMOUNT_PER_PERIOD = 2_500_000;\\r\\n  uint256 public minimumSwapAmount = 100;\\r\\n  uint256 public howMuchCreditEqualOneToken = 100;\\r\\n  uint8 public constant TOTAL_REWARD_STEPS = 4;\\r\\n\\r\\n  string private constant NAME = 'Credit Token';\\r\\n  string private constant SYMBOL = 'CREDIT';\\r\\n  uint64 private constant STAKING_PERIOD = 1 minutes;\\r\\n  uint64 private constant REWARD_INTERVAL = 3 minutes;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n  mapping(address => uint256) private _balances;\\r\\n\\r\\n  struct Reward {\\r\\n    uint256 tokenId;\\r\\n    uint8 remainingSteps;\\r\\n    uint256 nextRewardAvailableAt;\\r\\n    uint256 lastRewardClaimedAt;\\r\\n    uint256 stakeAt;\\r\\n  }\\r\\n\\r\\n  mapping(address => mapping(uint256 => Reward)) public addressRewards;\\r\\n\\r\\n  modifier validAmount(uint256 amount) {\\r\\n    require(amount > 0, 'CREDIT: amount must be greater than 0');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    stakingContract = AsterFiStaking(ASTERFI_STAKING_CONTRACT);\\r\\n  }\\r\\n\\r\\n  function setHowMuchCreditEqualOneToken(\\r\\n    uint256 _newHowMuchCreditEqualOneToken\\r\\n  ) external onlyOwner {\\r\\n    howMuchCreditEqualOneToken = _newHowMuchCreditEqualOneToken;\\r\\n  }\\r\\n\\r\\n  function setMinimumSwapAmount(\\r\\n    uint256 _newMinimumSwapAmount\\r\\n  ) external onlyOwner {\\r\\n    minimumSwapAmount = _newMinimumSwapAmount;\\r\\n  }\\r\\n\\r\\n  function setSipherToken(address _sipherToken) external onlyOwner {\\r\\n    require(\\r\\n      _sipherToken.isContract(),\\r\\n      'CREDIT: sipher token is not contract address'\\r\\n    );\\r\\n    sipherToken = _sipherToken;\\r\\n  }\\r\\n\\r\\n  function name() external pure returns (string memory) {\\r\\n    return NAME;\\r\\n  }\\r\\n\\r\\n  function symbol() external pure returns (string memory) {\\r\\n    return SYMBOL;\\r\\n  }\\r\\n\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function getStakedTokensDetails(\\r\\n    address _address\\r\\n  ) public view returns (AsterFiStaking.Stake[] memory) {\\r\\n    uint256[] memory stakedTokenIds = stakingContract.getStakedNFTs(_address);\\r\\n    AsterFiStaking.Stake[] memory stakedTokens = new AsterFiStaking.Stake[](\\r\\n      stakedTokenIds.length\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 0; i < stakedTokenIds.length; ) {\\r\\n      stakedTokens[i] = stakingContract.getStakeInfo(\\r\\n        _address,\\r\\n        stakedTokenIds[i]\\r\\n      );\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return stakedTokens;\\r\\n  }\\r\\n\\r\\n  function getActiveStakedTokensReadyToCheckClaimReward(\\r\\n    address _address\\r\\n  ) external view returns (AsterFiStaking.Stake[] memory) {\\r\\n    AsterFiStaking.Stake[] memory allStakedTokens = getStakedTokensDetails(\\r\\n      _address\\r\\n    );\\r\\n    uint256 activeTokenCount = 0;\\r\\n    AsterFiStaking.Stake[]\\r\\n      memory activeStakedTokens = new AsterFiStaking.Stake[](\\r\\n        allStakedTokens.length\\r\\n      );\\r\\n\\r\\n    for (uint256 i = 0; i < allStakedTokens.length; ) {\\r\\n      AsterFiStaking.Stake memory stake = allStakedTokens[i];\\r\\n      if (isStakedTokenReadyToClaimReward(_address, stake.tokenId)) {\\r\\n        activeStakedTokens[activeTokenCount++] = stake;\\r\\n      }\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    AsterFiStaking.Stake[] memory result = new AsterFiStaking.Stake[](\\r\\n      activeTokenCount\\r\\n    );\\r\\n    for (uint256 i = 0; i < activeTokenCount; ) {\\r\\n      result[i] = activeStakedTokens[i];\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  function claimReward(uint256 _tokenId) external nonReentrant {\\r\\n    AsterFiStaking.Stake memory stakeInfo = stakingContract.getStakeInfo(\\r\\n      msg.sender,\\r\\n      _tokenId\\r\\n    );\\r\\n    require(\\r\\n      stakeInfo.owner == msg.sender,\\r\\n      'CREDIT: you are not the owner of this stake'\\r\\n    );\\r\\n    require(\\r\\n      isStakedTokenReadyToClaimReward(msg.sender, _tokenId),\\r\\n      'CREDIT: token is not ready to claim a reward'\\r\\n    );\\r\\n\\r\\n    _claimReward(\\r\\n      msg.sender,\\r\\n      _tokenId,\\r\\n      REWARD_AMOUNT_PER_PERIOD,\\r\\n      stakeInfo.stakedAt\\r\\n    );\\r\\n\\r\\n    emit ClaimReward(\\r\\n      msg.sender,\\r\\n      _tokenId,\\r\\n      REWARD_AMOUNT_PER_PERIOD,\\r\\n      block.timestamp,\\r\\n      block.timestamp + REWARD_INTERVAL,\\r\\n      stakeInfo.stakedAt\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _claimReward(\\r\\n    address _address,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _rewardAmount,\\r\\n    uint256 _stakeAt\\r\\n  ) internal {\\r\\n    Reward memory reward = getReward(_address, _tokenId);\\r\\n    uint8 remainingStep;\\r\\n\\r\\n    if (reward.remainingSteps == 0 || reward.stakeAt != _stakeAt) {\\r\\n      remainingStep = TOTAL_REWARD_STEPS - 1;\\r\\n    } else {\\r\\n      remainingStep = reward.remainingSteps - 1;\\r\\n    }\\r\\n\\r\\n    addressRewards[_address][_tokenId] = Reward({\\r\\n      tokenId: _tokenId,\\r\\n      remainingSteps: remainingStep,\\r\\n      lastRewardClaimedAt: block.timestamp,\\r\\n      nextRewardAvailableAt: block.timestamp + REWARD_INTERVAL,\\r\\n      stakeAt: _stakeAt\\r\\n    });\\r\\n\\r\\n    _mint(_address, _rewardAmount);\\r\\n  }\\r\\n\\r\\n  function getReward(\\r\\n    address _address,\\r\\n    uint256 _tokenId\\r\\n  ) public view returns (Reward memory) {\\r\\n    Reward storage reward = addressRewards[_address][_tokenId];\\r\\n\\r\\n    AsterFiStaking.Stake memory stake = stakingContract.getStakeInfo(\\r\\n      _address,\\r\\n      _tokenId\\r\\n    );\\r\\n\\r\\n    if (stake.stakedAt + STAKING_PERIOD < block.timestamp && stake.active) {\\r\\n      return reward;\\r\\n    }\\r\\n\\r\\n    return Reward(0, 0, 0, 0, 0);\\r\\n  }\\r\\n\\r\\n  function getRewardsOf(\\r\\n    address _address\\r\\n  ) external view returns (Reward[] memory) {\\r\\n    uint256[] memory stakedTokenIds = stakingContract.getStakedNFTs(_address);\\r\\n    Reward[] memory allRewards = new Reward[](stakedTokenIds.length);\\r\\n\\r\\n    for (uint256 i = 0; i < stakedTokenIds.length; ) {\\r\\n      allRewards[i] = getReward(_address, stakedTokenIds[i]);\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return allRewards;\\r\\n  }\\r\\n\\r\\n  function getRewardsForBatch(\\r\\n    address _address,\\r\\n    uint256[] memory tokenIds\\r\\n  ) external view returns (Reward[] memory) {\\r\\n    Reward[] memory batchRewards = new Reward[](tokenIds.length);\\r\\n\\r\\n    for (uint256 i = 0; i < tokenIds.length; ) {\\r\\n      batchRewards[i] = getReward(_address, tokenIds[i]);\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return batchRewards;\\r\\n  }\\r\\n\\r\\n  function getAvailableTokensIdForReward(\\r\\n    address _address\\r\\n  ) external view returns (uint256[] memory) {\\r\\n    uint256[] memory stakedTokenIds = stakingContract.getStakedNFTs(_address);\\r\\n\\r\\n    uint256[] memory tokensAvailable = new uint256[](stakedTokenIds.length);\\r\\n\\r\\n    uint256 availableCount = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < stakedTokenIds.length; ) {\\r\\n      uint256 tokenId = stakedTokenIds[i];\\r\\n      if (isStakedTokenReadyToClaimReward(_address, tokenId)) {\\r\\n        tokensAvailable[availableCount++] = tokenId;\\r\\n      }\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    assembly {\\r\\n      mstore(tokensAvailable, availableCount)\\r\\n    }\\r\\n\\r\\n    return tokensAvailable;\\r\\n  }\\r\\n\\r\\n  function isStakedTokenReadyToClaimReward(\\r\\n    address _address,\\r\\n    uint256 _tokenId\\r\\n  ) public view returns (bool) {\\r\\n    Reward memory reward = getReward(_address, _tokenId);\\r\\n\\r\\n    AsterFiStaking.Stake memory stake = stakingContract.getStakeInfo(\\r\\n      _address,\\r\\n      _tokenId\\r\\n    );\\r\\n\\r\\n    if (reward.nextRewardAvailableAt == 0 && reward.lastRewardClaimedAt == 0) {\\r\\n      return stake.stakedAt + STAKING_PERIOD < block.timestamp && stake.active;\\r\\n    }\\r\\n\\r\\n    return\\r\\n      stake.stakedAt + STAKING_PERIOD < block.timestamp &&\\r\\n      stake.active &&\\r\\n      block.timestamp > reward.nextRewardAvailableAt;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) public view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function _mint(address account, uint256 amount) private validAmount(amount) {\\r\\n    _totalSupply += amount;\\r\\n    _balances[account] += amount;\\r\\n\\r\\n    emit Mint(account, amount);\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) private validAmount(amount) {\\r\\n    uint256 accountBalance = _balances[account];\\r\\n    require(accountBalance >= amount, 'CREDIT: burn amount exceeds balance');\\r\\n\\r\\n    _balances[account] = accountBalance - amount;\\r\\n    _totalSupply -= amount;\\r\\n\\r\\n    emit Burn(account, amount);\\r\\n  }\\r\\n\\r\\n  function swap(uint256 amount) external nonReentrant validAmount(amount) {\\r\\n    require(sipherToken != address(0), 'CREDIT: sipher token not set');\\r\\n    require(balanceOf(msg.sender) >= amount, 'CREDIT: insufficient fund');\\r\\n    require(\\r\\n      amount >= minimumSwapAmount,\\r\\n      'CREDIT: amount must be greater than minimum swap amount'\\r\\n    );\\r\\n\\r\\n    IERC20 token = IERC20(sipherToken);\\r\\n\\r\\n    uint256 amountOut = (amount * 10 ** 18) / howMuchCreditEqualOneToken;\\r\\n\\r\\n    require(\\r\\n      token.balanceOf(address(this)) >= amountOut,\\r\\n      'CREDIT: insufficient sipher balance in the contract'\\r\\n    );\\r\\n\\r\\n    _burn(msg.sender, amount);\\r\\n\\r\\n    token.transfer(address(this), amountOut);\\r\\n    emit Swap(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function withdrawSipher(\\r\\n    uint256 amount\\r\\n  ) external onlyOwner validAmount(amount) {\\r\\n    IERC20 token = IERC20(sipherToken);\\r\\n    require(\\r\\n      token.balanceOf(address(this)) >= amount,\\r\\n      'CREDIT: insufficient balance in the contract'\\r\\n    );\\r\\n    token.transfer(owner(), amount);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount) external onlyOwner validAmount(amount) {\\r\\n    require(address(this).balance >= amount, 'Tiny: insufficient balance');\\r\\n\\r\\n    payable(owner()).transfer(amount);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  function getContractBalance() external view returns (uint256) {\\r\\n    return address(this).balance;\\r\\n  }\\r\\n\\r\\n  event ClaimReward(\\r\\n    address indexed _address,\\r\\n    uint256 indexed _tokenId,\\r\\n    uint256 rewardAmount,\\r\\n    uint256 claimedAt,\\r\\n    uint256 nextClaimAt,\\r\\n    uint256 stakedAt\\r\\n  );\\r\\n  event Mint(address indexed to, uint256 amount);\\r\\n  event Burn(address indexed from, uint256 amount);\\r\\n  event Swap(address indexed account, uint256 amount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC721A.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721 token receiver.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n  function onERC721Received(\\r\\n    address operator,\\r\\n    address from,\\r\\n    uint256 tokenId,\\r\\n    bytes calldata data\\r\\n  ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC721A\\r\\n *\\r\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\r\\n * Non-Fungible Token Standard, including the Metadata extension.\\r\\n * Optimized for lower gas during batch mints.\\r\\n *\\r\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\r\\n * starting from `_startTokenId()`.\\r\\n *\\r\\n * Assumptions:\\r\\n *\\r\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n  // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\r\\n  struct TokenApprovalRef {\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                           CONSTANTS\\r\\n  // =============================================================\\r\\n\\r\\n  // Mask of an entry in packed address data.\\r\\n  uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\r\\n\\r\\n  // The bit position of `numberMinted` in packed address data.\\r\\n  uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n  // The bit position of `numberBurned` in packed address data.\\r\\n  uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n  // The bit position of `aux` in packed address data.\\r\\n  uint256 private constant _BITPOS_AUX = 192;\\r\\n\\r\\n  // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n  uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\r\\n\\r\\n  // The bit position of `startTimestamp` in packed ownership.\\r\\n  uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n  // The bit mask of the `burned` bit in packed ownership.\\r\\n  uint256 private constant _BITMASK_BURNED = 1 << 224;\\r\\n\\r\\n  // The bit position of the `nextInitialized` bit in packed ownership.\\r\\n  uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n  // The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n  uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\r\\n\\r\\n  // The bit position of `extraData` in packed ownership.\\r\\n  uint256 private constant _BITPOS_EXTRA_DATA = 232;\\r\\n\\r\\n  // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\r\\n  uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\r\\n\\r\\n  // The mask of the lower 160 bits for addresses.\\r\\n  uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n  // The maximum `quantity` that can be minted with {_mintERC2309}.\\r\\n  // This limit is to prevent overflows on the address data entries.\\r\\n  // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\r\\n  // is required to cause an overflow, which is unrealistic.\\r\\n  uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\r\\n\\r\\n  // The `Transfer` event signature is given by:\\r\\n  // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\r\\n  bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\r\\n    0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\r\\n\\r\\n  // =============================================================\\r\\n  //                            STORAGE\\r\\n  // =============================================================\\r\\n\\r\\n  // The next token ID to be minted.\\r\\n  uint256 private _currentIndex;\\r\\n\\r\\n  // The number of tokens burned.\\r\\n  uint256 private _burnCounter;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to ownership details\\r\\n  // An empty struct value does not necessarily mean the token is unowned.\\r\\n  // See {_packedOwnershipOf} implementation for details.\\r\\n  //\\r\\n  // Bits Layout:\\r\\n  // - [0..159]   `addr`\\r\\n  // - [160..223] `startTimestamp`\\r\\n  // - [224]      `burned`\\r\\n  // - [225]      `nextInitialized`\\r\\n  // - [232..255] `extraData`\\r\\n  mapping(uint256 => uint256) private _packedOwnerships;\\r\\n\\r\\n  // Mapping owner address to address data.\\r\\n  //\\r\\n  // Bits Layout:\\r\\n  // - [0..63]    `balance`\\r\\n  // - [64..127]  `numberMinted`\\r\\n  // - [128..191] `numberBurned`\\r\\n  // - [192..255] `aux`\\r\\n  mapping(address => uint256) private _packedAddressData;\\r\\n\\r\\n  // Mapping from token ID to approved address.\\r\\n  mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  // =============================================================\\r\\n  //                          CONSTRUCTOR\\r\\n  // =============================================================\\r\\n\\r\\n  constructor(string memory name_, string memory symbol_) {\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    _currentIndex = _startTokenId();\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                   TOKEN COUNTING OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the starting token ID.\\r\\n   * To change the starting token ID, please override this function.\\r\\n   */\\r\\n  function _startTokenId() internal view virtual returns (uint256) {\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the next token ID to be minted.\\r\\n   */\\r\\n  function _nextTokenId() internal view virtual returns (uint256) {\\r\\n    return _currentIndex;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total number of tokens in existence.\\r\\n   * Burned tokens will reduce the count.\\r\\n   * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n   */\\r\\n  function totalSupply() public view virtual override returns (uint256) {\\r\\n    // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n    // more than `_currentIndex - _startTokenId()` times.\\r\\n    unchecked {\\r\\n      return _currentIndex - _burnCounter - _startTokenId();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total amount of tokens minted in the contract.\\r\\n   */\\r\\n  function _totalMinted() internal view virtual returns (uint256) {\\r\\n    // Counter underflow is impossible as `_currentIndex` does not decrement,\\r\\n    // and it is initialized to `_startTokenId()`.\\r\\n    unchecked {\\r\\n      return _currentIndex - _startTokenId();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total number of tokens burned.\\r\\n   */\\r\\n  function _totalBurned() internal view virtual returns (uint256) {\\r\\n    return _burnCounter;\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                    ADDRESS DATA OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of tokens in `owner`'s account.\\r\\n   */\\r\\n  function balanceOf(\\r\\n    address owner\\r\\n  ) public view virtual override returns (uint256) {\\r\\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n    return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the number of tokens minted by `owner`.\\r\\n   */\\r\\n  function _numberMinted(address owner) internal view returns (uint256) {\\r\\n    return\\r\\n      (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) &\\r\\n      _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n   */\\r\\n  function _numberBurned(address owner) internal view returns (uint256) {\\r\\n    return\\r\\n      (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) &\\r\\n      _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n   */\\r\\n  function _getAux(address owner) internal view returns (uint64) {\\r\\n    return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n   * If there are multiple variables, please pack them into a uint64.\\r\\n   */\\r\\n  function _setAux(address owner, uint64 aux) internal virtual {\\r\\n    uint256 packed = _packedAddressData[owner];\\r\\n    uint256 auxCasted;\\r\\n    // Cast `aux` with assembly to avoid redundant masking.\\r\\n    assembly {\\r\\n      auxCasted := aux\\r\\n    }\\r\\n    packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\r\\n    _packedAddressData[owner] = packed;\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                            IERC165\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30000 gas.\\r\\n   */\\r\\n  function supportsInterface(\\r\\n    bytes4 interfaceId\\r\\n  ) public view virtual override returns (bool) {\\r\\n    // The interface IDs are constants representing the first 4 bytes\\r\\n    // of the XOR of all function selectors in the interface.\\r\\n    // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\r\\n    // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\r\\n    return\\r\\n      interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n      interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n      interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                        IERC721Metadata\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token collection name.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token collection symbol.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n   */\\r\\n  function tokenURI(\\r\\n    uint256 tokenId\\r\\n  ) public view virtual override returns (string memory) {\\r\\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return\\r\\n      bytes(baseURI).length != 0\\r\\n        ? string(abi.encodePacked(baseURI, _toString(tokenId)))\\r\\n        : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, it can be overridden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                     OWNERSHIPS OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the owner of the `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function ownerOf(\\r\\n    uint256 tokenId\\r\\n  ) public view virtual override returns (address) {\\r\\n    return address(uint160(_packedOwnershipOf(tokenId)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gas spent here starts off proportional to the maximum mint batch size.\\r\\n   * It gradually moves to O(1) as tokens get transferred around over time.\\r\\n   */\\r\\n  function _ownershipOf(\\r\\n    uint256 tokenId\\r\\n  ) internal view virtual returns (TokenOwnership memory) {\\r\\n    return _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n   */\\r\\n  function _ownershipAt(\\r\\n    uint256 index\\r\\n  ) internal view virtual returns (TokenOwnership memory) {\\r\\n    return _unpackedOwnership(_packedOwnerships[index]);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n   */\\r\\n  function _initializeOwnershipAt(uint256 index) internal virtual {\\r\\n    if (_packedOwnerships[index] == 0) {\\r\\n      _packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the packed ownership data of `tokenId`.\\r\\n   */\\r\\n  function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\r\\n    uint256 curr = tokenId;\\r\\n\\r\\n    unchecked {\\r\\n      if (_startTokenId() <= curr)\\r\\n        if (curr < _currentIndex) {\\r\\n          uint256 packed = _packedOwnerships[curr];\\r\\n          // If not burned.\\r\\n          if (packed & _BITMASK_BURNED == 0) {\\r\\n            // Invariant:\\r\\n            // There will always be an initialized ownership slot\\r\\n            // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\r\\n            // before an unintialized ownership slot\\r\\n            // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\r\\n            // Hence, `curr` will not underflow.\\r\\n            //\\r\\n            // We can directly compare the packed value.\\r\\n            // If the address is zero, packed will be zero.\\r\\n            while (packed == 0) {\\r\\n              packed = _packedOwnerships[--curr];\\r\\n            }\\r\\n            return packed;\\r\\n          }\\r\\n        }\\r\\n    }\\r\\n    revert OwnerQueryForNonexistentToken();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n   */\\r\\n  function _unpackedOwnership(\\r\\n    uint256 packed\\r\\n  ) private pure returns (TokenOwnership memory ownership) {\\r\\n    ownership.addr = address(uint160(packed));\\r\\n    ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\r\\n    ownership.burned = packed & _BITMASK_BURNED != 0;\\r\\n    ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Packs ownership data into a single uint256.\\r\\n   */\\r\\n  function _packOwnershipData(\\r\\n    address owner,\\r\\n    uint256 flags\\r\\n  ) private view returns (uint256 result) {\\r\\n    assembly {\\r\\n      // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n      owner := and(owner, _BITMASK_ADDRESS)\\r\\n      // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\r\\n      result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\r\\n   */\\r\\n  function _nextInitializedFlag(\\r\\n    uint256 quantity\\r\\n  ) private pure returns (uint256 result) {\\r\\n    // For branchless setting of the `nextInitialized` flag.\\r\\n    assembly {\\r\\n      // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\r\\n      result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                      APPROVAL OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n   * The approval is cleared when the token is transferred.\\r\\n   *\\r\\n   * Only a single account can be approved at a time, so approving the\\r\\n   * zero address clears previous approvals.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The caller must own the token or be an approved operator.\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public payable virtual override {\\r\\n    address owner = ownerOf(tokenId);\\r\\n\\r\\n    if (_msgSenderERC721A() != owner)\\r\\n      if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n        revert ApprovalCallerNotOwnerNorApproved();\\r\\n      }\\r\\n\\r\\n    _tokenApprovals[tokenId].value = to;\\r\\n    emit Approval(owner, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the account approved for `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function getApproved(\\r\\n    uint256 tokenId\\r\\n  ) public view virtual override returns (address) {\\r\\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n    return _tokenApprovals[tokenId].value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve or remove `operator` as an operator for the caller.\\r\\n   * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n   * for any token owned by the caller.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The `operator` cannot be the caller.\\r\\n   *\\r\\n   * Emits an {ApprovalForAll} event.\\r\\n   */\\r\\n  function setApprovalForAll(\\r\\n    address operator,\\r\\n    bool approved\\r\\n  ) public virtual override {\\r\\n    _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n   *\\r\\n   * See {setApprovalForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(\\r\\n    address owner,\\r\\n    address operator\\r\\n  ) public view virtual override returns (bool) {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted. See {_mint}.\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n    return\\r\\n      _startTokenId() <= tokenId &&\\r\\n      tokenId < _currentIndex && // If within bounds,\\r\\n      _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\r\\n   */\\r\\n  function _isSenderApprovedOrOwner(\\r\\n    address approvedAddress,\\r\\n    address owner,\\r\\n    address msgSender\\r\\n  ) private pure returns (bool result) {\\r\\n    assembly {\\r\\n      // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n      owner := and(owner, _BITMASK_ADDRESS)\\r\\n      // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n      msgSender := and(msgSender, _BITMASK_ADDRESS)\\r\\n      // `msgSender == owner || msgSender == approvedAddress`.\\r\\n      result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the storage slot and value for the approved address of `tokenId`.\\r\\n   */\\r\\n  function _getApprovedSlotAndAddress(\\r\\n    uint256 tokenId\\r\\n  )\\r\\n    private\\r\\n    view\\r\\n    returns (uint256 approvedAddressSlot, address approvedAddress)\\r\\n  {\\r\\n    TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\r\\n    // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\r\\n    assembly {\\r\\n      approvedAddressSlot := tokenApproval.slot\\r\\n      approvedAddress := sload(approvedAddressSlot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                      TRANSFER OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token\\r\\n   * by either {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public payable virtual override {\\r\\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n    if (address(uint160(prevOwnershipPacked)) != from)\\r\\n      revert TransferFromIncorrectOwner();\\r\\n\\r\\n    (\\r\\n      uint256 approvedAddressSlot,\\r\\n      address approvedAddress\\r\\n    ) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n    // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n    if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\r\\n      if (!isApprovedForAll(from, _msgSenderERC721A()))\\r\\n        revert TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n    if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n    // Clear approvals from the previous owner.\\r\\n    assembly {\\r\\n      if approvedAddress {\\r\\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n        sstore(approvedAddressSlot, 0)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Underflow of the sender's balance is impossible because we check for\\r\\n    // ownership above and the recipient's balance can't realistically overflow.\\r\\n    // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n    unchecked {\\r\\n      // We can directly increment and decrement the balances.\\r\\n      --_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n      ++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n      // Updates:\\r\\n      // - `address` to the next owner.\\r\\n      // - `startTimestamp` to the timestamp of transfering.\\r\\n      // - `burned` to `false`.\\r\\n      // - `nextInitialized` to `true`.\\r\\n      _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n        to,\\r\\n        _BITMASK_NEXT_INITIALIZED |\\r\\n          _nextExtraData(from, to, prevOwnershipPacked)\\r\\n      );\\r\\n\\r\\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n      if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n        uint256 nextTokenId = tokenId + 1;\\r\\n        // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n        if (_packedOwnerships[nextTokenId] == 0) {\\r\\n          // If the next slot is within bounds.\\r\\n          if (nextTokenId != _currentIndex) {\\r\\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n    _afterTokenTransfers(from, to, tokenId, 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public payable virtual override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token\\r\\n   * by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement\\r\\n   * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public payable virtual override {\\r\\n    transferFrom(from, to, tokenId);\\r\\n    if (to.code.length != 0)\\r\\n      if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n        revert TransferToNonERC721ReceiverImplementer();\\r\\n      }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before a set of serially-ordered token IDs\\r\\n   * are about to be transferred. This includes minting.\\r\\n   * And also called before burning one token.\\r\\n   *\\r\\n   * `startTokenId` - the first token ID to be transferred.\\r\\n   * `quantity` - the amount to be transferred.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _beforeTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after a set of serially-ordered token IDs\\r\\n   * have been transferred. This includes minting.\\r\\n   * And also called after one token has been burned.\\r\\n   *\\r\\n   * `startTokenId` - the first token ID to be transferred.\\r\\n   * `quantity` - the amount to be transferred.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n   * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _afterTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n   *\\r\\n   * `from` - Previous owner of the given token ID.\\r\\n   * `to` - Target address that will receive the token.\\r\\n   * `tokenId` - Token ID to be transferred.\\r\\n   * `_data` - Optional data to send along with the call.\\r\\n   *\\r\\n   * Returns whether the call correctly returned the expected magic value.\\r\\n   */\\r\\n  function _checkContractOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    try\\r\\n      ERC721A__IERC721Receiver(to).onERC721Received(\\r\\n        _msgSenderERC721A(),\\r\\n        from,\\r\\n        tokenId,\\r\\n        _data\\r\\n      )\\r\\n    returns (bytes4 retval) {\\r\\n      return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n    } catch (bytes memory reason) {\\r\\n      if (reason.length == 0) {\\r\\n        revert TransferToNonERC721ReceiverImplementer();\\r\\n      } else {\\r\\n        assembly {\\r\\n          revert(add(32, reason), mload(reason))\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                        MINT OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` must be greater than 0.\\r\\n   *\\r\\n   * Emits a {Transfer} event for each mint.\\r\\n   */\\r\\n  function _mint(address to, uint256 quantity) internal virtual {\\r\\n    uint256 startTokenId = _currentIndex;\\r\\n    if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n    // Overflows are incredibly unrealistic.\\r\\n    // `balance` and `numberMinted` have a maximum limit of 2**64.\\r\\n    // `tokenId` has a maximum limit of 2**256.\\r\\n    unchecked {\\r\\n      // Updates:\\r\\n      // - `balance += quantity`.\\r\\n      // - `numberMinted += quantity`.\\r\\n      //\\r\\n      // We can directly add to the `balance` and `numberMinted`.\\r\\n      _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n      // Updates:\\r\\n      // - `address` to the owner.\\r\\n      // - `startTimestamp` to the timestamp of minting.\\r\\n      // - `burned` to `false`.\\r\\n      // - `nextInitialized` to `quantity == 1`.\\r\\n      _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n        to,\\r\\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\r\\n      );\\r\\n\\r\\n      uint256 toMasked;\\r\\n      uint256 end = startTokenId + quantity;\\r\\n\\r\\n      // Use assembly to loop and emit the `Transfer` event for gas savings.\\r\\n      // The duplicated `log4` removes an extra check and reduces stack juggling.\\r\\n      // The assembly, together with the surrounding Solidity code, have been\\r\\n      // delicately arranged to nudge the compiler into producing optimized opcodes.\\r\\n      assembly {\\r\\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n        toMasked := and(to, _BITMASK_ADDRESS)\\r\\n        // Emit the `Transfer` event.\\r\\n        log4(\\r\\n          0, // Start of data (0, since no data).\\r\\n          0, // End of data (0, since no data).\\r\\n          _TRANSFER_EVENT_SIGNATURE, // Signature.\\r\\n          0, // `address(0)`.\\r\\n          toMasked, // `to`.\\r\\n          startTokenId // `tokenId`.\\r\\n        )\\r\\n\\r\\n        // The `iszero(eq(,))` check ensures that large values of `quantity`\\r\\n        // that overflows uint256 will make the loop run out of gas.\\r\\n        // The compiler will optimize the `iszero` away for performance.\\r\\n        for {\\r\\n          let tokenId := add(startTokenId, 1)\\r\\n        } iszero(eq(tokenId, end)) {\\r\\n          tokenId := add(tokenId, 1)\\r\\n        } {\\r\\n          // Emit the `Transfer` event. Similar to above.\\r\\n          log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\r\\n        }\\r\\n      }\\r\\n      if (toMasked == 0) revert MintToZeroAddress();\\r\\n\\r\\n      _currentIndex = end;\\r\\n    }\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * This function is intended for efficient minting only during contract creation.\\r\\n   *\\r\\n   * It emits only one {ConsecutiveTransfer} as defined in\\r\\n   * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\r\\n   * instead of a sequence of {Transfer} event(s).\\r\\n   *\\r\\n   * Calling this function outside of contract creation WILL make your contract\\r\\n   * non-compliant with the ERC721 standard.\\r\\n   * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\r\\n   * {ConsecutiveTransfer} event is only permissible during contract creation.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` must be greater than 0.\\r\\n   *\\r\\n   * Emits a {ConsecutiveTransfer} event.\\r\\n   */\\r\\n  function _mintERC2309(address to, uint256 quantity) internal virtual {\\r\\n    uint256 startTokenId = _currentIndex;\\r\\n    if (to == address(0)) revert MintToZeroAddress();\\r\\n    if (quantity == 0) revert MintZeroQuantity();\\r\\n    if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT)\\r\\n      revert MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n    // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\r\\n    unchecked {\\r\\n      // Updates:\\r\\n      // - `balance += quantity`.\\r\\n      // - `numberMinted += quantity`.\\r\\n      //\\r\\n      // We can directly add to the `balance` and `numberMinted`.\\r\\n      _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n      // Updates:\\r\\n      // - `address` to the owner.\\r\\n      // - `startTimestamp` to the timestamp of minting.\\r\\n      // - `burned` to `false`.\\r\\n      // - `nextInitialized` to `quantity == 1`.\\r\\n      _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n        to,\\r\\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\r\\n      );\\r\\n\\r\\n      emit ConsecutiveTransfer(\\r\\n        startTokenId,\\r\\n        startTokenId + quantity - 1,\\r\\n        address(0),\\r\\n        to\\r\\n      );\\r\\n\\r\\n      _currentIndex = startTokenId + quantity;\\r\\n    }\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - If `to` refers to a smart contract, it must implement\\r\\n   * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n   * - `quantity` must be greater than 0.\\r\\n   *\\r\\n   * See {_mint}.\\r\\n   *\\r\\n   * Emits a {Transfer} event for each mint.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 quantity,\\r\\n    bytes memory _data\\r\\n  ) internal virtual {\\r\\n    _mint(to, quantity);\\r\\n\\r\\n    unchecked {\\r\\n      if (to.code.length != 0) {\\r\\n        uint256 end = _currentIndex;\\r\\n        uint256 index = end - quantity;\\r\\n        do {\\r\\n          if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\r\\n            revert TransferToNonERC721ReceiverImplementer();\\r\\n          }\\r\\n        } while (index < end);\\r\\n        // Reentrancy protection.\\r\\n        if (_currentIndex != end) revert();\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Equivalent to `_safeMint(to, quantity, '')`.\\r\\n   */\\r\\n  function _safeMint(address to, uint256 quantity) internal virtual {\\r\\n    _safeMint(to, quantity, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                        BURN OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n   */\\r\\n  function _burn(uint256 tokenId) internal virtual {\\r\\n    _burn(tokenId, false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `tokenId`.\\r\\n   * The approval is cleared when the token is burned.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n    address from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n    (\\r\\n      uint256 approvedAddressSlot,\\r\\n      address approvedAddress\\r\\n    ) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n    if (approvalCheck) {\\r\\n      // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n      if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\r\\n        if (!isApprovedForAll(from, _msgSenderERC721A()))\\r\\n          revert TransferCallerNotOwnerNorApproved();\\r\\n    }\\r\\n\\r\\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n    // Clear approvals from the previous owner.\\r\\n    assembly {\\r\\n      if approvedAddress {\\r\\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n        sstore(approvedAddressSlot, 0)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Underflow of the sender's balance is impossible because we check for\\r\\n    // ownership above and the recipient's balance can't realistically overflow.\\r\\n    // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n    unchecked {\\r\\n      // Updates:\\r\\n      // - `balance -= 1`.\\r\\n      // - `numberBurned += 1`.\\r\\n      //\\r\\n      // We can directly decrement the balance, and increment the number burned.\\r\\n      // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\r\\n      _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n      // Updates:\\r\\n      // - `address` to the last owner.\\r\\n      // - `startTimestamp` to the timestamp of burning.\\r\\n      // - `burned` to `true`.\\r\\n      // - `nextInitialized` to `true`.\\r\\n      _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n        from,\\r\\n        (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) |\\r\\n          _nextExtraData(from, address(0), prevOwnershipPacked)\\r\\n      );\\r\\n\\r\\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n      if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n        uint256 nextTokenId = tokenId + 1;\\r\\n        // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n        if (_packedOwnerships[nextTokenId] == 0) {\\r\\n          // If the next slot is within bounds.\\r\\n          if (nextTokenId != _currentIndex) {\\r\\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, address(0), tokenId);\\r\\n    _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n    unchecked {\\r\\n      _burnCounter++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                     EXTRA DATA OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Directly sets the extra data for the ownership data `index`.\\r\\n   */\\r\\n  function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\r\\n    uint256 packed = _packedOwnerships[index];\\r\\n    if (packed == 0) revert OwnershipNotInitializedForExtraData();\\r\\n    uint256 extraDataCasted;\\r\\n    // Cast `extraData` with assembly to avoid redundant masking.\\r\\n    assembly {\\r\\n      extraDataCasted := extraData\\r\\n    }\\r\\n    packed =\\r\\n      (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) |\\r\\n      (extraDataCasted << _BITPOS_EXTRA_DATA);\\r\\n    _packedOwnerships[index] = packed;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Called during each token transfer to set the 24bit `extraData` field.\\r\\n   * Intended to be overridden by the cosumer contract.\\r\\n   *\\r\\n   * `previousExtraData` - the value of `extraData` before transfer.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _extraData(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint24 previousExtraData\\r\\n  ) internal view virtual returns (uint24) {}\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the next extra data for the packed ownership data.\\r\\n   * The returned result is shifted into position.\\r\\n   */\\r\\n  function _nextExtraData(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 prevOwnershipPacked\\r\\n  ) private view returns (uint256) {\\r\\n    uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\r\\n    return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                       OTHER OPERATIONS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n   *\\r\\n   * If you are writing GSN compatible contracts, you need to override this function.\\r\\n   */\\r\\n  function _msgSenderERC721A() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a uint256 to its ASCII string decimal representation.\\r\\n   */\\r\\n  function _toString(\\r\\n    uint256 value\\r\\n  ) internal pure virtual returns (string memory str) {\\r\\n    assembly {\\r\\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\r\\n      // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\r\\n      // We will need 1 word for the trailing zeros padding, 1 word for the length,\\r\\n      // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\r\\n      let m := add(mload(0x40), 0xa0)\\r\\n      // Update the free memory pointer to allocate.\\r\\n      mstore(0x40, m)\\r\\n      // Assign the `str` to the end.\\r\\n      str := sub(m, 0x20)\\r\\n      // Zeroize the slot after the string.\\r\\n      mstore(str, 0)\\r\\n\\r\\n      // Cache the end of the memory to calculate the length later.\\r\\n      let end := str\\r\\n\\r\\n      // We write the string from rightmost digit to leftmost digit.\\r\\n      // The following is essentially a do-while loop that also handles the zero case.\\r\\n      // prettier-ignore\\r\\n      for { let temp := value } 1 {} {\\r\\n                str := sub(str, 1)\\r\\n                // Write the character to the pointer.\\r\\n                // The ASCII index of the '0' character is 48.\\r\\n                mstore8(str, add(48, mod(temp, 10)))\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n                // prettier-ignore\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n      let length := sub(end, str)\\r\\n      // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n      str := sub(str, 0x20)\\r\\n      // Store the length.\\r\\n      mstore(str, length)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721A.\\r\\n */\\r\\ninterface IERC721A {\\r\\n  /**\\r\\n   * The caller must own the token or be an approved operator.\\r\\n   */\\r\\n  error ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n  /**\\r\\n   * The token does not exist.\\r\\n   */\\r\\n  error ApprovalQueryForNonexistentToken();\\r\\n\\r\\n  /**\\r\\n   * Cannot query the balance for the zero address.\\r\\n   */\\r\\n  error BalanceQueryForZeroAddress();\\r\\n\\r\\n  /**\\r\\n   * Cannot mint to the zero address.\\r\\n   */\\r\\n  error MintToZeroAddress();\\r\\n\\r\\n  /**\\r\\n   * The quantity of tokens minted must be more than zero.\\r\\n   */\\r\\n  error MintZeroQuantity();\\r\\n\\r\\n  /**\\r\\n   * The token does not exist.\\r\\n   */\\r\\n  error OwnerQueryForNonexistentToken();\\r\\n\\r\\n  /**\\r\\n   * The caller must own the token or be an approved operator.\\r\\n   */\\r\\n  error TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n  /**\\r\\n   * The token must be owned by `from`.\\r\\n   */\\r\\n  error TransferFromIncorrectOwner();\\r\\n\\r\\n  /**\\r\\n   * Cannot safely transfer to a contract that does not implement the\\r\\n   * ERC721Receiver interface.\\r\\n   */\\r\\n  error TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n  /**\\r\\n   * Cannot transfer to the zero address.\\r\\n   */\\r\\n  error TransferToZeroAddress();\\r\\n\\r\\n  /**\\r\\n   * The token does not exist.\\r\\n   */\\r\\n  error URIQueryForNonexistentToken();\\r\\n\\r\\n  /**\\r\\n   * The `quantity` minted with ERC2309 exceeds the safety limit.\\r\\n   */\\r\\n  error MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n  /**\\r\\n   * The `extraData` cannot be set on an unintialized ownership slot.\\r\\n   */\\r\\n  error OwnershipNotInitializedForExtraData();\\r\\n\\r\\n  // =============================================================\\r\\n  //                            STRUCTS\\r\\n  // =============================================================\\r\\n\\r\\n  struct TokenOwnership {\\r\\n    // The address of the owner.\\r\\n    address addr;\\r\\n    // Stores the start time of ownership with minimal overhead for tokenomics.\\r\\n    uint64 startTimestamp;\\r\\n    // Whether the token has been burned.\\r\\n    bool burned;\\r\\n    // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\r\\n    uint24 extraData;\\r\\n  }\\r\\n\\r\\n  // =============================================================\\r\\n  //                         TOKEN COUNTERS\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total number of tokens in existence.\\r\\n   * Burned tokens will reduce the count.\\r\\n   * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  // =============================================================\\r\\n  //                            IERC165\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n  // =============================================================\\r\\n  //                            IERC721\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n   */\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 indexed tokenId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n   */\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed approved,\\r\\n    uint256 indexed tokenId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables or disables\\r\\n   * (`approved`) `operator` to manage all of its assets.\\r\\n   */\\r\\n  event ApprovalForAll(\\r\\n    address indexed owner,\\r\\n    address indexed operator,\\r\\n    bool approved\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of tokens in `owner`'s account.\\r\\n   */\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the owner of the `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`,\\r\\n   * checking first that contract recipients are aware of the ERC721 protocol\\r\\n   * to prevent tokens from being forever locked.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be have been allowed to move\\r\\n   * this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement\\r\\n   * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes calldata data\\r\\n  ) external payable;\\r\\n\\r\\n  /**\\r\\n   * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external payable;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\r\\n   * whenever possible.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token\\r\\n   * by either {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external payable;\\r\\n\\r\\n  /**\\r\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n   * The approval is cleared when the token is transferred.\\r\\n   *\\r\\n   * Only a single account can be approved at a time, so approving the\\r\\n   * zero address clears previous approvals.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The caller must own the token or be an approved operator.\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) external payable;\\r\\n\\r\\n  /**\\r\\n   * @dev Approve or remove `operator` as an operator for the caller.\\r\\n   * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n   * for any token owned by the caller.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The `operator` cannot be the caller.\\r\\n   *\\r\\n   * Emits an {ApprovalForAll} event.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the account approved for `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function getApproved(\\r\\n    uint256 tokenId\\r\\n  ) external view returns (address operator);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n   *\\r\\n   * See {setApprovalForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(\\r\\n    address owner,\\r\\n    address operator\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  // =============================================================\\r\\n  //                        IERC721Metadata\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token collection name.\\r\\n   */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token collection symbol.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n  // =============================================================\\r\\n  //                           IERC2309\\r\\n  // =============================================================\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\r\\n   * (inclusive) is transferred from `from` to `to`, as defined in the\\r\\n   * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\r\\n   *\\r\\n   * See {_mintERC2309} for more details.\\r\\n   */\\r\\n  event ConsecutiveTransfer(\\r\\n    uint256 indexed fromTokenId,\\r\\n    uint256 toTokenId,\\r\\n    address indexed from,\\r\\n    address indexed to\\r\\n  );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Tiny.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.23;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\\r\\nimport '@openzeppelin/contracts/token/common/ERC2981.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\n\\r\\ncontract TinyBlazers is\\r\\n  ERC2981,\\r\\n  ReentrancyGuard,\\r\\n  Ownable2Step,\\r\\n  ERC721Enumerable\\r\\n{\\r\\n  using Strings for uint256;\\r\\n\\r\\n  uint256 public MAX_SUPPLY = 2000;\\r\\n  uint8 public mintableTokenPerWL = 1;\\r\\n  uint8 public mintableTokenForEachAddress = 3;\\r\\n  string private _contractURI;\\r\\n  mapping(address => uint8) private whitelistMintCount;\\r\\n  mapping(address => uint8) private publicMintCount;\\r\\n\\r\\n  uint256 public PublicMintPrice = 0;\\r\\n  uint256 public WhitelistMintPrice = 0;\\r\\n\\r\\n  string public BaseURI;\\r\\n  string public NotRevealedURI;\\r\\n  bytes32 public merkleRoot;\\r\\n  bool private pubSaleActive;\\r\\n  enum ContractStatus {\\r\\n    DEPLOY,\\r\\n    WL,\\r\\n    SALE,\\r\\n    SOLD\\r\\n  }\\r\\n\\r\\n  bool public REVEAL;\\r\\n  ContractStatus public contractStatus;\\r\\n\\r\\n  constructor() ERC721('Tiny Blazers', 'Tiny') {\\r\\n    contractStatus = ContractStatus.DEPLOY;\\r\\n    _setDefaultRoyalty(msg.sender, 300);\\r\\n  }\\r\\n\\r\\n  function whitelistMint(\\r\\n    bytes32[] calldata _merkleProof,\\r\\n    uint8 _quantity\\r\\n  ) external payable nonReentrant {\\r\\n    require(verifyAddress(_merkleProof, msg.sender), 'Tiny: INVALID_PROOF');\\r\\n    require(contractStatus != ContractStatus.SOLD, 'Tiny: sold out');\\r\\n    require(\\r\\n      contractStatus == ContractStatus.WL,\\r\\n      'Tiny: whitelist not started or is ended'\\r\\n    );\\r\\n    require(msg.value >= PublicMintPrice, 'Tiny: you need to send more ETH');\\r\\n    require(\\r\\n      totalSupply() + mintableTokenPerWL <= MAX_SUPPLY,\\r\\n      'Tiny: max supply exceed'\\r\\n    );\\r\\n    require(\\r\\n      whitelistMintCount[msg.sender] + _quantity <= mintableTokenPerWL,\\r\\n      'Tiny: max limit for minting reached'\\r\\n    );\\r\\n    _mintToken(msg.sender, _quantity, true);\\r\\n  }\\r\\n\\r\\n  function mint(uint8 _quantity) external payable nonReentrant {\\r\\n    require(contractStatus != ContractStatus.SOLD, 'Tiny: sold out');\\r\\n    require(contractStatus == ContractStatus.SALE, 'Tiny: sale not started');\\r\\n    uint256 _price = PublicMintPrice * _quantity;\\r\\n    require(msg.value >= _price, 'Tiny: you need to send more ETH');\\r\\n    require(totalSupply() + _quantity <= MAX_SUPPLY, 'Tiny: max supply exceed');\\r\\n    require(_quantity > 0, 'Tiny: mint at least 1 token');\\r\\n    require(\\r\\n      publicMintCount[msg.sender] + _quantity <= mintableTokenForEachAddress,\\r\\n      'Tiny: max limit for minting reached'\\r\\n    );\\r\\n    _mintToken(msg.sender, _quantity, false);\\r\\n  }\\r\\n\\r\\n  function _mintToken(\\r\\n    address _address,\\r\\n    uint8 _quantity,\\r\\n    bool _isWhitelistMint\\r\\n  ) private {\\r\\n    for (uint8 i = 0; i < _quantity; ) {\\r\\n      uint256 mintIndex = totalSupply();\\r\\n      _safeMint(_address, mintIndex);\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint256 _price = _isWhitelistMint\\r\\n      ? WhitelistMintPrice * _quantity\\r\\n      : PublicMintPrice * _quantity;\\r\\n\\r\\n    if (_price == 0) {\\r\\n      handleMintWithZeroPrice(_address, _quantity, _isWhitelistMint);\\r\\n    } else {\\r\\n      handleMintWithNonZeroPrice(_address, _quantity, _price, _isWhitelistMint);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function handleMintWithZeroPrice(\\r\\n    address _address,\\r\\n    uint8 _quantity,\\r\\n    bool _isWhitelistMint\\r\\n  ) private {\\r\\n    if (totalSupply() + _quantity == MAX_SUPPLY) {\\r\\n      contractStatus = ContractStatus.SOLD;\\r\\n    }\\r\\n\\r\\n    if (_isWhitelistMint) {\\r\\n      whitelistMintCount[_address] += _quantity;\\r\\n    } else {\\r\\n      publicMintCount[_address] += _quantity;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function handleMintWithNonZeroPrice(\\r\\n    address _address,\\r\\n    uint8 _quantity,\\r\\n    uint256 _price,\\r\\n    bool _isWhitelistMint\\r\\n  ) private {\\r\\n    (bool sent, ) = _address.call{value: msg.value - _price}('');\\r\\n    require(sent, 'Tiny: TX_FAILED');\\r\\n    handleMintWithZeroPrice(_address, _quantity, _isWhitelistMint);\\r\\n  }\\r\\n\\r\\n  function arrayQuantity(\\r\\n    uint8[] memory _quantityArray\\r\\n  ) private pure returns (uint256) {\\r\\n    uint256 _quantity;\\r\\n    for (uint8 i; i < _quantityArray.length; ) {\\r\\n      _quantity += _quantityArray[i];\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n    return _quantity;\\r\\n  }\\r\\n\\r\\n  function privateMint(\\r\\n    address[] memory _addresses,\\r\\n    uint8[] memory _quantities\\r\\n  ) external onlyOwner nonReentrant {\\r\\n    require(contractStatus != ContractStatus.SOLD, 'Tiny: sold out');\\r\\n    require(\\r\\n      _quantities.length == _addresses.length,\\r\\n      'Tiny: array length are not equal'\\r\\n    );\\r\\n    uint256 _quantity = arrayQuantity(_quantities);\\r\\n    require(_quantity > 0, 'Tiny: mint at least 1 token');\\r\\n\\r\\n    require(totalSupply() + _quantity <= MAX_SUPPLY, 'Tiny: max supply exceed');\\r\\n    if (totalSupply() + _quantity == MAX_SUPPLY) {\\r\\n      contractStatus = ContractStatus.SOLD;\\r\\n    }\\r\\n\\r\\n    for (uint8 i; i < _addresses.length; ) {\\r\\n      require(_addresses[i] != address(0), 'Tiny: zero address not allowed');\\r\\n      for (uint8 j = 0; j < _quantities[i]; ) {\\r\\n        uint256 mintIndex = totalSupply();\\r\\n        _safeMint(_addresses[i], mintIndex);\\r\\n        unchecked {\\r\\n          j++;\\r\\n        }\\r\\n      }\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setMerkleRoot(bytes32 _merkleRootHash) external onlyOwner {\\r\\n    merkleRoot = _merkleRootHash;\\r\\n  }\\r\\n\\r\\n  function verifyAddress(\\r\\n    bytes32[] calldata _merkleProof,\\r\\n    address _address\\r\\n  ) public view returns (bool) {\\r\\n    bytes32 leaf = keccak256(abi.encodePacked(_address));\\r\\n    return MerkleProof.verify(_merkleProof, merkleRoot, leaf);\\r\\n  }\\r\\n\\r\\n  function setMintableTokenForEachAddress(\\r\\n    uint8 _newMintableTokenForEachAddress\\r\\n  ) external onlyOwner {\\r\\n    mintableTokenForEachAddress = _newMintableTokenForEachAddress;\\r\\n  }\\r\\n\\r\\n  function setMintableTokenPerWL(\\r\\n    uint8 _newMintableTokenPerWL\\r\\n  ) external onlyOwner {\\r\\n    mintableTokenPerWL = _newMintableTokenPerWL;\\r\\n  }\\r\\n\\r\\n  function setPublicMintPrice(uint256 _newPublicMintPrice) external onlyOwner {\\r\\n    PublicMintPrice = _newPublicMintPrice;\\r\\n  }\\r\\n\\r\\n  function setWhitelistMintPrice(\\r\\n    uint256 _newWhitelistMintPrice\\r\\n  ) external onlyOwner {\\r\\n    WhitelistMintPrice = _newWhitelistMintPrice;\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 _value) external onlyOwner {\\r\\n    require(_value > 0, 'Tiny: value must be greater than zero');\\r\\n    require(address(this).balance >= _value, 'Tiny: insufficient balance');\\r\\n\\r\\n    payable(owner()).transfer(_value);\\r\\n  }\\r\\n\\r\\n  function startSale() external onlyOwner {\\r\\n    require(!pubSaleActive, 'Tiny: public sale already active');\\r\\n    pubSaleActive = true;\\r\\n    contractStatus = ContractStatus.SALE;\\r\\n  }\\r\\n\\r\\n  function startWhitelist() external onlyOwner {\\r\\n    require(\\r\\n      !pubSaleActive,\\r\\n      'Tiny: sale has been started, can not start whitelist'\\r\\n    );\\r\\n    contractStatus = ContractStatus.WL;\\r\\n  }\\r\\n\\r\\n  function startReveal() external onlyOwner {\\r\\n    REVEAL = true;\\r\\n  }\\r\\n\\r\\n  function setNotRevealedURI(string memory _URI) external onlyOwner {\\r\\n    NotRevealedURI = _URI;\\r\\n  }\\r\\n\\r\\n  function setBaseURI(string memory _URI) external onlyOwner {\\r\\n    BaseURI = _URI;\\r\\n  }\\r\\n\\r\\n  function setContractURI(string calldata _newContractURI) external onlyOwner {\\r\\n    _contractURI = _newContractURI;\\r\\n  }\\r\\n\\r\\n  function tokenURI(\\r\\n    uint256 _id\\r\\n  ) public view override(ERC721) returns (string memory) {\\r\\n    require(_exists(_id), 'Tiny: invalid token ID');\\r\\n    return\\r\\n      REVEAL\\r\\n        ? string(abi.encodePacked(BaseURI, _id.toString()))\\r\\n        : NotRevealedURI;\\r\\n  }\\r\\n\\r\\n  function contractURI() public view returns (string memory) {\\r\\n    return _contractURI;\\r\\n  }\\r\\n\\r\\n  function burn(uint256 _quantity) external onlyOwner nonReentrant {\\r\\n    require(\\r\\n      contractStatus != ContractStatus.SOLD,\\r\\n      'Tiny: contract is sold out'\\r\\n    );\\r\\n\\r\\n    require(_quantity != 0, 'Tiny: quantity should not equal zero');\\r\\n\\r\\n    uint256 remainingSupply = MAX_SUPPLY - totalSupply();\\r\\n\\r\\n    require(\\r\\n      _quantity <= remainingSupply,\\r\\n      'Tiny: quantity exceeds available supply'\\r\\n    );\\r\\n\\r\\n    if (_quantity == remainingSupply) {\\r\\n      contractStatus = ContractStatus.SOLD;\\r\\n    }\\r\\n\\r\\n    MAX_SUPPLY -= _quantity;\\r\\n  }\\r\\n\\r\\n  function setRoyaltyInfo(\\r\\n    address _receiver,\\r\\n    uint96 _royaltyFeesInBips\\r\\n  ) external onlyOwner {\\r\\n    require(_receiver != address(0), 'Tiny: zero address not allowed');\\r\\n    _setDefaultRoyalty(_receiver, _royaltyFeesInBips);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 firstTokenId,\\r\\n    uint256 batchSize\\r\\n  ) internal override(ERC721Enumerable) {\\r\\n    super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\r\\n  }\\r\\n\\r\\n  function supportsInterface(\\r\\n    bytes4 interfaceId\\r\\n  ) public view override(ERC721Enumerable, ERC2981) returns (bool) {\\r\\n    return super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  function _mint(address to, uint256 tokenId) internal virtual override {\\r\\n    uint256 newTokenId = tokenId + 1;\\r\\n    super._mint(to, newTokenId);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/TSipher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.23;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\\r\\n\\r\\ncontract TSipher is ERC20, Ownable2Step {\\r\\n  string private constant NAME = 'TSipher';\\r\\n  string private constant SYMBOL = 'TSPR';\\r\\n  uint256 private constant INITIAL_SUPPLY = 10_000_000_000 ether;\\r\\n\\r\\n  constructor() ERC20(NAME, SYMBOL) {\\r\\n    _mint(owner(), INITIAL_SUPPLY);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NotRevealedURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PublicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhitelistMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStatus\",\"outputs\":[{\"internalType\":\"enum TinyBlazers.ContractStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_quantity\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableTokenForEachAddress\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableTokenPerWL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_quantities\",\"type\":\"uint8[]\"}],\"name\":\"privateMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newContractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRootHash\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newMintableTokenForEachAddress\",\"type\":\"uint8\"}],\"name\":\"setMintableTokenForEachAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newMintableTokenPerWL\",\"type\":\"uint8\"}],\"name\":\"setMintableTokenPerWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_URI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPublicMintPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBips\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWhitelistMintPrice\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"verifyAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_quantity\",\"type\":\"uint8\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TinyBlazers", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "none"}