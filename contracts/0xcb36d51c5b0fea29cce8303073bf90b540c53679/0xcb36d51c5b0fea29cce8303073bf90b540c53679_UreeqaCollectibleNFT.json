{"SourceCode": "// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/OwnershipAgreementv3.sol\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n/// @title Creates an Ownership Agreement, with an optional Operator role\r\n/// @author Dr. Jonathan Shahen at UREEQA\r\n/// @notice TODO\r\n/// @dev Maximum number of Owners is set to 255 (unit8.MAX_VALUE)\r\ncontract OwnershipAgreementv3 {\r\n    /*\r\n     * Storage\r\n     */\r\n\r\n    // ResolutionTypes:\r\n    uint constant private resTypeNone = 0; // This indicates that the resolution hasn't been set (default value)\r\n    uint constant private resTypeAddOwner = 1;\r\n    uint constant private resTypeRemoveOwner = 2;\r\n    uint constant private resTypeReplaceOwner = 3;\r\n    uint constant private resTypeAddOperator = 4;\r\n    uint constant private resTypeRemoveOperator = 5;\r\n    uint constant private resTypeReplaceOperator = 6;\r\n    uint constant private resTypeUpdateThreshold = 7;\r\n    uint constant private resTypeUpdateTransactionLimit = 8;\r\n    uint constant private resTypePause = 9;\r\n    uint constant private resTypeUnpause = 10;\r\n    uint constant private resTypeCustom = 1000; // Custom resoutions for each subclass\r\n\r\n    struct Resolution {\r\n        // Has the resolution already been passed\r\n        bool passed;\r\n        // The type of resolution\r\n        uint256 resType;\r\n        // The old address, can be address(0). oldAddress and newAddress cannot both equal address(0).\r\n        address oldAddress;\r\n        // The new address, can be address(0). oldAddress and newAddress cannot both equal address(0).\r\n        address newAddress;\r\n        // Able to store extra information for custom resolutions\r\n        bytes32[] extra;\r\n    }\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    // Set of owners\r\n    // NOTE: we utilize a set, so we can enumerate the owners and so that the list only contains one instance of an account\r\n    // NOTE: address(0) is not a valid owner\r\n    EnumerableSet.AddressSet private _owners;\r\n    // Value to indicate if the smart contract is paused\r\n    bool private _paused;\r\n    // An address, usually controlled by a computer, that performs regular/automated operations within the smart contract\r\n    // NOTE: address(0) is not a valid operator\r\n    EnumerableSet.AddressSet private _operators;\r\n    // Limit the number of operators\r\n    uint256 public operatorLimit = 1;\r\n    // The number of owners it takes to come to an agreement\r\n    uint256 public ownerAgreementThreshold = 1;\r\n    // Limit per Transaction to impose\r\n    // A limit of zero means no limit imposed\r\n    uint256 public transactionLimit = 0;\r\n    // Stores each vote for each resolution number (int)\r\n    mapping(address => mapping(uint256 => bool)) public ownerVotes;\r\n    // The next available resolution number\r\n    uint256 public nextResolution = 1;\r\n    mapping(address => uint256) lastOwnerResolutionNumber;\r\n    // Stores the resolutions\r\n    mapping(uint256 => Resolution) public resolutions;\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // EVENTS\r\n    // ////////////////////////////////////////////////////\r\n    event OwnerAddition(address owner);\r\n    event OwnerRemoval(address owner);\r\n    event OwnerReplacement(address oldOwner, address newOwner);\r\n\r\n    event OperatorAddition(address newOperator);\r\n    event OperatorRemoval(address oldOperator);\r\n    event OperatorReplacement(address oldOperator, address newOperator);\r\n\r\n    event UpdateThreshold(uint256 newThreshold);\r\n    event UpdateNumberOfOperators(uint256 newOperators);\r\n    event UpdateTransactionLimit(uint256 newLimit);\r\n    /// @dev Emitted when the pause is triggered by `account`.\r\n    event Paused(address account);\r\n    /// @dev Emitted when the pause is lifted by `account`.\r\n    event Unpaused(address account);\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // MODIFIERS\r\n    // ////////////////////////////////////////////////////\r\n    function isValidAddress(address newAddr) public pure {\r\n        require(newAddr != address(0), \"Invaild Address\");\r\n    }\r\n\r\n    modifier onlyOperators() {\r\n        isValidAddress(msg.sender);\r\n        require(\r\n            EnumerableSet.contains(_operators, msg.sender) == true,\r\n            \"Only the operator can run this function.\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyOwners() {\r\n        isValidAddress(msg.sender);\r\n        require(\r\n            EnumerableSet.contains(_owners, msg.sender) == true,\r\n            \"Only an owner can run this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnersOrOperator() {\r\n        isValidAddress(msg.sender);\r\n        require(\r\n            EnumerableSet.contains(_operators, msg.sender) == true ||\r\n                EnumerableSet.contains(_owners, msg.sender) == true,\r\n            \"Only an owner or the operator can run this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address thisOwner) {\r\n        require(\r\n            EnumerableSet.contains(_owners, thisOwner) == true,\r\n            \"Owner does not exists.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     * Requirements: The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Smart Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     * Requirements: The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Smart Contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to make a function callable only when the amount is within the transaction limit\r\n    modifier withinLimit(uint256 amount) {\r\n        require(\r\n            transactionLimit == 0 || amount <= transactionLimit,\r\n            \"Amount is over the transaction limit\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // CONSTRUCTOR\r\n    // ////////////////////////////////////////////////////\r\n    constructor() {\r\n        _addOwner(msg.sender);\r\n        _paused = false;\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // VIEW FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        if(EnumerableSet.length(_owners) == 0) return address(0);\r\n        return EnumerableSet.at(_owners, 0);\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners() public view returns (address[] memory) {\r\n        uint256 len = EnumerableSet.length(_owners);\r\n        address[] memory o = new address[](len);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            o[i] = EnumerableSet.at(_owners, i);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    /// @dev Returns the number of owners.\r\n    /// @return Number of owners.\r\n    function getNumberOfOwners() public view returns (uint) {\r\n        return EnumerableSet.length(_owners);\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOperators() public view returns (address[] memory) {\r\n        uint256 len = EnumerableSet.length(_operators);\r\n        address[] memory o = new address[](len);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            o[i] = EnumerableSet.at(_operators, i);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    /// @dev Returns the number of operators.\r\n    /// @return Number of operators.\r\n    function getNumberOfOperators() public view returns (uint8) {\r\n        return uint8(EnumerableSet.length(_operators));\r\n    }\r\n\r\n    /// @dev How many owners does it take to approve a resolution\r\n    /// @return minimum number of owner votes\r\n    function getVoteThreshold() public view returns (uint256) {\r\n        return ownerAgreementThreshold;\r\n    }\r\n\r\n    /// @dev Returns the maximum amount a transaction can contain\r\n    /// @return maximum amount or zero is no limit\r\n    function getTransactionLimit() public view returns (uint256) {\r\n        return transactionLimit;\r\n    }\r\n\r\n    /// @dev Returns the next available resolution.\r\n    /// @return The next available resolution number\r\n    function getNextResolutionNumber() public view returns (uint256) {\r\n        return nextResolution;\r\n    }\r\n\r\n    /// @dev Returns the next available resolution.\r\n    /// @return The next available resolution number\r\n    function getLastOwnerResolutionNumber(address thisOwner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return lastOwnerResolutionNumber[thisOwner];\r\n    }\r\n\r\n    /// @dev Returns true if the contract is paused, and false otherwise.\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /// @dev Helper function to fail if resolution number is already in use.\r\n    function resolutionAlreadyUsed(uint256 resNum) public view {\r\n        require(\r\n            // atleast one of the address must not be equal to address(0)\r\n            !(resolutions[resNum].oldAddress != address(0) ||\r\n                resolutions[resNum].newAddress != address(0)),\r\n            \"Resolution is already in use.\"\r\n        );\r\n    }\r\n\r\n    function isResolutionPassed(uint256 resNum) public view returns (bool) {\r\n        return resolutions[resNum].passed;\r\n    }\r\n\r\n    function canResolutionPass(uint256 resNum) public view returns (bool) {\r\n        uint256 voteCount = 0;\r\n        uint256 len = EnumerableSet.length(_owners);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (ownerVotes[EnumerableSet.at(_owners, i)][resNum] == true) {\r\n                voteCount++;\r\n            }\r\n        }\r\n\r\n        return voteCount >= ownerAgreementThreshold;\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // PUBLIC FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n\r\n    /// @notice Vote Yes on a Resolution.\r\n    /// @dev The owner who tips the agreement threshold will pay the gas for performing the resolution.\r\n    /// @return TRUE if the resolution passed\r\n    function voteResolution(uint256 resNum) public onlyOwners() returns (bool) {\r\n        ownerVotes[msg.sender][resNum] = true;\r\n\r\n        // If the reolution has already passed, then do nothing\r\n        if (isResolutionPassed(resNum)) {\r\n            return true;\r\n        }\r\n\r\n        // If the resolution can now be passed, then do so\r\n        if (canResolutionPass(resNum)) {\r\n            _performResolution(resNum);\r\n            return true;\r\n        }\r\n\r\n        // The resolution cannot be passed yet\r\n        return false;\r\n    }\r\n\r\n    /// @dev Create a resolution to add an owner. Performs addition if threshold is 1 or zero.\r\n    function createResolutionAddOwner(address newOwner) public onlyOwners() {\r\n        isValidAddress(newOwner);\r\n        require(\r\n            !EnumerableSet.contains(_owners, newOwner),\r\n            \"newOwner already exists.\"\r\n        );\r\n\r\n        createResolution(resTypeAddOwner, address(0), newOwner, new bytes32[](0));\r\n    }\r\n\r\n    /// @dev Create a resolution to remove an owner. Performs removal if threshold is 1 or zero.\r\n    /// @dev Updates the threshold to keep it less than or equal to the number of new owners\r\n    function createResolutionRemoveOwner(address oldOwner) public onlyOwners() {\r\n        isValidAddress(oldOwner);\r\n        require(getNumberOfOwners() > 1, \"Must always be one owner\");\r\n        require(\r\n            EnumerableSet.contains(_owners, oldOwner),\r\n            \"owner is not an owner.\"\r\n        );\r\n\r\n        createResolution(resTypeRemoveOwner, oldOwner, address(0), new bytes32[](0));\r\n    }\r\n\r\n    /// @dev Create a resolution to repalce an owner. Performs replacement if threshold is 1 or zero.\r\n    function createResolutionReplaceOwner(address oldOwner, address newOwner)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        isValidAddress(oldOwner);\r\n        isValidAddress(newOwner);\r\n        require(\r\n            EnumerableSet.contains(_owners, oldOwner),\r\n            \"oldOwner is not an owner.\"\r\n        );\r\n        require(\r\n            !EnumerableSet.contains(_owners, newOwner),\r\n            \"newOwner already exists.\"\r\n        );\r\n\r\n        createResolution(resTypeReplaceOwner, oldOwner, newOwner, new bytes32[](0));\r\n    }\r\n\r\n    /// @dev Create a resolution to add an operator. Performs addition if threshold is 1 or zero.\r\n    function createResolutionAddOperator(address newOperator)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        isValidAddress(newOperator);\r\n        require(\r\n            !EnumerableSet.contains(_operators, newOperator),\r\n            \"newOperator already exists.\"\r\n        );\r\n\r\n        createResolution(resTypeAddOperator, address(0), newOperator, new bytes32[](0));\r\n    }\r\n\r\n    /// @dev Create a resolution to remove the operator. Performs removal if threshold is 1 or zero.\r\n    function createResolutionRemoveOperator(address operator)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        require(\r\n            EnumerableSet.contains(_operators, operator),\r\n            \"operator is not an Operator.\"\r\n        );\r\n        createResolution(resTypeRemoveOperator, operator, address(0), new bytes32[](0));\r\n    }\r\n\r\n    /// @dev Create a resolution to replace the operator account. Performs replacement if threshold is 1 or zero.\r\n    function createResolutionReplaceOperator(\r\n        address oldOperator,\r\n        address newOperator\r\n    ) public onlyOwners() {\r\n        isValidAddress(oldOperator);\r\n        isValidAddress(newOperator);\r\n        require(\r\n            EnumerableSet.contains(_operators, oldOperator),\r\n            \"oldOperator is not an Operator.\"\r\n        );\r\n        require(\r\n            !EnumerableSet.contains(_operators, newOperator),\r\n            \"newOperator already exists.\"\r\n        );\r\n\r\n        createResolution(resTypeReplaceOperator, oldOperator, newOperator,new bytes32[](0));\r\n    }\r\n\r\n    /// @dev Create a resolution to update the transaction limit. Performs update if threshold is 1 or zero.\r\n    function createResolutionUpdateTransactionLimit(uint160 newLimit)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        createResolution(\r\n            resTypeUpdateTransactionLimit,\r\n            address(0),\r\n            address(newLimit),\r\n            new bytes32[](0)\r\n        );\r\n    }\r\n\r\n    /// @dev Create a resolution to update the owner agreement threshold. Performs update if threshold is 1 or zero.\r\n    function createResolutionUpdateThreshold(uint160 threshold)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        createResolution(\r\n            resTypeUpdateThreshold,\r\n            address(0),\r\n            address(threshold),\r\n            new bytes32[](0)\r\n        );\r\n    }\r\n\r\n    /// @dev Pause the contract. Does not require owner agreement.\r\n    function pause() public onlyOwners() {\r\n        _pause();\r\n    }\r\n\r\n    /// @dev Create a resolution to unpause the contract. Performs update if threshold is 1 or zero.\r\n    function createResolutionUnpause() public onlyOwners() {\r\n        createResolution(resTypeUnpause, address(1), address(1), new bytes32[](0));\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // INTERNAL FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n    /// @dev Create a resolution and check if we can call perofrm the resolution with 1 vote.\r\n    function createResolution(\r\n        uint256 resType,\r\n        address oldAddress,\r\n        address newAddress,\r\n        bytes32[] memory extra\r\n    ) internal {\r\n        uint256 resNum = nextResolution;\r\n        nextResolution++;\r\n        resolutionAlreadyUsed(resNum);\r\n\r\n        resolutions[resNum].resType = resType;\r\n        resolutions[resNum].oldAddress = oldAddress;\r\n        resolutions[resNum].newAddress = newAddress;\r\n        resolutions[resNum].extra = extra;\r\n\r\n        ownerVotes[msg.sender][resNum] = true;\r\n        lastOwnerResolutionNumber[msg.sender] = resNum;\r\n\r\n        // Check if agreement is already reached\r\n        if (ownerAgreementThreshold <= 1) {\r\n            _performResolution(resNum);\r\n        }\r\n    }\r\n\r\n    /// @dev Performs the resolution and then marks it as passed. No checks prevent it from performing the resolutions.\r\n    function _performResolution(uint256 resNum) internal {\r\n        if (resolutions[resNum].resType == resTypeAddOwner) {\r\n            _addOwner(resolutions[resNum].newAddress);\r\n        } else if (resolutions[resNum].resType == resTypeRemoveOwner) {\r\n            _removeOwner(resolutions[resNum].oldAddress);\r\n        } else if (resolutions[resNum].resType == resTypeReplaceOwner) {\r\n            _replaceOwner(\r\n                resolutions[resNum].oldAddress,\r\n                resolutions[resNum].newAddress\r\n            );\r\n        } else if (resolutions[resNum].resType == resTypeAddOperator) {\r\n            _addOperator(resolutions[resNum].newAddress);\r\n        } else if (resolutions[resNum].resType == resTypeRemoveOperator) {\r\n            _removeOperator(resolutions[resNum].oldAddress);\r\n        } else if (resolutions[resNum].resType == resTypeReplaceOperator) {\r\n            _replaceOperator(\r\n                resolutions[resNum].oldAddress,\r\n                resolutions[resNum].newAddress\r\n            );\r\n        } else if (\r\n            resolutions[resNum].resType == resTypeUpdateTransactionLimit\r\n        ) {\r\n            _updateTransactionLimit(uint160(resolutions[resNum].newAddress));\r\n        } else if (resolutions[resNum].resType == resTypeUpdateThreshold) {\r\n            _updateThreshold(uint160(resolutions[resNum].newAddress));\r\n        } else if (resolutions[resNum].resType == resTypePause) {\r\n            _pause();\r\n        } else if (resolutions[resNum].resType == resTypeUnpause) {\r\n            _unpause();\r\n        } else {\r\n            _customResolutions(resNum);\r\n            return;\r\n        }\r\n\r\n        resolutions[resNum].passed = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Able to handle Custom Resolutions.\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - Must set the resolution passed: resolutions[resNum].passed = true;\r\n     * - You should check the resolutions[resNum].resType to know what to perform\r\n     */\r\n    function _customResolutions(uint256 resNum) internal virtual {}\r\n\r\n    /// @dev\r\n    function _addOwner(address newOwner) internal {\r\n        EnumerableSet.add(_owners, newOwner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev\r\n    function _removeOwner(address newOwner) internal {\r\n        EnumerableSet.remove(_owners, newOwner);\r\n        emit OwnerRemoval(newOwner);\r\n\r\n        uint numOwners = getNumberOfOwners();\r\n        if (ownerAgreementThreshold > numOwners) {\r\n            _updateThreshold(numOwners);\r\n        }\r\n    }\r\n\r\n    /// @dev\r\n    function _replaceOwner(address oldOwner, address newOwner) internal {\r\n        EnumerableSet.remove(_owners, oldOwner);\r\n        EnumerableSet.add(_owners, newOwner);\r\n        emit OwnerReplacement(oldOwner, newOwner);\r\n    }\r\n\r\n    /// @dev\r\n    function _addOperator(address operator) internal {\r\n        EnumerableSet.add(_operators, operator);\r\n        emit OperatorAddition(operator);\r\n    }\r\n\r\n    /// @dev\r\n    function _removeOperator(address operator) internal {\r\n        EnumerableSet.remove(_operators, operator);\r\n        emit OperatorRemoval(operator);\r\n    }\r\n\r\n    /// @dev\r\n    function _replaceOperator(address oldOperator, address newOperator)\r\n        internal\r\n    {\r\n        emit OperatorReplacement(oldOperator, newOperator);\r\n        EnumerableSet.remove(_operators, oldOperator);\r\n        EnumerableSet.add(_operators, newOperator);\r\n    }\r\n\r\n    /// @dev Internal function to update and emit the new transaction limit\r\n    function _updateTransactionLimit(uint256 newLimit) internal {\r\n        emit UpdateTransactionLimit(newLimit);\r\n        transactionLimit = newLimit;\r\n    }\r\n\r\n    /// @dev Internal function to update and emit the new voting threshold\r\n    function _updateThreshold(uint threshold) internal {\r\n        require(\r\n            threshold <= getNumberOfOwners(),\r\n            \"Unable to set threshold above the number of owners\"\r\n        );\r\n        emit UpdateThreshold(threshold);\r\n        ownerAgreementThreshold = threshold;\r\n    }\r\n\r\n    /// @dev Internal function to update and emit the new voting threshold\r\n    function _updateNumberOfOperators(uint160 numOperators) internal {\r\n        require(\r\n            numOperators >= getNumberOfOperators(),\r\n            \"Unable to set number of Operators below the number of operators\"\r\n        );\r\n        emit UpdateNumberOfOperators(numOperators);\r\n        operatorLimit = numOperators;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements: The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements: The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/UreeqaCollectibleNFTsv2.sol\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n\r\n/// @title Official Collectible NFTs\r\n/// @author Dr. Jonathan Shahen at UREEQA\r\n/// @notice Collectible NFTs that are officially connected to a Validated UREEQA NFT\r\n/// @dev Check the Package of Proof associated with the UREEQA Validated NFT before Purchase\r\ncontract UreeqaCollectibleNFTv2 is OwnershipAgreementv3, ERC721 {\r\n    // ////////////////////////////////////////////////////\r\n    // STORAGE\r\n    // ////////////////////////////////////////////////////\r\n    string private _baseUrl;\r\n\r\n    // Owner Validated NFT\r\n    mapping(uint256 => address) _validatedNFTAddress;\r\n    mapping(uint256 => uint256) _validatedNFTID;\r\n\r\n    // Attached File\r\n    mapping(uint256 => bytes32) _attachedFileHash;\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // CONSTRUCTOR\r\n    // ////////////////////////////////////////////////////\r\n    /// @dev Add an Operator if `operator` is not equal to address(0)\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address operator\r\n    ) ERC721(name, symbol) {\r\n        _baseUrl = string(\r\n            abi.encodePacked(\r\n                \"https://nft.ureeqa.com/contract/\",\r\n                toString(abi.encodePacked(address(this))),\r\n                \"/\"\r\n            )\r\n        );\r\n\r\n        if (operator != address(0)) {\r\n            createResolutionAddOperator(operator);\r\n        }\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // EVENTS\r\n    // ////////////////////////////////////////////////////\r\n    event UpdateNFT(\r\n        address oldContract,\r\n        uint256 oldNFTId,\r\n        address newContract,\r\n        uint256 newNFTId\r\n    );\r\n    event UpdateFileHash(bytes32 oldFileHash, bytes32 newFileHash);\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // MODIFIERS\r\n    // ////////////////////////////////////////////////////\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // VIEW FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n    /// @dev returns the Contract's URI\r\n    function contractURI() public view returns (string memory) {\r\n        return _baseUrl;\r\n    }\r\n\r\n    /// @dev Returns if an NFT exists (was minted)\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    /// @dev Returns the Smart Cotnract address and the NFT ID of the parent Validated NFT\r\n    function getValidatedNFT(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (address, uint256)\r\n    {\r\n        return (_validatedNFTAddress[tokenId], _validatedNFTID[tokenId]);\r\n    }\r\n\r\n    /// @dev Returns the Smart Cotnract address and the NFT ID of the parent Validated NFT\r\n    function getAttachedFileHash(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _attachedFileHash[tokenId];\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // PUBLIC FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // OPERATOR FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} nad {UpdateNFT} events.\r\n     */\r\n    function safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        address validatedAddress,\r\n        uint256 validatedID,\r\n        bytes32 attachedFileHash\r\n    ) public onlyOperators() {\r\n        _safeMint(to, tokenId, \"\");\r\n\r\n        emit UpdateNFT(\r\n            _validatedNFTAddress[tokenId],\r\n            _validatedNFTID[tokenId],\r\n            validatedAddress,\r\n            validatedID\r\n        );\r\n        _validatedNFTAddress[tokenId] = validatedAddress;\r\n        _validatedNFTID[tokenId] = validatedID;\r\n        _attachedFileHash[tokenId] = attachedFileHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId`s and transfers it to `to`s.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeMintBatch(\r\n        address[] calldata to,\r\n        uint256[] calldata tokenId,\r\n        address[] calldata validatedAddress,\r\n        uint256[] calldata validatedID,\r\n        bytes32[] calldata attachedFileHash\r\n    ) public onlyOperators() {\r\n        require(\r\n            to.length == tokenId.length &&\r\n                validatedAddress.length == tokenId.length &&\r\n                attachedFileHash.length == tokenId.length &&\r\n                validatedAddress.length == validatedID.length,\r\n            \"To and TokenID must have the same length\"\r\n        );\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _safeMint(to[i], tokenId[i], \"\");\r\n\r\n            emit UpdateNFT(\r\n                _validatedNFTAddress[tokenId[i]],\r\n                _validatedNFTID[tokenId[i]],\r\n                validatedAddress[i],\r\n                validatedID[i]\r\n            );\r\n            _validatedNFTAddress[tokenId[i]] = validatedAddress[i];\r\n            _validatedNFTID[tokenId[i]] = validatedID[i];\r\n            _attachedFileHash[tokenId[i]] = attachedFileHash[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the connected Validated NFT for a Collectible\r\n     *\r\n     * Emits a {UpdateNFT} event.\r\n     */\r\n    function updateValidatedNFT(\r\n        uint256 tokenId,\r\n        address validatedAddress,\r\n        uint256 validatedID\r\n    ) public onlyOperators() {\r\n        emit UpdateNFT(\r\n            _validatedNFTAddress[tokenId],\r\n            _validatedNFTID[tokenId],\r\n            validatedAddress,\r\n            validatedID\r\n        );\r\n        _validatedNFTAddress[tokenId] = validatedAddress;\r\n        _validatedNFTID[tokenId] = validatedID;\r\n    }\r\n\r\n    /**\r\n     * @dev Batch Updates the connected Validated NFT for a Collectible\r\n     *\r\n     * Emits a {UpdateNFT} event.\r\n     */\r\n    function updateValidatedNFTBatch(\r\n        uint256[] calldata tokenId,\r\n        address[] calldata validatedAddress,\r\n        uint256[] calldata validatedID\r\n    ) public onlyOperators() {\r\n        require(\r\n            validatedAddress.length == tokenId.length &&\r\n                validatedAddress.length == validatedID.length,\r\n            \"Input arrays must have the same length\"\r\n        );\r\n        for (uint256 i = 0; i < tokenId.length; i++) {\r\n            emit UpdateNFT(\r\n                _validatedNFTAddress[tokenId[i]],\r\n                _validatedNFTID[tokenId[i]],\r\n                validatedAddress[i],\r\n                validatedID[i]\r\n            );\r\n            _validatedNFTAddress[tokenId[i]] = validatedAddress[i];\r\n            _validatedNFTID[tokenId[i]] = validatedID[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the attached File Hash for a Collectible\r\n     *\r\n     * Emits a {UpdateFileHash} event.\r\n     */\r\n    function updateAttachedFileHash(uint256 tokenId, bytes32 fileHash)\r\n        public\r\n        onlyOperators()\r\n    {\r\n        emit UpdateFileHash(_attachedFileHash[tokenId], fileHash);\r\n        _attachedFileHash[tokenId] = fileHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Batch Updates the attached File Hash for a Collectible\r\n     *\r\n     * Emits a {UpdateFileHash} event.\r\n     */\r\n    function updateAttachedFileHashBatch(\r\n        uint256[] calldata tokenId,\r\n        bytes32[] calldata fileHash\r\n    ) public onlyOperators() {\r\n        require(\r\n            fileHash.length == tokenId.length,\r\n            \"Input arrays must have the same length\"\r\n        );\r\n        for (uint256 i = 0; i < tokenId.length; i++) {\r\n            emit UpdateFileHash(_attachedFileHash[tokenId[i]], fileHash[i]);\r\n            _attachedFileHash[tokenId[i]] = fileHash[i];\r\n        }\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // INTERNAL FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}.\r\n     */\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return _baseUrl;\r\n    }\r\n\r\n    function toString(bytes memory data) public pure returns (string memory) {\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\r\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"OperatorRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorReplacement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerReplacement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldFileHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newFileHash\",\"type\":\"bytes32\"}],\"name\":\"UpdateFileHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNFTId\",\"type\":\"uint256\"}],\"name\":\"UpdateNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOperators\",\"type\":\"uint256\"}],\"name\":\"UpdateNumberOfOperators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdateThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateTransactionLimit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"canResolutionPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"createResolutionAddOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"createResolutionAddOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"createResolutionRemoveOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"createResolutionRemoveOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"createResolutionReplaceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"createResolutionReplaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createResolutionUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"threshold\",\"type\":\"uint160\"}],\"name\":\"createResolutionUpdateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"newLimit\",\"type\":\"uint160\"}],\"name\":\"createResolutionUpdateTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttachedFileHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"thisOwner\",\"type\":\"address\"}],\"name\":\"getLastOwnerResolutionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextResolutionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfOperators\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getValidatedNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"isResolutionPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"isValidAddress\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextResolution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAgreementThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"resolutionAlreadyUsed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolutions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"resType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validatedID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"attachedFileHash\",\"type\":\"bytes32\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"validatedAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"validatedID\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"attachedFileHash\",\"type\":\"bytes32[]\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"fileHash\",\"type\":\"bytes32\"}],\"name\":\"updateAttachedFileHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"fileHash\",\"type\":\"bytes32[]\"}],\"name\":\"updateAttachedFileHashBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validatedID\",\"type\":\"uint256\"}],\"name\":\"updateValidatedNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"validatedAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"validatedID\",\"type\":\"uint256[]\"}],\"name\":\"updateValidatedNFTBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"voteResolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UreeqaCollectibleNFTv2", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000053bc64daa348f723015da12c1db940ef7720f5070000000000000000000000000000000000000000000000000000000000000013576f6d656e204f662056656e757376657273650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025656000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4ae280b73dea84a63eded3f362e057a923fda2b00dca46eca8847e81c4ab1ca9"}