{"SourceCode": "pragma solidity 0.4.18;\r\n/**\r\n    Used for administrration of the VZT Token Contract\r\n*/\r\n\r\ncontract Administration {\r\n\r\n    // keeps track of the contract owner\r\n    address     public  owner;\r\n    // keeps track of the contract administrator\r\n    address     public  administrator;\r\n    // keeps track of hte song token exchange\r\n    address     public  songTokenExchange;\r\n    // keeps track of the royalty information contract\r\n    address     public  royaltyInformationContract;\r\n    // keeps track of whether or not the admin contract is frozen\r\n    bool        public  administrationContractFrozen;\r\n\r\n    // keeps track of the contract moderators\r\n    mapping (address => bool) public moderators;\r\n\r\n    event ModeratorAdded(address indexed _invoker, address indexed _newMod, bool indexed _newModAdded);\r\n    event ModeratorRemoved(address indexed _invoker, address indexed _removeMod, bool indexed _modRemoved);\r\n    event AdministratorAdded(address indexed _invoker, address indexed _newAdmin, bool indexed _newAdminAdded);\r\n    event RoyaltyInformationContractSet(address indexed _invoker, address indexed _newRoyaltyContract, bool indexed _newRoyaltyContractSet);\r\n    event SongTokenExchangeContractSet(address indexed _invoker, address indexed _newSongTokenExchangeContract, bool indexed _newSongTokenExchangeSet);\r\n\r\n    function Administration() {\r\n        owner = 0x79926C875f2636808de28CD73a45592587A537De;\r\n        administrator = 0x79926C875f2636808de28CD73a45592587A537De;\r\n        administrationContractFrozen = false;\r\n    }\r\n\r\n    /// @dev checks to see if the contract is frozen\r\n    modifier isFrozen() {\r\n        require(administrationContractFrozen);\r\n        _;\r\n    }\r\n\r\n    /// @dev checks to see if the contract is not frozen\r\n    modifier notFrozen() {\r\n        require(!administrationContractFrozen);\r\n        _;\r\n    }\r\n\r\n    /// @dev checks to see if the msg.sender is owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev checks to see if msg.sender is owner, or admin\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner || msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    /// @dev checks to see if msg.sender is owner, admin, or song token exchange\r\n    modifier onlyAdminOrExchange() {\r\n        require(msg.sender == owner || msg.sender == songTokenExchange || msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    /// @dev checks to see if msg.sender is privileged\r\n    modifier onlyModerator() {\r\n        if (msg.sender == owner) {_;}\r\n        if (msg.sender == administrator) {_;}\r\n        if (moderators[msg.sender]) {_;}\r\n    }\r\n\r\n    /// @notice used to freeze the administration contract\r\n    function freezeAdministrationContract() public onlyAdmin notFrozen returns (bool frozen) {\r\n        administrationContractFrozen = true;\r\n        return true;\r\n    }\r\n\r\n    /// @notice used to unfreeze the administration contract\r\n    function unfreezeAdministrationContract() public onlyAdmin isFrozen returns (bool unfrozen) {\r\n        administrationContractFrozen = false;\r\n        return true;\r\n    }\r\n\r\n    /// @notice used to set the royalty information contract\r\n    function setRoyaltyInformationContract(address _royaltyInformationContract) public onlyAdmin notFrozen returns (bool set) {\r\n        royaltyInformationContract = _royaltyInformationContract;\r\n        RoyaltyInformationContractSet(msg.sender, _royaltyInformationContract, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice used to set the song token exchange\r\n    function setTokenExchange(address _songTokenExchange) public onlyAdmin notFrozen returns (bool set) {\r\n        songTokenExchange = _songTokenExchange;\r\n        SongTokenExchangeContractSet(msg.sender, _songTokenExchange, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice used to add a moderator\r\n    function addModerator(address _newMod) public onlyAdmin notFrozen returns (bool success) {\r\n        moderators[_newMod] = true;\r\n        ModeratorAdded(msg.sender, _newMod, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice used to remove a moderator\r\n    function removeModerator(address _removeMod) public onlyAdmin notFrozen returns (bool success) {\r\n        moderators[_removeMod] = false;\r\n        ModeratorRemoved(msg.sender, _removeMod, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice used to set an administrator\r\n    function setAdministrator(address _administrator) public onlyOwner notFrozen returns (bool success) {\r\n        administrator = _administrator;\r\n        AdministratorAdded(msg.sender, _administrator, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice used to transfer contract ownership\r\n    function transferOwnership(address _newOwner) public onlyOwner notFrozen returns (bool success) {\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n    Version: 1.0.1\r\n*/\r\n\r\ncontract Vezt is Administration {\r\n    using SafeMath for uint256;\r\n\r\n    uint256                 public  totalSupply;\r\n    uint8                   public  decimals;\r\n    string                  public  name;\r\n    string                  public  symbol;\r\n    bool                    public  tokenTransfersFrozen;\r\n    bool                    public  tokenMintingEnabled;\r\n    bool                    public  contractLaunched;\r\n\r\n    mapping (address => uint256)                        public balances;\r\n    mapping (address => mapping (address => uint256))   public allowed;\r\n\r\n\r\n    event Transfer(address indexed _sender, address indexed _recipient, uint256 _amount);\r\n    event Approve(address indexed _owner, address indexed _spender, uint256 _amount);\r\n    event LaunchContract(address indexed _launcher, bool _launched);\r\n    event FreezeTokenTransfers(address indexed _invoker, bool _frozen);\r\n    event ThawTokenTransfers(address indexed _invoker, bool _thawed);\r\n    event MintTokens(address indexed _minter, uint256 _amount, bool indexed _minted);\r\n    event TokenMintingDisabled(address indexed _invoker, bool indexed _disabled);\r\n    event TokenMintingEnabled(address indexed _invoker, bool indexed _enabled);\r\n    event SongTokenAdded(address indexed _songTokenAddress, bool indexed _songTokenAdded);\r\n    event SongTokenRemoved(address indexed _songTokenAddress, bool indexed _songTokenRemoved);\r\n\r\n    function Vezt() {\r\n        name = \"Vezt\";\r\n        symbol = \"VZT\";\r\n        decimals = 18;\r\n        totalSupply = 125000000000000000000000000;\r\n        balances[0x79926C875f2636808de28CD73a45592587A537De] = balances[0x79926C875f2636808de28CD73a45592587A537De].add(totalSupply);\r\n        tokenTransfersFrozen = true;\r\n        tokenMintingEnabled = false;\r\n        contractLaunched = false;\r\n    }\r\n\r\n    /**\r\n        @dev Used by admin to send bulk amount of transfers, primary purpose to replay tx from the crowdfund to make it easier to do bulk sending\r\n        @notice Can also be used for general bulk transfers  via the associated python script\r\n     */\r\n    function transactionReplay(address _receiver, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n        returns (bool replayed)\r\n    {\r\n        require(transferCheck(msg.sender, _receiver, _amount));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        Transfer(msg.sender, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to launch the contract\r\n     */\r\n    function launchContract() \r\n        public\r\n        onlyOwner\r\n        returns (bool launched)\r\n    {\r\n        require(!contractLaunched);\r\n        tokenTransfersFrozen = false;\r\n        tokenMintingEnabled = true;\r\n        contractLaunched = true;\r\n        LaunchContract(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to disable token minting\r\n     */\r\n    function disableTokenMinting() \r\n        public\r\n        onlyOwner\r\n        returns (bool disabled) \r\n    {\r\n        tokenMintingEnabled = false;\r\n        TokenMintingDisabled(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to enable token minting\r\n     */\r\n    function enableTokenMinting() \r\n        public\r\n        onlyOwner\r\n        returns (bool enabled)\r\n    {\r\n        tokenMintingEnabled = true;\r\n        TokenMintingEnabled(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to freeze token transfers\r\n     */\r\n    function freezeTokenTransfers()\r\n        public\r\n        onlyOwner\r\n        returns (bool frozen)\r\n    {\r\n        tokenTransfersFrozen = true;\r\n        FreezeTokenTransfers(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to thaw token tra4nsfers\r\n     */\r\n    function thawTokenTransfers()\r\n        public\r\n        onlyOwner\r\n        returns (bool thawed)\r\n    {\r\n        tokenTransfersFrozen = false;\r\n        ThawTokenTransfers(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to transfer funds\r\n     */\r\n    function transfer(address _receiver, uint256 _amount)\r\n        public\r\n        returns (bool transferred)\r\n    {\r\n        require(transferCheck(msg.sender, _receiver, _amount));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        Transfer(msg.sender, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to transfer funds on behalf of someone\r\n     */\r\n    function transferFrom(address _owner, address _receiver, uint256 _amount) \r\n        public \r\n        returns (bool transferred)\r\n    {\r\n        require(allowed[_owner][msg.sender] >= _amount);\r\n        require(transferCheck(_owner, _receiver, _amount));\r\n        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        Transfer(_owner, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to approve someone to spend funds on your behalf\r\n     */\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        returns (bool approved)\r\n    {\r\n        require(_amount > 0);\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_amount);\r\n        Approve(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n        @notice Used to burn tokens\r\n     */\r\n    function tokenBurner(uint256 _amount)\r\n        public\r\n        onlyOwner\r\n        returns (bool burned)\r\n    {\r\n        require(_amount > 0);\r\n        require(totalSupply.sub(_amount) >= 0);\r\n        require(balances[msg.sender] >= _amount);\r\n        require(balances[msg.sender].sub(_amount) >= 0);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        Transfer(msg.sender, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Used to mint new tokens\r\n    */\r\n    function tokenFactory(uint256 _amount)\r\n        public \r\n        onlyOwner\r\n        returns (bool minted)\r\n    {\r\n        // this calls the token minter function which is used to do a sanity check of the parameters being passed in\r\n        require(tokenMinter(_amount, msg.sender));\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        Transfer(0, msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Internals\r\n\r\n    /**\r\n        @dev Low level function used to do a sanity check of minting params\r\n     */\r\n    function tokenMinter(uint256 _amount, address _sender)\r\n        internal\r\n        view\r\n        returns (bool valid)\r\n    {\r\n        require(tokenMintingEnabled);\r\n        require(_amount > 0);\r\n        require(_sender != address(0x0));\r\n        require(totalSupply.add(_amount) > 0);\r\n        require(totalSupply.add(_amount) > totalSupply);\r\n        require(balances[_sender].add(_amount) > 0);\r\n        require(balances[_sender].add(_amount) > balances[_sender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n        @dev Prevents people from sending to a  a null address        \r\n        @notice Low level function used to do a sanity check of transfer parameters\r\n     */\r\n    function transferCheck(address _sender, address _receiver, uint256 _amount)\r\n        internal\r\n        view\r\n        returns (bool valid)\r\n    {\r\n        require(!tokenTransfersFrozen);\r\n        require(_amount > 0);\r\n        require(_receiver != address(0));\r\n        require(balances[_sender] >= _amount); // added check\r\n        require(balances[_sender].sub(_amount) >= 0);\r\n        require(balances[_receiver].add(_amount) > 0);\r\n        require(balances[_receiver].add(_amount) > balances[_receiver]);\r\n        return true;\r\n    }\r\n\r\n    // Getters\r\n\r\n    /**\r\n        @notice Used to retrieve total supply\r\n     */\r\n    function totalSupply() \r\n        public\r\n        view\r\n        returns (uint256 _totalSupply)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n\r\n    /**\r\n        @notice Used to retrieve balance of a user\r\n     */\r\n    function balanceOf(address _person)\r\n        public\r\n        view\r\n        returns (uint256 _balanceOf)\r\n    {\r\n        return balances[_person];\r\n    }\r\n\r\n    /**\r\n        @notice Used to retrieve the allowed balance of someone\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        public \r\n        view\r\n        returns (uint256 _allowance)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_royaltyInformationContract\",\"type\":\"address\"}],\"name\":\"setRoyaltyInformationContract\",\"outputs\":[{\"name\":\"set\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeAdministrationContract\",\"outputs\":[{\"name\":\"frozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"royaltyInformationContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"launchContract\",\"outputs\":[{\"name\":\"launched\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenMinting\",\"outputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transactionReplay\",\"outputs\":[{\"name\":\"replayed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"songTokenExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"thawTokenTransfers\",\"outputs\":[{\"name\":\"thawed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeAdministrationContract\",\"outputs\":[{\"name\":\"unfrozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"minted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balanceOf\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrationContractFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransfersFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_removeMod\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenBurner\",\"outputs\":[{\"name\":\"burned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTokenMinting\",\"outputs\":[{\"name\":\"disabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLaunched\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMod\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMintingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeTokenTransfers\",\"outputs\":[{\"name\":\"frozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_administrator\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_songTokenExchange\",\"type\":\"address\"}],\"name\":\"setTokenExchange\",\"outputs\":[{\"name\":\"set\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_launcher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_launched\",\"type\":\"bool\"}],\"name\":\"LaunchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"FreezeTokenTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_thawed\",\"type\":\"bool\"}],\"name\":\"ThawTokenTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_minted\",\"type\":\"bool\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"TokenMintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"TokenMintingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_songTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_songTokenAdded\",\"type\":\"bool\"}],\"name\":\"SongTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_songTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_songTokenRemoved\",\"type\":\"bool\"}],\"name\":\"SongTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newMod\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newModAdded\",\"type\":\"bool\"}],\"name\":\"ModeratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_removeMod\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_modRemoved\",\"type\":\"bool\"}],\"name\":\"ModeratorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdminAdded\",\"type\":\"bool\"}],\"name\":\"AdministratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newRoyaltyContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newRoyaltyContractSet\",\"type\":\"bool\"}],\"name\":\"RoyaltyInformationContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newSongTokenExchangeContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newSongTokenExchangeSet\",\"type\":\"bool\"}],\"name\":\"SongTokenExchangeContractSet\",\"type\":\"event\"}]", "ContractName": "Vezt", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://047d9d2cb45883ec04d0d535864da2870e980358b619d443d39014a569af7860"}