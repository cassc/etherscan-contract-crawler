{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/alloyx/core/AlloyxManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IAlloyxManager.sol\\\";\\nimport \\\"../interfaces/IAlloyxVault.sol\\\";\\nimport \\\"../config/ConfigHelper.sol\\\";\\nimport \\\"../config/AlloyxConfig.sol\\\";\\nimport \\\"../utils/AdminUpgradeable.sol\\\";\\n\\n/**\\n * @title AlloyxManager\\n * @notice This manager contract takes charge of controlling the key phases of vault lifecycle including vault commencement, liquidation, fee collection, etc\\n * @author AlloyX\\n */\\ncontract AlloyxManager is IAlloyxManager, IAlloyx, AdminUpgradeable {\\n  using SafeMath for uint256;\\n  using ConfigHelper for AlloyxConfig;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  AlloyxConfig public config;\\n  bool internal locked;\\n  // Mapping(proposalId=>Mapping(permanentStaker=>usdcAmountInvested))\\n  mapping(string => mapping(address => uint256)) internal usdcPermanentStakerMap;\\n  // Mapping(proposalId=>Mapping(permanentStaker=>alyxAmountStaked))\\n  mapping(string => mapping(address => uint256)) internal alyxPermanentStakerMap;\\n  // Mapping(proposalId=>permanentStakerAddresses)\\n  mapping(string => EnumerableSet.AddressSet) internal permanentStakersMap;\\n  // Mapping(proposalId=>allowWithdrawal)\\n  mapping(string => bool) internal allowWithdrawalMap;\\n  // Mapping(proposalId=>Components)\\n  mapping(string => Component[]) internal componentsMap;\\n\\n  mapping(address => address) public governorMap;\\n  mapping(address => address) public timelockMap;\\n  mapping(address => address) public govTokenMap;\\n\\n  EnumerableSet.AddressSet vaultAddresses;\\n\\n  // Mapping(proposalId=>processed)\\n  mapping(string => bool) internal processedProposalMap;\\n\\n  event AlloyxConfigUpdated(address indexed who, address configAddress);\\n  event SetComponent(string indexed proposalId, address indexed creatorAddress, address poolAddress, uint256 proportion, uint256 tranche, Source source);\\n\\n  /**\\n   * @notice Initialize the contract\\n   * @param _configAddress the address of configuration contract\\n   */\\n  function initialize(address _configAddress) external initializer {\\n    __AdminUpgradeable_init(msg.sender);\\n    config = AlloyxConfig(_configAddress);\\n  }\\n\\n  /**\\n   * @notice If user operation is paused\\n   */\\n  modifier isPaused() {\\n    require(config.isPaused(), \\\"all user operations should be paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice If user operation is not paused\\n   */\\n  modifier notPaused() {\\n    require(!config.isPaused(), \\\"the user operation should be unpaused first\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice If address is whitelisted\\n   */\\n  modifier isWhitelisted() {\\n    require(config.getWhitelist().isUserWhitelisted(msg.sender), \\\"not whitelisted\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensure no reentrant for token transfer functions\\n   */\\n  modifier nonReentrant() {\\n    require(!locked);\\n    locked = true;\\n    _;\\n    locked = false;\\n  }\\n\\n  /**\\n   * @notice Update configuration contract address\\n   */\\n  function updateConfig() external onlyAdmin isPaused {\\n    config = AlloyxConfig(config.configAddress());\\n    emit AlloyxConfigUpdated(msg.sender, address(config));\\n  }\\n\\n  /**\\n   * @notice Check if the vault is a vault created by the manager\\n   * @param _vault the address of the vault\\n   * @return true if it is a vault otherwise false\\n   */\\n  function isVault(address _vault) external view override returns (bool) {\\n    return vaultAddresses.contains(_vault);\\n  }\\n\\n  /**\\n   * @notice Get all the addresses of vaults\\n   * @return the addresses of vaults\\n   */\\n  function getVaults() external view override returns (address[] memory) {\\n    return vaultAddresses.values();\\n  }\\n\\n  /**\\n   * @notice Deposit for the proposal with certain USDC and ALYX\\n   * @param _proposalId the proposal ID\\n   * @param _usdcAmount the USDC amount to deposit\\n   * @param _alyxAmount the ALYX amount to deposit\\n   */\\n  function depositForProposal(string calldata _proposalId, uint256 _usdcAmount, uint256 _alyxAmount) external notPaused nonReentrant isWhitelisted {\\n    _transferERC20From(msg.sender, config.usdcAddress(), address(this), _usdcAmount);\\n    _transferERC20From(msg.sender, config.alyxAddress(), address(this), _alyxAmount);\\n    usdcPermanentStakerMap[_proposalId][msg.sender] = usdcPermanentStakerMap[_proposalId][msg.sender].add(_usdcAmount);\\n    alyxPermanentStakerMap[_proposalId][msg.sender] = alyxPermanentStakerMap[_proposalId][msg.sender].add(_alyxAmount);\\n    permanentStakersMap[_proposalId].add(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Withdraw from the proposal, it will withdraw all the ALYX and USDC for that depositor\\n   * @param _proposalId the proposal ID\\n   */\\n  function withdrawFromProposal(string calldata _proposalId) public notPaused {\\n    if (allowWithdrawalMap[_proposalId] && permanentStakersMap[_proposalId].contains(msg.sender) && !processedProposalMap[_proposalId]) {\\n      _transferERC20(config.usdcAddress(), msg.sender, usdcPermanentStakerMap[_proposalId][msg.sender]);\\n      _transferERC20(config.alyxAddress(), msg.sender, alyxPermanentStakerMap[_proposalId][msg.sender]);\\n      usdcPermanentStakerMap[_proposalId][msg.sender] = 0;\\n      alyxPermanentStakerMap[_proposalId][msg.sender] = 0;\\n      permanentStakersMap[_proposalId].remove(msg.sender);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allow the depositors to withdraw from a proposal ID, restricted to admin\\n   * @param _proposalId the proposal ID\\n   * @param _allowed whether to allow withdrawal\\n   */\\n  function setAllowWithdraw(string calldata _proposalId, bool _allowed) external onlyAdmin notPaused {\\n    allowWithdrawalMap[_proposalId] = _allowed;\\n  }\\n\\n  /**\\n   * @notice Get number of all the USDC tokens deposited to the proposal\\n   * @param _proposalId the proposal ID\\n   */\\n  function totalUsdcDepositedForProposal(string calldata _proposalId) public view returns (uint256) {\\n    uint256 result = 0;\\n    EnumerableSet.AddressSet storage creators = permanentStakersMap[_proposalId];\\n    for (uint256 i = 0; i < creators.length(); i++) {\\n      result += usdcPermanentStakerMap[_proposalId][creators.at(i)];\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Get number of all the ALYX tokens deposited to the proposal\\n   * @param _proposalId the proposal ID\\n   */\\n  function totalAlyxDepositedForProposal(string memory _proposalId) public view returns (uint256) {\\n    uint256 result = 0;\\n    EnumerableSet.AddressSet storage creators = permanentStakersMap[_proposalId];\\n    for (uint256 i = 0; i < creators.length(); i++) {\\n      result += alyxPermanentStakerMap[_proposalId][creators.at(i)];\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Get the proposal configuration\\n   * @param _proposalId the proposal ID\\n   */\\n  function getComponents(string calldata _proposalId) external view returns (Component[] memory) {\\n    return componentsMap[_proposalId];\\n  }\\n\\n  /**\\n   * @notice Set the proposal configuration, restricted to admin and permanent stakers\\n   * @param _proposalId the proposal ID\\n   * @param _components the investment compositions\\n   */\\n  function setProposalConfiguration(string memory _proposalId, Component[] memory _components) external onlyAdmin {\\n    verifyComponents(_components);\\n    delete componentsMap[_proposalId];\\n    for (uint256 i = 0; i < _components.length; i++) {\\n      componentsMap[_proposalId].push(Component(_components[i].proportion, _components[i].poolAddress, _components[i].tranche, _components[i].source));\\n      emit SetComponent(_proposalId, msg.sender, _components[i].poolAddress, _components[i].proportion, _components[i].tranche, _components[i].source);\\n    }\\n  }\\n\\n  /**\\n   * @notice Start the vault from proposal and link up with governance contracts, restricted to admin\\n   * @param _proposalId the proposal ID\\n   * @param _vaultAddress the vault contract which has been deployed at INIT status\\n   * @param _govTokenAddress an empty GovernanceToken contract which has been just deployed\\n   * @param _govTimeLockAddress an empty GovernanceTimeLock contract which has been just deployed\\n   * @param _governorAddress an empty Governor contract which has been just deployed\\n   */\\n  function startAlloyxVault(string calldata _proposalId, address _vaultAddress, address _govTokenAddress, address _govTimeLockAddress, address _governorAddress) external onlyAdmin {\\n    require(componentsMap[_proposalId].length > 0, \\\"there are no components for proposal\\\");\\n    uint256 totalUsdcForProposal = totalUsdcDepositedForProposal(_proposalId);\\n    uint256 totalAlyxForProposal = totalAlyxDepositedForProposal(_proposalId);\\n    require(totalUsdcForProposal >= config.getThresholdUsdcForVaultCreation() && totalAlyxForProposal >= config.getThresholdAlyxForVaultCreation(), \\\"not meet minimum deposit\\\");\\n\\n    _transferERC20(config.usdcAddress(), _vaultAddress, totalUsdcForProposal);\\n    _transferERC20(config.alyxAddress(), _vaultAddress, totalAlyxForProposal);\\n\\n    governorMap[_vaultAddress] = _governorAddress;\\n    govTokenMap[_vaultAddress] = _govTokenAddress;\\n    timelockMap[_vaultAddress] = _govTimeLockAddress;\\n\\n    config.getStakeDesk().setGovTokenForVault(_vaultAddress, _govTokenAddress);\\n\\n    EnumerableSet.AddressSet storage depositors = permanentStakersMap[_proposalId];\\n    mapping(address => uint256) storage usdcMap = usdcPermanentStakerMap[_proposalId];\\n    mapping(address => uint256) storage alyxMap = alyxPermanentStakerMap[_proposalId];\\n    Component[] storage components = componentsMap[_proposalId];\\n\\n    IAlloyxVault vault = IAlloyxVault(_vaultAddress);\\n    // add to vaultAddresses before start the vault\\n    vaultAddresses.add(_vaultAddress);\\n    vault.startVault(components, convertMapToDepositAmount(usdcMap, depositors), convertMapToDepositAmount(alyxMap, depositors), totalUsdcForProposal);\\n    processedProposalMap[_proposalId] = true;\\n  }\\n\\n  /**\\n   * @notice Reinstate the governance by depositing the ALYX tokens from the new permanent stakers into the vault and mint govTokens for them, restricted to admin\\n   * @param _vaultAddress the vault to reinstate governance for\\n   * @param _proposalId the proposal\\n   */\\n  function reinstateGovernanceForVault(string calldata _proposalId, address _vaultAddress) external onlyAdmin {\\n    uint256 totalAlyxForProposal = totalAlyxDepositedForProposal(_proposalId);\\n    require(totalAlyxForProposal >= config.getThresholdAlyxForVaultCreation(), \\\"not meet minimum deposit\\\");\\n    _transferERC20(config.alyxAddress(), _vaultAddress, totalAlyxForProposal);\\n    IAlloyxVault vault = IAlloyxVault(_vaultAddress);\\n    vault.reinstateGovernance(convertMapToDepositAmount(alyxPermanentStakerMap[_proposalId], permanentStakersMap[_proposalId]));\\n  }\\n\\n  /**\\n   * @notice Liquidate the vault, restricted to admin\\n   * @param _vaultAddress the vault to liquidate\\n   */\\n  function liquidate(address _vaultAddress) external onlyAdmin {\\n    IAlloyxVault vault = IAlloyxVault(_vaultAddress);\\n    vault.liquidate();\\n  }\\n\\n  /**\\n   * @notice Accrue the protocol fee from all vaults, restricted to admin\\n   */\\n  function accrueAllProtocolFee() external onlyAdmin {\\n    address[] memory addresses = vaultAddresses.values();\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      IAlloyxVault vault = IAlloyxVault(addresses[i]);\\n      vault.accrueProtocolFee();\\n    }\\n  }\\n\\n  /**\\n   * @notice Accrue the protocol fee from all vaults, restricted to admin\\n   * @param _vaultAddress the vault address to collect fee\\n   */\\n  function accrueProtocolFee(address _vaultAddress) external onlyAdmin {\\n    IAlloyxVault vault = IAlloyxVault(_vaultAddress);\\n    vault.accrueProtocolFee();\\n  }\\n\\n  /**\\n   * @notice Withdraw the protocol fee from one vault, restricted to admin\\n   * @param _vaultAddress the vault address to collect fee\\n   */\\n  function withdrawProtocolFee(address _vaultAddress) external onlyAdmin {\\n    config.getTreasury().withdrawProtocolFee(_vaultAddress);\\n  }\\n\\n  /**\\n   * @notice Migrate certain ERC20 to an address, restricted to admin\\n   * @param _tokenAddress the token address to migrate\\n   * @param _to the address to transfer tokens to\\n   */\\n  function migrateERC20(address _tokenAddress, address _to) external onlyAdmin {\\n    uint256 balance = IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\\n    IERC20Upgradeable(_tokenAddress).safeTransfer(_to, balance);\\n  }\\n\\n  /**\\n   * @notice Convenient internal function to convert depositor amount and map to Struct array, internal\\n   * @param _map map of depositor address to amount\\n   * @param _depositors the address of depositors\\n   * @return array of DepositAmount struct\\n   */\\n  function convertMapToDepositAmount(mapping(address => uint256) storage _map, EnumerableSet.AddressSet storage _depositors) internal view returns (DepositAmount[] memory) {\\n    DepositAmount[] memory result = new DepositAmount[](_depositors.length());\\n    for (uint256 i = 0; i < _depositors.length(); i++) {\\n      result[i] = DepositAmount(_depositors.at(i), _map[_depositors.at(i)]);\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Verify the validity of the components, by adding up the proportion to see if it exceeds 100%, internal\\n   * @param _components the components of this vault, including the address of the vault to invest\\n   */\\n  function verifyComponents(Component[] memory _components) internal pure {\\n    uint256 sumOfProportion = 0;\\n    for (uint256 i = 0; i < _components.length; i++) {\\n      sumOfProportion += _components[i].proportion;\\n    }\\n    require(sumOfProportion == 10000, \\\"the sum of the proportions in given components not equal to 100%\\\");\\n  }\\n\\n  /**\\n   * @notice Transfer certain amount token of certain address to some other account, internal\\n   * @param _from the address to transfer from\\n   * @param _account the address to transfer\\n   * @param _amount the amount to transfer\\n   * @param _tokenAddress the token address to transfer\\n   */\\n  function _transferERC20From(address _from, address _tokenAddress, address _account, uint256 _amount) internal {\\n    IERC20Upgradeable(_tokenAddress).safeTransferFrom(_from, _account, _amount);\\n  }\\n\\n  /**\\n   * @notice Transfer certain amount token of certain address to some other account, internal\\n   * @param _account the address to transfer\\n   * @param _amount the amount to transfer\\n   * @param _tokenAddress the token address to transfer\\n   */\\n  function _transferERC20(address _tokenAddress, address _account, uint256 _amount) internal {\\n    IERC20Upgradeable(_tokenAddress).safeTransfer(_account, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/utils/AdminUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @title AdminUpgradeable\\n * @notice Base class for all the contracts which need convenience methods to operate admin rights\\n * @author AlloyX\\n */\\nabstract contract AdminUpgradeable is AccessControlUpgradeable {\\n  function __AdminUpgradeable_init(address deployer) internal onlyInitializing {\\n    __AccessControl_init();\\n    _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n  }\\n\\n  /**\\n   * @notice Only admin users can perform\\n   */\\n  modifier onlyAdmin() {\\n    require(isAdmin(msg.sender), \\\"Restricted to admins\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Check if the account is one of the admins\\n   * @param account The account to check\\n   */\\n  function isAdmin(address account) public view returns (bool) {\\n    return hasRole(DEFAULT_ADMIN_ROLE, account);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxManager\\n * @author AlloyX\\n */\\ninterface IAlloyxManager {\\n  /**\\n   * @notice Check if the vault is a vault created by the manager\\n   * @param _vault the address of the vault\\n   * @return true if it is a vault otherwise false\\n   */\\n  function isVault(address _vault) external returns (bool);\\n\\n  /**\\n   * @notice Get all the addresses of vaults\\n   * @return the addresses of vaults\\n   */\\n  function getVaults() external returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/config/AlloyxConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IAlloyxConfig.sol\\\";\\nimport \\\"../utils/AdminUpgradeable.sol\\\";\\n\\n/**\\n * @title AlloyX Configuration\\n * @notice The config information which contains all the relevant smart contracts and numeric and boolean configuration\\n * @author AlloyX\\n */\\n\\ncontract AlloyxConfig is IAlloyxConfig, AdminUpgradeable {\\n  mapping(uint256 => address) private addresses;\\n  mapping(uint256 => uint256) private numbers;\\n  mapping(uint256 => bool) private booleans;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n  event BooleanUpdated(address owner, uint256 index, bool oldValue, bool newValue);\\n\\n  function initialize() external initializer {\\n    __AdminUpgradeable_init(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Set the bool of certain index\\n   * @param booleanIndex the index to set\\n   * @param newBoolean new address to set\\n   */\\n  function setBoolean(uint256 booleanIndex, bool newBoolean) public override onlyAdmin {\\n    emit BooleanUpdated(msg.sender, booleanIndex, booleans[booleanIndex], newBoolean);\\n    booleans[booleanIndex] = newBoolean;\\n  }\\n\\n  /**\\n   * @notice Set the address of certain index\\n   * @param addressIndex the index to set\\n   * @param newAddress new address to set\\n   */\\n  function setAddress(uint256 addressIndex, address newAddress) public override onlyAdmin {\\n    require(newAddress != address(0));\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  /**\\n   * @notice Set the number of certain index\\n   * @param index the index to set\\n   * @param newNumber new number to set\\n   */\\n  function setNumber(uint256 index, uint256 newNumber) public override onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  /**\\n   * @notice Copy from other config\\n   * @param _initialConfig the configuration to copy from\\n   * @param numbersLength the length of the numbers to copy from\\n   * @param addressesLength the length of the addresses to copy from\\n   * @param boolsLength the length of the bools to copy from\\n   */\\n  function copyFromOtherConfig(\\n    address _initialConfig,\\n    uint256 numbersLength,\\n    uint256 addressesLength,\\n    uint256 boolsLength\\n  ) external onlyAdmin {\\n    IAlloyxConfig initialConfig = IAlloyxConfig(_initialConfig);\\n    for (uint256 i = 0; i < numbersLength; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < addressesLength; i++) {\\n      setAddress(i, initialConfig.getAddress(i));\\n    }\\n\\n    for (uint256 i = 0; i < boolsLength; i++) {\\n      setBoolean(i, initialConfig.getBoolean(i));\\n    }\\n  }\\n\\n  /**\\n   * @notice Get address for index\\n   * @param index the index to get address from\\n   */\\n  function getAddress(uint256 index) external view override returns (address) {\\n    return addresses[index];\\n  }\\n\\n  /**\\n   * @notice Get number for index\\n   * @param index the index to get number from\\n   */\\n  function getNumber(uint256 index) external view override returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  /**\\n   * @notice Get bool for index\\n   * @param index the index to get bool from\\n   */\\n  function getBoolean(uint256 index) external view override returns (bool) {\\n    return booleans[index];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/config/ConfigHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../goldfinch/interfaces/IPoolTokens.sol\\\";\\nimport \\\"../interfaces/IAlloyxWhitelist.sol\\\";\\nimport \\\"../interfaces/IAlloyxTreasury.sol\\\";\\nimport \\\"../interfaces/IGoldfinchDesk.sol\\\";\\nimport \\\"../interfaces/ITruefiDesk.sol\\\";\\nimport \\\"../interfaces/IBackerRewards.sol\\\";\\nimport \\\"../interfaces/IMapleDesk.sol\\\";\\nimport \\\"../interfaces/IClearPoolDesk.sol\\\";\\nimport \\\"../interfaces/IRibbonDesk.sol\\\";\\nimport \\\"../interfaces/IRibbonLendDesk.sol\\\";\\nimport \\\"../interfaces/ICredixDesk.sol\\\";\\nimport \\\"../interfaces/ICredixOracle.sol\\\";\\nimport \\\"../interfaces/IAlloyxManager.sol\\\";\\nimport \\\"../interfaces/IAlloyxStakeInfo.sol\\\";\\nimport \\\"../interfaces/IAlloyxOperator.sol\\\";\\nimport \\\"../interfaces/IStakeDesk.sol\\\";\\nimport \\\"../interfaces/ICToken.sol\\\";\\nimport \\\"../interfaces/IFluxDesk.sol\\\";\\nimport \\\"../interfaces/IBackedDesk.sol\\\";\\nimport \\\"../interfaces/IBackedOracle.sol\\\";\\nimport \\\"../interfaces/IERC20Token.sol\\\";\\nimport \\\"./AlloyxConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\nimport \\\"../interfaces/IWalletDesk.sol\\\";\\nimport \\\"../interfaces/IOpenEdenDesk.sol\\\";\\nimport \\\"../interfaces/IAlloyxDesk.sol\\\";\\nimport \\\"../interfaces/IAlloyxV1StableCoinDesk.sol\\\";\\nimport \\\"../interfaces/IAlloyxV1Exchange.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the AlloyxConfig contract\\n * @author AlloyX\\n */\\n\\nlibrary ConfigHelper {\\n  function managerAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Manager));\\n  }\\n\\n  function alyxAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ALYX));\\n  }\\n\\n  function treasuryAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Treasury));\\n  }\\n\\n  function configAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Config));\\n  }\\n\\n  function permanentStakeInfoAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PermanentStakeInfo));\\n  }\\n\\n  function regularStakeInfoAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.RegularStakeInfo));\\n  }\\n\\n  function stakeDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakeDesk));\\n  }\\n\\n  function goldfinchDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchDesk));\\n  }\\n\\n  function truefiDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TruefiDesk));\\n  }\\n\\n  function mapleDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MapleDesk));\\n  }\\n\\n  function clearPoolDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ClearPoolDesk));\\n  }\\n\\n  function ribbonDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.RibbonDesk));\\n  }\\n\\n  function ribbonLendDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.RibbonLendDesk));\\n  }\\n\\n  function credixDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CredixDesk));\\n  }\\n\\n  function credixOracleAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CredixOracle));\\n  }\\n\\n  function backerRewardsAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\\n  }\\n\\n  function whitelistAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Whitelist));\\n  }\\n\\n  function poolTokensAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function seniorPoolAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function fiduAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.FIDU));\\n  }\\n\\n  function gfiAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function usdcAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function mplAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MPL));\\n  }\\n\\n  function wethAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.WETH));\\n  }\\n\\n  function swapRouterAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SwapRouter));\\n  }\\n\\n  function operatorAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Operator));\\n  }\\n\\n  function fluxTokenAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.FluxToken));\\n  }\\n\\n  function fluxDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.FluxDesk));\\n  }\\n\\n  function backedDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackedDesk));\\n  }\\n\\n  function backedOracleAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackedOracle));\\n  }\\n\\n  function backedTokenAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackedToken));\\n  }\\n\\n  function walletDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.WalletDesk));\\n  }\\n\\n  function openEdenDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OpenEdenDesk));\\n  }\\n\\n  function alloyxV1DeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.AlloyxV1Desk));\\n  }\\n\\n  function alloyxV1StableCoinDeskAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.AlloyxV1StableCoinDesk));\\n  }\\n\\n  function alloyxV1ExchangeAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.AlloyxV1Exchange));\\n  }\\n\\n  function alloyxV1DuraAddress(AlloyxConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.AlloyxV1Dura));\\n  }\\n\\n  function getManager(AlloyxConfig config) internal view returns (IAlloyxManager) {\\n    return IAlloyxManager(managerAddress(config));\\n  }\\n\\n  function getAlyx(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\\n    return IERC20Upgradeable(alyxAddress(config));\\n  }\\n\\n  function getTreasury(AlloyxConfig config) internal view returns (IAlloyxTreasury) {\\n    return IAlloyxTreasury(treasuryAddress(config));\\n  }\\n\\n  function getPermanentStakeInfo(AlloyxConfig config) internal view returns (IAlloyxStakeInfo) {\\n    return IAlloyxStakeInfo(permanentStakeInfoAddress(config));\\n  }\\n\\n  function getRegularStakeInfo(AlloyxConfig config) internal view returns (IAlloyxStakeInfo) {\\n    return IAlloyxStakeInfo(regularStakeInfoAddress(config));\\n  }\\n\\n  function getConfig(AlloyxConfig config) internal view returns (IAlloyxConfig) {\\n    return IAlloyxConfig(treasuryAddress(config));\\n  }\\n\\n  function getStakeDesk(AlloyxConfig config) internal view returns (IStakeDesk) {\\n    return IStakeDesk(stakeDeskAddress(config));\\n  }\\n\\n  function getGoldfinchDesk(AlloyxConfig config) internal view returns (IGoldfinchDesk) {\\n    return IGoldfinchDesk(goldfinchDeskAddress(config));\\n  }\\n\\n  function getTruefiDesk(AlloyxConfig config) internal view returns (ITruefiDesk) {\\n    return ITruefiDesk(truefiDeskAddress(config));\\n  }\\n\\n  function getMapleDesk(AlloyxConfig config) internal view returns (IMapleDesk) {\\n    return IMapleDesk(mapleDeskAddress(config));\\n  }\\n\\n  function getClearPoolDesk(AlloyxConfig config) internal view returns (IClearPoolDesk) {\\n    return IClearPoolDesk(clearPoolDeskAddress(config));\\n  }\\n\\n  function getRibbonDesk(AlloyxConfig config) internal view returns (IRibbonDesk) {\\n    return IRibbonDesk(ribbonDeskAddress(config));\\n  }\\n\\n  function getRibbonLendDesk(AlloyxConfig config) internal view returns (IRibbonLendDesk) {\\n    return IRibbonLendDesk(ribbonLendDeskAddress(config));\\n  }\\n\\n  function getCredixDesk(AlloyxConfig config) internal view returns (ICredixDesk) {\\n    return ICredixDesk(credixDeskAddress(config));\\n  }\\n\\n  function getCredixOracle(AlloyxConfig config) internal view returns (ICredixOracle) {\\n    return ICredixOracle(credixOracleAddress(config));\\n  }\\n\\n  function getBackerRewards(AlloyxConfig config) internal view returns (IBackerRewards) {\\n    return IBackerRewards(backerRewardsAddress(config));\\n  }\\n\\n  function getWhitelist(AlloyxConfig config) internal view returns (IAlloyxWhitelist) {\\n    return IAlloyxWhitelist(whitelistAddress(config));\\n  }\\n\\n  function getPoolTokens(AlloyxConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getSeniorPool(AlloyxConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getFIDU(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\\n    return IERC20Upgradeable(fiduAddress(config));\\n  }\\n\\n  function getGFI(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\\n    return IERC20Upgradeable(gfiAddress(config));\\n  }\\n\\n  function getUSDC(AlloyxConfig config) internal view returns (IERC20Token) {\\n    return IERC20Token(usdcAddress(config));\\n  }\\n\\n  function getMPL(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\\n    return IERC20Upgradeable(mplAddress(config));\\n  }\\n\\n  function getWETH(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\\n    return IERC20Upgradeable(wethAddress(config));\\n  }\\n\\n  function getSwapRouter(AlloyxConfig config) internal view returns (ISwapRouter) {\\n    return ISwapRouter(swapRouterAddress(config));\\n  }\\n\\n  function getOperator(AlloyxConfig config) internal view returns (IAlloyxOperator) {\\n    return IAlloyxOperator(operatorAddress(config));\\n  }\\n\\n  function getFluxToken(AlloyxConfig config) internal view returns (ICToken) {\\n    return ICToken(fluxTokenAddress(config));\\n  }\\n\\n  function getFluxDesk(AlloyxConfig config) internal view returns (IFluxDesk) {\\n    return IFluxDesk(fluxDeskAddress(config));\\n  }\\n\\n  function getBackedDesk(AlloyxConfig config) internal view returns (IBackedDesk) {\\n    return IBackedDesk(backedDeskAddress(config));\\n  }\\n\\n  function getBackedOracle(AlloyxConfig config) internal view returns (IBackedOracle) {\\n    return IBackedOracle(backedOracleAddress(config));\\n  }\\n\\n  function getBackedToken(AlloyxConfig config) internal view returns (IERC20Token) {\\n    return IERC20Token(backedTokenAddress(config));\\n  }\\n\\n  function getWalletDesk(AlloyxConfig config) internal view returns (IWalletDesk) {\\n    return IWalletDesk(walletDeskAddress(config));\\n  }\\n\\n  function getOpenEdenDesk(AlloyxConfig config) internal view returns (IOpenEdenDesk) {\\n    return IOpenEdenDesk(openEdenDeskAddress(config));\\n  }\\n\\n  function getAlloyxV1Desk(AlloyxConfig config) internal view returns (IAlloyxDesk) {\\n    return IAlloyxDesk(alloyxV1DeskAddress(config));\\n  }\\n\\n  function getAlloyxV1StableCoinDesk(AlloyxConfig config) internal view returns (IAlloyxV1StableCoinDesk) {\\n    return IAlloyxV1StableCoinDesk(alloyxV1StableCoinDeskAddress(config));\\n  }\\n\\n  function getAlloyxV1Exchange(AlloyxConfig config) internal view returns (IAlloyxV1Exchange) {\\n    return IAlloyxV1Exchange(alloyxV1ExchangeAddress(config));\\n  }\\n\\n  function getAlloyxV1Dura(AlloyxConfig config) internal view returns (IERC20Token) {\\n    return IERC20Token(alloyxV1DuraAddress(config));\\n  }\\n\\n  function getInflationPerYearForProtocolFee(AlloyxConfig config) internal view returns (uint256) {\\n    uint256 inflationPerYearForProtocolFee = config.getNumber(uint256(ConfigOptions.Numbers.InflationPerYearForProtocolFee));\\n    require(inflationPerYearForProtocolFee <= 10000, \\\"inflation per year should be smaller or equal to 10000\\\");\\n    return inflationPerYearForProtocolFee;\\n  }\\n\\n  function getRegularStakerProportion(AlloyxConfig config) internal view returns (uint256) {\\n    uint256 regularStakerProportion = config.getNumber(uint256(ConfigOptions.Numbers.RegularStakerProportion));\\n    require(regularStakerProportion <= 10000, \\\"regular staker proportion should be smaller or equal to 10000\\\");\\n    return regularStakerProportion;\\n  }\\n\\n  function getPermanentStakerProportion(AlloyxConfig config) internal view returns (uint256) {\\n    uint256 permanentStakerProportion = config.getNumber(uint256(ConfigOptions.Numbers.PermanentStakerProportion));\\n    require(permanentStakerProportion <= 10000, \\\"permanent staker should be smaller or equal to 10000\\\");\\n    return permanentStakerProportion;\\n  }\\n\\n  function getUniswapFeeBasePoint(AlloyxConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.UniswapFeeBasePoint));\\n  }\\n\\n  function getMinDelay(AlloyxConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.MinDelay));\\n  }\\n\\n  function getQuorumPercentage(AlloyxConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.QuorumPercentage));\\n  }\\n\\n  function getVotingPeriod(AlloyxConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.VotingPeriod));\\n  }\\n\\n  function getVotingDelay(AlloyxConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.VotingDelay));\\n  }\\n\\n  function getThresholdAlyxForVaultCreation(AlloyxConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ThresholdAlyxForVaultCreation));\\n  }\\n\\n  function getThresholdUsdcForVaultCreation(AlloyxConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ThresholdUsdcForVaultCreation));\\n  }\\n\\n  function isPaused(AlloyxConfig config) internal view returns (bool) {\\n    return config.getBoolean(uint256(ConfigOptions.Booleans.IsPaused));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAlloyx.sol\\\";\\n\\n/**\\n * @title IAlloyxVault\\n * @author AlloyX\\n */\\ninterface IAlloyxVault is IAlloyx {\\n  /**\\n   * @notice Start the vault by setting up the portfolio of the vault and initial depositors' info\\n   * @param _components the initial setup of the portfolio for this vault\\n   * @param _usdcDepositorArray the array of DepositAmount containing the amount and address of the USDC depositors\\n   * @param _alyxDepositorArray the array of DepositAmount containing the amount and address of the ALYX depositors\\n   * @param _totalUsdc total amount of USDC to start the vault with\\n   */\\n  function startVault(\\n    Component[] calldata _components,\\n    DepositAmount[] memory _usdcDepositorArray,\\n    DepositAmount[] memory _alyxDepositorArray,\\n    uint256 _totalUsdc\\n  ) external;\\n\\n  /**\\n   * @notice Reinstate governance called by manager contract only\\n   * @param _alyxDepositorArray the array of DepositAmount containing the amount and address of the ALYX depositors\\n   */\\n  function reinstateGovernance(DepositAmount[] memory _alyxDepositorArray) external;\\n\\n  /**\\n   * @notice Liquidate the vault by unstaking from all permanent and regular stakers and burn all the governance tokens issued\\n   */\\n  function liquidate() external;\\n\\n  /**\\n   * @notice Accrue the protocol fee by minting vault tokens to the treasury\\n   */\\n  function accrueProtocolFee() external;\\n\\n  /**\\n   * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n   * @param _tokenAmount Number of Alloy Tokens\\n   */\\n  function withdraw(uint256 _tokenAmount) external;\\n\\n  /**\\n   * @notice Get address of the vault token\\n   */\\n  function getTokenAddress() external returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxConfig\\n * @author AlloyX\\n */\\ninterface IAlloyxConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function getBoolean(uint256 index) external returns (bool);\\n\\n  function setAddress(uint256 index, address newAddress) external;\\n\\n  function setNumber(uint256 index, uint256 newNumber) external;\\n\\n  function setBoolean(uint256 booleanIndex, bool newBoolean) external;\\n}\\n\"\r\n    },\r\n    \"contracts/goldfinch/interfaces/ISeniorPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/goldfinch/interfaces/IPoolTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721, IERC721Enumerable {\\n  event TokenMinted(address indexed owner, address indexed pool, uint256 indexed tokenId, uint256 amount, uint256 tranche);\\n\\n  event TokenRedeemed(address indexed owner, address indexed pool, uint256 indexed tokenId, uint256 principalRedeemed, uint256 interestRedeemed, uint256 tranche);\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxWhitelist\\n * @author AlloyX\\n */\\ninterface IAlloyxWhitelist {\\n  /**\\n   * @notice Check whether user is whitelisted\\n   * @param _whitelistedAddress The address to whitelist.\\n   */\\n  function isUserWhitelisted(address _whitelistedAddress) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IGoldfinchDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IGoldfinchDesk\\n * @author AlloyX\\n */\\ninterface IGoldfinchDesk {\\n  /**\\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   */\\n  function getGoldFinchPoolTokenBalanceInUsdc(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   * @param _poolAddress the pool address of which we calculate the balance\\n   * @param _tranche the tranche\\n   */\\n  function getGoldFinchPoolTokenBalanceInUsdcForPool(\\n    address _vaultAddress,\\n    address _poolAddress,\\n    uint256 _tranche\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Widthdraw GFI from pool token\\n   * @param _vaultAddress the vault address\\n   * @param _tokenIDs the IDs of token to sell\\n   */\\n  function withdrawGfiFromMultiplePoolTokens(address _vaultAddress, uint256[] calldata _tokenIDs) external;\\n\\n  /**\\n   * @notice Fidu Value in Vault in term of USDC\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   */\\n  function getFiduBalanceInUsdc(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Purchase pool token to get pooltoken\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount of usdc to purchase by\\n   * @param _poolAddress the pool address to buy from\\n   * @param _tranche the tranch id\\n   */\\n  function purchasePoolToken(\\n    address _vaultAddress,\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _tranche\\n  ) external;\\n\\n  /**\\n   * @notice Widthdraw from junior token to get repayments\\n   * @param _vaultAddress the vault address\\n   * @param _tokenID the ID of token to sell\\n   * @param _amount the amount to withdraw\\n   * @param _poolAddress the pool address to withdraw from\\n   */\\n  function withdrawFromJuniorToken(\\n    address _vaultAddress,\\n    uint256 _tokenID,\\n    uint256 _amount,\\n    address _poolAddress\\n  ) external;\\n\\n  /**\\n   * @notice Purchase FIDU\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount of usdc to purchase by\\n   */\\n  function purchaseFIDU(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n   * @notice Sell senior token to redeem FIDU\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount of FIDU to sell\\n   */\\n  function sellFIDU(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n   * @notice Fidu Balance in Vault\\n   * @param _vaultAddress the pool address of which we calculate the balance\\n   */\\n  function getFiduBalance(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice GoldFinch PoolToken IDs\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   */\\n  function getGoldFinchPoolTokenIds(address _vaultAddress) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n   * @param _tokenID The backer NFT id\\n   */\\n  function getJuniorTokenValue(uint256 _tokenID) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IBackerRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IBackerRewards\\n * @author AlloyX\\n */\\ninterface IBackerRewards {\\n  /**\\n   * @notice PoolToken request to withdraw multiple PoolTokens allocated rewards\\n   * @param tokenIds Array of pool token id\\n   */\\n  function withdrawMultiple(uint256[] calldata tokenIds) external;\\n\\n  /**\\n   * @notice PoolToken request to withdraw all allocated rewards\\n   * @param tokenId Pool token id\\n   */\\n  function withdraw(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxTreasury\\n * @author AlloyX\\n */\\ninterface IAlloyxTreasury {\\n  /**\\n   * @notice Withdraw the protocol fee from one vault, restricted to manager\\n   * @param _vaultAddress the vault address to collect fee\\n   */\\n  function withdrawProtocolFee(address _vaultAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/ITruefiDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title ITruefiDesk\\n * @author AlloyX\\n */\\ninterface ITruefiDesk {\\n  /**\\n   * @notice Get the USDC value of the truefi wallet\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   */\\n  function getTruefiWalletUsdcValue(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Deposit treasury USDC to truefi tranche vault\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of tranche vault\\n   * @param _amount the amount to deposit\\n   */\\n  function depositToTruefi(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Withdraw USDC from truefi Tranche portfolio and deposit to treasury\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of Tranche portfolio\\n   * @param _amount the amount to withdraw in USDC\\n   * @return shares to burn during withdrawal https://github.com/trusttoken/contracts-carbon/blob/c9694396fc01c851a6c006d65c9e3420af723ee2/contracts/TrancheVault.sol#L262\\n   */\\n  function withdrawFromTruefi(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Get the USDC value of the truefi wallet on one tranche vault address\\n   * @param _vaultAddress the pool address of which we calculate the balance\\n   * @param _address the address of Tranche portfolio\\n   */\\n  function getTruefiWalletUsdcValueOfPortfolio(address _vaultAddress, address _address) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the Truefi Pool addresses for the alloyx vault\\n   * @param _vaultAddress the vault address\\n   */\\n  function getTruefiVaultAddressesForAlloyxVault(address _vaultAddress) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get the Truefi Vault balance for the alloyx vault\\n   * @param _vaultAddress the address of alloyx vault\\n   * @param _truefiVault the address of Truefi vault\\n   */\\n  function getTruefiVaultShareForAlloyxVault(address _vaultAddress, address _truefiVault) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IMapleDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IMapleDesk\\n * @author AlloyX\\n */\\ninterface IMapleDesk {\\n  /**\\n   * @notice Maple Wallet Value in term of USDC\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   */\\n  function getMapleWalletUsdcValue(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the Usdc value of the truefi wallet\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   * @param _address the address of pool\\n   */\\n  function getMapleWalletUsdcValueOfPool(address _vaultAddress, address _address) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the Maple balance\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   * @param _address the address of pool\\n   */\\n  function getMapleBalanceOfPool(address _vaultAddress, address _address) external view returns (uint256);\\n\\n  /**\\n   * @notice Transfer certain amount token of certain address to some other account\\n   * @param _account the address to transfer\\n   * @param _amount the amount to transfer\\n   * @param _tokenAddress the token address to transfer\\n   */\\n  function transferERC20(\\n    address _tokenAddress,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Deposit treasury USDC to Maple pool\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of pool\\n   * @param _amount the amount to deposit\\n   */\\n  function depositToMaple(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Withdraw USDC from Maple managed portfolio and deposit to treasury\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of pool\\n   * @param _amount the amount to withdraw in USDC\\n   */\\n  function withdrawFromMaple(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Initiate the countdown from the lockup period on Maple side\\n   * @param _vaultAddress the vault address\\n   */\\n  function requestWithdraw(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _shares\\n  ) external;\\n\\n  /**\\n   * @notice Get the Maple Pool addresses for the alloyx vault\\n   * @param _vaultAddress the vault address\\n   */\\n  function getMaplePoolAddressesForVault(address _vaultAddress) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IClearPoolDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IClearPoolDesk\\n * @author AlloyX\\n */\\ninterface IClearPoolDesk {\\n  /**\\n   * @notice Get the Usdc value of the Clear Pool wallet\\n   * @param _vaultAddress the pool address of which we calculate the balance\\n   */\\n  function getClearPoolWalletUsdcValue(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the Usdc value of the Clear Pool wallet on one pool master address\\n   * @param _vaultAddress the pool address of which we calculate the balance\\n   * @param _address the address of pool master\\n   */\\n  function getClearPoolUsdcValueOfPoolMaster(address _vaultAddress, address _address) external view returns (uint256);\\n\\n  /**\\n   * @notice Deposit treasury USDC to ClearPool pool master\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of pool master\\n   * @param _amount the amount to deposit\\n   */\\n  function provide(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Withdraw USDC from ClearPool pool master\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of pool master\\n   * @param _amount the amount to withdraw in pool master tokens\\n   */\\n  function redeem(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Get the ClearPool addresses for the alloyx vault\\n   * @param _vaultAddress the vault address\\n   */\\n  function getClearPoolAddressesForVault(address _vaultAddress) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get the ClearPool balance for the alloyx vault\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of pool master\\n   */\\n  function getClearPoolBalanceForVault(address _vaultAddress, address _address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/ICredixDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title ICredixDesk\\n * @author AlloyX\\n */\\ninterface ICredixDesk {\\n  /**\\n   * @notice Get the Usdc value of the credix wallet\\n   * @param _poolAddress the address of pool\\n   */\\n  function getCredixWalletUsdcValue(address _poolAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Deposit the Usdc value\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount to transfer\\n   */\\n  function increaseUsdcValueForPool(address _vaultAddress, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IRibbonDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IRibbonDesk\\n * @author AlloyX\\n */\\ninterface IRibbonDesk {\\n  function getRibbonWalletUsdcValue(address _alloyxVault) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the Usdc value of the Ribbon wallet\\n   * @param _vaultAddress the address of alloyx vault\\n   */\\n  function getRibbonUsdcValueOfVault(address _vaultAddress, address _ribbonVault) external view returns (uint256);\\n\\n  /**\\n   * @notice Deposits the `asset` from vault.\\n   * @param _vaultAddress the vault address\\n   * @param _amount is the amount of `asset` to deposit\\n   * @param _ribbonVault is the address of the vault\\n   */\\n  function deposit(\\n    address _vaultAddress,\\n    address _ribbonVault,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Initiates a withdrawal that can be processed once the round completes\\n   * @param _vaultAddress the vault address\\n   * @param _numShares is the number of shares to withdraw\\n   * @param _ribbonVault is the address of the vault\\n   */\\n  function initiateWithdraw(\\n    address _vaultAddress,\\n    address _ribbonVault,\\n    uint256 _numShares\\n  ) external;\\n\\n  /**\\n   * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n   * @param _vaultAddress the vault address\\n   * @param _poolAddress the pool address\\n   */\\n  function completeWithdraw(address _vaultAddress, address _poolAddress) external;\\n\\n  /**\\n   * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n   * @param _vaultAddress the vault address\\n   * @param _ribbonVault is the address of the vault\\n   * @param _amount is the amount to withdraw in USDC https://github.com/ribbon-finance/ribbon-v2/blob/e9270281c7aa7433851ecee7f326c37bce28aec1/contracts/vaults/YearnVaults/RibbonThetaYearnVault.sol#L236\\n   */\\n  function withdrawInstantly(\\n    address _vaultAddress,\\n    address _ribbonVault,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Get the Ribbon Pool addresses for the alloyx vault\\n   * @param _vaultAddress the vault address\\n   */\\n  function getRibbonVaultAddressesForAlloyxVault(address _vaultAddress) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get the Ribbon Vault balance for the alloyx vault\\n   * @param _vaultAddress the address of alloyx vault\\n   * @param _ribbonVault the address of ribbon vault\\n   */\\n  function getRibbonVaultShareForAlloyxVault(address _vaultAddress, address _ribbonVault) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IRibbonLendDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IRibbonLendDesk\\n * @author AlloyX\\n */\\ninterface IRibbonLendDesk {\\n  /**\\n   * @notice Deposit vault USDC to RibbonLend pool master\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of pool master\\n   * @param _amount the amount to deposit\\n   */\\n  function provide(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Withdraw USDC from RibbonLend pool master\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of pool master\\n   * @param _amount the amount to withdraw in pool master tokens\\n   */\\n  function redeem(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Get the USDC value of the Clear Pool wallet\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   */\\n  function getRibbonLendWalletUsdcValue(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the USDC value of the Clear Pool wallet on one pool master address\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   * @param _address the address of pool master\\n   */\\n  function getRibbonLendUsdcValueOfPoolMaster(address _vaultAddress, address _address) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the RibbonLend Pool addresses for the alloyx vault\\n   * @param _vaultAddress the vault address\\n   */\\n  function getRibbonLendVaultAddressesForAlloyxVault(address _vaultAddress) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get the RibbonLend Vault balance for the alloyx vault\\n   * @param _vaultAddress the address of alloyx vault\\n   * @param _ribbonLendVault the address of RibbonLend vault\\n   */\\n  function getRibbonLendVaultShareForAlloyxVault(address _vaultAddress, address _ribbonLendVault) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/ICredixOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title ICredixOracle\\n * @author AlloyX\\n */\\ninterface ICredixOracle {\\n  /**\\n   * @notice Get the net asset value of vault\\n   * @param _vaultAddress the vault address to increase USDC value on\\n   */\\n  function getNetAssetValueInUsdc(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Increase the USDC value after the vault provides USDC to credix desk\\n   * @param _vaultAddress the vault address to increase USDC value on\\n   * @param _increasedValue the increased value of the vault\\n   */\\n  function increaseUsdcValue(address _vaultAddress, uint256 _increasedValue) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IFluxDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IFluxDesk\\n * @author AlloyX\\n */\\ninterface IFluxDesk {\\n  /**\\n   * @notice Purchase Flux\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount of usdc to purchase by\\n   */\\n  function mint(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n   * @notice Redeem FLUX\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount of FLUX to sell\\n   */\\n  function redeem(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n   * @notice Fidu Value in Vault in term of USDC\\n   * @param _vaultAddress the pool address of which we calculate the balance\\n   */\\n  function getFluxBalanceInUsdc(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Flux Balance in Vault in term\\n   * @param _vaultAddress the pool address\\n   */\\n  function getFluxBalance(address _vaultAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxStakeInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxStakeInfo\\n * @author AlloyX\\n */\\ninterface IAlloyxStakeInfo {\\n  function getAllStakers(address _vaultAddress) external returns (address[] memory);\\n\\n  /**\\n   * @notice Add stake for a staker\\n   * @param _vaultAddress The vault address\\n   * @param _staker The person intending to stake\\n   * @param _stake The size of the stake to be created.\\n   */\\n  function addStake(\\n    address _vaultAddress,\\n    address _staker,\\n    uint256 _stake\\n  ) external;\\n\\n  /**\\n   * @notice Remove stake for a staker\\n   * @param _vaultAddress The vault address\\n   * @param _staker The person intending to remove stake\\n   * @param _stake The size of the stake to be removed.\\n   */\\n  function removeStake(\\n    address _vaultAddress,\\n    address _staker,\\n    uint256 _stake\\n  ) external;\\n\\n  /**\\n   * @notice Remove all stakes with regards to one vault\\n   * @param _vaultAddress The vault address\\n   */\\n  function removeAllStake(address _vaultAddress) external;\\n\\n  /**\\n   * @notice Total receiver temporal stakes\\n   * @param _vaultAddress The vault address\\n   * @param _receiver the address of receiver\\n   */\\n  function receiverTemporalStake(address _vaultAddress, address _receiver) external view returns (uint256);\\n\\n  /**\\n   * @notice Total vault temporal stakes\\n   * @param _vaultAddress The vault address\\n   */\\n  function vaultTemporalStake(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice A method for a stakeholder to clear a stake with some leftover temporal stakes\\n   * @param _vaultAddress The vault address\\n   * @param _staker the address of the staker\\n   * @param _temporalStake the leftover temporal stake\\n   */\\n  function resetStakeTimestampWithTemporalStake(\\n    address _vaultAddress,\\n    address _staker,\\n    uint256 _temporalStake\\n  ) external;\\n\\n  /**\\n   * @notice Retrieve the stake for a stakeholder.\\n   * @param _staker The staker\\n   * @return stakes The amount staked and the time since when it's staked.\\n   */\\n  function totalStakeForUser(address _staker) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAlloyx.sol\\\";\\n\\n/**\\n * @title IAlloyxOperator\\n * @author AlloyX\\n */\\ninterface IAlloyxOperator is IAlloyx {\\n  /**\\n   * @notice Alloy DURA Token Value in terms of USDC from all the protocols involved\\n   * @param _vaultAddress the address of vault\\n   */\\n  function getTotalBalanceInUsdc(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Get additional amount to deposit using the proportion of the component of the vault and total vault value\\n   * @param _source the source of the third party protocol\\n   * @param _poolAddress the pool address of the third party protocol\\n   * @param _tranche the tranche to deposit\\n   * @param _proportion the proportion to deposit\\n   * @param _investableUsdc the amount of usdc investable\\n   */\\n  function getAdditionalDepositAmount(\\n    Source _source,\\n    address _poolAddress,\\n    uint256 _tranche,\\n    uint256 _proportion,\\n    uint256 _investableUsdc\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Perform deposit operation to different source\\n   * @param _source the source of the third party protocol\\n   * @param _poolAddress the pool address of the third party protocol\\n   * @param _tranche the tranche to deposit\\n   * @param _amount the amount to deposit\\n   */\\n  function performDeposit(\\n    Source _source,\\n    address _poolAddress,\\n    uint256 _tranche,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Perform withdrawal operation for different source\\n   * @param _source the source of the third party protocol\\n   * @param _poolAddress the pool address of the third party protocol\\n   * @param _tokenId the token ID\\n   * @param _amount the amount to withdraw\\n   */\\n  function performWithdraw(\\n    Source _source,\\n    address _poolAddress,\\n    uint256 _tokenId,\\n    uint256 _amount,\\n    WithdrawalStep _step\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IStakeDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IStakeDesk\\n * @author AlloyX\\n */\\ninterface IStakeDesk {\\n  /**\\n   * @notice Set map from vault address to gov token address\\n   * @param _vaultAddress the address of the vault\\n   * @param _govTokenAddress the address of the governance token\\n   */\\n  function setGovTokenForVault(address _vaultAddress, address _govTokenAddress) external;\\n\\n  /**\\n   * @notice Stake more ALYX into the vault, which will cause to mint govToken for the staker\\n   * @param _account the account to add stake\\n   * @param _amount the amount the message sender intending to stake in\\n   */\\n  function addPermanentStakeInfo(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Unstake some from the vault, which will cause the vault to burn govToken for the staker\\n   * @param _account the account to reduce stake\\n   * @param _amount the amount the message sender intending to unstake\\n   */\\n  function subPermanentStakeInfo(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Stake more into the vault,which will cause to mint govToken for the staker\\n   * @param _account the account to add stake\\n   * @param _amount the amount the message sender intending to stake in\\n   */\\n  function addRegularStakeInfo(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Unstake some from the vault, which will cause the vault to burn govToken for the staker\\n   * @param _account the account to reduce stake\\n   * @param _amount the amount the message sender intending to unstake\\n   */\\n  function subRegularStakeInfo(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Unstake all the regular and permanent stakers and burn all govTokens\\n   */\\n  function unstakeAllStakersAndBurnAllGovTokens() external;\\n\\n  /**\\n   * @notice Get the prorated gain for regular staker\\n   * @param _staker the staker to calculate the gain to whom the gain is entitled\\n   * @param _gain the total gain for all regular stakers\\n   */\\n  function getRegularStakerProrataGain(address _staker, uint256 _gain) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the prorated gain for permanent staker\\n   * @param _staker the staker to calculate the gain to whom the gain is entitled\\n   * @param _gain the total gain for all permanent stakers\\n   */\\n  function getPermanentStakerProrataGain(address _staker, uint256 _gain) external view returns (uint256);\\n\\n  /**\\n   * @notice Clear all stake info for staker\\n   * @param _staker the staker to clear the stake info for\\n   */\\n  function clearStakeInfoAfterClaiming(address _staker) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IBackedDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IBackedDesk\\n * @author AlloyX\\n */\\ninterface IBackedDesk {\\n  /**\\n   * @notice Deposit USDC to the desk and prepare for being taken to invest in Backed\\n   * @param _vaultAddress the address of vault\\n   * @param _amount the amount of USDC\\n   */\\n  function deposit(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n   * @notice Deposit USDC to the desk and prepare for being taken to invest in Backed\\n   * @param _vaultAddress the address of vault\\n   */\\n  function getBackedTokenValueInUsdc(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the amount of Backed token for vault\\n   * @param _vaultAddress the address of vault\\n   */\\n  function getConfirmedBackedTokenAmount(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Get pending values in USDC for vault\\n   * @param _vaultAddress the address of vault\\n   */\\n  function getPendingVaultUsdcValue(address _vaultAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IBackedOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IBackedOracle\\n * @author AlloyX\\n */\\ninterface IBackedOracle {\\n  function latestAnswer() external view returns (int256);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title ICToken\\n * @author AlloyX\\n */\\ninterface ICToken is IERC20Upgradeable {\\n  function mint(uint256 depositAmount) external;\\n\\n  function redeem(uint256 sharesAmount) external;\\n\\n  function exchangeRateStored() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IERC20Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IBackedToken\\n * @author AlloyX\\n */\\ninterface IERC20Token is IERC20Upgradeable {\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n   * overridden;\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxV1StableCoinDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxDesk\\n * @author AlloyX\\n */\\ninterface IAlloyxV1StableCoinDesk {\\n  /**\\n   * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n   * @param _tokenAmount Number of Alloy Tokens\\n   */\\n  function depositAlloyxDURATokens(uint256 _tokenAmount) external;\\n\\n  /**\\n   * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n   * @param _tokenAmount Number of stable coin\\n   */\\n  function depositUSDCCoin(uint256 _tokenAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxV1Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxDesk\\n * @author AlloyX\\n */\\ninterface IAlloyxV1Exchange {\\n  /**\\n   * @notice Convert Alloyx DURA to USDC amount\\n   * @param _amount the amount of DURA token to convert to usdc\\n   */\\n  function alloyxDuraToUsdc(uint256 _amount) external view returns (uint256);\\n\\n  /**\\n   * @notice Convert USDC Amount to Alloyx DURA\\n   * @param _amount the amount of usdc to convert to DURA token\\n   */\\n  function usdcToAlloyxDura(uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/config/ConfigOptions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our AlloyxConfig contract\\n * @author AlloyX\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER chan ge the order.\\n  enum Booleans {\\n    IsPaused\\n  }\\n  enum Numbers {\\n    InflationPerYearForProtocolFee, // In 4 decimals, where 100 means 1%\\n    RegularStakerProportion, // In 4 decimals, where 100 means 1%\\n    PermanentStakerProportion, // In 4 decimals, where 100 means 1%\\n    MinDelay,\\n    QuorumPercentage,\\n    VotingPeriod,\\n    VotingDelay,\\n    ThresholdAlyxForVaultCreation,\\n    ThresholdUsdcForVaultCreation,\\n    UniswapFeeBasePoint\\n  }\\n  enum Addresses {\\n    Manager,\\n    ALYX,\\n    Treasury,\\n    PermanentStakeInfo,\\n    RegularStakeInfo,\\n    Config,\\n    StakeDesk,\\n    GoldfinchDesk,\\n    TruefiDesk,\\n    MapleDesk,\\n    ClearPoolDesk,\\n    RibbonDesk,\\n    RibbonLendDesk,\\n    CredixDesk,\\n    CredixOracle,\\n    Whitelist,\\n    BackerRewards,\\n    PoolTokens,\\n    SeniorPool,\\n    FIDU,\\n    GFI,\\n    USDC,\\n    MPL,\\n    WETH,\\n    SwapRouter,\\n    Operator,\\n    FluxToken,\\n    FluxDesk,\\n    BackedDesk,\\n    BackedOracle,\\n    BackedToken,\\n    WalletDesk,\\n    OpenEdenDesk,\\n    AlloyxV1Desk,\\n    AlloyxV1StableCoinDesk,\\n    AlloyxV1Exchange,\\n    AlloyxV1Dura\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IWalletDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IWalletDesk\\n * @author AlloyX\\n */\\ninterface IWalletDesk {\\n  /**\\n   * @notice Get the Usdc value of the credix wallet\\n   * @param _poolAddress the address of pool\\n   */\\n  function getWalletUsdcValue(address _poolAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Set the Usdc value\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount to transfer\\n   */\\n  function setUsdcValueForPool(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n  * @notice Withdraw the Usdc value\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount to transfer\\n   */\\n  function withdrawUsdc(address _vaultAddress, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyxDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyxDesk\\n * @author AlloyX\\n */\\ninterface IAlloyxDesk {\\n  /**\\n   * @notice Purchase Alloyx\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount of usdc to purchase by\\n   */\\n  function deposit(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n   * @notice Withdraw ALLOYX V1\\n   * @param _vaultAddress the vault address\\n   * @param _amount the amount of ALLOYX V1 to sell\\n   */\\n  function withdraw(address _vaultAddress, uint256 _amount) external;\\n\\n  /**\\n   * @notice Fidu Value in Vault in term of USDC\\n   * @param _vaultAddress the pool address of which we calculate the balance\\n   */\\n  function getAlloyxBalanceInUsdc(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Alloyx Balance in Vault in term\\n   * @param _vaultAddress the pool address\\n   */\\n  function getAlloyxBalance(address _vaultAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IOpenEdenDesk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IOpenEdenDesk\\n * @author AlloyX\\n */\\ninterface IOpenEdenDesk {\\n  /**\\n   * @notice Get the USDC value of the OpenEden wallet\\n   * @param _vaultAddress the vault address of which we calculate the balance\\n   */\\n  function getOpenEdenWalletUsdcValue(address _vaultAddress) external view returns (uint256);\\n\\n  /**\\n   * @notice Deposit treasury USDC to OpenEden tranche vault\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of tranche vault\\n   * @param _amount the amount to deposit\\n   */\\n  function depositToOpenEden(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Withdraw USDC from OpenEden Tranche portfolio and deposit to treasury\\n   * @param _vaultAddress the vault address\\n   * @param _address the address of Tranche portfolio\\n   * @param _amount the amount to withdraw in USDC\\n   */\\n  function withdrawFromOpenEden(\\n    address _vaultAddress,\\n    address _address,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Get the USDC value of the OpenEden wallet on one tranche vault address\\n   * @param _vaultAddress the pool address of which we calculate the balance\\n   * @param _address the address of Tranche portfolio\\n   */\\n  function getOpenEdenWalletUsdcValueOfPortfolio(address _vaultAddress, address _address) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the OpenEden Pool addresses for the alloyx vault\\n   * @param _vaultAddress the vault address\\n   */\\n  function getOpenEdenVaultAddressesForAlloyxVault(address _vaultAddress) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get the OpenEden Vault balance for the alloyx vault\\n   * @param _vaultAddress the address of alloyx vault\\n   * @param _OpenEdenVault the address of OpenEden vault\\n   */\\n  function getOpenEdenVaultShareForAlloyxVault(address _vaultAddress, address _OpenEdenVault) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/goldfinch/interfaces/ITranchedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId) external view virtual returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount) external virtual returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId) external virtual returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/goldfinch/interfaces/IV2CreditLine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/goldfinch/interfaces/ICreditLine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/alloyx/interfaces/IAlloyx.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title IAlloyx\\n * @author AlloyX\\n */\\ninterface IAlloyx {\\n  /**\\n   * @notice Source denotes the protocol to which the component is going to invest\\n   */\\n  enum Source {\\n    USDC,\\n    GOLDFINCH,\\n    FIDU,\\n    TRUEFI,\\n    MAPLE,\\n    RIBBON,\\n    RIBBON_LEND,\\n    CLEAR_POOL,\\n    CREDIX,\\n    FLUX,\\n    BACKED,\\n    WALLET,\\n    OPEN_EDEN,\\n    ALLOYX_V1\\n  }\\n\\n  /**\\n   * @notice State refers to the pool status\\n   */\\n  enum State {\\n    INIT,\\n    STARTED,\\n    NON_GOVERNANCE\\n  }\\n\\n  /**\\n   * @notice State refers to the pool status\\n   */\\n  enum WithdrawalStep {\\n    DEFAULT,\\n    INIT,\\n    COMPLETE\\n  }\\n\\n  /**\\n   * @notice Component is the structure containing the information of which protocol to invest in\\n   * how much to invest, where the proportion has 4 decimals, meaning that 100 is 1%\\n   */\\n  struct Component {\\n    uint256 proportion;\\n    address poolAddress;\\n    uint256 tranche;\\n    Source source;\\n  }\\n\\n  /**\\n   * @notice DepositAmount is the structure containing the information of an address and amount\\n   */\\n  struct DepositAmount {\\n    address depositor;\\n    uint256 amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"configAddress\",\"type\":\"address\"}],\"name\":\"AlloyxConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IAlloyx.Source\",\"name\":\"source\",\"type\":\"uint8\"}],\"name\":\"SetComponent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueAllProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"accrueProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract AlloyxConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_alyxAmount\",\"type\":\"uint256\"}],\"name\":\"depositForProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"enum IAlloyx.Source\",\"name\":\"source\",\"type\":\"uint8\"}],\"internalType\":\"struct IAlloyx.Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"govTokenMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governorMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_configAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"reinstateGovernanceForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"enum IAlloyx.Source\",\"name\":\"source\",\"type\":\"uint8\"}],\"internalType\":\"struct IAlloyx.Component[]\",\"name\":\"_components\",\"type\":\"tuple[]\"}],\"name\":\"setProposalConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_govTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_govTimeLockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governorAddress\",\"type\":\"address\"}],\"name\":\"startAlloyxVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timelockMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"}],\"name\":\"totalAlyxDepositedForProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"}],\"name\":\"totalUsdcDepositedForProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalId\",\"type\":\"string\"}],\"name\":\"withdrawFromProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlloyxManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}