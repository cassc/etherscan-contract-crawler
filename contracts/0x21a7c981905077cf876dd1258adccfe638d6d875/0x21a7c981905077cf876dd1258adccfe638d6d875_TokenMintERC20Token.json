{"SourceCode": "/**\r\n48 65 6c 6c 6f 2c 20 79 6f 75 20 63 61 6e 20 63 61 6c 6c 20 6d 65 20 4c 61 63 68 6c 61 6e 2c 20 49 20 61 6d 20 6a 75 73 74 20 61 20 73 69 6d 70 6c 65 20 67 75 79 20 61 6e 64 20 49 20 6c 6f 76 65 20 64 65 63 65 6e 74 72 61 6c 69 7a 65 64 20 63 6f 6d 6d 75 6e 69 74 69 65 73 2e 20 0d 0a 0d 0a 54 6f 20 62 65 20 73 70 65 63 69 66 69 63 2c 20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 69 73 20 31 30 30 25 20 63 6f 6d 6d 75 6e 69 74 79 2d 6f 77 6e 65 64 20 69 6e 20 74 68 65 20 73 61 6d 65 20 77 61 79 20 77 65 20 73 65 65 20 42 54 43 2c 20 44 4f 47 45 20 6f 72 20 53 48 49 42 41 20 77 69 74 68 20 6e 6f 20 63 65 6e 74 72 61 6c 20 66 69 67 75 72 65 20 6f 72 20 6f 72 67 61 6e 69 7a 61 74 69 6f 6e 20 6d 61 69 6e 74 61 69 6e 69 6e 67 2e 0d 0a 0d 0a 77 68 79 3f 20 62 65 63 61 75 73 65 20 49 20 42 65 6c 69 65 76 65 20 69 6e 20 43 6f 6d 6d 75 6e 69 74 79 2c 20 74 68 65 20 68 65 61 72 74 20 61 6e 64 20 73 6f 75 6c 20 6f 66 20 61 20 63 72 79 70 74 6f 20 70 72 6f 6a 65 63 74 2c 20 77 68 61 74 20 61 20 73 74 72 6f 6e 67 20 66 6f 75 6e 64 61 74 69 6f 6e 20 74 68 61 74 20 69 74 20 6f 66 66 65 72 73 20 74 68 61 74 20 64 72 61 73 74 69 63 61 6c 6c 79 20 69 6d 70 72 6f 76 65 73 20 74 68 65 20 6c 69 6b 65 6c 69 68 6f 6f 64 20 6f 66 20 61 20 70 72 6f 6a 65 63 74 e2 80 99 73 20 73 75 63 63 65 73 73 2e 20 49 6e 64 69 76 69 64 75 61 6c 73 20 69 6e 20 74 68 65 20 63 6f 6d 6d 75 6e 69 74 79 20 61 72 65 20 77 68 6f 20 68 65 6c 70 20 72 61 69 73 65 20 66 75 6e 64 73 2c 20 63 72 65 61 74 65 20 76 69 64 65 6f 73 2c 20 6d 61 6b 65 20 6d 65 6d 65 73 2c 20 61 6e 64 20 73 68 6f 77 20 6f 74 68 65 72 20 70 65 6f 70 6c 65 20 68 6f 77 20 74 6f 20 75 73 65 20 74 68 65 20 66 65 61 74 75 72 65 73 20 6f 66 20 74 68 65 20 63 72 79 70 74 6f 20 74 65 63 68 6e 6f 6c 6f 67 79 2e 20 43 6f 6d 6d 75 6e 69 74 79 20 6d 65 6d 62 65 72 73 20 6f 66 74 65 6e 20 61 72 65 20 74 68 65 20 70 65 6f 70 6c 65 20 77 68 6f 20 6f 72 67 61 6e 69 7a 65 20 6d 65 65 74 75 70 73 2c 20 61 6e 73 77 65 72 20 71 75 65 73 74 69 6f 6e 73 20 69 6e 20 54 65 6c 65 67 72 61 6d 20 61 6e 64 20 44 69 73 63 6f 72 64 2c 20 6f 72 20 61 6d 70 6c 69 66 79 20 63 6f 6e 74 65 6e 74 20 6f 6e 20 43 72 79 70 74 6f 20 54 77 69 74 74 65 72 2e 20 0d 0a 0d 0a 44 65 73 69 67 6e 69 6e 67 20 74 68 69 73 20 64 65 63 65 6e 74 72 61 6c 69 7a 65 64 20 65 78 70 65 72 69 6d 65 6e 74 2c 20 77 65 20 64 65 63 69 64 65 64 20 74 6f 20 66 6f 6c 6c 6f 77 20 62 69 74 63 6f 69 6e 27 73 20 6d 6f 72 61 6c 73 20 61 6e 64 20 76 61 6c 75 65 2e 0d 0a 0d 0a 46 69 72 73 74 20 52 75 6c 65 20 20 20 4d 65 2c 20 4c 61 63 68 6c 61 6e 20 73 70 65 6e 64 69 6e 67 20 7a 65 72 6f 20 6d 6f 6e 65 79 20 6f 6e 20 74 68 65 20 70 72 6f 6a 65 63 74 2e 20 57 68 79 3f 20 46 69 72 73 74 2c 20 69 74 20 69 73 20 7a 65 72 6f 20 70 65 72 63 65 6e 74 20 74 61 78 20 61 6e 64 20 62 65 63 61 75 73 65 20 49 20 61 6d 20 6e 6f 74 20 74 68 65 20 6f 77 6e 65 72 20 6f 66 20 74 68 69 73 20 70 72 6f 6a 65 63 74 2c 20 69 74 20 62 65 6c 6f 6e 67 73 20 74 6f 20 74 68 65 20 63 6f 6d 6d 75 6e 69 74 79 2e 20 49 20 77 69 6c 6c 20 62 65 20 68 65 6c 70 69 6e 67 20 77 69 74 68 69 6e 20 74 68 65 20 63 6f 6d 6d 75 6e 69 74 79 20 61 6e 64 20 69 6e 20 74 68 65 20 62 61 63 6b 67 72 6f 75 6e 64 20 62 75 74 20 70 6c 65 61 73 65 20 6e 6f 74 65 20 74 68 61 74 20 49 20 77 69 6c 6c 20 62 65 20 61 6e 6f 6e 79 6d 6f 75 73 2e 0d 0a 0d 0a 53 65 63 6f 6e 64 20 52 75 6c 65 20 20 20 49 20 77 69 6c 6c 20 62 75 79 20 74 6f 6b 65 6e 73 2c 20 61 6e 64 20 49 20 77 69 6c 6c 20 73 65 6c 6c 20 74 6f 6b 65 6e 73 20 6a 75 73 74 20 6c 69 6b 65 20 65 76 65 72 79 6f 6e 65 20 65 6c 73 65 2e 20 49 20 61 6d 20 6e 6f 20 64 69 66 66 65 72 65 6e 74 20 66 72 6f 6d 20 79 6f 75 2c 20 74 68 65 20 66 72 65 65 20 6d 61 72 6b 65 74 20 77 69 6c 6c 20 62 65 20 70 72 61 63 74 69 63 65 64 20 62 75 74 20 73 68 61 6c 6c 20 6e 6f 74 20 62 65 20 74 61 6b 65 6e 20 61 64 76 61 6e 74 61 67 65 20 6f 66 2e 20 54 68 65 72 65 20 61 72 65 20 6e 6f 20 74 65 61 6d 20 74 6f 6b 65 6e 73 2c 20 69 74 20 69 73 20 6f 6e 65 20 68 75 6e 64 72 65 64 20 70 65 72 63 65 6e 74 20 70 75 62 6c 69 63 2e 20 0d 0a 0d 0a 54 68 69 72 64 20 52 75 6c 65 20 20 49 20 61 6d 20 6a 75 73 74 20 73 6f 6d 65 20 76 6f 6c 75 6e 74 65 65 72 2c 20 77 65 20 63 61 6e e2 80 99 74 20 70 61 79 20 61 6e 79 62 6f 64 79 20 66 6f 72 20 69 6e 66 6c 75 65 6e 63 65 20 6f 72 20 65 78 63 68 61 6e 67 65 20 6c 69 73 74 69 6e 67 2e 20 0d 0a 0d 0a 46 6f 75 72 74 68 20 52 75 6c 65 20 20 57 65 20 77 69 6c 6c 20 68 61 76 65 20 6f 75 72 20 67 6f 6f 64 20 64 61 79 73 2c 20 77 65 20 77 69 6c 6c 20 68 61 76 65 20 6f 75 72 20 62 61 64 20 64 61 79 73 2e 20 41 73 20 6c 6f 6e 67 20 61 73 20 77 65 20 6d 6f 76 65 20 0d 0a 66 6f 72 77 61 72 64 2c 20 77 65 20 77 69 6c 6c 20 72 65 61 63 68 20 61 6e 79 20 67 6f 61 6c 20 77 65 20 77 61 6e 74 2e 20 49 74 20 77 61 73 20 6e 65 76 65 72 20 61 62 6f 75 74 20 74 68 65 20 70 72 6f 6a 65 63 74 2c 20 6e 6f 72 20 74 68 65 20 64 65 76 65 6c 6f 70 65 72 20 6f 72 20 74 68 65 20 74 65 61 6d 20 62 65 68 69 6e 64 20 69 74 2c 20 49 74 20 77 61 73 20 61 6c 77 61 79 73 20 74 68 65 20 63 6f 6d 6d 75 6e 69 74 79 20 62 65 6c 69 65 76 69 6e 67 20 69 6e 20 74 68 65 69 72 20 76 69 73 69 6f 6e 20 74 68 61 74 20 6d 61 64 65 20 69 74 20 70 6f 73 73 69 62 6c 65 20 74 6f 20 61 63 68 69 65 76 65 20 67 6f 61 6c 73 2e 20 0d 0a 0d 0a 46 69 66 74 68 20 52 75 6c 65 20 20 54 61 6b 65 20 63 61 72 65 20 6f 66 20 74 68 65 20 70 72 6f 6a 65 63 74 2c 20 61 6e 64 20 74 72 65 61 74 20 69 74 20 6c 69 6b 65 20 79 6f 75 72 20 6f 77 6e 2e 20 50 6c 65 61 73 65 20 74 61 6b 65 20 63 61 72 65 20 6f 66 20 42 65 6c 6c 61 2e 0d 0a 0d 0a 4c 61 73 74 20 52 75 6c 65 20 66 6c 69 70 20 65 76 65 72 79 20 64 6f 67 20 63 6f 69 6e 20 61 6e 64 20 62 65 20 74 68 65 20 6e 65 78 74 20 62 69 74 63 6f 69 6e 0d 0a 0d 0a 54 6f 6b 65 6e 20 69 6e 66 6f 3a 20 6f 6e 65 20 62 69 6c 6c 69 6f 6e 20 73 75 70 70 6c 79 2c 20 61 6c 6c 20 70 61 69 72 65 64 3b 20 4e 6f 20 74 65 61 6d 20 74 6f 6b 65 6e 73 2c 20 20 49 74 20 69 73 20 61 20 57 65 6c 73 68 20 53 70 72 69 6e 67 65 72 20 53 70 61 6e 69 65 6c 20 62 72 65 65 64 20 64 6f 67 2c 20 66 65 6d 61 6c 65 2c 20 68 65 72 20 6e 61 6d 65 20 69 73 20 2d 20 42 65 6c 6c 61 0d 0a 0d 0a 42 65 6c 6c 61 2f 57 65 6c 73 68 0d 0a 75 73 65 63 61 73 65 20 3d 20 66 6c 69 70 20 61 6c 6c 20 64 6f 67 20 63 6f 69 6e 73 20 61 6e 64 20 62 65 63 6f 6d 65 20 74 68 65 20 6e 65 78 74 20 62 69 74 63 6f 69 6e 2c 20 62 65 69 6e 67 20 61 20 67 6c 6f 62 61 6c 20 61 63 63 65 70 74 65 64 20 64 69 67 69 74 61 6c 20 63 75 72 72 65 6e 63 79 2e 0d 0a 0d 0a 20 0d 0a 0d 0a 53 6f 20 77 68 61 74 20 63 61 6e 20 79 6f 75 20 64 6f 20 74 6f 20 68 65 6c 70 20 0d 0a 0d 0a 20 31 2e 20 69 6e 66 6c 75 65 6e 63 65 72 3f 20 79 6f 75 20 63 61 6e 20 73 70 65 61 6b 20 61 62 6f 75 74 20 74 68 65 20 70 72 6f 6a 65 63 74 20 6f 6e 20 79 6f 75 72 20 70 6c 61 74 66 6f 72 6d 0d 0a 0d 0a 20 32 2e 20 49 66 20 79 6f 75 20 61 72 65 20 61 20 6c 69 73 74 69 6e 67 20 61 67 65 6e 74 20 66 72 6f 6d 20 61 6e 20 65 78 63 68 61 6e 67 65 2c 20 79 6f 75 20 63 61 6e 20 6c 69 73 74 20 6f 72 20 69 6e 76 69 74 65 20 75 73 20 74 6f 20 70 61 72 74 69 63 69 70 61 74 65 20 69 6e 20 61 20 63 6f 6d 6d 75 6e 69 74 79 20 6c 69 73 74 69 6e 67 20 63 6f 6e 74 65 73 74 2e 20 0d 0a 0d 0a 20 33 2e 20 53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 67 72 6f 77 74 68 20 6f 66 20 74 68 65 20 70 72 6f 6a 65 63 74 2e 0d 0a 0d 0a 20 34 2e 20 48 65 6c 70 20 69 6e 63 72 65 61 73 65 20 74 72 75 73 74 20 61 6e 64 20 74 72 61 6e 73 70 61 72 65 6e 63 79 20 66 6f 72 20 74 68 65 20 70 72 6f 6a 65 63 74 0d 0a 0d 0a 20 35 2e 20 41 20 70 72 6f 66 65 73 73 69 6f 6e 61 6c 20 66 6f 75 72 63 68 61 6e 20 6f 72 20 52 65 64 64 69 74 20 53 68 69 6c 6c 65 72 3f 20 0d 0a 20 0d 0a 20 36 2e 20 6d 61 6b 65 20 6c 6f 74 73 20 6f 66 20 6d 65 6d 65 73 20 61 6e 64 20 73 70 61 6d 20 74 68 65 6d 20 6f 6e 20 61 6c 6c 20 73 6f 63 69 61 6c 20 70 6c 61 74 66 6f 72 6d 73 2c 20 34 63 68 61 6e 2c 20 43 54 2c 20 74 69 6b 74 6f 6b 2c 20 49 47 2c 20 46 42 2c 20 54 47 20 65 63 74 2e 2e 28 6d 6f 72 65 20 6d 65 6d 65 73 20 6d 6f 72 65 20 6d 6f 6f 6e 29 0d 0a 0d 0a 20 37 2e 20 53 6f 63 69 61 6c 20 6e 65 74 77 6f 72 6b 3f 20 43 72 79 70 74 6f 20 54 77 69 74 74 65 72 3f 20 44 69 73 63 6f 72 64 3f 20 54 65 6c 65 67 72 61 6d 3f 20 46 6f 72 75 6d 73 3f 20 28 74 65 6c 65 67 72 61 6d 20 2d 20 57 65 6c 73 68 6f 66 66 69 63 69 61 6c 29 0d 0a 0d 0a 20 38 2e 20 6d 61 6b 69 6e 67 73 20 4c 6f 67 6f 3f 20 4d 65 6d 65 73 3f 20 47 72 61 70 68 69 63 73 3f 20 57 65 62 73 69 74 65 3f 0d 0a 20 0d 0a 20 38 20 31 2f 32 2e 20 67 65 74 20 43 65 78 20 63 6f 6d 6d 75 6e 69 74 79 20 76 6f 74 69 6e 67 20 6c 69 6e 65 64 20 75 70 20 73 6f 20 77 65 20 63 61 6e 20 67 65 74 20 6c 69 73 74 65 64 2e 0d 0a 0d 0a 20 39 2e 20 62 65 20 69 6e 20 63 68 61 72 67 65 2c 20 68 61 76 65 20 61 20 73 75 67 67 65 73 74 69 6f 6e 3f 20 77 68 79 20 61 72 65 20 79 6f 75 20 6e 6f 74 20 64 6f 69 6e 67 20 69 74 3f 0d 0a 20 0d 0a 20 31 30 2e 20 61 64 64 20 4c 50 0d 0a 0d 0a 20 31 31 2e 20 62 65 20 69 6e 20 63 68 61 72 67 65 0d 0a 20 0d 0a 20 31 32 2e 20 62 65 20 69 6e 20 63 68 61 72 67 65 20 0d 0a 0d 0a 20 31 33 2e 20 64 6f 20 6e 6f 74 20 6c 65 74 20 74 68 65 6d 20 77 69 6e 2e 0d 0a 0d 0a 20 31 34 2e 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a 0d 0a 4a 75 73 74 20 6c 69 6b 65 20 79 6f 75 20 61 72 65 20 68 65 6c 70 69 6e 67 2c 20 49 20 77 69 6c 6c 20 61 6c 73 6f 20 62 65 20 68 65 6c 70 69 6e 67 20 77 69 74 68 69 6e 20 74 68 65 20 63 6f 6d 6d 75 6e 69 74 79 2e 20 20 0d 0a 43 61 6e 20 77 65 20 62 75 69 6c 64 20 61 20 6f 6e 65 20 68 75 6e 64 72 65 64 20 70 65 72 63 65 6e 74 20 64 65 63 65 6e 74 72 61 6c 69 7a 65 64 20 61 75 74 6f 6e 6f 6d 6f 75 73 20 63 6f 6d 6d 75 6e 69 74 79 20 77 69 74 68 20 6e 6f 20 6c 65 61 64 65 72 3f 0d 0a 0d 0a 57 65 20 63 61 6e 20 62 65 20 74 68 65 20 6e 65 78 74 20 62 69 74 63 6f 69 6e 20 62 65 63 61 75 73 65 20 77 65 20 62 65 6c 69 65 76 65 20 77 65 20 63 61 6e 2e 20 2d 20 79 6f 75 72 20 66 6f 75 6e 64 65 72 20 4c 61 63 68 6c 61 6e 2c 20 50 2e 53 2e 20 48 61 70 70 79 20 62 69 72 74 68 64 61 79 20 53 61 74 6f 73 68 69 0d 0a 0d 0a 77 65 20 77 69 6c 6c 20 77 69 6e 0d 0a\r\n \r\n*/\r\n\r\n\r\n\r\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title TokenMintERC20Token\r\n * @author TokenMint (visit https://tokenmint.io)\r\n *\r\n * @dev Standard ERC20 token with burning and optional functions implemented.\r\n * For full specification of ERC-20 standard see:\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract TokenMintERC20Token is ERC20 {\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param name name of the token\r\n     * @param symbol symbol of the token, 3-4 chars is recommended\r\n     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n     * @param tokenOwnerAddress address that gets 100% of token supply\r\n     */\r\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n      _name = name;\r\n      _symbol = symbol;\r\n      _decimals = decimals;\r\n\r\n      // set tokenOwnerAddress as owner of all tokens\r\n      _mint(tokenOwnerAddress, totalSupply);\r\n\r\n      // pay the service fee for contract deployment\r\n      feeReceiver.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of lowest token units to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n      _burn(msg.sender, value);\r\n    }\r\n\r\n    // optional functions from ERC20 stardard\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n      return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n      return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n      return _decimals;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"feeReceiver\",\"type\":\"address\"},{\"name\":\"tokenOwnerAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "TokenMintERC20Token", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000056c1717c17969720e4ac92621d7bc0de91e2d4ec00000000000000000000000056c1717c17969720e4ac92621d7bc0de91e2d4ec000000000000000000000000000000000000000000000000000000000000000557656c7368000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000542454c4c41000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6c8ec412f82139fb196cb99efbd9be29a5cad79aa8b2f18c96cf55c337a5463d"}