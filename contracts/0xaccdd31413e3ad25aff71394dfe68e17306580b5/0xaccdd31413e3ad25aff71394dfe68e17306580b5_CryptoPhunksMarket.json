{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"v3phunksMarket-v2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT License\\r\\npragma solidity \\u003e0.6 \\u003c0.9;\\r\\n\\r\\nimport \\\"../IERC721.sol\\\";\\r\\nimport \\\"../ReentrancyGuard.sol\\\";\\r\\nimport \\\"../Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides access control\\r\\n *\\r\\n * the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * mapped to \\r\\n * `onlyOwner`\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    \\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract CryptoPhunksMarket is ReentrancyGuard, Pausable, Ownable {\\r\\n\\r\\n    IERC721 phunksContract;     // instance of the CryptoPhunks contract\\r\\n\\r\\n    struct Offer {\\r\\n        bool isForSale;\\r\\n        uint phunkIndex;\\r\\n        address seller;\\r\\n        uint minValue;          // in ether\\r\\n        address onlySellTo;\\r\\n    }\\r\\n\\r\\n    struct Bid {\\r\\n        bool hasBid;\\r\\n        uint phunkIndex;\\r\\n        address bidder;\\r\\n        uint value;\\r\\n    }\\r\\n\\r\\n    // A record of phunks that are offered for sale at a specific minimum value, and perhaps to a specific person\\r\\n    mapping (uint =\\u003e Offer) public phunksOfferedForSale;\\r\\n\\r\\n    // A record of the highest phunk bid\\r\\n    mapping (uint =\\u003e Bid) public phunkBids;\\r\\n\\r\\n    // A record of pending ETH withdrawls by address\\r\\n    mapping (address =\\u003e uint) public pendingWithdrawals;\\r\\n\\r\\n    event PhunkOffered(uint indexed phunkIndex, uint minValue, address indexed fromAddress, address indexed toAddress); //updated\\r\\n    event PhunkBidEntered(uint indexed phunkIndex, uint value, address indexed fromAddress);\\r\\n    event PhunkBidWithdrawn(uint indexed phunkIndex, uint value, address indexed fromAddress);\\r\\n    event PhunkBought(uint indexed phunkIndex, uint value, address indexed fromAddress, address indexed toAddress);\\r\\n    event PhunkNoLongerForSale(uint indexed phunkIndex);\\r\\n\\r\\n    /* Initializes contract with an instance of CryptoPhunks contract, and sets deployer as owner */\\r\\n    constructor(address initialPhunksAddress) {\\r\\n        IERC721(initialPhunksAddress).balanceOf(address(this));\\r\\n        phunksContract = IERC721(initialPhunksAddress);\\r\\n    }\\r\\n\\r\\n    function pause() public whenNotPaused onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public whenPaused onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /* Returns the CryptoPhunks contract address currently being used */\\r\\n    function phunksAddress() public view returns (address) {\\r\\n      return address(phunksContract);\\r\\n    }\\r\\n\\r\\n    /* Allows the owner of the contract to set a new CryptoPhunks contract address */\\r\\n    function setPhunksContract(address newPhunksAddress) public onlyOwner {\\r\\n      phunksContract = IERC721(newPhunksAddress);\\r\\n    }\\r\\n\\r\\n    /* Allows the owner of a CryptoPhunks to stop offering it for sale */\\r\\n    function phunkNoLongerForSale(uint phunkIndex) public nonReentrant() {\\r\\n        if (phunkIndex \\u003e= 10000) revert(\\u0027token index not valid\\u0027);\\r\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert(\\u0027you are not the owner of this token\\u0027);\\r\\n        phunksOfferedForSale[phunkIndex] = Offer(false, phunkIndex, msg.sender, 0, address(0x0));\\r\\n        emit PhunkNoLongerForSale(phunkIndex);\\r\\n    }\\r\\n\\r\\n    /* Allows a CryptoPhunk owner to offer it for sale */\\r\\n    function offerPhunkForSale(uint phunkIndex, uint minSalePriceInWei) public whenNotPaused nonReentrant()  {\\r\\n        if (phunkIndex \\u003e= 10000) revert(\\u0027token index not valid\\u0027);\\r\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert(\\u0027you are not the owner of this token\\u0027);\\r\\n        phunksOfferedForSale[phunkIndex] = Offer(true, phunkIndex, msg.sender, minSalePriceInWei, address(0x0));\\r\\n        emit PhunkOffered(phunkIndex, minSalePriceInWei, msg.sender, address(0x0)); //updated\\r\\n    }\\r\\n\\r\\n    /* Allows a CryptoPhunk owner to offer it for sale to a specific address */\\r\\n    function offerPhunkForSaleToAddress(uint phunkIndex, uint minSalePriceInWei, address toAddress) public whenNotPaused nonReentrant() {\\r\\n        if (phunkIndex \\u003e= 10000) revert();\\r\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert(\\u0027you are not the owner of this token\\u0027);\\r\\n        phunksOfferedForSale[phunkIndex] = Offer(true, phunkIndex, msg.sender, minSalePriceInWei, toAddress);\\r\\n        emit PhunkOffered(phunkIndex, minSalePriceInWei, msg.sender, toAddress); //updated\\r\\n    }\\r\\n    \\r\\n\\r\\n    /* Allows users to buy a CryptoPhunk offered for sale */\\r\\n    function buyPhunk(uint phunkIndex) payable public whenNotPaused nonReentrant() {\\r\\n        if (phunkIndex \\u003e= 10000) revert(\\u0027token index not valid\\u0027);\\r\\n        Offer memory offer = phunksOfferedForSale[phunkIndex];\\r\\n        if (!offer.isForSale) revert(\\u0027phunk is not for sale\\u0027); // phunk not actually for sale\\r\\n        if (offer.onlySellTo != address(0x0) \\u0026\\u0026 offer.onlySellTo != msg.sender) revert();                \\r\\n        if (msg.value != offer.minValue) revert(\\u0027not enough ether\\u0027);          // Didn\\u0027t send enough ETH\\r\\n        address seller = offer.seller;\\r\\n        if (seller == msg.sender) revert(\\u0027seller == msg.sender\\u0027);\\r\\n        if (seller != phunksContract.ownerOf(phunkIndex)) revert(\\u0027seller no longer owner of phunk\\u0027); // Seller no longer owner of phunk\\r\\n\\r\\n\\r\\n        phunksOfferedForSale[phunkIndex] = Offer(false, phunkIndex, msg.sender, 0, address(0x0));\\r\\n        phunksContract.safeTransferFrom(seller, msg.sender, phunkIndex);\\r\\n        pendingWithdrawals[seller] += msg.value;\\r\\n        emit PhunkBought(phunkIndex, msg.value, seller, msg.sender);\\r\\n\\r\\n        // Check for the case where there is a bid from the new owner and refund it.\\r\\n        // Any other bid can stay in place.\\r\\n        Bid memory bid = phunkBids[phunkIndex];\\r\\n        if (bid.bidder == msg.sender) {\\r\\n            // Kill bid and refund value\\r\\n            pendingWithdrawals[msg.sender] += bid.value;\\r\\n            phunkBids[phunkIndex] = Bid(false, phunkIndex, address(0x0), 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /* Allows users to retrieve ETH from sales */\\r\\n    function withdraw() public nonReentrant() {\\r\\n        uint amount = pendingWithdrawals[msg.sender];\\r\\n        // Remember to zero the pending refund before\\r\\n        // sending to prevent re-entrancy attacks\\r\\n        pendingWithdrawals[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n\\r\\n    /* Allows users to enter bids for any CryptoPhunk */\\r\\n    function enterBidForPhunk(uint phunkIndex) payable public whenNotPaused nonReentrant() {\\r\\n        if (phunkIndex \\u003e= 10000) revert(\\u0027token index not valid\\u0027);\\r\\n        if (phunksContract.ownerOf(phunkIndex) == msg.sender) revert(\\u0027you already own this phunk\\u0027);\\r\\n        if (msg.value == 0) revert(\\u0027cannot enter bid of zero\\u0027);\\r\\n        Bid memory existing = phunkBids[phunkIndex];\\r\\n        if (msg.value \\u003c= existing.value) revert(\\u0027your bid is too low\\u0027);\\r\\n        if (existing.value \\u003e 0) {\\r\\n            // Refund the failing bid\\r\\n            pendingWithdrawals[existing.bidder] += existing.value;\\r\\n        }\\r\\n        phunkBids[phunkIndex] = Bid(true, phunkIndex, msg.sender, msg.value);\\r\\n        emit PhunkBidEntered(phunkIndex, msg.value, msg.sender);\\r\\n    }\\r\\n\\r\\n    /* Allows CryptoPhunk owners to accept bids for their Phunks */\\r\\n    function acceptBidForPhunk(uint phunkIndex, uint minPrice) public whenNotPaused nonReentrant() {\\r\\n        if (phunkIndex \\u003e= 10000) revert(\\u0027token index not valid\\u0027);\\r\\n        if (phunksContract.ownerOf(phunkIndex) != msg.sender) revert(\\u0027you do not own this token\\u0027);\\r\\n        address seller = msg.sender;\\r\\n        Bid memory bid = phunkBids[phunkIndex];\\r\\n        if (bid.value == 0) revert(\\u0027cannot enter bid of zero\\u0027);\\r\\n        if (bid.value \\u003c minPrice) revert(\\u0027your bid is too low\\u0027);\\r\\n\\r\\n        address bidder = bid.bidder;\\r\\n        if (seller == bidder) revert(\\u0027you already own this token\\u0027);\\r\\n        phunksOfferedForSale[phunkIndex] = Offer(false, phunkIndex, bidder, 0, address(0x0));\\r\\n        uint amount = bid.value;\\r\\n        phunkBids[phunkIndex] = Bid(false, phunkIndex, address(0x0), 0);\\r\\n        phunksContract.safeTransferFrom(msg.sender, bidder, phunkIndex);\\r\\n        pendingWithdrawals[seller] += amount;\\r\\n        emit PhunkBought(phunkIndex, bid.value, seller, bidder);\\r\\n    }\\r\\n\\r\\n    /* Allows bidders to withdraw their bids */\\r\\n    function withdrawBidForPhunk(uint phunkIndex) public nonReentrant() {\\r\\n        if (phunkIndex \\u003e= 10000) revert(\\u0027token index not valid\\u0027);\\r\\n        Bid memory bid = phunkBids[phunkIndex];\\r\\n        if (bid.bidder != msg.sender) revert(\\u0027the bidder is not message sender\\u0027);\\r\\n        emit PhunkBidWithdrawn(phunkIndex, bid.value, msg.sender);\\r\\n        uint amount = bid.value;\\r\\n        phunkBids[phunkIndex] = Bid(false, phunkIndex, address(0x0), 0);\\r\\n        // Refund the bid money\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialPhunksAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PhunkBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PhunkBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PhunkBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"PhunkNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PhunkOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForPhunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"buyPhunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForPhunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerPhunkForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerPhunkForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phunkBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"phunkNoLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phunksAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phunksOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPhunksAddress\",\"type\":\"address\"}],\"name\":\"setPhunksContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phunkIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForPhunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoPhunksMarket", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b7d405bee01c70a9577316c1b9c2505f146e8842", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e817ef82bf2c84503d910cb3e10f8281d99266dee3524300af9bc0672f99f0f1"}