{"SourceCode": "                                                                                          \n                                                                                                                                  \n                                                                                                                                  \n//                                                    */**********,**,,,,,,,,,,,,,/,.                                               \n//                                             ./********************,,,,,,,,,,,,,,,,,,,,,#.                                        \n//                                         ***********************,////,,*,,,,,,,,,,,,,,,,,,,,,/                                    \n//                                    (***************..                           .(,,,,,,,,,,,,,,*                                \n//                                 (************,                                         /,,,,,,,,,,,,                             \n//                              /***********                                                  .,,,,,,,,,,,,                         \n//                            ******#                         *%%#######%                            %*,,,,,/                       \n//                                      #**,,,,,,,,,,,,,,,,,,,,,********/   *******************/,(                                  \n//                           *.*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**,*****/   *******************************(*                       \n//                   ,/.,,,,,,,,,,,,,,,,,,,,,,,,,,,,*/.,*/(      /******/      .(/*,//*****************************/.               \n//                #.....,,,,,,,,,,,,,,,#                         /,*****/                         ,(*******************/            \n//                 ......,,,,#            //,*,***************,  /***************************/*#             (********/#            \n//                 ,.....,*     ,*,,,,,,,,,,,,,***************,  /,*************************************/,/    .******/             \n//                  ,...,,,/  ...,,,,,,,,,,,,,,********/(,,*/(,            ((/**,(//***********************(   *******#             \n//                  *...,,.,    ,,,,,,,,*(                                                      %//********   (******(              \n//               /   ...,,,,,   *,,,,,,,             .,,,,,,,,,,,,,,,,,**************             .*******   (*******   *.          \n//              /*/   ,.,,,,,,   (,,,,,,*    ,,,**  ,,,,,,,,,,,,,,,,,,****************/  ,,**,   (*******   .*******   (..          \n//              ///*   *,,,,,,,   /,,,,,,,    .  */,,,,,,                        ******##,  *   ,*******,  /*******    ....         \n//             (/*/*/   ,,,,,,,,   ,,,,,,,,     ...,,,,,,   /,**.         /,**/   *******//    .*******.  .********  *.....         \n//             //****/   ,,,,,,,,   .,,,,,,,    ...,,,,,,  ,,,***(      *,,,***(  *******//   (*******   .*******.   .......        \n//             //****/                          ...,,,,,,  ,,,***        .,,***   *******//             ,*******,   /......(        \n//             //****/     #//////////////////* /..,,,,,*                        .*******/  (((((((((((/********    #....../        \n//             //****/      (....,.,,,,,,,,,,,,,   /,,,,,,,*...................(*******    *******************      /......(        \n//             //*****.      /.,.,,,,,,,,,,,,,,,,*   ,,,,,,,,,,,,,,,,,,***************   *******************/       .,......        \n//             #//****%        ..,,,,,,   /,,,,,,,*     ,*,,,,,,,,,,,,***********(.     ********                    ,......         \n//              //*****         ,,.,,,,,,   ,,,,,,,,.   ,(.,,,,*           ****,.#    /*******/   ,,,,,,,,         #,.....*         \n//              ,/*****(         ..,,,,,,*   *,,,,,,,*    *,,,,,,        .******    .********    ********          ,,.....          \n//               /******(          ,,,,,,,,    ,,,,,,,,.    ,,,,,,/     ******.    ********.   (*******#          ,......*          \n//                *******           .,,,,,,,*   (,,,,,,,,    .,,,,,,/ ******/    ,********    ********           ,,,,.../           \n//                 *******/           ,,,,,,,,.   *,,,,,,,*    *,,,,,,*****    .********.   /*******,           ,,,,,..*            \n//                  *******/           ,,,,,,,,,    ,,,,,,,,/    /,,,,***     ********(   (********           .,,,.,,.,             \n//                   ********,           ,,,,,,,,/   .,,,,,,,,,    *,,*,    *********   /********.           ,,,,,,,.,              \n//                    #********           .,,,,,,,,/   /,,,,,,,,(    .    *,*******    *********           ,,,,,,,,,                \n//                      /*******/           *,,,,,,,,.   .,,,,,,,,(     *,*,*****.   *********           *,,,,,,,,*                 \n//                        /*********          /,,,,,,,,*   /,,,,,,,,( ,,,,*,***    *********           ,,,,,,,,,,                   \n//                          *********/          ,,,,,,,,,    /,,,,,,,,,,,,,,*    /********.         #,,,,,,,,,#                     \n//                            (**********         /,,,,,,,,.   ,,,,,,,,,,,*    *********         *,,,,,,,,,,                        \n//                              ,***********,       ,,,,,,,,,,   ,,,,,,,*    **********      /*,,,,,,,,,,/                          \n//                                  *************.    ,,,,,,,,,*    *,(   .*********.   .(,,,,,,,,,,,,/                             \n//                                     (************,   .,,,,,,,,,      (,,,******    ,,,,,,,,,,,,,                                 \n//                                         ,**********(    ,,,,,,,,,(,,,,,,,****    ,,,,,,,,,,*                                     \n//                                              ,/*******    *,,,,,,,,,,,,,***   .,,,,,,,.                                          \n//                                                      /,*    (,,,,,,,,,,/    //,*                                                 \n//                                                                *,,,,,/                                                           \n//                                                                   /                                                              \n//\n//          Telegram: https://t.me/bankaieth\n//          Twitter: https://twitter.com/Bank_AIETH\n//          Website: https://bankai.app/\n//   \n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@                                                                                                @@\n// @@        This token was created by BankPad. visit us at https://bankai.app to learn more.        @@\n// @@                                                                                                @@ \n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n      \n// Sources flattened with hardhat v2.19.1 https://hardhat.org\n\n// SPDX-License-Identifier: MIT\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n\n\n// File contracts/token/AntiBotHelper.sol\n\n// Original license: SPDX_License_Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @notice Anti-Bot Helper\n * Max TX Amount feature\n * Max Wallet Amount feature\n * Sniper auto-burn feature\n */\nabstract contract AntiBotHelper is Ownable {\n    /// @dev Minimum value that can be set for the max transaction limit - 0.25%\n    uint16 private constant MIN__MAX_TX_LIMIT = 25;\n    /// @dev Maximum value that can be set for the max transaction limit - 100%\n    uint16 private constant MAX__MAX_TX_LIMIT = 10000;\n    /// @dev Minimum value that can be set for the max hold limit - 0.25%\n    uint16 private constant MIN__MAX_HOLD_LIMIT = 25;\n    /// @dev Maximum value that can be set for the max hold limit - 100%\n    uint16 private constant MAX__MAX_HOLD_LIMIT = 10000;\n    /// @dev Minimum value that can be set for the anti-dump limit - 0.25%\n    uint16 internal constant MIN_ANTI_DUMP_LIMIT = 25;\n    /// @dev Maximum value that can be set for the anti-dump limit - 100%\n    uint16 private constant MAX_ANTI_DUMP_LIMIT = 10000;\n\n    /// @dev Anti-snipe tax is burned, reducing total supply\n    /// 1. 20% tax on buys in the first block\n    /// 2. Reducing to 13.33% in the second block\n    /// 3. Reducing to 6.66% in the third\n    /// 4. Finally 0% from the fourth block on\n    uint16 internal _autoBurnFirstPercent;\n    uint16 internal _autoBurnSecondPercent;\n    uint16 internal _autoBurnThirdPercent;\n\n    uint16 internal _maxTxLimit;\n    uint16 internal _maxHoldLimit;\n    uint16 internal _antiDumpLimit;\n\n    bool internal _isAntiSniperOn;\n    bool internal _isTradingDelayed;\n    bool internal _isTradingDisabled;\n\n    uint256 internal _firstBuyAt;\n    uint256 internal _secondBuyAt;\n    uint256 internal _thirdBuyAt;\n\n    mapping(address => bool) internal _isExcludedFromTxLimit;\n    mapping(address => bool) internal _isExcludedFromHoldLimit;\n\n    event AntiDumpLimitUpdated(uint16 antiDumpLimit);\n    event ExcludedFromHoldLimit(address account, bool flag);\n    event ExcludedFromTxLimit(address account, bool flag);\n    event MaxLimitUpdated(uint16 maxHoldLimit, uint16 maxTxLimit);\n    event TradingDelayFinished();\n    event TradingEnabled();\n\n    /// @dev Initialize anti bot configuration\n    /// abi encoded param\n    /// 1. txLimit\n    /// 2. holdLimit\n    /// 3. antiSniperOn\n    function _initializeAntiBot(bytes memory param) internal {\n        (\n            uint16 holdLimit,\n            uint16 txLimit,\n            uint16 antiDumpLimit_,\n            bool antiSniperOn\n        ) = abi.decode(param, (uint16, uint16, uint16, bool));\n\n        require(\n            txLimit <= MAX__MAX_TX_LIMIT && txLimit >= MIN__MAX_TX_LIMIT,\n            \"tx limit out of range\"\n        );\n        require(\n            holdLimit <= MAX__MAX_HOLD_LIMIT &&\n                holdLimit >= MIN__MAX_HOLD_LIMIT,\n            \"hold limit out of range\"\n        );\n        require(txLimit <= holdLimit, \"tx limit exceeds hold limit\");\n        require(\n            antiDumpLimit_ == 0 ||\n                (antiDumpLimit_ >= MIN_ANTI_DUMP_LIMIT &&\n                    antiDumpLimit_ <= MAX_ANTI_DUMP_LIMIT),\n            \"anti-dump limit out of range\"\n        );\n\n        _maxTxLimit = txLimit;\n        _maxHoldLimit = holdLimit;\n        _antiDumpLimit = antiDumpLimit_;\n        _isAntiSniperOn = antiSniperOn;\n    }\n\n    /// @dev Return anti-sniper auto-burn percent\n    function _antiSniperAutoBurn() internal returns (uint16) {\n        if (!_isAntiSniperOn) {\n            if (_firstBuyAt == 0) _firstBuyAt = block.timestamp;\n            return 0;\n        }\n        uint256 blockTime = block.timestamp;\n\n        if (blockTime == _thirdBuyAt) return _autoBurnThirdPercent;\n        if (blockTime == _secondBuyAt) return _autoBurnSecondPercent;\n        if (blockTime == _firstBuyAt) return _autoBurnFirstPercent;\n        if (_thirdBuyAt > 0) return 0;\n        if (_secondBuyAt > 0) {\n            _thirdBuyAt = block.timestamp;\n            return _autoBurnThirdPercent;\n        }\n        if (_firstBuyAt > 0) {\n            _secondBuyAt = block.timestamp;\n            return _autoBurnSecondPercent;\n        }\n        _firstBuyAt = block.timestamp;\n        return _autoBurnFirstPercent;\n    }\n\n    /// @notice Exclude / Include the multiple accounts from max tx limit\n    /// @dev Only callable by owner\n    function batchExcludeFromTxLimit(\n        address[] calldata accounts,\n        bool flag\n    ) external onlyOwner {\n        uint256 len = accounts.length;\n        for (uint256 i; i < len; ) {\n            address account = accounts[i];\n            _isExcludedFromTxLimit[account] = flag;\n\n            unchecked {\n                ++i;\n            }\n\n            emit ExcludedFromTxLimit(account, flag);\n        }\n    }\n\n    /// @notice Exclude / Include the multiple accounts from max wallet limit\n    /// @dev Only callable by owner\n    function batchExcludeFromHoldLimit(\n        address[] calldata accounts,\n        bool flag\n    ) external onlyOwner {\n        uint256 len = accounts.length;\n        for (uint256 i; i < len; ) {\n            address account = accounts[i];\n            _isExcludedFromHoldLimit[account] = flag;\n\n            unchecked {\n                ++i;\n            }\n\n            emit ExcludedFromHoldLimit(account, flag);\n        }\n    }\n\n    /// @notice Check if the account is excluded from max hold & wallet limit\n    /// @return bool excluded from max hold limit\n    /// @return bool excluded from max tx limit\n    function isExcludedFromLimit(\n        address account\n    ) external view returns (bool, bool) {\n        return (\n            _isExcludedFromHoldLimit[account],\n            _isExcludedFromTxLimit[account]\n        );\n    }\n\n    /// @notice Update anti-dump limit\n    /// @param limit new anti-dump limit\n    function updateAntiDumpLimit(uint16 limit) external onlyOwner {\n        require(_antiDumpLimit != 0, \"anti-dump not enabled\");\n\n        require(\n            limit >= MIN_ANTI_DUMP_LIMIT && limit <= MAX_ANTI_DUMP_LIMIT,\n            \"anti-dump limit out of range\"\n        );\n\n        _antiDumpLimit = limit;\n\n        emit AntiDumpLimitUpdated(limit);\n    }\n\n    /// @notice View anti-dump limit\n    /// @return uint16 anti-dump limit percent\n    function antiDumpLimit() external view returns (uint16) {\n        return _antiDumpLimit;\n    }\n\n    /**\n     * @notice Check if the anti-dump feature is enabled in the token\n     */\n    function isAntiDumpEnabled() external view returns (bool) {\n        return _antiDumpLimit >= MIN_ANTI_DUMP_LIMIT;\n    }\n\n    /// @notice Update max hold limit & max tx limit\n    /// @param holdLimit new max hold limit\n    /// @param txLimit new max tx limit\n    function updateMaxLimit(\n        uint16 holdLimit,\n        uint16 txLimit\n    ) external onlyOwner {\n        require(holdLimit >= txLimit, \"tx limit exceeds hold limit\");\n        require(\n            _maxHoldLimit <= holdLimit && _maxTxLimit <= txLimit,\n            \"increase only\"\n        );\n        require(txLimit <= MAX__MAX_TX_LIMIT, \"tx limit out of range\");\n        require(holdLimit <= MAX__MAX_HOLD_LIMIT, \"hold limit out of range\");\n\n        _maxHoldLimit = holdLimit;\n        _maxTxLimit = txLimit;\n\n        emit MaxLimitUpdated(holdLimit, txLimit);\n    }\n\n    /// @notice View max hold limit & max tx limit\n    /// @return uint16 max hold limit percent\n    /// @return uint16 max tx limit percent\n    function maxLimit() external view returns (uint16, uint16) {\n        return (_maxHoldLimit, _maxTxLimit);\n    }\n\n    /// @notice Enable trading\n    function enableTrading() external onlyOwner {\n        require(_isTradingDisabled, \"already enabled\");\n        _isTradingDisabled = false;\n\n        emit TradingEnabled();\n    }\n\n    /// @notice View anti-bot mechanism flags\n    /// @return bool {_isAntiSniperOn}\n    /// @return bool {_isTradingDelayed}\n    /// @return bool {_isTradingDisabled}\n    function antiBotFlags() external view returns (bool, bool, bool) {\n        return (_isAntiSniperOn, _isTradingDelayed, _isTradingDisabled);\n    }\n\n    /**\n     * @dev function {snipeAutoBurnPercents}\n     *\n     * Return anti-snipe auto burn percent values for 3 steps\n     *\n     * @return uint16 first auto burn percent\n     * @return uint16 second auto burn percent\n     * @return uint16 third auto burn percent\n     */\n    function snipeAutoBurnPercents()\n        external\n        view\n        returns (uint16, uint16, uint16)\n    {\n        return (\n            _autoBurnFirstPercent,\n            _autoBurnSecondPercent,\n            _autoBurnThirdPercent\n        );\n    }\n}\n\n\n// File contracts/interfaces/IBase.sol\n\n// Original license: SPDX_License_Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IBase {\n    /// - antiBotParam\n    /// 1. holdLimit\n    /// 2. txLimit\n    /// 3. antiDumpLimit\n    /// 4. antiSniperOn\n    ///\n    /// - taxParam\n    /// 1. dexRouter: uniswap or sushiswap\n    /// 2. pairedToken: eth or usdc\n    /// 3. taxPayAccount\n    /// 4. treasuryAccount\n    /// 5. buyTax\n    /// 6. sellTax\n    /// 7. treasuryTax\n    ///\n    /// - distribParam\n    /// 1. totalSupply\n    /// 2. teamAccount\n    /// 3. teamAllocPercent\n    ///\n    /// - lpParam\n    /// 1. isLPBurn\n    /// 2. isTradingDelayed\n    /// 3. isTradingDisabled\n    /// 4. pairedTokenAmount\n    /// 5. lockPeriod\n    struct TokenLaunchConf {\n        string uuid;\n        string name;\n        string symbol;\n        bytes distribParam;\n        bytes antiBotParam;\n        bytes taxParam;\n        bytes lpParam;\n    }\n\n    // Configuration inherited from the factory contract\n    struct InheritedConf {\n        uint16 autoBurnFirstPercent;\n        uint16 autoBurnSecondPercent;\n        uint16 autoBurnThirdPercent;\n        uint16 thresholdPercent;\n        uint16 maxBuyTaxAfter;\n        uint16 maxSellTaxAfter;\n        uint16 maxTreasuryTaxAfter;\n        uint16 bankPadTax;\n        uint16 maxTaxToRenounce;\n        uint32 bankPadTaxApplyPeriod;\n        uint32 taxWhitelistApplyDelay;\n        uint32 tradingDelayTime;\n        uint32 tradingDisableTime;\n    }\n}\n\n\n// File contracts/interfaces/IERC20FactoryByBankPad.sol\n\n// Original license: SPDX_License_Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IERC20FactoryByBankPad {\n    /**\n     * @notice function {servicePayAccount}\n     *\n     * Return BankPad service pay account\n     *\n     * @return address service pay account\n     */\n    function servicePayAccount() external view returns (address payable);\n\n    /**\n     * @dev function {maxTeamAllocForUUID}\n     *\n     * Return max team distribution percentage for the given `uuid` of token\n     * whitelisted token will return its max allocation percent\n     * return `_maxTeamAlloc` for others\n     *\n     * @param uuid token UUID\n     */\n    function maxTeamAllocForUUID(\n        string calldata uuid\n    ) external view returns (uint16);\n}\n\n\n// File contracts/interfaces/IDexRouter.sol\n\n// Original license: SPDX_License_Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDexFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IDexRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function getAmountsOut(\n        uint amountIn,\n        address[] calldata path\n    ) external view returns (uint[] memory amounts);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n}\n\n\n// File contracts/token/TaxHelper.sol\n\n// Original license: SPDX_License_Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\n/**\n * @notice Tax Helper\n * Marketing fee\n * Burn fee\n * Fee in buy/sell/transfer separately\n */\nabstract contract TaxHelper is Ownable {\n    using Address for address payable;\n    address internal constant ETH_ADDRESS =\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    bool internal _bankpadFeeApplied = true;\n    uint16 internal _buyTax;\n    uint16 internal _sellTax;\n    uint16 internal _treasuryTax;\n\n    /// @dev Max buy tax after token launched\n    uint16 internal _maxBuyTaxAfter;\n    /// @dev Max sell tax after token launched\n    uint16 internal _maxSellTaxAfter;\n    /// @dev Max treasury tax after token launched\n    uint16 internal _maxTreasuryTaxAfter;\n\n    /// @dev Bankpad tax is set on top buy / sell / treasury tax as a service fee\n    uint16 internal _bankPadTax;\n\n    address internal _dexRouter;\n    address internal _taxPayAccount;\n    address internal _treasuryAccount;\n    address internal _baseAmmPair;\n    address internal _basePairedToken;\n\n    mapping(address => bool) internal _isExcludedFromTax;\n    mapping(address => bool) internal _isAmmPair;\n\n    event ExcludedFromTax(address account, bool flag);\n    event NewAmmPair(address pair, bool flag);\n    event TaxesUpdated(uint16 buyTax, uint16 sellTax, uint16 treasuryTax);\n\n    /// @dev Initialize tax configuration\n    /// abi encoded param\n    /// 1. dexRouter: uniswap or sushiswap\n    /// 2. pairedToken: eth or usdc\n    /// 3. taxPayAccount\n    /// 4. buyTax\n    /// 5. sellTax\n    function _initializeTax(bytes memory param) internal {\n        (\n            address dexRouter,\n            address pairedToken,\n            address taxPayAccount,\n            address treasuryAccount,\n            uint16 buyTax,\n            uint16 sellTax,\n            uint16 treasuryTax\n        ) = abi.decode(\n                param,\n                (address, address, address, address, uint16, uint16, uint16)\n            );\n\n        // tax pay account and treasury account are only available when buy/sell tax, treasury tax is greater then 0\n        if (buyTax > 0 || sellTax > 0)\n            require(taxPayAccount != address(0), \"invalid tax pay account\");\n        if (treasuryTax > 0)\n            require(treasuryAccount != address(0), \"invalid treasury account\");\n\n        // check if tax pay account and treasury account can receive ETH when the base pair token is ETH\n        if (pairedToken == ETH_ADDRESS) {\n            payable(taxPayAccount).sendValue(0);\n            payable(treasuryAccount).sendValue(0);\n        }\n\n        _dexRouter = dexRouter;\n        // pair with ETH or any other stable coin\n        address lpPair = IDexFactory(IDexRouter(dexRouter).factory())\n            .createPair(\n                address(this),\n                pairedToken == ETH_ADDRESS\n                    ? IDexRouter(dexRouter).WETH()\n                    : pairedToken\n            );\n\n        _baseAmmPair = lpPair;\n        _basePairedToken = pairedToken;\n        _taxPayAccount = taxPayAccount;\n        _treasuryAccount = treasuryAccount;\n\n        _buyTax = buyTax;\n        _sellTax = sellTax;\n        _treasuryTax = treasuryTax;\n\n        _isAmmPair[lpPair] = true;\n    }\n\n    /// @notice Update buy / sell / treasury tax\n    /// @dev new tax values should not be greater than the `taxAfterLimit`\n    /// @param buyTax new buy tax value\n    /// @param sellTax new sell tax value\n    /// @param treasuryTax new treasury tax value\n    function updateTaxes(\n        uint16 buyTax,\n        uint16 sellTax,\n        uint16 treasuryTax\n    ) external onlyOwner {\n        // gas-saving code\n        uint16 buyTax_ = _buyTax;\n        uint16 sellTax_ = _sellTax;\n        uint16 treasuryTax_ = _treasuryTax;\n\n        if (buyTax > buyTax_)\n            require(buyTax <= _maxBuyTaxAfter, \"invalid buyTax\");\n        if (sellTax > sellTax_)\n            require(sellTax <= _maxSellTaxAfter, \"invalid sellTax\");\n        if (treasuryTax > treasuryTax_)\n            require(treasuryTax <= _maxTreasuryTaxAfter, \"invalid treasuryTax\");\n\n        _buyTax = buyTax;\n        _sellTax = sellTax;\n        _treasuryTax = treasuryTax;\n\n        emit TaxesUpdated(buyTax, sellTax, treasuryTax);\n    }\n\n    /// @notice View taxes applied to the token\n    /// @return uint16 {_buyTax}\n    /// @return uint16 {_sellTax}\n    /// @return uint16 {_treasuryTax}\n    function taxes() external view returns (uint16, uint16, uint16) {\n        return (_buyTax, _sellTax, _treasuryTax);\n    }\n\n    /// @notice Exclude / Include the multiple accounts from tax\n    /// @dev Only callable by owner\n    function batchExcludeFromTax(\n        address[] calldata accounts,\n        bool flag\n    ) external onlyOwner {\n        uint256 len = accounts.length;\n        for (uint256 i; i < len; ) {\n            address account = accounts[i];\n            _isExcludedFromTax[account] = flag;\n\n            unchecked {\n                ++i;\n            }\n\n            emit ExcludedFromTax(account, flag);\n        }\n    }\n\n    /// @notice Check if the account is excluded from the fees\n    /// @param account: the account to be checked\n    function isExcludedFromTax(address account) external view returns (bool) {\n        return _isExcludedFromTax[account];\n    }\n\n    /// @notice Check if the {pair} is AMM pair\n    function isAmmPair(address pair) external view returns (bool) {\n        return _isAmmPair[pair];\n    }\n\n    /// @notice View tax receive accounts\n    /// @return address buy/sell tax pay account\n    /// @return address treasury tax pay account\n    function taxAccounts() external view returns (address, address) {\n        return (_taxPayAccount, _treasuryAccount);\n    }\n\n    /// @notice View amm related configuration addresses\n    /// @return address dex router address\n    /// @return address base paired token address\n    /// @return address base pair address from the dex router\n    function ammAddresses() external view returns (address, address, address) {\n        return (_dexRouter, _basePairedToken, _baseAmmPair);\n    }\n\n    /**\n     * @dev function {taxLimits}\n     *\n     * Return tax limits compared with current value and taxAfterLimits\n     *\n     * @return uint16 max buy tax limit\n     * @return uint16 max sell tax limit\n     * @return uint16 max treasury tax limit\n     */\n    function taxLimits() external view returns (uint16, uint16, uint16) {\n        uint16 maxBuyTax = _buyTax < _maxBuyTaxAfter\n            ? _maxBuyTaxAfter\n            : _buyTax;\n        uint16 maxSellTax = _sellTax < _maxSellTaxAfter\n            ? _maxSellTaxAfter\n            : _sellTax;\n        uint16 maxTreasuryTax = _treasuryTax < _maxTreasuryTaxAfter\n            ? _maxTreasuryTaxAfter\n            : _treasuryTax;\n        return (maxBuyTax, maxSellTax, maxTreasuryTax);\n    }\n\n    /**\n     * @dev function {taxLimits}\n     *\n     * Return tax limits which are used after token launched\n     *\n     * @return uint16 max buy tax limit\n     * @return uint16 max sell tax limit\n     * @return uint16 max treasury tax limit\n     */\n    function taxAfterLimits() external view returns (uint16, uint16, uint16) {\n        return (_maxBuyTaxAfter, _maxSellTaxAfter, _maxTreasuryTaxAfter);\n    }\n\n    function bankPadTax() external view returns (uint16) {\n        return _bankPadTax;\n    }\n}\n\n\n// File contracts/token/ERC20ByBankPadBase.sol\n\n// Original license: SPDX_License_Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\n\n\n\ncontract ERC20ByBankPadBase is AntiBotHelper, TaxHelper, IBase, ERC20Burnable {\n    uint16 internal constant DENOMINATOR = 10000;\n\n    string public bankUUID;\n    address public immutable teamAccount;\n\n    address public immutable bankPadFactory;\n    bool internal _isLaunched;\n    bool internal _isTaxConvertEnabled = true;\n\n    /// @dev Ownership can be renounced only when buy/sell/treasury tax is below limit default 5%\n    uint16 private _maxTaxToRenounce;\n\n    /// @dev Bankpad tax is removed after some days default 15 days\n    uint32 internal _bankPadTaxApplyPeriod;\n    /// @dev Tax whitelist (exclude list) is not applied within some days after token launches default 2 days\n    uint32 internal _taxWhitelistApplyDelay;\n\n    /// @dev Token transfer is disabled for 1 mins once trading_delay flag is set\n    uint32 internal _tradingDelayTime = 1 minutes;\n    /// @dev Trading is disabled once {_isTradingDisabled} flag is set,\n    /// it is unset automatically after 7 days if owner does not enable trading\n    uint32 internal _tradingDisableTime = 7 days;\n\n    /// @dev Threshold amount of accumlated tax until swap to pair token\n    uint256 internal _thresholdAmount;\n\n    /// @dev Token launched time\n    uint256 internal _launchedAt;\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyFactory() {\n        require(bankPadFactory == _msgSender(), \"caller is not the factory\");\n        _;\n    }\n\n    constructor(\n        address factory_,\n        address deployer_,\n        TokenLaunchConf memory tokenLaunchConf_,\n        InheritedConf memory inheritedConf_\n    ) ERC20(tokenLaunchConf_.name, tokenLaunchConf_.symbol) {\n        bankUUID = tokenLaunchConf_.uuid;\n        bankPadFactory = factory_;\n\n        _transferOwnership(deployer_);\n\n        _initializeAntiBot(tokenLaunchConf_.antiBotParam);\n        _initializeTax(tokenLaunchConf_.taxParam);\n        _copyInheritedConf(inheritedConf_);\n\n        _isExcludedFromHoldLimit[_baseAmmPair] = true;\n\n        (uint256 supply, address teamAccount_, uint16 teamAlloc) = abi.decode(\n            tokenLaunchConf_.distribParam,\n            (uint256, address, uint16)\n        );\n        teamAccount = teamAccount_;\n\n        // threshold amount is 0.1% of the total supply\n        _thresholdAmount = (supply * inheritedConf_.thresholdPercent) / DENOMINATOR;\n\n        // Distribute to team\n        if (teamAlloc > 0) {\n            require(teamAccount_ != address(0), \"invalid team account\");\n            require(\n                teamAlloc <=\n                    IERC20FactoryByBankPad(factory_).maxTeamAllocForUUID(\n                        tokenLaunchConf_.uuid\n                    ),\n                \"too much team alloc\"\n            );\n            uint256 teamAllocAmount = (supply * teamAlloc) / DENOMINATOR;\n            _mint(teamAccount_, teamAllocAmount);\n            supply -= teamAllocAmount;\n        }\n\n        // Mint rest tokens to the factory contract to add liquidity\n        _mint(factory_, supply);\n    }\n\n    /**\n     * @notice function {preLaunch}\n     *\n     * Configure token contract with the factory configuration\n     *\n     * @param param configuration structure from the factory\n     */\n    function _copyInheritedConf(InheritedConf memory param) private {\n        _autoBurnFirstPercent = param.autoBurnFirstPercent;\n        _autoBurnSecondPercent = param.autoBurnSecondPercent;\n        _autoBurnThirdPercent = param.autoBurnThirdPercent;\n\n        _maxBuyTaxAfter = _buyTax < param.maxBuyTaxAfter ? _buyTax : param.maxBuyTaxAfter;\n        _maxSellTaxAfter = _sellTax < param.maxSellTaxAfter ? _sellTax : param.maxSellTaxAfter;\n        _maxTreasuryTaxAfter = _treasuryTax < param.maxTreasuryTaxAfter ? _treasuryTax : param.maxTreasuryTaxAfter;\n\n        _bankPadTax = param.bankPadTax;\n        _maxTaxToRenounce = param.maxTaxToRenounce;\n\n        _bankPadTaxApplyPeriod = param.bankPadTaxApplyPeriod;\n        _taxWhitelistApplyDelay = param.taxWhitelistApplyDelay;\n        _tradingDelayTime = param.tradingDelayTime;\n        _tradingDisableTime = param.tradingDisableTime;\n    }\n\n    /// @dev Check if the sell amount is not against the anti-dump feature\n    function _isValidSell(uint256 sellAmount) internal view {\n        uint256 totalSupply_ = totalSupply();\n        uint16 antiDumpLimit_ = _antiDumpLimit;\n        // when anti-dump feature is enabled, sell amount should be less than the anti-dump limit\n        require(\n            antiDumpLimit_ < MIN_ANTI_DUMP_LIMIT ||\n                (totalSupply_ * antiDumpLimit_) / DENOMINATOR >= sellAmount,\n            \"anti-dump\"\n        );\n    }\n\n    /**\n     * @notice function {launch}\n     *\n     * Finalize the initialization of the token contract and launch!\n     *\n     * @param tradingDelayed Once this flag is set, trading is delayed for 1 min\n     * @param tradingDisabled Once this flag is set, trading is disabled until it is set or 4 days\n     */\n    function launch(\n        bool tradingDelayed,\n        bool tradingDisabled\n    ) external onlyFactory {\n        require(!_isLaunched, \"already launched\");\n        _isLaunched = true;\n        // trading delay flag and trading disable flag can not set at the same time\n        require(\n            !tradingDelayed || !tradingDisabled,\n            \"can not delayed and disabled\"\n        );\n\n        _isTradingDelayed = tradingDelayed;\n        _isTradingDisabled = tradingDisabled;\n        _launchedAt = block.timestamp;\n    }\n\n    /**\n     * @notice function {batchSetAsAmmPair}\n     *\n     * Set / unset multiple pair addresses as AMM pair\n     * LP addresses should be excluded from hold limit\n     *\n     * @param pairs lp addresses\n     * @param flag true / false\n     */\n    function batchSetAsAmmPair(\n        address[] calldata pairs,\n        bool flag\n    ) external onlyOwner {\n        uint256 len = pairs.length;\n\n        for (uint256 i; i < len; ) {\n            address pair = pairs[i];\n            require(pair != _baseAmmPair, \"can not access base amm pair\");\n            _isAmmPair[pair] = flag;\n            _isExcludedFromHoldLimit[pair] = flag;\n\n            unchecked {\n                ++i;\n            }\n\n            emit NewAmmPair(pair, flag);\n        }\n    }\n\n    /// @notice Renounce ownership of the token contract\n    /// @dev Only available when buy/sell tax is less than 5%\n    function renounceOwnership() public override onlyOwner {\n        uint16 maxTaxToRenounce_ = _maxTaxToRenounce;\n        require(\n            _buyTax <= maxTaxToRenounce_ &&\n                _sellTax <= maxTaxToRenounce_ &&\n                _treasuryTax <= maxTaxToRenounce_,\n            \"lower taxes before renounce\"\n        );\n\n        super.renounceOwnership();\n    }\n\n    /// @notice Enable conversion of token tax\n    function enableTaxConvert(bool flag) external onlyOwner {\n        _isTaxConvertEnabled = flag;\n    }\n\n    function isTaxConvertEnabled() external view returns (bool) {\n        return _isTaxConvertEnabled;\n    }\n\n    /// @notice Update the threshold amount for the swapping to occur\n    /// @dev Too small value will cause sell tx happens in every tx\n    function updateThresholdAmount(uint256 amount) external onlyOwner {\n        require(amount > 0, \"invalid threshold\");\n        _thresholdAmount = amount;\n    }\n\n    function thresholdAmount() external view returns (uint256) {\n        return _thresholdAmount;\n    }\n\n    function launchedAt() external view returns (uint256) {\n        return _launchedAt;\n    }\n\n    /**\n     * @dev function {maxTaxToRenounce}\n     *\n     * Return the tax condition for renouncing ownership of the token\n     *\n     * @return uint16 max tax values for renounce\n     */\n    function maxTaxToRenounce() external view returns (uint16) {\n        return _maxTaxToRenounce;\n    }\n\n    /**\n     * @dev function {tradingTimes}\n     *\n     * Return token related time configuration\n     *\n     * @return uint32 trading delay time\n     * @return uint32 trading disable time\n     * @return uint32 BankPad tax apply period\n     * @return uint32 Tax whitelist delay period\n     */\n    function timeConfiguration()\n        external\n        view\n        returns (uint32, uint32, uint32, uint32)\n    {\n        return (\n            _tradingDelayTime,\n            _tradingDisableTime,\n            _bankPadTaxApplyPeriod,\n            _taxWhitelistApplyDelay\n        );\n    }\n}\n\n\n// File contracts/token/ERC20ByBankPad.sol\n\npragma solidity ^0.8.0;\n\n// Original license: SPDX_License_Identifier: MIT\n\ncontract ERC20ByBankPad is ERC20ByBankPadBase {\n    bytes32 public constant bankUUIDHash =\n        0x0f1e88f1fe30b9a2d6bc3478e762c08e10598267295d848d41837b1bbfafdd14;\n\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    bool private _inSwap;\n\n    modifier lockTheSwap() {\n        _inSwap = true;\n        _;\n        _inSwap = false;\n    }\n\n    constructor(\n        address factory_,\n        address deployer_,\n        TokenLaunchConf memory tokenLaunchConf_,\n        InheritedConf memory inheritedConf_\n    )\n        ERC20ByBankPadBase(\n            factory_,\n            deployer_,\n            tokenLaunchConf_,\n            inheritedConf_\n        )\n    {\n        _isExcludedFromTxLimit[_msgSender()] = true;\n        _isExcludedFromTxLimit[address(0)] = true;\n        _isExcludedFromTxLimit[address(0xdead)] = true;\n        _isExcludedFromTxLimit[address(this)] = true;\n\n        _isExcludedFromHoldLimit[_msgSender()] = true;\n        _isExcludedFromHoldLimit[address(0)] = true;\n        _isExcludedFromHoldLimit[address(0xdead)] = true;\n        _isExcludedFromHoldLimit[address(this)] = true;\n\n        _isExcludedFromTax[_msgSender()] = true;\n        _isExcludedFromTax[address(0)] = true;\n        _isExcludedFromTax[address(0xdead)] = true;\n        _isExcludedFromTax[address(this)] = true;\n    }\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        if (!_isLaunched) {\n            super._afterTokenTransfer(from, to, amount);\n            return;\n        }\n\n        _checkTradingDelayedOrDisabled(from, to);\n\n        uint256 totalSupply_ = totalSupply();\n\n        // Check max tx limit\n        require(\n            _isExcludedFromTxLimit[from] ||\n                _isExcludedFromTxLimit[to] ||\n                amount <= (totalSupply_ * _maxTxLimit) / DENOMINATOR,\n            \"tx amount limited\"\n        );\n\n        // Check max wallet amount limit\n        require(\n            _isExcludedFromHoldLimit[to] ||\n                balanceOf(to) <= (totalSupply_ * _maxHoldLimit) / DENOMINATOR,\n            \"receiver hold limited\"\n        );\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        // token transfer before token launches like mint / add liquidity will not charge taxes\n        if (!_isLaunched) {\n            super._transfer(from, to, amount);\n            return;\n        }\n\n        uint256 blockTime = block.timestamp;\n\n        uint256 bankPadTaxApplyPeriod = _bankPadTaxApplyPeriod;\n\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don't get caught in a circular liquidity event.\n        // also, don't swap & liquify if sender is uniswap pair.\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        // tax whitelist is only applied after 2 days of the first buy\n        // but, token transfer from the token contract itself should be whitelisted\n        bool isWhitelisted = from == address(this) || (\n            (_isExcludedFromTax[from] ||\n            _isExcludedFromTax[to]) &&\n            _firstBuyAt > 0 &&\n            blockTime >= _firstBuyAt + _taxWhitelistApplyDelay\n        ) ;\n        bool isBuyTx = _isAmmPair[from];\n        bool isSellTx = _isAmmPair[to];\n\n        bool isBankpadOverTime = _bankpadFeeApplied &&\n                _firstBuyAt > 0 &&\n                blockTime > _firstBuyAt + bankPadTaxApplyPeriod;\n\n        // swap accumlated tax into ETH or USDC\n        if (\n            !_inSwap &&\n            !isWhitelisted &&\n            !isBuyTx &&\n            _isTaxConvertEnabled &&\n            (isBankpadOverTime || contractTokenBalance >= _thresholdAmount)\n        ) {\n            // although the bankpad tax period is finished, there may still be accumulated taxes thus far.\n            // in this case, we will swap all those taxes into ETH / USDC.\n            // when the bankpad fee period is over, swap all accumlated taxes\n            if (isBankpadOverTime) _swapToPairedToken(contractTokenBalance);\n            else _swapToPairedToken(_thresholdAmount);\n            if (isBankpadOverTime) _bankpadFeeApplied = false;\n        }\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        uint256 fees;\n        if (!isWhitelisted) {\n            if (isBuyTx) {\n                // bankpad tax is applied on top of buy tax for 15 days\n                // its 10% of buy tax\n                if (\n                    _bankpadFeeApplied &&\n                    (_firstBuyAt == 0 ||\n                        blockTime <= _firstBuyAt + bankPadTaxApplyPeriod)\n                )\n                    fees =\n                        (amount *\n                            (_buyTax + _treasuryTax) *\n                            (DENOMINATOR + _bankPadTax)) /\n                        DENOMINATOR /\n                        DENOMINATOR;\n                else fees = (amount * (_buyTax + _treasuryTax)) / DENOMINATOR;\n\n                // for the first buy txs, anti sniper auto-burn is applied\n                // this is applied for 3 blocks\n                uint256 autoBurnPerc = _antiSniperAutoBurn();\n\n                if (autoBurnPerc > 0) {\n                    uint256 autoBurnAmount = (amount * autoBurnPerc) /\n                        DENOMINATOR;\n                    _burn(from, autoBurnAmount);\n\n                    amount -= autoBurnAmount;\n                }\n            } else if (isSellTx) {\n                _isValidSell(amount);\n                // bankpad tax is applied on top of sell tax for 15 days\n                // its 10% of buy tax\n                if (\n                    _bankpadFeeApplied &&\n                    (_firstBuyAt == 0 ||\n                        blockTime <= _firstBuyAt + bankPadTaxApplyPeriod)\n                )\n                    fees =\n                        (amount *\n                            (_sellTax + _treasuryTax) *\n                            (DENOMINATOR + _bankPadTax)) /\n                        DENOMINATOR /\n                        DENOMINATOR;\n                else fees = (amount * (_sellTax + _treasuryTax)) / DENOMINATOR;\n            }\n\n            if (fees > 0) super._transfer(from, address(this), fees);\n            amount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function _checkTradingDelayedOrDisabled(address from, address to) private {\n        address teamAccount_ = teamAccount; // gas-saving code\n        address tokenOwner = owner(); // gas-saving code\n        // token owner or team account is not restricted by trading delay or trading manually enable trading feature\n        if (\n            teamAccount_ == from ||\n            teamAccount_ == to ||\n            tokenOwner == from ||\n            tokenOwner == to\n        ) return;\n\n        uint256 blockTime = block.timestamp;\n        // check if the trading delayed\n        if (_isTradingDelayed) {\n            if (blockTime < _launchedAt + _tradingDelayTime)\n                revert(\"trading delayed\");\n            _isTradingDelayed = false;\n            emit TradingDelayFinished();\n        }\n\n        // check if the trading disabled\n        if (_isTradingDisabled) {\n            if (blockTime < _launchedAt + _tradingDisableTime)\n                revert(\"trading disabled\");\n            // enable trading after 4 days\n            _isTradingDisabled = false;\n            emit TradingEnabled();\n        }\n    }\n\n    /**\n     * @dev Swap token accumlated in this contract to the base paired token\n     * \n     * According to the paired token\n\n     * - when paired token is ETH, swapToETH function is called\n     * - when paired token is another token, swapToToken is called\n\n     */\n    function _swapToPairedToken(uint256 amount) private lockTheSwap {\n        if (amount == 0) return;\n        address basePairedToken_ = _basePairedToken;\n        address payable servicePayAccount = IERC20FactoryByBankPad(\n            bankPadFactory\n        ).servicePayAccount();\n        address payable taxPayAccount = payable(_taxPayAccount);\n        address payable treasuryAccount = payable(_treasuryAccount);\n        if (basePairedToken_ == ETH_ADDRESS) {\n            uint256 swappedAmount = _swapToETH(amount);\n            if (swappedAmount > 0) {\n                // send bankpad fee\n                if (_bankpadFeeApplied) {\n                    uint256 bankpadFeeAmount = _calcBankpadFee(swappedAmount);\n                    servicePayAccount.sendValue(bankpadFeeAmount);\n                    swappedAmount -= bankpadFeeAmount;\n                }\n                // send treasury tax\n                if (_treasuryTax > 0 && treasuryAccount != address(0)) {\n                    uint256 treasuryFeeAmount = _calcTreasuryFee(swappedAmount);\n                    treasuryAccount.sendValue(treasuryFeeAmount);\n                    swappedAmount -= treasuryFeeAmount;\n                }\n                // send buy/sell tax\n                if (taxPayAccount != address(0))\n                    taxPayAccount.sendValue(swappedAmount);\n            }\n        } else {\n            uint256 swappedAmount = _swapToToken(basePairedToken_, amount);\n            if (swappedAmount > 0) {\n                // send bankpad fee\n                if (_bankpadFeeApplied) {\n                    uint256 bankpadFeeAmount = _calcBankpadFee(swappedAmount);\n                    IERC20(basePairedToken_).safeTransfer(\n                        servicePayAccount,\n                        bankpadFeeAmount\n                    );\n                    swappedAmount -= bankpadFeeAmount;\n                }\n                // send treasury tax\n                if (_treasuryTax > 0 && treasuryAccount != address(0)) {\n                    uint256 treasuryFeeAmount = _calcTreasuryFee(swappedAmount);\n                    IERC20(basePairedToken_).safeTransfer(\n                        treasuryAccount,\n                        treasuryFeeAmount\n                    );\n                    swappedAmount -= treasuryFeeAmount;\n                }\n\n                // send buy/sell tax\n                if (taxPayAccount != address(0))\n                    IERC20(basePairedToken_).safeTransfer(\n                        taxPayAccount,\n                        swappedAmount\n                    );\n            }\n        }\n    }\n\n    /// @dev Calculate bankpad fee amount from the swapped total tax amount\n    function _calcBankpadFee(\n        uint256 swappedAmount\n    ) private view returns (uint256) {\n        uint16 bankPadTax = _bankPadTax;\n        return (swappedAmount * bankPadTax) / (DENOMINATOR + bankPadTax);\n    }\n\n    /// @dev Calculate treasury fee amount from the swapped tax amount\n    function _calcTreasuryFee(\n        uint256 swappedAmount\n    ) private view returns (uint256) {\n        // gas-saving codes\n        uint16 buyTax_ = _buyTax;\n        uint16 sellTax_ = _sellTax;\n        uint16 treasuryTax_ = _treasuryTax;\n\n        return\n            (swappedAmount * 2 * treasuryTax_) /\n            (buyTax_ + sellTax_ + 2 * treasuryTax_);\n    }\n\n    function _swapToToken(\n        address token,\n        uint256 amount\n    ) private returns (uint256) {\n        // generate the uniswap pair path of token -> stable coin\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = token;\n\n        IDexRouter dexRouter_ = IDexRouter(_dexRouter);\n        _approve(address(this), address(dexRouter_), amount);\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        // make the swap\n        try\n            dexRouter_.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                amount,\n                0, // accept any amount of tokens\n                path,\n                address(this),\n                block.timestamp + 300\n            )\n        {\n            return IERC20(token).balanceOf(address(this)) - balanceBefore;\n        } catch (bytes memory /* lowLevelData */) {}\n        return 0;\n    }\n\n    function _swapToETH(uint256 amount) private returns (uint256) {\n        IDexRouter dexRouter_ = IDexRouter(_dexRouter);\n        // generate the uniswap pair path of token -> eth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter_.WETH();\n\n        _approve(address(this), address(dexRouter_), amount);\n        uint256 balanceBefore = address(this).balance;\n        // make the swap\n        try\n            dexRouter_.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                amount,\n                0, // accept any amount of ETH\n                path,\n                address(this),\n                block.timestamp + 300\n            )\n        {\n            return address(this).balance - balanceBefore;\n        } catch (bytes memory /* lowLevelData */) {}\n        return 0;\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev It allows the admin to recover tokens sent to the contract\n     * @param token_: the address of the token to withdraw\n     * @param amount_: the number of tokens to withdraw\n     *\n     * This function is only callable by owner\n     */\n    function recoverToken(address token_, uint256 amount_) external onlyOwner {\n        IERC20(token_).safeTransfer(_msgSender(), amount_);\n    }\n\n    /**\n     * @dev It allows the admin to recover ETH sent to the contract\n     * @param amount_: the number of ETH to withdraw\n     *\n     * This function is only callable by owner\n     */\n    function recoverETH(uint256 amount_) external onlyOwner {\n        payable(_msgSender()).sendValue(amount_);\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"distribParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"antiBotParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"taxParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"lpParam\",\"type\":\"bytes\"}],\"internalType\":\"struct IBase.TokenLaunchConf\",\"name\":\"tokenLaunchConf_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"autoBurnFirstPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"autoBurnSecondPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"autoBurnThirdPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"thresholdPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxBuyTaxAfter\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSellTaxAfter\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTreasuryTaxAfter\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bankPadTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTaxToRenounce\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"bankPadTaxApplyPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxWhitelistApplyDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingDelayTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingDisableTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IBase.InheritedConf\",\"name\":\"inheritedConf_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"antiDumpLimit\",\"type\":\"uint16\"}],\"name\":\"AntiDumpLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"ExcludedFromHoldLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"ExcludedFromTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"ExcludedFromTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxHoldLimit\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxTxLimit\",\"type\":\"uint16\"}],\"name\":\"MaxLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"NewAmmPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"buyTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"sellTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasuryTax\",\"type\":\"uint16\"}],\"name\":\"TaxesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingDelayFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ammAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDumpLimit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankPadFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankPadTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankUUID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankUUIDHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"batchExcludeFromHoldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"batchExcludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"batchExcludeFromTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"batchSetAsAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"enableTaxConvert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isAmmPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAntiDumpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTaxConvertEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"tradingDelayed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tradingDisabled\",\"type\":\"bool\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxToRenounce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipeAutoBurnPercents\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAfterLimits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxLimits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeConfiguration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"limit\",\"type\":\"uint16\"}],\"name\":\"updateAntiDumpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"holdLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"txLimit\",\"type\":\"uint16\"}],\"name\":\"updateMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryTax\",\"type\":\"uint16\"}],\"name\":\"updateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateThresholdAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20ByBankPad", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000066e48b267c2339ce9f033c7fe76989700f0b41b8000000000000000000000000eef8c380abba59b6a5341e363daf8fa9031923b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000000000535000000000000000000000000000000000000000000000000000000000000029a00000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000093a8000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000002430306634316239632d653161612d313165652d623063612d38613535653837383035313500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000742616e6b20414900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442414e4b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000204fce5e3e25026110000000000000000000000000000000eef8c380abba59b6a5341e363daf8fa9031923b0000000000000000000000000000000000000000000000000000000000000264d0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000067262a61c0a459fff172c22e60dbc730393bf7900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000278d00", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}