{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.23;\r\n\r\n// Created by dark-grey.eth\r\n// Project: $TIME Memecoin [Presale]\r\n// - Twitter: https://twitter.com/TimeMemecoin\r\n// - Telegram: https://t.me/TIME_loundge\r\n// - Website: www.time.cheap\r\n\r\ncontract TimePresale {\r\n    address public owner;\r\n    address public presaleWallet;\r\n    bool public saleActive;\r\n\r\n    enum SlotTier { Tier1, Tier2, Tier3 }\r\n\r\n    struct TierInfo {\r\n        uint256 maxParticipants;\r\n        uint256 currentParticipants;\r\n        uint256 entryFee;\r\n    }\r\n\r\n    mapping(SlotTier => TierInfo) public tiers;\r\n    mapping(address => mapping(SlotTier => bool)) public hasPurchased;\r\n\r\n    // Events\r\n    event SlotPurchased(address indexed purchaser, SlotTier tier);\r\n    event SaleStopped();\r\n    event FundsWithdrawn(address indexed owner, uint256 amount);\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    modifier isSaleActive() {\r\n        require(saleActive, \"Presale is not active\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _presaleWallet) {\r\n        owner = msg.sender;\r\n        presaleWallet = _presaleWallet;\r\n        saleActive = true;\r\n\r\n        // Initializing tier information\r\n        tiers[SlotTier.Tier1] = TierInfo(39, 0, 0.25 ether);\r\n        tiers[SlotTier.Tier2] = TierInfo(59, 0, 0.175 ether);\r\n        tiers[SlotTier.Tier3] = TierInfo(100, 0, 0.1 ether);\r\n    }\r\n\r\n    function buySlot(SlotTier tier) external payable isSaleActive {\r\n        TierInfo storage tierInfo = tiers[tier];\r\n        require(tierInfo.currentParticipants < tierInfo.maxParticipants, \"Tier is full\");\r\n        require(!hasPurchased[msg.sender][tier], \"Already owns a slot in this tier\");\r\n        require(msg.value == tierInfo.entryFee, \"Incorrect ETH amount\");\r\n\r\n        hasPurchased[msg.sender][tier] = true;\r\n        tierInfo.currentParticipants++;\r\n\r\n        // Automatic withdrawal if it's the last slot of the tier\r\n        if (tierInfo.currentParticipants == tierInfo.maxParticipants) {\r\n            autoWithdraw();\r\n        }\r\n\r\n        emit SlotPurchased(msg.sender, tier);\r\n    }\r\n\r\n    // Automatically withdraws funds to the presale wallet when the last slot of a tier is purchased\r\n    function autoWithdraw() internal {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = presaleWallet.call{value: balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    // Allows the owner to change the presale wallet address\r\n    function setPresaleWallet(address _newWallet) external onlyOwner {\r\n        presaleWallet = _newWallet;\r\n    }\r\n\r\n    // Allows the owner to stop the sale\r\n    function stopSale() external onlyOwner {\r\n        saleActive = false;\r\n        emit SaleStopped();\r\n    }\r\n\r\n    // Allows the owner to withdraw funds from the contract\r\n    function withdrawFunds() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds available\");\r\n\r\n        // Check-Effects-Interaction pattern to prevent reentrancy attacks\r\n        (bool success, ) = owner.call{value: balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        emit FundsWithdrawn(owner, balance);\r\n    }\r\n\r\n    // Returns the number of available slots in a given tier\r\n    function availableSlots(SlotTier tier) external view returns (uint256) {\r\n        return tiers[tier].maxParticipants - tiers[tier].currentParticipants;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TimePresale.SlotTier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"SlotPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum TimePresale.SlotTier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"availableSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TimePresale.SlotTier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"buySlot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum TimePresale.SlotTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"hasPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setPresaleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TimePresale.SlotTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TimePresale", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c661fd20690f3edbeab5af5eb8e339d6a1e5d96b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4fdb590d0754db8a1d06e2941f4c34336b84e211d531665f7728351ea8edd0c1"}