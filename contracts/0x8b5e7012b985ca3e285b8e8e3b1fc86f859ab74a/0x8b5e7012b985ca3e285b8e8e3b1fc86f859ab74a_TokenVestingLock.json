{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/TokenVestingLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title TokenVestingLock\\n * This contract allows HanChain payments to be split among a group of accounts.\\n * The sender does not need to be aware that the HanChain tokens will be split in this way,\\n * since it is handled transparently by the contract.\\n * Additionally, this contract handles the vesting of HanChain tokens for a given payee and\\n * release the tokens to the payee following a given vesting schedule.\\n\\n * The split can be in equal parts or in any other arbitrary proportion.\\n * The way this is specified is by assigning each account to a number of shares.\\n * Of all the HanChain tokens that this contract receives, each account will then be able\\n * to claim an amount proportional to the percentage of total shares they were assigned.\\n * The distribution of shares is set at the time of contract deployment and can't be updated thereafter.\\n * Additionally, any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n\\n * 'TokenVestingLock' follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} function.\\n*/\\n\\ncontract TokenVestingLock {\\n    IERC20 public immutable token;\\n\\n    // Payee struct represents a participant who is eligible to receive tokens from a smart contract.\\n    struct Payee {\\n        address account;  // The address of the payee's Ethereum account\\n        uint256 shares;  // The corresponding list of shares (in percentage) that each payee is entitled to receive.\\n        uint256 tokensPerRoundPerPayee;  // The number of tokens the payee will receive per round of token distribution\\n        uint256 releaseTokens;  // The total number of tokens the payee is eligible to receive over the course of the contract\\n    }\\n\\n    uint256 public immutable durationSeconds;  // The duration of the vesting period in seconds.\\n    uint256 public immutable intervalSeconds;  // The time interval between token releases in seconds.\\n    uint256 public immutable totalReleaseTokens;  // The total number of tokens to be released over the vesting period.\\n    uint256 public immutable startTime;  // The timestamp when the vesting period starts.\\n    uint256 public immutable totalRounds;  // The total number of token release rounds.\\n    uint256 public immutable totalAccounts;  // The total number of payees.\\n    uint256 public totalReleasedTokens;  // The total number of tokens already released.\\n\\n    Payee[] public payees;  // An array of Payee structs representing the payees.\\n    mapping(address => uint256) public releasedAmount;  // A mapping of released token amounts for each payee address.\\n\\n\\n    /** Creates a new TokenVestingLock contract instance that locks the specified ERC20 token for a certain period of time,\\n     * and releases it in a linear fashion to a list of payees.\\n     * Set the payee, start timestamp and vesting duration of the 'TokenVestingLock' wallet.\\n     *\\n     * Creates an instance of TokenVestingLock where each account in accounts is assigned the number of shares at\\n     * the matching position in the shares array.\\n     * All addresses in accounts must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in accounts\\n     *\\n     * @param _startDelay The delay in seconds before vesting starts.\\n     * @param _accounts The list of addresses of the payees.\\n     */\\n    \\n    constructor(IERC20 _token, uint256 _startDelay, uint256 _durationSeconds, uint256 _intervalSeconds, uint256 _totalReleaseTokens, address[] memory _accounts, uint256[] memory _shares) {\\n        require(_accounts.length == _shares.length, \\\"TokenVestingLock: accounts and shares length mismatch\\\");\\n        require(_accounts.length > 0, \\\"TokenVestingLock: no payees\\\");\\n\\n        for (uint256 i = 0; i < _accounts.length - 1; i++) {\\n            for (uint256 j = i + 1; j < _accounts.length; j++) {\\n                require(_accounts[i] != _accounts[j], \\\"TokenVestingLock: duplicate addresses\\\");\\n            }\\n        }\\n\\n        uint256 totalShares = 0;\\n        for (uint256 i = 0; i < _shares.length; i++) {\\n            totalShares += _shares[i];\\n        }\\n        require(totalShares == 100, \\\"Shares must sum up to 100\\\");\\n\\n        token = _token;\\n        durationSeconds = _durationSeconds;\\n        startTime = block.timestamp + _startDelay;\\n        intervalSeconds = _intervalSeconds;\\n        totalReleaseTokens = _totalReleaseTokens;\\n        totalRounds = durationSeconds/intervalSeconds;\\n        totalAccounts = _accounts.length;\\n        require(durationSeconds % intervalSeconds == 0, \\\"error durationSeconds value\\\");        \\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            uint256 tokensPerRoundPerBeneficiary = totalReleaseTokens * _shares[i] * intervalSeconds / durationSeconds / 100;\\n            uint256 releaseTokens = tokensPerRoundPerBeneficiary * totalRounds;\\n            payees.push(Payee(_accounts[i], _shares[i], tokensPerRoundPerBeneficiary, releaseTokens));\\n        }\\n\\n    }\\n\\n    /**\\n     * Releases tokens to payees based on the vesting schedule.\\n     * Tokens are released for each time interval as defined by intervalSeconds until the vesting period ends.\\n     * Tokens that have already been released will not be released again.\\n     * If the vesting period has not yet started, the function will revert.\\n     *\\n     * Anyone can execute the 'release' function.\\n     */    \\n\\n    function release() public {\\n        uint256 currentTime = block.timestamp;\\n        require(currentTime >= startTime, \\\"Vesting not started yet\\\");\\n\\n        uint256 numIntervals = (currentTime - startTime) / intervalSeconds;\\n        uint256 totalVestedTokens = (totalReleaseTokens * numIntervals) / (durationSeconds / intervalSeconds);\\n        if (totalVestedTokens > totalReleaseTokens) {\\n            totalVestedTokens = totalReleaseTokens;\\n        }\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            uint256 payeeShare = (payees[i].shares * totalVestedTokens) / 100;\\n            uint256 releasable = payeeShare - releasedAmount[payees[i].account];\\n            require(releasable <= token.balanceOf(address(this)), \\\"The available balance for release is insufficient\\\");\\n            releasedAmount[payees[i].account] += releasable;\\n            totalReleasedTokens += releasable;\\n            token.transfer(payees[i].account, releasable);\\n            emit released(payees[i].account, releasable);\\n        }\\n    }\\n\\n    /**\\n     * Returns the Payee struct associated with the specified account.\\n     * @param _account The address of the payee account to retrieve.\\n     */\\n    function getPayee(address _account) public view returns (Payee memory) {\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            if (payees[i].account == _account) {\\n                return payees[i];\\n            }\\n        }\\n        revert(\\\"missing account\\\");\\n    }\\n\\n    /** Returns the number of rounds released.\\n     * A round is considered released if the tokens for that round have been fully released.\\n     * If the payee has not received any tokens yet, returns 0.\\n     * Otherwise, calculates the number of rounds released based on the tokens already released and the tokens that the payee receives per round.\\n     */\\n    function releasedRounds() public view returns (uint256) {\\n        address account = payees[0].account;\\n        if(releasedAmount[account] == 0) {\\n            return 0;\\n        } else {\\n            return releasedAmount[account] / payees[0].tokensPerRoundPerPayee;\\n        }\\n    }\\n    \\n    /** Returns the number of rounds remaining until vesting is complete.\\n     * If the vesting has not yet started, returns the total number of rounds.\\n     * If vesting has already completed, returns 0.\\n     * Otherwise, calculates the number of rounds remaining based on the current time and the vesting duration.\\n     */\\n    function remainingRounds() public view returns (uint256) {\\n        if(startTime > block.timestamp) {\\n            return totalRounds;\\n        } else {\\n            if (block.timestamp >= startTime + durationSeconds) {\\n                return 0;\\n            } else {\\n                return 1 + (startTime + durationSeconds - block.timestamp) / intervalSeconds;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Returns the number of tokens that are yet to be released.\\n     * Calculates the total number of rounds remaining based on the difference between totalRounds and the number of rounds already released,\\n     * and then calculates the total number of tokens remaining based on the tokensPerRound for each payee and the number of remaining rounds.\\n     */\\n    function remainingTokens() public view returns (uint256) {\\n        uint256 tokensPerRound = 0;\\n        uint256 remaining = totalRounds - releasedRounds();\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            tokensPerRound += payees[i].tokensPerRoundPerPayee;\\n        }\\n        return tokensPerRound * remaining;\\n    }\\n\\n    event released(address indexed account, uint256 amount);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReleaseTokens\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"released\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"durationSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPayee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerRoundPerPayee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVestingLock.Payee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerRoundPerPayee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleaseTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenVestingLock", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000c90c57aaf95a3a87eadda6ec3974c99d786511f00000000000000000000000000000000000000000000000000000000002819a00000000000000000000000000000000000000000000000000000000012cc030000000000000000000000000000000000000000000000000000000000002819a000000000000000000000000000000000000000000168aad38ff6982b9880000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000495fcd7f56a0bf8be1f29be02d1aa5f492f2ff6600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}