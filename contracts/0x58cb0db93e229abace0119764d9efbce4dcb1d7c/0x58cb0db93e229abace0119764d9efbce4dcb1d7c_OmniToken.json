{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/OmniToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./interfaces/IIRM.sol\\\";\\nimport \\\"./interfaces/IOmniPool.sol\\\";\\nimport \\\"./interfaces/IOmniToken.sol\\\";\\nimport \\\"./SubAccount.sol\\\";\\nimport \\\"./WithUnderlying.sol\\\";\\n\\n/**\\n * @title OmniToken Contract\\n * @notice This contract manages deposits, withdrawals, borrowings, and repayments within the Omni protocol. There is only borrow caps, no supply caps.\\n * @dev It has multiple tranches, each with its own borrowing and depositing conditions. This contract does not handle rebasing tokens.\\n * Inherits from IOmniToken, WithUnderlying, and ReentrancyGuardUpgradeable (includes Initializable) from the OpenZeppelin library.\\n * Utilizes the SafeERC20, SubAccount libraries for safe token transfers and account management.\\n * Emits events for significant state changes like deposits, withdrawals, borrowings, repayments, and tranches updates.\\n */\\ncontract OmniToken is IOmniToken, WithUnderlying, ReentrancyGuardUpgradeable {\\n    struct OmniTokenTranche {\\n        uint256 totalDepositAmount;\\n        uint256 totalBorrowAmount;\\n        uint256 totalDepositShare;\\n        uint256 totalBorrowShare;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n    using SubAccount for address;\\n    using SubAccount for bytes32;\\n\\n    uint256 public constant RESERVE_FEE = 0.1e9;\\n    uint256 public constant FEE_SCALE = 1e9;\\n    uint256 public constant IRM_SCALE = 1e9; // Must match IRM.sol\\n    uint256 private constant MAX_VIEW_ACCOUNTS = 25;\\n\\n    address public omniPool;\\n    address public irm;\\n    uint256 public lastAccrualTime;\\n    uint8 public trancheCount;\\n    bytes32 public reserveReceiver;\\n    mapping(uint8 => mapping(bytes32 => uint256)) private trancheAccountDepositShares;\\n    mapping(uint8 => mapping(bytes32 => uint256)) private trancheAccountBorrowShares;\\n    uint256[] public trancheBorrowCaps;\\n    OmniTokenTranche[] public tranches;\\n\\n    /**\\n     * @notice Contract initializes the OmniToken with required parameters.\\n     * @param _omniPool Address of the OmniPool contract.\\n     * @param _underlying Address of the underlying asset.\\n     * @param _irm Address of the Interest Rate Model contract.\\n     * @param _borrowCaps Initial borrow caps for each tranche.\\n     */\\n    function initialize(address _omniPool, address _underlying, address _irm, uint256[] calldata _borrowCaps)\\n        external\\n        initializer\\n    {\\n        __ReentrancyGuard_init();\\n        __WithUnderlying_init(_underlying);\\n        omniPool = _omniPool;\\n        irm = _irm;\\n        lastAccrualTime = block.timestamp;\\n        trancheBorrowCaps = _borrowCaps;\\n        trancheCount = uint8(_borrowCaps.length);\\n        for (uint8 i = 0; i < _borrowCaps.length; ++i) {\\n            tranches.push(OmniTokenTranche(0, 0, 0, 0));\\n        }\\n        reserveReceiver = IOmniPool(omniPool).reserveReceiver();\\n    }\\n\\n    /**\\n     * @notice Accrues interest for all tranches, calculates and distributes the interest among the depositors and updates tranche balances.\\n     * The function also handles reserve payments. This method needs to be called before any deposit, withdrawal, borrow, or repayment actions to update the state of the contract.\\n     * @dev Interest is paid out proportionately to more risky tranche deposits per tranche\\n     */\\n    function accrue() public {\\n        uint256 timePassed = block.timestamp - lastAccrualTime;\\n        if (timePassed == 0) {\\n            return;\\n        }\\n        uint8 trancheIndex = trancheCount;\\n        uint256 totalBorrow = 0;\\n        uint256 totalDeposit = 0;\\n        uint256[] memory trancheDepositAmounts_ = new uint256[](trancheIndex); // trancheIndeex == trancheCount initially\\n        uint256[] memory trancheAccruedDepositCache = new uint256[](trancheIndex);\\n        uint256[] memory reserveFeeCache = new uint256[](trancheIndex);\\n        while (trancheIndex != 0) {\\n            unchecked {\\n                --trancheIndex;\\n            }\\n            OmniTokenTranche storage tranche = tranches[trancheIndex];\\n            uint256 trancheDepositAmount_ = tranche.totalDepositAmount;\\n            uint256 trancheBorrowAmount_ = tranche.totalBorrowAmount;\\n            totalBorrow += trancheBorrowAmount_;\\n            totalDeposit += trancheDepositAmount_;\\n            trancheDepositAmounts_[trancheIndex] = trancheDepositAmount_;\\n            trancheAccruedDepositCache[trancheIndex] = trancheDepositAmount_;\\n\\n            if (trancheBorrowAmount_ == 0) {\\n                continue;\\n            }\\n            uint256 interestAmount;\\n            {\\n                uint256 interestRate = IIRM(irm).getInterestRate(address(this), trancheIndex, totalDeposit, totalBorrow);\\n                interestAmount = (trancheBorrowAmount_ * interestRate * timePassed) / 365 days / IRM_SCALE;\\n            }\\n\\n            // Handle reserve payments\\n            uint256 reserveInterestAmount = interestAmount * RESERVE_FEE / FEE_SCALE;\\n            reserveFeeCache[trancheIndex] = reserveInterestAmount;\\n\\n            // Handle deposit interest\\n            interestAmount -= reserveInterestAmount;\\n            {\\n                uint256 depositInterestAmount = 0;\\n                uint256 interestAmountProportion;\\n                for (uint8 ti = trancheCount; ti > trancheIndex;) {\\n                    unchecked { --ti; }\\n                    interestAmountProportion = interestAmount * trancheDepositAmounts_[ti] / totalDeposit;\\n                    trancheAccruedDepositCache[ti] += interestAmountProportion;\\n                    depositInterestAmount += interestAmountProportion;\\n                }\\n                tranche.totalBorrowAmount = trancheBorrowAmount_ + depositInterestAmount + reserveInterestAmount;\\n            }\\n        }\\n        for (uint8 ti = 0; ti < trancheCount; ++ti) {\\n            OmniTokenTranche memory tranche_ = tranches[ti];\\n            // Pay the reserve\\n            uint256 reserveShare;\\n            if (reserveFeeCache[ti] > 0) {\\n                if (trancheAccruedDepositCache[ti] == 0) {\\n                    reserveShare = reserveFeeCache[ti];\\n                } else {\\n                    reserveShare = (reserveFeeCache[ti] * tranche_.totalDepositShare) / trancheAccruedDepositCache[ti];\\n                }\\n                trancheAccruedDepositCache[ti] += reserveFeeCache[ti];\\n                trancheAccountDepositShares[ti][reserveReceiver] += reserveShare;\\n                tranche_.totalDepositShare += reserveShare;\\n            }\\n            tranche_.totalDepositAmount = trancheAccruedDepositCache[ti];\\n            tranches[ti] = tranche_;\\n        }\\n        lastAccrualTime = block.timestamp;\\n        emit Accrue();\\n    }\\n\\n    /**\\n     * @notice Allows a user to deposit a specified amount into a specified tranche.\\n     * @param _subId Sub-account identifier for the depositor.\\n     * @param _trancheId Identifier of the tranche to deposit into.\\n     * @param _amount Amount to deposit.\\n     * @return share Amount of deposit shares received in exchange for the deposit.\\n     */\\n    function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount) external nonReentrant returns (uint256 share) {\\n        require(_trancheId < IOmniPool(omniPool).pauseTranche(), \\\"OmniToken::deposit: Tranche paused.\\\");\\n        require(_trancheId < trancheCount, \\\"OmniToken::deposit: Invalid tranche id.\\\");\\n        accrue();\\n        bytes32 account = msg.sender.toAccount(_subId);\\n        uint256 amount = _inflowTokens(account.toAddress(), _amount);\\n        OmniTokenTranche storage tranche = tranches[_trancheId];\\n        uint256 totalDepositShare_ = tranche.totalDepositShare;\\n        uint256 totalDepositAmount_ = tranche.totalDepositAmount;\\n        if (totalDepositShare_ == 0) {\\n            share = amount;\\n        } else {\\n            assert(totalDepositAmount_ > 0);\\n            share = (amount * totalDepositShare_) / totalDepositAmount_;\\n        }\\n        tranche.totalDepositAmount = totalDepositAmount_ + amount;\\n        tranche.totalDepositShare = totalDepositShare_ + share;\\n        trancheAccountDepositShares[_trancheId][account] += share;\\n        emit Deposit(account, _trancheId, amount, share);\\n    }\\n\\n    /**\\n     * @notice Allows a user to withdraw their funds from a specified tranche.\\n     * @param _subId The ID of the sub-account.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _share The share of the user in the tranche.\\n     * @return amount The amount of funds withdrawn.\\n     */\\n    function withdraw(uint96 _subId, uint8 _trancheId, uint256 _share) external nonReentrant returns (uint256 amount) {\\n        require(_trancheId < IOmniPool(omniPool).pauseTranche(), \\\"OmniToken::withdraw: Tranche paused.\\\");\\n        require(_trancheId < trancheCount, \\\"OmniToken::withdraw: Invalid tranche id.\\\");\\n        accrue();\\n        bytes32 account = msg.sender.toAccount(_subId);\\n        OmniTokenTranche storage tranche = tranches[_trancheId];\\n        uint256 totalDepositAmount_ = tranche.totalDepositAmount;\\n        uint256 totalDepositShare_ = tranche.totalDepositShare;\\n        uint256 accountDepositShares_ = trancheAccountDepositShares[_trancheId][account];\\n        if (_share == 0) {\\n            _share = accountDepositShares_;\\n        }\\n        amount = (_share * totalDepositAmount_) / totalDepositShare_;\\n        tranche.totalDepositAmount = totalDepositAmount_ - amount;\\n        tranche.totalDepositShare = totalDepositShare_ - _share;\\n        trancheAccountDepositShares[_trancheId][account] = accountDepositShares_ - _share;\\n        require(_checkBorrowAllocationOk(), \\\"OmniToken::withdraw: Insufficient withdrawals available.\\\");\\n        _outflowTokens(account.toAddress(), amount);\\n        require(IOmniPool(omniPool).isAccountHealthy(account), \\\"OmniToken::withdraw: Not healthy.\\\");\\n        emit Withdraw(account, _trancheId, amount, _share);\\n    }\\n\\n    /**\\n     * @notice Allows a user to borrow funds from a specified tranche.\\n     * @param _account The account of the user.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to borrow.\\n     * @return share The share of the borrowed amount in the tranche.\\n     */\\n    function borrow(bytes32 _account, uint8 _trancheId, uint256 _amount)\\n        external\\n        nonReentrant\\n        returns (uint256 share)\\n    {\\n        require(_trancheId < IOmniPool(omniPool).pauseTranche(), \\\"OmniToken::borrow: Tranche paused.\\\");\\n        require(msg.sender == omniPool, \\\"OmniToken::borrow: Bad caller.\\\");\\n        accrue();\\n        OmniTokenTranche storage tranche = tranches[_trancheId];\\n        uint256 totalBorrowAmount_ = tranche.totalBorrowAmount;\\n        uint256 totalBorrowShare_ = tranche.totalBorrowShare;\\n        require(totalBorrowAmount_ + _amount <= trancheBorrowCaps[_trancheId], \\\"OmniToken::borrow: Borrow cap reached.\\\");\\n        if (totalBorrowShare_ == 0) {\\n            share = _amount;\\n        } else {\\n            assert(totalBorrowAmount_ > 0); // Should only happen if bad debt exists & all other debts repaid\\n            share = Math.ceilDiv(_amount * totalBorrowShare_, totalBorrowAmount_);\\n        }\\n        tranche.totalBorrowAmount = totalBorrowAmount_ + _amount;\\n        tranche.totalBorrowShare = totalBorrowShare_ + share;\\n        trancheAccountBorrowShares[_trancheId][_account] += share;\\n        require(_checkBorrowAllocationOk(), \\\"OmniToken::borrow: Invalid borrow allocation.\\\");\\n        _outflowTokens(_account.toAddress(), _amount);\\n        emit Borrow(_account, _trancheId, _amount, share);\\n    }\\n\\n    /**\\n     * @notice Allows a user or another account to repay borrowed funds.\\n     * @param _account The account of the user.\\n     * @param _payer The account that will pay the borrowed amount.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to repay.\\n     * @return amount The amount of the repaid amount in the tranche.\\n     */\\n    function repay(bytes32 _account, address _payer, uint8 _trancheId, uint256 _amount)\\n        external\\n        nonReentrant\\n        returns (uint256 amount)\\n    {\\n        require(msg.sender == omniPool, \\\"OmniToken::repay: Bad caller.\\\");\\n        accrue();\\n        OmniTokenTranche storage tranche = tranches[_trancheId];\\n        uint256 totalBorrowAmount_ = tranche.totalBorrowAmount;\\n        uint256 totalBorrowShare_ = tranche.totalBorrowShare;\\n        uint256 accountBorrowShares_ = trancheAccountBorrowShares[_trancheId][_account];\\n        if (_amount == 0) {\\n            _amount = Math.ceilDiv(accountBorrowShares_ * totalBorrowAmount_, totalBorrowShare_);\\n        }\\n        amount = _inflowTokens(_payer, _amount);\\n        uint256 share = (amount * totalBorrowShare_) / totalBorrowAmount_;\\n        tranche.totalBorrowAmount = totalBorrowAmount_ - amount;\\n        tranche.totalBorrowShare = totalBorrowShare_ - share;\\n        trancheAccountBorrowShares[_trancheId][_account] = accountBorrowShares_ - share;\\n        emit Repay(_account, _payer, _trancheId, amount, share);\\n    }\\n\\n    /**\\n     * @notice Transfers specified shares from one account to another within a specified tranche.\\n     * @dev This function can only be called externally and is protected against reentrancy.\\n     * Requires the tranche to be unpaused and the sender account to remain healthy post-transfer.\\n     * @param _subId The subscription ID related to the sender's account.\\n     * @param _to The account identifier to which shares are being transferred.\\n     * @param _trancheId The identifier of the tranche where the transfer is occurring.\\n     * @param _shares The amount of shares to transfer.\\n     * @return A boolean value indicating whether the transfer was successful.\\n     */\\n    function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, uint256 _shares)\\n        external\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(_trancheId < IOmniPool(omniPool).pauseTranche(), \\\"OmniToken::transfer: Tranche paused.\\\");\\n        accrue();\\n        bytes32 from = msg.sender.toAccount(_subId);\\n        trancheAccountDepositShares[_trancheId][from] -= _shares;\\n        trancheAccountDepositShares[_trancheId][_to] += _shares;\\n        require(IOmniPool(omniPool).isAccountHealthy(from), \\\"OmniToken::transfer: Not healthy.\\\");\\n        emit Transfer(from, _to, _trancheId, _shares);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows the a liquidator to seize funds from a user's account. OmniPool is responsible for defining how this function is called.\\n     * Greedily seizes as much collateral as possible, does not revert if no more collateral is left to seize and _amount is nonzero.\\n     * @param _account The account from which funds will be seized.\\n     * @param _to The account to which seized funds will be sent.\\n     * @param _amount The amount of funds to seize.\\n     * @return seizedShares The shares seized from each tranche.\\n     */\\n    function seize(bytes32 _account, bytes32 _to, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256[] memory)\\n    {\\n        require(msg.sender == omniPool, \\\"OmniToken::seize: Bad caller\\\");\\n        accrue();\\n        uint256 amount_ = _amount;\\n        uint256[] memory seizedShares = new uint256[](trancheCount);\\n        for (uint8 ti = 0; ti < trancheCount; ++ti) {\\n            uint256 totalShare = tranches[ti].totalDepositShare;\\n            if (totalShare == 0) {\\n                continue;\\n            }\\n            uint256 totalAmount = tranches[ti].totalDepositAmount;\\n            uint256 share = trancheAccountDepositShares[ti][_account];\\n            uint256 amount = (share * totalAmount) / totalShare;\\n            if (amount_ > amount) {\\n                amount_ -= amount;\\n                trancheAccountDepositShares[ti][_account] = 0;\\n                trancheAccountDepositShares[ti][_to] += share;\\n                seizedShares[ti] = share;\\n            } else {\\n                uint256 transferShare = (share * amount_) / amount;\\n                trancheAccountDepositShares[ti][_account] = share - transferShare;\\n                trancheAccountDepositShares[ti][_to] += transferShare;\\n                seizedShares[ti] = transferShare;\\n                break;\\n            }\\n        }\\n        emit Seize(_account, _to, _amount, seizedShares);\\n        return seizedShares;\\n    }\\n\\n    /**\\n     * @notice Distributes the bad debt loss in a tranche among all tranche members in cases of bad debt. OmniPool is responsible for defining how this function is called.\\n     * @dev This should only be called when the _account does not have any collateral left to seize.\\n     * @param _account The account that incurred a loss.\\n     * @param _trancheId The ID of the tranche.\\n     */\\n    function socializeLoss(bytes32 _account, uint8 _trancheId) external nonReentrant {\\n        require(msg.sender == omniPool, \\\"OmniToken::socializeLoss: Bad caller\\\");\\n        uint256 totalDeposits = 0;\\n        for (uint8 i = _trancheId; i < trancheCount; ++i) {\\n            totalDeposits += tranches[i].totalDepositAmount;\\n        }\\n        OmniTokenTranche storage tranche = tranches[_trancheId];\\n        uint256 share = trancheAccountBorrowShares[_trancheId][_account];\\n        uint256 amount = Math.ceilDiv(share * tranche.totalBorrowAmount, tranche.totalBorrowShare); // Represents amount of bad debt there still is (need to ensure user's account is emptied of collateral before this is called)\\n        uint256 leftoverAmount = amount;\\n        for (uint8 ti = trancheCount - 1; ti > _trancheId; --ti) {\\n            OmniTokenTranche storage upperTranche = tranches[ti];\\n            uint256 amountProp = (amount * upperTranche.totalDepositAmount) / totalDeposits;\\n            upperTranche.totalDepositAmount -= amountProp;\\n            leftoverAmount -= amountProp;\\n        }\\n        tranche.totalDepositAmount -= leftoverAmount;\\n        tranche.totalBorrowAmount -= amount;\\n        tranche.totalBorrowShare -= share;\\n        trancheAccountBorrowShares[_trancheId][_account] = 0;\\n        emit SocializedLoss(_account, _trancheId, amount, share);\\n    }\\n\\n    /**\\n     * @notice Computes the borrowing amount of a specific account in the underlying asset for a given borrow tier.\\n     * @dev The division is ceiling division.\\n     * @param _account The account identifier for which the borrowing amount is to be computed.\\n     * @param _borrowTier The borrow tier identifier from which the borrowing amount is to be computed.\\n     * @return The borrowing amount of the account in the underlying asset for the given borrow tier.\\n     */\\n    function getAccountBorrowInUnderlying(bytes32 _account, uint8 _borrowTier) external view returns (uint256) {\\n        OmniTokenTranche storage tranche = tranches[_borrowTier];\\n        uint256 share = trancheAccountBorrowShares[_borrowTier][_account];\\n        if (share == 0) {\\n            return 0;\\n        } else {\\n            return Math.ceilDiv(share * tranche.totalBorrowAmount, tranche.totalBorrowShare);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the total deposit amount for a specific account across all tranches.\\n     * @param _account The account identifier.\\n     * @return The total deposit amount.\\n     */\\n    function getAccountDepositInUnderlying(bytes32 _account) public view returns (uint256) {\\n        uint256 totalDeposit = 0;\\n        for (uint8 trancheIndex = 0; trancheIndex < trancheCount; ++trancheIndex) {\\n            OmniTokenTranche storage tranche = tranches[trancheIndex];\\n            uint256 share = trancheAccountDepositShares[trancheIndex][_account];\\n            if (share > 0) {\\n                totalDeposit += (share * tranche.totalDepositAmount) / tranche.totalDepositShare;\\n            }\\n        }\\n        return totalDeposit;\\n    }\\n\\n    /**\\n     * @notice Retrieves the deposit and borrow shares for a specific account in a specific tranche.\\n     * @param _account The account identifier.\\n     * @param _trancheId The tranche identifier.\\n     * @return depositShare The deposit share.\\n     * @return borrowShare The borrow share.\\n     */\\n    function getAccountSharesByTranche(bytes32 _account, uint8 _trancheId)\\n        external\\n        view\\n        returns (uint256 depositShare, uint256 borrowShare)\\n    {\\n        depositShare = trancheAccountDepositShares[_trancheId][_account];\\n        borrowShare = trancheAccountBorrowShares[_trancheId][_account];\\n    }\\n\\n    /**\\n     * @notice Gets the borrow cap for a specific tranche.\\n     * @param _trancheId The ID of the tranche for which to retrieve the borrow cap.\\n     * @return The borrow cap for the specified tranche.\\n     */\\n    function getBorrowCap(uint8 _trancheId) external view returns (uint256) {\\n        return trancheBorrowCaps[_trancheId];\\n    }\\n\\n    /**\\n     * @notice Sets the borrow caps for each tranche.\\n     * @param _borrowCaps An array of borrow caps in the underlying's decimals.\\n     */\\n    function setTrancheBorrowCaps(uint256[] calldata _borrowCaps) external {\\n        require(msg.sender == omniPool, \\\"OmniToken::setTrancheBorrowCaps: Bad caller.\\\");\\n        require(_borrowCaps.length == trancheCount, \\\"OmniToken::setTrancheBorrowCaps: Invalid borrow caps length.\\\");\\n        require(\\n            _borrowCaps[0] > 0, \\\"OmniToken::setTrancheBorrowCaps: Invalid borrow caps, must always allow 0 to borrow.\\\"\\n        );\\n        trancheBorrowCaps = _borrowCaps;\\n        emit SetTrancheBorrowCaps(_borrowCaps);\\n    }\\n\\n    /**\\n     * @notice Sets the number of tranches. Can only increase the number of tranches by one at a time, never decrease.\\n     * @param _trancheCount The new tranche count.\\n     */\\n    function setTrancheCount(uint8 _trancheCount) external {\\n        require(msg.sender == omniPool, \\\"OmniToken::setTrancheCount: Bad caller.\\\");\\n        require(_trancheCount == trancheCount + 1, \\\"OmniToken::setTrancheCount: Invalid tranche count.\\\");\\n        trancheCount = _trancheCount;\\n        OmniTokenTranche memory tranche = OmniTokenTranche(0, 0, 0, 0);\\n        tranches.push(tranche);\\n        emit SetTrancheCount(_trancheCount);\\n    }\\n\\n    /**\\n     * @notice Fetches and updates the reserve receiver from the OmniPool contract. Anyone can call.\\n     */\\n    function fetchReserveReceiver() external {\\n        reserveReceiver = IOmniPool(omniPool).reserveReceiver();\\n    }\\n\\n    /**\\n     * @notice Calculates the total deposited amount for a specific owner across MAX_VIEW_ACCOUNTS sub-accounts. Above will be excluded, function is imperfect.\\n     * @dev This is just for wallets and Etherscan to pick up the deposit balance of a user for the first MAX_VIEW_ACCOUNTS sub-accounts.\\n     * @param _owner The address of the owner.\\n     * @return The total deposited amount.\\n     */\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        uint256 totalDeposit = 0;\\n        for (uint96 i = 0; i < MAX_VIEW_ACCOUNTS; ++i) {\\n            totalDeposit += getAccountDepositInUnderlying(_owner.toAccount(i));\\n        }\\n        return totalDeposit;\\n    }\\n\\n    /**\\n     * @notice Checks if the borrow allocation is valid across all tranches, through the invariant cumulative totalBorrow <= totalDeposit from highest to lowest tranche.\\n     * @return A boolean value indicating the validity of the borrow allocation.\\n     */\\n    function _checkBorrowAllocationOk() internal view returns (bool) {\\n        uint8 trancheIndex = trancheCount;\\n        uint256 totalBorrow = 0;\\n        uint256 totalDeposit = 0;\\n        while (trancheIndex != 0) {\\n            unchecked {\\n                --trancheIndex;\\n            }\\n            totalBorrow += tranches[trancheIndex].totalBorrowAmount;\\n            totalDeposit += tranches[trancheIndex].totalDepositAmount;\\n            if (totalBorrow > totalDeposit) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IIRM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title Interest Rate Model (IRM) Interface\\n * @notice This interface describes the publicly accessible functions implemented by the IRM contract.\\n */\\ninterface IIRM {\\n    /// Events\\n    event SetIRMForMarket(address indexed market, uint8[] tranches, IRMConfig[] configs);\\n    \\n    /**\\n     * @notice This structure defines the configuration for the interest rate model.\\n     * @dev It contains the kink utilization point, and the interest rates at 0%, kink, and 100% utilization.\\n     */\\n    struct IRMConfig {\\n        uint64 kink; // utilization at mid point (1e9 is 100%)\\n        uint64 start; // interest rate at 0% utlization\\n        uint64 mid; // interest rate at kink utlization\\n        uint64 end; // interest rate at 100% utlization\\n    }\\n\\n    /**\\n     * @notice Calculates the interest rate for a specific market, tranche, total deposit, and total borrow.\\n     * @param _market The address of the market\\n     * @param _tranche The tranche number\\n     * @param _totalDeposit The total amount deposited in the market\\n     * @param _totalBorrow The total amount borrowed from the market\\n     * @return The calculated interest rate\\n     */\\n\\n    function getInterestRate(address _market, uint8 _tranche, uint256 _totalDeposit, uint256 _totalBorrow)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Sets the IRM configuration for a specific market and tranches.\\n     * @param _market The address of the market\\n     * @param _tranches An array of tranche numbers\\n     * @param _configs An array of IRMConfig structures\\n     */\\n    function setIRMForMarket(address _market, uint8[] calldata _tranches, IRMConfig[] calldata _configs) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title IOmniPool Interface\\n * @dev This interface outlines the functions available in the OmniPool contract.\\n */\\ninterface IOmniPool {\\n    /// Events\\n    event ClearedMarkets(bytes32 indexed account);\\n    event EnteredIsolatedMarket(bytes32 indexed account, address market);\\n    event EnteredMarkets(bytes32 indexed account, address[] markets);\\n    event EnteredMode(bytes32 indexed account, uint256 modeId);\\n    event ExitedMarket(bytes32 indexed account, address market);\\n    event ExitedMode(bytes32 indexed account);\\n    event Liquidated(\\n        address indexed liquidator,\\n        bytes32 indexed targetAccount,\\n        bytes32 liquidatorAccount,\\n        address liquidateMarket,\\n        address collateralMarket,\\n        uint256 amount\\n    );\\n    event PausedTranche(uint8 trancheId);\\n    event UnpausedTranche();\\n    event SetMarketConfiguration(address indexed market, MarketConfiguration marketConfig);\\n    event RemovedMarketConfiguration(address indexed market);\\n    event SetModeConfiguration(uint256 indexed modeId, ModeConfiguration modeConfig);\\n    event SocializedLoss(address indexed market, uint8 trancheId, bytes32 account);\\n\\n    // Structs\\n    /**\\n     * @dev Structure to hold market configuration data.\\n     */\\n    struct MarketConfiguration {\\n        uint32 collateralFactor;\\n        uint32 borrowFactor; // Set to 0 if not borrowable.\\n        uint32 expirationTimestamp;\\n        uint8 riskTranche;\\n        bool isIsolatedCollateral; // If this is false, riskTranche must be 0\\n    }\\n\\n    /**\\n     * @dev Structure to hold mode configuration data.\\n     */\\n    struct ModeConfiguration {\\n        uint32 collateralFactor;\\n        uint32 borrowFactor;\\n        uint8 modeTranche;\\n        uint32 expirationTimestamp; // Only prevents people from entering a mode, does not affect users already in existing mode\\n        address[] markets;\\n    }\\n\\n    /**\\n     * @dev Structure to hold account specific data.\\n     */\\n    struct AccountInfo {\\n        uint8 modeId;\\n        address isolatedCollateralMarket;\\n        uint32 softThreshold;\\n    }\\n\\n    /**\\n     * @dev Structure to hold evaluation data for an account.\\n     */\\n    struct Evaluation {\\n        uint256 depositTrueValue;\\n        uint256 borrowTrueValue;\\n        uint256 depositAdjValue;\\n        uint256 borrowAdjValue;\\n        uint64 numDeposit; // To combine into 1 storage slot\\n        uint64 numBorrow;\\n        bool isExpired;\\n    }\\n\\n    /**\\n     * @dev Structure to hold liquidation bonus configuration data.\\n     */\\n    struct LiquidationBonusConfiguration {\\n        uint64 start; // 1e9 precision\\n        uint64 end; // 1e9 precision\\n        uint64 kink; // 1e9 precision\\n        uint32 expiredBonus; // 1e9 precision\\n        uint32 softThreshold; // 1e9 precision\\n    }\\n\\n    /**\\n     * @dev Structure to hold liquidation arguments.\\n     */\\n    struct LiquidationParams {\\n        bytes32 targetAccountId; // The unique identifier of the target account to be liquidated.\\n        bytes32 liquidatorAccountId; // The unique identifier of the account initiating the liquidation.\\n        address liquidateMarket; // The address of the market from which to repay the borrow.\\n        address collateralMarket; // The address of the market from which to seize collateral.\\n        uint256 amount; // The amount of the target account's borrow balance to repay. If _amount is 0, liquidator will repay the entire borrow balance, and will error if the repayment is too large.\\n    }\\n\\n    // Function Signatures\\n    /**\\n     * @dev Returns the address of the oracle contract.\\n     * @return The address of the oracle.\\n     */\\n    function oracle() external view returns (address);\\n\\n    /**\\n     * @dev Returns the pause tranche value.\\n     * @return The pause tranche value.\\n     */\\n    function pauseTranche() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the reserve receiver.\\n     * @return The reserve receiver identifier.\\n     */\\n    function reserveReceiver() external view returns (bytes32);\\n\\n    /**\\n     * @dev Allows a user to enter an isolated market, the market configuration must be for isolated collateral.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _isolatedMarket The address of the isolated market to enter.\\n     */\\n    function enterIsolatedMarket(uint96 _subId, address _isolatedMarket) external;\\n\\n    /**\\n     * @dev Allows a user to enter multiple unique markets, none of them are isolated collateral markets.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _markets The addresses of the markets to enter.\\n     */\\n    function enterMarkets(uint96 _subId, address[] calldata _markets) external;\\n\\n    /**\\n     * @dev Allows a user to exit a single market including their isolated market. There must be no borrows active on the subaccount to exit a market.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _market The addresses of the markets to exit.\\n     */\\n    function exitMarket(uint96 _subId, address _market) external;\\n\\n    /**\\n     * @dev Clears all markets for a user. The subaccount must have no active borrows to clear markets.\\n     * @param _subId The identifier of the sub-account.\\n     */\\n    function clearMarkets(uint96 _subId) external;\\n\\n    /**\\n     * @dev Sets a mode for a sub-account.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _modeId The identifier of the mode to enter.\\n     */\\n    function enterMode(uint96 _subId, uint8 _modeId) external;\\n\\n    /**\\n     * @dev Exits the mode currently set for a sub-account.\\n     * @param _subId The identifier of the sub-account.\\n     */\\n    function exitMode(uint96 _subId) external;\\n\\n    /**\\n     * @dev Evaluates an account's financial metrics.\\n     * @param _accountId The identifier of the account.\\n     * @return eval A struct containing the evaluated metrics of the account.\\n     */\\n    function evaluateAccount(bytes32 _accountId) external returns (Evaluation memory eval);\\n\\n    /**\\n     * @dev Allows a sub-account to borrow assets from a specified market.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _market The address of the market to borrow from.\\n     * @param _amount The amount of assets to borrow.\\n     */\\n    function borrow(uint96 _subId, address _market, uint256 _amount) external;\\n\\n    /**\\n     * @dev Allows a sub-account to repay borrowed assets to a specified market.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _market The address of the market to repay to.\\n     * @param _amount The amount of assets to repay.\\n     */\\n    function repay(uint96 _subId, address _market, uint256 _amount) external;\\n\\n    /**\\n     * @dev Initiates a liquidation process to recover assets from an under-collateralized account.\\n     * @param _params The liquidation parameters.\\n     * @return seizedShares The amount of shares seized from the liquidated account.\\n     */\\n    function liquidate(\\n        LiquidationParams calldata _params\\n    ) external returns (uint256[] memory seizedShares);\\n\\n    /**\\n     * @dev Distributes loss incurred in a market to a specified tranche of accounts.\\n     * @param _market The address of the market where the loss occurred.\\n     * @param _account The account identifier to record the loss.\\n     */\\n    function socializeLoss(address _market, bytes32 _account) external;\\n\\n    /**\\n     * @dev Retrieves the borrow tier of an account.\\n     * @param _account The account info struct containing the account's details.\\n     * @return The borrowing tier of the account.\\n     */\\n    function getAccountBorrowTier(AccountInfo memory _account) external view returns (uint8);\\n\\n    /**\\n     * @dev Retrieves the market addresses associated with an account.\\n     * @param _accountId The identifier of the account.\\n     * @param _account The account info struct containing the account's details.\\n     * @return A list of market addresses associated with the account.\\n     */\\n    function getAccountPoolMarkets(bytes32 _accountId, AccountInfo memory _account)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @dev Retrieves the liquidation bonus and soft threshold values for a market.\\n     * @param _depositAdjValue The adjusted value of deposits in the market.\\n     * @param _borrowAdjValue The adjusted value of borrows in the market.\\n     * @param _collateralMarket The address of the collateral market.\\n     * @return bonus The liquidation bonus value.\\n     * @return softThreshold The soft liquidation threshold value.\\n     */\\n    function getLiquidationBonusAndThreshold(\\n        uint256 _depositAdjValue,\\n        uint256 _borrowAdjValue,\\n        address _collateralMarket\\n    ) external view returns (uint256 bonus, uint256 softThreshold);\\n\\n    /**\\n     * @dev Checks if an account is healthy based on its financial metrics.\\n     * @param _accountId The identifier of the account.\\n     * @return A boolean indicating whether the account is healthy.\\n     */\\n    function isAccountHealthy(bytes32 _accountId) external returns (bool);\\n\\n    /**\\n     * @dev Resets the pause tranche to its initial state.\\n     */\\n    function resetPauseTranche() external;\\n\\n    /**\\n     * @dev Updates the market configuration.\\n     * @param _market The address of the market.\\n     * @param _marketConfig The market configuration data.\\n     */\\n    function setMarketConfiguration(address _market, MarketConfiguration calldata _marketConfig) external;\\n\\n    /**\\n     * @dev Updates mode configurations one at a time.\\n     * @param _modeConfiguration An single mode configuration.\\n     */\\n    function setModeConfiguration(ModeConfiguration calldata _modeConfiguration) external;\\n\\n    /**\\n     * @dev Updates the soft liquidation threshold for an account.\\n     * @param _accountId The account identifier.\\n     * @param _softThreshold The soft liquidation threshold value.\\n     */\\n    function setAccountSoftLiquidation(bytes32 _accountId, uint32 _softThreshold) external;\\n\\n    /**\\n     * @dev Updates the liquidation bonus configuration for a market.\\n     * @param _market The address of the market.\\n     * @param _config The liquidation bonus configuration data.\\n     */\\n    function setLiquidationBonusConfiguration(address _market, LiquidationBonusConfiguration calldata _config) external;\\n\\n    /**\\n     * @notice Sets the tranche count for a specific market.\\n     * @dev This function allows to set the number of tranches for a given market.\\n     * It's an external function that can only be called by an account with the `MARKET_CONFIGURATOR_ROLE`.\\n     * @param _market The address of the market contract.\\n     * @param _trancheCount The number of tranches to be set for the market.\\n     */\\n    function setTrancheCount(address _market, uint8 _trancheCount) external;\\n\\n    /**\\n     * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * It invokes the setTrancheBorrowCaps function of the IOmniToken contract associated with the specified market.\\n     * @param _market The address of the market for which to set the borrow caps.\\n     * @param _borrowCaps An array of borrow cap values, one for each tranche of the market.\\n     */\\n    function setBorrowCap(address _market, uint256[] calldata _borrowCaps) external;\\n\\n    /**\\n     * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * It invokes the setSupplyCap function of the IOmniTokenNoBorrow contract associated with the specified market.\\n     * @param _market The address of the market for which to set the no-borrow supply cap.\\n     * @param _noBorrowSupplyCap The value of the no-borrow supply cap to set.\\n     */\\n    function setNoBorrowSupplyCap(address _market, uint256 _noBorrowSupplyCap) external;\\n\\n    /**\\n     * @notice Sets the reserve receiver's address. This function can only be called by an account with the DEFAULT_ADMIN_ROLE.\\n     * @dev The reserve receiver's address is converted to a bytes32 account identifier using the toAccount function with a subId of 0.\\n     * @param _reserveReceiver The address of the reserve receiver to be set.\\n     */\\n    function setReserveReceiver(address _reserveReceiver) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IOmniTokenBase.sol\\\";\\n\\n/**\\n * @title IOmniToken\\n * @notice Interface for the OmniToken contract which manages deposits, withdrawals, borrowings, and repayments within the Omni protocol.\\n */\\ninterface IOmniToken is IOmniTokenBase {\\n    /// Events\\n    event Accrue();\\n    event Deposit(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Withdraw(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Borrow(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Repay(bytes32 indexed account, address indexed payer, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Seize(bytes32 indexed account, bytes32 indexed to, uint256 amount, uint256[] seizedShares);\\n    event SetTrancheCount(uint8 trancheCount);\\n    event SetTrancheBorrowCaps(uint256[] borrowCaps);\\n    event SocializedLoss(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Transfer(bytes32 indexed from, bytes32 indexed to, uint8 indexed trancheId, uint256 share);\\n\\n    /**\\n     * @notice Gets the address of the OmniPool contract.\\n     * @return The address of the OmniPool contract.\\n     */\\n    function omniPool() external view returns (address);\\n\\n    /**\\n     * @notice Gets the address of the Interest Rate Model (IRM) contract.\\n     * @return The address of the IRM contract.\\n     */\\n    function irm() external view returns (address);\\n\\n    /**\\n     * @notice Gets the last accrual time.\\n     * @return The timestamp of the last accrual time.\\n     */\\n    function lastAccrualTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the count of tranches.\\n     * @return The total number of tranches.\\n     */\\n    function trancheCount() external view returns (uint8);\\n\\n    /**\\n     * @notice Gets the reserve receiver.\\n     * @return The bytes32 identifier of the reserve receiver.\\n     */\\n    function reserveReceiver() external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the borrow cap for a specific tranche.\\n     * @param _trancheId The ID of the tranche for which to retrieve the borrow cap.\\n     * @return The borrow cap for the specified tranche.\\n     */\\n    function getBorrowCap(uint8 _trancheId) external view returns (uint256);\\n\\n    /**\\n     * @notice Accrues interest for all tranches, calculates and distributes the interest among the depositors and updates tranche balances.\\n     * The function also handles reserve payments. This method needs to be called before any deposit, withdrawal, borrow, or repayment actions to update the state of the contract.\\n     * @dev Interest is paid out proportionately to more risky tranche deposits per tranche\\n     */\\n    function accrue() external;\\n\\n    /**\\n     * @notice Deposits a specified amount into a specified tranche.\\n     * @param _subId Sub-account identifier for the depositor.\\n     * @param _trancheId Identifier of the tranche to deposit into.\\n     * @param _amount Amount to deposit.\\n     * @return share Amount of deposit shares received in exchange for the deposit.\\n     */\\n    function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount) external returns (uint256 share);\\n\\n    /**\\n     * @notice Withdraws funds from a specified tranche.\\n     * @param _subId The ID of the sub-account.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _share The share of the user in the tranche.\\n     * @return amount The amount of funds withdrawn.\\n     */\\n    function withdraw(uint96 _subId, uint8 _trancheId, uint256 _share) external returns (uint256 amount);\\n\\n    /**\\n     * @notice Borrows funds from a specified tranche.\\n     * @param _account The account of the user.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to borrow.\\n     * @return share The share of the borrowed amount in the tranche.\\n     */\\n    function borrow(bytes32 _account, uint8 _trancheId, uint256 _amount) external returns (uint256 share);\\n\\n    /**\\n     * @notice Repays borrowed funds.\\n     * @param _account The account of the user.\\n     * @param _payer The account that will pay the borrowed amount.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to repay.\\n     * @return amount The amount of the repaid amount in the tranche.\\n     */\\n    function repay(bytes32 _account, address _payer, uint8 _trancheId, uint256 _amount)\\n        external\\n        returns (uint256 amount);\\n\\n    /**\\n     * @notice Transfers specified shares from one account to another within a specified tranche.\\n     * @param _subId The subscription ID related to the sender's account.\\n     * @param _to The account identifier to which shares are being transferred.\\n     * @param _trancheId The identifier of the tranche where the transfer is occurring.\\n     * @param _shares The amount of shares to transfer.\\n     * @return A boolean value indicating whether the transfer was successful.\\n     */\\n    function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, uint256 _shares) external returns (bool);\\n\\n    /**\\n     * @notice Distributes the bad debt loss in a tranche among all tranche members. This function should only be called by the OmniPool.\\n     * @param _account The account that incurred a loss.\\n     * @param _trancheId The ID of the tranche.\\n     */\\n    function socializeLoss(bytes32 _account, uint8 _trancheId) external;\\n\\n    /**\\n     * @notice Computes the borrowing amount of a specific account in the underlying asset for a given borrow tier.\\n     * @dev The division is ceiling division.\\n     * @param _account The account identifier for which the borrowing amount is to be computed.\\n     * @param _borrowTier The borrow tier identifier from which the borrowing amount is to be computed.\\n     * @return The borrowing amount of the account in the underlying asset for the given borrow tier.\\n     */\\n    function getAccountBorrowInUnderlying(bytes32 _account, uint8 _borrowTier) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the deposit and borrow shares for a specific account in a specific tranche.\\n     * @param _account The account identifier.\\n     * @param _trancheId The tranche identifier.\\n     * @return depositShare The deposit share.\\n     * @return borrowShare The borrow share.\\n     */\\n    function getAccountSharesByTranche(bytes32 _account, uint8 _trancheId)\\n        external\\n        view\\n        returns (uint256 depositShare, uint256 borrowShare);\\n\\n    /**\\n     * @notice Sets the borrow caps for each tranche.\\n     * @param _borrowCaps An array of borrow caps in the underlying's decimals.\\n     */\\n    function setTrancheBorrowCaps(uint256[] calldata _borrowCaps) external;\\n\\n    /**\\n     * @notice Sets the number of tranches.\\n     * @param _trancheCount The new tranche count.\\n     */\\n    function setTrancheCount(uint8 _trancheCount) external;\\n\\n    /**\\n     * @notice Fetches and updates the reserve receiver from the OmniPool contract.\\n     */\\n    function fetchReserveReceiver() external;\\n}\\n\"\r\n    },\r\n    \"src/SubAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title SubAccount\\n * @notice This library provides utility functions to handle sub-accounts using bytes32 types, where id is most significant bytes.\\n */\\nlibrary SubAccount {\\n    /**\\n     * @notice Combines an address and a sub-account identifier into a bytes32 account representation.\\n     * @param _sender The address component.\\n     * @param _subId The sub-account identifier component.\\n     * @return A bytes32 representation of the account.\\n     */\\n    function toAccount(address _sender, uint96 _subId) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_sender)) | (uint256(_subId) << 160));\\n    }\\n\\n    /**\\n     * @notice Extracts the address component from a bytes32 account representation.\\n     * @param _account The bytes32 representation of the account.\\n     * @return The address component.\\n     */\\n    function toAddress(bytes32 _account) internal pure returns (address) {\\n        return address(uint160(uint256(_account)));\\n    }\\n\\n    /**\\n     * @notice Extracts the sub-account identifier component from a bytes32 account representation.\\n     * @param _account The bytes32 representation of the account.\\n     * @return The sub-account identifier component.\\n     */\\n    function toSubId(bytes32 _account) internal pure returns (uint96) {\\n        return uint96(uint256(_account) >> 160);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/WithUnderlying.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IWithUnderlying.sol\\\";\\n\\n/**\\n * @title WithUnderlying\\n * @notice A helper contract to handle the inflow and outflow of ERC20 tokens.\\n * @dev Utilizes OpenZeppelin's SafeERC20 library to handle ERC20 transactions.\\n */\\nabstract contract WithUnderlying is Initializable, IWithUnderlying {\\n    using SafeERC20 for IERC20;\\n\\n    address public underlying;\\n\\n    /**\\n     * @notice Initialies the abstract contract instance.\\n     * @param _underlying The address of the underlying ERC20 token.\\n     */\\n    function __WithUnderlying_init(address _underlying) internal onlyInitializing {\\n        underlying = _underlying;\\n    }\\n\\n    /**\\n     * @notice Retrieves the name of the token.\\n     * @return The name of the token, either prefixed from the underlying token or the default \\\"Omni Token\\\".\\n     */\\n    function name() external view returns (string memory) {\\n        try IERC20Metadata(underlying).name() returns (string memory data) {\\n            return string(abi.encodePacked(\\\"Omni \\\", data));\\n        } catch (bytes memory) {\\n            return \\\"Omni Token\\\";\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the symbol of the token.\\n     * @return The symbol of the token, either prefixed from the underlying token or the default \\\"oToken\\\".\\n     */\\n    function symbol() external view returns (string memory) {\\n        try IERC20Metadata(underlying).symbol() returns (string memory data) {\\n            return string(abi.encodePacked(\\\"o\\\", data));\\n        } catch (bytes memory) {\\n            return \\\"oToken\\\";\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the number of decimals the token uses.\\n     * @return The number of decimals of the token, either from the underlying token or the default 18.\\n     */\\n    function decimals() external view returns (uint8) {\\n        try IERC20Metadata(underlying).decimals() returns (uint8 data) {\\n            return data;\\n        } catch (bytes memory) {\\n            return 18;\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles the inflow of tokens to the contract.\\n     * @dev Transfers `_amount` tokens from `_from` to this contract and returns the actual amount received.\\n     * @param _from The address from which tokens are transferred.\\n     * @param _amount The amount of tokens to transfer.\\n     * @return The actual amount of tokens received by the contract.\\n     */\\n    function _inflowTokens(address _from, uint256 _amount) internal returns (uint256) {\\n        uint256 balanceBefore = IERC20(underlying).balanceOf(address(this));\\n        IERC20(underlying).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = IERC20(underlying).balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /**\\n     * @notice Handles the outflow of tokens from the contract.\\n     * @dev Transfers `_amount` tokens from this contract to `_to` and returns the actual amount sent.\\n     * @param _to The address to which tokens are transferred.\\n     * @param _amount The amount of tokens to transfer.\\n     * @return The actual amount of tokens sent from the contract.\\n     */\\n    function _outflowTokens(address _to, uint256 _amount) internal returns (uint256) {\\n        uint256 balanceBefore = IERC20(underlying).balanceOf(address(this));\\n        IERC20(underlying).safeTransfer(_to, _amount);\\n        uint256 balanceAfter = IERC20(underlying).balanceOf(address(this));\\n        return balanceBefore - balanceAfter;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title IOmniTokenBase\\n * @notice Base interface shared by the IOmniToken and IOmniTokenNoBorrow interfaces.\\n */\\ninterface IOmniTokenBase {\\n    /**\\n     * @notice Retrieves the total deposit amount for a specific account.\\n     * @param _account The account identifier.\\n     * @return The total deposit amount.\\n     */\\n    function getAccountDepositInUnderlying(bytes32 _account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the total deposited amount for a specific owner across sub-accounts. This funciton is for wallets and Etherscan to pick up balances.\\n     * @param _owner The address of the owner.\\n     * @return The total deposited amount.\\n     */\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Seizes funds from a user's account in the event of a liquidation. This is a priveleged function only callable by the OmniPool and must be implemented carefully.\\n     * @param _account The account from which funds will be seized.\\n     * @param _to The account to which seized funds will be sent.\\n     * @param _amount The amount of funds to seize.\\n     * @return The shares seized from each tranche.\\n     */\\n    function seize(bytes32 _account, bytes32 _to, uint256 _amount) external returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWithUnderlying.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWithUnderlying\\n * @notice Interface for the WithUnderlying contract to handle the inflow and outflow of ERC20 tokens.\\n */\\ninterface IWithUnderlying {\\n    /**\\n     * @notice Gets the address of the underlying ERC20 token.\\n     * @return The address of the underlying ERC20 token.\\n     */\\n    function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"seizedShares\",\"type\":\"uint256[]\"}],\"name\":\"Seize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"SetTrancheBorrowCaps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"trancheCount\",\"type\":\"uint8\"}],\"name\":\"SetTrancheCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"SocializedLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IRM_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchReserveReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_borrowTier\",\"type\":\"uint8\"}],\"name\":\"getAccountBorrowInUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"}],\"name\":\"getAccountDepositInUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"}],\"name\":\"getAccountSharesByTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"}],\"name\":\"getBorrowCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_omniPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_irm\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_borrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"irm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omniPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveReceiver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_borrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"setTrancheBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_trancheCount\",\"type\":\"uint8\"}],\"name\":\"setTrancheCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"}],\"name\":\"socializeLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheBorrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"_to\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OmniToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}