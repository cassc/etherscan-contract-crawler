{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ThreadInu2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\n\\r\\n\\r\\ncontract Threadinu2 is ERC20, Ownable {\\r\\n    // Info? are you sure?\\r\\n    uint256 private ReflactionaryTotal;\\r\\n\\r\\n    // Routing to nowhere\\r\\n    IUniswapV2Router02 public UniswapV2Router;\\r\\n\\r\\n    // Important addresses\\r\\n    address payable private DevAddress =\\r\\n        payable(0x78D1053915Ba56D6c095B90262D1d38Ec77C5f84);\\r\\n    address payable private MarketingAddress =\\r\\n        payable(0x78D1053915Ba56D6c095B90262D1d38Ec77C5f84);\\r\\n\\r\\n    uint256 public HardCap;\\r\\n    uint256 public HardCapBuy;\\r\\n    uint256 public HardCapSell;\\r\\n\\r\\n    uint256 private LiquidityThreshold;\\r\\n\\r\\n    mapping(address => uint256) private BalancesRefraccionarios;\\r\\n    mapping(address => uint256) private BalancesReales;\\r\\n    mapping(address => bool) public Bots;\\r\\n\\r\\n    mapping(address => bool) public WalletsExcludedFromFee;\\r\\n    mapping(address => bool) public WalletsExcludedFromHardCap;\\r\\n    mapping(address => bool) public AutomatedMarketMakerPairs;\\r\\n\\r\\n    uint256 public TotalFee;\\r\\n    uint256 public TotalSwapped;\\r\\n    uint256 public TotalTokenBurn;\\r\\n\\r\\n    bool private AreWeLive = false;\\r\\n\\r\\n    bool private InSwap = false;\\r\\n    bool private SwapEnabled = true;\\r\\n    bool private AutoLiquidity = true;\\r\\n\\r\\n    // Tax rates\\r\\n    struct TaxRates {\\r\\n        uint256 BurnTax;\\r\\n        uint256 LiquidityTax;\\r\\n        uint256 MarketingTax;\\r\\n        uint256 DevelopmentTax;\\r\\n        uint256 RewardTax;\\r\\n    }\\r\\n\\r\\n    // Fees, which are amounts calculated based on tax\\r\\n    struct TransactionFees {\\r\\n        uint256 TransactionFee;\\r\\n        uint256 BurnFee;\\r\\n        uint256 DevFee;\\r\\n        uint256 MarketingFee;\\r\\n        uint256 LiquidityFee;\\r\\n        uint256 TransferrableFee;\\r\\n        uint256 TotalFee;\\r\\n    }\\r\\n\\r\\n    TaxRates public BuyingTaxes =\\r\\n        TaxRates({\\r\\n            RewardTax: 0,\\r\\n            BurnTax: 0,\\r\\n            DevelopmentTax: 0,\\r\\n            MarketingTax: 1,\\r\\n            LiquidityTax: 0\\r\\n        });\\r\\n\\r\\n    TaxRates public SellTaxes =\\r\\n        TaxRates({\\r\\n            RewardTax: 0,\\r\\n            BurnTax: 0,\\r\\n            DevelopmentTax: 0,\\r\\n            MarketingTax: 1,\\r\\n            LiquidityTax: 0\\r\\n        });\\r\\n\\r\\n    TaxRates public AppliedRatesPercentage = BuyingTaxes;\\r\\n\\r\\n    TransactionFees private AccumulatedFeeForDistribution =\\r\\n        TransactionFees({\\r\\n            DevFee: 0,\\r\\n            MarketingFee: 0,\\r\\n            LiquidityFee: 0,\\r\\n            BurnFee: 0,\\r\\n            TransferrableFee: 0,\\r\\n            TotalFee: 0,\\r\\n            TransactionFee: 0\\r\\n        });\\r\\n\\r\\n    // Events\\r\\n    event setDevAddress(address indexed previous, address indexed adr);\\r\\n    event setMktAddress(address indexed previous, address indexed adr);\\r\\n    event LiquidityAdded(uint256 tokenAmount, uint256 ETHAmount);\\r\\n    event TreasuryAndDevFeesAdded(uint256 devFee, uint256 treasuryFee);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    event BlacklistedUser(address botAddress, bool indexed value);\\r\\n    event MaxWalletAmountUpdated(uint256 amount);\\r\\n    event ExcludeFromMaxWallet(address account, bool indexed isExcluded);\\r\\n    event SwapAndLiquifyEnabledUpdated(bool _enabled);\\r\\n\\r\\n    constructor(\\r\\n        address swap,\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) ERC20(name, symbol) {\\r\\n        UniswapV2Router = IUniswapV2Router02(swap);\\r\\n\\r\\n        address PancakeSwapAddress = IUniswapV2Factory(\\r\\n            UniswapV2Router.factory()\\r\\n        ).createPair(address(this), UniswapV2Router.WETH());\\r\\n\\r\\n        AutomatedMarketMakerPairs[PancakeSwapAddress] = true;\\r\\n\\r\\n        WalletsExcludedFromFee[address(this)] = true;\\r\\n        WalletsExcludedFromFee[DevAddress] = true;\\r\\n        WalletsExcludedFromFee[MarketingAddress] = true;\\r\\n        WalletsExcludedFromFee[swap] = true;\\r\\n        WalletsExcludedFromFee[msg.sender] = true;\\r\\n        WalletsExcludedFromFee[\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n        ] = true;\\r\\n\\r\\n        WalletsExcludedFromHardCap[address(this)] = true;\\r\\n        WalletsExcludedFromHardCap[DevAddress] = true;\\r\\n        WalletsExcludedFromHardCap[MarketingAddress] = true;\\r\\n        WalletsExcludedFromHardCap[PancakeSwapAddress] = true;\\r\\n        WalletsExcludedFromHardCap[swap] = true;\\r\\n        WalletsExcludedFromHardCap[\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n        ] = true;\\r\\n        WalletsExcludedFromHardCap[msg.sender] = true;\\r\\n\\r\\n        // Minting total supply\\r\\n        _mint(msg.sender, 100_000_000*10**18);\\r\\n        // Approving swap for LP\\r\\n        _approve(address(this), address(UniswapV2Router), ~uint256(0));\\r\\n\\r\\n        ReflactionaryTotal = (~uint256(0) - (~uint256(0) % totalSupply()));\\r\\n        BalancesRefraccionarios[msg.sender] = ReflactionaryTotal;\\r\\n\\r\\n        HardCap = totalSupply();\\r\\n        HardCapSell = totalSupply();\\r\\n        HardCapBuy =  totalSupply();\\r\\n        LiquidityThreshold = (totalSupply() * 5) / 10_000;\\r\\n    }\\r\\n\\r\\n    function ChangeTaxes(TaxRates memory newTaxes, bool buying)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (buying) {\\r\\n            BuyingTaxes = newTaxes;\\r\\n            return;\\r\\n        }\\r\\n        SellTaxes = newTaxes;\\r\\n    }\\r\\n\\r\\n    function SetAutoLiquidity(bool newFlag) public {\\r\\n        require(\\r\\n            msg.sender == DevAddress || msg.sender == owner(),\\r\\n            \\\"Only developers can change this flag\\\"\\r\\n        );\\r\\n        AutoLiquidity = newFlag;\\r\\n    }\\r\\n\\r\\n    function swapTokensForETH(uint256 tokenAmount) private {\\r\\n        // generate the pair path of token\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = UniswapV2Router.WETH();\\r\\n\\r\\n        // make the swap\\r\\n        UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw() public {\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        bool success;\\r\\n        (success, ) = address(DevAddress).call{value: ethBalance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function WeAreLive() public onlyOwner {\\r\\n        AreWeLive = true;\\r\\n    }\\r\\n\\r\\n    function ChangeExcludeFromFeeToForWallet(address add, bool isExcluded)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        WalletsExcludedFromFee[add] = isExcluded;\\r\\n    }\\r\\n\\r\\n    function ChangeDevAddress(address payable newDevAddress) public onlyOwner {\\r\\n        address oldAddress = DevAddress;\\r\\n        emit setDevAddress(oldAddress, newDevAddress);\\r\\n        ChangeExcludeFromFeeToForWallet(DevAddress, false);\\r\\n        DevAddress = newDevAddress;\\r\\n        ChangeExcludeFromFeeToForWallet(DevAddress, true);\\r\\n    }\\r\\n\\r\\n    function ChangeMarketingAddress(address payable marketingAddress)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        address oldAddress = MarketingAddress;\\r\\n        emit setMktAddress(oldAddress, marketingAddress);\\r\\n        ChangeExcludeFromFeeToForWallet(MarketingAddress, false);\\r\\n        MarketingAddress = marketingAddress;\\r\\n        ChangeExcludeFromFeeToForWallet(MarketingAddress, true);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return tokenFromReflection(BalancesRefraccionarios[account]);\\r\\n    }\\r\\n\\r\\n    function MarkBot(address targetAddress, bool isBot) public onlyOwner {\\r\\n        Bots[targetAddress] = isBot;\\r\\n        emit BlacklistedUser(targetAddress, isBot);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(!Bots[sender], \\\"ERC20: address blacklisted (bot)\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(\\r\\n            amount <= balanceOf(sender),\\r\\n            \\\"You are trying to transfer more than your balance\\\"\\r\\n        );\\r\\n\\r\\n        bool takeFee = !(WalletsExcludedFromFee[sender] || WalletsExcludedFromFee[recipient]);\\r\\n\\r\\n        if (takeFee) {\\r\\n\\r\\n            if (AutomatedMarketMakerPairs[sender]) {\\r\\n                // Not so fast ma boi\\r\\n                if (!AreWeLive) {\\r\\n                    Bots[recipient] = true;\\r\\n                }\\r\\n\\r\\n                AppliedRatesPercentage = BuyingTaxes;\\r\\n                require(\\r\\n                    amount <= HardCapBuy,\\r\\n                    \\\"amount must be <= maxTxAmountBuy\\\"\\r\\n                );\\r\\n            } else {\\r\\n                AppliedRatesPercentage = SellTaxes;\\r\\n                require(\\r\\n                    amount <= HardCapSell,\\r\\n                    \\\"amount must be <= maxTxAmountSell\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            !InSwap &&\\r\\n            !AutomatedMarketMakerPairs[sender] &&\\r\\n            SwapEnabled &&\\r\\n            sender != owner() &&\\r\\n            recipient != owner() &&\\r\\n            sender != address(UniswapV2Router) &&\\r\\n            balanceOf(address(this)) >= LiquidityThreshold\\r\\n        ) {\\r\\n            InSwap = true;\\r\\n            SwapAccumulatedFees();\\r\\n            InSwap = false;\\r\\n        }\\r\\n\\r\\n        _tokenTransfer(sender, recipient, amount, takeFee);\\r\\n    }\\r\\n\\r\\n    // This method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 cantidadBruta,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        TransactionFees memory feesReales;\\r\\n        TransactionFees memory feesRefracionarios;\\r\\n        (feesReales, feesRefracionarios) = CalcularTasasRealesYRefracionarias(\\r\\n            cantidadBruta,\\r\\n            takeFee\\r\\n        );\\r\\n\\r\\n        uint256 cantidadNeta = cantidadBruta - feesReales.TotalFee;\\r\\n        uint256 cantidadBrutaRefracionaria = cantidadBruta *\\r\\n            GetConversionRate();\\r\\n        uint256 cantidadNetaRefracionaria = cantidadBrutaRefracionaria -\\r\\n            feesRefracionarios.TotalFee;\\r\\n\\r\\n        // Comprobando que el receptor de la transferencia no supere el hard cap de tokens\\r\\n        require(\\r\\n            WalletsExcludedFromHardCap[recipient] ||\\r\\n                (balanceOf(recipient) + cantidadNeta) <= HardCap,\\r\\n            \\\"Recipient cannot hold more than maxWalletAmount\\\"\\r\\n        );\\r\\n\\r\\n        BalancesRefraccionarios[sender] -= cantidadBrutaRefracionaria;\\r\\n        BalancesRefraccionarios[recipient] += cantidadNetaRefracionaria;\\r\\n\\r\\n        if (takeFee) {\\r\\n            ReflactionaryTotal -= feesRefracionarios.TransactionFee;\\r\\n            TotalFee += feesReales.TransactionFee;\\r\\n\\r\\n            AccumulateFee(feesReales, feesRefracionarios);\\r\\n\\r\\n            if (AppliedRatesPercentage.BurnTax > 0) {\\r\\n                TotalTokenBurn += feesReales.BurnFee;\\r\\n                BalancesRefraccionarios[address(0)] += feesRefracionarios\\r\\n                    .BurnFee;\\r\\n                emit Transfer(address(this), address(0), feesReales.BurnFee);\\r\\n            }\\r\\n\\r\\n            emit Transfer(sender, address(this), feesReales.TransferrableFee);\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, cantidadNeta);\\r\\n    }\\r\\n\\r\\n    function CalcularTasasRealesYRefracionarias(\\r\\n        uint256 grossAmount,\\r\\n        bool takeFee\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            TransactionFees memory realFees,\\r\\n            TransactionFees memory refFees\\r\\n        )\\r\\n    {\\r\\n        if (takeFee) {\\r\\n            uint256 currentRate = GetConversionRate();\\r\\n\\r\\n            realFees.TransactionFee =\\r\\n                (grossAmount * AppliedRatesPercentage.RewardTax) /\\r\\n                100;\\r\\n            realFees.BurnFee =\\r\\n                (grossAmount * AppliedRatesPercentage.BurnTax) /\\r\\n                100;\\r\\n            realFees.DevFee =\\r\\n                (grossAmount * AppliedRatesPercentage.DevelopmentTax) /\\r\\n                100;\\r\\n            realFees.MarketingFee =\\r\\n                (grossAmount * AppliedRatesPercentage.MarketingTax) /\\r\\n                100;\\r\\n            realFees.LiquidityFee =\\r\\n                (grossAmount * AppliedRatesPercentage.LiquidityTax) /\\r\\n                100;\\r\\n\\r\\n            realFees.TransferrableFee =\\r\\n                realFees.DevFee +\\r\\n                realFees.MarketingFee +\\r\\n                realFees.LiquidityFee;\\r\\n            realFees.TotalFee =\\r\\n                realFees.TransactionFee +\\r\\n                realFees.BurnFee +\\r\\n                realFees.TransferrableFee;\\r\\n\\r\\n            refFees.TransactionFee = realFees.TransactionFee * currentRate;\\r\\n            refFees.BurnFee = realFees.BurnFee * currentRate;\\r\\n            refFees.DevFee = realFees.DevFee * currentRate;\\r\\n            refFees.MarketingFee = realFees.MarketingFee * currentRate;\\r\\n            refFees.LiquidityFee = realFees.LiquidityFee * currentRate;\\r\\n\\r\\n            refFees.TotalFee = realFees.TotalFee * currentRate;\\r\\n            refFees.TransferrableFee = realFees.TransferrableFee * currentRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function AccumulateFee(\\r\\n        TransactionFees memory realFees,\\r\\n        TransactionFees memory refractionaryFees\\r\\n    ) private {\\r\\n        BalancesRefraccionarios[address(this)] += refractionaryFees\\r\\n            .TransferrableFee;\\r\\n        AccumulatedFeeForDistribution.LiquidityFee += realFees.LiquidityFee;\\r\\n        AccumulatedFeeForDistribution.DevFee += realFees.DevFee;\\r\\n        AccumulatedFeeForDistribution.MarketingFee += realFees.MarketingFee;\\r\\n    }\\r\\n\\r\\n    function SwapPct(uint256 pct) public {\\r\\n        uint256 balance = (balanceOf(address(this)) * pct) / 100;\\r\\n        if (balance > 0) {\\r\\n            SwapTokens(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function SwapTokens(uint256 tokensToSwap) internal {\\r\\n        uint256 totalTokensToSwap = AccumulatedFeeForDistribution.DevFee +\\r\\n            AccumulatedFeeForDistribution.MarketingFee +\\r\\n            AccumulatedFeeForDistribution.LiquidityFee;\\r\\n\\r\\n        bool success;\\r\\n\\r\\n        uint256 liquidityTokens = (tokensToSwap *\\r\\n            AccumulatedFeeForDistribution.LiquidityFee) /\\r\\n            totalTokensToSwap /\\r\\n            2;\\r\\n        uint256 amountToSwapForETH = tokensToSwap - (liquidityTokens);\\r\\n        uint256 initialETHBalance = address(this).balance;\\r\\n        swapTokensForETH(amountToSwapForETH);\\r\\n\\r\\n        uint256 ethBalance = address(this).balance - (initialETHBalance);\\r\\n\\r\\n        uint256 ethForMarketing = (ethBalance *\\r\\n            (AccumulatedFeeForDistribution.MarketingFee)) / (totalTokensToSwap);\\r\\n        uint256 ethForDev = (ethBalance *\\r\\n            (AccumulatedFeeForDistribution.DevFee)) / (totalTokensToSwap);\\r\\n\\r\\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\\r\\n\\r\\n        TotalSwapped += AccumulatedFeeForDistribution.LiquidityFee;\\r\\n        AccumulatedFeeForDistribution.LiquidityFee = 0;\\r\\n        AccumulatedFeeForDistribution.DevFee = 0;\\r\\n        AccumulatedFeeForDistribution.MarketingFee = 0;\\r\\n\\r\\n        (success, ) = address(DevAddress).call{value: ethForDev}(\\\"\\\");\\r\\n\\r\\n        if (\\r\\n            liquidityTokens > 0 && ethForLiquidity > 0 && AutoLiquidity == true\\r\\n        ) {\\r\\n            UniswapV2Router.addLiquidityETH{value: ethForLiquidity}(\\r\\n                address(this),\\r\\n                liquidityTokens,\\r\\n                0, // slippage is unavoidable\\r\\n                0, // slippage is unavoidable\\r\\n                DevAddress,\\r\\n                block.timestamp\\r\\n            );\\r\\n            emit LiquidityAdded(liquidityTokens, ethForLiquidity);\\r\\n        }\\r\\n\\r\\n        (success, ) = address(MarketingAddress).call{value: ethForMarketing}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function SwapAccumulatedFees() private {\\r\\n        uint256 tokensToSwap = balanceOf(address(this));\\r\\n        if (tokensToSwap > LiquidityThreshold) {\\r\\n            if (tokensToSwap > LiquidityThreshold * 20) {\\r\\n                tokensToSwap = LiquidityThreshold * 20;\\r\\n            }\\r\\n            SwapTokens(balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 reflactionaryAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            reflactionaryAmount <= ReflactionaryTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        return reflactionaryAmount / GetConversionRate();\\r\\n    }\\r\\n\\r\\n    function GetConversionRate() private view returns (uint256) {\\r\\n        return ReflactionaryTotal / totalSupply();\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        SwapEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"BlacklistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"name\":\"TreasuryAndDevFeesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setMktAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AppliedRatesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BurnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DevelopmentTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AutomatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyingTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BurnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DevelopmentTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"ChangeDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ChangeExcludeFromFeeToForWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"ChangeMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"BurnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DevelopmentTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardTax\",\"type\":\"uint256\"}],\"internalType\":\"struct Threadinu2.TaxRates\",\"name\":\"newTaxes\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"buying\",\"type\":\"bool\"}],\"name\":\"ChangeTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HardCapBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HardCapSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBot\",\"type\":\"bool\"}],\"name\":\"MarkBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BurnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DevelopmentTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newFlag\",\"type\":\"bool\"}],\"name\":\"SetAutoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"SwapPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalSwapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalTokenBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WalletsExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WalletsExcludedFromHardCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WeAreLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflactionaryAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Threadinu2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000f5468726561647320496e7520322e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000554494e5532000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}