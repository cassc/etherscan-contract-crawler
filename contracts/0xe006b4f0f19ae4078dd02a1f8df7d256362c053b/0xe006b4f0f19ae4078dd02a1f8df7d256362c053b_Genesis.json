{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/ERC721Helpers/ERC721Full.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol';\\n\\nimport './ERC721Ownable.sol';\\nimport './ERC721WithRoyalties.sol';\\n\\n/// @title ERC721Full\\n/// @dev This contains all the different overrides needed on\\n///      ERC721 / Enumerable / URIStorage / Royalties\\n/// @author Simon Fremaux (@dievardump)\\nabstract contract ERC721Full is\\n    ERC721Ownable,\\n    ERC721Burnable,\\n    ERC721WithRoyalties\\n{\\n    /// @inheritdoc\\tERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Enumerable, ERC721, ERC721WithRoyalties)\\n        returns (bool)\\n    {\\n        return\\n            // either ERC721Enumerable\\n            ERC721Enumerable.supportsInterface(interfaceId) ||\\n            // or Royalties\\n            ERC721WithRoyalties.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc\\tERC721\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc\\tERC721Ownable\\n    function isApprovedForAll(address owner_, address operator)\\n        public\\n        view\\n        override(ERC721, ERC721Ownable)\\n        returns (bool)\\n    {\\n        return ERC721Ownable.isApprovedForAll(owner_, operator);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/ERC721Helpers/ERC721Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\n\\nimport '../OpenSea/BaseOpenSea.sol';\\n\\n/// @title ERC721Ownable\\n/// @author Simon Fremaux (@dievardump)\\ncontract ERC721Ownable is Ownable, ERC721Enumerable, BaseOpenSea {\\n    /// @notice constructor\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param openseaProxyRegistry_ OpenSea's proxy registry to allow gas-less listings - can be address(0)\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        address openseaProxyRegistry_\\n    ) ERC721(name_, symbol_) {\\n        // set contract uri if present\\n        if (bytes(contractURI_).length > 0) {\\n            _setContractURI(contractURI_);\\n        }\\n\\n        // set OpenSea proxyRegistry for gas-less trading if present\\n        if (address(0) != openseaProxyRegistry_) {\\n            _setOpenSeaRegistry(openseaProxyRegistry_);\\n        }\\n    }\\n\\n    /// @notice Allows gas-less trading on OpenSea by safelisting the Proxy of the user\\n    /// @dev Override isApprovedForAll to check first if current operator is owner's OpenSea proxy\\n    /// @inheritdoc\\tERC721\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        // allows gas less trading on OpenSea\\n        if (isOwnersOpenSeaProxy(owner, operator)) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external onlyOwner {\\n        _setContractURI(contractURI_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/ERC721Helpers/ERC721WithRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../Royalties/ERC2981/IERC2981Royalties.sol';\\nimport '../Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol';\\n\\n/// @dev This is a contract used for royalties on various platforms\\n/// @author Simon Fremaux (@dievardump)\\ncontract ERC721WithRoyalties is IERC2981Royalties, IRaribleSecondarySales {\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981Royalties).interfaceId ||\\n            interfaceId == type(IRaribleSecondarySales).interfaceId;\\n    }\\n\\n    /// @inheritdoc\\tIERC2981Royalties\\n    function royaltyInfo(uint256, uint256)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address _receiver, uint256 _royaltyAmount)\\n    {\\n        _receiver = address(this);\\n        _royaltyAmount = 0;\\n    }\\n\\n    /// @inheritdoc\\tIRaribleSecondarySales\\n    function getFeeRecipients(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address payable[] memory recipients)\\n    {\\n        // using ERC2981 implementation to get the recipient & amount\\n        (address recipient, uint256 amount) = royaltyInfo(tokenId, 10000);\\n        if (amount != 0) {\\n            recipients = new address payable[](1);\\n            recipients[0] = payable(recipient);\\n        }\\n    }\\n\\n    /// @inheritdoc\\tIRaribleSecondarySales\\n    function getFeeBps(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory fees)\\n    {\\n        // using ERC2981 implementation to get the amount\\n        (, uint256 amount) = royaltyInfo(tokenId, 10000);\\n        if (amount != 0) {\\n            fees = new uint256[](1);\\n            fees[0] = amount;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/OpenSea/BaseOpenSea.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title OpenSea contract helper that defines a few things\\n/// @author Simon Fremaux (@dievardump)\\n/// @dev This is a contract used to add OpenSea's support\\ncontract BaseOpenSea {\\n    string private _contractURI;\\n    ProxyRegistry private _proxyRegistry;\\n\\n    /// @notice Returns the contract URI function. Used on OpenSea to get details\\n    //          about a contract (owner, royalties etc...)\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /// @notice Helper for OpenSea gas-less trading\\n    /// @dev Allows to check if `operator` is owner's OpenSea proxy\\n    /// @param owner the owner we check for\\n    /// @param operator the operator (proxy) we check for\\n    function isOwnersOpenSeaProxy(address owner, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        ProxyRegistry proxyRegistry = _proxyRegistry;\\n        return\\n            // we have a proxy registry address\\n            address(proxyRegistry) != address(0) &&\\n            // current operator is owner's proxy address\\n            address(proxyRegistry.proxies(owner)) == operator;\\n    }\\n\\n    /// @dev Internal function to set the _contractURI\\n    /// @param contractURI_ the new contract uri\\n    function _setContractURI(string memory contractURI_) internal {\\n        _contractURI = contractURI_;\\n    }\\n\\n    /// @dev Internal function to set the _proxyRegistry\\n    /// @param proxyRegistryAddress the new proxy registry address\\n    function _setOpenSeaRegistry(address proxyRegistryAddress) internal {\\n        _proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/Royalties/ERC2981/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRaribleSecondarySales {\\n    /// @notice returns a list of royalties recipients\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients for tokenId\\n    function getFeeRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory);\\n\\n    /// @notice returns a list of royalties amounts\\n    /// @param tokenId the token Id to check for\\n    /// @return all the amounts for tokenId\\n    function getFeeBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Randomize.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// small library to randomize using (min, max, seed, offsetBit etc...)\\nlibrary Randomize {\\n    struct Random {\\n        uint256 seed;\\n        uint256 offsetBit;\\n    }\\n\\n    /// @notice get an random number between (min and max) using seed and offseting bits\\n    ///         this function assumes that max is never bigger than 0xffffff (hex color with opacity included)\\n    /// @dev this function is simply used to get random number using a seed.\\n    ///      if does bitshifting operations to try to reuse the same seed as much as possible.\\n    ///      should be enough for anyth\\n    /// @param random the randomizer\\n    /// @param min the minimum\\n    /// @param max the maximum\\n    /// @return result the resulting pseudo random number\\n    function next(\\n        Random memory random,\\n        uint256 min,\\n        uint256 max\\n    ) internal pure returns (uint256 result) {\\n        uint256 newSeed = random.seed;\\n        uint256 newOffset = random.offsetBit + 3;\\n\\n        uint256 maxOffset = 4;\\n        uint256 mask = 0xf;\\n        if (max > 0xfffff) {\\n            mask = 0xffffff;\\n            maxOffset = 24;\\n        } else if (max > 0xffff) {\\n            mask = 0xfffff;\\n            maxOffset = 20;\\n        } else if (max > 0xfff) {\\n            mask = 0xffff;\\n            maxOffset = 16;\\n        } else if (max > 0xff) {\\n            mask = 0xfff;\\n            maxOffset = 12;\\n        } else if (max > 0xf) {\\n            mask = 0xff;\\n            maxOffset = 8;\\n        }\\n\\n        // if offsetBit is too high to get the max number\\n        // just get new seed and restart offset to 0\\n        if (newOffset > (256 - maxOffset)) {\\n            newOffset = 0;\\n            newSeed = uint256(keccak256(abi.encode(newSeed)));\\n        }\\n\\n        uint256 offseted = (newSeed >> newOffset);\\n        uint256 part = offseted & mask;\\n        result = min + (part % (max - min));\\n\\n        random.seed = newSeed;\\n        random.offsetBit = newOffset;\\n    }\\n\\n    function nextInt(\\n        Random memory random,\\n        uint256 min,\\n        uint256 max\\n    ) internal pure returns (int256 result) {\\n        result = int256(Randomize.next(random, min, max));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Variety/IVariety.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title IVariety interface\\n/// @author Simon Fremaux (@dievardump)\\ninterface IVariety is IERC721 {\\n    /// @notice mint `seeds.length` token(s) to `to` using `seeds`\\n    /// @param to token recipient\\n    /// @param seeds each token seed\\n    function plant(address to, bytes32[] memory seeds)\\n        external\\n        returns (uint256);\\n\\n    /// @notice this function returns the seed associated to a tokenId\\n    /// @param tokenId to get the seed of\\n    function getTokenSeed(uint256 tokenId) external view returns (bytes32);\\n\\n    /// @notice This function allows an owner to ask for a seed update\\n    ///         this can be needed because although I test the contract as much as possible,\\n    ///         it might be possible that one token does not render because the seed creates\\n    ///         error or even \\\"out of gas\\\" computation. That's why this would allow an owner\\n    ///         in such case, to request for a seed change that will then be triggered by Sower\\n    /// @param tokenId id to regenerate seed for\\n    function requestSeedChange(uint256 tokenId) external;\\n\\n    /// @notice This function allows Sower to answer to a seed change request\\n    ///         in the event where a seed would produce errors of rendering\\n    ///         1) this function can only be called by Sower if the token owner\\n    ///         asked for a new seed\\n    ///         2) this function will only be called if there is a rendering error\\n    ///         or, Vitalik Buterin forbid, a duplicate\\n    /// @param tokenId id to regenerate seed for\\n    function changeSeedAfterRequest(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Variety/Varieties/Genesis.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '../Variety.sol';\\nimport '../../Randomize.sol';\\n\\n/// @title Genesis\\n/// @author Simon Fremaux (@dievardump)\\ncontract Genesis is Variety {\\n    using Strings for uint256;\\n    using Strings for uint16;\\n    using Strings for uint8;\\n\\n    using Randomize for Randomize.Random;\\n\\n    enum ColorTypes {\\n        AUTO,\\n        BLACK_WHITE,\\n        FULL\\n    }\\n\\n    struct Grid {\\n        uint8 cols;\\n        uint8 rows;\\n        uint16 cellSize;\\n        uint16 offset;\\n        uint16 shapes;\\n        uint16 minContentSize;\\n        uint16 maxContentSize;\\n        bool shadowed;\\n        bool degen;\\n        bool dark;\\n        bool full;\\n        ColorTypes colorType;\\n        uint256 tokenId;\\n        uint256 baseSeed;\\n        string[5] palette;\\n    }\\n\\n    struct CellData {\\n        uint16 x;\\n        uint16 y;\\n        uint16 cx;\\n        uint16 cy;\\n        uint16 index;\\n    }\\n\\n    /// @notice constructor\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param openseaProxyRegistry_ OpenSea's proxy registry to allow gas-less listings - can be address(0)\\n    /// @param sower_ Sower contract\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        address openseaProxyRegistry_,\\n        address sower_\\n    ) Variety(name_, symbol_, contractURI_, openseaProxyRegistry_, sower_) {}\\n\\n    /// @dev internal function to get the name. Should be overrode by actual Variety contract\\n    /// @param tokenId the token to get the name of\\n    /// @return seedlingName the token name\\n    function _getName(uint256 tokenId)\\n        internal\\n        view\\n        override\\n        returns (string memory seedlingName)\\n    {\\n        seedlingName = names[tokenId];\\n        if (bytes(seedlingName).length == 0) {\\n            seedlingName = string(\\n                abi.encodePacked('Genesis.sol #', tokenId.toString())\\n            );\\n        }\\n    }\\n\\n    /// @dev Rendering function; should be overrode by the actual seedling contract\\n    /// @param tokenId the tokenId\\n    /// @param seed the seed\\n    /// @return the json\\n    function _render(uint256 tokenId, bytes32 seed)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        Randomize.Random memory random = Randomize.Random({\\n            seed: uint256(seed),\\n            offsetBit: 0\\n        });\\n\\n        uint256 result = random.next(0, 100);\\n\\n        Grid memory grid = Grid({\\n            cols: 8,\\n            rows: 8,\\n            cellSize: 140,\\n            offset: 40,\\n            shapes: 0,\\n            minContentSize: 0,\\n            maxContentSize: 0,\\n            colorType: result <= 80 // auto 80%, 10% B&W, 10% FULL Color\\n                ? ColorTypes.AUTO\\n                : (result <= 90 ? ColorTypes.BLACK_WHITE : ColorTypes.FULL),\\n            dark: random.next(0, 100) < 10, // 10% dark mode\\n            degen: random.next(0, 100) < 10, // 10% degen (grid offseted)\\n            shadowed: random.next(0, 100) < 3, // 3% with shadow\\n            full: random.next(0, 100) < 1, // 1% full genesis\\n            palette: _getPalette(random),\\n            tokenId: tokenId,\\n            baseSeed: uint256(seed)\\n        });\\n\\n        // shadowed + full black white is not pleasing to the eye with the wrong first color\\n        if (grid.shadowed && grid.colorType == ColorTypes.BLACK_WHITE) {\\n            grid.palette[0] = '#99B898';\\n        }\\n\\n        result = random.next(0, 16);\\n        if (result < 1) {\\n            grid.cols = 3;\\n            grid.rows = 3;\\n            grid.cellSize = 146;\\n            grid.offset = 381;\\n        } else if (result < 3) {\\n            grid.cols = 4;\\n            grid.rows = 4;\\n            grid.offset = 320;\\n        } else if (result < 7) {\\n            grid.cols = 6;\\n            grid.rows = 6;\\n            grid.offset = 180;\\n        } else if (result < 11) {\\n            grid.cols = 7;\\n            grid.rows = 7;\\n            grid.cellSize = 146;\\n            grid.offset = 89;\\n        }\\n\\n        grid.minContentSize = (grid.cellSize * 2) / 10;\\n        grid.maxContentSize = (grid.cellSize * 6) / 10;\\n\\n        bytes memory svg = abi.encodePacked(\\n            'data:application/json;utf8,{\\\"name\\\":\\\"',\\n            _getName(tokenId),\\n            '\\\",\\\"image\\\":\\\"data:image/svg+xml;utf8,',\\n            \\\"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 1200 1200' width='1200' height='1200'>\\\",\\n            _renderGrid(grid, random),\\n            _renderCells(grid, random)\\n        );\\n\\n        svg = abi.encodePacked(\\n            svg,\\n            \\\"<text style='font: bold 11px sans-serif;' text-anchor='end' x='\\\",\\n            (1200 - grid.offset).toString(),\\n            \\\"' y='\\\",\\n            (1220 - grid.offset).toString(),\\n            \\\"'\\\",\\n            grid.dark ? \\\" fill='#fff'\\\" : '',\\n            '>#',\\n            tokenId.toString(),\\n            '</text>',\\n            '</svg>\\\"'\\n        );\\n\\n        svg = abi.encodePacked(\\n            svg,\\n            ',\\\"license\\\":\\\"Full ownership with unlimited commercial rights.\\\",\\\"creator\\\":\\\"@dievardump\\\"',\\n            ',\\\"description\\\":\\\"Genesis: A seed, some love, that',\\n            \\\"'s\\\",\\n            'all it takes.\\\\\\\\n\\\\\\\\nGenesis is the first of the [sol]Seedlings, an experiment of art and collectible NFTs 100% generated with Solidity.\\\\\\\\nby @dievardump\\\\\\\\n\\\\\\\\nLicense: Full ownership with unlimited commercial rights.\\\\\\\\n\\\\\\\\nMore info at https://solSeedlings.art\\\"'\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    svg,\\n                    ',\\\"properties\\\":{\\\"Colors\\\":\\\"',\\n                    grid.colorType == ColorTypes.AUTO\\n                        ? 'Auto'\\n                        : (\\n                            grid.colorType == ColorTypes.BLACK_WHITE\\n                                ? 'Black & White'\\n                                : 'Full color'\\n                        ),\\n                    '\\\",\\\"Grid\\\":\\\"',\\n                    grid.degen ? 'Degen' : 'Normal',\\n                    '\\\",\\\"Mode\\\":\\\"',\\n                    grid.dark ? 'Dark' : 'Light',\\n                    '\\\",\\\"Rendering\\\":\\\"',\\n                    grid.shadowed ? 'Ghost' : 'Normal',\\n                    '\\\",\\\"Size\\\":\\\"',\\n                    abi.encodePacked(\\n                        grid.cols.toString(),\\n                        '*',\\n                        grid.rows.toString()\\n                    ),\\n                    '\\\"',\\n                    grid.shapes == grid.rows * grid.cols\\n                        ? ',\\\"Bonus\\\":\\\"Full Board\\\"'\\n                        : '',\\n                    '}}'\\n                )\\n            );\\n    }\\n\\n    function _renderGrid(Grid memory grid, Randomize.Random memory random)\\n        internal\\n        pure\\n        returns (bytes memory svg)\\n    {\\n        uint256 offsetMore = grid.degen ? grid.cellSize / 2 : 0;\\n        svg = abi.encodePacked(\\n            \\\"<defs><pattern id='genesis-grid-\\\",\\n            grid.baseSeed.toString(),\\n            \\\"' x='\\\",\\n            (grid.offset + offsetMore).toString(),\\n            \\\"' y='\\\",\\n            (grid.offset + offsetMore).toString(),\\n            \\\"' width='\\\",\\n            grid.cellSize.toString(),\\n            \\\"' height='\\\",\\n            grid.cellSize.toString(),\\n            \\\"' patternUnits='userSpaceOnUse'>\\\"\\n        );\\n\\n        svg = abi.encodePacked(\\n            svg,\\n            \\\"<path d='M \\\",\\n            grid.cellSize.toString(),\\n            ' 0 L 0 0 0 ',\\n            grid.cellSize.toString(),\\n            \\\"' fill='none' stroke='\\\",\\n            grid.dark ? '#fff' : '#000',\\n            \\\"' stroke-width='4'/></pattern>\\\"\\n        );\\n\\n        if (!grid.dark) {\\n            svg = abi.encodePacked(\\n                svg,\\n                \\\"<linearGradient id='genesis-gradient-\\\",\\n                grid.baseSeed.toString(),\\n                \\\"' gradientTransform='rotate(\\\",\\n                random.next(0, 360).toString(),\\n                \\\")'><stop offset='0%' stop-color='\\\",\\n                _randomHSLA(random.next(10, 45), random),\\n                \\\"'/><stop offset='100%' stop-color='\\\",\\n                _randomHSLA(random.next(10, 45), random),\\n                \\\"' /></linearGradient>\\\"\\n            );\\n        }\\n\\n        svg = abi.encodePacked(\\n            svg,\\n            \\\"</defs><rect width='100%' height='100%' fill='#fff' />\\\",\\n            grid.dark\\n                ? \\\"<rect width='100%' height='100%' fill='#000' />\\\"\\n                : string(\\n                    abi.encodePacked(\\n                        \\\"<rect width='100%' height='100%' fill='url(#genesis-gradient-\\\",\\n                        grid.baseSeed.toString(),\\n                        \\\")' />\\\"\\n                    )\\n                ),\\n            \\\"<rect x='\\\",\\n            grid.offset.toString(),\\n            \\\"' y='\\\",\\n            grid.offset.toString(),\\n            \\\"' width='\\\",\\n            (1200 - grid.offset * 2).toString(),\\n            \\\"' height='\\\",\\n            (1200 - grid.offset * 2).toString(),\\n            \\\"' fill='url(#genesis-grid-\\\",\\n            grid.baseSeed.toString(),\\n            \\\")' stroke='\\\",\\n            grid.dark ? '#fff' : '#000',\\n            \\\"' stroke-width='4' />\\\"\\n        );\\n    }\\n\\n    function _getCellData(\\n        uint16 x,\\n        uint16 y,\\n        Grid memory grid\\n    ) internal pure returns (CellData memory) {\\n        uint16 left = x * grid.cellSize;\\n        uint16 top = y * grid.cellSize;\\n        return\\n            CellData({\\n                index: y * grid.cols + x,\\n                x: left,\\n                y: top,\\n                cx: left + grid.cellSize / 2,\\n                cy: top + grid.cellSize / 2\\n            });\\n    }\\n\\n    function _renderCells(Grid memory grid, Randomize.Random memory random)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 result;\\n        CellData memory cellData;\\n        bytes memory cells = abi.encodePacked(\\n            '<g ',\\n            grid.shadowed\\n                ? string(\\n                    abi.encodePacked(\\n                        \\\"style='filter: drop-shadow(16px 16px 20px \\\",\\n                        grid.palette[0],\\n                        \\\") invert(80%);'\\\"\\n                    )\\n                )\\n                : '',\\n            \\\" stroke-width='4' stroke-linecap='round' transform='translate(\\\",\\n            grid.offset.toString(),\\n            ',',\\n            grid.offset.toString(),\\n            \\\")'>\\\"\\n        );\\n\\n        for (uint16 y; y < grid.rows; y++) {\\n            for (uint16 x; x < grid.cols; x++) {\\n                cellData = _getCellData(x, y, grid);\\n                result = random.next(0, grid.full ? 10 : 16);\\n                if (result <= 1) {\\n                    // 0 & 1\\n                    cells = abi.encodePacked(\\n                        cells,\\n                        _getCircle(\\n                            result != 0,\\n                            random.next(\\n                                grid.minContentSize / 2,\\n                                grid.maxContentSize / 2\\n                            ),\\n                            cellData,\\n                            grid,\\n                            random\\n                        )\\n                    );\\n                    grid.shapes++;\\n                } else if (result <= 3) {\\n                    // 2 & 3\\n                    uint256 size = random.next(\\n                        grid.minContentSize,\\n                        grid.maxContentSize\\n                    );\\n\\n                    cells = abi.encodePacked(\\n                        cells,\\n                        _getSquare(result != 5, size, cellData, grid, random)\\n                    );\\n                    grid.shapes++;\\n                } else if (result == 4) {\\n                    // 4\\n                    cells = abi.encodePacked(\\n                        cells,\\n                        _getSquare(\\n                            true,\\n                            grid.minContentSize,\\n                            cellData,\\n                            grid,\\n                            random\\n                        ),\\n                        _getSquare(\\n                            false,\\n                            grid.maxContentSize,\\n                            cellData,\\n                            grid,\\n                            random\\n                        )\\n                    );\\n                    grid.shapes++;\\n                } else if (result == 5) {\\n                    uint256 half = grid.maxContentSize / 2;\\n                    bytes memory color = _getColor(false, random, grid);\\n                    cells = abi.encodePacked(\\n                        cells,\\n                        _getLine(\\n                            cellData.cx - half,\\n                            cellData.cy - half,\\n                            cellData.cx + half,\\n                            cellData.cy + half,\\n                            color,\\n                            false\\n                        )\\n                    );\\n                    grid.shapes++;\\n                } else if (result <= 8) {\\n                    uint256 half = result >= 7\\n                        ? grid.minContentSize / 2\\n                        : grid.maxContentSize / 2;\\n                    bool strong = result >= 7;\\n                    bytes memory color = _getColor(false, random, grid);\\n                    bytes memory square;\\n                    if (result == 8) {\\n                        square = _getSquare(\\n                            false,\\n                            grid.maxContentSize,\\n                            cellData,\\n                            grid,\\n                            random\\n                        );\\n                    }\\n                    cells = abi.encodePacked(\\n                        cells,\\n                        square,\\n                        _getLine(\\n                            cellData.cx - half,\\n                            cellData.cy - half,\\n                            cellData.cx + half,\\n                            cellData.cy + half,\\n                            color,\\n                            strong\\n                        ),\\n                        _getLine(\\n                            cellData.cx + half,\\n                            cellData.cy - half,\\n                            cellData.cx - half,\\n                            cellData.cy + half,\\n                            color,\\n                            strong\\n                        )\\n                    );\\n                    grid.shapes++;\\n                } else if (result < 10) {\\n                    cells = abi.encodePacked(\\n                        cells,\\n                        _getCircle(\\n                            result == 8,\\n                            grid.maxContentSize / 2,\\n                            cellData,\\n                            grid,\\n                            random\\n                        ),\\n                        _getCircle(\\n                            true,\\n                            grid.minContentSize / 2,\\n                            cellData,\\n                            grid,\\n                            random\\n                        )\\n                    );\\n                    grid.shapes++;\\n                }\\n            }\\n        }\\n\\n        return abi.encodePacked(cells, '</g>');\\n    }\\n\\n    function _getPalette(Randomize.Random memory random)\\n        internal\\n        pure\\n        returns (string[5] memory)\\n    {\\n        uint256 randPalette = random.next(0, 6);\\n        if (randPalette == 0) {\\n            return ['#F8B195', '#F67280', '#C06C84', '#6C5B7B', '#355C7D'];\\n        } else if (randPalette == 1) {\\n            return ['#173F5F', '#20639B', '#3CAEA3', '#F6D55C', '#ED553B'];\\n        } else if (randPalette == 2) {\\n            return ['#A7226E', '#EC2049', '#F26B38', '#F7DB4F', '#2F9599'];\\n        } else if (randPalette == 3) {\\n            return ['#99B898', '#FECEAB', '#FF847C', '#E84A5F', '#2A363B'];\\n        } else if (randPalette == 4) {\\n            return ['#FFADAD', '#FDFFB6', '#9BF6FF', '#BDB2FF', '#FFC6FF'];\\n        } else {\\n            return ['#EA698B', '#C05299', '#973AA8', '#6D23B6', '#571089'];\\n        }\\n    }\\n\\n    function _getColor(\\n        bool fill,\\n        Randomize.Random memory random,\\n        Grid memory grid\\n    ) internal pure returns (bytes memory) {\\n        string memory color = grid.dark ? '#fff' : '#000';\\n\\n        if (\\n            // if not full black & white\\n            ColorTypes.BLACK_WHITE != grid.colorType &&\\n            // and if either full color OR 1 out of 5, colorize\\n            (ColorTypes.FULL == grid.colorType || random.next(0, 5) < 1)\\n        ) {\\n            color = grid.palette[random.next(0, grid.palette.length)];\\n        }\\n\\n        if (!fill) {\\n            return abi.encodePacked(\\\" stroke='\\\", color, \\\"' fill='none' \\\");\\n        }\\n        return abi.encodePacked(\\\" fill='\\\", color, \\\"' stroke='none' \\\");\\n    }\\n\\n    function _randomHSLA(uint256 maxOpacity, Randomize.Random memory random)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                'hsla(',\\n                random.next(0, 255).toString(),\\n                ',',\\n                random.next(0, 100).toString(),\\n                '%,',\\n                random.next(40, 100).toString(),\\n                '%,0.',\\n                maxOpacity < 10 ? '0' : '',\\n                maxOpacity.toString(),\\n                ')'\\n            );\\n    }\\n\\n    function _getCircle(\\n        bool fill,\\n        uint256 size,\\n        CellData memory cellData,\\n        Grid memory grid,\\n        Randomize.Random memory random\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"<circle cx='\\\",\\n                cellData.cx.toString(),\\n                \\\"' cy='\\\",\\n                cellData.cy.toString(),\\n                \\\"' r='\\\",\\n                size.toString(),\\n                \\\"'\\\",\\n                _getColor(fill, random, grid),\\n                '/>'\\n            );\\n    }\\n\\n    function _getSquare(\\n        bool fill,\\n        uint256 size,\\n        CellData memory cellData,\\n        Grid memory grid,\\n        Randomize.Random memory random\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"<rect x='\\\",\\n                (cellData.cx - size / 2).toString(),\\n                \\\"' y='\\\",\\n                (cellData.cy - size / 2).toString(),\\n                \\\"' width='\\\",\\n                size.toString(),\\n                \\\"' height='\\\",\\n                size.toString(),\\n                \\\"'\\\",\\n                _getColor(fill, random, grid),\\n                '/>'\\n            );\\n    }\\n\\n    function _getLine(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 x1,\\n        uint256 y1,\\n        bytes memory color,\\n        bool strong\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"<path d='M \\\",\\n                x0.toString(),\\n                ' ',\\n                y0.toString(),\\n                ' L ',\\n                x1.toString(),\\n                ' ',\\n                y1.toString(),\\n                \\\"'\\\",\\n                color,\\n                '',\\n                strong ? \\\"stroke-width='8'\\\" : '',\\n                '/>'\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Variety/Variety.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////************@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////*******************@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@///***********************@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@///**************************@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@///**********/**************/*@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@///////****/****************//@@@@@\\n// @@@*********@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(///////////*****************//@@@@@@\\n// @@@**************//////@@@@@@@@@@@@@@@@@@@((////////////***************//@@@@@@@\\n// @@@*********************////@@@@@@@@@@@@@((///////////////************//@@@@@@@@\\n// @@@@//**************//***//////@@@@@@@@@@(///////////////////*******//@@@@@@@@@@\\n// @@@@@/*****************////////((@@@@@@@((///((////////////////***//@@@@@@@@@@@@\\n// @@@@@@//*************////////////((@@@@@((//((////////////////////@@@@@@@@@@@@@@\\n// @@@@@@@//**********///////////////((@@@@((((//////////////////@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@///******//////////////((//((@@@(((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@//*///////////////////(//((@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@////////////////////(((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@/((((/////////////((((/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@((((((((@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@###(((((((((((((((((((((((((###@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@####################################@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@#############################################@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport './IVariety.sol';\\nimport '../NFT/ERC721Helpers/ERC721Full.sol';\\n\\n/// @title Variety Contract\\n/// @author Simon Fremaux (@dievardump)\\ncontract Variety is IVariety, ERC721Full {\\n    event SeedChangeRequest(uint256 indexed tokenId, address indexed operator);\\n\\n    // seedlings Sower\\n    address public sower;\\n\\n    // last tokenId\\n    uint256 public lastTokenId;\\n\\n    // each token seed\\n    mapping(uint256 => bytes32) internal tokenSeed;\\n\\n    // names\\n    mapping(uint256 => string) public names;\\n\\n    // useNames\\n    mapping(bytes32 => bool) public usedNames;\\n\\n    // tokenIds with a request for seeds change\\n    mapping(uint256 => bool) internal seedChangeRequests;\\n\\n    modifier onlySower() {\\n        require(msg.sender == sower, 'Not Sower.');\\n        _;\\n    }\\n\\n    /// @notice constructor\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param openseaProxyRegistry_ OpenSea's proxy registry to allow gas-less listings - can be address(0)\\n    /// @param sower_ Sower contract\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        address openseaProxyRegistry_,\\n        address sower_\\n    ) ERC721Ownable(name_, symbol_, contractURI_, openseaProxyRegistry_) {\\n        sower = sower_;\\n    }\\n\\n    /// @notice mint `seeds.length` token(s) to `to` using `seeds`\\n    /// @param to token recipient\\n    /// @param seeds each token seed\\n    function plant(address to, bytes32[] memory seeds)\\n        external\\n        override\\n        onlySower\\n        returns (uint256)\\n    {\\n        uint256 tokenId = lastTokenId;\\n        for (uint256 i; i < seeds.length; i++) {\\n            tokenId++;\\n            _safeMint(to, tokenId);\\n            tokenSeed[tokenId] = seeds[i];\\n        }\\n        lastTokenId = tokenId;\\n\\n        return tokenId;\\n    }\\n\\n    /// @inheritdoc\\tERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Full, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice tokenURI override that returns a data:json application\\n    /// @inheritdoc\\tERC721\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            'ERC721Metadata: URI query for nonexistent token'\\n        );\\n\\n        return _render(tokenId, tokenSeed[tokenId]);\\n    }\\n\\n    /// @notice ERC2981 support - 4% royalties sent to Sower\\n    /// @inheritdoc\\tIERC2981Royalties\\n    function royaltyInfo(uint256, uint256 value)\\n        public\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        receiver = sower;\\n        royaltyAmount = (value * 400) / 10000;\\n    }\\n\\n    /// @inheritdoc IVariety\\n    function getTokenSeed(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        require(_exists(tokenId), 'TokenSeed query for nonexistent token');\\n        return tokenSeed[tokenId];\\n    }\\n\\n    /// @inheritdoc IVariety\\n    function requestSeedChange(uint256 tokenId) external override {\\n        require(ownerOf(tokenId) == msg.sender, 'Not token owner.');\\n        seedChangeRequests[tokenId] = true;\\n        emit SeedChangeRequest(tokenId, msg.sender);\\n    }\\n\\n    /// @inheritdoc IVariety\\n    function changeSeedAfterRequest(uint256 tokenId)\\n        external\\n        override\\n        onlySower\\n    {\\n        require(seedChangeRequests[tokenId] == true, 'No request for token.');\\n        seedChangeRequests[tokenId] = false;\\n        tokenSeed[tokenId] = keccak256(\\n            abi.encode(\\n                tokenSeed[tokenId],\\n                block.timestamp,\\n                block.difficulty,\\n                blockhash(block.number - 1)\\n            )\\n        );\\n    }\\n\\n    /// @notice Function allowing an owner to set the seedling name\\n    ///         User needs to be extra careful. Some characters might completly break the token.\\n    ///         Since the metadata are generated in the contract.\\n    ///         if this ever happens, you can simply reset the name to nothing or for something else\\n    /// @dev sender must be tokenId owner\\n    /// @param tokenId the token to name\\n    /// @param seedlingName the name\\n    function setName(uint256 tokenId, string memory seedlingName) external {\\n        require(ownerOf(tokenId) == msg.sender, 'Not token owner.');\\n\\n        bytes32 byteName = keccak256(abi.encodePacked(seedlingName));\\n\\n        // if the name is not empty, verify it is not used\\n        if (bytes(seedlingName).length > 0) {\\n            require(usedNames[byteName] == false, 'Name already used');\\n            usedNames[byteName] = true;\\n        }\\n\\n        // if it already has a name, mark all name as unused\\n        string memory oldName = names[tokenId];\\n        if (bytes(oldName).length > 0) {\\n            byteName = keccak256(abi.encodePacked(oldName));\\n            usedNames[byteName] = false;\\n        }\\n\\n        names[tokenId] = seedlingName;\\n    }\\n\\n    /// @notice function to get a token name\\n    /// @dev token must exist\\n    /// @param tokenId the token to get the name of\\n    /// @return the token name\\n    function getName(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), 'Unknown token');\\n        return _getName(tokenId);\\n    }\\n\\n    /// @dev internal function to get the name. Should be overrode by actual Variety contract\\n    /// @param tokenId the token to get the name of\\n    /// @return the token name\\n    function _getName(uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return bytes(names[tokenId]).length > 0 ? names[tokenId] : 'Variety';\\n    }\\n\\n    /// @notice Function allowing to check the rendering for a given seed\\n    ///         This allows to know what a seed would render without minting\\n    /// @param seed the seed to render\\n    /// @return the json\\n    function renderSeed(bytes32 seed) public view returns (string memory) {\\n        return _render(0, seed);\\n    }\\n\\n    /// @dev Rendering function; should be overrode by the actual seedling contract\\n    /// @param tokenId the tokenId\\n    /// @param seed the seed\\n    /// @return the json\\n    function _render(uint256 tokenId, bytes32 seed)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        seed;\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;utf8,{\\\"name\\\":\\\"',\\n                    _getName(tokenId),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"openseaProxyRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sower_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SeedChangeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changeSeedAfterRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOwnersOpenSeaProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"}],\"name\":\"plant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"renderSeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"requestSeedChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"seedlingName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedNames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Genesis", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c10000000000000000000000002b0f5a983316b4fc980500b3e973d58765770bd2000000000000000000000000000000000000000000000000000000000000001847656e65736973202d205b736f6c5d536565646c696e67730000000000000000000000000000000000000000000000000000000000000000000000000000000653534753233000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047697066733a2f2f697066732f516d57513256324b69536a4451514a624b3468746b4152697742636d7456734761794e42717a57594b43486b74312f47656e657369732e6a736f6e00000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}