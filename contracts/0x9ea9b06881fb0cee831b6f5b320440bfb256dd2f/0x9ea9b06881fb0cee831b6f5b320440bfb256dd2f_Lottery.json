{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.22;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// lottery contract\r\ncontract Lottery {\r\n    // manager address\r\n    address public manager;\r\n    // lottery players\r\n    address[] public players;\r\n    // lottery winners\r\n    address[] public winners;\r\n\r\n    // target amount of tickets\r\n    uint public target_amount;\r\n    // price of ticket in USDT\r\n    uint public ticket_price;\r\n    // check if game finished\r\n    bool public isGameEnded = true;\r\n    bool public isReadyPickWinner = false;\r\n    uint public startedTime = 0;\r\n    uint public endTime = 0;\r\n\r\n    // remaining USDT in the contract\r\n    uint public remainingUSDT = 0;\r\n    // ERC-20 token address\r\n    IERC20 usdtToken;\r\n    // Lottery information\r\n    struct LotteryInfo {\r\n        uint index;\r\n        uint startTime;\r\n        uint endTime;\r\n        address[] winners;\r\n        address[] entries;\r\n        uint ticketPrice;\r\n        uint ticketAmount;\r\n    }\r\n\r\n    // List of lotteries\r\n    LotteryInfo[] public lotteries;\r\n\r\n    // add event\r\n    event PickWinner(address[] winners, uint prizeAmount);\r\n\r\n    // Transfer event\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    constructor(address _usdtTokenAddress) {\r\n        // define administrator with deployer\r\n        manager = msg.sender;\r\n        isGameEnded = true;\r\n        usdtToken = IERC20(_usdtTokenAddress);\r\n\r\n    }\r\n\r\n    // role middleware\r\n    modifier restricted() {\r\n        require(msg.sender == manager, \"only manager has access\");\r\n        _;\r\n    }\r\n\r\n    // middleware to check if game is on or off\r\n    modifier onGame() {\r\n        require(!isGameEnded && !isReadyPickWinner, \"Game has not started yet.\");\r\n        _;\r\n    }\r\n\r\n    // Get Balance of pool\r\n    function balanceInPool() public view returns (uint) {\r\n        return usdtToken.balanceOf(address(this));\r\n    }\r\n\r\n    // enter the game\r\n    function enter(uint256 _usdtAmount) public onGame returns (bool){        \r\n        require(target_amount > 0, \"The whole tickets have been sold\");\r\n        require(_usdtAmount == ticket_price, \"USDT amount doesn't match the price of the ticket\");\r\n        require(_usdtAmount <= usdtToken.balanceOf(msg.sender), \"Insufficient USDT Amount in wallet\");\r\n        // Check if the sender has approved the contract to spend their USDT\r\n        require(usdtToken.allowance(msg.sender, address(this)) >= ticket_price, \"Not enough allowance\");\r\n        // Transfer USDT from the sender to the contract\r\n        bool ok = usdtToken.transferFrom(msg.sender, address(this), _usdtAmount);\r\n        if (ok) {\r\n            emit Transfer(msg.sender, address(this), _usdtAmount);\r\n            // Add the sender to the list of players\r\n            players.push(msg.sender);\r\n            // Decrement the target_amount\r\n            target_amount = target_amount - 1;\r\n            lotteries[lotteries.length - 1].entries.push(msg.sender);\r\n\r\n            // Check if all tickets are sold\r\n            if (target_amount == 0) {\r\n                isReadyPickWinner = true;\r\n                endTime = block.timestamp;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    // initialize the game\r\n    function initialize(\r\n        uint _ticketPrice,\r\n        uint _ticketAmount       \r\n    ) public restricted {\r\n        // before init newly, the previous game should be finished.\r\n        require(isGameEnded, \"Game is running now.\");\r\n        startedTime = block.timestamp;\r\n        ticket_price = _ticketPrice;\r\n        target_amount = _ticketAmount;        \r\n        isGameEnded = false;\r\n        isReadyPickWinner = false;\r\n        remainingUSDT = 0;\r\n        if (winners.length > 0){\r\n            delete winners;\r\n        }\r\n        if (players.length >0 ){\r\n            delete players;\r\n        }\r\n        // Create a new lottery entry\r\n        lotteries.push(LotteryInfo({\r\n            index: lotteries.length,\r\n            startTime: startedTime,\r\n            endTime: 0,\r\n            winners: winners,\r\n            entries: players,\r\n            ticketPrice: _ticketPrice,\r\n            ticketAmount: _ticketAmount\r\n        }));\r\n    }\r\n\r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, players)));\r\n    }\r\n\r\n     function pickWinner() public restricted {\r\n        require(isReadyPickWinner, \"Game is running now.\");\r\n\r\n        uint totalPlayers = players.length;\r\n\r\n        require(totalPlayers >= 3, \"Not enough players to pick 3 winners\");\r\n\r\n        // Shuffle the players array\r\n        address[] memory entries = new address[](players.length);\r\n        for (uint i = totalPlayers - 1; i > 0; i--) {\r\n            uint j = random() % (i + 1);\r\n            (entries[i], entries[j]) = (players[j], players[i]);\r\n        }\r\n\r\n        // Calculate total USDT collected\r\n        uint totalUSDT = ticket_price * players.length;\r\n\r\n        // Select the first 3 players as winners\r\n        address[] memory selectedWinners = new address[](3);\r\n        for (uint i = 0; i < 3; i++) {\r\n            selectedWinners[i] = entries[i];\r\n        }\r\n\r\n        // Distribute prizes to winners based on total USDT\r\n        uint prizeAmount = (totalUSDT * 30) / 100;\r\n        for (uint i = 0; i < 3; i++) {\r\n            usdtToken.transfer(selectedWinners[i], prizeAmount);\r\n        }\r\n        // 10% remains in the contract and only the manager can withdraw\r\n        remainingUSDT = (totalUSDT * 10) / 100;\r\n\r\n        // Save lottery information\r\n        lotteries[lotteries.length - 1].winners = selectedWinners;\r\n        lotteries[lotteries.length - 1].endTime = block.timestamp;\r\n        winners = selectedWinners;\r\n        // Reset game state\r\n        isGameEnded = true;\r\n        isReadyPickWinner = false;\r\n\r\n        emit PickWinner(selectedWinners, prizeAmount);\r\n    }\r\n\r\n\r\n\r\n\r\n    // Manager can withdraw USDT\r\n    function withdrawUSDT(uint _usdtAmount) public restricted {\r\n        require(_usdtAmount <= usdtToken.balanceOf(address(this)), \"No such amount in contract\");\r\n        usdtToken.transfer(manager, _usdtAmount);\r\n    }\r\n\r\n    // Manager can withdraw all USDT\r\n    function withdrawAllUSDT() public restricted {\r\n        uint amountToWithdraw = usdtToken.balanceOf(address(this));\r\n        require(amountToWithdraw > 0, \"No USDT to withdraw\");        \r\n        usdtToken.transfer(manager, amountToWithdraw);\r\n    }\r\n\r\n    function getPlayers() public view returns (address[] memory) {\r\n        return players;\r\n    }\r\n\r\n    function getWinners() public view returns (address[] memory) {\r\n        return winners;\r\n    }\r\n\r\n    function getPlayerNumber() public view returns (uint) {\r\n        return players.length;\r\n    }\r\n\r\n    function getStartedTime() public view returns (uint) {\r\n        return block.timestamp - startedTime;\r\n    }\r\n\r\n    function getEndTime() public view returns (uint) {\r\n        return endTime;\r\n    }    \r\n\r\n    function getLotteriesCount() public view returns (uint) {\r\n        return lotteries.length;\r\n    }\r\n\r\n    function getLotteryInfo(uint index) public view returns (LotteryInfo memory) {\r\n        require(index < lotteries.length, \"Invalid lottery index\");\r\n        return lotteries[index];\r\n    }\r\n\r\n    function changeManger(address _newManager) public restricted {\r\n        manager = _newManager;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"name\":\"PickWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"changeManger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteriesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLotteryInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"entries\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.LotteryInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGameEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyPickWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticket_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6188de8d17435f2c1832be50f7a302294193e1b2e296369d03bdb6da5c2afeb5"}