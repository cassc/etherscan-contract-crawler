{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ConverterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IWETH } from \\\"../../interfaces/IWETH.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nabstract contract ConverterBase is ITokenConverter {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @inheritdoc ITokenConverter\\n  address public immutable override registry;\\n\\n  /// @dev The address of ETH which is commonly used.\\n  address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /// @dev The address of WETH token.\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /// @dev The address of referral contract.\\n  address internal constant REFERRAL = 0x26B2ec4E02ebe2F54583af25b647b1D619e67BbF;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) {\\n    registry = _registry;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function withdrawFund(address _token, address _recipient) external override {\\n    require(msg.sender == registry, \\\"only registry\\\");\\n\\n    if (_token == address(0)) {\\n      (bool success, ) = _recipient.call{ value: address(this).balance }(\\\"\\\");\\n      require(success, \\\"withdraw ETH failed\\\");\\n    } else {\\n      IERC20(_token).safeTransfer(_recipient, IERC20(_token).balanceOf(address(this)));\\n    }\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to get the pool type of the route.\\n  /// @param encoding The route encoding.\\n  function _getPoolType(uint256 encoding) internal pure returns (uint256) {\\n    return encoding & 255;\\n  }\\n\\n  /// @dev Internal function to get the action of the route.\\n  /// @param encoding The route encoding.\\n  function _getAction(uint256 encoding) internal pure returns (uint256) {\\n    return (encoding >> 8) & 3;\\n  }\\n\\n  /// @dev Internal function to get the address of pool.\\n  /// @param encoding The route encoding.\\n  function _getPool(uint256 encoding) internal pure returns (address) {\\n    return address((encoding >> 10) & 1461501637330902918203684832716283019655932542975);\\n  }\\n\\n  function _isETH(address _token) internal pure returns (bool) {\\n    return _token == ETH || _token == address(0);\\n  }\\n\\n  function _wrapTokenIfNeeded(address _token, uint256 _amount) internal {\\n    if (_token == WETH && IERC20(_token).balanceOf(address(this)) < _amount) {\\n      IWETH(_token).deposit{ value: _amount }();\\n    }\\n  }\\n\\n  function _unwrapIfNeeded(uint256 _amount) internal {\\n    if (address(this).balance < _amount) {\\n      IWETH(WETH).withdraw(_amount);\\n    }\\n  }\\n\\n  function _approve(\\n    address _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal {\\n    if (!_isETH(_token) && IERC20(_token).allowance(address(this), _spender) < _amount) {\\n      // hBTC cannot approve 0\\n      if (_token != 0x0316EB71485b0Ab14103307bf65a021042c6d380) {\\n        IERC20(_token).safeApprove(_spender, 0);\\n      }\\n      IERC20(_token).safeApprove(_spender, uint256(-1));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/GeneralTokenConverterStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { ConverterBase } from \\\"./ConverterBase.sol\\\";\\n\\nabstract contract GeneralTokenConverterStorage is Ownable, ConverterBase {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The mask of supported pool types.\\n  /// @dev If the `i`-th bit is `1`, the `i`-th pool type is supported in this contract.\\n  uint256 public supportedPoolTypes;\\n\\n  /// @notice Mapping from token address to token minter.\\n  /// @dev It is used to determine the pool address for lp token address.\\n  mapping(address => address) public tokenMinter;\\n\\n  /// @dev Execution context used in fallback function.\\n  uint256 internal context;\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // solhint-disable-next-line no-complex-fallback\\n  fallback() external payable {\\n    uint256 _context = context;\\n    if (address(_context) == _msgSender() || _context == 1) {\\n      // handle uniswap v3 swap callback or uniswap v3 quote callback\\n      // | 4 bytes |   32 bytes   |   32 bytes   |   32 bytes  |   32 bytes  | 32 bytes |\\n      // |   sig   | amount0Delta | amount1Delta | data.offset | data.length |  tokenIn |\\n      int256 amount0Delta;\\n      int256 amount1Delta;\\n      address tokenIn;\\n      assembly {\\n        amount0Delta := calldataload(4)\\n        amount1Delta := calldataload(36)\\n        tokenIn := calldataload(132)\\n      }\\n      (uint256 amountToPay, uint256 amountReceived) = amount0Delta > 0\\n        ? (uint256(amount0Delta), uint256(-amount1Delta))\\n        : (uint256(amount1Delta), uint256(-amount0Delta));\\n      if (_context == 1) {\\n        assembly {\\n          let ptr := mload(0x40)\\n          mstore(ptr, amountReceived)\\n          revert(ptr, 32)\\n        }\\n      } else {\\n        IERC20(tokenIn).safeTransfer(address(_context), amountToPay);\\n      }\\n    } else {\\n      revert(\\\"invalid call\\\");\\n    }\\n  }\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  /// @notice Update the pool types supported by this contract by default.\\n  /// @param _supportedPoolTypes The mask of pool types supported.\\n  function updateSupportedPoolTypes(uint256 _supportedPoolTypes) external onlyOwner {\\n    supportedPoolTypes = _supportedPoolTypes;\\n  }\\n\\n  /// @notice Update the token minter mapping.\\n  /// @param _tokens The address list of tokens to update.\\n  /// @param _minters The address list of corresponding minters.\\n  function updateTokenMinter(address[] memory _tokens, address[] memory _minters) external onlyOwner {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      tokenMinter[_tokens[i]] = _minters[i];\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ITokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface ITokenConverter {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Converter Registry.\\n  function registry() external view returns (address);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Query the output token amount according to the encoding.\\n  ///\\n  /// @dev See the comments in `convert` for the meaning of encoding.\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param amountOut The amount of output token received.\\n  function queryConvert(uint256 encoding, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Convert input token to output token according to the encoding.\\n  /// Assuming that the input token is already in the contract.\\n  ///\\n  /// @dev encoding for single route\\n  /// |   8 bits  | 2 bits |  246 bits  |\\n  /// | pool_type | action | customized |\\n  ///\\n  /// + pool_type = 0: UniswapV2, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | 1 bit | ... |\\n  ///                | pool address | fee_num | zero_for_one | twamm | ... |\\n  /// + pool_type = 1: UniswapV3, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | ... |\\n  ///                | pool address | fee_num | zero_for_one | ... |\\n  /// + pool_type = 2: BalancerV1, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 3: BalancerV2, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 4: CurvePlainPool or CurveFactoryPlainPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 5: CurveAPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 6: CurveYPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 7: CurveMetaPool or CurveFactoryMetaPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 8: CurveCryptoPool or CurveFactoryCryptoPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 9: ERC4626, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 10: Lido, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 11:  ETHLSDConverter v1, no action 0\\n  ///   supported in other pool type\\n  ///     puffer: pufETH is ERC4626, base is stETH\\n  ///     frax: sfrxETH is ERC4626, base is frxETH\\n  ///     pirex: apxETH is ERC4626, base is pxETH\\n  ///   supported in this pool type\\n  ///     0=wBETH: mint wBETH from ETH\\n  ///     1=RocketPool: mint rETH from ETH\\n  ///     2=frax: mint frxETH from ETH\\n  ///     3=pirex: mint pxETH from ETH\\n  ///     4=renzo: mint ezETH from ETH, stETH, wBETH\\n  ///     5=ether.fi: mint eETH from ETH, mint weETH from eETH, unwrap weETH to eETH\\n  ///     6=kelpdao.xyz: mint rsETH from ETH, ETHx, stETH, sfrxETH, and etc.\\n  ///   customized = |   160 bits   |  8 bits  | ... |\\n  ///                | pool address | protocol | ... |\\n  /// + pool_type = 12: CurveStableSwapNG\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 13: CurveStableSwapMetaNG\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  ///\\n  /// Note: tokens + 1 is the number of tokens of the pool\\n  ///\\n  /// + action = 0: swap\\n  /// + action = 1: add liquidity / wrap / stake\\n  /// + action = 2: remove liquidity / unwrap / unstake\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param recipient The address of token receiver.\\n  /// @return amountOut The amount of output token received.\\n  function convert(\\n    uint256 encoding,\\n    uint256 amountIn,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n\\n  /// @notice Withdraw dust assets in this contract.\\n  /// @param token The address of token to withdraw.\\n  /// @param recipient The address of token receiver.\\n  function withdrawFund(address token, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/UniswapV3Converter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IUniswapV3Pool } from \\\"../../interfaces/IUniswapV3Pool.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nimport { ConverterBase } from \\\"./ConverterBase.sol\\\";\\nimport { GeneralTokenConverterStorage } from \\\"./GeneralTokenConverterStorage.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable no-empty-blocks\\n\\ncontract UniswapV3Converter is GeneralTokenConverterStorage {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 private constant MIN_SQRT_RATIO = 4295128739;\\n\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) ConverterBase(_registry) {}\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function getTokenPair(uint256 _encoding) public view override returns (address _tokenIn, address _tokenOut) {\\n    uint256 _poolType = _getPoolType(_encoding);\\n    require(_poolType == 1, \\\"unsupported poolType\\\");\\n    uint256 _action = _getAction(_encoding);\\n    address _pool = _getPool(_encoding);\\n\\n    if (_action == 0) {\\n      // UniswapV3\\n      _tokenIn = IUniswapV3Pool(_pool).token0();\\n      _tokenOut = IUniswapV3Pool(_pool).token1();\\n      uint256 zero_for_one = (_encoding >> 194) & 1;\\n      if (zero_for_one == 0) {\\n        (_tokenIn, _tokenOut) = (_tokenOut, _tokenIn);\\n      }\\n    } else {\\n      revert(\\\"unsupported action\\\");\\n    }\\n  }\\n\\n  /// @inheritdoc ITokenConverter\\n  function queryConvert(uint256 _encoding, uint256 _amountIn) external override returns (uint256 _amountOut) {\\n    (address _tokenIn, address _tokenOut) = getTokenPair(_encoding);\\n    address _pool = _getPool(_encoding);\\n    bool zeroForOne = _tokenIn < _tokenOut;\\n    context = 1;\\n    try\\n      IUniswapV3Pool(_pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(_amountIn),\\n        (zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1),\\n        new bytes(0)\\n      )\\n    {} catch (bytes memory reason) {\\n      _amountOut = abi.decode(reason, (uint256));\\n    }\\n    context = 0;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function convert(\\n    uint256 _encoding,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) external payable override returns (uint256 _amountOut) {\\n    (address _tokenIn, address _tokenOut) = getTokenPair(_encoding);\\n    address _pool = _getPool(_encoding);\\n\\n    _wrapTokenIfNeeded(_tokenIn, _amountIn);\\n\\n    bool zeroForOne = _tokenIn < _tokenOut;\\n    bytes memory _data = new bytes(32);\\n    assembly {\\n      mstore(add(_data, 0x20), _tokenIn)\\n    }\\n    context = uint256(_pool);\\n    (int256 amount0, int256 amount1) = IUniswapV3Pool(_pool).swap(\\n      _recipient,\\n      zeroForOne,\\n      int256(_amountIn),\\n      (zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1),\\n      _data\\n    );\\n    context = 0;\\n    return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV3Pool {\\n  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n  /// @return The contract address\\n  function factory() external view returns (address);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice Swap token0 for token1, or token1 for token0\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n  /// @param recipient The address to receive the output of the swap\\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"}],\"name\":\"getTokenPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"queryConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedPoolTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supportedPoolTypes\",\"type\":\"uint256\"}],\"name\":\"updateSupportedPoolTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"updateTokenMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniswapV3Converter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000997b6f43c1c1e8630d03b8e3c11b60e98a1bea90", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}