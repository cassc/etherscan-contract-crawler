{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DynamicsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/***************************************************************************************************************************************\\\\\\n|********************************************** Welcome to the DYNAMICS TOKEN source code **********************************************|\\n|***************************************************************************************************************************************|\\n|* This project supports the following:                                                                                                 |\\n|***************************************************************************************************************************************|\\n|* 1. A good cause, a portion of fees are sent to charity as outlined on the Dynamics Webpage                                           |\\n|* 2. Token reflections.                                                                                                                |\\n|* 3. Automatic Liquidity reflections.                                                                                                  |\\n|* 4. Automated reflections of Ethereum to hodlers.                                                                                     |\\n|* 5. Token Buybacks.                                                                                                                   |\\n|* 6. A Token airdrop system where tokens can be injected directly back into pools for Liquidity, Ethereum reflections and Buybacks.    |\\n|* 7. Burning Functions.                                                                                                                |\\n|* 7. An airdrop system that feeds directly into the contract.                                                                          |\\n|* 8. Multi-Tiered sell fees that encourage hodling and discourage whales/dumping.                                                      |\\n|* 9. Buy and transfer fees separate from seller fees that support the above.                                                           |\\n|***************************************************************************************************************************************|\\n|***************************************************************************************************************************************|\\n|******************** Fork if you dare... But seriously, if you fork just shout us out and consider our charity. :) ********************|\\n|***************************************************************************************************************************************|\\n|***************************************************************************************************************************************|\\n|**************** Don't Mind the blood, sweat and tears throughout the contract, it has caused us many sleepless nights ****************|\\n|                 - The Dev!                                                                                                            |\\n|***************************************************************************************************************************************|\\n|***************************************************************************************************************************************|\\n\\\\***************************************************************************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport './utils/Ownable.sol';\\nimport \\\"./utils/LockableSwap.sol\\\";\\nimport \\\"./utils/EthReflectingToken.sol\\\";\\nimport \\\"./libs/FeeLibrary.sol\\\";\\nimport \\\"./interfaces/SupportingAirdropDeposit.sol\\\";\\nimport \\\"./interfaces/IBuyBack.sol\\\";\\n\\ncontract DynamicsToken is Context, Ownable, IERC20, LockableSwap, SupportingAirdropDeposit, FeeLibrary, EthReflectingToken {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    event Burn(address indexed to, uint256 value);\\n    event UpdateRouter(address indexed newAddress, address indexed oldAddress);\\n\\n    event SniperBlacklisted(address indexed potentialSniper, bool isAddedToBlacklist);\\n    event UpdateFees(Fees oldFees, Fees newFees);\\n    event UpdateSellerFees(SellFees oldSellFees, SellFees newSellFees);\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    struct User {\\n        uint256 buyCD;\\n        uint256 sellCD;\\n        uint256 lastBuy;\\n        bool exists;\\n    }\\n\\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\\n    Fees public buyFees = Fees({reflection: 1, project: 0, liquidity: 2, burn: 1, charityAndMarketing: 3, ethReflection: 8});\\n    Fees public transferFees = Fees({reflection: 0, project: 1, liquidity: 1, burn: 0, charityAndMarketing: 0, ethReflection: 0});\\n\\n    Fees private previousBuyFees;\\n    Fees private previousTransferFees;\\n\\n    // To lock the init after first run as constructor is split into that function and we dont want to be able to ever run it twice\\n    uint8 private runOnce = 3;\\n\\n    uint256 public totalEthSentToPool = 0;\\n    uint8 private swapSelector;\\n\\n    uint256 public buyerDiscountPrice = 2 ether;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => bool) private isMarketingProvider;\\n    mapping (address => bool) private isRegistered;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => User) private trader;\\n    mapping (address => bool) public _isBlacklisted;\\n    mapping (address => bool) public _isExcludedFromFee;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n\\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address public uniswapV2Pair;\\n\\n    EthBuybacks public buybackTokenTracker = EthBuybacks({liquidity: 0, redistribution : 0, buyback : 0});\\n    IBuyBack public buybackContract;\\n    uint256 private sellToProject = 30;\\n    uint256 private sellToEthReflections = 40;\\n\\n    uint256 public _minimumTimeFee = 5;\\n    uint256 public _minimumSizeFee = 5;\\n\\n    bool public buyBackEnabled = true;\\n    bool public ethSwapEnabled = true;\\n    uint256 public minBuyBack = 0.01 ether;\\n    uint256 private poolMaxSwap = 10;\\n    bool private skipBB = false;\\n\\n    string public constant name = \\\"Dynamics Token\\\";\\n    string public constant symbol = \\\"DYNA\\\";\\n    uint256 public constant decimals = 18;\\n\\n    bool public sniperDetection = true;\\n\\n    bool public tradingOpen = false;\\n    bool public _cooldownEnabled = true;\\n\\n    uint256 public tradingStartTime;\\n\\n    address payable public _projectWallet;\\n    address payable public airdropTokenInjector;\\n    address payable public _marketingWallet = payable(0xb854a252e60218a37b8f50081FEC7A5d8b45957A);\\n    address payable public _charityWallet = payable(0xA7817792a12C6cC5E6De2929FE116a67a79DF9d3);\\n    address payable public servicesWallet = payable(0xEA8fe1764a5385f0C8ACf16F14597856A1f594B8);\\n\\n    uint256 private numTokensSellToAddToLiquidity;\\n\\n    constructor (uint256 _supply) payable {\\n        _tTotal = _supply * 10 ** decimals;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        numTokensSellToAddToLiquidity = 40000 * 10 ** decimals;\\n        _rOwned[address(this)] = _rTotal;\\n        _isExcludedFromFee[_owner] = true;\\n        _isExcludedFromFee[_msgSender()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[address(_marketingWallet)] = true;\\n        _isExcludedFromFee[address(_charityWallet)] = true;\\n        _isExcludedFromFee[address(servicesWallet)] = true;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        require(gasleft() >= minGas, \\\"Requires higher gas\\\");\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeFromFee(address account, bool exclude) public onlyOwner {\\n        _isExcludedFromFee[account] = exclude;\\n    }\\n\\n    //to recieve ETH from uniswapV2Router when swaping\\n    receive() external payable {}\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _takeProjectFees(uint256 tProject, uint256 tMarketing) private {\\n        if(tProject == 0 && tMarketing == 0)\\n            return;\\n        uint256 currentRate =  _getRate();\\n        uint256 rProject = tProject.mul(currentRate);\\n        uint256 tCharity = tMarketing.mul(2).div(3);\\n        uint256 rMarketing = (tMarketing.sub(tCharity)).mul(currentRate);\\n        uint256 rCharity = tCharity.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rProject).add(rMarketing);\\n        _transferStandard(address(this), _projectWallet, rProject, tProject, rProject);\\n        _transferStandard(address(this), _marketingWallet, rMarketing, tMarketing, rMarketing);\\n        _transferStandard(address(this), _charityWallet, rCharity, tCharity, rCharity);\\n    }\\n\\n    function _getTValues(uint256 tAmount, uint256 liquidityFee, uint256 reflectiveFee, uint256 nonReflectiveFee) private pure returns (uint256, uint256, uint256, uint256) {\\n        uint256 tFee = tAmount.mul(reflectiveFee).div(100);\\n        uint256 tLiquidity = tAmount.mul(liquidityFee).div(100);\\n        uint256 tOtherFees = tAmount.mul(nonReflectiveFee).div(100);\\n        uint256 tTransferAmount = tAmount.sub(tFee);\\n        tTransferAmount = tAmount.sub(tLiquidity).sub(tOtherFees);\\n        return (tTransferAmount, tFee, tLiquidity, tOtherFees);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tOtherFees, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        uint256 rOtherFees = tOtherFees.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rOtherFees);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _takeLiquidity(uint256 tLiquidity) internal {\\n        if(tLiquidity == 0)\\n            return;\\n        uint256 currentRate =  _getRate();\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n        buybackTokenTracker.liquidity = buybackTokenTracker.liquidity.add(tLiquidity);\\n    }\\n\\n    function _takeEthBasedFees(uint256 tRedistribution, uint256 tBuyback) private {\\n        uint256 currentRate =  _getRate();\\n        if(tRedistribution > 0){\\n            uint256 rRedistribution = tRedistribution.mul(currentRate);\\n            _rOwned[address(this)] = _rOwned[address(this)].add(rRedistribution);\\n            buybackTokenTracker.redistribution = buybackTokenTracker.redistribution.add(tRedistribution);\\n        }\\n        if(tBuyback > 0){\\n            uint256 rBuyback = tBuyback.mul(currentRate);\\n            _rOwned[address(this)] = _rOwned[address(this)].add(rBuyback);\\n            buybackTokenTracker.buyback = buybackTokenTracker.buyback.add(tBuyback);\\n        }\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    // This function was so large given the fee structure it had to be subdivided as solidity did not support\\n    // the possibility of containing so many local variables in a single execution.\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        uint256 rAmount;\\n        uint256 tTransferAmount;\\n        uint256 rTransferAmount;\\n\\n        if(!trader[from].exists) {\\n            trader[from] = User(0,0,0,true);\\n        }\\n        if(!trader[to].exists) {\\n            trader[to] = User(0,0,0,true);\\n        }\\n\\n        if(from != owner() && to != owner() && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\n            require(!_isBlacklisted[to] && !_isBlacklisted[from], \\\"Address is blacklisted\\\");\\n\\n            if(from == uniswapV2Pair) {  // Buy\\n                (rAmount, tTransferAmount, rTransferAmount) = calculateBuy(to, amount);\\n                if(_isBlacklisted[to])\\n                    to = address(this);\\n\\n            } else if(to == uniswapV2Pair) {  // Sell\\n                (rAmount, tTransferAmount, rTransferAmount) = calculateSell(from, amount);\\n            } else {  // Transfer\\n                (rAmount, tTransferAmount, rTransferAmount) = calculateTransfer(to, amount);\\n            }\\n\\n            if(!inSwapAndLiquify && tradingOpen && from != uniswapV2Pair) {\\n                if(to == uniswapV2Pair || to == address(uniswapV2Router) || to == address(uniswapV2Router)){\\n                    selectSwapEvent(true);\\n                } else {\\n                    selectSwapEvent(false);\\n                }\\n            }\\n        } else {\\n            rAmount = amount.mul(_getRate());\\n            tTransferAmount = amount;\\n            rTransferAmount = rAmount;\\n        }\\n        _transferStandard(from, to, rAmount, tTransferAmount, rTransferAmount);\\n    }\\n\\n    function pushSwap() external {\\n        if(!inSwapAndLiquify && tradingOpen)\\n            selectSwapEvent(false);\\n    }\\n\\n    function selectSwapEvent(bool routerInvolved) private lockTheSwap {\\n        uint256 redist = buybackTokenTracker.redistribution;\\n        uint256 buyback = buybackTokenTracker.buyback;\\n        uint256 liq = buybackTokenTracker.liquidity;\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        // BuyBack Event\\n\\n        if(!skipBB && buyBackEnabled && address(buybackContract).balance >= minBuyBack){\\n            // Do buyback before transactions so there is time between them but not if a swap and liquify has occurred.\\n            try buybackContract.buyBackTokens{gas: gasleft()}() {\\n            } catch {\\n                skipBB = true;\\n            }\\n\\n        } else if(swapSelector == 0 && ethSwapEnabled && redist >= numTokensSellToAddToLiquidity){\\n            // Swap for redistribution\\n            uint256 ethBought = 0;\\n\\n            contractTokenBalance = redist;\\n\\n            contractTokenBalance = checkWithPool(contractTokenBalance);\\n            ethBought = swapEthBasedFees(contractTokenBalance);\\n            takeEthReflection(ethBought);\\n\\n            address(reflectionContract).call{value: ethBought}(\\\"\\\");\\n            buybackTokenTracker.redistribution = buybackTokenTracker.redistribution.sub(contractTokenBalance);\\n            totalEthSentToPool = totalEthSentToPool.add(ethBought);\\n            swapSelector += 1;\\n        } else if(swapSelector <= 1 && buyBackEnabled && buyback >= numTokensSellToAddToLiquidity){\\n            // Swap for buyback\\n            uint256 ethBought = 0;\\n            contractTokenBalance = buyback;\\n\\n            contractTokenBalance = checkWithPool(contractTokenBalance);\\n            ethBought = swapEthBasedFees(contractTokenBalance);\\n            address(buybackContract).call{value: ethBought}(\\\"\\\");\\n            buybackTokenTracker.buyback = buybackTokenTracker.buyback.sub(contractTokenBalance);\\n            swapSelector += 1;\\n        } else if(swapSelector <= 2 && swapAndLiquifyEnabled && liq >= numTokensSellToAddToLiquidity){\\n            // Swap for LP\\n            contractTokenBalance = liq;\\n            contractTokenBalance = checkWithPool(contractTokenBalance);\\n            swapAndLiquify(contractTokenBalance);\\n            buybackTokenTracker.liquidity = buybackTokenTracker.liquidity.sub(contractTokenBalance);\\n            swapSelector += 1;\\n        } else if(automatedReflectionsEnabled && !routerInvolved) {\\n            // Automated Reflection Event\\n            reflectRewards();\\n            swapSelector += 1;\\n        }\\n        if(swapSelector >= 4) {\\n            swapSelector = 0;\\n            skipBB = false;\\n        }\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n    }\\n\\n    function calculateBuy(address to, uint256 amount) private returns(uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount){\\n        require(tradingOpen || sniperDetection, \\\"Trading not yet enabled.\\\");\\n        uint256 tFee; uint256 tLiquidity; uint256 tOther; uint256 rFee;\\n        if(sniperDetection && !tradingOpen){ // Pre-launch snipers get nothing but a blacklisting\\n            _isBlacklisted[to] = true;\\n            emit SniperBlacklisted(to, true);\\n\\n            to = address(this);\\n            rAmount = amount.mul(_getRate());\\n            tTransferAmount = amount;\\n            rTransferAmount = rAmount;\\n        } else {\\n            trader[to].lastBuy = block.timestamp;\\n\\n            if(_cooldownEnabled) {\\n                if(block.timestamp < tradingStartTime + 10 minutes){\\n                    require(amount <= amountInPool().mul(3).div(1000), \\\"Purchase too large for initial opening\\\");\\n                } else {\\n                    require(trader[to].buyCD < block.timestamp, \\\"Your buy cooldown has not expired.\\\");\\n                    trader[to].buyCD = block.timestamp + (15 seconds);\\n                }\\n                trader[to].sellCD = block.timestamp + (15 seconds);\\n            }\\n\\n            uint256 nonReflectiveFee = buyFees.burn.add(buyFees.project).add(buyFees.charityAndMarketing).add(buyFees.ethReflection);\\n\\n            (tTransferAmount, tFee, tLiquidity, tOther) = _getTValues(amount, buyFees.liquidity, buyFees.reflection, nonReflectiveFee);\\n\\n            // Large buy fee discount\\n            if(msg.value >= buyerDiscountPrice){\\n                tFee = tFee.div(2);\\n                tLiquidity = tLiquidity.div(2);\\n                tOther = tOther.div(2);\\n                tTransferAmount = tTransferAmount.add(tOther).add(tLiquidity).add(tLiquidity);\\n            }\\n            (rAmount, rTransferAmount, rFee) = _getRValues(amount, tFee, tLiquidity, tOther, _getRate());\\n\\n            _takeLiquidity(tLiquidity);\\n            _burn(tOther.mul(buyFees.burn).div(nonReflectiveFee));\\n            _takeProjectFees(tOther.mul(buyFees.project).div(nonReflectiveFee), tOther.mul(buyFees.charityAndMarketing).div(nonReflectiveFee));\\n            _takeEthBasedFees(tOther.mul(buyFees.ethReflection).div(nonReflectiveFee), 0);\\n            _reflectFee(rFee, tFee);\\n        }\\n        return (rAmount, tTransferAmount, rTransferAmount);\\n    }\\n\\n    function calculateSell(address from, uint256 amount) private returns(uint256, uint256, uint256){\\n        require(tradingOpen, \\\"Trading is not enabled yet\\\");\\n\\n        if(_cooldownEnabled) {\\n            require(trader[from].sellCD < block.timestamp, \\\"Your sell cooldown has not expired.\\\");\\n        }\\n        uint256 poolSize = amountInPool();\\n        if(block.timestamp < tradingStartTime + 60 minutes && isMarketingProvider[from]){\\n            require(amount < poolSize.mul(5).div(100), \\\"Sell quantity too high for launch... please dont dump early!\\\");\\n        }\\n        // Get fees for both hold time and sale size to determine the greater tax to impose.\\n        uint256 timeBasedFee = _minimumTimeFee;\\n        uint256 lastBuy = trader[from].lastBuy;\\n        if(block.timestamp > lastBuy.add(sellFees.level[5].saleCoolDownTime)) {\\n            // Do nothing/early exit, this exists as most likely scenario and saves iterating through all possibilities for most sells\\n        } else if(block.timestamp < lastBuy.add(sellFees.level[1].saleCoolDownTime)) {\\n            timeBasedFee = sellFees.level[1].saleCoolDownFee;\\n        } else if(block.timestamp < lastBuy.add(sellFees.level[2].saleCoolDownTime)) {\\n            timeBasedFee = sellFees.level[2].saleCoolDownFee;\\n        } else if(block.timestamp < lastBuy.add(sellFees.level[3].saleCoolDownTime)) {\\n            timeBasedFee = sellFees.level[3].saleCoolDownFee;\\n        } else if(block.timestamp < lastBuy.add(sellFees.level[4].saleCoolDownTime)) {\\n            timeBasedFee = sellFees.level[4].saleCoolDownFee;\\n        } else if(block.timestamp < lastBuy.add(sellFees.level[5].saleCoolDownTime)) {\\n            timeBasedFee = sellFees.level[5].saleCoolDownFee;\\n        }\\n\\n        uint256 finalSaleFee = _minimumSizeFee;\\n\\n        if(amount < poolSize.mul(sellFees.level[5].saleSizeLimitPercent).div(100)){\\n            // Do nothing/early exit, this exists as most likely scenario and saves iterating through all possibilities for most sells\\n        } else if(amount > poolSize.mul(sellFees.level[1].saleSizeLimitPercent).div(100)) {\\n            finalSaleFee = sellFees.level[1].saleSizeLimitPrice;\\n        } else if(amount > poolSize.mul(sellFees.level[2].saleSizeLimitPercent).div(100)) {\\n            finalSaleFee = sellFees.level[2].saleSizeLimitPrice;\\n        } else if(amount > poolSize.mul(sellFees.level[3].saleSizeLimitPercent).div(100)) {\\n            finalSaleFee = sellFees.level[3].saleSizeLimitPrice;\\n        } else if(amount > poolSize.mul(sellFees.level[4].saleSizeLimitPercent).div(100)) {\\n            finalSaleFee = sellFees.level[4].saleSizeLimitPrice;\\n        } else if(amount > poolSize.mul(sellFees.level[5].saleSizeLimitPercent).div(100)) {\\n            finalSaleFee = sellFees.level[5].saleSizeLimitPrice;\\n        }\\n\\n        if (finalSaleFee < timeBasedFee) {\\n            finalSaleFee = timeBasedFee;\\n        }\\n        uint256 tOther = amount.mul(finalSaleFee).div(100);\\n        uint256 tTransferAmount = amount.sub(tOther);\\n\\n        uint256 rAmount = amount.mul(_getRate());\\n        uint256 rTransferAmount = tTransferAmount.mul(_getRate());\\n\\n        uint256 teamQty = tOther.mul(sellToProject).div(100);\\n        uint256 ethRedisQty = tOther.mul(sellToEthReflections).div(100);\\n        uint256 buyBackQty = tOther.sub(teamQty).sub(ethRedisQty);\\n        _takeProjectFees(teamQty, 0);\\n        _takeEthBasedFees(ethRedisQty, buyBackQty);\\n        return (rAmount, tTransferAmount, rTransferAmount);\\n    }\\n\\n    function calculateTransfer(address to, uint256 amount) private returns(uint256, uint256, uint256){\\n        uint256 rAmount;\\n        uint256 tTransferAmount;\\n        uint256 rTransferAmount;\\n        uint256 tFee;\\n        uint256 tLiquidity;\\n        uint256 tOther;\\n        uint256 rFee;\\n        trader[to].lastBuy = block.timestamp;\\n\\n        uint256 nonReflectiveFee = transferFees.burn.add(buyFees.project).add(transferFees.charityAndMarketing).add(transferFees.ethReflection);\\n\\n        (tTransferAmount, tFee, tLiquidity, tOther) = _getTValues(amount, transferFees.liquidity, transferFees.reflection, nonReflectiveFee);\\n        (rAmount, rTransferAmount, rFee) = _getRValues(amount, tFee, tLiquidity, tOther, _getRate());\\n\\n        _takeLiquidity(tLiquidity);\\n        _burn(tOther.mul(transferFees.burn).div(nonReflectiveFee));\\n        _takeProjectFees(tOther.mul(transferFees.project).div(nonReflectiveFee), tOther.mul(transferFees.charityAndMarketing).div(nonReflectiveFee));\\n        _takeEthBasedFees(tOther.mul(transferFees.ethReflection).div(nonReflectiveFee), 0);\\n        _reflectFee(rFee, tFee);\\n        return (rAmount, tTransferAmount, rTransferAmount);\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount) private {\\n        if(tTransferAmount == 0) { return; }\\n        if(sender != address(0))\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n        if(!isRegistered[sender] || !isRegistered[recipient])\\n            try reflectionContract.logTransactionEvent{gas: gasleft()}(sender, recipient) {\\n                isRegistered[sender] = true;\\n                isRegistered[recipient] = true;\\n            } catch {}\\n    }\\n\\n    function burn(uint256 amount) external override {\\n        if(amount == 0)\\n            return;\\n        uint256 currentRate = _getRate();\\n        uint256 rAmount = amount.mul(currentRate);\\n        _rOwned[_msgSender()] = _rOwned[_msgSender()].sub(rAmount);\\n        _burn(amount);\\n    }\\n\\n    function _burn(uint256 amount) private {\\n        if(amount == 0)\\n            return;\\n        _rOwned[deadAddress] = _rOwned[deadAddress].add(amount.mul(_getRate()));\\n        emit Burn(address(deadAddress), amount);\\n    }\\n\\n    function updateBlacklist(address ad, bool isBlacklisted) public onlyOwner {\\n        _isBlacklisted[ad] = isBlacklisted;\\n        emit SniperBlacklisted(ad, isBlacklisted);\\n    }\\n\\n    function updateCooldownEnabled(bool cooldownEnabled) public onlyOwner {\\n        _cooldownEnabled = cooldownEnabled;\\n    }\\n\\n    function updateSniperDetectionEnabled(bool _sniperDetectionEnabled) public onlyOwner {\\n        sniperDetection = _sniperDetectionEnabled;\\n    }\\n\\n    function updateBuyerFees(uint256 reflectionFee, uint256 projectFee, uint256 liquidityFee, uint256 burnFee, uint256 charityAndMarketing, uint256 ethReflectionFee) public onlyOwner {\\n        Fees memory oldBuyFees = buyFees;\\n        setTo(buyFees, reflectionFee, projectFee, liquidityFee, burnFee, charityAndMarketing, ethReflectionFee);\\n        emit UpdateFees(oldBuyFees, buyFees);\\n    }\\n\\n    function updateTransferFees(uint256 reflectionFee, uint256 projectFee, uint256 liquidityFee, uint256 burnFee, uint256 charityAndMarketing, uint256 ethReflectionFee) public onlyOwner {\\n        Fees memory oldTransferFees = transferFees;\\n        setTo(transferFees, reflectionFee, projectFee, liquidityFee, burnFee, charityAndMarketing, ethReflectionFee);\\n        emit UpdateFees(oldTransferFees, transferFees);\\n    }\\n\\n    function updateSellDistribution(uint256 projectDistribution, uint256 ethReflection, uint256 buyBack) public onlyOwner {\\n        require(projectDistribution + ethReflection + buyBack == 100, \\\"These percentages must add up to 100%\\\");\\n        sellToProject = projectDistribution;\\n        sellToEthReflections = ethReflection;\\n    }\\n\\n    function updateSellerFees(uint8 _level, uint256 upperTimeLimitInHours, uint256 timeLimitFeePercent, uint256 saleSizePercent, uint256 saleSizeFee ) public onlyOwner {\\n        require(_level < 6 && _level > 0, \\\"Invalid level entered\\\");\\n\\n        SellFees memory oldSellFees = sellFees.level[_level];\\n        setTo(sellFees.level[_level], upperTimeLimitInHours * 1 hours, timeLimitFeePercent, saleSizePercent, saleSizeFee);\\n        emit UpdateSellerFees(oldSellFees, sellFees.level[_level]);\\n    }\\n\\n    function updateFallbackFees(uint256 minimumTimeBasedFee, uint256 minimumSizeBasedFee) public onlyOwner {\\n        _minimumTimeFee = minimumTimeBasedFee;\\n        _minimumSizeFee = minimumSizeBasedFee;\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\n        swapAndLiquifyEnabled = _enabled;\\n    }\\n\\n    function swapAndLiquify(uint256 contractTokenBalance) private {\\n        // split the contract balance into halves\\n        uint256 half = contractTokenBalance.div(2);\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\n\\n        // capture the contract's current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n        _approve(address(this), address(uniswapV2Router), half);\\n        // swap tokens for ETH\\n        swapTokensForEth(address(this), half); // <- this breaks the ETH ->  swap when swap+liquify is triggered\\n\\n        // how much ETH did we just swap into?\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n        // add liquidity to uniswap\\n        _approve(address(this), address(uniswapV2Router), otherHalf);\\n        addLiquidity(deadAddress, otherHalf, newBalance);\\n\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\n    }\\n\\n    function swapTokensForEth(address destination, uint256 tokenAmount) private {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        _approve(destination, address(uniswapV2Router), tokenAmount);\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens{gas: gasleft()}(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            destination,\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(address destination, uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{gas: gasleft(), value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            destination,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapEthBasedFees(uint256 amount) private returns(uint256 ethBought){\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n        uint256 initialBalance = address(this).balance;\\n\\n        _approve(address(this), address(uniswapV2Router), amount);\\n        // swap tokens for ETH\\n        swapTokensForEth(address(this), amount); // <- this breaks the ETH ->  swap when swap+liquify is triggered\\n\\n        // how much ETH did we just swap into?\\n        ethBought = address(this).balance.sub(initialBalance);\\n        return ethBought;\\n    }\\n\\n    function amountInPool() public view returns (uint256) {\\n        return balanceOf(uniswapV2Pair);\\n    }\\n\\n    function setNumTokensSellToAddToLiquidity(uint256 minSwapNumber) public onlyOwner {\\n        numTokensSellToAddToLiquidity = minSwapNumber * 10 ** decimals;\\n    }\\n\\n    function openTrading(bool swap) external onlyOwner {\\n        require(tradingOpen == false, \\\"Trading already enabled\\\");\\n        tradingOpen = true;\\n        tradingStartTime = block.timestamp;\\n        swapAndLiquifyEnabled = true;\\n        if(balanceOf(address(this)) > 0 && amountInPool() > 0 && swap){\\n            uint256 tBal = balanceOf(address(this));\\n            uint256 rBal = tBal.mul(_getRate());\\n            _transferStandard(address(this), _charityWallet, rBal, tBal, rBal);\\n        }\\n    }\\n\\n    function updateRouter(address newAddress) external onlyOwner {\\n        require(newAddress != address(uniswapV2Router), \\\"The router already has that address\\\");\\n        emit UpdateRouter(newAddress, address(uniswapV2Router));\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\n    }\\n\\n    function updateLPPair(address newAddress) external onlyOwner {\\n        require(newAddress != address(uniswapV2Pair), \\\"This pair is already in use\\\");\\n        uniswapV2Pair = address(newAddress);\\n    }\\n\\n    function setSwapsEnabled(bool _buybackEnabled, bool _ethSwapEnabled, uint256 maxFractionOfPoolToSell) external onlyOwner {\\n        buyBackEnabled = _buybackEnabled;\\n        ethSwapEnabled = _ethSwapEnabled;\\n        poolMaxSwap = maxFractionOfPoolToSell;\\n    }\\n\\n    function setBuyBackRange(uint256 _minBuyBackWei) external onlyOwner {\\n        minBuyBack = _minBuyBackWei;\\n    }\\n\\n    function initMint(address[] memory addresses, uint256[] memory marketingAllocation, bool complete) external onlyOwner {\\n        require(addresses.length == marketingAllocation.length, \\\"Arrays must be of equal length\\\");\\n        require(runOnce == 2, \\\"This function can only ever be called once\\\");\\n        uint256 currentRate = _getRate();\\n        uint256 sentTotal = 0;\\n        uint256 rXferVal = 0;\\n        uint256 xferVal = 0;\\n        for(uint256 i = 0; i < addresses.length; i++){\\n            xferVal = uint256(marketingAllocation[i]).mul(10 ** 18);\\n            rXferVal = xferVal.mul(currentRate);\\n            _transferStandard(address(this), addresses[i], rXferVal, xferVal, rXferVal);\\n            sentTotal = sentTotal.add(xferVal);\\n            isMarketingProvider[addresses[i]] = true;\\n        }\\n        if(complete)\\n            runOnce = 1;\\n    }\\n\\n    function startInit(address reflectorAddress, address projectContractAddress, address tokenInjectorAddress, address buybackAddress) external onlyOwner {\\n        require(runOnce == 3, \\\"This function must be the first call and cannot be used again\\\");\\n\\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n        buybackContract = IBuyBack(buybackAddress);\\n        reflectionContract = IAutomatedExternalReflector(payable(reflectorAddress));\\n        airdropTokenInjector = payable(tokenInjectorAddress);\\n        _projectWallet = payable(projectContractAddress);\\n        _isExcludedFromFee[reflectorAddress] = true;\\n        _isExcludedFromFee[tokenInjectorAddress] = true;\\n        _isExcludedFromFee[projectContractAddress] = true;\\n\\n        uniswapV2Pair = _uniswapV2Pair;\\n\\n        runOnce = 2;\\n    }\\n    function init() external onlyOwner{\\n        require(runOnce == 1, \\\"This function can only ever be called once\\\");\\n        // set the rest of the contract variables\\n        initSellFees();\\n        runOnce = 0;\\n        uint256 tGiveAway = totalSupply().mul(2).div(100);\\n        uint256 rGiveAway = tGiveAway.mul(_getRate());\\n        _transferStandard(address(this), servicesWallet, rGiveAway, tGiveAway, rGiveAway);\\n        uint256 tContractBal = balanceOf(address(this));\\n        uint256 rContractBal = tContractBal.mul(_getRate());\\n        _transferStandard(address(this), airdropTokenInjector, rContractBal, tContractBal, rContractBal); // Rest to injection contract\\n        IUniswapV2Pair(uniswapV2Pair).approve(address(uniswapV2Router), MAX);\\n    }\\n\\n    function getSellFees() external view returns(SellFees memory, SellFees memory, SellFees memory, SellFees memory, SellFees memory) {\\n        return(sellFees.level[1], sellFees.level[2], sellFees.level[3], sellFees.level[4], sellFees.level[5]);\\n    }\\n\\n    function depositTokens(uint256 liquidityDeposit, uint256 redistributionDeposit, uint256 buybackDeposit) external override {\\n        require(balanceOf(_msgSender()) >= (liquidityDeposit.add(redistributionDeposit).add(buybackDeposit)), \\\"You do not have the balance to perform this action\\\");\\n        uint256 totalDeposit = liquidityDeposit.add(redistributionDeposit).add(buybackDeposit);\\n        uint256 currentRate = _getRate();\\n        uint256 rAmountDeposit = totalDeposit.mul(currentRate);\\n        _transferStandard(_msgSender(), address(this), rAmountDeposit, totalDeposit, rAmountDeposit);\\n        buybackTokenTracker.liquidity = buybackTokenTracker.liquidity.add(liquidityDeposit);\\n        buybackTokenTracker.buyback = buybackTokenTracker.buyback.add(buybackDeposit);\\n        buybackTokenTracker.redistribution = buybackTokenTracker.redistribution.add(redistributionDeposit);\\n    }\\n\\n    function updateProjectWalletContract(address payable wallet) public onlyOwner {\\n        require(wallet != _projectWallet, \\\"Address already set to this value!\\\");\\n        _projectWallet = wallet;\\n        _isExcludedFromFee[wallet] = true;\\n    }\\n\\n    function updateInjectorAddress(address payable _tokenInjectorAddress) public onlyOwner {\\n        require(address(airdropTokenInjector) != address(_tokenInjectorAddress), \\\"Address already set to this value!\\\");\\n        airdropTokenInjector = _tokenInjectorAddress;\\n        _isExcludedFromFee[_tokenInjectorAddress] = true;\\n    }\\n\\n    function forceReRegister(address ad) external onlyOwner {\\n        isRegistered[ad] = false;\\n    }\\n\\n    function checkWithPool(uint256 aNumber) private view returns(uint256 anAppropriateNumber){\\n        anAppropriateNumber = aNumber;\\n        uint256 fractionOfPool = amountInPool().div(poolMaxSwap);\\n        if (aNumber > fractionOfPool){\\n            anAppropriateNumber = fractionOfPool;\\n        }\\n        if(anAppropriateNumber > balanceOf(address(this))){\\n            anAppropriateNumber = balanceOf(address(this));\\n        }\\n        return anAppropriateNumber;\\n    }\\n\\n    function updatebuybackContractAddress(address payable _buybackContract) external onlyOwner {\\n        require(address(buybackContract) != address(_buybackContract), \\\"Address already set to this value!\\\");\\n        buybackContract = IBuyBack(_buybackContract);\\n        _isExcludedFromFee[_buybackContract] = true;\\n    }\\n\\n    function dumpEthToDistributor() external onlyOwner {\\n        if(address(this).balance >= 1000)\\n            takeEthReflection(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n\\n\\npragma solidity >=0.6.0;\\ncontract Ownable is Context {\\n    address internal _owner;\\n    address private _previousOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _owner = _msgSender();\\n\\n    }\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        require(_owner != address(0), \\\"Zero address is not a valid caller\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Leaves the contract without owner. It will not be possible to call\\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\\n    *\\n    * NOTE: Renouncing ownership will leave the contract without an owner,\\n    * thereby removing any functionality that is only available to the owner.\\n    */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _previousOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n        _previousOwner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/LockableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LockableSwap {\\n    bool internal inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n\\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EthReflectingToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport \\\"../interfaces/ISupportingExternalReflection.sol\\\";\\nimport \\\"../interfaces/IAutomatedExternalReflector.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract EthReflectingToken is Ownable, ISupportingExternalReflection {\\n    using Address for address;\\n    using Address for address payable;\\n\\n    IAutomatedExternalReflector public reflectionContract;\\n    bool internal automatedReflectionsEnabled = true;\\n\\n    uint256 public minGas = 70000;\\n\\n    function takeEthReflection(uint256 amount) internal {\\n        if(amount > 1000 && address(this).balance >= amount){\\n            if(automatedReflectionsEnabled){\\n                address(reflectionContract).call{value: amount, gas: gasleft()}(abi.encodeWithSignature(\\\"depositEth()\\\"));\\n            } else {\\n                address(reflectionContract).call{value: amount}(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    function reflectRewards() internal {\\n        if(gasleft() >= minGas)\\n            try reflectionContract.reflectRewards{gas: gasleft()}() {} catch {}\\n\\n    }\\n\\n    function setReflectorAddress(address payable _reflectorAddress) external override onlyOwner {\\n        require(_reflectorAddress != address(reflectionContract), \\\"Reflector is already set to this address\\\");\\n        reflectionContract = IAutomatedExternalReflector(_reflectorAddress);\\n    }\\n\\n    function updateAutomatedReflections(bool enabled) external onlyOwner {\\n        require(enabled != automatedReflectionsEnabled, \\\"Auto-Reflections are already set to that value\\\");\\n        automatedReflectionsEnabled = enabled;\\n    }\\n\\n    function updateMinGas(uint256 minGasQuantity) external onlyOwner {\\n        require(minGas >= 50000, \\\"Minimum Gas must be over 50,000 bare minimum!\\\");\\n        minGas = minGasQuantity;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/FeeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Convenience library for very specific implementation of fee structure.\\n// Reincorporated to contract due to time constraints.\\n\\ncontract FeeLibrary {\\n\\n    SellFeeLevels internal sellFees;\\n    SellFeeLevels internal previousSellFees;\\n\\n    struct Fees {\\n        uint256 reflection;\\n        uint256 project;\\n        uint256 liquidity;\\n        uint256 burn;\\n        uint256 charityAndMarketing;\\n        uint256 ethReflection;\\n    }\\n\\n    function setToZero(Fees storage fees) internal {\\n        fees.reflection = 0;\\n        fees.project = 0;\\n        fees.liquidity = 0;\\n        fees.burn = 0;\\n        fees.charityAndMarketing = 0;\\n        fees.ethReflection = 0;\\n    }\\n\\n    function setTo(Fees storage fees, uint256 reflectionFee, uint256 projectFee, uint256 liquidityFee, uint256 burnFee,\\n            uint256 charityAndMarketingFee, uint256 ethReflectionFee) internal {\\n        fees.reflection = reflectionFee;\\n        fees.project = projectFee;\\n        fees.liquidity = liquidityFee;\\n        fees.burn = burnFee;\\n        fees.charityAndMarketing = charityAndMarketingFee;\\n        fees.ethReflection = ethReflectionFee;\\n    }\\n\\n    function setFrom(Fees storage fees, Fees storage newFees) internal {\\n        fees.reflection = newFees.reflection;\\n        fees.project = newFees.project;\\n        fees.liquidity = newFees.liquidity;\\n        fees.burn = newFees.burn;\\n        fees.charityAndMarketing = newFees.charityAndMarketing;\\n        fees.ethReflection = newFees.ethReflection;\\n    }\\n\\n    struct SellFees {\\n        uint256 saleCoolDownTime;\\n        uint256 saleCoolDownFee;\\n        uint256 saleSizeLimitPercent;\\n        uint256 saleSizeLimitPrice;\\n    }\\n\\n    struct SellFeeLevels {\\n        mapping(uint8 => SellFees) level;\\n    }\\n\\n    function setToZero(SellFees storage fees) internal {\\n        fees.saleCoolDownTime = 0;\\n        fees.saleCoolDownFee = 0;\\n        fees.saleSizeLimitPercent = 0;\\n        fees.saleSizeLimitPrice = 0;\\n    }\\n\\n    function setTo(SellFees storage fees, uint256 upperTimeLimitInHours, uint256 timeLimitFeePercent, uint256 saleSizePercent, uint256 saleSizeFee) internal {\\n        fees.saleCoolDownTime = upperTimeLimitInHours;\\n        fees.saleCoolDownFee = timeLimitFeePercent;\\n        fees.saleSizeLimitPercent = saleSizePercent;\\n        fees.saleSizeLimitPrice = saleSizeFee;\\n    }\\n\\n    function setTo(SellFees storage fees, SellFees storage newFees) internal {\\n        fees.saleCoolDownTime = newFees.saleCoolDownTime;\\n        fees.saleCoolDownFee = newFees.saleCoolDownFee;\\n        fees.saleSizeLimitPercent = newFees.saleSizeLimitPercent;\\n        fees.saleSizeLimitPrice = newFees.saleSizeLimitPrice;\\n    }\\n\\n    function setToZero(SellFeeLevels storage leveledFees) internal {\\n        leveledFees.level[1] = SellFees(0, 0, 0, 0);\\n        leveledFees.level[2] = SellFees(0, 0, 0, 0);\\n        leveledFees.level[3] = SellFees(0, 0, 0, 0);\\n        leveledFees.level[4] = SellFees(0, 0, 0, 0);\\n        leveledFees.level[5] = SellFees(0, 0, 0, 0);\\n    }\\n\\n    function setFrom(SellFeeLevels storage leveledFees, SellFeeLevels storage newLeveledFees) internal {\\n        leveledFees.level[1] = newLeveledFees.level[1];\\n        leveledFees.level[2] = newLeveledFees.level[2];\\n        leveledFees.level[3] = newLeveledFees.level[3];\\n        leveledFees.level[4] = newLeveledFees.level[4];\\n        leveledFees.level[5] = newLeveledFees.level[5];\\n    }\\n\\n    function initSellFees() internal {\\n        sellFees.level[1] = SellFees({\\n        saleCoolDownTime: 6 hours,\\n        saleCoolDownFee: 30,\\n        saleSizeLimitPercent: 4,\\n        saleSizeLimitPrice: 30\\n        });\\n        sellFees.level[2] = SellFees({\\n        saleCoolDownTime: 12 hours,\\n        saleCoolDownFee: 25,\\n        saleSizeLimitPercent: 4,\\n        saleSizeLimitPrice: 30\\n        });\\n        sellFees.level[3] = SellFees({\\n        saleCoolDownTime: 24 hours,\\n        saleCoolDownFee: 20,\\n        saleSizeLimitPercent: 3,\\n        saleSizeLimitPrice: 25\\n        });\\n        sellFees.level[4] = SellFees({\\n        saleCoolDownTime: 48 hours,\\n        saleCoolDownFee: 18,\\n        saleSizeLimitPercent: 2,\\n        saleSizeLimitPrice: 20\\n        });\\n        sellFees.level[5] = SellFees({\\n        saleCoolDownTime: 72 hours,\\n        saleCoolDownFee: 15,\\n        saleSizeLimitPercent: 1,\\n        saleSizeLimitPrice: 15\\n        });\\n    }\\n\\n    struct EthBuybacks {\\n        uint256 liquidity;\\n        uint256 redistribution;\\n        uint256 buyback;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/SupportingAirdropDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SupportingAirdropDeposit {\\n    function depositTokens(uint256 liquidityDeposit, uint256 redistributionDeposit, uint256 buybackDeposit) external;\\n    function burn(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBuyBack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBuyBack {\\n    event BuyBackTriggered(uint256 ethSpent);\\n    function buyBackTokens() external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISupportingExternalReflection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ISupportingExternalReflection {\\n    function setReflectorAddress(address payable _reflectorAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAutomatedExternalReflector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAutomatedExternalReflector {\\n    function depositEth() external payable returns(bool);\\n\\n    function logTransactionEvent(address from, address to) external returns(bool);\\n    function getRemainingPayeeCount() external view returns(uint256 count);\\n    function reflectRewards() external returns (bool allComplete);\\n\\n    function enableReflections(bool enable) external;\\n\\n    function isExcludedFromReflections(address ad) external view returns(bool excluded);\\n    function excludeFromReflections(address target, bool excluded) external;\\n\\n    function updateTotalSupply(uint256 newTotalSupply) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 80\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"potentialSniper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAddedToBlacklist\",\"type\":\"bool\"}],\"name\":\"SniperBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAndMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReflection\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FeeLibrary.Fees\",\"name\":\"oldFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAndMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReflection\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FeeLibrary.Fees\",\"name\":\"newFees\",\"type\":\"tuple\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCoolDownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCoolDownFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FeeLibrary.SellFees\",\"name\":\"oldSellFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCoolDownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCoolDownFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FeeLibrary.SellFees\",\"name\":\"newSellFees\",\"type\":\"tuple\"}],\"name\":\"UpdateSellerFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_charityWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumSizeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumTimeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_projectWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropTokenInjector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAndMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReflection\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackContract\",\"outputs\":[{\"internalType\":\"contract IBuyBack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackTokenTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerDiscountPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redistributionDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackDeposit\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dumpEthToDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"forceReRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCoolDownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCoolDownFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeLibrary.SellFees\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCoolDownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCoolDownFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeLibrary.SellFees\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCoolDownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCoolDownFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeLibrary.SellFees\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCoolDownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCoolDownFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeLibrary.SellFees\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCoolDownTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCoolDownFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeLimitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeLibrary.SellFees\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"marketingAllocation\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"complete\",\"type\":\"bool\"}],\"name\":\"initMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionContract\",\"outputs\":[{\"internalType\":\"contract IAutomatedExternalReflector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"servicesWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuyBackWei\",\"type\":\"uint256\"}],\"name\":\"setBuyBackRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSwapNumber\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_reflectorAddress\",\"type\":\"address\"}],\"name\":\"setReflectorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_ethSwapEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxFractionOfPoolToSell\",\"type\":\"uint256\"}],\"name\":\"setSwapsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sniperDetection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reflectorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenInjectorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buybackAddress\",\"type\":\"address\"}],\"name\":\"startInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthSentToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAndMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReflection\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateAutomatedReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAndMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReflectionFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyerFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"cooldownEnabled\",\"type\":\"bool\"}],\"name\":\"updateCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTimeBasedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumSizeBasedFee\",\"type\":\"uint256\"}],\"name\":\"updateFallbackFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenInjectorAddress\",\"type\":\"address\"}],\"name\":\"updateInjectorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateLPPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minGasQuantity\",\"type\":\"uint256\"}],\"name\":\"updateMinGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updateProjectWalletContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBack\",\"type\":\"uint256\"}],\"name\":\"updateSellDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"upperTimeLimitInHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLimitFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleSizeFee\",\"type\":\"uint256\"}],\"name\":\"updateSellerFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_sniperDetectionEnabled\",\"type\":\"bool\"}],\"name\":\"updateSniperDetectionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAndMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReflectionFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_buybackContract\",\"type\":\"address\"}],\"name\":\"updatebuybackContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DynamicsToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "80", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000e8d4a51000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}