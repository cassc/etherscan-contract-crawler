{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v4/tokens/ERC721LA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../extensions/Burnable.sol\\\";\\nimport \\\"../extensions/WithOperatorRegistry.sol\\\";\\nimport \\\"../extensions/AirDropable.sol\\\";\\nimport \\\"./IERC721LA.sol\\\";\\nimport \\\"../extensions/Pausable.sol\\\";\\nimport \\\"../extensions/Whitelistable.sol\\\";\\n// import \\\"../extensions/PermissionedTransfers.sol\\\";\\nimport \\\"../extensions/LAInitializable.sol\\\";\\nimport \\\"../libraries/LANFTUtils.sol\\\";\\nimport \\\"../libraries/BPS.sol\\\";\\nimport \\\"../libraries/CustomErrors.sol\\\";\\nimport \\\"../platform/royalties/RoyaltiesState.sol\\\";\\nimport \\\"./ERC721State.sol\\\";\\nimport \\\"./ERC721LACore.sol\\\";\\n\\n/**\\n * @notice LiveArt ERC721 implementation contract\\n * Supports multiple edtioned NFTs and gas optimized batch minting\\n */\\ncontract ERC721LA is ERC721LACore, Burnable, AirDropable, Whitelistable {\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                            Royalties\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    function setRoyaltyRegistryAddress(\\n        address _royaltyRegistry\\n    ) public onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        state._royaltyRegistry = IRoyaltiesRegistry(_royaltyRegistry);\\n    }\\n\\n    function royaltyRegistryAddress() public view returns (IRoyaltiesRegistry) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        return state._royaltyRegistry;\\n    }\\n\\n    /// @dev see: EIP-2981\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) external view returns (address _receiver, uint256 _royaltyAmount) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n        return\\n            state._royaltyRegistry.royaltyInfo(address(this), _tokenId, _value);\\n    }\\n\\n    function registerCollectionRoyaltyReceivers(\\n        RoyaltiesState.RoyaltyReceiver[] memory royaltyReceivers\\n    ) public onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n        IRoyaltiesRegistry(state._royaltyRegistry)\\n            .registerCollectionRoyaltyReceivers(\\n                address(this),\\n                msg.sender,\\n                royaltyReceivers\\n            );\\n    }\\n\\n    function primaryRoyaltyInfo(\\n        uint256 tokenId\\n    ) public view returns (address payable[] memory, uint256[] memory) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n        return\\n            IRoyaltiesRegistry(state._royaltyRegistry).primaryRoyaltyInfo(\\n                address(this),\\n                tokenId\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"../libraries/CustomErrors.sol\\\";\\nimport \\\"../libraries/BPS.sol\\\";\\nimport \\\"../tokens/ERC721LACore.sol\\\";\\nimport \\\"../libraries/LANFTUtils.sol\\\";\\nimport \\\"../tokens/ERC721State.sol\\\";\\n\\nabstract contract Burnable is ERC721LACore {\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               BURNABLE\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function burn(uint256 tokenId) public {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        \\n        address owner = ownerOf(tokenId);\\n\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\\n            revert CustomErrors.TransferError();\\n        }\\n        _transferCore(owner, ERC721LACore.burnAddress, tokenId);\\n\\n        // Looksrare and other marketplace require the owner to be null address\\n        emit Transfer(owner, address(0), tokenId);\\n        (uint256 editionId, ) = parseEditionFromTokenId(tokenId);\\n\\n        // Update the number of tokens burned for this edition\\n        state._editions[editionId].burnedSupply += 1;\\n    }\\n\\n\\n    function burnRedeemEditionTokens(\\n        uint256 _editionId,\\n        uint24 _quantity,\\n        uint256[] calldata tokenIdsToBurn\\n    ) public whenPublicMintOpened(_editionId) whenNotPaused {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n        ERC721State.Edition memory edition = getEdition(_editionId);\\n\\n        if (edition.burnableEditionId == 0 || tokenIdsToBurn.length == 0) {\\n            revert CustomErrors.BurnRedeemNotAvailable();\\n        }\\n\\n        uint256 mintableAmount = tokenIdsToBurn.length / edition.amountToBurn; \\n\\n        if (mintableAmount < _quantity) {\\n            revert CustomErrors.BurnRedeemNotAvailable();\\n        } \\n\\n        // Check max mint per wallet restrictions (if maxMintPerWallet is 0, no restriction apply)\\n        uint256 mintedCountKey = uint256(\\n            keccak256(abi.encodePacked(_editionId, msg.sender))\\n        );\\n\\n        if (edition.maxMintPerWallet != 0 ) {\\n            if (\\n                state._mintedPerWallet[mintedCountKey] + _quantity >\\n                edition.maxMintPerWallet\\n            ) {\\n                revert CustomErrors.MaximumMintAmountReached();\\n            }\\n        }\\n        state._mintedPerWallet[mintedCountKey] += _quantity;\\n\\n\\n        // We iterate and burn only the required amount of tokens (preventing burning more than necessary)\\n        // burn will revert if the sender is not the owner of a given token\\n        for(uint256 i; i<edition.amountToBurn * _quantity;i++) {\\n            burn(tokenIdsToBurn[i]);\\n        }\\n\\n        _safeMint(_editionId, _quantity, msg.sender);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/WithOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"../libraries/CustomErrors.sol\\\";\\nimport \\\"./WithOperatorRegistryState.sol\\\";\\nimport \\\"../libraries/LANFTUtils.sol\\\";\\nimport \\\"../extensions/AccessControl.sol\\\";\\nimport \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\nimport {CANONICAL_CORI_SUBSCRIPTION} from \\\"operator-filter-registry/src/lib/Constants.sol\\\";\\n\\ncontract WithOperatorRegistry is AccessControl {\\n    address constant DEFAULT_OPERATOR_REGISTRY_ADDRESS =\\n        0x000000000000AAeB6D7670E522A718067333cd4E;\\n\\n    /// @dev The upgradeable initialize function that should be called when the contract is being upgraded.\\n    function _initOperatorRegsitry() internal {\\n        WithOperatorRegistryState.OperatorRegistryState\\n            storage registryState = WithOperatorRegistryState\\n                ._getOperatorRegistryState();\\n        IOperatorFilterRegistry registry = IOperatorFilterRegistry(\\n            DEFAULT_OPERATOR_REGISTRY_ADDRESS\\n        );\\n\\n        registryState.operatorFilterRegistry = registry;\\n\\n        if (address(registry).code.length > 0) {\\n            registry.registerAndSubscribe(\\n                address(this),\\n                CANONICAL_CORI_SUBSCRIPTION\\n            );\\n        }\\n    }\\n\\n    function initOperatorRegsitry() public onlyAdmin {\\n        _initOperatorRegsitry();\\n    }\\n\\n    /**\\n     * @dev A helper modifier to check if the operator is allowed.\\n     */\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper modifier to check if the operator approval is allowed.\\n     */\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper function to check if the operator is allowed.\\n     */\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        WithOperatorRegistryState.OperatorRegistryState\\n            storage registryState = WithOperatorRegistryState\\n                ._getOperatorRegistryState();\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(registryState.operatorFilterRegistry).code.length > 0) {\\n            // under normal circumstances, this function will revert rather than return false, but inheriting or\\n            // upgraded contracts may specify their own OperatorFilterRegistry implementations, which may behave\\n            // differently\\n            if (\\n                !registryState.operatorFilterRegistry.isOperatorAllowed(\\n                    address(this),\\n                    operator\\n                )\\n            ) {\\n                revert CustomErrors.NotAllowed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\\n     *         address, checks will be bypassed. OnlyOwner.\\n     */\\n    // function updateOperatorFilterRegistryAddress(address newRegistry) public onlyAdmin {\\n    //     WithOperatorRegistryState.OperatorRegistryState\\n    //         storage registryState = WithOperatorRegistryState\\n    //             ._getOperatorRegistryState();\\n    //     IOperatorFilterRegistry registry = IOperatorFilterRegistry(\\n    //         newRegistry\\n    //     );\\n    //     registryState.operatorFilterRegistry = registry;\\n    // }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/AirDropable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"../libraries/CustomErrors.sol\\\";\\nimport \\\"../libraries/BPS.sol\\\";\\nimport \\\"../libraries/CustomErrors.sol\\\";\\nimport \\\"../libraries/LANFTUtils.sol\\\";\\nimport \\\"../tokens/ERC721State.sol\\\";\\nimport \\\"../tokens/ERC721LACore.sol\\\";\\nimport \\\"./IAirDropable.sol\\\";\\nimport \\\"../platform/royalties/RoyaltiesState.sol\\\";\\n\\nabstract contract AirDropable is IAirDropable, ERC721LACore {\\n    uint256 public constant AIRDROP_MAX_BATCH_SIZE = 100;\\n\\n    function airdrop(\\n        uint256 editionId,\\n        address[] calldata recipients,\\n        uint24 quantityPerAddress\\n    ) external onlyAdmin {\\n        if (recipients.length > AIRDROP_MAX_BATCH_SIZE) {\\n            revert TooManyAddresses();\\n        }\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            _safeMint(editionId, quantityPerAddress, recipients[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/tokens/IERC721LA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\nimport \\\"../libraries/BitMaps/BitMaps.sol\\\";\\nimport \\\"../platform/royalties/IRoyaltiesRegistry.sol\\\";\\nimport \\\"./IERC721Events.sol\\\";\\nimport \\\"./ERC721State.sol\\\";\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721LA compliant contract.\\n */\\nabstract contract IERC721LA is IERC721Events {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    // function supportsInterface(\\n    //     bytes4 interfaceId\\n    // ) external view virtual returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    // function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) external view virtual returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external virtual;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external virtual;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool _approved\\n    ) external virtual;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view virtual returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view virtual returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    // function symbol() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory);\\n\\n    // ==============================\\n    //        Editions\\n    // ==============================\\n\\n    /**\\n     * @dev fetch edition struct data by editionId\\n     */\\n    function getEdition(\\n        uint256 _editionId\\n    ) external view virtual returns (ERC721State.Edition memory);\\n\\n    /**\\n     * @dev fetch edition struct data by editionId\\n     */\\n    function getEditionWithURI(\\n        uint256 _editionId\\n    ) external view virtual returns (ERC721State.EditionWithURI memory);\\n\\n    // ==============================\\n    //        Helpers\\n    // ==============================\\n\\n    function setXCardContractAddress(\\n        address xCardContractAddress\\n    ) external virtual;\\n\\n    function getXCardContractAddress() external view virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    struct PausableState {\\n        bool _paused;\\n    }\\n\\n    function _getPausableState()\\n        internal\\n        pure\\n        returns (PausableState storage state)\\n    {\\n        bytes32 position = keccak256(\\\"liveart.Pausable\\\");\\n        assembly {\\n            state.slot := position\\n        }\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               MODIFIERS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        PausableState storage state = _getPausableState();\\n        return state._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal whenNotPaused {\\n        PausableState storage state = _getPausableState();\\n        state._paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal whenPaused {\\n        PausableState storage state = _getPausableState();\\n        state._paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/Whitelistable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"../libraries/BPS.sol\\\";\\nimport \\\"../libraries/CustomErrors.sol\\\";\\nimport \\\"../libraries/LANFTUtils.sol\\\";\\nimport \\\"../tokens/ERC721State.sol\\\";\\nimport \\\"../tokens/ERC721LACore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./IWhitelistable.sol\\\";\\nimport \\\"./WhitelistableState.sol\\\";\\n\\ninterface ILiveArtXcard {\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\\nabstract contract Whitelistable is IWhitelistable, ERC721LACore {\\n    /**\\n     * Create a Whitelist configuration\\n     * @param _editionId the edition ID\\n     * @param amount How many mint allowed per Whitelist spot\\n     * @param mintPriceInFinney Price of the whitelist mint in Finney\\n     * @param mintStartTS Starting time of the Whitelist mint\\n     * @param mintEndTS Starting time of the Whitelist mint\\n     * @param merkleRoot The whitelist merkle root\\n     *\\n     */\\n    function setWLConfig(\\n        uint256 _editionId,\\n        uint8 amount,\\n        uint24 mintPriceInFinney,\\n        uint32 mintStartTS,\\n        uint32 mintEndTS,\\n        bytes32 merkleRoot\\n    ) public onlyAdmin {\\n        WhitelistableState.WLState storage state = WhitelistableState\\n            ._getWhitelistableState();\\n\\n        // This reverts if edition does not exist\\n        getEdition(_editionId);\\n\\n        uint256 wlId = uint256(\\n            keccak256(abi.encodePacked(_editionId, amount, mintPriceInFinney))\\n        );\\n\\n        if (state._whitelistConfig[wlId].amount != 0) {\\n            revert WhiteListAlreadyExists();\\n        }\\n\\n        if (mintEndTS != 0 && mintEndTS < mintStartTS) {\\n            revert InvalidMintDuration();\\n        }\\n\\n        WhitelistableState.WhitelistConfig\\n            memory whitelistConfig = WhitelistableState.WhitelistConfig({\\n                merkleRoot: merkleRoot,\\n                amount: amount,\\n                mintPriceInFinney: mintPriceInFinney,\\n                mintStartTS: mintStartTS,\\n                mintEndTS: mintEndTS\\n            });\\n\\n        state._whitelistConfig[wlId] = whitelistConfig;\\n    }\\n\\n    /**\\n     * Update a Whitelist configuration\\n     * @param _editionId Edition ID of the WL to be updated\\n     * @param _amount Amount of the WL to be updated\\n     * @param mintPriceInFinney Price of the WL to be updated\\n     * @param newAmount New Amount\\n     * @param newMintPriceInFinney New mint price in Finney\\n     * @param newMintStartTS New Mint time\\n     * @param newMerkleRoot New Merkle root\\n     *\\n     * Note: When changing a single property of the WL config,\\n     * make sure to also pass the value of the property that did not change.\\n     *\\n     */\\n    function updateWLConfig(\\n        uint256 _editionId,\\n        uint8 _amount,\\n        uint24 mintPriceInFinney,\\n        uint8 newAmount,\\n        uint24 newMintPriceInFinney,\\n        uint32 newMintStartTS,\\n        uint32 newMintEndTS,\\n        bytes32 newMerkleRoot\\n    ) public onlyAdmin {\\n        WhitelistableState.WLState storage state = WhitelistableState\\n            ._getWhitelistableState();\\n\\n        // This reverts if edition does not exist\\n        getEdition(_editionId);\\n\\n        uint256 wlId = uint256(\\n            keccak256(abi.encodePacked(_editionId, _amount, mintPriceInFinney))\\n        );\\n        WhitelistableState.WhitelistConfig memory whitelistConfig;\\n\\n        // If amount or price differ, then set previous WL config key to amount 0, which effectively disable the WL\\n        if (_amount != newAmount || mintPriceInFinney != newMintPriceInFinney) {\\n            state._whitelistConfig[wlId] = WhitelistableState.WhitelistConfig({\\n                merkleRoot: newMerkleRoot,\\n                amount: 0,\\n                mintPriceInFinney: newMintPriceInFinney,\\n                mintStartTS: newMintStartTS,\\n                mintEndTS: newMintEndTS\\n            });\\n            wlId = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        _editionId,\\n                        newAmount,\\n                        newMintPriceInFinney\\n                    )\\n                )\\n            );\\n            state._whitelistConfig[wlId] = whitelistConfig;\\n        }\\n\\n        if (newMintEndTS != 0 && newMintEndTS < newMintStartTS) {\\n            revert InvalidMintDuration();\\n        }\\n\\n        whitelistConfig = WhitelistableState.WhitelistConfig({\\n            merkleRoot: newMerkleRoot,\\n            amount: newAmount,\\n            mintPriceInFinney: newMintPriceInFinney,\\n            mintStartTS: newMintStartTS,\\n            mintEndTS: newMintEndTS\\n        });\\n\\n        state._whitelistConfig[wlId] = whitelistConfig;\\n    }\\n\\n    /**\\n     * Whitelist mint function\\n     * @param _editionId the edition ID\\n     * @param maxAmount How many mint allowed per Whitelist spot\\n     * @param merkleProof the merkle proof of the minter\\n     * @param _quantity How many NFTs to mint\\n     */\\n    function whitelistMint(\\n        uint256 _editionId,\\n        uint8 maxAmount,\\n        uint24 mintPriceInFinney,\\n        bytes32[] calldata merkleProof,\\n        uint24 _quantity,\\n        address _recipient,\\n        uint24 xCardTokenId\\n    ) public payable {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n        // This reverts if WL does not exist (or is disabled)\\n        WhitelistableState.WhitelistConfig memory whitelistConfig = getWLConfig(\\n            _editionId,\\n            maxAmount,\\n            mintPriceInFinney\\n        );\\n\\n        // Check for allowed mint count\\n        uint256 mintCountKey = uint256(\\n            keccak256(abi.encodePacked(_editionId, msg.sender))\\n        );\\n\\n        if (\\n            state._mintedPerWallet[mintCountKey] + _quantity >\\n            whitelistConfig.amount\\n        ) {\\n            revert CustomErrors.MaximumMintAmountReached();\\n        }\\n\\n        if (\\n            whitelistConfig.mintStartTS == 0 ||\\n            block.timestamp < whitelistConfig.mintStartTS\\n        ) {\\n            revert CustomErrors.MintClosed();\\n        }\\n\\n        if (\\n            whitelistConfig.mintEndTS != 0 &&\\n            block.timestamp > whitelistConfig.mintEndTS\\n        ) {\\n            revert CustomErrors.MintClosed();\\n        }\\n\\n        // We use msg.sender for the WL merkle root\\n        // Ran only if the user is not an XCard holder\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n\\n        if (\\n            !MerkleProof.verify(\\n                merkleProof,\\n                whitelistConfig.merkleRoot,\\n                leaf\\n            ) &&\\n            ILiveArtXcard(state._xCardContractAddress).balanceOf(msg.sender) ==\\n            0\\n        ) {\\n            revert NotWhitelisted();\\n        }\\n\\n        // Finney to Wei\\n        uint256 mintPriceInWei = uint256(whitelistConfig.mintPriceInFinney) *\\n            10e14;\\n        if (mintPriceInWei * _quantity > msg.value) {\\n            revert CustomErrors.InsufficientFunds();\\n        }\\n\\n        state._mintedPerWallet[mintCountKey] += _quantity;\\n        uint256 firstTokenId = _safeMint(_editionId, _quantity, _recipient);\\n\\n        // Send primary royalties\\n        (\\n            address payable[] memory wallets,\\n            uint256[] memory primarySalePercentages\\n        ) = state._royaltyRegistry.primaryRoyaltyInfo(\\n                address(this),\\n                firstTokenId\\n            );\\n\\n        uint256 nReceivers = wallets.length;\\n\\n        for (uint256 i = 0; i < nReceivers; i++) {\\n            uint256 royalties = BPS._calculatePercentage(\\n                msg.value,\\n                primarySalePercentages[i]\\n            );\\n            (bool sent, ) = wallets[i].call{value: royalties}(\\\"\\\");\\n\\n            if (!sent) {\\n                revert CustomErrors.FundTransferError();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get WL config for given editionId, amout, and mintPrice.\\n     * Should not be used internally when trying to modify the state as it returns a memory copy of the structs\\n     */\\n    function getWLConfig(\\n        uint256 editionId,\\n        uint8 amount,\\n        uint24 mintPriceInFinney\\n    ) public view returns (WhitelistableState.WhitelistConfig memory) {\\n        WhitelistableState.WLState storage state = WhitelistableState\\n            ._getWhitelistableState();\\n\\n        // This reverts if edition does not exist\\n        getEdition(editionId);\\n\\n        uint256 wlId = uint256(\\n            keccak256(abi.encodePacked(editionId, amount, mintPriceInFinney))\\n        );\\n        WhitelistableState.WhitelistConfig storage whitelistConfig = state\\n            ._whitelistConfig[wlId];\\n\\n        if (whitelistConfig.amount == 0) {\\n            revert CustomErrors.NotFound();\\n        }\\n\\n        return whitelistConfig;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/LAInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nabstract contract LAInitializable {\\n    error AlreadyInitialized();\\n\\n    struct InitializableState {\\n        bool _initialized;\\n    }\\n\\n    function _getInitializableState() internal pure returns (InitializableState storage state) {\\n        bytes32 position = keccak256(\\\"liveart.Initializable\\\");\\n        assembly {\\n            state.slot := position\\n        }\\n    }\\n\\n    modifier notInitialized() {\\n        InitializableState storage state = _getInitializableState();\\n        if (state._initialized) {\\n            revert AlreadyInitialized();\\n        }\\n        _;\\n        state._initialized = true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/v4/libraries/LANFTUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"./CustomErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nlibrary LANFTUtils {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is an EOA\\n     *\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (LANFTUtils.isContract(to)) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert CustomErrors.NotERC721Receiver();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/libraries/BPS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nlibrary BPS {\\n    function _calculatePercentage(uint256 number, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // https://ethereum.stackexchange.com/a/55702\\n        // https://www.investopedia.com/terms/b/basispoint.asp\\n        return (number * percentage) / 10000;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/libraries/CustomErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nlibrary CustomErrors {\\n    /**\\n     * Raised when trying to manipulate editions (CRUD) with invalid data\\n     */\\n    error InvalidEditionData();\\n\\n    error MaxSupplyError();\\n\\n    error InvalidEditionId();\\n    /**\\n     * Raised when trying to mint with invalid data\\n     */\\n    error InvalidMintData();\\n\\n    /**\\n     * Raised when trying to transfer an NFT to a non ERC721Receiver\\n     */\\n    error NotERC721Receiver();\\n\\n    /**\\n     * Raised when trying to query a non minted token\\n     */\\n    error TokenNotFound();\\n\\n    /**\\n     * Raised when transfer fail\\n     */\\n    error TransferError();\\n\\n    /**\\n     * Generic Not Allowed action\\n     */\\n    error NotAllowed();\\n\\n    /**\\n     * Generic Not Found error\\n     */\\n    error NotFound();\\n\\n    /**\\n     * Raised when direct minting with insufficient funds\\n     */\\n    error InsufficientFunds();\\n\\n    /**\\n     * Raised when fund transfer fails\\n     */\\n    error FundTransferError();\\n\\n    error MintClosed();\\n    error MaximumMintAmountReached();\\n    error BurnRedeemNotAvailable();\\n    error NotXCardOwner();\\n    error TokenStaked();\\n}\\n\"\r\n    },\r\n    \"contracts/v4/platform/royalties/RoyaltiesState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nlibrary RoyaltiesState {\\n    struct RoyaltyReceiver {\\n        address payable wallet;\\n        uint48 primarySalePercentage;\\n        uint48 secondarySalePercentage;\\n    }\\n\\n    /**\\n     * @dev Storage layout\\n     * This pattern allow us to extend current contract using DELETGATE_CALL\\n     * without worrying about storage slot conflicts\\n     */\\n    struct RoyaltiesRegistryState {\\n        // contractAddress => RoyaltyReceiver\\n        mapping(address => RoyaltyReceiver[]) _collectionRoyaltyReceivers;\\n        // contractAddress => editionId => RoyaltyReceiver\\n        mapping(address => mapping(uint256 => RoyaltyReceiver[])) _editionRoyaltyReceivers;\\n        // contractAddress => editionId => tokenNumber => RoyaltyReceiver\\n        mapping(address => mapping(uint256 => mapping(uint256 => RoyaltyReceiver[]))) _tokenRoyaltyReceivers;\\n    }\\n\\n    /**\\n     * @dev Get storage data from dedicated slot.\\n     * This pattern avoids storage conflict during proxy upgrades\\n     * and give more flexibility when creating extensions\\n     */\\n    function _getRoyaltiesState()\\n        internal\\n        pure\\n        returns (RoyaltiesRegistryState storage state)\\n    {\\n        bytes32 storageSlot = keccak256(\\\"liveart.RoyalitiesState\\\");\\n        assembly {\\n            state.slot := storageSlot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/tokens/ERC721State.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"../libraries/BitMaps/BitMaps.sol\\\";\\nimport \\\"../platform/royalties/IRoyaltiesRegistry.sol\\\";\\n\\nlibrary ERC721State {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    struct Edition {\\n        // Max. number of token mintable per edition\\n        uint24 maxSupply;\\n        // Currently minted token coutner\\n        uint24 currentSupply;\\n        // Burned token counter\\n        uint24 burnedSupply;\\n        // Public mint price\\n        uint24 publicMintPriceInFinney;\\n        // Public mint start time in seconds\\n        uint32 publicMintStartTS;\\n        // Public mint ending time in seconds\\n        uint32 publicMintEndTS;\\n        // Max mint per wallet. If 0, no limit\\n        uint8 maxMintPerWallet;\\n        // If perTokenMetadata == false, all tokens in this edition will have the same metadata\\n        bool perTokenMetadata;\\n        // An edition Id associated with this collection that is approved to be burned in order to mint on the current edition.\\n        uint24 burnableEditionId;\\n        // Amount to burn\\n        uint24 amountToBurn;\\n        // determines if this edition supports staking\\n        bool stakingEnabled;\\n    }\\n\\n    struct EditionWithURI {\\n        Edition data;\\n        string baseURI;\\n    }\\n\\n    /**\\n     * @dev Storage layout\\n     * This pattern allow us to extend current contract using DELETGATE_CALL\\n     * without worrying about storage slot conflicts\\n     */\\n    struct ERC721LAState {\\n        // The number of edition created, indexed from 1\\n        uint64 _editionCounter;\\n        // Max token by edition. Defines the number of 0 in token Id (see editions)\\n        uint24 _edition_max_tokens;\\n        // Contract Name\\n        string _name;\\n        // Ticker\\n        string _symbol;\\n        // Edtion by editionId\\n        mapping(uint256 => Edition) _editions;\\n        // Owner by tokenId\\n        mapping(uint256 => address) _owners;\\n        // Token Id to operator address\\n        mapping(uint256 => address) _tokenApprovals;\\n        // Owned token count by address\\n        mapping(address => uint256) _balances;\\n        // Allower to allowee\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n        // Tracking of batch heads\\n        BitMaps.BitMap _batchHead;\\n        // LiveArt global royalty registry address\\n        IRoyaltiesRegistry _royaltyRegistry;\\n        // Amount of ETH withdrawn by edition\\n        mapping(uint256 => uint256) _withdrawnBalancesByEdition;\\n        // EditionID => Base URI\\n        mapping(uint256 => string) _baseURIByEdition;\\n        // Minted counter per wallet/edition. hash(address, editionId) => counter\\n        mapping(uint256 => uint256) _mintedPerWallet;\\n        // xCardContract Address\\n        address _xCardContractAddress;\\n        // Staking contract address\\n        address _stakingContractAddress;\\n    }\\n\\n    /**\\n     * @dev Get storage data from dedicated slot.\\n     * This pattern avoids storage conflict during proxy upgrades\\n     * and give more flexibility when creating extensions\\n     */\\n    function _getERC721LAState()\\n        internal\\n        pure\\n        returns (ERC721LAState storage state)\\n    {\\n        bytes32 storageSlot = keccak256(\\\"liveart.ERC721LA\\\");\\n        assembly {\\n            state.slot := storageSlot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/tokens/ERC721LACore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"../extensions/AccessControl.sol\\\";\\nimport \\\"../extensions/Winter.sol\\\";\\nimport \\\"./IERC721LA.sol\\\";\\nimport \\\"../extensions/Pausable.sol\\\";\\nimport \\\"../extensions/IERC4906.sol\\\";\\nimport \\\"../extensions/Ownable.sol\\\";\\nimport \\\"../extensions/LAInitializable.sol\\\";\\nimport \\\"../libraries/LANFTUtils.sol\\\";\\nimport \\\"../libraries/BPS.sol\\\";\\nimport \\\"../libraries/CustomErrors.sol\\\";\\nimport \\\"./IERC721Events.sol\\\";\\nimport \\\"./ERC721State.sol\\\";\\nimport \\\"../extensions/WithOperatorRegistry.sol\\\";\\n\\ninterface IStakingContract {\\n    function isTokenStaked(uint256 tokenId) external view returns (bool);\\n}\\n\\n/**\\n * @notice LiveArt ERC721 implementation contract\\n * Supports multiple edtioned NFTs and gas optimized batch minting\\n */\\nabstract contract ERC721LACore is\\n    LAInitializable,\\n    AccessControl,\\n    WithOperatorRegistry,\\n    Winter,\\n    Pausable,\\n    Ownable,\\n    IERC721LA,\\n    IERC4906\\n{\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               LIBRARIES\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    using BitMaps for BitMaps.BitMap;\\n    using ERC721State for ERC721State.ERC721LAState;\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               CONSTANTS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    bytes32 public constant IERC721METADATA_INTERFACE = hex\\\"5b5e139f\\\";\\n    bytes32 public constant IERC721_INTERFACE = hex\\\"80ac58cd\\\";\\n    bytes32 public constant IERC2981_INTERFACE = hex\\\"2a55205a\\\";\\n    bytes32 public constant IERC165_INTERFACE = hex\\\"01ffc9a7\\\";\\n    bytes32 public constant IERC4906_INTERFACE = hex\\\"49064906\\\";\\n\\n    // Used for separating editionId and tokenNumber from the tokenId (cf. createEdition)\\n    uint24 public constant DEFAULT_EDITION_TOKEN_MULTIPLIER = 10e5;\\n\\n    // Used to differenciate burnt tokens in the bitmap logic (Null address being used for unminted tokens)\\n    address public constant burnAddress = address(0xDEAD);\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               INITIALIZERS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @dev Initialize function. Should be called by the factory when deploying new instances.\\n     * @param _collectionAdmin is the address of the default admin for this contract\\n     */\\n    function initialize(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _collectionAdmin,\\n        address _royaltyRegistry\\n    ) external notInitialized {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        state._name = _name;\\n        state._symbol = _symbol;\\n        state._royaltyRegistry = IRoyaltiesRegistry(_royaltyRegistry);\\n        state._editionCounter = 1;\\n        state._edition_max_tokens = DEFAULT_EDITION_TOKEN_MULTIPLIER;\\n        _grantRole(COLLECTION_ADMIN_ROLE, _collectionAdmin);\\n        _setOwner(_collectionAdmin);\\n        _setWinterWallet(0xdAb1a1854214684acE522439684a145E62505233);\\n        _initOperatorRegsitry();\\n    }\\n\\n    /**\\n     * @dev Overload `initialize` function with `_edition_max_tokens` argument\\n     */\\n    // function initialize(\\n    //     string calldata _name,\\n    //     string calldata _symbol,\\n    //     address _collectionAdmin,\\n    //     address _royaltyRegistry,\\n    //     uint24 _edition_max_tokens\\n    // ) external notInitialized {\\n    //     ERC721State.ERC721LAState storage state = ERC721State\\n    //         ._getERC721LAState();\\n    //     state._name = _name;\\n    //     state._symbol = _symbol;\\n    //     state._royaltyRegistry = IRoyaltiesRegistry(_royaltyRegistry);\\n    //     state._editionCounter = 1;\\n    //     state._edition_max_tokens = _edition_max_tokens;\\n    //     _grantRole(COLLECTION_ADMIN_ROLE, _collectionAdmin);\\n    //     _setOwner(_collectionAdmin);\\n    //     _setWinterWallet(0xdAb1a1854214684acE522439684a145E62505233);\\n    //     _initOperatorRegsitry();\\n    // }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    // function supportsInterface(\\n    //     bytes4 interfaceId\\n    // ) external pure override returns (bool) {\\n    //     return\\n    //         interfaceId == IERC4906_INTERFACE ||\\n    //         interfaceId == IERC2981_INTERFACE ||\\n    //         interfaceId == IERC721_INTERFACE ||\\n    //         interfaceId == IERC721METADATA_INTERFACE ||\\n    //         interfaceId == IERC165_INTERFACE;\\n    // }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                           IERC721Metadata\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    function name() external view override returns (string memory) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        return state._name;\\n    }\\n\\n    // function symbol() external view override returns (string memory) {\\n    //     ERC721State.ERC721LAState storage state = ERC721State\\n    //         ._getERC721LAState();\\n    //     return state._symbol;\\n    // }\\n\\n    // function setName(string calldata _name) public onlyAdmin {\\n    //     ERC721State.ERC721LAState storage state = ERC721State\\n    //         ._getERC721LAState();\\n    //     state._name = _name;\\n    // }\\n\\n    function setSymbol(string calldata _symbol) public onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        state._symbol = _symbol;\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view override returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert CustomErrors.TokenNotFound();\\n        }\\n\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        (uint256 editionId, ) = parseEditionFromTokenId(tokenId);\\n        ERC721State.Edition memory edition = getEdition(editionId);\\n\\n        if (edition.perTokenMetadata) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        state._baseURIByEdition[editionId],\\n                        LANFTUtils.toString(tokenId)\\n                    )\\n                );\\n        }\\n        return state._baseURIByEdition[editionId];\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        uint256 _count;\\n        for (uint256 i = 1; i < state._editionCounter; i += 1) {\\n            _count += editionMintedTokens(i);\\n        }\\n        return _count;\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               EDITIONS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @notice Backward compatibility with the frontend\\n     */\\n    function EDITION_TOKEN_MULTIPLIER() public view returns (uint24) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        return state._edition_max_tokens;\\n    }\\n\\n    function EDITION_MAX_SIZE() public view returns (uint24) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        return state._edition_max_tokens - 1;\\n    }\\n\\n    /**\\n     * @notice Creates a new Edition\\n     * Editions can be seen as collections within a collection.\\n     * The token Ids for the a given edition have the following format:\\n     * `[editionId][tokenNumber]`\\n     * eg.: The Id of the 2nd token of the 5th edition is: `5000002`\\n     *\\n     */\\n    function createEdition(\\n        string calldata _baseURI,\\n        uint24 _maxSupply,\\n        uint24 _publicMintPriceInFinney,\\n        uint32 _publicMintStartTS,\\n        uint32 _publicMintEndTS,\\n        uint8 _maxMintPerWallet,\\n        bool _perTokenMetadata,\\n        uint8 _burnableEditionId,\\n        uint8 _amountToBurn\\n    ) public onlyAdmin returns (uint256) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        if (_maxSupply >= state._edition_max_tokens - 1) {\\n            revert CustomErrors.MaxSupplyError();\\n        }\\n\\n        state._editions[state._editionCounter] = ERC721State.Edition({\\n            maxSupply: _maxSupply,\\n            burnedSupply: 0,\\n            currentSupply: 0,\\n            publicMintPriceInFinney: _publicMintPriceInFinney,\\n            publicMintStartTS: _publicMintStartTS,\\n            publicMintEndTS: _publicMintEndTS,\\n            maxMintPerWallet: _maxMintPerWallet,\\n            perTokenMetadata: _perTokenMetadata,\\n            burnableEditionId: _burnableEditionId,\\n            amountToBurn: _amountToBurn,\\n            stakingEnabled: false\\n        });\\n\\n        state._baseURIByEdition[state._editionCounter] = _baseURI;\\n        emit EditionCreated(\\n            address(this),\\n            state._editionCounter,\\n            _maxSupply,\\n            _baseURI,\\n            _publicMintPriceInFinney,\\n            _perTokenMetadata\\n        );\\n\\n        emit BatchMetadataUpdate(\\n            editionedTokenId(state._editionCounter, 1),\\n            editionedTokenId(state._editionCounter, _maxSupply)\\n        );\\n\\n        state._editionCounter += 1;\\n\\n        // -1 because we return the current edition Id\\n        return state._editionCounter - 1;\\n    }\\n\\n    /**\\n     * @notice updates an edition base URI\\n     */\\n    function updateEditionBaseURI(\\n        uint256 editionId,\\n        string calldata _baseURI\\n    ) external onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        if (editionId > state._editionCounter) {\\n            revert CustomErrors.InvalidEditionId();\\n        }\\n\\n        ERC721State.Edition storage edition = state._editions[editionId];\\n        state._baseURIByEdition[editionId] = _baseURI;\\n        emit EditionUpdated(\\n            address(this),\\n            editionId,\\n            edition.maxSupply,\\n            _baseURI\\n        );\\n        emit BatchMetadataUpdate(\\n            editionedTokenId(editionId, 1),\\n            editionedTokenId(editionId, state._editions[editionId].maxSupply)\\n        );\\n    }\\n\\n    /**\\n     * @notice sets the staking contract address\\n     **/\\n    function setStakingContractAddress(\\n        address stakingContractAddress\\n    ) external onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        state._stakingContractAddress = stakingContractAddress;\\n    }\\n\\n    /**\\n     * @notice toggle staking on/off for an edition\\n     **/\\n    function toggleStakingByEdition(uint256 editionId) external onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        state._editions[editionId].stakingEnabled = !state\\n            ._editions[editionId]\\n            .stakingEnabled;\\n    }\\n\\n    function getStakingContractAddress() external view returns (address) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        return state._stakingContractAddress;\\n    }\\n\\n    /**\\n     * @notice updates edition parameter. Careful: This will overwrite all previously set values on that edition.\\n     */\\n    function updateEdition(\\n        uint256 editionId,\\n        uint24 _publicMintPriceInFinney,\\n        uint32 _publicMintStartTS,\\n        uint32 _publicMintEndTS,\\n        uint8 _maxMintPerWallet,\\n        uint24 _maxSupply,\\n        bool _perTokenMetadata\\n    ) external onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        if (editionId > state._editionCounter) {\\n            revert CustomErrors.InvalidEditionId();\\n        }\\n\\n        ERC721State.Edition storage edition = state._editions[editionId];\\n        if (_maxSupply < edition.currentSupply - edition.burnedSupply) {\\n            revert CustomErrors.MaxSupplyError();\\n        }\\n        edition.publicMintPriceInFinney = _publicMintPriceInFinney;\\n        edition.publicMintStartTS = _publicMintStartTS;\\n        edition.publicMintEndTS = _publicMintEndTS;\\n        edition.maxMintPerWallet = _maxMintPerWallet;\\n        edition.maxSupply = _maxSupply;\\n        edition.perTokenMetadata = _perTokenMetadata;\\n    }\\n\\n    /**\\n     * @notice fetch edition struct data by editionId\\n     */\\n    function getEdition(\\n        uint256 _editionId\\n    ) public view override returns (ERC721State.Edition memory) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        if (_editionId > state._editionCounter) {\\n            revert CustomErrors.InvalidEditionId();\\n        }\\n        return state._editions[_editionId];\\n    }\\n\\n    /**\\n     * @notice fetch edition struct data by editionId\\n     */\\n    function getEditionWithURI(\\n        uint256 _editionId\\n    )\\n        public\\n        view\\n        override\\n        returns (ERC721State.EditionWithURI memory editionWithURI)\\n    {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        if (_editionId > state._editionCounter) {\\n            revert CustomErrors.InvalidEditionId();\\n        }\\n        editionWithURI = ERC721State.EditionWithURI({\\n            data: state._editions[_editionId],\\n            baseURI: state._baseURIByEdition[_editionId]\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the total number of editions\\n     */\\n    function totalEditions() external view returns (uint256 total) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        total = state._editionCounter - 1;\\n    }\\n\\n    /**\\n     * @notice Returns the current supply of a given edition\\n     */\\n    function editionMintedTokens(\\n        uint256 editionId\\n    ) public view returns (uint256 supply) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        ERC721State.Edition memory edition = state._editions[editionId];\\n        return edition.currentSupply - edition.burnedSupply;\\n    }\\n\\n    /**\\n     * @dev Given an editionId and  tokenNumber, returns tokenId in the following format:\\n     * `[editionId][tokenNumber]` where `tokenNumber` is between 1 and state._edition_max_tokens  - 1\\n     * eg.: The second token from the 5th edition would be `500002`\\n     *\\n     */\\n    function editionedTokenId(\\n        uint256 editionId,\\n        uint256 tokenNumber\\n    ) public view returns (uint256 tokenId) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        uint256 paddedEditionID = editionId * state._edition_max_tokens;\\n        tokenId = paddedEditionID + tokenNumber;\\n    }\\n\\n    /**\\n     * @dev Given a tokenId return editionId and tokenNumber.\\n     * eg.: 3000005 => editionId 3 and tokenNumber 5\\n     */\\n    function parseEditionFromTokenId(\\n        uint256 tokenId\\n    ) public view returns (uint256 editionId, uint256 tokenNumber) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        // Divide first to lose the decimal. ie. 1000001 / 1000000 = 1\\n        editionId = tokenId / state._edition_max_tokens;\\n        tokenNumber = tokenId - (editionId * state._edition_max_tokens);\\n    }\\n\\n    /// @dev Is public mint open for given edition\\n    function isPublicMintStarted(uint256 editionId) public view returns (bool) {\\n        ERC721State.Edition memory edition = getEdition(editionId);\\n        bool started = (edition.publicMintStartTS != 0 &&\\n            edition.publicMintStartTS <= block.timestamp) &&\\n            (edition.publicMintEndTS == 0 ||\\n                edition.publicMintEndTS > block.timestamp);\\n        return started;\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               MODIFIERS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    modifier whenPublicMintOpened(uint256 editionId) {\\n        if (!isPublicMintStarted(editionId)) {\\n            revert CustomErrors.MintClosed();\\n        }\\n        _;\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               MINTABLE\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    /**\\n     * @dev Internal batch minting function\\n     */\\n    function _safeMint(\\n        uint256 _editionId,\\n        uint24 _quantity,\\n        address _recipient\\n    ) internal virtual returns (uint256 firstTokenId) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        ERC721State.Edition storage edition = state._editions[_editionId];\\n\\n        uint256 tokenNumber = edition.currentSupply + 1;\\n\\n        if (_editionId > state._editionCounter) {\\n            revert CustomErrors.InvalidEditionId();\\n        }\\n\\n        if (_quantity == 0 || _recipient == address(0)) {\\n            revert CustomErrors.InvalidMintData();\\n        }\\n\\n        if (tokenNumber > edition.maxSupply) {\\n            revert CustomErrors.MaxSupplyError();\\n        }\\n\\n        firstTokenId = editionedTokenId(_editionId, tokenNumber);\\n\\n        if (edition.currentSupply + _quantity > edition.maxSupply) {\\n            revert CustomErrors.MaxSupplyError();\\n        }\\n\\n        edition.currentSupply += _quantity;\\n        state._owners[firstTokenId] = _recipient;\\n        state._batchHead.set(firstTokenId);\\n        state._balances[_recipient] += _quantity;\\n\\n        // Emit events\\n        for (\\n            uint256 tokenId = firstTokenId;\\n            tokenId < firstTokenId + _quantity;\\n            tokenId++\\n        ) {\\n            emit Transfer(address(0), _recipient, tokenId);\\n            LANFTUtils._checkOnERC721Received(\\n                address(0),\\n                _recipient,\\n                tokenId,\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    function mintEditionTokens(\\n        uint256 _editionId,\\n        uint24 _quantity,\\n        address _recipient\\n    ) public payable whenPublicMintOpened(_editionId) whenNotPaused {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n        ERC721State.Edition memory edition = getEdition(_editionId);\\n\\n        // Check max mint per wallet restrictions (if maxMintPerWallet is 0, no restriction apply)\\n        if (edition.maxMintPerWallet != 0 && !_isWinterWallet()) {\\n            uint256 mintedCountKey = uint256(\\n                keccak256(abi.encodePacked(_editionId, msg.sender))\\n            );\\n            if (\\n                state._mintedPerWallet[mintedCountKey] + _quantity >\\n                edition.maxMintPerWallet\\n            ) {\\n                revert CustomErrors.MaximumMintAmountReached();\\n            }\\n            state._mintedPerWallet[mintedCountKey] += _quantity;\\n        }\\n\\n        // Finney to Wei\\n        uint256 mintPriceInWei = uint256(edition.publicMintPriceInFinney) *\\n            10e14;\\n\\n        // Check if sufficiant\\n        if (msg.value < mintPriceInWei * _quantity) {\\n            revert CustomErrors.InsufficientFunds();\\n        }\\n\\n        uint256 firstTokenId = _safeMint(_editionId, _quantity, _recipient);\\n\\n        // Send primary royalties\\n        (\\n            address payable[] memory wallets,\\n            uint256[] memory primarySalePercentages\\n        ) = state._royaltyRegistry.primaryRoyaltyInfo(\\n                address(this),\\n                firstTokenId\\n            );\\n\\n        uint256 nReceivers = wallets.length;\\n\\n        for (uint256 i = 0; i < nReceivers; i++) {\\n            uint256 royalties = BPS._calculatePercentage(\\n                msg.value,\\n                primarySalePercentages[i]\\n            );\\n            (bool sent, ) = wallets[i].call{value: royalties}(\\\"\\\");\\n\\n            if (!sent) {\\n                revert CustomErrors.FundTransferError();\\n            }\\n        }\\n    }\\n\\n    function adminMint(\\n        uint256 _editionId,\\n        uint24 _quantity,\\n        address _recipient\\n    ) public onlyAdmin {\\n        _safeMint(_editionId, _quantity, _recipient);\\n    }\\n\\n    function getMintedCount(\\n        uint256 _editionId,\\n        address _recipient\\n    ) public view returns (uint256) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        uint256 mintedCountKey = uint256(\\n            keccak256(abi.encodePacked(_editionId, _recipient))\\n        );\\n        return state._mintedPerWallet[mintedCountKey];\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               PAUSABLE\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    function pauseContract() public onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpauseContract() public onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                                   ERC721\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /// @dev See {IERC721-approve}.\\n    function approve(\\n        address to,\\n        uint256 tokenId\\n    ) external override onlyAllowedOperatorApproval(to) {\\n        address owner = ownerOf(tokenId);\\n        if (\\n            msg.sender == to ||\\n            (msg.sender != owner && !isApprovedForAll(owner, msg.sender))\\n        ) {\\n            revert CustomErrors.NotAllowed();\\n        }\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /// @dev See {IERC721-transferFrom}.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override onlyAllowedOperator(from) {\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\\n            revert CustomErrors.TransferError();\\n        }\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /// @dev See {IERC721-ownerOf}.\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        (address owner, ) = _ownerAndBatchHeadOf(tokenId);\\n        return owner;\\n    }\\n\\n    /// @dev Returns the number of tokens in ``owner``'s account.\\n    function balanceOf(\\n        address owner\\n    ) external view returns (uint256 tokenBalance) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        tokenBalance = state._balances[owner];\\n    }\\n\\n    /// @dev See {IERC721-getApproved}.\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view override returns (address) {\\n        if (!_exists(tokenId)) {\\n            revert CustomErrors.TokenNotFound();\\n        }\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        \\n        if(!_isTransferAllowed(tokenId)) {\\n            revert CustomErrors.TokenStaked();\\n        }\\n        return state._tokenApprovals[tokenId];\\n    }\\n\\n    /// @dev See {IERC721-isApprovedForAll}.\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view override returns (bool) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n\\n        return state._operatorApprovals[owner][operator];\\n    }\\n\\n    /// @dev See {IERC721-setApprovalForAll}.\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) external override onlyAllowedOperatorApproval(operator) {\\n        if (operator == msg.sender) {\\n            revert CustomErrors.NotAllowed();\\n        }\\n\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        state._operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @dev See {IERC721-safeTransferFrom}.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override onlyAllowedOperator(from) {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /// @dev See {IERC721-safeTransferFrom}.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override onlyAllowedOperator(from) {\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\\n            revert CustomErrors.NotAllowed();\\n        }\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                         INTERNAL / PUBLIC HELPERS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /// @dev Returns whether `tokenId` exists.\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        (uint256 editionId, uint256 tokenNumber) = parseEditionFromTokenId(\\n            tokenId\\n        );\\n        if (isBurned(tokenId)) {\\n            return false;\\n        }\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        ERC721State.Edition memory edition = state._editions[editionId];\\n        return tokenNumber <= edition.currentSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the index of the batch for a given token.\\n     * If the token was not bought in a batch tokenId == tokenIdBatchHead\\n     */\\n    function _getBatchHead(\\n        uint256 tokenId\\n    ) internal view returns (uint256 tokenIdBatchHead) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        (uint256 editionId, ) = parseEditionFromTokenId(tokenId);\\n        tokenIdBatchHead = state._batchHead.scanForward(\\n            tokenId,\\n            editionId * state._edition_max_tokens\\n        );\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n\\n        state._tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the batch for a given token.\\n     * and the batch owner address\\n     */\\n    function _ownerAndBatchHeadOf(\\n        uint256 tokenId\\n    ) internal view returns (address owner, uint256 tokenIdBatchHead) {\\n        if (!_exists(tokenId)) {\\n            revert CustomErrors.TokenNotFound();\\n        }\\n\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        tokenIdBatchHead = _getBatchHead(tokenId);\\n        owner = state._owners[tokenIdBatchHead];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view returns (bool) {\\n        if (!_exists(tokenId)) {\\n            revert CustomErrors.TokenNotFound();\\n        }\\n\\n\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     * Internal function intened to split the logic for different transfer use cases\\n     * Emits a {Transfer} event.\\n     */\\n    function _transferCore(address from, address to, uint256 tokenId) internal {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        (, uint256 tokenIdBatchHead) = _ownerAndBatchHeadOf(tokenId);\\n\\n        address owner = ownerOf(tokenId);\\n\\n        if (owner != from) {\\n            revert CustomErrors.TransferError();\\n        }\\n\\n        // We check if the token after the one being transfer\\n        // belong to the batch, if it does, we have to update it's owner\\n        // while being careful to not overflow the edition maxSupply\\n        uint256 nextTokenId = tokenId + 1;\\n        (, uint256 nextTokenNumber) = parseEditionFromTokenId(nextTokenId);\\n        (uint256 currentEditionId, ) = parseEditionFromTokenId(tokenId);\\n\\n        ERC721State.Edition memory edition = state._editions[currentEditionId];\\n\\n        if (\\n            nextTokenNumber <= edition.maxSupply &&\\n            !state._batchHead.get(nextTokenId)\\n        ) {\\n            state._owners[nextTokenId] = from;\\n            state._batchHead.set(nextTokenId);\\n        }\\n\\n        // Finaly we update the owners and balances\\n        state._owners[tokenId] = to;\\n        if (tokenId != tokenIdBatchHead) {\\n            state._batchHead.set(tokenId);\\n        }\\n\\n        state._balances[to] += 1;\\n        state._balances[from] -= 1;\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        _beforeTokenTransfer(from, to, tokenId);\\n        // Remove approval\\n        _approve(address(0), tokenId);\\n        emit Transfer(from, to, tokenId);\\n        _transferCore(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        LANFTUtils._checkOnERC721Received(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        if(!_isTransferAllowed(tokenId)) {\\n            revert CustomErrors.TokenStaked();\\n        }\\n    }\\n\\n\\n    /**\\n     * Check if the token is staked\\n     */\\n    function _isTransferAllowed(uint256 tokenId) internal view returns(bool) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        (uint256 currentEditionId, ) = parseEditionFromTokenId(tokenId);\\n\\n        ERC721State.Edition memory edition = state._editions[currentEditionId];\\n        // If the token is staked, we don't allow transfer\\n        if (edition.stakingEnabled) {\\n            bool tokenIsStaked = IStakingContract(state._stakingContractAddress)\\n                .isTokenStaked(tokenId);\\n\\n            if (tokenIsStaked) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * Check if the token is staked\\n     */\\n    // function _areAllNFTsStaked(address from) internal view returns(bool) {\\n    //     ERC721State.ERC721LAState storage state = ERC721State\\n    //         ._getERC721LAState();\\n    //     (uint256 currentEditionId, ) = parseEditionFromTokenId(tokenId);\\n\\n    //     ERC721State.Edition memory edition = state._editions[currentEditionId];\\n    //     // If the token is staked, we don't allow transfer\\n    //     if (edition.stakingEnabled) {\\n    //         bool tokenIsStaked = IStakingContract(state._stakingContractAddress)\\n    //             .isTokenStaked(tokenId);\\n\\n    //         if (tokenIsStaked) {\\n    //             return false;\\n    //         }\\n    //     }\\n    //     return true;\\n    // }\\n\\n    function isBurned(uint256 tokenId) public view returns (bool) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        address owner = state._owners[tokenId];\\n        return owner == burnAddress;\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               ETHER\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    function balance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function withdrawAmount(\\n        address payable recipient,\\n        uint256 amount\\n    ) external onlyAdmin {\\n        (bool succeed, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!succeed) {\\n            revert CustomErrors.FundTransferError();\\n        }\\n    }\\n\\n    function withdrawAll(address payable recipient) external onlyAdmin {\\n        (bool succeed, ) = recipient.call{value: balance()}(\\\"\\\");\\n        if (!succeed) {\\n            revert CustomErrors.FundTransferError();\\n        }\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     *                               X-CARD\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    function setXCardContractAddress(\\n        address xCardContractAddress\\n    ) public override onlyAdmin {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        state._xCardContractAddress = xCardContractAddress;\\n    }\\n\\n    function getXCardContractAddress() public view override returns (address) {\\n        ERC721State.ERC721LAState storage state = ERC721State\\n            ._getERC721LAState();\\n        return state._xCardContractAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"./IAccessControl.sol\\\";\\n\\nabstract contract AccessControl is IAccessControl{\\n\\n    bytes32 public constant COLLECTION_ADMIN_ROLE =\\n        keccak256(\\\"COLLECTION_ADMIN_ROLE\\\");\\n\\n    function _getAccessControlState()\\n        internal\\n        pure\\n        returns (RoleState storage state)\\n    {\\n        bytes32 position = keccak256(\\\"liveart.AccessControl\\\");\\n        assembly {\\n            state.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks that msg.sender has a specific role.\\n     * Reverts with a AccessControlNotAllowed.\\n     *\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that msg.sender has COLLECTION_ADMIN_ROLE\\n     * Reverts with a AccessControlNotAllowed.\\n     *\\n     */\\n    modifier onlyAdmin() {\\n        _checkRole(COLLECTION_ADMIN_ROLE);\\n        _;\\n    }\\n\\n\\n    function isAdmin(address theAddress) public view returns (bool) {\\n        return hasRole(COLLECTION_ADMIN_ROLE, theAddress);\\n    }\\n\\n    /**\\n     * @notice Checks if role is assigned to account\\n     *\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        RoleState storage state = _getAccessControlState();\\n        return state._roles[role][account];\\n    }\\n\\n    /**\\n     * @notice Revert with a AccessControlNotAllowed message if `msg.sender` is missing `role`.\\n     *\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        if (!hasRole(role, msg.sender)) {\\n            revert AccessControlNotAllowed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Grants `role` to `account`.\\n     *\\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        public\\n        onlyAdmin\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have COLLECTION_ADMIN_ROLE role.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        onlyAdmin\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account.\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        if (account != msg.sender) {\\n            revert AccessControlNotAllowed();\\n        }\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal {\\n        RoleState storage state = _getAccessControlState();\\n        if (!hasRole(role, account)) {\\n            state._roles[role][account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        RoleState storage state = _getAccessControlState();\\n        if (hasRole(role, account)) {\\n            state._roles[role][account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/Winter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"../extensions/AccessControl.sol\\\";\\n\\n/**\\n * Used to set Winter whitelisted minting addresses\\n */\\ncontract Winter is AccessControl {\\n    struct WinterState {\\n        address[] winterAddresses;\\n    }\\n\\n    function _getWinterState()\\n        internal\\n        pure\\n        returns (WinterState storage state)\\n    {\\n        bytes32 position = keccak256(\\\"liveart.Winter\\\");\\n        assembly {\\n            state.slot := position\\n        }\\n    }\\n\\n    // function addWinterWallets(address[] calldata newAddresses) public onlyAdmin {\\n    //     for(uint256 i; i < newAddresses.length; i += 1) {\\n    //         _setWinterWallet(newAddresses[i]);\\n    //     }\\n    // }\\n\\n    function addWinterWallet(address newAddress) public onlyAdmin {\\n        _setWinterWallet(newAddress);\\n    }\\n\\n    function _setWinterWallet(address newAddress) internal {\\n        WinterState storage state = _getWinterState();\\n        state.winterAddresses.push(newAddress);\\n    }\\n\\n    function deleteWinterWallet(address newAddress) public onlyAdmin {\\n        WinterState storage state = _getWinterState();\\n        for (uint256 i; i < state.winterAddresses.length; i += 1) {\\n            if (newAddress == state.winterAddresses[i]) {\\n                delete state.winterAddresses[i];\\n            }\\n        }\\n        state.winterAddresses.push(newAddress);\\n    }\\n\\n    function _isWinterWallet() internal view returns (bool) {\\n        WinterState storage state = _getWinterState();\\n\\n        for (uint256 i; i < state.winterAddresses.length; i += 1) {\\n            if (msg.sender == state.winterAddresses[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/IERC4906.sol\": {\r\n      \"content\": \"/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906  {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.    \\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\"\r\n    },\r\n    \"contracts/v4/extensions/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nabstract contract Ownable {\\n    error CallerIsNotOwner();\\n    error NewOwnerIsZeroAddress();\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    struct OwnableState {\\n        address owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function owner() public view returns(address){\\n        OwnableState storage state = _getOwnableState();\\n        return state.owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if(newOwner == address(0)){\\n            revert NewOwnerIsZeroAddress();\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n\\n    function _getOwnableState()\\n        internal\\n        pure\\n        returns (OwnableState storage state)\\n    {\\n        bytes32 position = keccak256(\\\"liveart.Ownable\\\");\\n        assembly {\\n            state.slot := position\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if(owner() != msg.sender) {\\n            revert CallerIsNotOwner();\\n        } \\n    }\\n\\n\\n    function _setOwner(address newOwner) internal {\\n        OwnableState storage state = _getOwnableState();\\n        state.owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        address previousOwner = owner();\\n        _setOwner(newOwner);\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/v4/tokens/IERC721Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"../libraries/BitMaps/BitMaps.sol\\\";\\nimport \\\"../platform/royalties/IRoyaltiesRegistry.sol\\\";\\n\\ninterface IERC721Events {\\n    event EditionCreated(\\n        address indexed contractAddress,\\n        uint256 editionId,\\n        uint24 maxSupply,\\n        string baseURI,\\n        uint24 contractMintPrice,\\n        bool perTokenMetadata\\n\\n    );\\n    event EditionUpdated(\\n        address indexed contractAddress,\\n        uint256 editionId,\\n        uint256 maxSupply,\\n        string baseURI\\n    );\\n    \\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IAccessControl {\\n    error AccessControlNotAllowed();\\n\\n\\n\\n    struct RoleState {\\n        mapping(bytes32 => mapping(address => bool)) _roles;\\n    }\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n\\n    /**\\n     * @notice Checks if role is assigned to account\\n     *\\n     */\\n    function hasRole(bytes32 role, address account) external returns (bool);\\n\\n\\n    /**\\n     * @notice Grants `role` to `account`.\\n     *\\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        external;\\n    /**\\n     * @notice Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have COLLECTION_ADMIN_ROLE role.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        external;\\n\\n    /**\\n     * @notice Revokes `role` from the calling account.\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n\\n   function isAdmin(address theAddress) external view returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/v4/libraries/BitMaps/BitMaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BitScan.sol\\\";\\n/**\\n * Derived from: https://github.com/estarriolvetch/solidity-bits\\n */\\n/**\\n * @dev This Library is a modified version of Openzeppelin's BitMaps library.\\n * Functions of finding the index of the closest set bit from a given index are added.\\n * The indexing of each bucket is modifed to count from the MSB to the LSB instead of from the LSB to the MSB.\\n * The modification of indexing makes finding the closest previous set bit more efficient in gas usage.\\n */\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\n\\nerror BitMapHeadNotFound();\\n\\nlibrary BitMaps {\\n    using BitScan for uint256;\\n    uint256 private constant MASK_INDEX_ZERO = (1 << 255);\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n\\n    /**\\n     * @dev Find the closest index of the set bit before `index`.\\n     */\\n    function scanForward(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        uint256 lowerBound\\n    ) internal view returns (uint256 matchedIndex) {\\n        uint256 bucket = index >> 8;\\n        uint256 lowerBoundBucket = lowerBound >> 8;\\n\\n        // index within the bucket\\n        uint256 bucketIndex = (index & 0xff);\\n\\n        // load a bitboard from the bitmap.\\n        uint256 bb = bitmap._data[bucket];\\n\\n        // offset the bitboard to scan from `bucketIndex`.\\n        bb = bb >> (0xff ^ bucketIndex); // bb >> (255 - bucketIndex)\\n\\n        if (bb > 0) {\\n            unchecked {\\n                return (bucket << 8) | (bucketIndex - bb.bitScanForward256());\\n            }\\n        } else {\\n            while (true) {\\n                // require(bucket > lowerBound, \\\"BitMaps: The set bit before the index doesn't exist.\\\");\\n                if (bucket < lowerBoundBucket) {\\n                    revert BitMapHeadNotFound();\\n                }\\n                unchecked {\\n                    bucket--;\\n                }\\n                // No offset. Always scan from the least significiant bit now.\\n                bb = bitmap._data[bucket];\\n\\n                if (bb > 0) {\\n                    unchecked {\\n                        return (bucket << 8) | (255 - bb.bitScanForward256());\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/platform/royalties/IRoyaltiesRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./specs/IRarible.sol\\\";\\nimport \\\"./RoyaltiesState.sol\\\";\\n\\n/// @dev Royalty registry interface\\ninterface IRoyaltiesRegistry is IERC165 {\\n    /// @dev Raised when trying to set a royalty override for a token\\n    error NotApproved();\\n    error NotOwner();\\n\\n    /// @dev Raised when providing multiple royalty overrides when only one is expected\\n    error MultipleRoyaltyRecievers();\\n\\n    /// @dev Raised when sales percentage is not between 0 and 100\\n    error PrimarySalePercentageOutOfRange();\\n    error SecondarySalePercentageOutOfRange();\\n\\n    /// @dev Raised accumulated primary royalty percentage is not 100\\n    error PrimarySalePercentageNotEqualToMax();\\n\\n    /**\\n     * Raised trying to set edition or token royalties\\n     */\\n    error NotEditionCreator();\\n\\n    // ==============================\\n    //            EVENTS\\n    // ==============================\\n    event RoyaltyOverride(\\n        address owner,\\n        address tokenAddress,\\n        address royaltyAddress\\n    );\\n\\n    event RoyaltyTokenOverride(\\n        address owner,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address royaltyAddress\\n    );\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) external view override returns (bool);\\n\\n    // ==============================\\n    //            SECONDARY ROYALTY\\n    // ==============================\\n\\n    /*\\n    @notice Called with the sale price to determine how much royalty is owed and to whom.\\n    @param _contractAddress - The collection address\\n    @param _tokenId - the NFT asset queried for royalty information\\n    @param _value - the sale price of the NFT asset specified by _tokenId\\n    @return _receiver - address of who should be sent the royalty payment\\n    @return _royaltyAmount - the royalty payment amount for value sale price\\n    */\\n    function royaltyInfo(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) external view returns (address _receiver, uint256 _royaltyAmount);\\n\\n    /**\\n     *  Return RoyaltyReceivers for primary sales\\n     *\\n     */\\n    function primaryRoyaltyInfo(\\n        address collectionAddress,\\n        uint256 tokenId\\n    ) external view returns (address payable[] memory, uint256[] memory);\\n\\n    /**\\n     *  @dev CreatorCore - Supports Manifold, ArtBlocks\\n     *\\n     *  getRoyalties\\n     */\\n    function getRoyalties(\\n        address collectionAddress,\\n        uint256 tokenId\\n    ) external view returns (address payable[] memory, uint256[] memory);\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  getFees\\n     */\\n    function getFees(\\n        address collectionAddress,\\n        uint256 editionId\\n    ) external view returns (address payable[] memory, uint256[] memory);\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  getFeeBps\\n     */\\n    function getFeeBps(\\n        address collectionAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  getFeeRecipients\\n     */\\n    function getFeeRecipients(\\n        address collectionAddress,\\n        uint256 editionId\\n    ) external view returns (address payable[] memory);\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV2\\n     *\\n     *  getRaribleV2Royalties\\n     */\\n    function getRaribleV2Royalties(\\n        address collectionAddress,\\n        uint256 tokenId\\n    ) external view returns (IRaribleV2.Part[] memory);\\n\\n    /**\\n     *  @dev CreatorCore - Support for KODA\\n     *\\n     *  getKODAV2RoyaltyInfo\\n     */\\n    function getKODAV2RoyaltyInfo(\\n        address collectionAddress,\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (address payable[] memory recipients_, uint256[] memory bps);\\n\\n    /**\\n     *  @dev CreatorCore - Support for Zora\\n     *\\n     *  convertBidShares\\n     */\\n    function convertBidShares(\\n        address collectionAddress,\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (address payable[] memory recipients_, uint256[] memory bps);\\n\\n    /*\\n    @notice Called from a collection contract to set a primary royalty override\\n    @param collectionAddress - The collection address\\n    @param sender - The address of the caller\\n    @param RoyaltyReceiver[] - The royalty receivers details\\n    */\\n    function registerCollectionRoyaltyReceivers(\\n        address collectionAddress,\\n        address sender,\\n        RoyaltiesState.RoyaltyReceiver[] memory royaltyReceivers\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/v4/libraries/BitMaps/BitScan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/**\\n   _____       ___     ___ __           ____  _ __      \\n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\\n  \\\\__ \\\\/ __ \\\\/ / / __  / / __/ / / /  / __  / / __/ ___/\\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \\n/____/\\\\____/_/_/\\\\__,_/_/\\\\__/\\\\__, /  /_____/_/\\\\__/____/  \\n                           /____/                        \\n\\n- npm: https://www.npmjs.com/package/solidity-bits\\n- github: https://github.com/estarriolvetch/solidity-bits\\n\\n */\\n\\npragma solidity ^0.8.4;\\n\\n\\nlibrary BitScan {\\n    uint256 constant private DEBRUIJN_256 = 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\\n    bytes constant private LOOKUP_TABLE_256 = hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n        @dev Isolate the least significant set bit.\\n     */ \\n    function isolateLS1B256(uint256 bb) pure internal returns (uint256) {\\n        require(bb > 0);\\n        unchecked {\\n            return bb & (0 - bb);\\n        }\\n    } \\n\\n    /**\\n        @dev Isolate the most significant set bit.\\n     */ \\n    function isolateMS1B256(uint256 bb) pure internal returns (uint256) {\\n        require(bb > 0);\\n        unchecked {\\n            bb |= bb >> 256;\\n            bb |= bb >> 128;\\n            bb |= bb >> 64;\\n            bb |= bb >> 32;\\n            bb |= bb >> 16;\\n            bb |= bb >> 8;\\n            bb |= bb >> 4;\\n            bb |= bb >> 2;\\n            bb |= bb >> 1;\\n            \\n            return (bb >> 1) + 1;\\n        }\\n    } \\n\\n    /**\\n        @dev Find the index of the lest significant set bit. (trailing zero count)\\n     */ \\n    function bitScanForward256(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return uint8(LOOKUP_TABLE_256[(isolateLS1B256(bb) * DEBRUIJN_256) >> 248]);\\n        }   \\n    }\\n\\n    /**\\n        @dev Find the index of the most significant set bit.\\n     */ \\n    function bitScanReverse256(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return 255 - uint8(LOOKUP_TABLE_256[((isolateMS1B256(bb) * DEBRUIJN_256) >> 248)]);\\n        }   \\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/v4/platform/royalties/specs/IRarible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\ninterface IRaribleV1 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    function getFeeBps(uint256 id) external view returns (uint256[] memory);\\n\\n    function getFeeRecipients(uint256 id)\\n        external\\n        view\\n        returns (address payable[] memory);\\n}\\n\\ninterface IRaribleV2 {\\n    /*\\n     *  bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (Part[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/WithOperatorRegistryState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\nimport \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\nlibrary WithOperatorRegistryState {\\n\\n\\n    struct OperatorRegistryState {\\n      IOperatorFilterRegistry operatorFilterRegistry;\\n    }\\n\\n\\n    /**\\n     * @dev Get storage data from dedicated slot.\\n     * This pattern avoids storage conflict during proxy upgrades\\n     * and give more flexibility when creating extensions\\n     */\\n    function _getOperatorRegistryState()\\n        internal\\n        pure\\n        returns (OperatorRegistryState storage state)\\n    {\\n        bytes32 storageSlot = keccak256(\\\"liveart.OperatorRegistryState\\\");\\n        assembly {\\n            state.slot := storageSlot\\n        }\\n    }\\n}\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/lib/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\"\r\n    },\r\n    \"contracts/v4/extensions/IAirDropable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n\\ninterface IAirDropable {\\n\\n    error TooManyAddresses();\\n\\n    function airdrop(uint256 editionId, address[] calldata recipients, uint24 quantityPerAddres) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/IWhitelistable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IWhitelistable {\\n    /**\\n     * Raised when trying create a WhiteList config that already exisit (mint amounts are the same)\\n     */\\n    error WhiteListAlreadyExists();\\n    error NotWhitelisted();\\n    error InvalidMintDuration();\\n\\n    function whitelistMint(\\n        uint256 editionId,\\n        uint8 maxAmount,\\n        uint24 mintPriceInFinney,\\n        bytes32[] calldata merkleProof,\\n        uint24 quantity,\\n        address receiver,\\n        uint24 tokenId\\n    ) external payable;\\n\\n    function setWLConfig(\\n        uint256 editionId,\\n        uint8 amount,\\n        uint24 mintPriceInFinney,\\n        uint32 mintStartTS,\\n        uint32 mintEndTS,\\n        bytes32 merkleRoot\\n    ) external;\\n\\n    function updateWLConfig(\\n        uint256 editionId,\\n        uint8 amount,\\n        uint24 mintPriceInFinney,\\n        uint8 newAmount,\\n        uint24 newMintPriceInFinney,\\n        uint32 newMintStartTS,\\n        uint32 newMintEndTS,\\n        bytes32 newMerkleRoot\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/v4/extensions/WhitelistableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nlibrary WhitelistableState {\\n    struct WhitelistConfig {\\n        bytes32 merkleRoot;\\n        uint8 amount;\\n        uint24 mintPriceInFinney;\\n        uint32 mintStartTS;\\n        uint32 mintEndTS;\\n    }\\n\\n    struct WLState {\\n        // hash(EditionId + mintable amount + price)\\n        mapping(uint256 => WhitelistConfig) _whitelistConfig;\\n    }\\n\\n\\n    /**\\n     * @dev Get storage data from dedicated slot.\\n     * This pattern avoids storage conflict during proxy upgrades\\n     * and give more flexibility when creating extensions\\n     */\\n    function _getWhitelistableState()\\n        internal\\n        pure\\n        returns (WLState storage state)\\n    {\\n        bytes32 storageSlot = keccak256(\\\"liveart.Whitelistable\\\");\\n        assembly {\\n            state.slot := storageSlot\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AccessControlNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BitMapHeadNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnRedeemNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEditionId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMintData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMintDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumMintAmountReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotERC721Receiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhiteListAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"maxSupply\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"contractMintPrice\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"perTokenMetadata\",\"type\":\"bool\"}],\"name\":\"EditionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"EditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_MAX_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLECTION_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_EDITION_TOKEN_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EDITION_MAX_SIZE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EDITION_TOKEN_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IERC165_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IERC2981_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IERC4906_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IERC721METADATA_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IERC721_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addWinterWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_quantity\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint24\",\"name\":\"quantityPerAddress\",\"type\":\"uint24\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_quantity\",\"type\":\"uint24\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsToBurn\",\"type\":\"uint256[]\"}],\"name\":\"burnRedeemEditionTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"_maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_publicMintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"_publicMintStartTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_publicMintEndTS\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_maxMintPerWallet\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_perTokenMetadata\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_burnableEditionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_amountToBurn\",\"type\":\"uint8\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"deleteWinterWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"editionMintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenNumber\",\"type\":\"uint256\"}],\"name\":\"editionedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"getEdition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"currentSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"burnedSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"publicMintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"publicMintStartTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"publicMintEndTS\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"maxMintPerWallet\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"perTokenMetadata\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"burnableEditionId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"amountToBurn\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"stakingEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721State.Edition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"getEditionWithURI\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"currentSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"burnedSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"publicMintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"publicMintStartTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"publicMintEndTS\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"maxMintPerWallet\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"perTokenMetadata\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"burnableEditionId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"amountToBurn\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"stakingEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721State.Edition\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct ERC721State.EditionWithURI\",\"name\":\"editionWithURI\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getMintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"mintPriceInFinney\",\"type\":\"uint24\"}],\"name\":\"getWLConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"mintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"mintStartTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mintEndTS\",\"type\":\"uint32\"}],\"internalType\":\"struct WhitelistableState.WhitelistConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXCardContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initOperatorRegsitry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_collectionAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"isPublicMintStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_quantity\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mintEditionTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"parseEditionFromTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"primaryRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"primarySalePercentage\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"secondarySalePercentage\",\"type\":\"uint48\"}],\"internalType\":\"struct RoyaltiesState.RoyaltyReceiver[]\",\"name\":\"royaltyReceivers\",\"type\":\"tuple[]\"}],\"name\":\"registerCollectionRoyaltyReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRegistryAddress\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContractAddress\",\"type\":\"address\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"mintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"mintStartTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mintEndTS\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWLConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xCardContractAddress\",\"type\":\"address\"}],\"name\":\"setXCardContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"toggleStakingByEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_publicMintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"_publicMintStartTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_publicMintEndTS\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_maxMintPerWallet\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"_maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"_perTokenMetadata\",\"type\":\"bool\"}],\"name\":\"updateEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"updateEditionBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"mintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"newAmount\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"newMintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"newMintStartTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"newMintEndTS\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateWLConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxAmount\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"mintPriceInFinney\",\"type\":\"uint24\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint24\",\"name\":\"_quantity\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"xCardTokenId\",\"type\":\"uint24\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721LA", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}