{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Maths\r\n * A library to make working with numbers in Solidity hurt your brain less.\r\n */\r\nlibrary Maths {\r\n  /**\r\n   * @dev Adds two addends together, returns the sum\r\n   * @param addendA the first addend\r\n   * @param addendB the second addend\r\n   * @return sum the sum of the equation (e.g. addendA + addendB)\r\n   */\r\n  function plus(\r\n    uint256 addendA,\r\n    uint256 addendB\r\n  ) public pure returns (uint256 sum) {\r\n    sum = addendA + addendB;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts the minuend from the subtrahend, returns the difference\r\n   * @param minuend the minuend\r\n   * @param subtrahend the subtrahend\r\n   * @return difference the difference (e.g. minuend - subtrahend)\r\n   */\r\n  function minus(\r\n    uint256 minuend,\r\n    uint256 subtrahend\r\n  ) public pure returns (uint256 difference) {\r\n    assert(minuend >= subtrahend);\r\n    difference = minuend - subtrahend;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function mul(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    if (factorA == 0 || factorB == 0) return 0;\r\n    product = factorA * factorB;\r\n    assert(product / factorA == factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function times(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    return mul(factorA, factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function div(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    quotient = dividend / divisor;\r\n    assert(quotient * divisor == dividend);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function dividedBy(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    return div(dividend, divisor);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the quotient and remainder\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   * @return remainder the remainder of the equation (e.g. dividend % divisor)\r\n   */\r\n  function divideSafely(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient, uint256 remainder) {\r\n    quotient = div(dividend, divisor);\r\n    remainder = dividend % divisor;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the lesser of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the lesser of the two values\r\n   */\r\n  function min(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a <= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the greater of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the greater of the two values\r\n   */\r\n  function max(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a >= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a < b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than or equal to b\r\n   */\r\n  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a <= b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is greater than b\r\n   */\r\n  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a > b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a >= b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Manageable\r\n */\r\ncontract Manageable {\r\n  address public owner;\r\n  address public manager;\r\n\r\n  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\r\n  event ManagementChanged(address indexed previousManager, address indexed newManager);\r\n\r\n  /**\r\n   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Manageable() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or manager.\r\n   */\r\n  modifier onlyManagement() {\r\n    require(msg.sender == owner || msg.sender == manager);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipChanged(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner or manager to replace the current manager\r\n   * @param newManager The address to give contract management rights.\r\n   */\r\n  function replaceManager(address newManager) public onlyManagement {\r\n    require(newManager != address(0));\r\n    emit ManagementChanged(manager, newManager);\r\n    manager = newManager;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  ) public;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using Maths for uint256;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address holder = tokenOwner[_tokenId];\r\n    require(holder != address(0));\r\n    return holder;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existance of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address holder = tokenOwner[_tokenId];\r\n    return holder != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * @dev The zero address indicates there is no approved address.\r\n   * @dev There can only be one approved address per token at a given time.\r\n   * @dev Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address holder = ownerOf(_tokenId);\r\n    require(_to != holder);\r\n    require(msg.sender == holder || isApprovedForAll(holder, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(holder, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address holder = ownerOf(_tokenId);\r\n    return _spender == holder || getApproved(_tokenId) == _spender || isApprovedForAll(holder, _spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * @dev Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].plus(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].minus(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * @dev The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!isContract(_to)) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  function ERC721Token() public { }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * @dev Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets a list of token IDs owned by the requested address\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @return uint256[] list of token IDs owned by the requested address\r\n   */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * @dev Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * @dev Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.minus(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.minus(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\ncontract CardToken is ERC721Token, Manageable {\r\n  string public constant name = \"Mythereum Card\";\r\n  string public constant symbol = \"CARD\";\r\n\r\n  mapping (uint8 => string) public className;\r\n  mapping (uint8 => Card[]) public cardsInEdition;\r\n  uint8 public latestEditionReleased;\r\n\r\n  struct Card {\r\n    string    name;\r\n    uint8     class;\r\n    uint8     classVariant;\r\n    uint256   damagePoints;\r\n    uint256   shieldPoints;\r\n    uint256   abilityId;\r\n  }\r\n\r\n  struct Ability {\r\n    string  name;\r\n    bool    canBeBlocked;\r\n    uint8   blackMagicCost;\r\n    uint8   grayMagicCost;\r\n    uint8   whiteMagicCost;\r\n    uint256 addedDamage;\r\n    uint256 addedShield;\r\n  }\r\n\r\n  Card[] public cards;\r\n  Ability[] public abilities;\r\n\r\n  function isEditionAvailable(uint8 _editionNumber) public view returns (bool) {\r\n    return _editionNumber <= latestEditionReleased;\r\n  }\r\n\r\n  function mintRandomCards(\r\n    address _owner,\r\n    uint8 _editionNumber,\r\n    uint8 _numCards\r\n  ) public onlyManagement returns (bool) {\r\n    require(isEditionAvailable(_editionNumber));\r\n    for(uint8 i = 0; i < _numCards; i++) {\r\n      Card storage card = cardsInEdition[_editionNumber][\r\n        uint256(keccak256(now, _owner, _editionNumber, _numCards, i)) % cardsInEdition[_editionNumber].length\r\n      ];\r\n\r\n      _cloneCard(card, _owner);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function mintSpecificCard(\r\n    address _owner,\r\n    uint8   _editionNumber,\r\n    uint256 _cardIndex\r\n  ) public onlyManagement returns (bool) {\r\n    require(isEditionAvailable(_editionNumber));\r\n    require(_cardIndex < cardsInEdition[_editionNumber].length);\r\n    _cloneCard(cardsInEdition[_editionNumber][_cardIndex], _owner);\r\n  }\r\n\r\n  function mintSpecificCards(\r\n    address   _owner,\r\n    uint8     _editionNumber,\r\n    uint256[] _cardIndexes\r\n  ) public onlyManagement returns (bool) {\r\n    require(isEditionAvailable(_editionNumber));\r\n    require(_cardIndexes.length > 0 && _cardIndexes.length <= 10);\r\n\r\n    for(uint8 i = 0; i < _cardIndexes.length; i++) {\r\n      require(_cardIndexes[i] < cardsInEdition[_editionNumber].length);\r\n      _cloneCard(cardsInEdition[_editionNumber][_cardIndexes[i]], _owner);\r\n    }\r\n  }\r\n\r\n  function improveCard(\r\n    uint256 _tokenId,\r\n    uint256 _addedDamage,\r\n    uint256 _addedShield\r\n  ) public onlyManagement returns (bool) {\r\n    require(exists(_tokenId));\r\n    Card storage card = cards[_tokenId];\r\n    card.damagePoints = card.damagePoints.plus(_addedDamage);\r\n    card.shieldPoints = card.shieldPoints.plus(_addedShield);\r\n    return true;\r\n  }\r\n\r\n  function destroyCard(uint256 _tokenId) public onlyManagement returns (bool) {\r\n    require(exists(_tokenId));\r\n    _burn(ownerOf(_tokenId), _tokenId);\r\n    return true;\r\n  }\r\n\r\n  function setLatestEdition(uint8 _editionNumber) public onlyManagement {\r\n    require(cardsInEdition[_editionNumber].length.isAtLeast(1));\r\n    latestEditionReleased = _editionNumber;\r\n  }\r\n\r\n  function setTokenURI(uint256 _tokenId, string _uri) public onlyManagement {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  function addAbility(\r\n    string  _name,\r\n    bool    _canBeBlocked,\r\n    uint8   _blackMagicCost,\r\n    uint8   _grayMagicCost,\r\n    uint8   _whiteMagicCost,\r\n    uint256 _addedDamage,\r\n    uint256 _addedShield\r\n  ) public onlyManagement {\r\n    abilities.push(\r\n      Ability(\r\n        _name,\r\n        _canBeBlocked,\r\n        _blackMagicCost,\r\n        _grayMagicCost,\r\n        _whiteMagicCost,\r\n        _addedDamage,\r\n        _addedShield\r\n      )\r\n    );\r\n  }\r\n\r\n  function replaceAbility(\r\n    uint256 _abilityId,\r\n    string  _name,\r\n    bool    _canBeBlocked,\r\n    uint8   _blackMagicCost,\r\n    uint8   _grayMagicCost,\r\n    uint8   _whiteMagicCost,\r\n    uint256 _addedDamage,\r\n    uint256 _addedShield\r\n  ) public onlyManagement {\r\n    require(_abilityId.isLessThan(abilities.length));\r\n    abilities[_abilityId].name           = _name;\r\n    abilities[_abilityId].canBeBlocked   = _canBeBlocked;\r\n    abilities[_abilityId].blackMagicCost = _blackMagicCost;\r\n    abilities[_abilityId].grayMagicCost  = _grayMagicCost;\r\n    abilities[_abilityId].whiteMagicCost = _whiteMagicCost;\r\n    abilities[_abilityId].addedDamage    = _addedDamage;\r\n    abilities[_abilityId].addedShield    = _addedShield;\r\n  }\r\n\r\n  function addCardToEdition(\r\n    uint8   _editionNumber,\r\n    string  _name,\r\n    uint8   _classId,\r\n    uint8   _classVariant,\r\n    uint256 _damagePoints,\r\n    uint256 _shieldPoints,\r\n    uint256 _abilityId\r\n  ) public onlyManagement {\r\n    require(_abilityId.isLessThan(abilities.length));\r\n\r\n    cardsInEdition[_editionNumber].push(\r\n      Card({\r\n        name:         _name,\r\n        class:        _classId,\r\n        classVariant: _classVariant,\r\n        damagePoints: _damagePoints,\r\n        shieldPoints: _shieldPoints,\r\n        abilityId:    _abilityId\r\n      })\r\n    );\r\n  }\r\n\r\n  function setClassName(uint8 _classId, string _name) public onlyManagement {\r\n    className[_classId] = _name;\r\n  }\r\n\r\n  function _cloneCard(Card storage card, address owner) internal {\r\n    require(card.damagePoints > 0 || card.shieldPoints > 0);\r\n    uint256 tokenId = cards.length;\r\n    cards.push(card);\r\n    _mint(owner, tokenId);\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_numCards\",\"type\":\"uint8\"}],\"name\":\"mintRandomCards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"replaceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setClassName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"destroyCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardsInEdition\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"classVariant\",\"type\":\"uint8\"},{\"name\":\"damagePoints\",\"type\":\"uint256\"},{\"name\":\"shieldPoints\",\"type\":\"uint256\"},{\"name\":\"abilityId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"}],\"name\":\"setLatestEdition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_cardIndexes\",\"type\":\"uint256[]\"}],\"name\":\"mintSpecificCards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"classVariant\",\"type\":\"uint8\"},{\"name\":\"damagePoints\",\"type\":\"uint256\"},{\"name\":\"shieldPoints\",\"type\":\"uint256\"},{\"name\":\"abilityId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_classId\",\"type\":\"uint8\"},{\"name\":\"_classVariant\",\"type\":\"uint8\"},{\"name\":\"_damagePoints\",\"type\":\"uint256\"},{\"name\":\"_shieldPoints\",\"type\":\"uint256\"},{\"name\":\"_abilityId\",\"type\":\"uint256\"}],\"name\":\"addCardToEdition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestEditionReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_abilityId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_canBeBlocked\",\"type\":\"bool\"},{\"name\":\"_blackMagicCost\",\"type\":\"uint8\"},{\"name\":\"_grayMagicCost\",\"type\":\"uint8\"},{\"name\":\"_whiteMagicCost\",\"type\":\"uint8\"},{\"name\":\"_addedDamage\",\"type\":\"uint256\"},{\"name\":\"_addedShield\",\"type\":\"uint256\"}],\"name\":\"replaceAbility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"abilities\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"canBeBlocked\",\"type\":\"bool\"},{\"name\":\"blackMagicCost\",\"type\":\"uint8\"},{\"name\":\"grayMagicCost\",\"type\":\"uint8\"},{\"name\":\"whiteMagicCost\",\"type\":\"uint8\"},{\"name\":\"addedDamage\",\"type\":\"uint256\"},{\"name\":\"addedShield\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_addedDamage\",\"type\":\"uint256\"},{\"name\":\"_addedShield\",\"type\":\"uint256\"}],\"name\":\"improveCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_canBeBlocked\",\"type\":\"bool\"},{\"name\":\"_blackMagicCost\",\"type\":\"uint8\"},{\"name\":\"_grayMagicCost\",\"type\":\"uint8\"},{\"name\":\"_whiteMagicCost\",\"type\":\"uint8\"},{\"name\":\"_addedDamage\",\"type\":\"uint256\"},{\"name\":\"_addedShield\",\"type\":\"uint256\"}],\"name\":\"addAbility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint8\"},{\"name\":\"_cardIndex\",\"type\":\"uint256\"}],\"name\":\"mintSpecificCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"className\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint8\"}],\"name\":\"isEditionAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "ContractName": "CardToken", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "Maths:b5f1efa8a3267cce1aea000dd2cc7a0778aa8299", "LicenseType": "", "Proxy": "1", "Implementation": "0xb5f1efa8a3267cce1aea000dd2cc7a0778aa8299", "SwarmSource": "bzzr://4d3bae27ec5d0a87c1c8d8af9403c2c2ea3af5b1d9a8ef6f0cabebc1bdda1d1b"}