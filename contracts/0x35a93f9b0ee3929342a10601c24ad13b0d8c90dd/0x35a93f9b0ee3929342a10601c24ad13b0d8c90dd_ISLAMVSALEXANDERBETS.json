{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There\\u0027s no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance \\u003c amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance \\u003c value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 \\u0026\\u0026 target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn\\u0027t, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    \\n    // Burn function\\n    function burn(uint256 amount) external returns (bool);\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Burn(address indexed burner, uint256 value);\\n}\"},\"IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don\\u0027t rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\n     * given ``owner``\\u0027s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"},\"ISLAMvsVOLKANOVSKIFIGHTBETS.sol\":{\"content\":\"/*\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@:            @@     .@@@@           @@+     @@      @@             @@\\n@@@@@@            @@#     @@@             @@      @@      @@             @@\\n@@@@@@            @@      @@.             @@      @@      @@             @@\\n@@@@@@            @@      @@             -@@     %@@     @@-            @@@\\n@@@@@            .@@     #@@             @@      @@      @@             @@@\\n@@@@@@@@@@@@@@@@@@@.     @@      @@@@@@@@@@      @@      @@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@      @@      @@@@@@@@@@      @@     +@@@@@@@@@@@@@@@@@@\\n@@@@%          @@@@      @@     :       %@@             @@@@@@      @@@@@@@\\n@@@@           @@@@     @@*     @       @@              @@@@@@     @@@@@@@@\\n@@@@           @@@      @@      @       @@              @@@@@      @@@@@@@@\\n@@@@          *@@@      @@              @@             @@@@@@      @@@@@@@@\\n@@@.          @@@@     :@@     %       @@+             @@@@@@      @@@@@@@@\\n@@@      @@@@@@@@*     @@.     @@      @@      @@      @@@@@@     @@@@@@@@@\\n@@@      @@@@@@@@      @@      @@      @@      @@     .@@@@@      @@@@@@@@@\\n@@@     @@@@@@@@@      @@      @      =@@     %@@     @@@@@@      @@@@@@@@@\\n@@      @@@@@@@@@     %@@             @@      @@      @@@@@@     -@@@@@@@@@\\n@@      @@@@@@@@.     @@#             @@      @@      @@@@@=     @@@@@@@@@@\\n@@     :@@@@@@@@      @@@            @@@      @@     +@@@@@      @@@@@@@@@@\\n@#     @@@@@@@@@      @@@:          @@@@     @@:     @@@@@@      @@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@      @@@      @@@      @@@      @@#             @@@@@@\\n@@@@@@@@@@@@@@@@@@@@      @@#      @@:      @@       @@              .@@@@@\\n@@@@@@@@@@@@@@@@@@@       @@       @@       @@      .@@               @@@@@\\n@@@@@@@@@@@@@@@@@@@      :@@      *@@      @@@      @@@               @@@@@\\n@@@@@@@@@@@@@@@@@@@      @@@      @@@      @@#      @@-               @@@@@\\n@@@@@@@@@@@@@@@@@@*      @@:      @@       @@       @@@@@@@@@@@      .@@@@@\\n@@@@@@@@@@@@@@@@@@       @@       @@      .@@      +@@@@@@@@@@@      @@@@@@\\n@@@@@@@@@@@@@@@@@@      #@@      @@@      @@@      @@@@@@@@@@@       @@@@@@\\n@@@@@@@@@@@@@@@@@@               @@#      @@:      @@                @@@@@@\\n@@@@@@@@@@@@@@@@@:               @@       @@       @@               @@@@@@@\\n@@@@@@@@@@@@@@@@@               .@@      #@@      @@@              @@@@@@@@\\n@@@@@@@@@@@@@@@@@               @@@      @@@      @@%               @@@@@@@\\n@@@@@@@@@@@@@@@@@               @@:      @@       @@                @@@@@@@\\n@@@@@@@@@@@@@@@@                @@       @@      .@@      =@=      @@@@@@@@\\n@@@@@@@@@@@@@@@@      .@@      *@@      @@@      @@@      @@@      @@@@@@@@\\n@@@@@@@@@@@@@@@@      @@@      @@@      @@*      @@-      @@       @@@@@@@@\\n@@@@@@@@@@@@@@@#      @@:      @@        -       @@       #        @@@@@@@@\\n@@@@@@@@@@@@@@@       @@       @@               *@@               @@@@@@@@@\\n@@@@@@@@@@@@@@@      *@@      @@@               @@@               @@@@@@@@@\\n@@@@@@@@@@@@@@@      @@@      @@@              @@@               @@@@@@@@@@\\n@@@@@@@@@@@@@@:      @@       @@@@            @@@@              @@@@@@@@@@@\\n@@@@@@@@@@@@@@       @@      .@@@@@         .@@@@@            =@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n/*\\n\\n/*\\nWEBSITE   - https://FightHub.xyz\\nTWITTER/X - https://twitter.com/FightHubXyz\\nTELEGRAM  - https://t.me/FightHubXyz\\n*/\\n\\n// SPDX-License-Identifier: None\\npragma solidity ^0.8.21;\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ncontract ISLAMVSALEXANDERBETS is ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n    address public owner;\\n    IERC20 public FIGHTHUB;\\n    uint256 public requiredTokenAmount;\\n    bool public bettingOpen = true;\\n    bool public fightEnded;\\n    bool public paused = false;\\n    bytes32 public fightWinner;\\n    uint256 public contractDeploymentTime;\\n\\n    bytes32 public constant ISLAM_MAKHACHEV = keccak256(\\\"IslamMakhachev\\\");\\n    bytes32 public constant ALEXANDER_VOLKANOVSKI = keccak256(\\\"AlexanderVolkanovski\\\");\\n    bytes32 public constant DRAW = keccak256(\\\"Draw\\\");\\n\\n\\n    struct Bet {\\n        uint256 amount;\\n        bytes32 fighter;\\n        bool claimed;\\n    }\\n\\n    mapping(address =\\u003e Bet) public bets;\\n    mapping(address =\\u003e uint256) public islamBets;\\n    mapping(address =\\u003e uint256) public alexanderBets;\\n    mapping(address =\\u003e uint256) public tokenBalances;\\n\\n    uint256 public totalIslamBets;\\n    uint256 public totalAlexanderBets;\\n\\n    event BetPlaced(address indexed bettor, bytes32 fighter, uint256 amount);\\n    event FightEnded(bytes32 winner);\\n    event PrizeClaimed(address indexed bettor, uint256 amount);\\n    event RefundClaimed(address indexed bettor, uint256 amount);\\n    event ContractPaused();\\n    event ContractResumed();\\n    event BettingStopped();\\n    event TokensBurned(uint256 amount);\\n    event TokenDeposited(address indexed user, uint256 amount);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function.\\\");\\n        _;\\n    }\\n\\n    modifier afterFight() {\\n        require(fightEnded, \\\"Fight has not ended yet.\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Contract is paused.\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused, \\\"Contract is not paused.\\\");\\n        _;\\n    }\\n\\n    constructor(address _FIGHTHUBAddress, uint256 _initialRequiredTokenAmount) {\\n        require(_FIGHTHUBAddress != address(0), \\\"Token address cannot be zero.\\\");\\n        owner = msg.sender;\\n        FIGHTHUB = IERC20(_FIGHTHUBAddress);\\n        contractDeploymentTime = block.timestamp;\\n        requiredTokenAmount = _initialRequiredTokenAmount;\\n    }\\n\\n    function setRequiredTokenAmount(uint256 _newRequiredAmount) external onlyOwner {\\n        requiredTokenAmount = _newRequiredAmount; \\n    }\\n\\n    function burnTokens(uint256 _amount) external onlyOwner {\\n        \\n        // Ensure that the user is burning tokens\\n        require(_amount \\u003e 0, \\\"Invalid burn amount\\\");\\n\\n        // Ensure that the contract has enough tokens to burn\\n        require(FIGHTHUB.balanceOf(address(this)) \\u003e= _amount, \\\"Not enough tokens to burn\\\");\\n\\n        // Call the burn function of the ERC-20 token contract\\n        FIGHTHUB.burn(_amount);\\n\\n        // Emit an event to log the token burning\\n        emit TokensBurned(_amount);\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"USE THE PLACE BET FUNCTION, WE DON\\u0027T ACCEPT RANDOM ETH SENDS\\\");\\n    }\\n\\n    function sendRequiredTokens() external whenNotPaused {\\n        require(bettingOpen, \\\"Betting is closed.\\\");\\n        require(tokenBalances[msg.sender] \\u003c requiredTokenAmount, \\\"You\\u0027ve already sent the required amount.\\\");\\n\\n        // Ensure that the contract has the required allowance to transfer tokens\\n        require(FIGHTHUB.allowance(msg.sender, address(this)) \\u003e= requiredTokenAmount, \\\"The $FIGHT contract does not have the correct token allowance\\\");\\n\\n        // Transfer the required tokens from the sender\\u0027s wallet to the contract\\n        FIGHTHUB.safeTransferFrom(msg.sender, address(this), requiredTokenAmount);\\n        \\n        // Update the user\\u0027s token balance\\n        tokenBalances[msg.sender] += requiredTokenAmount;\\n\\n        // Emit an event to log the token deposit\\n        emit TokenDeposited(msg.sender, requiredTokenAmount);\\n    }\\n\\n    function togglePause() external onlyOwner {\\n        paused = !paused;\\n        if (paused) {\\n            emit ContractPaused();\\n        } else {\\n            emit ContractResumed();\\n        }\\n    }\\n\\n    function getTotalBetsForFighter(bytes32 _fighter) public view returns (uint256) {\\n        if (_fighter == ISLAM_MAKHACHEV) {\\n            return totalIslamBets;\\n        } else if (_fighter == ALEXANDER_VOLKANOVSKI) {\\n            return totalAlexanderBets;\\n        }\\n        return 0;\\n    }\\n\\n    function getUserBet(address _user) public view returns (uint256, bytes32) {\\n        return (bets[_user].amount, bets[_user].fighter);\\n    }\\n\\n    function safeTransfer(address payable recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function placeBet(bytes32 _fighter) external payable whenNotPaused {\\n        require(msg.value \\u003e 0, \\\"You must send some Ether to place a bet.\\\");\\n        require(bets[msg.sender].amount == 0, \\\"You have already placed a bet with this wallet.\\\");\\n        require(bettingOpen, \\\"Betting is closed.\\\");\\n        require(_fighter == ISLAM_MAKHACHEV || _fighter == ALEXANDER_VOLKANOVSKI, \\\"Invalid fighter selected.\\\");\\n        require(tokenBalances[msg.sender] \\u003e= requiredTokenAmount, \\\"Insufficient tokens deposited.\\\");\\n\\n        uint256 feeAmount = msg.value * 10 / 100; // assuming 10% fee\\n        uint256 betAmount = msg.value - feeAmount;\\n\\n        // Transfer fee to the owner\\n        safeTransfer(payable(owner), feeAmount);\\n\\n        bets[msg.sender] = Bet({\\n            amount: betAmount,\\n            fighter: _fighter,\\n            claimed: false\\n        });\\n\\n        if (_fighter == ISLAM_MAKHACHEV) {\\n            islamBets[msg.sender] += betAmount;\\n            totalIslamBets += betAmount;\\n        } else if (_fighter == ALEXANDER_VOLKANOVSKI) {\\n            alexanderBets[msg.sender] += betAmount;\\n            totalAlexanderBets += betAmount;\\n        }\\n\\n        emit BetPlaced(msg.sender, _fighter, betAmount);\\n    }\\n\\n    function stopBets() external onlyOwner {\\n        bettingOpen = false;\\n        emit BettingStopped();\\n    }\\n\\n    function endFight(bytes32 _winner) external onlyOwner {\\n        require(!fightEnded, \\\"Fight has already ended.\\\");\\n        require(_winner == ISLAM_MAKHACHEV || _winner == ALEXANDER_VOLKANOVSKI || _winner == DRAW, \\\"Invalid fighter selected.\\\");\\n\\n        fightEnded = true;\\n        fightWinner = _winner;\\n\\n        emit FightEnded(_winner);\\n    }\\n\\n    function claimPrize() external afterFight nonReentrant {\\n        require(bets[msg.sender].amount \\u003e 0, \\\"You didn\\u0027t place a bet.\\\");\\n        require(bets[msg.sender].fighter == fightWinner, \\\"You bet on the wrong fighter.\\\");\\n        require(!bets[msg.sender].claimed, \\\"You have already claimed your rewards.\\\");\\n\\n        uint256 userWinnerShare = 0;\\n    \\tuint256 userLoserShare = 0;\\n    \\t\\n    \\t// Calculate the user\\u0027s share of the winner pool (original bet)\\n    \\tuserWinnerShare = bets[msg.sender].amount;\\n\\n    \\t// Calculate the user\\u0027s share of the loser pool based on their bets on the winning fighter\\n        if (fightWinner == ISLAM_MAKHACHEV) {\\n        \\tuserLoserShare = (bets[msg.sender].amount * totalAlexanderBets) / totalIslamBets;\\n        } else if (fightWinner == ALEXANDER_VOLKANOVSKI) {\\n       \\t \\tuserLoserShare = (bets[msg.sender].amount * totalIslamBets) / totalAlexanderBets;\\n        }\\n\\n        // Calculate the total prize (original bet + share of loser\\u0027s pool)\\n        uint256 totalPrize = userWinnerShare + userLoserShare;\\n\\n        bets[msg.sender].claimed = true;\\n\\n        // Transfer the total prize to the user\\n        safeTransfer(payable(msg.sender), totalPrize);\\n\\n        emit PrizeClaimed(msg.sender, totalPrize);\\n    }\\n    \\n    function claimRefund() external afterFight nonReentrant {\\n    \\trequire(bets[msg.sender].amount \\u003e 0, \\\"You didn\\u0027t place a bet.\\\");\\n    \\trequire(!bets[msg.sender].claimed, \\\"You have already claimed your refund.\\\");\\n    \\trequire(fightWinner == DRAW, \\\"Refunds are only available in case of a draw.\\\");\\n\\n    \\tuint256 userBetAmount = bets[msg.sender].amount;\\n    \\tuint256 userTokenBalance = tokenBalances[msg.sender];\\n\\n    \\tbets[msg.sender].claimed = true;\\n\\n    \\t// Transfer the refund to the user (the original bet amount)\\n    \\tsafeTransfer(payable(msg.sender), userBetAmount);\\n    \\t\\n    \\t// Transfer the refund of $FIGHT tokens to the user\\n    \\tFIGHTHUB.safeTransfer(msg.sender, userTokenBalance);\\n\\n    \\temit RefundClaimed(msg.sender, userBetAmount);\\n\\t}\\n\\n    function getUserLoserPoolShare(address user) public view returns (uint256) {\\n        require(fightEnded, \\\"Fight has not ended yet.\\\");\\n        require(bets[user].amount \\u003e 0, \\\"You didn\\u0027t place a bet.\\\");\\n        require(!bets[user].claimed, \\\"You have already claimed your rewards.\\\");\\n\\n        uint256 userBetAmount = bets[user].amount;\\n        uint256 totalLoserPool = (fightWinner == ISLAM_MAKHACHEV) ? totalAlexanderBets : totalIslamBets;\\n\\n        // Calculate the user\\u0027s share as a percentage\\n        uint256 userSharePercentage = (userBetAmount * 10000) / totalLoserPool;\\n\\n        return userSharePercentage;\\n    }\\n\\n    function withdrawUnclaimedFunds() external onlyOwner {\\n        require(block.timestamp \\u003e= contractDeploymentTime + 30 days, \\\"You can only withdraw after 1 month from deployment.\\\");\\n        uint256 remainingBalance = address(this).balance;\\n        require(remainingBalance \\u003e 0, \\\"No funds to withdraw.\\\");\\n\\n        safeTransfer(payable(owner), remainingBalance);\\n    }\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.21;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (_status == _ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract\\u0027s allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract\\u0027s allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance \\u003c requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract\\u0027s allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 \\u0026\\u0026 !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success \\u0026\\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \\u0026\\u0026 address(token).code.length \\u003e 0;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FIGHTHUBAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialRequiredTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fighter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BettingStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"winner\",\"type\":\"bytes32\"}],\"name\":\"FightEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALEXANDER_VOLKANOVSKI\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRAW\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIGHTHUB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISLAM_MAKHACHEV\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alexanderBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"fighter\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDeploymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_winner\",\"type\":\"bytes32\"}],\"name\":\"endFight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fightEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fightWinner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fighter\",\"type\":\"bytes32\"}],\"name\":\"getTotalBetsForFighter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLoserPoolShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"islamBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fighter\",\"type\":\"bytes32\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRequiredTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRequiredAmount\",\"type\":\"uint256\"}],\"name\":\"setRequiredTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopBets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAlexanderBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIslamBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ISLAMVSALEXANDERBETS", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000deba9beaae1f629029fd96f23edd3e6e1abe38cc000000000000000000000000000000000000000000000000000000e8d4a51000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0715c31e31a35c5718a2cd2262204ed4bb4681ee14e6387709fb1d642f0d0715"}