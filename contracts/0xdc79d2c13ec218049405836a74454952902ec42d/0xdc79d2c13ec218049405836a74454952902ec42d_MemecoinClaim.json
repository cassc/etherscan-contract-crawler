{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/claim/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IERC721 {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\\n\"\r\n    },\r\n    \"contracts/claim/interfaces/IMemecoinClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport \\\"../lib/Errors.sol\\\";\\nimport \\\"../lib/Structs.sol\\\";\\n\\ninterface IMemecoinClaim {\\n    event UserClaimed(address indexed user, uint128 amount, uint256 claimedAt);\\n    event ClaimedInNFTs(address indexed owner, uint128 amount, uint256 claimedAt);\\n    event ClaimStatusUpdated(bool claimActive);\\n    event UpgraderUpdated(address newUpgrader);\\n    event UnclaimedNFTRewardsWithdrawn(uint256 totalWithdrawn, uint256 withdrawnAt);\\n    event ClaimTokenDepositedAndClaimStarted(uint256 tokenAmount, uint256 claimStartDate);\\n\\n    function claim(address _vault, ClaimType[] calldata _claimTypes) external;\\n    function claimInNFTs(\\n        address _vault,\\n        NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests,\\n        bool _withWalletRewards\\n    ) external;\\n\\n    function claimFromMulti(address _requester, ClaimType[] calldata _claimTypes) external;\\n    function claimInNFTsFromMulti(\\n        address _requester,\\n        NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests,\\n        bool _withWalletRewards\\n    ) external;\\n\\n    function setClaimables(\\n        address[] calldata _addresses,\\n        uint128[] calldata _claimables,\\n        ClaimType[] calldata _claimTypes\\n    ) external;\\n    function setNFTClaimables(NFTClaimable[] calldata _nftClaimables) external;\\n    function addNFTUnlockedBPAndSetUnlockTs(uint64 _additionalNFTUnlockedBP, uint128 _newUnlockedBPEffectiveTs)\\n        external;\\n    function setUnclaimedNFTRewards(uint256 _collectionId, uint128[] calldata _unclaimTokenIds) external;\\n    function setRevealedCaptainzClaimable(uint256 _tokenId, uint128 _additionalAirdropTotalClaimable) external;\\n\\n    function depositClaimTokenAndStartClaim(uint256 _tokenAmount, uint256 _claimStartDate) external;\\n    function withdrawClaimToken(address _receiver, uint256 _amount) external;\\n    function withdrawUnclaimedNFTRewards(address _receiver) external;\\n\\n    function setClaimSchedules(ClaimType[] calldata _claimTypes, ClaimSchedule[] calldata _claimSchedules) external;\\n    function setClaimActive(bool _claimActive) external;\\n    function setClaimStartDate(uint256 _claimStartDate) external;\\n\\n    function setMultiClaimAddress(address _multiClaim) external;\\n    function setUpgrader(address _upgrader) external;\\n\\n    function getClaimInfo(address _user, ClaimType _claimType)\\n        external\\n        returns (uint128 claimableAmount, uint256 claimableExpiry);\\n    function getClaimInfoByNFT(uint256 _collectionId, uint256 _tokenId)\\n        external\\n        returns (uint128 claimableAmount, uint256 claimableExpiry);\\n    function getRewardsClaimInfoByNFT(uint256 _collectionId, uint256 _tokenId)\\n        external\\n        returns (uint128 claimableAmount, uint256 claimableExpiry);\\n    function getTotalClaimableAmountsByNFTs(uint256 _collectionId, uint256[] calldata _tokenIds)\\n        external\\n        returns (uint128 totalClaimable);\\n    function getUserClaimDataByCollections(NFTCollectionInfo[] calldata _nftCollectionInfo)\\n        external\\n        returns (CollectionClaimData[] memory collectionClaimInfo);\\n    function getClaimSchedule(ClaimType _claimType) external returns (ClaimSchedule memory);\\n}\\n\"\r\n    },\r\n    \"contracts/claim/lib/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nerror ClaimNotAvailable();\\nerror ClaimNotClosed();\\nerror NFTRewardsNotExpired();\\nerror UpgraderRenounced();\\nerror ClaimTokenZeroAddress();\\nerror AlreadyDeposited();\\nerror AlreadyWithdrawn();\\nerror InvalidClaimSetup();\\nerror InvalidWithdrawalSetup();\\nerror InvalidCollectionId();\\nerror InvalidDelegate();\\nerror NoClaimableToken();\\nerror MismatchedArrays();\\nerror Unauthorized();\\nerror Uint128Overflow();\\n\"\r\n    },\r\n    \"contracts/claim/lib/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nenum ClaimType {\\n    WalletRewards,\\n    CommunityPresale,\\n    PrivatePresale,\\n    Ecosystem,\\n    Contributors\\n}\\n\\nstruct ClaimData {\\n    uint128 totalClaimable;\\n    uint128 claimed;\\n}\\n\\nstruct NFTClaimData {\\n    uint128 airdropTotalClaimable;\\n    uint128 rewardsTotalClaimable;\\n    uint128 airdropClaimed;\\n    uint128 rewardsClaimed;\\n}\\n\\nstruct ClaimSchedule {\\n    uint256 startCycle;\\n    uint256[] lockUpBPs;\\n}\\n\\nstruct NFTClaimable {\\n    uint256 collectionId;\\n    uint256 tokenId;\\n    uint128 airdropTotalClaimable;\\n    uint128 rewardsTotalClaimable;\\n}\\n\\nstruct NFTCollectionInfo {\\n    uint256 collectionId;\\n    uint256[] tokenIds;\\n}\\n\\nstruct NFTCollectionClaimRequest {\\n    uint256 collectionId;\\n    uint256[] tokenIds;\\n    bool[] withNFTAirdropList;\\n    bool[] withNFTRewardsList;\\n}\\n\\nstruct CollectionClaimData {\\n    uint256 collectionId;\\n    uint256 tokenId;\\n    uint128 airdropClaimable;\\n    uint256 airdropClaimableExpiry;\\n    uint128 airdropTotalClaimable;\\n    uint128 airdropClaimed;\\n    uint128 rewardsClaimable;\\n    uint256 rewardsClaimableExpiry;\\n    uint128 rewardsTotalClaimable;\\n    uint128 rewardsClaimed;\\n}\\n\\nstruct UnclaimedNFTRewards {\\n    uint128 lastTokenId;\\n    uint128 totalUnclaimed;\\n}\\n\"\r\n    },\r\n    \"contracts/claim/MemecoinClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IDelegationRegistry} from \\\"contracts/delegation_registry/IDelegationRegistry.sol\\\";\\nimport {IDelegateRegistry} from \\\"contracts/delegation_registry/IDelegateRegistry.sol\\\";\\nimport \\\"./interfaces/IMemecoinClaim.sol\\\";\\n\\n/// @title A contract for claiming $MEME over a parameterized vesting schedule\\ncontract MemecoinClaim is\\n    IMemecoinClaim,\\n    Initializable,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant _BASIS_POINTS = 10_000;\\n    uint256 private constant _LOCK_UP_SLOT = 180;\\n    uint256 private constant _END_CYCLE = 4;\\n    uint256 private constant _END_CYCLE_CONTRIBUTORS = 8;\\n    uint256 private constant _MAX_CLAIM_PERIOD = 69 days;\\n\\n    address public upgrader; // to be set\\n    address public multiClaim; // to be set\\n\\n    IERC721[] public nftCollections;\\n    IDelegationRegistry public dc;\\n    IDelegateRegistry public dcV2;\\n\\n    uint256 public claimStartDate;\\n\\n    IERC20 public claimToken;\\n    bool public claimActive;\\n    bool public claimTokenDeposited;\\n    bool public unclaimedNFTRewardsWithdrawn;\\n    bool public upgraderRenounced;\\n\\n    uint64 public currentNFTUnlockedBP;\\n    uint64 public previousNFTUnlockedBP;\\n    uint128 public currentNFTUnlockTimestamp;\\n\\n    mapping(address userAddress => mapping(ClaimType claimType => ClaimData userClaimData)) public usersClaimData;\\n    mapping(uint256 collectionId => mapping(uint256 tokenId => NFTClaimData userClaimData)) public nftUsersClaimData;\\n    mapping(ClaimType claimType => ClaimSchedule claimSchedule) public claimScheduleOf;\\n    mapping(uint256 collectionId => UnclaimedNFTRewards) public unclaimedNftRewards;\\n\\n    // required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyUpgrader {}\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _claimTokenAddress,\\n        address _mvpAddress,\\n        address _captainzAddress,\\n        address _potatozAddress\\n    ) external initializer {\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained();\\n        OwnableUpgradeable.__Ownable_init_unchained();\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        dc = IDelegationRegistry(0x00000000000076A84feF008CDAbe6409d2FE638B);\\n        dcV2 = IDelegateRegistry(0x00000000000000447e69651d841bD8D104Bed493);\\n        claimToken = IERC20(_claimTokenAddress);\\n        nftCollections = [IERC721(_mvpAddress), IERC721(_captainzAddress), IERC721(_potatozAddress)];\\n    }\\n\\n    /// @notice Claim token by claimTypes according to the vesting schedule after claim starts, user won't be able to claim after the allocated $MEME are fully vested for _MAX_CLAIM_PERIOD\\n    /// @dev ONLY presaleClaim, ecosystem and contributor contract; Verify claim data and transfer claim token to user if needed, should not be called by NFT holder,\\n    /// emit { UserClaimed } event for amount claimed\\n    /// @param _vault Vault address of delegate.xyz; pass address(0) if not using delegate wallet\\n    /// @param _claimTypes Array of ClaimType to claim\\n    function claim(address _vault, ClaimType[] calldata _claimTypes) external nonReentrant onlyValidClaimSetup {\\n        address requester = _getRequester(_vault);\\n        uint256 totalClaimable = _claim(requester, _claimTypes);\\n\\n        claimToken.safeTransfer(requester, totalClaimable);\\n    }\\n\\n    /// @notice Claim OPTIONALLY on NFTAirdrop/NFTRewards/WalletRewards token by all eligible NFTs according to the vesting schedule after claim starts, user won't be able to claim after the allocated $MEME are fully vested for _MAX_CLAIM_PERIOD\\n    /// @dev ONLY nftClaim contract; ONLY related to NFT claimTypes(i.e. NFTRewards & WalletRewards); Verify claim data and transfer claim token to NFT owner if needed, emit { BulkClaimedInNFTs } event for amount claimed\\n    /// @param _vault Vault address of delegate.xyz; pass address(0) if not using delegate wallet\\n    /// @param _nftCollectionClaimRequests Array of NFTCollectionClaimRequest that consists collection ID of the NFT, token ID(s) the owner owns, array of booleans to indicate NFTAirdrop/NFTRewards claim for each token ID\\n    function claimInNFTs(\\n        address _vault,\\n        NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests,\\n        bool _withWalletRewards\\n    ) external nonReentrant onlyValidClaimSetup {\\n        address requester = _getRequester(_vault);\\n        uint256 totalClaimable = _claimInNFTs(requester, _nftCollectionClaimRequests, _withWalletRewards);\\n\\n        claimToken.safeTransfer(requester, totalClaimable);\\n    }\\n\\n    // ===================\\n    // Multicall Functions\\n    // ===================\\n\\n    /// @notice Claim token by claimTypes according to the vesting schedule after claim starts\\n    /// @dev Verify caller is multiClaim, claim data and transfer claim token to _requester if needed, should not be called by NFT holder\\n    /// emit { UserClaimed } event for amount claimed\\n    /// @param _requester address of eligible claim wallet\\n    /// @param _claimTypes Array of ClaimType to claim\\n    function claimFromMulti(address _requester, ClaimType[] calldata _claimTypes)\\n        external\\n        nonReentrant\\n        onlyValidClaimSetup\\n        onlyMultiClaim\\n    {\\n        uint256 totalClaimable = _claim(_requester, _claimTypes);\\n\\n        claimToken.safeTransfer(_requester, totalClaimable);\\n    }\\n\\n    /// @notice Bulk claim token by claimTypes and eligible NFTs according to the vesting schedule after claim starts\\n    /// @dev Verify caller is multiClaim, claim data and transfer claim token to NFT owner if needed, emit { BulkClaimedInNFTs } event for amount claimed\\n    /// @param _requester address of eligible holder wallet\\n    /// @param _nftCollectionClaimRequests Array of NFTCollectionClaimRequest that consists collection ID of the NFT, token ID(s) the owner owns, array of booleans to indicate NFTAirdrop/NFTRewards claim for each token ID\\n    function claimInNFTsFromMulti(\\n        address _requester,\\n        NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests,\\n        bool _withWalletRewards\\n    ) external nonReentrant onlyValidClaimSetup onlyMultiClaim {\\n        uint256 totalClaimable = _claimInNFTs(_requester, _nftCollectionClaimRequests, _withWalletRewards);\\n\\n        claimToken.safeTransfer(_requester, totalClaimable);\\n    }\\n\\n    /// @notice Support both v1 and v2 delegate wallet during the v1 to v2 migration\\n    /// @dev Given _vault (cold wallet) address, verify whether _msgSender() is a permitted delegate to operate on behalf of it\\n    /// @param _vault Address to verify against _msgSender\\n    function _getRequester(address _vault) private view returns (address) {\\n        if (_vault == address(0)) return _msgSender();\\n        bool isDelegateValid = dcV2.checkDelegateForAll(_msgSender(), _vault, \\\"\\\");\\n        if (isDelegateValid) return _vault;\\n        isDelegateValid = dc.checkDelegateForAll(_msgSender(), _vault);\\n        if (!isDelegateValid) revert InvalidDelegate();\\n        return _vault;\\n    }\\n\\n    function _claim(address _requester, ClaimType[] memory _claimTypes) internal returns (uint128 amountClaimed) {\\n        amountClaimed = _executeClaim(_requester, _claimTypes);\\n        if (amountClaimed == 0) revert NoClaimableToken();\\n\\n        emit UserClaimed(_requester, amountClaimed, block.timestamp);\\n    }\\n\\n    function _claimInNFTs(\\n        address _requester,\\n        NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests,\\n        bool _withWalletRewards\\n    ) internal returns (uint128 amountClaimed) {\\n        amountClaimed = _executeClaimInNFTs(_requester, _nftCollectionClaimRequests);\\n\\n        if (_withWalletRewards) {\\n            ClaimData storage userClaimData = usersClaimData[_requester][ClaimType.WalletRewards];\\n            uint128 claimable = _calculateClaimable(userClaimData, ClaimType.WalletRewards);\\n            if (claimable > 0) {\\n                /// @dev assume no overflow as the max amountClaimed amount won't exceed uint128 throughout the whole life cycle\\n                unchecked {\\n                    userClaimData.claimed += claimable;\\n                    amountClaimed += claimable;\\n                }\\n            }\\n        }\\n        if (amountClaimed == 0) revert NoClaimableToken();\\n\\n        emit ClaimedInNFTs(_requester, amountClaimed, block.timestamp);\\n    }\\n\\n    /// @dev Update `claimed` in usersClaimData for the given ClaimTypes\\n    /// @param _requester Address of the claimer\\n    /// @param _claimTypes Array of ClaimType to claim\\n    /// @return totalClaimable Amount of total claimable calculated from the given ClaimTypes\\n    function _executeClaim(address _requester, ClaimType[] memory _claimTypes)\\n        private\\n        returns (uint128 totalClaimable)\\n    {\\n        for (uint256 i; i < _claimTypes.length; i++) {\\n            ClaimData storage userClaimData = usersClaimData[_requester][_claimTypes[i]];\\n            uint128 claimable = _calculateClaimable(userClaimData, _claimTypes[i]);\\n            if (claimable > 0) {\\n                /// @dev assume no overflow as the max totalClaimable amount won't exceed uint128 throughout the whole life cycle\\n                unchecked {\\n                    userClaimData.claimed += claimable;\\n                    totalClaimable += claimable;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Update `airdropClaimed` AND/OR `rewardsClaimed` based on the booleans passed in nftUsersClaimData for the given NFT Collection ID and token ID(s)\\n    /// @param _requester Address of the claimer\\n    /// @param _nftCollectionClaimRequests Array of NFTCollectionClaimRequest that consists collection ID of the NFT, token ID(s) the owner owns, array of booleans to indicate NFTAirdrop/NFTRewards claim for each token ID\\n    /// @return totalNFTClaimable Amount of total NFT claimable calculated from the given NFT Collection ID and token ID(s)\\n    function _executeClaimInNFTs(address _requester, NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests)\\n        private\\n        returns (uint128 totalNFTClaimable)\\n    {\\n        for (uint256 i; i < _nftCollectionClaimRequests.length;) {\\n            uint256[] calldata tokenIds = _nftCollectionClaimRequests[i].tokenIds;\\n            bool[] calldata withNFTAirdropList = _nftCollectionClaimRequests[i].withNFTAirdropList;\\n            bool[] calldata withNFTRewardsList = _nftCollectionClaimRequests[i].withNFTRewardsList;\\n            uint256 len = tokenIds.length;\\n            if (len != withNFTAirdropList.length || len != withNFTRewardsList.length) {\\n                revert MismatchedArrays();\\n            }\\n            uint256 collectionId = _nftCollectionClaimRequests[i].collectionId;\\n\\n            for (uint256 j; j < len;) {\\n                uint128 claimable;\\n                if (withNFTAirdropList[j]) {\\n                    claimable = _verifyNFTClaim(_requester, collectionId, tokenIds[j]);\\n                    if (claimable > 0) {\\n                        /// @dev assume no overflow as the max claimable amount won't exceed uint128\\n                        unchecked {\\n                            nftUsersClaimData[collectionId][tokenIds[j]].airdropClaimed += claimable;\\n                            totalNFTClaimable += claimable;\\n                        }\\n                    }\\n                }\\n                if (withNFTRewardsList[j]) {\\n                    claimable = _verifyNFTRewardClaim(_requester, collectionId, tokenIds[j]);\\n                    if (claimable > 0) {\\n                        unchecked {\\n                            nftUsersClaimData[collectionId][tokenIds[j]].rewardsClaimed += claimable;\\n                            totalNFTClaimable += claimable;\\n                        }\\n                    }\\n                }\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Verify if the caller owns the NFT, and return the correct amount of claimable token\\n    /// @param _requester Address of the claimer\\n    /// @param _collectionId Collection ID of the NFT\\n    /// @param _tokenId Token ID that the owner owns\\n    function _verifyNFTClaim(address _requester, uint256 _collectionId, uint256 _tokenId)\\n        private\\n        view\\n        onlyValidCollectionId(_collectionId)\\n        returns (uint128)\\n    {\\n        if (nftCollections[_collectionId].ownerOf(_tokenId) != _requester) revert Unauthorized();\\n\\n        return _calculateNFTClaimable(nftUsersClaimData[_collectionId][_tokenId]);\\n    }\\n\\n    function _verifyNFTRewardClaim(address _requester, uint256 _collectionId, uint256 _tokenId)\\n        private\\n        view\\n        onlyValidCollectionId(_collectionId)\\n        returns (uint128)\\n    {\\n        if (nftCollections[_collectionId].ownerOf(_tokenId) != _requester) revert Unauthorized();\\n\\n        return _calculateNFTRewardsClaimable(nftUsersClaimData[_collectionId][_tokenId]);\\n    }\\n\\n    function _calculateClaimable(ClaimData memory _userClaimdata, ClaimType _claimType)\\n        private\\n        view\\n        returns (uint128)\\n    {\\n        uint128 totalClaimable = _userClaimdata.totalClaimable;\\n        uint128 claimed = _userClaimdata.claimed;\\n        if (totalClaimable == 0 || claimed >= totalClaimable) return 0;\\n        // for WalletRewards claim will expire after _MAX_CLAIM_PERIOD has passed since claim starts\\n        if (_claimType == ClaimType.WalletRewards) {\\n            if (block.timestamp > claimStartDate + _MAX_CLAIM_PERIOD) {\\n                return 0;\\n            }\\n            return totalClaimable;\\n        }\\n\\n        ClaimSchedule memory claimSchedule = claimScheduleOf[_claimType];\\n        uint256 numOfLockUpBPs = claimSchedule.lockUpBPs.length;\\n        if (numOfLockUpBPs == 0) revert InvalidClaimSetup();\\n\\n        // claim will expire after the allocated $MEME are fully vested for _MAX_CLAIM_PERIOD\\n        if (block.timestamp > claimStartDate + _LOCK_UP_SLOT * numOfLockUpBPs * 1 days + _MAX_CLAIM_PERIOD) {\\n            return 0;\\n        }\\n\\n        uint256 daysElapsed = (block.timestamp - claimStartDate) / 1 days;\\n        // count the cycles passed to distinguish which cycle's 180 days is elapsed\\n        uint256 cyclesPassed = daysElapsed / _LOCK_UP_SLOT;\\n\\n        // PrivatePresale first cycle unlocked amount locks up until the start of next cycle and allows instant claim\\n        if (_claimType == ClaimType.PrivatePresale && daysElapsed < _LOCK_UP_SLOT) return 0;\\n\\n        // Contributors has a different number of cycles, other claim types share the same one\\n        bool isClaimTypeFullyVested = _claimType != ClaimType.Contributors && cyclesPassed >= _END_CYCLE;\\n        bool isContributorFullyVested = _claimType == ClaimType.Contributors && cyclesPassed >= _END_CYCLE_CONTRIBUTORS;\\n        if (isClaimTypeFullyVested || isContributorFullyVested) {\\n            return _calculateRemainClaimable(totalClaimable, claimed);\\n        }\\n\\n        // cyclesPassed + 1 because we want to calculate the current cycle's (with < 180 days elapsed) unlocked amount\\n        return _calculateRemainClaimable(\\n            _calculateUnlockedAmount(claimSchedule, numOfLockUpBPs, totalClaimable, cyclesPassed + 1, daysElapsed),\\n            claimed\\n        );\\n    }\\n\\n    function _calculateNFTClaimable(NFTClaimData memory _nftUserClaimdata) private view returns (uint128) {\\n        uint256 currentNFTUnlockedBP_ = currentNFTUnlockedBP;\\n        if (currentNFTUnlockedBP_ == 0) return 0;\\n\\n        // claim will expire after the allocated $MEME are fully vested for _MAX_CLAIM_PERIOD\\n        if (currentNFTUnlockedBP_ == _BASIS_POINTS) {\\n            if (block.timestamp > currentNFTUnlockTimestamp + _MAX_CLAIM_PERIOD) {\\n                return 0;\\n            }\\n        }\\n\\n        uint128 airdropTotalClaimable = _nftUserClaimdata.airdropTotalClaimable;\\n        uint128 airdropClaimed = _nftUserClaimdata.airdropClaimed;\\n        if (airdropTotalClaimable == 0 || airdropClaimed >= airdropTotalClaimable) return 0;\\n\\n        return _calculateRemainClaimable(_calculateNFTUnlockedAmount(airdropTotalClaimable), airdropClaimed);\\n    }\\n\\n    function _calculateNFTRewardsClaimable(NFTClaimData memory _nftUserClaimdata) private view returns (uint128) {\\n        uint128 rewardsTotalClaimable = _nftUserClaimdata.rewardsTotalClaimable;\\n        uint128 rewardsClaimed = _nftUserClaimdata.rewardsClaimed;\\n        if (rewardsTotalClaimable == 0 || rewardsClaimed >= rewardsTotalClaimable) return 0;\\n\\n        // claim will expire after the allocated $MEME are fully vested for _MAX_CLAIM_PERIOD\\n        if (block.timestamp > claimStartDate + _MAX_CLAIM_PERIOD) {\\n            return 0;\\n        }\\n\\n        return _calculateRemainClaimable(rewardsTotalClaimable, rewardsClaimed);\\n    }\\n\\n    function _calculateRemainClaimable(uint128 _totalClaimable, uint128 _claimed) private pure returns (uint128) {\\n        /// @dev assume no underflow because we already return zero when _claimed is >= _totalClaimable\\n        unchecked {\\n            return _totalClaimable <= _claimed ? 0 : _totalClaimable - _claimed;\\n        }\\n    }\\n\\n    function _calculateUnlockedAmount(\\n        ClaimSchedule memory _claimSchedule,\\n        uint256 _numOfLockUpBPs,\\n        uint128 _totalClaimable,\\n        uint256 _currentCycle,\\n        uint256 _daysElapsed\\n    ) private pure returns (uint128) {\\n        if (_currentCycle < _claimSchedule.startCycle) return 0;\\n\\n        if (_currentCycle > _numOfLockUpBPs) return _totalClaimable;\\n\\n        // _currentCycle == _numOfLockUpBPs means _currentCycle is the last one\\n        uint256 currentUnlockedBP =\\n            _currentCycle == _numOfLockUpBPs ? _BASIS_POINTS : _claimSchedule.lockUpBPs[_currentCycle];\\n\\n        return _calculateUnlockedAmountByDaysElapsed(\\n            _totalClaimable,\\n            _claimSchedule.lockUpBPs[_currentCycle - 1],\\n            currentUnlockedBP,\\n            _daysElapsed % _LOCK_UP_SLOT\\n        );\\n    }\\n\\n    function _calculateUnlockedAmountByDaysElapsed(\\n        uint128 _totalClaimable,\\n        uint256 _previousUnlockedBP,\\n        uint256 _currentUnlockedBP,\\n        uint256 _daysElapsedForCurrentCycle\\n    ) private pure returns (uint128) {\\n        if (_daysElapsedForCurrentCycle == 0) {\\n            return _toUint128(_totalClaimable * _previousUnlockedBP / _BASIS_POINTS);\\n        }\\n\\n        return _toUint128(\\n            _totalClaimable * _previousUnlockedBP / _BASIS_POINTS\\n                + _totalClaimable * (_currentUnlockedBP - _previousUnlockedBP) * _daysElapsedForCurrentCycle / _BASIS_POINTS\\n                    / _LOCK_UP_SLOT\\n        );\\n    }\\n\\n    function _calculateNFTUnlockedAmount(uint128 _totalClaimable) private view returns (uint128) {\\n        return block.timestamp < currentNFTUnlockTimestamp\\n            ? _toUint128(_totalClaimable * previousNFTUnlockedBP / _BASIS_POINTS)\\n            : _toUint128(_totalClaimable * currentNFTUnlockedBP / _BASIS_POINTS);\\n    }\\n\\n    function _toUint128(uint256 value) private pure returns (uint128) {\\n        if (value >= 1 << 128) revert Uint128Overflow();\\n        return uint128(value);\\n    }\\n\\n    // ====================\\n    // Validation Modifiers\\n    // ====================\\n\\n    modifier onlyUpgrader() {\\n        if (_msgSender() != upgrader) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyMultiClaim() {\\n        if (_msgSender() != multiClaim) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyClaimNotOpen() {\\n        if (claimActive) revert ClaimNotClosed();\\n        _;\\n    }\\n\\n    modifier onlyValidClaimSetup() {\\n        if (!claimActive || claimStartDate == 0 || block.timestamp < claimStartDate) revert ClaimNotAvailable();\\n        if (address(claimToken) == address(0)) revert ClaimTokenZeroAddress();\\n        _;\\n    }\\n\\n    modifier onlyValidCollectionId(uint256 _collectionId) {\\n        if (_collectionId >= nftCollections.length) revert InvalidCollectionId();\\n        _;\\n    }\\n\\n    // ==============\\n    // Claimable Settings\\n    // ==============\\n\\n    /// @dev Set `totalClaimable` in usersClaimData for claim type(s)\\n    /// @param _addresses Array of addresses eligible for the claim\\n    /// @param _claimables Array of amounts of claim token\\n    /// @param _claimTypes Array of ClaimType\\n    function setClaimables(\\n        address[] calldata _addresses,\\n        uint128[] calldata _claimables,\\n        ClaimType[] calldata _claimTypes\\n    ) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        if (len != _claimables.length || len != _claimTypes.length) revert MismatchedArrays();\\n\\n        for (uint256 i; i < len;) {\\n            usersClaimData[_addresses[i]][_claimTypes[i]].totalClaimable = _claimables[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Set `airdropTotalClaimable` and `rewardsTotalClaimable` in nftUsersClaimData for token ID(s) of respective collection ID\\n    /// @param _nftClaimables Array of NFTClaimable which consists of collectionId, tokenId and amount of claim token\\n    function setNFTClaimables(NFTClaimable[] calldata _nftClaimables) external onlyOwner {\\n        for (uint256 i; i < _nftClaimables.length;) {\\n            uint256 collectionId = _nftClaimables[i].collectionId;\\n            uint256 tokenId = _nftClaimables[i].tokenId;\\n            uint128 airdropAmount = _nftClaimables[i].airdropTotalClaimable;\\n            uint128 rewardsAmount = _nftClaimables[i].rewardsTotalClaimable;\\n\\n            nftUsersClaimData[collectionId][tokenId].airdropTotalClaimable = airdropAmount;\\n            nftUsersClaimData[collectionId][tokenId].rewardsTotalClaimable = rewardsAmount;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Add new unlock percentage in Basis Points(BP) for NFT holders to instant claim until _BASIS_POINTS is reached\\n    /// @param _additionalNFTUnlockedBP Additional unlocked BP, only add up the currentNFTUnlockedBP\\n    /// @param _newUnlockTimestamp Timestamp for new unlocked BP to take effect\\n    function addNFTUnlockedBPAndSetUnlockTs(uint64 _additionalNFTUnlockedBP, uint128 _newUnlockTimestamp)\\n        external\\n        onlyOwner\\n    {\\n        uint64 currentNFTUnlockedBP_ = currentNFTUnlockedBP;\\n        uint128 currentNFTUnlockTimestamp_ = currentNFTUnlockTimestamp;\\n        if (\\n            _additionalNFTUnlockedBP == 0 || currentNFTUnlockedBP_ + _additionalNFTUnlockedBP > _BASIS_POINTS\\n                || _newUnlockTimestamp <= currentNFTUnlockTimestamp_\\n        ) revert InvalidClaimSetup();\\n        previousNFTUnlockedBP = currentNFTUnlockedBP_;\\n        currentNFTUnlockTimestamp = _newUnlockTimestamp;\\n        currentNFTUnlockedBP += _additionalNFTUnlockedBP;\\n    }\\n\\n    /// @dev Set the unclaimedNFTRewards mapping in order to withdraw unclaimed NFTRewards after they are expired\\n    /// @param _collectionId Respective collection ID with unclaimed NFTRewards\\n    /// @param _unclaimTokenIds Array of token IDs with NFTRewards that are left unclaimed\\n    function setUnclaimedNFTRewards(uint256 _collectionId, uint128[] calldata _unclaimTokenIds)\\n        external\\n        onlyValidCollectionId(_collectionId)\\n        onlyOwner\\n    {\\n        if (block.timestamp <= claimStartDate + _MAX_CLAIM_PERIOD) revert NFTRewardsNotExpired();\\n\\n        UnclaimedNFTRewards storage _unclaimedNftRewards = unclaimedNftRewards[_collectionId];\\n        uint256 len = _unclaimTokenIds.length;\\n        if (len == 0 || _unclaimedNftRewards.lastTokenId > _unclaimTokenIds[0]) revert InvalidWithdrawalSetup();\\n\\n        uint128 totalRewardsUnclaimed;\\n        for (uint256 i; i < len;) {\\n            // ensure the next tokenId is bigger than the prev one\\n            if (i != 0) {\\n                if (_unclaimTokenIds[i] < _unclaimTokenIds[i - 1]) revert InvalidWithdrawalSetup();\\n            }\\n            NFTClaimData memory nftUserClaimData = nftUsersClaimData[_collectionId][_unclaimTokenIds[i]];\\n            uint128 rewardsUnclaimed = nftUserClaimData.rewardsTotalClaimable - nftUserClaimData.rewardsClaimed;\\n            if (rewardsUnclaimed > 0) totalRewardsUnclaimed += rewardsUnclaimed;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _unclaimedNftRewards.lastTokenId = _unclaimTokenIds[len - 1];\\n        _unclaimedNftRewards.totalUnclaimed += totalRewardsUnclaimed;\\n    }\\n\\n    /// @dev Set `airdropTotalClaimable` in nftUsersClaimData specifically for single token ID of a newly revelaed Captainz\\n    /// @param _tokenId Token ID of the newly revealed Captainz\\n    /// @param _additionalAirdropTotalClaimable Additional airdropTotalClaimable, only add up since a base amount will be set for unrevealed Captainz\\n    function setRevealedCaptainzClaimable(uint256 _tokenId, uint128 _additionalAirdropTotalClaimable)\\n        external\\n        onlyOwner\\n    {\\n        nftUsersClaimData[1][_tokenId].airdropTotalClaimable += _additionalAirdropTotalClaimable;\\n    }\\n\\n    // ==============\\n    // Claim Settings\\n    // ==============\\n\\n    /// @dev Deposit claim token to contract and start the claim, to be called ONCE only\\n    /// @param _tokenAmount Amount of claim token to be deposited\\n    /// @param _claimStartDate Unix timestamp of the claim start date\\n    function depositClaimTokenAndStartClaim(uint256 _tokenAmount, uint256 _claimStartDate) external onlyOwner {\\n        if (claimTokenDeposited) revert AlreadyDeposited();\\n        if (address(claimToken) == address(0)) revert ClaimTokenZeroAddress();\\n        if (_tokenAmount == 0) revert InvalidClaimSetup();\\n        if (_claimStartDate == 0) revert InvalidClaimSetup();\\n\\n        claimToken.safeTransferFrom(_msgSender(), address(this), _tokenAmount);\\n        claimStartDate = _claimStartDate;\\n        claimActive = true;\\n        claimTokenDeposited = true;\\n\\n        emit ClaimTokenDepositedAndClaimStarted(_tokenAmount, _claimStartDate);\\n    }\\n\\n    /// @dev Withdraw claim token from contract only when claim is not open\\n    /// @param _receiver Address to receive the token\\n    /// @param _amount Amount of claim token to be withdrawn\\n    function withdrawClaimToken(address _receiver, uint256 _amount) external onlyOwner onlyClaimNotOpen {\\n        if (address(claimToken) == address(0)) revert ClaimTokenZeroAddress();\\n\\n        claimToken.safeTransfer(_receiver, _amount);\\n    }\\n\\n    /// @dev Withdraw unclaimed NFTRewards after they are expired when _MAX_CLAIM_PERIOD has passed since claim starts, to be called ONCE only\\n    /// @param _receiver Address to receive the token\\n    function withdrawUnclaimedNFTRewards(address _receiver) external onlyOwner {\\n        if (unclaimedNFTRewardsWithdrawn) revert AlreadyWithdrawn();\\n        if (block.timestamp <= claimStartDate + _MAX_CLAIM_PERIOD) revert NFTRewardsNotExpired();\\n        if (_receiver == address(0)) revert InvalidWithdrawalSetup();\\n\\n        uint256 totalWithdrawn;\\n        for (uint256 i; i < nftCollections.length;) {\\n            UnclaimedNFTRewards storage _unclaimedNftRewards = unclaimedNftRewards[i];\\n\\n            uint128 unclaimed = _unclaimedNftRewards.totalUnclaimed;\\n            if (unclaimed > 0) {\\n                claimToken.safeTransfer(_receiver, unclaimed);\\n                totalWithdrawn += unclaimed;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        unclaimedNFTRewardsWithdrawn = true;\\n\\n        emit UnclaimedNFTRewardsWithdrawn(totalWithdrawn, block.timestamp);\\n    }\\n\\n    /// @dev Set claim schedule(s) for claim type(s)\\n    /// @param _claimTypes Array of ClaimType\\n    /// @param _claimSchedules Array of ClaimSchedule for each claim type\\n    function setClaimSchedules(ClaimType[] calldata _claimTypes, ClaimSchedule[] calldata _claimSchedules)\\n        external\\n        onlyOwner\\n        onlyClaimNotOpen\\n    {\\n        uint256 len = _claimSchedules.length;\\n        if (_claimTypes.length != len) revert MismatchedArrays();\\n        for (uint256 i; i < len;) {\\n            uint256[] memory lockUpBPs = _claimSchedules[i].lockUpBPs;\\n            for (uint256 j; j < lockUpBPs.length;) {\\n                if (lockUpBPs[j] > _BASIS_POINTS) revert InvalidClaimSetup();\\n                // ensure the accumulated lockupBP is bigger than the prev one\\n                if (j != 0) {\\n                    if (lockUpBPs[j] < lockUpBPs[j - 1]) revert InvalidClaimSetup();\\n                }\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            claimScheduleOf[_claimTypes[i]] = _claimSchedules[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Start/stop the claim\\n    /// @param _claimActive New boolean to indicate active or not\\n    function setClaimActive(bool _claimActive) external onlyOwner {\\n        claimActive = _claimActive;\\n\\n        emit ClaimStatusUpdated(_claimActive);\\n    }\\n\\n    /// @dev Set the new claim start date, allow flexibility on setting as past date to unlock claim earlier\\n    /// @param _claimStartDate New date to start the claim\\n    function setClaimStartDate(uint256 _claimStartDate) external onlyOwner {\\n        claimStartDate = _claimStartDate;\\n    }\\n\\n    /// @dev Set the new MultiClaim contract address\\n    /// @param _multiClaim New MultiClaim contract address\\n    function setMultiClaimAddress(address _multiClaim) external onlyOwner {\\n        multiClaim = _multiClaim;\\n    }\\n\\n    /// @dev Set the new UUPS proxy upgrader, allow setting address(0) to disable upgradeability\\n    /// @param _upgrader New upgrader\\n    function setUpgrader(address _upgrader) external onlyOwner {\\n        if (upgraderRenounced) revert UpgraderRenounced();\\n        upgrader = _upgrader;\\n\\n        emit UpgraderUpdated(_upgrader);\\n    }\\n\\n    /// @notice Renounce the upgradibility of this contract\\n    function renounceUpgrader() external onlyOwner {\\n        if (upgraderRenounced) revert UpgraderRenounced();\\n\\n        upgraderRenounced = true;\\n        upgrader = address(0);\\n\\n        emit UpgraderUpdated(address(0));\\n    }\\n\\n    // =======\\n    // Getters\\n    // =======\\n\\n    /// @notice Get claim info of a user after claim starts\\n    /// @param _user Address of user\\n    /// @return claimableAmount Amount of claimable tokens for a user\\n    /// @return claimableExpiry Timestamp of the claim expiry date for the respective _claimType\\n    function getClaimInfo(address _user, ClaimType _claimType)\\n        public\\n        view\\n        onlyValidClaimSetup\\n        returns (uint128 claimableAmount, uint256 claimableExpiry)\\n    {\\n        uint256 numOfLockUpBPs = claimScheduleOf[_claimType].lockUpBPs.length;\\n\\n        claimableAmount = _calculateClaimable(usersClaimData[_user][_claimType], _claimType);\\n        claimableExpiry = _claimType == ClaimType.WalletRewards\\n            ? claimStartDate + _MAX_CLAIM_PERIOD\\n            : claimStartDate + _LOCK_UP_SLOT * numOfLockUpBPs * 1 days + _MAX_CLAIM_PERIOD;\\n    }\\n\\n    /// @notice Get claim info of one eligible NFT after claiming starts\\n    /// @param _collectionId Address of the eligible NFT\\n    /// @param _tokenId Token ID that the owner owns\\n    /// @return claimableAmount Amount of claimable tokens for the NFT\\n    /// @return claimableExpiry Timestamp of the claim expiry date for NFT airdrop\\n    function getClaimInfoByNFT(uint256 _collectionId, uint256 _tokenId)\\n        public\\n        view\\n        onlyValidClaimSetup\\n        onlyValidCollectionId(_collectionId)\\n        returns (uint128 claimableAmount, uint256 claimableExpiry)\\n    {\\n        NFTClaimData memory nftUserClaimData = nftUsersClaimData[_collectionId][_tokenId];\\n\\n        claimableAmount = _calculateNFTClaimable(nftUserClaimData);\\n        claimableExpiry = currentNFTUnlockedBP == _BASIS_POINTS ? currentNFTUnlockTimestamp + _MAX_CLAIM_PERIOD : 0;\\n    }\\n\\n    /// @notice Get rewards claim info of one eligible NFT after claiming starts\\n    /// @param _collectionId Address of the eligible NFT\\n    /// @param _tokenId Token ID that the owner owns\\n    /// @return claimableAmount Amount of claimable tokens for the NFT\\n    /// @return claimableExpiry Timestamp of the claim expiry date for NFT rewards\\n    function getRewardsClaimInfoByNFT(uint256 _collectionId, uint256 _tokenId)\\n        public\\n        view\\n        onlyValidClaimSetup\\n        onlyValidCollectionId(_collectionId)\\n        returns (uint128 claimableAmount, uint256 claimableExpiry)\\n    {\\n        NFTClaimData memory nftUserClaimData = nftUsersClaimData[_collectionId][_tokenId];\\n\\n        claimableAmount = _calculateNFTRewardsClaimable(nftUserClaimData);\\n        claimableExpiry = claimStartDate + _MAX_CLAIM_PERIOD;\\n    }\\n\\n    /// @notice Get total amounts of claimable tokens of multiple tokenIds in one eligible collection after claiming starts\\n    /// @param _collectionId ID of NFT collection\\n    /// @param _tokenIds Array of all token IDs the owner owns in that collection\\n    function getTotalClaimableAmountsByNFTs(uint256 _collectionId, uint256[] calldata _tokenIds)\\n        public\\n        view\\n        returns (uint128 totalClaimable)\\n    {\\n        for (uint256 i; i < _tokenIds.length; i++) {\\n            (uint128 claimable,) = getClaimInfoByNFT(_collectionId, _tokenIds[i]);\\n            if (claimable == 0) continue;\\n\\n            totalClaimable += claimable;\\n        }\\n    }\\n\\n    /// @notice Get user claim data of multiple tokenIds in multiple eligible collections\\n    /// @param _nftCollectionsInfo Array of NFTCollectionInfo with collectionId and tokenId(s)\\n    /// @return collectionClaimInfo Array of CollectionClaimData that includes claim data for each tokenId of respective collection\\n    function getUserClaimDataByCollections(NFTCollectionInfo[] calldata _nftCollectionsInfo)\\n        public\\n        view\\n        returns (CollectionClaimData[] memory collectionClaimInfo)\\n    {\\n        uint256 numOfTokenIds;\\n        uint256 len = _nftCollectionsInfo.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            numOfTokenIds += _nftCollectionsInfo[i].tokenIds.length;\\n        }\\n        collectionClaimInfo = new CollectionClaimData[](numOfTokenIds);\\n        uint256 activeId = 0;\\n        for (uint256 i; i < len; i++) {\\n            uint256 collectionId = _nftCollectionsInfo[i].collectionId;\\n            uint256[] memory tokenIds = _nftCollectionsInfo[i].tokenIds;\\n            for (uint256 j; j < tokenIds.length; j++) {\\n                (uint128 airdropClaimable, uint256 airdropClaimableExpiry) =\\n                    getClaimInfoByNFT(collectionId, tokenIds[j]);\\n                (uint128 rewardsClaimable, uint256 rewardClaimableExpiry) =\\n                    getRewardsClaimInfoByNFT(collectionId, tokenIds[j]);\\n                collectionClaimInfo[activeId++] = CollectionClaimData(\\n                    collectionId,\\n                    tokenIds[j],\\n                    airdropClaimable,\\n                    airdropClaimableExpiry,\\n                    nftUsersClaimData[collectionId][tokenIds[j]].airdropTotalClaimable,\\n                    nftUsersClaimData[collectionId][tokenIds[j]].airdropClaimed,\\n                    rewardsClaimable,\\n                    rewardClaimableExpiry,\\n                    nftUsersClaimData[collectionId][tokenIds[j]].rewardsTotalClaimable,\\n                    nftUsersClaimData[collectionId][tokenIds[j]].rewardsClaimed\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Get the claim schedule of a certain claim type\\n    function getClaimSchedule(ClaimType _claimType) public view returns (ClaimSchedule memory) {\\n        return claimScheduleOf[_claimType];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/delegation_registry/IDelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.13;\\n\\n/**\\n * @title IDelegateRegistry\\n * @custom:version 2.0\\n * @custom:author foobar (0xfoobar)\\n * @notice A standalone immutable registry storing delegated permissions from one address to another\\n */\\ninterface IDelegateRegistry {\\n    /// @notice Delegation type, NONE is used when a delegation does not exist or is revoked\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        ERC721,\\n        ERC20,\\n        ERC1155\\n    }\\n\\n    /// @notice Struct for returning delegations\\n    struct Delegation {\\n        DelegationType type_;\\n        address to;\\n        address from;\\n        bytes32 rights;\\n        address contract_;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Emitted when an address delegates or revokes rights for their entire wallet\\n    event DelegateAll(address indexed from, address indexed to, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for a contract address\\n    event DelegateContract(\\n        address indexed from, address indexed to, address indexed contract_, bytes32 rights, bool enable\\n    );\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an ERC721 tokenId\\n    event DelegateERC721(\\n        address indexed from,\\n        address indexed to,\\n        address indexed contract_,\\n        uint256 tokenId,\\n        bytes32 rights,\\n        bool enable\\n    );\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of ERC20 tokens\\n    event DelegateERC20(\\n        address indexed from, address indexed to, address indexed contract_, bytes32 rights, uint256 amount\\n    );\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of an ERC1155 tokenId\\n    event DelegateERC1155(\\n        address indexed from,\\n        address indexed to,\\n        address indexed contract_,\\n        uint256 tokenId,\\n        bytes32 rights,\\n        uint256 amount\\n    );\\n\\n    /// @notice Thrown if multicall calldata is malformed\\n    error MulticallFailed();\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n     * @param data The encoded function data for each of the calls to make to this contract\\n     * @return results The results from each of the calls passed in via data\\n     */\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for all contracts\\n     * @param to The address to act as delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateAll(address to, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific contract\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateContract(address to, address contract_, bytes32 rights, bool enable)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific ERC721 token\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC721(address to, address contract_, uint256 tokenId, bytes32 rights, bool enable)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC20 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address for the fungible token contract\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC20(address to, address contract_, bytes32 rights, uint256 amount)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC1155 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address of the contract that holds the token\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount of that token id to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC1155(address to, address contract_, uint256 tokenId, bytes32 rights, uint256 amount)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * ----------- CHECKS -----------\\n     */\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the entire wallet\\n     * @param to The potential delegate address\\n     * @param from The potential address who delegated rights\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on the from's behalf\\n     */\\n    function checkDelegateForAll(address to, address from, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specified `contract_` or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet or that specific contract\\n     */\\n    function checkDelegateForContract(address to, address from, address contract_, bytes32 rights)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specific `contract` and `tokenId`, the entire `contract_`, or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param tokenId The token id for the token to delegating\\n     * @param from The wallet that issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet, that contract, or that specific tokenId\\n     */\\n    function checkDelegateForERC721(address to, address from, address contract_, uint256 tokenId, bytes32 rights)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns the amount of ERC20 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC20(address to, address from, address contract_, bytes32 rights)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of a ERC1155 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param tokenId The token id to check the delegated amount of\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC1155(address to, address from, address contract_, uint256 tokenId, bytes32 rights)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * ----------- ENUMERATIONS -----------\\n     */\\n\\n    /**\\n     * @notice Returns all enabled delegations a given delegate has received\\n     * @param to The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getIncomingDelegations(address to) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all enabled delegations an address has given out\\n     * @param from The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getOutgoingDelegations(address from) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has received\\n     * @param to The address to retrieve incoming delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getIncomingDelegationHashes(address to) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has given out\\n     * @param from The address to retrieve outgoing delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getOutgoingDelegationHashes(address from) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns the delegations for a given array of delegation hashes\\n     * @param delegationHashes is an array of hashes that correspond to delegations\\n     * @return delegations Array of Delegation structs, return empty structs for nonexistent or revoked delegations\\n     */\\n    function getDelegationsFromHashes(bytes32[] calldata delegationHashes)\\n        external\\n        view\\n        returns (Delegation[] memory delegations);\\n\\n    /**\\n     * ----------- STORAGE ACCESS -----------\\n     */\\n\\n    /**\\n     * @notice Allows external contracts to read arbitrary storage slots\\n     */\\n    function readSlot(bytes32 location) external view returns (bytes32);\\n\\n    /**\\n     * @notice Allows external contracts to read an arbitrary array of storage slots\\n     */\\n    function readSlots(bytes32[] calldata locations) external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/delegation_registry/IDelegationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title An immutable registry contract to be deployed as a standalone primitive\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n * from here and integrate those permissions into their flow\\n */\\ninterface IDelegationRegistry {\\n    /// @notice Delegation type\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        TOKEN\\n    }\\n\\n    /// @notice Info about a single delegation, used for onchain enumeration\\n    struct DelegationInfo {\\n        DelegationType type_;\\n        address vault;\\n        address delegate;\\n        address contract_;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Info about a single contract-level delegation\\n    struct ContractDelegation {\\n        address contract_;\\n        address delegate;\\n    }\\n\\n    /// @notice Info about a single token-level delegation\\n    struct TokenDelegation {\\n        address contract_;\\n        uint256 tokenId;\\n        address delegate;\\n    }\\n\\n    /// @notice Emitted when a user delegates their entire wallet\\n    event DelegateForAll(address vault, address delegate, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific contract\\n    event DelegateForContract(address vault, address delegate, address contract_, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific token\\n    event DelegateForToken(address vault, address delegate, address contract_, uint256 tokenId, bool value);\\n\\n    /// @notice Emitted when a user revokes all delegations\\n    event RevokeAllDelegates(address vault);\\n\\n    /// @notice Emitted when a user revoes all delegations for a given delegate\\n    event RevokeDelegate(address vault, address delegate);\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for all contracts\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForAll(address delegate, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific contract\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForContract(address delegate, address contract_, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific token\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForToken(address delegate, address contract_, uint256 tokenId, bool value) external;\\n\\n    /**\\n     * @notice Revoke all delegates\\n     */\\n    function revokeAllDelegates() external;\\n\\n    /**\\n     * @notice Revoke a specific delegate for all their permissions\\n     * @param delegate The hotwallet to revoke\\n     */\\n    function revokeDelegate(address delegate) external;\\n\\n    /**\\n     * @notice Remove yourself as a delegate for a specific vault\\n     * @param vault The vault which delegated to the msg.sender, and should be removed\\n     */\\n    function revokeSelf(address vault) external;\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\\n     * @param delegate The delegate that you would like to retrieve delegations for\\n     * @return info Array of DelegationInfo structs\\n     */\\n    function getDelegationsByDelegate(address delegate) external view returns (DelegationInfo[] memory);\\n\\n    /**\\n     * @notice Returns an array of wallet-level delegates for a given vault\\n     * @param vault The cold wallet who issued the delegation\\n     * @return addresses Array of wallet-level delegates for a given vault\\n     */\\n    function getDelegatesForAll(address vault) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault and contract\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault and contract\\n     */\\n    function getDelegatesForContract(address vault, address contract_) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault's token\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract holding the token\\n     * @param tokenId The token id for the token you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault's token\\n     */\\n    function getDelegatesForToken(address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all contract-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of ContractDelegation structs\\n     */\\n    function getContractLevelDelegations(address vault)\\n        external\\n        view\\n        returns (ContractDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all token-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of TokenDelegation structs\\n     */\\n    function getTokenLevelDelegations(address vault) external view returns (TokenDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on the entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForAll(address delegate, address vault) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(address delegate, address vault, address contract_)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForToken(address delegate, address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"shanghai\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimTokenZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaimSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollectionId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTRewardsNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimableToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Uint128Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpgraderRenounced\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimActive\",\"type\":\"bool\"}],\"name\":\"ClaimStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimStartDate\",\"type\":\"uint256\"}],\"name\":\"ClaimTokenDepositedAndClaimStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAt\",\"type\":\"uint256\"}],\"name\":\"ClaimedInNFTs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAt\",\"type\":\"uint256\"}],\"name\":\"UnclaimedNFTRewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUpgrader\",\"type\":\"address\"}],\"name\":\"UpgraderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAt\",\"type\":\"uint256\"}],\"name\":\"UserClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_additionalNFTUnlockedBP\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_newUnlockTimestamp\",\"type\":\"uint128\"}],\"name\":\"addNFTUnlockedBPAndSetUnlockTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"enum ClaimType[]\",\"name\":\"_claimTypes\",\"type\":\"uint8[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"internalType\":\"enum ClaimType[]\",\"name\":\"_claimTypes\",\"type\":\"uint8[]\"}],\"name\":\"claimFromMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"withNFTAirdropList\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"withNFTRewardsList\",\"type\":\"bool[]\"}],\"internalType\":\"struct NFTCollectionClaimRequest[]\",\"name\":\"_nftCollectionClaimRequests\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_withWalletRewards\",\"type\":\"bool\"}],\"name\":\"claimInNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"withNFTAirdropList\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"withNFTRewardsList\",\"type\":\"bool[]\"}],\"internalType\":\"struct NFTCollectionClaimRequest[]\",\"name\":\"_nftCollectionClaimRequests\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_withWalletRewards\",\"type\":\"bool\"}],\"name\":\"claimInNFTsFromMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"}],\"name\":\"claimScheduleOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startCycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokenDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTUnlockedBP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dc\",\"outputs\":[{\"internalType\":\"contract IDelegationRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcV2\",\"outputs\":[{\"internalType\":\"contract IDelegateRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimStartDate\",\"type\":\"uint256\"}],\"name\":\"depositClaimTokenAndStartClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"}],\"name\":\"getClaimInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"claimableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"claimableExpiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimInfoByNFT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"claimableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"claimableExpiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ClaimType\",\"name\":\"_claimType\",\"type\":\"uint8\"}],\"name\":\"getClaimSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"lockUpBPs\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ClaimSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardsClaimInfoByNFT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"claimableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"claimableExpiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTotalClaimableAmountsByNFTs\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalClaimable\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct NFTCollectionInfo[]\",\"name\":\"_nftCollectionsInfo\",\"type\":\"tuple[]\"}],\"name\":\"getUserClaimDataByCollections\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"airdropClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"airdropClaimableExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"airdropTotalClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"airdropClaimed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimableExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"rewardsTotalClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsClaimed\",\"type\":\"uint128\"}],\"internalType\":\"struct CollectionClaimData[]\",\"name\":\"collectionClaimInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_captainzAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_potatozAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiClaim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftCollections\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nftUsersClaimData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"airdropTotalClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsTotalClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"airdropClaimed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsClaimed\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousNFTUnlockedBP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceUpgrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claimActive\",\"type\":\"bool\"}],\"name\":\"setClaimActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ClaimType[]\",\"name\":\"_claimTypes\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"lockUpBPs\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ClaimSchedule[]\",\"name\":\"_claimSchedules\",\"type\":\"tuple[]\"}],\"name\":\"setClaimSchedules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimStartDate\",\"type\":\"uint256\"}],\"name\":\"setClaimStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_claimables\",\"type\":\"uint128[]\"},{\"internalType\":\"enum ClaimType[]\",\"name\":\"_claimTypes\",\"type\":\"uint8[]\"}],\"name\":\"setClaimables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiClaim\",\"type\":\"address\"}],\"name\":\"setMultiClaimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"airdropTotalClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsTotalClaimable\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTClaimable[]\",\"name\":\"_nftClaimables\",\"type\":\"tuple[]\"}],\"name\":\"setNFTClaimables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_additionalAirdropTotalClaimable\",\"type\":\"uint128\"}],\"name\":\"setRevealedCaptainzClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint128[]\",\"name\":\"_unclaimTokenIds\",\"type\":\"uint128[]\"}],\"name\":\"setUnclaimedNFTRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgrader\",\"type\":\"address\"}],\"name\":\"setUpgrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedNFTRewardsWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"unclaimedNftRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastTokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalUnclaimed\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgraderRenounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"enum ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"}],\"name\":\"usersClaimData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalClaimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimed\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawUnclaimedNFTRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MemecoinClaim", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}