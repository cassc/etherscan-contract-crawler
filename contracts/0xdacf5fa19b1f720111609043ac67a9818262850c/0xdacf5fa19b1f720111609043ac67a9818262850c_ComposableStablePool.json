{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/IVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @notice Simple interface to retrieve the version of a deployed contract.\\n */\\ninterface IVersion {\\n    /**\\n     * @dev Returns a JSON representation of the contract version containing name, version number and task ID.\\n     */\\n    function version() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/ComposableStablePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IVersion.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/BaseGeneralPool.sol\\\";\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol\\\";\\n\\nimport \\\"./ComposableStablePoolStorage.sol\\\";\\nimport \\\"./ComposableStablePoolRates.sol\\\";\\nimport \\\"./ComposableStablePoolStorage.sol\\\";\\nimport \\\"./ComposableStablePoolRates.sol\\\";\\nimport \\\"./ComposableStablePoolProtocolFees.sol\\\";\\nimport \\\"./StablePoolAmplification.sol\\\";\\nimport \\\"./StableMath.sol\\\";\\n\\n/**\\n * @dev StablePool with preminted BPT and rate providers for each token, allowing for e.g. wrapped tokens with a known\\n * price ratio, such as Compound's cTokens.\\n *\\n * BPT is preminted on Pool initialization and registered as one of the Pool's tokens, allowing for swaps to behave as\\n * single-token joins or exits (by swapping a token for BPT). We also support regular joins and exits, which can mint\\n * and burn BPT.\\n *\\n * Preminted BPT is deposited in the Vault as the initial balance of the Pool, and doesn't belong to any entity until\\n * transferred out of the Pool. The Pool's arithmetic behaves as if it didn't exist, and the BPT total supply is not\\n * a useful value: we rely on the 'virtual supply' (how much BPT is actually owned outside the Vault) instead.\\n */\\ncontract ComposableStablePool is\\n    IRateProvider,\\n    IVersion,\\n    BaseGeneralPool,\\n    StablePoolAmplification,\\n    ComposableStablePoolRates,\\n    ComposableStablePoolProtocolFees\\n{\\n    using FixedPoint for uint256;\\n    using PriceRateCache for bytes32;\\n    using StablePoolUserData for bytes;\\n    using BasePoolUserData for bytes;\\n\\n    // The maximum imposed by the Vault, which stores balances in a packed format, is 2**(112) - 1.\\n    // We are preminting half of that value (rounded up).\\n    uint256 private constant _PREMINTED_TOKEN_BALANCE = 2**(111);\\n\\n    string private _version;\\n\\n    // The constructor arguments are received in a struct to work around stack-too-deep issues\\n    struct NewPoolParams {\\n        IVault vault;\\n        IProtocolFeePercentagesProvider protocolFeeProvider;\\n        string name;\\n        string symbol;\\n        IERC20[] tokens;\\n        IRateProvider[] rateProviders;\\n        uint256[] tokenRateCacheDurations;\\n        bool exemptFromYieldProtocolFeeFlag;\\n        uint256 amplificationParameter;\\n        uint256 swapFeePercentage;\\n        uint256 pauseWindowDuration;\\n        uint256 bufferPeriodDuration;\\n        address owner;\\n        string version;\\n    }\\n\\n    constructor(NewPoolParams memory params)\\n        BasePool(\\n            params.vault,\\n            IVault.PoolSpecialization.GENERAL,\\n            params.name,\\n            params.symbol,\\n            _insertSorted(params.tokens, IERC20(this)),\\n            new address[](params.tokens.length + 1),\\n            params.swapFeePercentage,\\n            params.pauseWindowDuration,\\n            params.bufferPeriodDuration,\\n            params.owner\\n        )\\n        StablePoolAmplification(params.amplificationParameter)\\n        ComposableStablePoolStorage(_extractStorageParams(params))\\n        ComposableStablePoolRates(_extractRatesParams(params))\\n        ProtocolFeeCache(params.protocolFeeProvider, ProtocolFeeCache.DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL)\\n    {\\n        _version = params.version;\\n    }\\n\\n    // Translate parameters to avoid stack-too-deep issues in the constructor\\n    function _extractRatesParams(NewPoolParams memory params)\\n        private\\n        pure\\n        returns (ComposableStablePoolRates.RatesParams memory)\\n    {\\n        return\\n            ComposableStablePoolRates.RatesParams({\\n                tokens: params.tokens,\\n                rateProviders: params.rateProviders,\\n                tokenRateCacheDurations: params.tokenRateCacheDurations\\n            });\\n    }\\n\\n    // Translate parameters to avoid stack-too-deep issues in the constructor\\n    function _extractStorageParams(NewPoolParams memory params)\\n        private\\n        view\\n        returns (ComposableStablePoolStorage.StorageParams memory)\\n    {\\n        return\\n            ComposableStablePoolStorage.StorageParams({\\n                registeredTokens: _insertSorted(params.tokens, IERC20(this)),\\n                tokenRateProviders: params.rateProviders,\\n                exemptFromYieldProtocolFeeFlag: params.exemptFromYieldProtocolFeeFlag\\n            });\\n    }\\n\\n    function version() external view override returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @notice Return the minimum BPT balance, required to avoid minimum token balances.\\n     * @dev This amount is minted and immediately burned on pool initialization, so that the total supply\\n     * (and therefore post-exit token balances), can never be zero. This keeps the math well-behaved when\\n     * liquidity is low. (It also provides an easy way to check whether a pool has been initialized, to\\n     * ensure this is only done once.)\\n     */\\n    function getMinimumBpt() external pure returns (uint256) {\\n        return _getMinimumBpt();\\n    }\\n\\n    // BasePool hook\\n\\n    /**\\n     * @dev Override base pool hook invoked before any swap, join, or exit to ensure rates are updated before\\n     * the operation.\\n     */\\n    function _beforeSwapJoinExit() internal override {\\n        super._beforeSwapJoinExit();\\n\\n        // Before the scaling factors are read, we must update the cached rates, as those will be used to compute the\\n        // scaling factors.\\n        // Note that this is not done in a recovery mode exit (since _beforeSwapjoinExit() is not called under those\\n        // conditions), but this is fine as recovery mode exits are unaffected by scaling factors anyway.\\n        _cacheTokenRatesIfNecessary();\\n    }\\n\\n    // Swap Hooks\\n\\n    /**\\n     * @dev Override this hook called by the base class `onSwap`, to check whether we are doing a regular swap,\\n     * or a swap involving BPT, which is equivalent to a single token join or exit. Since one of the Pool's\\n     * tokens is the preminted BPT, we need to handle swaps where BPT is involved separately.\\n     *\\n     * At this point, the balances are unscaled. The indices are coming from the Vault, so they are indices into\\n     * the array of registered tokens (including BPT).\\n     *\\n     * If this is a swap involving BPT, call `_swapWithBpt`, which computes the amountOut using the swapFeePercentage\\n     * and charges protocol fees, in the same manner as single token join/exits. Otherwise, perform the default\\n     * processing for a regular swap.\\n     */\\n    function _swapGivenIn(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory registeredBalances,\\n        uint256 registeredIndexIn,\\n        uint256 registeredIndexOut,\\n        uint256[] memory scalingFactors\\n    ) internal virtual override returns (uint256) {\\n        return\\n            (swapRequest.tokenIn == IERC20(this) || swapRequest.tokenOut == IERC20(this))\\n                ? _swapWithBpt(swapRequest, registeredBalances, registeredIndexIn, registeredIndexOut, scalingFactors)\\n                : super._swapGivenIn(\\n                    swapRequest,\\n                    registeredBalances,\\n                    registeredIndexIn,\\n                    registeredIndexOut,\\n                    scalingFactors\\n                );\\n    }\\n\\n    /**\\n     * @dev Override this hook called by the base class `onSwap`, to check whether we are doing a regular swap,\\n     * or a swap involving BPT, which is equivalent to a single token join or exit. Since one of the Pool's\\n     * tokens is the preminted BPT, we need to handle swaps where BPT is involved separately.\\n     *\\n     * At this point, the balances are unscaled. The indices and balances are coming from the Vault, so they\\n     * refer to the full set of registered tokens (including BPT).\\n     *\\n     * If this is a swap involving BPT, call `_swapWithBpt`, which computes the amountOut using the swapFeePercentage\\n     * and charges protocol fees, in the same manner as single token join/exits. Otherwise, perform the default\\n     * processing for a regular swap.\\n     */\\n    function _swapGivenOut(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory registeredBalances,\\n        uint256 registeredIndexIn,\\n        uint256 registeredIndexOut,\\n        uint256[] memory scalingFactors\\n    ) internal virtual override returns (uint256) {\\n        return\\n            (swapRequest.tokenIn == IERC20(this) || swapRequest.tokenOut == IERC20(this))\\n                ? _swapWithBpt(swapRequest, registeredBalances, registeredIndexIn, registeredIndexOut, scalingFactors)\\n                : super._swapGivenOut(\\n                    swapRequest,\\n                    registeredBalances,\\n                    registeredIndexIn,\\n                    registeredIndexOut,\\n                    scalingFactors\\n                );\\n    }\\n\\n    /**\\n     * @dev This is called from the base class `_swapGivenIn`, so at this point the amount has been adjusted\\n     * for swap fees, and balances have had scaling applied. This will only be called for regular (non-BPT) swaps,\\n     * so forward to `onRegularSwap`.\\n     */\\n    function _onSwapGivenIn(\\n        SwapRequest memory request,\\n        uint256[] memory registeredBalances,\\n        uint256 registeredIndexIn,\\n        uint256 registeredIndexOut\\n    ) internal virtual override returns (uint256) {\\n        return\\n            _onRegularSwap(\\n                true, // given in\\n                request.amount,\\n                registeredBalances,\\n                registeredIndexIn,\\n                registeredIndexOut\\n            );\\n    }\\n\\n    /**\\n     * @dev This is called from the base class `_swapGivenOut`, so at this point the amount has been adjusted\\n     * for swap fees, and balances have had scaling applied. This will only be called for regular (non-BPT) swaps,\\n     * so forward to `onRegularSwap`.\\n     */\\n    function _onSwapGivenOut(\\n        SwapRequest memory request,\\n        uint256[] memory registeredBalances,\\n        uint256 registeredIndexIn,\\n        uint256 registeredIndexOut\\n    ) internal virtual override returns (uint256) {\\n        return\\n            _onRegularSwap(\\n                false, // given out\\n                request.amount,\\n                registeredBalances,\\n                registeredIndexIn,\\n                registeredIndexOut\\n            );\\n    }\\n\\n    /**\\n     * @dev Perform a swap between non-BPT tokens. Scaling and fee adjustments have been performed upstream, so\\n     * all we need to do here is calculate the price quote, depending on the direction of the swap.\\n     */\\n    function _onRegularSwap(\\n        bool isGivenIn,\\n        uint256 amountGiven,\\n        uint256[] memory registeredBalances,\\n        uint256 registeredIndexIn,\\n        uint256 registeredIndexOut\\n    ) private view returns (uint256) {\\n        // Adjust indices and balances for BPT token\\n        uint256[] memory balances = _dropBptItem(registeredBalances);\\n        uint256 indexIn = _skipBptIndex(registeredIndexIn);\\n        uint256 indexOut = _skipBptIndex(registeredIndexOut);\\n\\n        (uint256 currentAmp, ) = _getAmplificationParameter();\\n        uint256 invariant = StableMath._calculateInvariant(currentAmp, balances);\\n\\n        if (isGivenIn) {\\n            return StableMath._calcOutGivenIn(currentAmp, balances, indexIn, indexOut, amountGiven, invariant);\\n        } else {\\n            return StableMath._calcInGivenOut(currentAmp, balances, indexIn, indexOut, amountGiven, invariant);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform a swap involving the BPT token, equivalent to a single-token join or exit. As with the standard\\n     * joins and swaps, we first pay any protocol fees pending from swaps that occurred since the previous join or\\n     * exit, then perform the operation (joinSwap or exitSwap), and finally store the \\\"post operation\\\" invariant and\\n     * amp, which establishes the new basis for protocol fees.\\n     *\\n     * At this point, the scaling factors (including rates) have been computed by the base class, but not yet applied\\n     * to the balances.\\n     */\\n    function _swapWithBpt(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory registeredBalances,\\n        uint256 registeredIndexIn,\\n        uint256 registeredIndexOut,\\n        uint256[] memory scalingFactors\\n    ) private returns (uint256) {\\n        bool isGivenIn = swapRequest.kind == IVault.SwapKind.GIVEN_IN;\\n\\n        _upscaleArray(registeredBalances, scalingFactors);\\n        swapRequest.amount = _upscale(\\n            swapRequest.amount,\\n            scalingFactors[isGivenIn ? registeredIndexIn : registeredIndexOut]\\n        );\\n\\n        (\\n            uint256 preJoinExitSupply,\\n            uint256[] memory balances,\\n            uint256 currentAmp,\\n            uint256 preJoinExitInvariant\\n        ) = _beforeJoinExit(registeredBalances);\\n\\n        // These calls mutate `balances` so that it holds the post join-exit balances.\\n        (uint256 amountCalculated, uint256 postJoinExitSupply) = registeredIndexOut == getBptIndex()\\n            ? _doJoinSwap(\\n                isGivenIn,\\n                swapRequest.amount,\\n                balances,\\n                _skipBptIndex(registeredIndexIn),\\n                currentAmp,\\n                preJoinExitSupply,\\n                preJoinExitInvariant\\n            )\\n            : _doExitSwap(\\n                isGivenIn,\\n                swapRequest.amount,\\n                balances,\\n                _skipBptIndex(registeredIndexOut),\\n                currentAmp,\\n                preJoinExitSupply,\\n                preJoinExitInvariant\\n            );\\n\\n        _updateInvariantAfterJoinExit(\\n            currentAmp,\\n            balances,\\n            preJoinExitInvariant,\\n            preJoinExitSupply,\\n            postJoinExitSupply\\n        );\\n\\n        return\\n            isGivenIn\\n                ? _downscaleDown(amountCalculated, scalingFactors[registeredIndexOut]) // Amount out, round down\\n                : _downscaleUp(amountCalculated, scalingFactors[registeredIndexIn]); // Amount in, round up\\n    }\\n\\n    /**\\n     * @dev This mutates `balances` so that they become the post-joinswap balances. The StableMath interfaces\\n     * are different depending on the swap direction, so we forward to the appropriate low-level join function.\\n     */\\n    function _doJoinSwap(\\n        bool isGivenIn,\\n        uint256 amount,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 currentAmp,\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant\\n    ) internal view returns (uint256, uint256) {\\n        return\\n            isGivenIn\\n                ? _joinSwapExactTokenInForBptOut(\\n                    amount,\\n                    balances,\\n                    indexIn,\\n                    currentAmp,\\n                    actualSupply,\\n                    preJoinExitInvariant\\n                )\\n                : _joinSwapExactBptOutForTokenIn(\\n                    amount,\\n                    balances,\\n                    indexIn,\\n                    currentAmp,\\n                    actualSupply,\\n                    preJoinExitInvariant\\n                );\\n    }\\n\\n    /**\\n     * @dev Since this is a join, we know the tokenOut is BPT. Since it is GivenIn, we know the tokenIn amount,\\n     * and must calculate the BPT amount out.\\n     * We are moving preminted BPT out of the Vault, which increases the virtual supply.\\n     */\\n    function _joinSwapExactTokenInForBptOut(\\n        uint256 amountIn,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 currentAmp,\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant\\n    ) internal view returns (uint256, uint256) {\\n        // The StableMath function was created with joins in mind, so it expects a full amounts array. We create an\\n        // empty one and only set the amount for the token involved.\\n        uint256[] memory amountsIn = new uint256[](balances.length);\\n        amountsIn[indexIn] = amountIn;\\n\\n        uint256 bptOut = StableMath._calcBptOutGivenExactTokensIn(\\n            currentAmp,\\n            balances,\\n            amountsIn,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n\\n        balances[indexIn] = balances[indexIn].add(amountIn);\\n        uint256 postJoinExitSupply = actualSupply.add(bptOut);\\n\\n        return (bptOut, postJoinExitSupply);\\n    }\\n\\n    /**\\n     * @dev Since this is a join, we know the tokenOut is BPT. Since it is GivenOut, we know the BPT amount,\\n     * and must calculate the token amount in.\\n     * We are moving preminted BPT out of the Vault, which increases the virtual supply.\\n     */\\n    function _joinSwapExactBptOutForTokenIn(\\n        uint256 bptOut,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 currentAmp,\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant\\n    ) internal view returns (uint256, uint256) {\\n        uint256 amountIn = StableMath._calcTokenInGivenExactBptOut(\\n            currentAmp,\\n            balances,\\n            indexIn,\\n            bptOut,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n\\n        balances[indexIn] = balances[indexIn].add(amountIn);\\n        uint256 postJoinExitSupply = actualSupply.add(bptOut);\\n\\n        return (amountIn, postJoinExitSupply);\\n    }\\n\\n    /**\\n     * @dev This mutates balances so that they become the post-exitswap balances. The StableMath interfaces are\\n     * different depending on the swap direction, so we forward to the appropriate low-level exit function.\\n     */\\n    function _doExitSwap(\\n        bool isGivenIn,\\n        uint256 amount,\\n        uint256[] memory balances,\\n        uint256 indexOut,\\n        uint256 currentAmp,\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant\\n    ) internal view returns (uint256, uint256) {\\n        return\\n            isGivenIn\\n                ? _exitSwapExactBptInForTokenOut(\\n                    amount,\\n                    balances,\\n                    indexOut,\\n                    currentAmp,\\n                    actualSupply,\\n                    preJoinExitInvariant\\n                )\\n                : _exitSwapExactTokenOutForBptIn(\\n                    amount,\\n                    balances,\\n                    indexOut,\\n                    currentAmp,\\n                    actualSupply,\\n                    preJoinExitInvariant\\n                );\\n    }\\n\\n    /**\\n     * @dev Since this is an exit, we know the tokenIn is BPT. Since it is GivenIn, we know the BPT amount,\\n     * and must calculate the token amount out.\\n     * We are moving BPT out of circulation and into the Vault, which decreases the virtual supply.\\n     */\\n    function _exitSwapExactBptInForTokenOut(\\n        uint256 bptAmount,\\n        uint256[] memory balances,\\n        uint256 indexOut,\\n        uint256 currentAmp,\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant\\n    ) internal view returns (uint256, uint256) {\\n        uint256 amountOut = StableMath._calcTokenOutGivenExactBptIn(\\n            currentAmp,\\n            balances,\\n            indexOut,\\n            bptAmount,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n\\n        balances[indexOut] = balances[indexOut].sub(amountOut);\\n        uint256 postJoinExitSupply = actualSupply.sub(bptAmount);\\n\\n        return (amountOut, postJoinExitSupply);\\n    }\\n\\n    /**\\n     * @dev Since this is an exit, we know the tokenIn is BPT. Since it is GivenOut, we know the token amount out,\\n     * and must calculate the BPT amount in.\\n     * We are moving BPT out of circulation and into the Vault, which decreases the virtual supply.\\n     */\\n    function _exitSwapExactTokenOutForBptIn(\\n        uint256 amountOut,\\n        uint256[] memory balances,\\n        uint256 indexOut,\\n        uint256 currentAmp,\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant\\n    ) internal view returns (uint256, uint256) {\\n        // The StableMath function was created with exits in mind, so it expects a full amounts array. We create an\\n        // empty one and only set the amount for the token involved.\\n        uint256[] memory amountsOut = new uint256[](balances.length);\\n        amountsOut[indexOut] = amountOut;\\n\\n        uint256 bptAmount = StableMath._calcBptInGivenExactTokensOut(\\n            currentAmp,\\n            balances,\\n            amountsOut,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n\\n        balances[indexOut] = balances[indexOut].sub(amountOut);\\n        uint256 postJoinExitSupply = actualSupply.sub(bptAmount);\\n\\n        return (bptAmount, postJoinExitSupply);\\n    }\\n\\n    // Join Hooks\\n\\n    /**\\n     * Since this Pool has preminted BPT which is stored in the Vault, it cannot simply be minted at construction.\\n     *\\n     * We take advantage of the fact that StablePools have an initialization step where BPT is minted to the first\\n     * account joining them, and perform both actions at once. By minting the entire BPT supply for the initial joiner\\n     * and then pulling all tokens except those due the joiner, we arrive at the desired state of the Pool holding all\\n     * BPT except the joiner's.\\n     */\\n    function _onInitializePool(\\n        bytes32,\\n        address sender,\\n        address,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal override returns (uint256, uint256[] memory) {\\n        StablePoolUserData.JoinKind kind = userData.joinKind();\\n        _require(kind == StablePoolUserData.JoinKind.INIT, Errors.UNINITIALIZED);\\n\\n        // AmountsIn usually does not include the BPT token; initialization is the one time it has to.\\n        uint256[] memory amountsInIncludingBpt = userData.initialAmountsIn();\\n        InputHelpers.ensureInputLengthMatch(amountsInIncludingBpt.length, scalingFactors.length);\\n        _upscaleArray(amountsInIncludingBpt, scalingFactors);\\n\\n        (uint256 amp, ) = _getAmplificationParameter();\\n        uint256[] memory amountsIn = _dropBptItem(amountsInIncludingBpt);\\n        uint256 invariantAfterJoin = StableMath._calculateInvariant(amp, amountsIn);\\n\\n        // Set the initial BPT to the value of the invariant\\n        uint256 bptAmountOut = invariantAfterJoin;\\n\\n        // BasePool will mint bptAmountOut for the sender: we then also mint the remaining BPT to make up the total\\n        // supply, and have the Vault pull those tokens from the sender as part of the join.\\n        // We are only minting half of the maximum value - already an amount many orders of magnitude greater than any\\n        // conceivable real liquidity - to allow for minting new BPT as a result of regular joins.\\n        //\\n        // Note that the sender need not approve BPT for the Vault as the Vault already has infinite BPT allowance for\\n        // all accounts.\\n        uint256 initialBpt = _PREMINTED_TOKEN_BALANCE.sub(bptAmountOut);\\n\\n        _mintPoolTokens(sender, initialBpt);\\n        amountsInIncludingBpt[getBptIndex()] = initialBpt;\\n\\n        // Initialization is still a join, so we need to do post-join work.\\n        _updatePostJoinExit(amp, invariantAfterJoin);\\n\\n        return (bptAmountOut, amountsInIncludingBpt);\\n    }\\n\\n    /**\\n     * @dev Base pool hook called from `onJoinPool`. Forward to `onJoinExitPool` with `isJoin` set to true.\\n     */\\n    function _onJoinPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory registeredBalances,\\n        uint256,\\n        uint256,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal override returns (uint256, uint256[] memory) {\\n        return _onJoinExitPool(true, registeredBalances, scalingFactors, userData);\\n    }\\n\\n    /**\\n     * @dev Base pool hook called from `onExitPool`. Forward to `onJoinExitPool` with `isJoin` set to false.\\n     * Note that recovery mode exits do not call `_onExitPool`.\\n     */\\n    function _onExitPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory registeredBalances,\\n        uint256,\\n        uint256,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal override returns (uint256, uint256[] memory) {\\n        return _onJoinExitPool(false, registeredBalances, scalingFactors, userData);\\n    }\\n\\n    /**\\n     * @dev Pay protocol fees before the operation, and call `_updateInvariantAfterJoinExit` afterward, to establish\\n     * the new basis for protocol fees.\\n     */\\n    function _onJoinExitPool(\\n        bool isJoin,\\n        uint256[] memory registeredBalances,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal returns (uint256, uint256[] memory) {\\n        (\\n            uint256 preJoinExitSupply,\\n            uint256[] memory balances,\\n            uint256 currentAmp,\\n            uint256 preJoinExitInvariant\\n        ) = _beforeJoinExit(registeredBalances);\\n\\n\\n            function(uint256[] memory, uint256, uint256, uint256, uint256[] memory, bytes memory)\\n                internal\\n                view\\n                returns (uint256, uint256[] memory) _doJoinOrExit\\n         = (isJoin ? _doJoin : _doExit);\\n\\n        (uint256 bptAmount, uint256[] memory amountsDelta) = _doJoinOrExit(\\n            balances,\\n            currentAmp,\\n            preJoinExitSupply,\\n            preJoinExitInvariant,\\n            scalingFactors,\\n            userData\\n        );\\n\\n        // Unlike joinswaps, explicit joins do not mutate balances into the post join-exit balances so we must perform\\n        // this mutation here.\\n        function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;\\n        _mutateAmounts(balances, amountsDelta, _addOrSub);\\n        uint256 postJoinExitSupply = _addOrSub(preJoinExitSupply, bptAmount);\\n\\n        // Pass in the post-join balances to reset the protocol fee basis.\\n        // We are minting bptAmount, increasing the total (and virtual) supply post-join\\n        _updateInvariantAfterJoinExit(\\n            currentAmp,\\n            balances,\\n            preJoinExitInvariant,\\n            preJoinExitSupply,\\n            postJoinExitSupply\\n        );\\n\\n        // For clarity and simplicity, arrays used and computed in lower level functions do not include BPT.\\n        // But the amountsIn array passed back to the Vault must include BPT, so we add it back in here.\\n        return (bptAmount, _addBptItem(amountsDelta, 0));\\n    }\\n\\n    /**\\n     * @dev Pay any due protocol fees and calculate values necessary for performing the join/exit.\\n     */\\n    function _beforeJoinExit(uint256[] memory registeredBalances)\\n        internal\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (uint256 lastJoinExitAmp, uint256 lastPostJoinExitInvariant) = getLastJoinExitData();\\n        (\\n            uint256 preJoinExitSupply,\\n            uint256[] memory balances,\\n            uint256 oldAmpPreJoinExitInvariant\\n        ) = _payProtocolFeesBeforeJoinExit(registeredBalances, lastJoinExitAmp, lastPostJoinExitInvariant);\\n\\n        // If the amplification factor is the same as it was during the last join/exit then we can reuse the\\n        // value calculated using the \\\"old\\\" amplification factor. If not, then we have to calculate this now.\\n        (uint256 currentAmp, ) = _getAmplificationParameter();\\n        uint256 preJoinExitInvariant = currentAmp == lastJoinExitAmp\\n            ? oldAmpPreJoinExitInvariant\\n            : StableMath._calculateInvariant(currentAmp, balances);\\n\\n        return (preJoinExitSupply, balances, currentAmp, preJoinExitInvariant);\\n    }\\n\\n    /**\\n     * @dev Support single- and multi-token joins, plus explicit proportional joins.\\n     */\\n    function _doJoin(\\n        uint256[] memory balances,\\n        uint256 currentAmp,\\n        uint256 preJoinExitSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal view returns (uint256, uint256[] memory) {\\n        StablePoolUserData.JoinKind kind = userData.joinKind();\\n        if (kind == StablePoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return\\n                _joinExactTokensInForBPTOut(\\n                    preJoinExitSupply,\\n                    preJoinExitInvariant,\\n                    currentAmp,\\n                    balances,\\n                    scalingFactors,\\n                    userData\\n                );\\n        } else if (kind == StablePoolUserData.JoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinAllTokensInForExactBptOut(preJoinExitSupply, balances, userData);\\n        } else if (kind == StablePoolUserData.JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinTokenInForExactBPTOut(preJoinExitSupply, preJoinExitInvariant, currentAmp, balances, userData);\\n        } else {\\n            _revert(Errors.UNHANDLED_JOIN_KIND);\\n        }\\n    }\\n\\n    /**\\n     * @dev Proportional join. Pays no swap fees.\\n     */\\n    function _joinAllTokensInForExactBptOut(\\n        uint256 actualSupply,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) private pure returns (uint256, uint256[] memory) {\\n        uint256 bptAmountOut = userData.allTokensInForExactBptOut();\\n        uint256[] memory amountsIn = StableMath._computeProportionalAmountsIn(balances, bptAmountOut, actualSupply);\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    /**\\n     * @dev Multi-token join. Joins with proportional amounts will pay no protocol fees.\\n     */\\n    function _joinExactTokensInForBPTOut(\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256 currentAmp,\\n        uint256[] memory balances,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();\\n        InputHelpers.ensureInputLengthMatch(balances.length, amountsIn.length);\\n\\n        // The user-provided amountsIn is unscaled, so we address that.\\n        _upscaleArray(amountsIn, _dropBptItem(scalingFactors));\\n\\n        uint256 bptAmountOut = StableMath._calcBptOutGivenExactTokensIn(\\n            currentAmp,\\n            balances,\\n            amountsIn,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n\\n        _require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    /**\\n     * @dev Single-token join, equivalent to swapping a pool token for BPT.\\n     */\\n    function _joinTokenInForExactBPTOut(\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256 currentAmp,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        // Since this index is sent in from the user, we interpret it as NOT including the BPT token.\\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();\\n        // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.\\n\\n        // Balances are passed through from the Vault hook, and include BPT\\n        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);\\n\\n        // We join with a single token, so initialize amountsIn with zeros.\\n        uint256[] memory amountsIn = new uint256[](balances.length);\\n\\n        // And then assign the result to the selected token.\\n        amountsIn[tokenIndex] = StableMath._calcTokenInGivenExactBptOut(\\n            currentAmp,\\n            balances,\\n            tokenIndex,\\n            bptAmountOut,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Exit Hooks\\n\\n    /**\\n     * @dev Support single- and multi-token exits, plus explicit proportional exits (in addition to the\\n     * recovery mode exit).\\n     */\\n    function _doExit(\\n        uint256[] memory balances,\\n        uint256 currentAmp,\\n        uint256 preJoinExitSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal view returns (uint256, uint256[] memory) {\\n        StablePoolUserData.ExitKind kind = userData.exitKind();\\n        if (kind == StablePoolUserData.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {\\n            return\\n                _exitBPTInForExactTokensOut(\\n                    preJoinExitSupply,\\n                    preJoinExitInvariant,\\n                    currentAmp,\\n                    balances,\\n                    scalingFactors,\\n                    userData\\n                );\\n        } else if (kind == StablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT) {\\n            return _exitExactBPTInForTokensOut(preJoinExitSupply, balances, userData);\\n        } else if (kind == StablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\\n            return _exitExactBPTInForTokenOut(preJoinExitSupply, preJoinExitInvariant, currentAmp, balances, userData);\\n        } else {\\n            _revert(Errors.UNHANDLED_EXIT_KIND);\\n        }\\n    }\\n\\n    /**\\n     * @dev Proportional exit. Pays no swap fees. This is functionally equivalent to the recovery mode exit,\\n     * except this doesn't skip protocol fee collection, calling rate providers, etc., and doesn't require\\n     * recovery mode to be enabled.\\n     */\\n    function _exitExactBPTInForTokensOut(\\n        uint256 actualSupply,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) private pure returns (uint256, uint256[] memory) {\\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\\n        uint256[] memory amountsOut = _computeProportionalAmountsOut(balances, actualSupply, bptAmountIn);\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    /**\\n     * @dev Multi-token exit. Proportional exits will pay no protocol fees.\\n     */\\n    function _exitBPTInForExactTokensOut(\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256 currentAmp,\\n        uint256[] memory balances,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();\\n        InputHelpers.ensureInputLengthMatch(amountsOut.length, balances.length);\\n\\n        // The user-provided amountsIn is unscaled, so we address that.\\n        _upscaleArray(amountsOut, _dropBptItem(scalingFactors));\\n\\n        uint256 bptAmountIn = StableMath._calcBptInGivenExactTokensOut(\\n            currentAmp,\\n            balances,\\n            amountsOut,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n        _require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    /**\\n     * @dev Single-token exit, equivalent to swapping BPT for a pool token.\\n     */\\n    function _exitExactBPTInForTokenOut(\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256 currentAmp,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        // Since this index is sent in from the user, we interpret it as NOT including the BPT token\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);\\n\\n        // We exit in a single token, so initialize amountsOut with zeros\\n        uint256[] memory amountsOut = new uint256[](balances.length);\\n\\n        // And then assign the result to the selected token.\\n        amountsOut[tokenIndex] = StableMath._calcTokenOutGivenExactBptIn(\\n            currentAmp,\\n            balances,\\n            tokenIndex,\\n            bptAmountIn,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            getSwapFeePercentage()\\n        );\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    /**\\n     * @dev We cannot use the default RecoveryMode implementation here, since we need to account for the BPT token.\\n     */\\n    function _doRecoveryModeExit(\\n        uint256[] memory registeredBalances,\\n        uint256,\\n        bytes memory userData\\n    ) internal virtual override returns (uint256, uint256[] memory) {\\n        // Since this Pool uses preminted BPT, we need to replace the total supply with the virtual total supply, and\\n        // adjust the balances array by removing BPT from it.\\n        // Note that we don't compute the actual supply, which would require a lot of complex calculations and\\n        // interactions with external components. This is fine because virtual and actual supply are the same while\\n        // recovery mode is enabled (since all protocol fees are forfeit and the fee percentages zeroed out).\\n        (uint256 virtualSupply, uint256[] memory balances) = _dropBptItemFromBalances(registeredBalances);\\n\\n        (uint256 bptAmountIn, uint256[] memory amountsOut) = super._doRecoveryModeExit(\\n            balances,\\n            virtualSupply,\\n            userData\\n        );\\n\\n        // The vault requires an array including BPT, so add it back in here.\\n        return (bptAmountIn, _addBptItem(amountsOut, 0));\\n    }\\n\\n    // BPT rate\\n\\n    /**\\n     * Many functions require accessing multiple internal values that might at first seem unrelated, but are actually\\n     * quite intertwined, and computed at the same time for optimal performance (since calculating some of them also\\n     * yields intermediate results useful for other queries). This helper function returns many of these values,\\n     * greatly reducing bytecode size.\\n     *\\n     * The return values are:\\n     *  @return balances - The current upscaled token balances (not including BPT)\\n     *  @return virtualSupply - The Pool's virtual supply\\n     *  @return protocolFeeAmount - The amount of unpaid protocol fees in BPT\\n     *  @return lastJoinExitAmp - The Pool's amplification factor at the last join or exit operation\\n     *  @return currentInvariantWithLastJoinExitAmp - The invariant of the current balances, calculated using the\\n     *  amplification factor at the last join or exit operation.\\n     */\\n    function _getSupplyAndFeesData()\\n        private\\n        view\\n        returns (\\n            uint256[] memory balances,\\n            uint256 virtualSupply,\\n            uint256 protocolFeeAmount,\\n            uint256 lastJoinExitAmp,\\n            uint256 currentInvariantWithLastJoinExitAmp\\n        )\\n    {\\n        // First we query the Vault for current registered balances (which includes preminted BPT), to then calculate\\n        // the current scaled balances and virtual supply.\\n        (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());\\n        _upscaleArray(registeredBalances, _scalingFactors());\\n        (virtualSupply, balances) = _dropBptItemFromBalances(registeredBalances);\\n\\n        // Now we need to calculate any BPT due in the form of protocol fees. This requires data from the last join or\\n        // exit operation. `lastJoinExitAmp` can be useful in the scenario in which the amplification factor has not\\n        // changed, meaning this old value is equal to the current value.\\n        uint256 lastPostJoinExitInvariant;\\n        (lastJoinExitAmp, lastPostJoinExitInvariant) = getLastJoinExitData();\\n\\n        // Computing the protocol ownership percentage also yields the invariant using the old amplification factor. If\\n        // it has not changed, then this is also the current invariant.\\n        uint256 expectedProtocolOwnershipPercentage;\\n        (\\n            expectedProtocolOwnershipPercentage,\\n            currentInvariantWithLastJoinExitAmp\\n        ) = _getProtocolPoolOwnershipPercentage(balances, lastJoinExitAmp, lastPostJoinExitInvariant);\\n\\n        protocolFeeAmount = ProtocolFees.bptForPoolOwnershipPercentage(\\n            virtualSupply,\\n            expectedProtocolOwnershipPercentage\\n        );\\n    }\\n\\n    /**\\n     * @dev This function returns the appreciation of BPT relative to the underlying tokens, as an 18 decimal fixed\\n     * point number. It is simply the ratio of the invariant to the BPT supply.\\n     *\\n     * The total supply is initialized to equal the invariant, so this value starts at one. During Pool operation the\\n     * invariant always grows and shrinks either proportionally to the total supply (in scenarios with no price impact,\\n     * e.g. proportional joins), or grows faster and shrinks more slowly than it (whenever swap fees are collected or\\n     * the token rates increase). Therefore, the rate is a monotonically increasing function.\\n     *\\n     * WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation\\n     * via reentrancy if called within a Vault context (i.e. in the middle of a join or an exit). It is up to the\\n     * caller to ensure that the function is safe to call.\\n     *\\n     * This may happen e.g. if one of the tokens in the Pool contains some form of callback behavior in the\\n     * `transferFrom` function (like ERC777 tokens do). These tokens are strictly incompatible with the\\n     * Vault and Pool design, and are not safe to be used.\\n     *\\n     * There are also other situations where calling this function is unsafe. See\\n     * https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     *\\n     * To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant\\n     * function before calling `getRate`. That will make the transaction revert in an unsafe context.\\n     * (See `whenNotInVaultContext` in `ComposableStablePoolRates`).\\n     */\\n    function getRate() external view virtual override returns (uint256) {\\n        // We need to compute the current invariant and actual total supply. The latter includes protocol fees that have\\n        // accrued but are not yet minted: in calculating these we'll actually end up fetching most of the data we need\\n        // for the invariant.\\n\\n        (\\n            uint256[] memory balances,\\n            uint256 virtualSupply,\\n            uint256 protocolFeeAmount,\\n            uint256 lastJoinExitAmp,\\n            uint256 currentInvariantWithLastJoinExitAmp\\n        ) = _getSupplyAndFeesData();\\n\\n        // Due protocol fees will be minted at the next join or exit, so we can simply add them to the current virtual\\n        // supply to get the actual supply.\\n        uint256 actualTotalSupply = virtualSupply.add(protocolFeeAmount);\\n\\n        // All that's missing now is the invariant. We have the balances required to calculate it already, but still\\n        // need the current amplification factor.\\n        (uint256 currentAmp, ) = _getAmplificationParameter();\\n\\n        // It turns out that the process for due protocol fee calculation involves computing the current invariant,\\n        // except using the amplification factor at the last join or exit. This would typically not be terribly useful,\\n        // but since the amplification factor only changes rarely there is high probability of its current value being\\n        // the same as it was in the last join or exit. If that is the case, then we can skip the costly invariant\\n        // computation altogether.\\n        uint256 currentInvariant = (currentAmp == lastJoinExitAmp)\\n            ? currentInvariantWithLastJoinExitAmp\\n            : StableMath._calculateInvariant(currentAmp, balances);\\n\\n        // With the current invariant and actual total supply, we can compute the rate as a fixed-point number.\\n        return currentInvariant.divDown(actualTotalSupply);\\n    }\\n\\n    /**\\n     * @dev Returns the effective BPT supply.\\n     *\\n     * In other pools, this would be the same as `totalSupply`, but there are two key differences here:\\n     *  - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's\\n     *    balance to get the total \\\"circulating supply\\\". This is called the 'virtualSupply'.\\n     *  - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the\\n     *    next join or exit. We need to take these into account since, even if they don't yet exist, they will\\n     *    effectively be included in any Pool operation that involves BPT.\\n     *\\n     * In the vast majority of cases, this function should be used instead of `totalSupply()`.\\n     *\\n     * **IMPORTANT NOTE**: calling this function within a Vault context (i.e. in the middle of a join or an exit) is\\n     * potentially unsafe, since the returned value is manipulable. It is up to the caller to ensure safety.\\n     *\\n     * This is because this function calculates the invariant, which requires the state of the pool to be in sync\\n     * with the state of the Vault. That condition may not be true in the middle of a join or an exit.\\n     *\\n     * To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant\\n     * function before calling `getActualSupply`. That will make the transaction revert in an unsafe context.\\n     * (See `whenNotInVaultContext` in `ComposableStablePoolRates`).\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     */\\n    function getActualSupply() external view returns (uint256) {\\n        (, uint256 virtualSupply, uint256 protocolFeeAmount, , ) = _getSupplyAndFeesData();\\n        return virtualSupply.add(protocolFeeAmount);\\n    }\\n\\n    /**\\n     * @dev This function will revert when called within a Vault context (i.e. in the middle of a join or an exit).\\n     *\\n     * This function depends on the invariant value, which may be calculated incorrectly in the middle of a join or\\n     * an exit, because the state of the pool could be out of sync with the state of the Vault. The modifier\\n     * `whenNotInVaultContext` prevents calling this function (and in turn, the external\\n     * `updateProtocolFeePercentageCache`) in such a context.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     */\\n    function _beforeProtocolFeeCacheUpdate() internal override whenNotInVaultContext {\\n        // The `getRate()` function depends on the actual supply, which in turn depends on the cached protocol fee\\n        // percentages. Changing these would therefore result in the rate changing, which is not acceptable as this is a\\n        // sensitive value.\\n        // Because of this, we pay any due protocol fees *before* updating the cache, making it so that the new\\n        // percentages only affect future operation of the Pool, and not past fees. As a result, `getRate()` is\\n        // unaffected by the cached protocol fee percentages changing.\\n\\n        // Given that this operation is state-changing and relatively complex, we only allow it as long as the Pool is\\n        // not paused.\\n        _ensureNotPaused();\\n\\n        // We need to calculate the amount of unminted BPT that represents protocol fees to then pay those. This yields\\n        // some auxiliary values that turn out to also be useful for the rest of the tasks we want to perform.\\n        (\\n            uint256[] memory balances,\\n            ,\\n            uint256 protocolFeeAmount,\\n            uint256 lastJoinExitAmp,\\n            uint256 currentInvariantWithLastJoinExitAmp\\n        ) = _getSupplyAndFeesData();\\n\\n        if (protocolFeeAmount > 0) {\\n            _payProtocolFees(protocolFeeAmount);\\n        }\\n\\n        // With the fees paid, we now need to calculate the current invariant so we can store it alongside the current\\n        // amplification factor, marking the Pool as free of protocol debt.\\n        (uint256 currentAmp, ) = _getAmplificationParameter();\\n\\n        // It turns out that the process for due protocol fee calculation involves computing the current invariant,\\n        // except using the amplification factor at the last join or exit. This would typically not be terribly useful,\\n        // but since the amplification factor only changes rarely there is high probability of its current value being\\n        // the same as it was in the last join or exit. If that is the case, then we can skip the costly invariant\\n        // computation altogether.\\n        uint256 currentInvariant = (currentAmp == lastJoinExitAmp)\\n            ? currentInvariantWithLastJoinExitAmp\\n            : StableMath._calculateInvariant(currentAmp, balances);\\n\\n        _updatePostJoinExit(currentAmp, currentInvariant);\\n    }\\n\\n    /**\\n     * @dev This function will revert when called within a Vault context (i.e. in the middle of a join or an exit).\\n     *\\n     * This function depends on the invariant value, which may be calculated incorrectly in the middle of a join or\\n     * an exit, because the state of the pool could be out of sync with the state of the Vault.\\n     *\\n     * The modifier `whenNotInVaultContext` prevents calling this function (and in turn, the external\\n     * `disableRecoveryMode`) in such a context.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     */\\n    function _onDisableRecoveryMode() internal override whenNotInVaultContext {\\n        // Enabling recovery mode short-circuits protocol fee computations, forcefully returning a zero percentage,\\n        // increasing the return value of `getRate()` and effectively forfeiting due protocol fees.\\n\\n        // Therefore, when exiting recovery mode we store the current invariant and the amplification factor used to\\n        // compute it, marking the Pool as free of protocol debt. Otherwise it'd be possible for debt to be\\n        // retroactively accrued, which would be incorrect and could lead to the value of `getRate` decreasing.\\n\\n        (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());\\n        _upscaleArray(registeredBalances, _scalingFactors());\\n        uint256[] memory balances = _dropBptItem(registeredBalances);\\n\\n        (uint256 currentAmp, ) = _getAmplificationParameter();\\n        uint256 currentInvariant = StableMath._calculateInvariant(currentAmp, balances);\\n\\n        _updatePostJoinExit(currentAmp, currentInvariant);\\n    }\\n\\n    // Helpers\\n\\n    /**\\n     * @dev Mutates `amounts` by applying `mutation` with each entry in `arguments`.\\n     *\\n     * Equivalent to `amounts = amounts.map(mutation)`.\\n     */\\n    function _mutateAmounts(\\n        uint256[] memory toMutate,\\n        uint256[] memory arguments,\\n        function(uint256, uint256) pure returns (uint256) mutation\\n    ) private pure {\\n        uint256 length = toMutate.length;\\n        InputHelpers.ensureInputLengthMatch(length, arguments.length);\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            toMutate[i] = mutation(toMutate[i], arguments[i]);\\n        }\\n    }\\n\\n    // Permissioned functions\\n\\n    /**\\n     * @dev Inheritance rules still require us to override this in the most derived contract, even though\\n     * it only calls super.\\n     */\\n    function _isOwnerOnlyAction(bytes32 actionId)\\n        internal\\n        view\\n        virtual\\n        override(\\n            // Our inheritance pattern creates a small diamond that requires explicitly listing the parents here.\\n            // Each parent calls the `super` version, so linearization ensures all implementations are called.\\n            BasePool,\\n            ComposableStablePoolProtocolFees,\\n            StablePoolAmplification,\\n            ComposableStablePoolRates\\n        )\\n        returns (bool)\\n    {\\n        return super._isOwnerOnlyAction(actionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Source of truth for all Protocol Fee percentages, that is, how much the protocol charges certain actions. Some\\n * of these values may also be retrievable from other places (such as the swap fee percentage), but this is the\\n * preferred source nonetheless.\\n */\\ninterface IProtocolFeePercentagesProvider {\\n    // All fee percentages are 18-decimal fixed point numbers, so e.g. 1e18 = 100% and 1e16 = 1%.\\n\\n    // Emitted when a new fee type is registered.\\n    event ProtocolFeeTypeRegistered(uint256 indexed feeType, string name, uint256 maximumPercentage);\\n\\n    // Emitted when the value of a fee type changes.\\n    // IMPORTANT: it is possible for a third party to modify the SWAP and FLASH_LOAN fee type values directly in the\\n    // ProtocolFeesCollector, which will result in this event not being emitted despite their value changing. Such usage\\n    // of the ProtocolFeesCollector is however discouraged: all state-changing interactions with it should originate in\\n    // this contract.\\n    event ProtocolFeePercentageChanged(uint256 indexed feeType, uint256 percentage);\\n\\n    /**\\n     * @dev Registers a new fee type in the system, making it queryable via `getFeeTypePercentage` and `getFeeTypeName`,\\n     * as well as configurable via `setFeeTypePercentage`.\\n     *\\n     * `feeType` can be any arbitrary value (that is not in use).\\n     *\\n     * It is not possible to de-register fee types, nor change their name or maximum value.\\n     */\\n    function registerFeeType(\\n        uint256 feeType,\\n        string memory name,\\n        uint256 maximumValue,\\n        uint256 initialValue\\n    ) external;\\n\\n    /**\\n     * @dev Returns true if `feeType` has been registered and can be queried.\\n     */\\n    function isValidFeeType(uint256 feeType) external view returns (bool);\\n\\n    /**\\n     * @dev Returns true if `value` is a valid percentage value for `feeType`.\\n     */\\n    function isValidFeeTypePercentage(uint256 feeType, uint256 value) external view returns (bool);\\n\\n    /**\\n     * @dev Sets the percentage value for `feeType` to `newValue`.\\n     *\\n     * IMPORTANT: it is possible for a third party to modify the SWAP and FLASH_LOAN fee type values directly in the\\n     * ProtocolFeesCollector, without invoking this function. This will result in the `ProtocolFeePercentageChanged`\\n     * event not being emitted despite their value changing. Such usage of the ProtocolFeesCollector is however\\n     * discouraged: only this contract should be granted permission to call `setSwapFeePercentage` and\\n     * `setFlashLoanFeePercentage`.\\n     */\\n    function setFeeTypePercentage(uint256 feeType, uint256 newValue) external;\\n\\n    /**\\n     * @dev Returns the current percentage value for `feeType`. This is the preferred mechanism for querying these -\\n     * whenever possible, use this fucntion instead of e.g. querying the ProtocolFeesCollector.\\n     */\\n    function getFeeTypePercentage(uint256 feeType) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns `feeType`'s maximum value.\\n     */\\n    function getFeeTypeMaximumPercentage(uint256 feeType) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns `feeType`'s name.\\n     */\\n    function getFeeTypeName(uint256 feeType) external view returns (string memory);\\n}\\n\\nlibrary ProtocolFeeType {\\n    // This list is not exhaustive - more fee types can be added to the system. It is expected for this list to be\\n    // extended with new fee types as they are registered, to keep them all in one place and reduce\\n    // likelihood of user error.\\n\\n    // solhint-disable private-vars-leading-underscore\\n    uint256 internal constant SWAP = 0;\\n    uint256 internal constant FLASH_LOAN = 1;\\n    uint256 internal constant YIELD = 2;\\n    uint256 internal constant AUM = 3;\\n    // solhint-enable private-vars-leading-underscore\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode, bytes3 prefix) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\\\";\\n\\n/**\\n * @dev Building block for performing access control on external functions.\\n *\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\n * to external functions to only make them callable by authorized accounts.\\n *\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\n */\\nabstract contract Authentication is IAuthentication {\\n    bytes32 private immutable _actionIdDisambiguator;\\n\\n    /**\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\n     * multi contract systems.\\n     *\\n     * There are two main uses for it:\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\n     *    unique. The contract's own address is a good option.\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\n     *    shared by the entire family (and no other contract) should be used instead.\\n     */\\n    constructor(bytes32 actionIdDisambiguator) {\\n        _actionIdDisambiguator = actionIdDisambiguator;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        bytes32 actionId = getActionId(msg.sig);\\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\n    }\\n\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\n        // multiple contracts.\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\n    }\\n\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nlibrary StablePoolUserData {\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT, EXACT_BPT_IN_FOR_ALL_TOKENS_OUT }\\n\\n    function joinKind(bytes memory self) internal pure returns (JoinKind) {\\n        return abi.decode(self, (JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (ExitKind) {\\n        return abi.decode(self, (ExitKind));\\n    }\\n\\n    // Joins\\n\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\n        (, amountsIn) = abi.decode(self, (JoinKind, uint256[]));\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountOut)\\n    {\\n        (, amountsIn, minBPTAmountOut) = abi.decode(self, (JoinKind, uint256[], uint256));\\n    }\\n\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (JoinKind, uint256, uint256));\\n    }\\n\\n    function allTokensInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut) {\\n        (, bptAmountOut) = abi.decode(self, (JoinKind, uint256));\\n    }\\n\\n    // Exits\\n\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (ExitKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (ExitKind, uint256));\\n    }\\n\\n    function bptInForExactTokensOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\n    {\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (ExitKind, uint256[], uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IRateProvider {\\n    /**\\n     * @dev Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying\\n     * token. The meaning of this rate depends on the context.\\n     */\\n    function getRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./LogExpMath.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant TWO = 2 * ONE;\\n    uint256 internal constant FOUR = 4 * ONE;\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\\n        // and 80/20 Weighted Pools\\n        if (y == ONE) {\\n            return x;\\n        } else if (y == TWO) {\\n            return mulDown(x, x);\\n        } else if (y == FOUR) {\\n            uint256 square = mulDown(x, x);\\n            return mulDown(square, square);\\n        } else {\\n            uint256 raw = LogExpMath.pow(x, y);\\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n            if (raw < maxError) {\\n                return 0;\\n            } else {\\n                return sub(raw, maxError);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\\n        // and 80/20 Weighted Pools\\n        if (y == ONE) {\\n            return x;\\n        } else if (y == TWO) {\\n            return mulUp(x, x);\\n        } else if (y == FOUR) {\\n            uint256 square = mulUp(x, x);\\n            return mulUp(square, square);\\n        } else {\\n            uint256 raw = LogExpMath.pow(x, y);\\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n            return add(raw, maxError);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the absolute value of a signed integer.\\n     */\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a > 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\\\";\\n\\n// solhint-disable\\n\\nfunction _asIAsset(IERC20[] memory tokens) pure returns (IAsset[] memory assets) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n        assets := tokens\\n    }\\n}\\n\\nfunction _sortTokens(\\n    IERC20 tokenA,\\n    IERC20 tokenB,\\n    IERC20 tokenC\\n) pure returns (IERC20[] memory tokens) {\\n    (uint256 indexTokenA, uint256 indexTokenB, uint256 indexTokenC) = _getSortedTokenIndexes(tokenA, tokenB, tokenC);\\n    tokens = new IERC20[](3);\\n    tokens[indexTokenA] = tokenA;\\n    tokens[indexTokenB] = tokenB;\\n    tokens[indexTokenC] = tokenC;\\n}\\n\\nfunction _insertSorted(IERC20[] memory tokens, IERC20 token) pure returns (IERC20[] memory sorted) {\\n    sorted = new IERC20[](tokens.length + 1);\\n\\n    if (tokens.length == 0) {\\n        sorted[0] = token;\\n        return sorted;\\n    }\\n\\n    uint256 i;\\n    for (i = tokens.length; i > 0 && tokens[i - 1] > token; i--) sorted[i] = tokens[i - 1];\\n    for (uint256 j = 0; j < i; j++) sorted[j] = tokens[j];\\n    sorted[i] = token;\\n}\\n\\nfunction _appendToken(IERC20[] memory tokens, IERC20 newToken) pure returns (IERC20[] memory newTokens) {\\n    uint256 numTokens = tokens.length;\\n    newTokens = new IERC20[](numTokens + 1);\\n\\n    for (uint256 i = 0; i < numTokens; ++i) newTokens[i] = tokens[i];\\n    newTokens[numTokens] = newToken;\\n}\\n\\nfunction _findTokenIndex(IERC20[] memory tokens, IERC20 token) pure returns (uint256) {\\n    // Note that while we know tokens are initially sorted, we cannot assume this will hold throughout\\n    // the pool's lifetime, as pools with mutable tokens can append and remove tokens in any order.\\n    uint256 tokensLength = tokens.length;\\n    for (uint256 i = 0; i < tokensLength; i++) {\\n        if (tokens[i] == token) {\\n            return i;\\n        }\\n    }\\n\\n    _revert(Errors.INVALID_TOKEN);\\n}\\n\\nfunction _getSortedTokenIndexes(\\n    IERC20 tokenA,\\n    IERC20 tokenB,\\n    IERC20 tokenC\\n)\\n    pure\\n    returns (\\n        uint256 indexTokenA,\\n        uint256 indexTokenB,\\n        uint256 indexTokenC\\n    )\\n{\\n    if (tokenA < tokenB) {\\n        if (tokenB < tokenC) {\\n            // (tokenA, tokenB, tokenC)\\n            return (0, 1, 2);\\n        } else if (tokenA < tokenC) {\\n            // (tokenA, tokenC, tokenB)\\n            return (0, 2, 1);\\n        } else {\\n            // (tokenC, tokenA, tokenB)\\n            return (1, 2, 0);\\n        }\\n    } else {\\n        // tokenB < tokenA\\n        if (tokenC < tokenB) {\\n            // (tokenC, tokenB, tokenA)\\n            return (2, 1, 0);\\n        } else if (tokenC < tokenA) {\\n            // (tokenB, tokenC, tokenA)\\n            return (2, 0, 1);\\n        } else {\\n            // (tokenB, tokenA, tokenC)\\n            return (1, 0, 2);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/BaseGeneralPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol\\\";\\n\\nimport \\\"./BasePool.sol\\\";\\n\\n/**\\n * @dev Extension of `BasePool`, adding a handler for `IGeneralPool.onSwap`.\\n *\\n * Derived contracts must call `BasePool`'s constructor, and implement `_onSwapGivenIn` and `_onSwapGivenOut` along with\\n * `BasePool`'s virtual functions. Inheriting from this contract lets derived contracts choose the General\\n * specialization setting.\\n */\\nabstract contract BaseGeneralPool is IGeneralPool, BasePool {\\n    // Swap Hooks\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external override onlyVault(swapRequest.poolId) returns (uint256) {\\n        _beforeSwapJoinExit();\\n\\n        _validateIndexes(indexIn, indexOut, _getTotalTokens());\\n        uint256[] memory scalingFactors = _scalingFactors();\\n\\n        return\\n            swapRequest.kind == IVault.SwapKind.GIVEN_IN\\n                ? _swapGivenIn(swapRequest, balances, indexIn, indexOut, scalingFactors)\\n                : _swapGivenOut(swapRequest, balances, indexIn, indexOut, scalingFactors);\\n    }\\n\\n    function _swapGivenIn(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut,\\n        uint256[] memory scalingFactors\\n    ) internal virtual returns (uint256) {\\n        // Fees are subtracted before scaling, to reduce the complexity of the rounding direction analysis.\\n        swapRequest.amount = _subtractSwapFeeAmount(swapRequest.amount);\\n\\n        _upscaleArray(balances, scalingFactors);\\n        swapRequest.amount = _upscale(swapRequest.amount, scalingFactors[indexIn]);\\n\\n        uint256 amountOut = _onSwapGivenIn(swapRequest, balances, indexIn, indexOut);\\n\\n        // amountOut tokens are exiting the Pool, so we round down.\\n        return _downscaleDown(amountOut, scalingFactors[indexOut]);\\n    }\\n\\n    function _swapGivenOut(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut,\\n        uint256[] memory scalingFactors\\n    ) internal virtual returns (uint256) {\\n        _upscaleArray(balances, scalingFactors);\\n        swapRequest.amount = _upscale(swapRequest.amount, scalingFactors[indexOut]);\\n\\n        uint256 amountIn = _onSwapGivenOut(swapRequest, balances, indexIn, indexOut);\\n\\n        // amountIn tokens are entering the Pool, so we round up.\\n        amountIn = _downscaleUp(amountIn, scalingFactors[indexIn]);\\n\\n        // Fees are added after scaling happens, to reduce the complexity of the rounding direction analysis.\\n        return _addSwapFeeAmount(amountIn);\\n    }\\n\\n    /*\\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens entering the Pool is known.\\n     *\\n     * Returns the amount of tokens that will be taken from the Pool in return.\\n     *\\n     * All amounts inside `swapRequest` and `balances` are upscaled. The swap fee has already been deducted from\\n     * `swapRequest.amount`.\\n     *\\n     * The return value is also considered upscaled, and will be downscaled (rounding down) before returning it to the\\n     * Vault.\\n     */\\n    function _onSwapGivenIn(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) internal virtual returns (uint256);\\n\\n    /*\\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens exiting the Pool is known.\\n     *\\n     * Returns the amount of tokens that will be granted to the Pool in return.\\n     *\\n     * All amounts inside `swapRequest` and `balances` are upscaled.\\n     *\\n     * The return value is also considered upscaled, and will be downscaled (rounding up) before applying the swap fee\\n     * and returning it to the Vault.\\n     */\\n    function _onSwapGivenOut(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) internal virtual returns (uint256);\\n\\n    function _validateIndexes(\\n        uint256 indexIn,\\n        uint256 indexOut,\\n        uint256 limit\\n    ) private pure {\\n        _require(indexIn < limit && indexOut < limit, Errors.OUT_OF_BOUNDS);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\n\\n/**\\n * Price rate caches are used to avoid querying the price rate for a token every time we need to work with it. It is\\n * useful for slow changing rates, such as those that arise from interest-bearing tokens (e.g. waDAI into DAI).\\n *\\n * The cache data is packed into a single bytes32 value with the following structure:\\n * [ 32 bits |  32 bits  |  96 bits  |    96 bits    ]\\n * [ expires | duration  | old rate  | current rate  ]\\n * |MSB                                           LSB|\\n *\\n * 'rate' is an 18 decimal fixed point number, supporting rates of up to ~3e10. 'expires' is a Unix timestamp, and\\n * 'duration' is expressed in seconds.\\n */\\nlibrary PriceRateCache {\\n    using WordCodec for bytes32;\\n\\n    uint256 private constant _CURRENT_PRICE_RATE_OFFSET = 0;\\n    uint256 private constant _OLD_PRICE_RATE_OFFSET = 96;\\n    uint256 private constant _PRICE_RATE_CACHE_DURATION_OFFSET = 192;\\n    uint256 private constant _PRICE_RATE_CACHE_EXPIRES_OFFSET = 224;\\n\\n    uint256 private constant _RATE_BIT_LENGTH = 96;\\n    uint256 private constant _DURATION_BIT_LENGTH = 32;\\n\\n    /**\\n     * @dev Returns the current rate in the price rate cache.\\n     */\\n    function getCurrentRate(bytes32 cache) internal pure returns (uint256) {\\n        return cache.decodeUint(_CURRENT_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns the old rate in the price rate cache.\\n     */\\n    function getOldRate(bytes32 cache) internal pure returns (uint256) {\\n        return cache.decodeUint(_OLD_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Copies the current rate to the old rate.\\n     */\\n    function updateOldRate(bytes32 cache) internal pure returns (bytes32) {\\n        return cache.insertUint(getCurrentRate(cache), _OLD_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns the duration of a price rate cache.\\n     */\\n    function getDuration(bytes32 cache) internal pure returns (uint256) {\\n        return cache.decodeUint(_PRICE_RATE_CACHE_DURATION_OFFSET, _DURATION_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns the duration and expiration time of a price rate cache.\\n     */\\n    function getTimestamps(bytes32 cache) internal pure returns (uint256 duration, uint256 expires) {\\n        duration = getDuration(cache);\\n        expires = cache.decodeUint(_PRICE_RATE_CACHE_EXPIRES_OFFSET, _DURATION_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Encodes rate and duration into a price rate cache. The expiration time is computed automatically, counting\\n     * from the current time.\\n     */\\n    function updateRateAndDuration(\\n        bytes32 cache,\\n        uint256 rate,\\n        uint256 duration\\n    ) internal view returns (bytes32) {\\n        _require(rate >> _RATE_BIT_LENGTH == 0, Errors.PRICE_RATE_OVERFLOW);\\n\\n        // solhint-disable not-rely-on-time\\n        return\\n            cache\\n                .insertUint(rate, _CURRENT_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH)\\n                .insertUint(duration, _PRICE_RATE_CACHE_DURATION_OFFSET, _DURATION_BIT_LENGTH)\\n                .insertUint(block.timestamp + duration, _PRICE_RATE_CACHE_EXPIRES_OFFSET, _DURATION_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Update the current rate in a price rate cache.\\n     */\\n    function updateCurrentRate(bytes32 cache, uint256 rate) internal pure returns (bytes32) {\\n        _require(rate >> _RATE_BIT_LENGTH == 0, Errors.PRICE_RATE_OVERFLOW);\\n\\n        return cache.insertUint(rate, _CURRENT_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Update the duration (and expiration) in a price rate cache.\\n     */\\n    function updateDuration(bytes32 cache, uint256 duration) internal view returns (bytes32) {\\n        return\\n            cache.insertUint(duration, _PRICE_RATE_CACHE_DURATION_OFFSET, _DURATION_BIT_LENGTH).insertUint(\\n                block.timestamp + duration,\\n                _PRICE_RATE_CACHE_EXPIRES_OFFSET,\\n                _DURATION_BIT_LENGTH\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns rate, duration and expiration time of a price rate cache.\\n     */\\n    function decode(bytes32 cache)\\n        internal\\n        pure\\n        returns (\\n            uint256 rate,\\n            uint256 duration,\\n            uint256 expires\\n        )\\n    {\\n        rate = getCurrentRate(cache);\\n        (duration, expires) = getTimestamps(cache);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ComposableStablePoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/BasePool.sol\\\";\\n\\nimport \\\"./StableMath.sol\\\";\\n\\nabstract contract ComposableStablePoolStorage is BasePool {\\n    using FixedPoint for uint256;\\n    using WordCodec for bytes32;\\n\\n    struct StorageParams {\\n        IERC20[] registeredTokens;\\n        IRateProvider[] tokenRateProviders;\\n        bool exemptFromYieldProtocolFeeFlag;\\n    }\\n\\n    // This minimum refers not to the total tokens, but rather to the non-BPT tokens. The minimum value for _totalTokens\\n    // is therefore _MIN_NON_BPT_TOKENS + 1.\\n    uint256 private constant _MIN_NON_BPT_TOKENS = 2;\\n\\n    // The Pool will register n+1 tokens, where n are the actual tokens in the Pool, and the other one is the BPT\\n    // itself.\\n    uint256 private immutable _totalTokens;\\n\\n    // The index of BPT in the tokens and balances arrays, i.e. its index when calling IVault.registerTokens().\\n    uint256 private immutable _bptIndex;\\n\\n    // These are the registered tokens: one of them will be the BPT.\\n    IERC20 private immutable _token0;\\n    IERC20 private immutable _token1;\\n    IERC20 private immutable _token2;\\n    IERC20 private immutable _token3;\\n    IERC20 private immutable _token4;\\n    IERC20 private immutable _token5;\\n\\n    // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will\\n    // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.\\n    // These factors are always greater than or equal to one: tokens with more than 18 decimals are not supported.\\n\\n    uint256 internal immutable _scalingFactor0;\\n    uint256 internal immutable _scalingFactor1;\\n    uint256 internal immutable _scalingFactor2;\\n    uint256 internal immutable _scalingFactor3;\\n    uint256 internal immutable _scalingFactor4;\\n    uint256 internal immutable _scalingFactor5;\\n\\n    // Rate Providers accommodate tokens with a known price ratio, such as Compound's cTokens.\\n\\n    IRateProvider internal immutable _rateProvider0;\\n    IRateProvider internal immutable _rateProvider1;\\n    IRateProvider internal immutable _rateProvider2;\\n    IRateProvider internal immutable _rateProvider3;\\n    IRateProvider internal immutable _rateProvider4;\\n    IRateProvider internal immutable _rateProvider5;\\n\\n    // This is a bitmap which allows querying whether a token at a particular index:\\n    // - has a rate provider associated with it.\\n    // - is exempt from yield protocol fees.\\n    // This is required as the data stored in this bitmap is computed from values in immutable storage,\\n    // without this bitmap we would have to manually search through token by token to reach these values.\\n    // The data structure is as follows:\\n    //\\n    // [  unused  | rate provider flags | exemption flags ]\\n    // [ 244 bits |        6 bits       |     6 bits      ]\\n    bytes32 private immutable _rateProviderInfoBitmap;\\n\\n    // Indicates whether all the tokens from the pool are exempt from yield protocol fee or not.\\n    bool private immutable _exemptFromYieldProtocolFee;\\n\\n    uint256 private constant _RATE_PROVIDER_FLAGS_OFFSET = 6;\\n\\n    constructor(StorageParams memory params) {\\n        // BasePool checks that the Pool has at least two tokens, but since one of them is the BPT (this contract), we\\n        // need to check ourselves that there are at least creator-supplied tokens (i.e. the minimum number of total\\n        // tokens for this contract is actually three, including the BPT).\\n        uint256 totalTokens = params.registeredTokens.length;\\n        _require(totalTokens > _MIN_NON_BPT_TOKENS, Errors.MIN_TOKENS);\\n        InputHelpers.ensureInputLengthMatch(totalTokens - 1, params.tokenRateProviders.length);\\n\\n        _totalTokens = totalTokens;\\n\\n        // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments\\n        _token0 = params.registeredTokens[0];\\n        _token1 = params.registeredTokens[1];\\n        _token2 = params.registeredTokens[2];\\n        _token3 = totalTokens > 3 ? params.registeredTokens[3] : IERC20(0);\\n        _token4 = totalTokens > 4 ? params.registeredTokens[4] : IERC20(0);\\n        _token5 = totalTokens > 5 ? params.registeredTokens[5] : IERC20(0);\\n\\n        _scalingFactor0 = _computeScalingFactor(params.registeredTokens[0]);\\n        _scalingFactor1 = _computeScalingFactor(params.registeredTokens[1]);\\n        _scalingFactor2 = _computeScalingFactor(params.registeredTokens[2]);\\n        _scalingFactor3 = totalTokens > 3 ? _computeScalingFactor(params.registeredTokens[3]) : 0;\\n        _scalingFactor4 = totalTokens > 4 ? _computeScalingFactor(params.registeredTokens[4]) : 0;\\n        _scalingFactor5 = totalTokens > 5 ? _computeScalingFactor(params.registeredTokens[5]) : 0;\\n\\n        // The Vault keeps track of all Pool tokens in a specific order: we need to know what the index of BPT is in\\n        // this ordering to be able to identify it when balances arrays are received. Since the tokens array is sorted,\\n        // we need to find the correct BPT index in the array returned by `_insertSorted()`.\\n        // See `IVault.getPoolTokens()` for more information regarding token ordering.\\n        uint256 bptIndex;\\n        for (\\n            bptIndex = params.registeredTokens.length - 1;\\n            bptIndex > 0 && params.registeredTokens[bptIndex] > IERC20(this);\\n            bptIndex--\\n        ) {\\n            // solhint-disable-previous-line no-empty-blocks\\n        }\\n        _bptIndex = bptIndex;\\n\\n        // The rate providers are stored as immutable state variables, and for simplicity when accessing those we'll\\n        // reference them by token index in the full base tokens plus BPT set (i.e. the tokens the Pool registers). Due\\n        // to immutable variables requiring an explicit assignment instead of defaulting to an empty value, it is\\n        // simpler to create a new memory array with the values we want to assign to the immutable state variables.\\n        IRateProvider[] memory rateProviders = new IRateProvider[](params.registeredTokens.length);\\n\\n        bytes32 rateProviderInfoBitmap;\\n\\n        // The exemptFromYieldFlag should never be set on a token without a rate provider.\\n        // This would cause division by zero errors downstream.\\n        for (uint256 i = 0; i < params.registeredTokens.length; ++i) {\\n            if (i < bptIndex) {\\n                rateProviders[i] = params.tokenRateProviders[i];\\n            } else if (i != bptIndex) {\\n                rateProviders[i] = params.tokenRateProviders[i - 1];\\n            } else {\\n                // do nothing for i == bptIndex\\n                continue;\\n            }\\n            // Store whether token has rate provider\\n            rateProviderInfoBitmap = rateProviderInfoBitmap.insertBool(\\n                rateProviders[i] != IRateProvider(0),\\n                _RATE_PROVIDER_FLAGS_OFFSET + i\\n            );\\n            // Store whether token is exempt from yield fees (only with rate providers).\\n            if (params.exemptFromYieldProtocolFeeFlag && rateProviders[i] != IRateProvider(0)) {\\n                rateProviderInfoBitmap = rateProviderInfoBitmap.insertBool(true, i);\\n            }\\n        }\\n\\n        // Either all tokens are exempt, or none of them are. This is defined by the input parameter.\\n        _exemptFromYieldProtocolFee = params.exemptFromYieldProtocolFeeFlag;\\n\\n        // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments\\n        _rateProvider0 = rateProviders[0];\\n        _rateProvider1 = rateProviders[1];\\n        _rateProvider2 = rateProviders[2];\\n        _rateProvider3 = (rateProviders.length > 3) ? rateProviders[3] : IRateProvider(0);\\n        _rateProvider4 = (rateProviders.length > 4) ? rateProviders[4] : IRateProvider(0);\\n        _rateProvider5 = (rateProviders.length > 5) ? rateProviders[5] : IRateProvider(0);\\n\\n        _rateProviderInfoBitmap = rateProviderInfoBitmap;\\n    }\\n\\n    // Tokens\\n\\n    function _getTotalTokens() internal view virtual override returns (uint256) {\\n        return _totalTokens;\\n    }\\n\\n    function _getMaxTokens() internal pure override returns (uint256) {\\n        // The BPT will be one of the Pool tokens, but it is unaffected by the Stable 5 token limit.\\n        return StableMath._MAX_STABLE_TOKENS + 1;\\n    }\\n\\n    function getBptIndex() public view returns (uint256) {\\n        return _bptIndex;\\n    }\\n\\n    function _getTokenIndex(IERC20 token) internal view returns (uint256) {\\n        if (token == _token0) return 0;\\n        if (token == _token1) return 1;\\n        if (token == _token2) return 2;\\n        if (token == _token3) return 3;\\n        if (token == _token4) return 4;\\n        if (token == _token5) return 5;\\n\\n        _revert(Errors.INVALID_TOKEN);\\n    }\\n\\n    function _scalingFactor(IERC20) internal view virtual override returns (uint256) {\\n        // We never use a single token's scaling factor by itself, we always process the entire array at once.\\n        // Therefore we don't bother providing an implementation for this.\\n        _revert(Errors.UNIMPLEMENTED);\\n    }\\n\\n    // Index helpers\\n\\n    // Convert from an index into an array including BPT (the Vault's registered token list), to an index\\n    // into an array excluding BPT (usually from user input, such as amountsIn/Out).\\n    // `index` must not be the BPT token index itself.\\n    function _skipBptIndex(uint256 index) internal view returns (uint256) {\\n        // Currently this is never called with an index passed in from user input, so this check\\n        // should not be necessary. Included for completion (and future proofing).\\n        _require(index != getBptIndex(), Errors.OUT_OF_BOUNDS);\\n\\n        return index < getBptIndex() ? index : index.sub(1);\\n    }\\n\\n    /**\\n     * @dev Remove the item at `_bptIndex` from an arbitrary array (e.g., amountsIn).\\n     */\\n    function _dropBptItem(uint256[] memory amounts) internal view returns (uint256[] memory) {\\n        uint256[] memory amountsWithoutBpt = new uint256[](amounts.length - 1);\\n        for (uint256 i = 0; i < amountsWithoutBpt.length; i++) {\\n            amountsWithoutBpt[i] = amounts[i < getBptIndex() ? i : i + 1];\\n        }\\n\\n        return amountsWithoutBpt;\\n    }\\n\\n    /**\\n     * @dev Same as `_dropBptItem`, except the virtual supply is also returned, and `balances` is assumed to be the\\n     * current Pool balances (including BPT).\\n     */\\n    function _dropBptItemFromBalances(uint256[] memory registeredBalances)\\n        internal\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        return (_getVirtualSupply(registeredBalances[getBptIndex()]), _dropBptItem(registeredBalances));\\n    }\\n\\n    // Convert from an index into an array excluding BPT (usually from user input, such as amountsIn/Out),\\n    // to an index into an array including BPT (the Vault's registered token list).\\n    // `index` must not be the BPT token index itself, if it is the last element, and the result must be\\n    // in the range of registered tokens.\\n    function _addBptIndex(uint256 index) internal view returns (uint256 registeredIndex) {\\n        // This can be called from an index passed in from user input.\\n        registeredIndex = index < getBptIndex() ? index : index.add(1);\\n\\n        // TODO: `indexWithBpt != getBptIndex()` follows from above line and so can be removed.\\n        _require(registeredIndex < _totalTokens && registeredIndex != getBptIndex(), Errors.OUT_OF_BOUNDS);\\n    }\\n\\n    /**\\n     * @dev Take an array of arbitrary values the size of the token set without BPT, and insert the given\\n     * bptAmount at the bptIndex location.\\n     *\\n     * The caller is responsible for ensuring the `amounts` input array is sized properly; this function\\n     * performs no checks.\\n     */\\n    function _addBptItem(uint256[] memory amounts, uint256 bptAmount)\\n        internal\\n        view\\n        returns (uint256[] memory registeredTokenAmounts)\\n    {\\n        registeredTokenAmounts = new uint256[](amounts.length + 1);\\n        for (uint256 i = 0; i < registeredTokenAmounts.length; i++) {\\n            registeredTokenAmounts[i] = i == getBptIndex() ? bptAmount : amounts[i < getBptIndex() ? i : i - 1];\\n        }\\n    }\\n\\n    // Rate Providers\\n\\n    function _getScalingFactor(uint256 index) internal view returns (uint256) {\\n        if (index == 0) return _scalingFactor0;\\n        if (index == 1) return _scalingFactor1;\\n        if (index == 2) return _scalingFactor2;\\n        if (index == 3) return _scalingFactor3;\\n        if (index == 4) return _scalingFactor4;\\n        if (index == 5) return _scalingFactor5;\\n        else {\\n            _revert(Errors.INVALID_TOKEN);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the rate providers configured for each token (in the same order as registered).\\n     */\\n    function getRateProviders() external view returns (IRateProvider[] memory) {\\n        uint256 totalTokens = _getTotalTokens();\\n        IRateProvider[] memory providers = new IRateProvider[](totalTokens);\\n\\n        for (uint256 i = 0; i < totalTokens; ++i) {\\n            providers[i] = _getRateProvider(i);\\n        }\\n\\n        return providers;\\n    }\\n\\n    function _getRateProvider(uint256 index) internal view returns (IRateProvider) {\\n        if (index == 0) return _rateProvider0;\\n        if (index == 1) return _rateProvider1;\\n        if (index == 2) return _rateProvider2;\\n        if (index == 3) return _rateProvider3;\\n        if (index == 4) return _rateProvider4;\\n        if (index == 5) return _rateProvider5;\\n        else {\\n            _revert(Errors.INVALID_TOKEN);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return true if the token at this index has a rate provider\\n     */\\n    function _hasRateProvider(uint256 tokenIndex) internal view returns (bool) {\\n        return _rateProviderInfoBitmap.decodeBool(_RATE_PROVIDER_FLAGS_OFFSET + tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Return true if all tokens are exempt from yield fees.\\n     */\\n    function isExemptFromYieldProtocolFee() public view returns (bool) {\\n        return _exemptFromYieldProtocolFee;\\n    }\\n\\n    /**\\n     * @dev Returns whether the token is exempt from protocol fees on the yield.\\n     * If the BPT token is passed in (which doesn't make much sense, but shouldn't fail,\\n     * since it is a valid pool token), the corresponding flag will be false.\\n     */\\n    function isTokenExemptFromYieldProtocolFee(IERC20 token) external view returns (bool) {\\n        return _exemptFromYieldProtocolFee && _hasRateProvider(_getTokenIndex(token));\\n    }\\n\\n    // Virtual Supply\\n\\n    /**\\n     * @dev Returns the number of tokens in circulation.\\n     *\\n     * WARNING: in the vast majority of cases this is not a useful value, since it does not include the debt the Pool\\n     * accrued in the form of unminted BPT for the ProtocolFeesCollector. Look into `getActualSupply()` and how that's\\n     * different.\\n     *\\n     * In other pools, this would be the same as `totalSupply`, but since this pool pre-mints BPT and holds it in the\\n     * Vault as a token, we need to subtract the Vault's balance to get the total \\\"circulating supply\\\". Both the\\n     * totalSupply and Vault balance can change. If users join or exit using swaps, some of the preminted BPT are\\n     * exchanged, so the Vault's balance increases after joins and decreases after exits. If users call the regular\\n     * joins/exit functions, the totalSupply can change as BPT are minted for joins or burned for exits.\\n     */\\n    function _getVirtualSupply(uint256 bptBalance) internal view returns (uint256) {\\n        // The initial amount of BPT pre-minted is _PREMINTED_TOKEN_BALANCE, and it goes entirely to the pool balance in\\n        // the vault. So the virtualSupply (the amount of BPT supply in circulation) is defined as:\\n        // virtualSupply = totalSupply() - _balances[_bptIndex]\\n        return totalSupply().sub(bptBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ComposableStablePoolRates.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol\\\";\\n\\nimport \\\"./ComposableStablePoolStorage.sol\\\";\\n\\nabstract contract ComposableStablePoolRates is ComposableStablePoolStorage {\\n    using PriceRateCache for bytes32;\\n    using FixedPoint for uint256;\\n\\n    struct RatesParams {\\n        IERC20[] tokens;\\n        IRateProvider[] rateProviders;\\n        uint256[] tokenRateCacheDurations;\\n    }\\n\\n    // Token rate caches are used to avoid querying the price rate for a token every time we need to work with it.\\n    // The \\\"old rate\\\" field is used for precise protocol fee calculation, to ensure that token yield is only\\n    // \\\"taxed\\\" once. The data structure is as follows:\\n    //\\n    // [ expires | duration | old rate | current rate ]\\n    // [ uint32  |  uint32  |  uint96  |   uint96     ]\\n\\n    // Since we never need just one cache but all of them at once, instead of making the mapping go from token address\\n    // to cache, we go from token index (including BPT), i.e. an array. We use a mapping however instead of a native\\n    // array to skip the extra read associated with the out-of-bounds check, as we have cheaper ways to guarantee the\\n    // indices are valid.\\n    mapping(uint256 => bytes32) internal _tokenRateCaches;\\n\\n    event TokenRateCacheUpdated(uint256 indexed tokenIndex, uint256 rate);\\n    event TokenRateProviderSet(uint256 indexed tokenIndex, IRateProvider indexed provider, uint256 cacheDuration);\\n\\n    constructor(RatesParams memory rateParams) {\\n        InputHelpers.ensureInputLengthMatch(\\n            rateParams.tokens.length,\\n            rateParams.rateProviders.length,\\n            rateParams.tokenRateCacheDurations.length\\n        );\\n\\n        IERC20[] memory registeredTokens = _insertSorted(rateParams.tokens, IERC20(this));\\n        uint256 bptIndex;\\n        for (\\n            bptIndex = registeredTokens.length - 1;\\n            bptIndex > 0 && registeredTokens[bptIndex] > IERC20(this);\\n            bptIndex--\\n        ) {\\n            // solhint-disable-previous-line no-empty-blocks\\n        }\\n\\n        uint256 skipBpt = 0;\\n        for (uint256 i = 0; i < rateParams.tokens.length; i++) {\\n            if (i == bptIndex) {\\n                skipBpt = 1;\\n            }\\n\\n            uint256 k = i + skipBpt;\\n            if (rateParams.rateProviders[i] != IRateProvider(0)) {\\n                _updateTokenRateCache(k, rateParams.rateProviders[i], rateParams.tokenRateCacheDurations[i]);\\n\\n                emit TokenRateProviderSet(k, rateParams.rateProviders[i], rateParams.tokenRateCacheDurations[i]);\\n\\n                // Initialize the old rates as well, in case they are referenced before the first join.\\n                _updateOldRate(k);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensure we are not in a Vault context when this function is called, by attempting a no-op internal\\n     * balance operation. If we are already in a Vault transaction (e.g., a swap, join, or exit), the Vault's\\n     * reentrancy protection will cause this function to revert.\\n     *\\n     * The exact function call doesn't really matter: we're just trying to trigger the Vault reentrancy check\\n     * (and not hurt anything in case it works). An empty operation array with no specific operation at all works\\n     * for that purpose, and is also the least expensive in terms of gas and bytecode size.\\n     *\\n     * Use this modifier with any function that can cause a state change in a pool and is either public itself,\\n     * or called by a public function *outside* a Vault operation (e.g., join, exit, or swap).\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     */\\n    modifier whenNotInVaultContext() {\\n        _ensureNotInVaultContext();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if called in the middle of a Vault operation; has no effect otherwise.\\n     */\\n    function _ensureNotInVaultContext() private {\\n        IVault.UserBalanceOp[] memory noop = new IVault.UserBalanceOp[](0);\\n        getVault().manageUserBalance(noop);\\n    }\\n\\n    /**\\n     * @dev Updates the old rate for the token at `index` (including BPT). Assumes `index` is valid.\\n     */\\n    function _updateOldRate(uint256 index) internal {\\n        bytes32 cache = _tokenRateCaches[index];\\n        _tokenRateCaches[index] = cache.updateOldRate();\\n    }\\n\\n    /**\\n     * @dev Returns the rate for a given token. All token rates are fixed-point values with 18 decimals.\\n     * If there is no rate provider for the provided token, it returns FixedPoint.ONE.\\n     */\\n    function getTokenRate(IERC20 token) external view returns (uint256) {\\n        return _getTokenRate(_getTokenIndex(token));\\n    }\\n\\n    function _getTokenRate(uint256 index) internal view virtual returns (uint256) {\\n        // We optimize for the scenario where all tokens have rate providers, except the BPT (which never has a rate\\n        // provider). Therefore, we return early if `token` is the BPT, and otherwise optimistically read the cache\\n        // expecting that it will not be empty (instead of e.g. fetching the provider to avoid a cache read, since\\n        // we don't need the provider at all).\\n\\n        if (index == getBptIndex()) {\\n            return FixedPoint.ONE;\\n        }\\n\\n        bytes32 tokenRateCache = _tokenRateCaches[index];\\n        return tokenRateCache == bytes32(0) ? FixedPoint.ONE : tokenRateCache.getCurrentRate();\\n    }\\n\\n    /**\\n     * @dev Returns the cached value for token's rate. Reverts if the token doesn't belong to the pool or has no rate\\n     * provider.\\n     */\\n    function getTokenRateCache(IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 rate,\\n            uint256 oldRate,\\n            uint256 duration,\\n            uint256 expires\\n        )\\n    {\\n        bytes32 cache = _tokenRateCaches[_getTokenIndex(token)];\\n\\n        // A zero cache indicates that the token doesn't have a rate provider associated with it.\\n        _require(cache != bytes32(0), Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER);\\n\\n        rate = cache.getCurrentRate();\\n        oldRate = cache.getOldRate();\\n        (duration, expires) = cache.getTimestamps();\\n    }\\n\\n    /**\\n     * @dev Sets a new duration for a token rate cache.\\n     * Note this function also updates the current cached value.\\n     *\\n     * This function will revert when called within a Vault context (i.e. in the middle of a join or an exit).\\n     *\\n     * This function depends on `getRate` via the rate provider, which may be calculated incorrectly in the middle of a\\n     * join or an exit because the state of the pool could be out of sync with the state of the Vault.\\n     *\\n     * It will also revert if there was no rate provider set initially.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     *\\n     * @param duration Number of seconds until the current token rate is fetched again.\\n     */\\n    function setTokenRateCacheDuration(IERC20 token, uint256 duration) external authenticate whenNotInVaultContext {\\n        uint256 index = _getTokenIndex(token);\\n        IRateProvider provider = _getRateProvider(index);\\n        _require(address(provider) != address(0), Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER);\\n        _updateTokenRateCache(index, provider, duration);\\n        emit TokenRateProviderSet(index, provider, duration);\\n    }\\n\\n    /**\\n     * @dev Forces a rate cache hit for a token.\\n     *\\n     * This function will revert when called within a Vault context (i.e. in the middle of a join or an exit).\\n     *\\n     * This function depends on `getRate` via the rate provider, which may be calculated incorrectly in the middle of a\\n     * join or an exit because the state of the pool could be out of sync with the state of the Vault.\\n     *\\n     * It will also revert if the requested token does not have an associated rate provider.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     */\\n    function updateTokenRateCache(IERC20 token) external whenNotInVaultContext {\\n        uint256 index = _getTokenIndex(token);\\n\\n        IRateProvider provider = _getRateProvider(index);\\n        _require(address(provider) != address(0), Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER);\\n        uint256 duration = _tokenRateCaches[index].getDuration();\\n        _updateTokenRateCache(index, provider, duration);\\n    }\\n\\n    /**\\n     * @dev Internal function to update a token rate cache for a known provider and duration.\\n     * It trusts the given values, and does not perform any checks.\\n     */\\n    function _updateTokenRateCache(\\n        uint256 index,\\n        IRateProvider provider,\\n        uint256 duration\\n    ) internal virtual {\\n        uint256 rate = provider.getRate();\\n        bytes32 cache = _tokenRateCaches[index];\\n\\n        _tokenRateCaches[index] = cache.updateRateAndDuration(rate, duration);\\n\\n        emit TokenRateCacheUpdated(index, rate);\\n    }\\n\\n    /**\\n     * @dev Caches the rates of all tokens if necessary\\n     */\\n    function _cacheTokenRatesIfNecessary() internal {\\n        uint256 totalTokens = _getTotalTokens();\\n        for (uint256 i = 0; i < totalTokens; ++i) {\\n            _cacheTokenRateIfNecessary(i);\\n        }\\n    }\\n\\n    /**\\n     * @dev Caches the rate for a token if necessary. It ignores the call if there is no provider set.\\n     */\\n    function _cacheTokenRateIfNecessary(uint256 index) internal {\\n        // We optimize for the scenario where all tokens have rate providers, except the BPT (which never has a rate\\n        // provider). Therefore, we return early if token is BPT, and otherwise optimistically read the cache expecting\\n        // that it will not be empty (instead of e.g. fetching the provider to avoid a cache read in situations where\\n        // we might not need the provider if the cache is still valid).\\n\\n        if (index == getBptIndex()) return;\\n\\n        bytes32 cache = _tokenRateCaches[index];\\n        if (cache != bytes32(0)) {\\n            (uint256 duration, uint256 expires) = cache.getTimestamps();\\n            if (block.timestamp > expires) {\\n                // solhint-disable-previous-line not-rely-on-time\\n                _updateTokenRateCache(index, _getRateProvider(index), duration);\\n            }\\n        }\\n    }\\n\\n    // To compute the yield protocol fees, we need the oldRate for all tokens, even if the exempt flag is not set.\\n    // We do need to ensure the token has a rate provider before updating; otherwise it will not be in the cache.\\n    function _updateOldRates() internal {\\n        uint256 totalTokens = _getTotalTokens();\\n        for (uint256 i = 0; i < totalTokens; ++i) {\\n            if (_hasRateProvider(i)) _updateOldRate(i);\\n        }\\n    }\\n\\n    /**\\n     * @dev Apply the token ratios to a set of balances, only if they have a rate provider.\\n     * The `balances` array is assumed to not include BPT to ensure that token indices align.\\n     */\\n    function _getAdjustedBalances(uint256[] memory balances) internal view returns (uint256[] memory) {\\n        uint256 totalTokensWithoutBpt = balances.length;\\n        uint256[] memory adjustedBalances = new uint256[](totalTokensWithoutBpt);\\n\\n        for (uint256 i = 0; i < totalTokensWithoutBpt; ++i) {\\n            uint256 skipBptIndex = i >= getBptIndex() ? i + 1 : i;\\n            adjustedBalances[i] = _hasRateProvider(skipBptIndex)\\n                ? _adjustedBalance(balances[i], _tokenRateCaches[skipBptIndex])\\n                : balances[i];\\n        }\\n\\n        return adjustedBalances;\\n    }\\n\\n    // Compute balance * oldRate/currentRate, doing division last to minimize rounding error.\\n    function _adjustedBalance(uint256 balance, bytes32 cache) private pure returns (uint256) {\\n        return Math.divDown(Math.mul(balance, cache.getOldRate()), cache.getCurrentRate());\\n    }\\n\\n    // Scaling Factors\\n\\n    /**\\n     * @dev Overrides scaling factor getter to compute the tokens' rates.\\n     */\\n    function _scalingFactors() internal view virtual override returns (uint256[] memory) {\\n        // There is no need to check the arrays length since both are based on `_getTotalTokens`\\n        uint256 totalTokens = _getTotalTokens();\\n        uint256[] memory scalingFactors = new uint256[](totalTokens);\\n\\n        for (uint256 i = 0; i < totalTokens; ++i) {\\n            scalingFactors[i] = _getScalingFactor(i).mulDown(_getTokenRate(i));\\n        }\\n\\n        return scalingFactors;\\n    }\\n\\n    /**\\n     * @dev Overrides only owner action to allow setting the cache duration for the token rates\\n     */\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {\\n        return (actionId == getActionId(this.setTokenRateCacheDuration.selector)) || super._isOwnerOnlyAction(actionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ComposableStablePoolProtocolFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol\\\";\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol\\\";\\n\\nimport \\\"./ComposableStablePoolStorage.sol\\\";\\nimport \\\"./ComposableStablePoolRates.sol\\\";\\nimport \\\"./StableMath.sol\\\";\\n\\nabstract contract ComposableStablePoolProtocolFees is\\n    ComposableStablePoolStorage,\\n    ComposableStablePoolRates,\\n    ProtocolFeeCache\\n{\\n    using FixedPoint for uint256;\\n    using WordCodec for bytes32;\\n\\n    // To track protocol fees, we measure and store the value of the invariant after every join and exit.\\n    // All invariant growth that happens between join and exit events is due to swap fees and yield.\\n    // For selected tokens, we exclude the yield portion from the computation.\\n    // Because the invariant depends on the amplification parameter, and this value may change over time, we should only\\n    // compare invariants that were computed using the same value. We therefore store both values together.\\n    //\\n    // These values reside in the same storage slot. The amplification factor is bound by _MAX_AMP * _AMP_PRECISION, or\\n    // 5e6, which fits in 23 bits. We use all remaining bits for the invariant: this is more than enough, as the\\n    // invariant is proportional to the total supply, which is capped at 112 bits.\\n    // The data structure is as follows:\\n    //\\n    // [ last join-exit amplification  | last post join-exit invariant ]\\n    // [           23 bits             |            233 bits           ]\\n    bytes32 private _lastJoinExitData;\\n\\n    uint256 private constant _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET = 0;\\n    uint256 private constant _LAST_POST_JOIN_EXIT_INVARIANT_SIZE = 233;\\n    uint256 private constant _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET = _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET +\\n        _LAST_POST_JOIN_EXIT_INVARIANT_SIZE;\\n\\n    uint256 private constant _LAST_JOIN_EXIT_AMPLIFICATION_SIZE = 23;\\n\\n    /**\\n     * @dev Calculates due protocol fees originating from accumulated swap fees and yield of non-exempt tokens, pays\\n     * them by minting BPT, and returns the actual supply and current balances.\\n     *\\n     * We also return the current invariant computed using the amplification factor at the last join or exit, which can\\n     * be useful to skip computations in scenarios where the amplification factor is not changing.\\n     */\\n    function _payProtocolFeesBeforeJoinExit(\\n        uint256[] memory registeredBalances,\\n        uint256 lastJoinExitAmp,\\n        uint256 lastPostJoinExitInvariant\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        (uint256 virtualSupply, uint256[] memory balances) = _dropBptItemFromBalances(registeredBalances);\\n\\n        // First, we'll compute what percentage of the Pool the protocol should own due to charging protocol fees on\\n        // swap fees and yield.\\n        (\\n            uint256 expectedProtocolOwnershipPercentage,\\n            uint256 currentInvariantWithLastJoinExitAmp\\n        ) = _getProtocolPoolOwnershipPercentage(balances, lastJoinExitAmp, lastPostJoinExitInvariant);\\n\\n        // Now that we know what percentage of the Pool's current value the protocol should own, we can compute how\\n        // much BPT we need to mint to get to this state. Since we're going to mint BPT for the protocol, the value\\n        // of each BPT is going to be reduced as all LPs get diluted.\\n        uint256 protocolFeeAmount = ProtocolFees.bptForPoolOwnershipPercentage(\\n            virtualSupply,\\n            expectedProtocolOwnershipPercentage\\n        );\\n\\n        if (protocolFeeAmount > 0) {\\n            _payProtocolFees(protocolFeeAmount);\\n        }\\n\\n        // We pay fees before a join or exit to ensure the pool is debt-free. This increases the virtual supply (making\\n        // it match the actual supply).\\n        //\\n        // For this addition to overflow, `totalSupply` would also have already overflowed.\\n        return (virtualSupply + protocolFeeAmount, balances, currentInvariantWithLastJoinExitAmp);\\n    }\\n\\n    function _getProtocolPoolOwnershipPercentage(\\n        uint256[] memory balances,\\n        uint256 lastJoinExitAmp,\\n        uint256 lastPostJoinExitInvariant\\n    ) internal view returns (uint256, uint256) {\\n        // We compute three invariants, adjusting the balances of tokens that have rate providers by undoing the current\\n        // rate adjustment and then applying the old rate. This is equivalent to multiplying by old rate / current rate.\\n        //\\n        // In all cases we compute invariants with the last join-exit amplification factor, so that changes to the\\n        // amplification are not translated into changes to the invariant. Since amplification factor changes are both\\n        // infrequent and slow, they should have little effect on the pool balances, making this a very good\\n        // approximation.\\n        //\\n        // With this technique we obtain an invariant that does not include yield at all, meaning any growth will be due\\n        // exclusively to swap fees. We call this the 'swap fee growth invariant'.\\n        // A second invariant will exclude the yield of exempt tokens, and therefore include both swap fees and\\n        // non-exempt yield. This is called the 'non exempt growth invariant'.\\n        // Finally, a third invariant includes the yield of all tokens by using only the current rates. We call this the\\n        // 'total growth invariant', since it includes both swap fee growth, non-exempt yield growth and exempt yield\\n        // growth. If the last join-exit amplification equals the current one, this invariant equals the current\\n        // invariant.\\n\\n        (\\n            uint256 swapFeeGrowthInvariant,\\n            uint256 totalNonExemptGrowthInvariant,\\n            uint256 totalGrowthInvariant\\n        ) = _getGrowthInvariants(balances, lastJoinExitAmp, lastPostJoinExitInvariant);\\n\\n        // By comparing the invariant increase attributable to each source of growth to the total growth invariant,\\n        // we can calculate how much of the current Pool value originates from that source, and then apply the\\n        // corresponding protocol fee percentage to that amount.\\n\\n        // We have two sources of growth: swap fees, and non-exempt yield. As we illustrate graphically below:\\n        //\\n        // growth due to swap fees        = (swap fee growth invariant - last post join-exit invariant)\\n        // growth due to non-exempt yield = (non-exempt growth invariant - swap fee growth invariant)\\n        //\\n        // These can be converted to additive percentages by normalizing against the total growth invariant value:\\n        // growth due to swap fees / total growth invariant = % pool ownership due from swap fees\\n        // growth due to non-exempt yield / total growth invariant = % pool ownership due from non-exempt yield\\n        //\\n        //   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2500\u2500\u2510\\n        //   \u2502  exempt yield         \u2502   \u2502  total growth invariant\\n        //   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502 \u2500\u2500\u2510\\n        //   \u2502  non-exempt yield     \u2502   \u2502   \u2502  non-exempt growth invariant\\n        //   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502   \u2502 \u2500\u2500\u2510\\n        //   \u2502  swap fees            \u2502   \u2502   \u2502   \u2502  swap fee growth invariant\\n        //   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502   \u2502   \u2502 \u2500\u2500\u2510\\n        //   \u2502   original value      \u2502   \u2502   \u2502   \u2502   \u2502  last post join-exit invariant\\n        //   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2518 \u2500\u2500\u2518 \u2500\u2500\u2518 \u2500\u2500\u2518\\n        //\\n        // Each invariant should be larger than its precedessor. In case any rounding error results in them being\\n        // smaller, we adjust the subtraction to equal 0.\\n\\n        // Note: in the unexpected scenario where the rates of the tokens shrink over time instead of growing (i.e. if\\n        // the yield is negative), the non-exempt growth invariant might actually be *smaller* than the swap fee growth\\n        // invariant, and the total growth invariant might be *smaller* than the non-exempt growth invariant. Depending\\n        // on the order in which swaps, joins/exits and rate changes happen, as well as their relative magnitudes, it is\\n        // possible for the Pool to either pay more or less protocol fees than it should.\\n\\n        // This patched version handles these edge cases gracefully, as it 1) forcibly bounds the swap fee growth\\n        // invariant between the total growth and last post join-exit invariant; 2) enforces \\\"all or nothing\\\" exempt\\n        // flags, which constrains the non-exempt growth invariant to be equal to either the total growth or swap\\n        // fee growth invariant.\\n        //\\n        // Furthermore, the protocol ownership percentage is hard-coded to zero (so protocol fees will be zero),\\n        // if the total growth invariant has gone *down* since the last join or exit, which is possible if rates\\n        // declined. Together, these measures ensure protocol fee amounts will be bound by the non-manipulable\\n        // swap fee growth, or zero in any pathological situations.\\n\\n        // If the total invariant decreased or stayed the same, there is no growth to split between swap and yield fees.\\n        if (totalGrowthInvariant <= lastPostJoinExitInvariant) {\\n            return (0, totalGrowthInvariant);\\n        }\\n\\n        // By now, the following inequality applies:\\n        // totalGrowthInvariant >= totalNonExemptGrowthInvariant >= swapFeeGrowthInvariant >= lastPostJoinExitInvariant\\n        // So these differences are safe to execute; their lower bound is 0 and they will not overflow.\\n        uint256 swapFeeGrowthInvariantDelta = swapFeeGrowthInvariant - lastPostJoinExitInvariant;\\n        uint256 nonExemptYieldGrowthInvariantDelta = totalNonExemptGrowthInvariant - swapFeeGrowthInvariant;\\n\\n        // We can now derive what percentage of the Pool's total value each invariant delta represents by dividing by\\n        // the total growth invariant. These values, multiplied by the protocol fee percentage for each growth type,\\n        // represent the percentage of Pool ownership the protocol should have due to each source.\\n\\n        uint256 protocolSwapFeePercentage = swapFeeGrowthInvariantDelta.divDown(totalGrowthInvariant).mulDown(\\n            getProtocolFeePercentageCache(ProtocolFeeType.SWAP)\\n        );\\n\\n        uint256 protocolYieldPercentage = nonExemptYieldGrowthInvariantDelta.divDown(totalGrowthInvariant).mulDown(\\n            getProtocolFeePercentageCache(ProtocolFeeType.YIELD)\\n        );\\n\\n        // These percentages can then be simply added to compute the total protocol Pool ownership percentage.\\n        // This is naturally bounded above by FixedPoint.ONE so this addition cannot overflow.\\n        return (protocolSwapFeePercentage + protocolYieldPercentage, totalGrowthInvariant);\\n    }\\n\\n    /**\\n     * @dev Returns total growth invariant and swap / yield invariant approximations.\\n     * The calculated invariants are bounded such that:\\n     *\\n     * - if totalGrowthInvariant <= lastPostJoinExitInvariant, the total value has decreased, so we can skip all\\n     * other invariant calculations and just return `totalGrowthInvariant` for all. Protocol fees should be zero\\n     * in this case, so callers using this to compute fees must also check for this, and return zero for the\\n     * protocol ownership percentage.\\n     *\\n     * - Otherwise, totalGrowthInvariant >= totalNonExemptGrowthInvariant >=\\n     *     swapFeeGrowthInvariant >= lastPostJoinExitInvariant\\n     * This was previously an assumption, but is now ensured by the logic in this function.\\n     */\\n    function _getGrowthInvariants(\\n        uint256[] memory balances,\\n        uint256 lastJoinExitAmp,\\n        uint256 lastPostJoinExitInvariant\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 swapFeeGrowthInvariant,\\n            uint256 totalNonExemptGrowthInvariant,\\n            uint256 totalGrowthInvariant\\n        )\\n    {\\n        // Total growth invariant is always calculated with the current (scaled / unadjusted) balances.\\n        totalGrowthInvariant = StableMath._calculateInvariant(lastJoinExitAmp, balances);\\n\\n        // If total invariant decreased, calculating the other approximations is unnecessary.\\n        if (totalGrowthInvariant <= lastPostJoinExitInvariant) {\\n            return (totalGrowthInvariant, totalGrowthInvariant, totalGrowthInvariant);\\n        }\\n\\n        // Swap fee invariant is calculated with adjusted balances, to discount the yield.\\n        swapFeeGrowthInvariant = StableMath._calculateInvariant(\\n            lastJoinExitAmp,\\n            _getAdjustedBalances(balances) // Adjust all token balances with rate providers.\\n        );\\n\\n        // The `swapFeeGrowthInvariant` cannot ever be outside the bounds:\\n        // totalGrowthInvariant >= swapFeeGrowthInvariant >= lastPostJoinExitInvariant\\n        swapFeeGrowthInvariant = Math.min(totalGrowthInvariant, swapFeeGrowthInvariant); // Set upper bound.\\n        swapFeeGrowthInvariant = Math.max(lastPostJoinExitInvariant, swapFeeGrowthInvariant); // Set lower bound.\\n\\n        // The only two accepted possibilities are either all tokens exempt, or none tokens exempt.\\n        // totalNonExemptGrowthInvariant will either be totalGrowthInvariant or swapFeeGrowthInvariant.\\n        // At this point,\\n        // - totalGrowthInvariant > lastPostJoinExitInvariant\\n        // - totalGrowthInvariant >= swapFeeGrowthInvariant >= lastPostJoinExitInvariant\\n        // So the complete inequality will apply by the end of this function:\\n        // totalGrowthInvariant >= totalNonExemptGrowthInvariant >= swapFeeGrowthInvariant >= lastPostJoinExitInvariant\\n        if (isExemptFromYieldProtocolFee()) {\\n            // If no tokens are charged fees on yield, then the non-exempt growth is equal to the swap fee growth - no\\n            // yield fees will be collected.\\n\\n            totalNonExemptGrowthInvariant = swapFeeGrowthInvariant;\\n        } else {\\n            // If there are no tokens with fee-exempt yield, then the total non-exempt growth will equal the total\\n            // growth: all yield growth is non-exempt. There's also no point in adjusting balances, since we\\n            // already know none are exempt.\\n\\n            totalNonExemptGrowthInvariant = totalGrowthInvariant;\\n        }\\n    }\\n\\n    /**\\n     * @dev Store the latest invariant based on the adjusted balances after the join or exit, using current rates.\\n     * Also cache the amp factor, so that the invariant is not affected by amp updates between joins and exits.\\n     *\\n     * Pay protocol fees due on any current join or exit swap.\\n     */\\n    function _updateInvariantAfterJoinExit(\\n        uint256 currentAmp,\\n        uint256[] memory balances,\\n        uint256 preJoinExitInvariant,\\n        uint256 preJoinExitSupply,\\n        uint256 postJoinExitSupply\\n    ) internal {\\n        // `_payProtocolFeesBeforeJoinExit` paid protocol fees accumulated between the previous and current\\n        // join or exit, while this code pays any protocol fees due on the current join or exit.\\n        // The amp and rates are constant during a single transaction, so it doesn't matter if there\\n        // is an ongoing amp change, and we can ignore yield.\\n\\n        // Compute the growth ratio between the pre- and post-join/exit balances.\\n        // Note that the pre-join/exit invariant is *not* the invariant from the last join,\\n        // but computed from the balances before this particular join/exit.\\n\\n        uint256 postJoinExitInvariant = StableMath._calculateInvariant(currentAmp, balances);\\n\\n        // Compute the portion of the invariant increase due to fees\\n        uint256 supplyGrowthRatio = postJoinExitSupply.divDown(preJoinExitSupply);\\n        uint256 feelessInvariant = preJoinExitInvariant.mulDown(supplyGrowthRatio);\\n\\n        // The postJoinExitInvariant should always be greater than the feelessInvariant (since the invariant and total\\n        // supply move proportionally outside of fees, which the postJoinInvariant includes and the feelessInvariant\\n        // does not). However, in the unexpected case in which due to rounding errors this is not true, we simply skip\\n        // further computation of protocol fees.\\n        if (postJoinExitInvariant > feelessInvariant) {\\n            uint256 invariantDeltaFromFees = postJoinExitInvariant - feelessInvariant;\\n\\n            // To convert to a percentage of pool ownership, multiply by the rate,\\n            // then normalize against the final invariant\\n            uint256 protocolOwnershipPercentage = Math.divDown(\\n                Math.mul(invariantDeltaFromFees, getProtocolFeePercentageCache(ProtocolFeeType.SWAP)),\\n                postJoinExitInvariant\\n            );\\n\\n            if (protocolOwnershipPercentage > 0) {\\n                uint256 protocolFeeAmount = ProtocolFees.bptForPoolOwnershipPercentage(\\n                    postJoinExitSupply,\\n                    protocolOwnershipPercentage\\n                );\\n\\n                _payProtocolFees(protocolFeeAmount);\\n            }\\n        }\\n\\n        _updatePostJoinExit(currentAmp, postJoinExitInvariant);\\n    }\\n\\n    /**\\n     * @dev Update the stored values of the amp and final post-join/exit invariant, to reset the basis for protocol\\n     * swap fees. Also copy the current rates to the old rates, to establish the new protocol yield basis for protocol\\n     * yield fees.\\n     */\\n    function _updatePostJoinExit(uint256 currentAmp, uint256 postJoinExitInvariant) internal {\\n        _lastJoinExitData =\\n            WordCodec.encodeUint(currentAmp, _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET, _LAST_JOIN_EXIT_AMPLIFICATION_SIZE) |\\n            WordCodec.encodeUint(\\n                postJoinExitInvariant,\\n                _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,\\n                _LAST_POST_JOIN_EXIT_INVARIANT_SIZE\\n            );\\n\\n        _updateOldRates();\\n    }\\n\\n    /**\\n     * @notice Return the amplification factor and invariant as of the most recent join or exit (including BPT swaps)\\n     */\\n    function getLastJoinExitData()\\n        public\\n        view\\n        returns (uint256 lastJoinExitAmplification, uint256 lastPostJoinExitInvariant)\\n    {\\n        bytes32 rawData = _lastJoinExitData;\\n\\n        lastJoinExitAmplification = rawData.decodeUint(\\n            _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET,\\n            _LAST_JOIN_EXIT_AMPLIFICATION_SIZE\\n        );\\n\\n        lastPostJoinExitInvariant = rawData.decodeUint(\\n            _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,\\n            _LAST_POST_JOIN_EXIT_INVARIANT_SIZE\\n        );\\n    }\\n\\n    /**\\n     * @dev Inheritance rules still require us to override this in the most derived contract, even though\\n     * it only calls super.\\n     */\\n    function _isOwnerOnlyAction(bytes32 actionId)\\n        internal\\n        view\\n        virtual\\n        override(\\n            // Our inheritance pattern creates a small diamond that requires explicitly listing the parents here.\\n            // Each parent calls the `super` version, so linearization ensures all implementations are called.\\n            BasePool,\\n            BasePoolAuthorization,\\n            ComposableStablePoolRates\\n        )\\n        returns (bool)\\n    {\\n        return super._isOwnerOnlyAction(actionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StablePoolAmplification.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\n\\nimport \\\"./StableMath.sol\\\";\\n\\nabstract contract StablePoolAmplification is BasePoolAuthorization {\\n    using WordCodec for bytes32;\\n\\n    // This contract uses timestamps to slowly update its Amplification parameter over time. These changes must occur\\n    // over a minimum time period much larger than the blocktime, making timestamp manipulation a non-issue.\\n    // solhint-disable not-rely-on-time\\n\\n    // Amplification factor changes must happen over a minimum period of one day, and can at most divide or multiply the\\n    // current value by 2 every day.\\n    // WARNING: this only limits *a single* amplification change to have a maximum rate of change of twice the original\\n    // value daily. It is possible to perform multiple amplification changes in sequence to increase this value more\\n    // rapidly: for example, by doubling the value every day it can increase by a factor of 8 over three days (2^3).\\n    uint256 private constant _MIN_UPDATE_TIME = 1 days;\\n    uint256 private constant _MAX_AMP_UPDATE_DAILY_RATE = 2;\\n\\n    // The amplification data structure is as follows:\\n    // [  64 bits |   64 bits  |  64 bits  |   64 bits   ]\\n    // [ end time | start time | end value | start value ]\\n    // |MSB                                           LSB|\\n\\n    uint256 private constant _AMP_START_VALUE_OFFSET = 0;\\n    uint256 private constant _AMP_END_VALUE_OFFSET = 64;\\n    uint256 private constant _AMP_START_TIME_OFFSET = 128;\\n    uint256 private constant _AMP_END_TIME_OFFSET = 192;\\n\\n    uint256 private constant _AMP_VALUE_BIT_LENGTH = 64;\\n    uint256 private constant _AMP_TIMESTAMP_BIT_LENGTH = 64;\\n\\n    bytes32 private _packedAmplificationData;\\n\\n    event AmpUpdateStarted(uint256 startValue, uint256 endValue, uint256 startTime, uint256 endTime);\\n    event AmpUpdateStopped(uint256 currentValue);\\n\\n    constructor(uint256 amplificationParameter) {\\n        _require(amplificationParameter >= StableMath._MIN_AMP, Errors.MIN_AMP);\\n        _require(amplificationParameter <= StableMath._MAX_AMP, Errors.MAX_AMP);\\n\\n        uint256 initialAmp = Math.mul(amplificationParameter, StableMath._AMP_PRECISION);\\n        _setAmplificationData(initialAmp);\\n    }\\n\\n    function getAmplificationParameter()\\n        external\\n        view\\n        returns (\\n            uint256 value,\\n            bool isUpdating,\\n            uint256 precision\\n        )\\n    {\\n        (value, isUpdating) = _getAmplificationParameter();\\n        precision = StableMath._AMP_PRECISION;\\n    }\\n\\n    // Return the current amp value, which will be an interpolation if there is an ongoing amp update.\\n    // Also return a flag indicating whether there is an ongoing update.\\n    function _getAmplificationParameter() internal view returns (uint256 value, bool isUpdating) {\\n        (uint256 startValue, uint256 endValue, uint256 startTime, uint256 endTime) = _getAmplificationData();\\n\\n        // Note that block.timestamp >= startTime, since startTime is set to the current time when an update starts\\n\\n        if (block.timestamp < endTime) {\\n            isUpdating = true;\\n\\n            // We can skip checked arithmetic as:\\n            //  - block.timestamp is always larger or equal to startTime\\n            //  - endTime is always larger than startTime\\n            //  - the value delta is bounded by the largest amplification parameter, which never causes the\\n            //    multiplication to overflow.\\n            // This also means that the following computation will never revert nor yield invalid results.\\n            if (endValue > startValue) {\\n                value = startValue + ((endValue - startValue) * (block.timestamp - startTime)) / (endTime - startTime);\\n            } else {\\n                value = startValue - ((startValue - endValue) * (block.timestamp - startTime)) / (endTime - startTime);\\n            }\\n        } else {\\n            isUpdating = false;\\n            value = endValue;\\n        }\\n    }\\n\\n    // Unpack and return all amplification-related parameters.\\n    function _getAmplificationData()\\n        private\\n        view\\n        returns (\\n            uint256 startValue,\\n            uint256 endValue,\\n            uint256 startTime,\\n            uint256 endTime\\n        )\\n    {\\n        startValue = _packedAmplificationData.decodeUint(_AMP_START_VALUE_OFFSET, _AMP_VALUE_BIT_LENGTH);\\n        endValue = _packedAmplificationData.decodeUint(_AMP_END_VALUE_OFFSET, _AMP_VALUE_BIT_LENGTH);\\n        startTime = _packedAmplificationData.decodeUint(_AMP_START_TIME_OFFSET, _AMP_TIMESTAMP_BIT_LENGTH);\\n        endTime = _packedAmplificationData.decodeUint(_AMP_END_TIME_OFFSET, _AMP_TIMESTAMP_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Begin changing the amplification parameter to `rawEndValue` over time. The value will change linearly until\\n     * `endTime` is reached, when it will be `rawEndValue`.\\n     *\\n     * NOTE: Internally, the amplification parameter is represented using higher precision. The values returned by\\n     * `getAmplificationParameter` have to be corrected to account for this when comparing to `rawEndValue`.\\n     */\\n    function startAmplificationParameterUpdate(uint256 rawEndValue, uint256 endTime) external authenticate {\\n        _require(rawEndValue >= StableMath._MIN_AMP, Errors.MIN_AMP);\\n        _require(rawEndValue <= StableMath._MAX_AMP, Errors.MAX_AMP);\\n\\n        uint256 duration = Math.sub(endTime, block.timestamp);\\n        _require(duration >= _MIN_UPDATE_TIME, Errors.AMP_END_TIME_TOO_CLOSE);\\n\\n        (uint256 currentValue, bool isUpdating) = _getAmplificationParameter();\\n        _require(!isUpdating, Errors.AMP_ONGOING_UPDATE);\\n\\n        uint256 endValue = Math.mul(rawEndValue, StableMath._AMP_PRECISION);\\n\\n        // daily rate = (endValue / currentValue) / duration * 1 day\\n        // We perform all multiplications first to not reduce precision, and round the division up as we want to avoid\\n        // large rates. Note that these are regular integer multiplications and divisions, not fixed point.\\n        uint256 dailyRate = endValue > currentValue\\n            ? Math.divUp(Math.mul(1 days, endValue), Math.mul(currentValue, duration))\\n            : Math.divUp(Math.mul(1 days, currentValue), Math.mul(endValue, duration));\\n        _require(dailyRate <= _MAX_AMP_UPDATE_DAILY_RATE, Errors.AMP_RATE_TOO_HIGH);\\n\\n        _setAmplificationData(currentValue, endValue, block.timestamp, endTime);\\n    }\\n\\n    /**\\n     * @dev Stops the amplification parameter change process, keeping the current value.\\n     */\\n    function stopAmplificationParameterUpdate() external authenticate {\\n        (uint256 currentValue, bool isUpdating) = _getAmplificationParameter();\\n        _require(isUpdating, Errors.AMP_NO_ONGOING_UPDATE);\\n\\n        _setAmplificationData(currentValue);\\n    }\\n\\n    function _setAmplificationData(uint256 value) private {\\n        _storeAmplificationData(value, value, block.timestamp, block.timestamp);\\n        emit AmpUpdateStopped(value);\\n    }\\n\\n    function _setAmplificationData(\\n        uint256 startValue,\\n        uint256 endValue,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) private {\\n        _storeAmplificationData(startValue, endValue, startTime, endTime);\\n        emit AmpUpdateStarted(startValue, endValue, startTime, endTime);\\n    }\\n\\n    function _storeAmplificationData(\\n        uint256 startValue,\\n        uint256 endValue,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) private {\\n        _packedAmplificationData =\\n            WordCodec.encodeUint(startValue, _AMP_START_VALUE_OFFSET, _AMP_VALUE_BIT_LENGTH) |\\n            WordCodec.encodeUint(endValue, _AMP_END_VALUE_OFFSET, _AMP_VALUE_BIT_LENGTH) |\\n            WordCodec.encodeUint(startTime, _AMP_START_TIME_OFFSET, _AMP_TIMESTAMP_BIT_LENGTH) |\\n            WordCodec.encodeUint(endTime, _AMP_END_TIME_OFFSET, _AMP_TIMESTAMP_BIT_LENGTH);\\n    }\\n\\n    // Permissioned functions\\n\\n    /**\\n     * @dev Overrides only owner action to allow setting the cache duration for the token rates\\n     */\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {\\n        return\\n            (actionId == getActionId(this.startAmplificationParameterUpdate.selector)) ||\\n            (actionId == getActionId(this.stopAmplificationParameterUpdate.selector)) ||\\n            super._isOwnerOnlyAction(actionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StableMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\n// These functions start with an underscore, as if they were part of a contract and not a library. At some point this\\n// should be fixed. Additionally, some variables have non mixed case names (e.g. P_D) that relate to the mathematical\\n// derivations.\\n// solhint-disable private-vars-leading-underscore, var-name-mixedcase\\n\\nlibrary StableMath {\\n    using FixedPoint for uint256;\\n\\n    uint256 internal constant _MIN_AMP = 1;\\n    uint256 internal constant _MAX_AMP = 5000;\\n    uint256 internal constant _AMP_PRECISION = 1e3;\\n\\n    uint256 internal constant _MAX_STABLE_TOKENS = 5;\\n\\n    // Note on unchecked arithmetic:\\n    // This contract performs a large number of additions, subtractions, multiplications and divisions, often inside\\n    // loops. Since many of these operations are gas-sensitive (as they happen e.g. during a swap), it is important to\\n    // not make any unnecessary checks. We rely on a set of invariants to avoid having to use checked arithmetic (the\\n    // Math library), including:\\n    //  - the number of tokens is bounded by _MAX_STABLE_TOKENS\\n    //  - the amplification parameter is bounded by _MAX_AMP * _AMP_PRECISION, which fits in 23 bits\\n    //  - the token balances are bounded by 2^112 (guaranteed by the Vault) times 1e18 (the maximum scaling factor),\\n    //    which fits in 172 bits\\n    //\\n    // This means e.g. we can safely multiply a balance by the amplification parameter without worrying about overflow.\\n\\n    // About swap fees on joins and exits:\\n    // Any join or exit that is not perfectly balanced (e.g. all single token joins or exits) is mathematically\\n    // equivalent to a perfectly balanced join or  exit followed by a series of swaps. Since these swaps would charge\\n    // swap fees, it follows that (some) joins and exits should as well.\\n    // On these operations, we split the token amounts in 'taxable' and 'non-taxable' portions, where the 'taxable' part\\n    // is the one to which swap fees are applied.\\n\\n    // Computes the invariant given the current balances, using the Newton-Raphson approximation.\\n    // The amplification parameter equals: A n^(n-1)\\n    // See: https://github.com/curvefi/curve-contract/blob/b0bbf77f8f93c9c5f4e415bce9cd71f0cdee960e/contracts/pool-templates/base/SwapTemplateBase.vy#L206\\n    // solhint-disable-previous-line max-line-length\\n    function _calculateInvariant(uint256 amplificationParameter, uint256[] memory balances)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        /**********************************************************************************************\\n        // invariant                                                                                 //\\n        // D = invariant                                                  D^(n+1)                    //\\n        // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\\n        // S = sum of balances                                             n^n P                     //\\n        // P = product of balances                                                                   //\\n        // n = number of tokens                                                                      //\\n        **********************************************************************************************/\\n\\n        // Always round down, to match Vyper's arithmetic (which always truncates).\\n\\n        uint256 sum = 0; // S in the Curve version\\n        uint256 numTokens = balances.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            sum = sum.add(balances[i]);\\n        }\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevInvariant; // Dprev in the Curve version\\n        uint256 invariant = sum; // D in the Curve version\\n        uint256 ampTimesTotal = amplificationParameter * numTokens; // Ann in the Curve version\\n\\n        for (uint256 i = 0; i < 255; i++) {\\n            uint256 D_P = invariant;\\n\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                // (D_P * invariant) / (balances[j] * numTokens)\\n                D_P = Math.divDown(Math.mul(D_P, invariant), Math.mul(balances[j], numTokens));\\n            }\\n\\n            prevInvariant = invariant;\\n\\n            invariant = Math.divDown(\\n                Math.mul(\\n                    // (ampTimesTotal * sum) / AMP_PRECISION + D_P * numTokens\\n                    (Math.divDown(Math.mul(ampTimesTotal, sum), _AMP_PRECISION).add(Math.mul(D_P, numTokens))),\\n                    invariant\\n                ),\\n                // ((ampTimesTotal - _AMP_PRECISION) * invariant) / _AMP_PRECISION + (numTokens + 1) * D_P\\n                (\\n                    Math.divDown(Math.mul((ampTimesTotal - _AMP_PRECISION), invariant), _AMP_PRECISION).add(\\n                        Math.mul((numTokens + 1), D_P)\\n                    )\\n                )\\n            );\\n\\n            if (invariant > prevInvariant) {\\n                if (invariant - prevInvariant <= 1) {\\n                    return invariant;\\n                }\\n            } else if (prevInvariant - invariant <= 1) {\\n                return invariant;\\n            }\\n        }\\n\\n        _revert(Errors.STABLE_INVARIANT_DIDNT_CONVERGE);\\n    }\\n\\n    // Computes how many tokens can be taken out of a pool if `tokenAmountIn` are sent, given the current balances.\\n    // The amplification parameter equals: A n^(n-1)\\n    function _calcOutGivenIn(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint256 tokenAmountIn,\\n        uint256 invariant\\n    ) internal pure returns (uint256) {\\n        /**************************************************************************************************************\\n        // outGivenIn token x for y - polynomial equation to solve                                                   //\\n        // ay = amount out to calculate                                                                              //\\n        // by = balance token out                                                                                    //\\n        // y = by - ay (finalBalanceOut)                                                                             //\\n        // D = invariant                                               D                     D^(n+1)                 //\\n        // A = amplification coefficient               y^2 + ( S - ----------  - D) * y -  ------------- = 0         //\\n        // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\\n        // S = sum of final balances but y                                                                           //\\n        // P = product of final balances but y                                                                       //\\n        **************************************************************************************************************/\\n\\n        // Amount out, so we round down overall.\\n        balances[tokenIndexIn] = balances[tokenIndexIn].add(tokenAmountIn);\\n\\n        uint256 finalBalanceOut = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amplificationParameter,\\n            balances,\\n            invariant,\\n            tokenIndexOut\\n        );\\n\\n        // No need to use checked arithmetic since `tokenAmountIn` was actually added to the same balance right before\\n        // calling `_getTokenBalanceGivenInvariantAndAllOtherBalances` which doesn't alter the balances array.\\n        balances[tokenIndexIn] = balances[tokenIndexIn] - tokenAmountIn;\\n\\n        return balances[tokenIndexOut].sub(finalBalanceOut).sub(1);\\n    }\\n\\n    // Computes how many tokens must be sent to a pool if `tokenAmountOut` are sent given the\\n    // current balances, using the Newton-Raphson approximation.\\n    // The amplification parameter equals: A n^(n-1)\\n    function _calcInGivenOut(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint256 tokenAmountOut,\\n        uint256 invariant\\n    ) internal pure returns (uint256) {\\n        /**************************************************************************************************************\\n        // inGivenOut token x for y - polynomial equation to solve                                                   //\\n        // ax = amount in to calculate                                                                               //\\n        // bx = balance token in                                                                                     //\\n        // x = bx + ax (finalBalanceIn)                                                                              //\\n        // D = invariant                                                D                     D^(n+1)                //\\n        // A = amplification coefficient               x^2 + ( S - ----------  - D) * x -  ------------- = 0         //\\n        // n = number of tokens                                     (A * n^n)               A * n^2n * P             //\\n        // S = sum of final balances but x                                                                           //\\n        // P = product of final balances but x                                                                       //\\n        **************************************************************************************************************/\\n\\n        // Amount in, so we round up overall.\\n        balances[tokenIndexOut] = balances[tokenIndexOut].sub(tokenAmountOut);\\n\\n        uint256 finalBalanceIn = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amplificationParameter,\\n            balances,\\n            invariant,\\n            tokenIndexIn\\n        );\\n\\n        // No need to use checked arithmetic since `tokenAmountOut` was actually subtracted from the same balance right\\n        // before calling `_getTokenBalanceGivenInvariantAndAllOtherBalances` which doesn't alter the balances array.\\n        balances[tokenIndexOut] = balances[tokenIndexOut] + tokenAmountOut;\\n\\n        return finalBalanceIn.sub(balances[tokenIndexIn]).add(1);\\n    }\\n\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 currentInvariant,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // BPT out, so we round down overall.\\n\\n        // First loop calculates the sum of all token balances, which will be used to calculate\\n        // the current weights of each token, relative to this sum\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // Calculate the weighted balance ratio without considering fees\\n        uint256[] memory balanceRatiosWithFee = new uint256[](amountsIn.length);\\n        // The weighted sum of token balance ratios with fee\\n        uint256 invariantRatioWithFees = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 currentWeight = balances[i].divDown(sumBalances);\\n            balanceRatiosWithFee[i] = balances[i].add(amountsIn[i]).divDown(balances[i]);\\n            invariantRatioWithFees = invariantRatioWithFees.add(balanceRatiosWithFee[i].mulDown(currentWeight));\\n        }\\n\\n        // Second loop calculates new amounts in, taking into account the fee on the percentage excess\\n        uint256[] memory newBalances = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 amountInWithoutFee;\\n\\n            // Check if the balance ratio is greater than the ideal ratio to charge fees or not\\n            if (balanceRatiosWithFee[i] > invariantRatioWithFees) {\\n                uint256 nonTaxableAmount = balances[i].mulDown(invariantRatioWithFees.sub(FixedPoint.ONE));\\n                uint256 taxableAmount = amountsIn[i].sub(nonTaxableAmount);\\n                // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%\\n                amountInWithoutFee = nonTaxableAmount.add(taxableAmount.mulDown(FixedPoint.ONE - swapFeePercentage));\\n            } else {\\n                amountInWithoutFee = amountsIn[i];\\n            }\\n\\n            newBalances[i] = balances[i].add(amountInWithoutFee);\\n        }\\n\\n        uint256 newInvariant = _calculateInvariant(amp, newBalances);\\n        uint256 invariantRatio = newInvariant.divDown(currentInvariant);\\n\\n        // If the invariant didn't increase for any reason, we simply don't mint BPT\\n        if (invariantRatio > FixedPoint.ONE) {\\n            return bptTotalSupply.mulDown(invariantRatio - FixedPoint.ONE);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _calcTokenInGivenExactBptOut(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256 tokenIndex,\\n        uint256 bptAmountOut,\\n        uint256 bptTotalSupply,\\n        uint256 currentInvariant,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // Token in, so we round up overall.\\n\\n        uint256 newInvariant = bptTotalSupply.add(bptAmountOut).divUp(bptTotalSupply).mulUp(currentInvariant);\\n\\n        // Calculate amount in without fee.\\n        uint256 newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amp,\\n            balances,\\n            newInvariant,\\n            tokenIndex\\n        );\\n        uint256 amountInWithoutFee = newBalanceTokenIndex.sub(balances[tokenIndex]);\\n\\n        // First calculate the sum of all token balances, which will be used to calculate\\n        // the current weight of each token\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees\\n        // accordingly.\\n        uint256 currentWeight = balances[tokenIndex].divDown(sumBalances);\\n        uint256 taxablePercentage = currentWeight.complement();\\n        uint256 taxableAmount = amountInWithoutFee.mulUp(taxablePercentage);\\n        uint256 nonTaxableAmount = amountInWithoutFee.sub(taxableAmount);\\n\\n        // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%\\n        return nonTaxableAmount.add(taxableAmount.divUp(FixedPoint.ONE - swapFeePercentage));\\n    }\\n\\n    /*\\n    Flow of calculations:\\n    amountsTokenOut -> amountsOutProportional ->\\n    amountOutPercentageExcess -> amountOutBeforeFee -> newInvariant -> amountBPTIn\\n    */\\n    function _calcBptInGivenExactTokensOut(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256[] memory amountsOut,\\n        uint256 bptTotalSupply,\\n        uint256 currentInvariant,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // BPT in, so we round up overall.\\n\\n        // First loop calculates the sum of all token balances, which will be used to calculate\\n        // the current weights of each token relative to this sum\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // Calculate the weighted balance ratio without considering fees\\n        uint256[] memory balanceRatiosWithoutFee = new uint256[](amountsOut.length);\\n        uint256 invariantRatioWithoutFees = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 currentWeight = balances[i].divUp(sumBalances);\\n            balanceRatiosWithoutFee[i] = balances[i].sub(amountsOut[i]).divUp(balances[i]);\\n            invariantRatioWithoutFees = invariantRatioWithoutFees.add(balanceRatiosWithoutFee[i].mulUp(currentWeight));\\n        }\\n\\n        // Second loop calculates new amounts in, taking into account the fee on the percentage excess\\n        uint256[] memory newBalances = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\\n            // 'token out'. This results in slightly larger price impact.\\n\\n            uint256 amountOutWithFee;\\n            if (invariantRatioWithoutFees > balanceRatiosWithoutFee[i]) {\\n                uint256 nonTaxableAmount = balances[i].mulDown(invariantRatioWithoutFees.complement());\\n                uint256 taxableAmount = amountsOut[i].sub(nonTaxableAmount);\\n                // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%\\n                amountOutWithFee = nonTaxableAmount.add(taxableAmount.divUp(FixedPoint.ONE - swapFeePercentage));\\n            } else {\\n                amountOutWithFee = amountsOut[i];\\n            }\\n\\n            newBalances[i] = balances[i].sub(amountOutWithFee);\\n        }\\n\\n        uint256 newInvariant = _calculateInvariant(amp, newBalances);\\n        uint256 invariantRatio = newInvariant.divDown(currentInvariant);\\n\\n        // return amountBPTIn\\n        return bptTotalSupply.mulUp(invariantRatio.complement());\\n    }\\n\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256 tokenIndex,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 currentInvariant,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // Token out, so we round down overall.\\n\\n        uint256 newInvariant = bptTotalSupply.sub(bptAmountIn).divUp(bptTotalSupply).mulUp(currentInvariant);\\n\\n        // Calculate amount out without fee\\n        uint256 newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amp,\\n            balances,\\n            newInvariant,\\n            tokenIndex\\n        );\\n        uint256 amountOutWithoutFee = balances[tokenIndex].sub(newBalanceTokenIndex);\\n\\n        // First calculate the sum of all token balances, which will be used to calculate\\n        // the current weight of each token\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\\n        // in swap fees.\\n        uint256 currentWeight = balances[tokenIndex].divDown(sumBalances);\\n        uint256 taxablePercentage = currentWeight.complement();\\n\\n        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\\n        // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\\n        uint256 taxableAmount = amountOutWithoutFee.mulUp(taxablePercentage);\\n        uint256 nonTaxableAmount = amountOutWithoutFee.sub(taxableAmount);\\n\\n        // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%\\n        return nonTaxableAmount.add(taxableAmount.mulDown(FixedPoint.ONE - swapFeePercentage));\\n    }\\n\\n    // This function calculates the balance of a given token (tokenIndex)\\n    // given all the other balances and the invariant\\n    function _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 invariant,\\n        uint256 tokenIndex\\n    ) internal pure returns (uint256) {\\n        // Rounds result up overall\\n\\n        uint256 ampTimesTotal = amplificationParameter * balances.length;\\n        uint256 sum = balances[0];\\n        uint256 P_D = balances[0] * balances.length;\\n        for (uint256 j = 1; j < balances.length; j++) {\\n            P_D = Math.divDown(Math.mul(Math.mul(P_D, balances[j]), balances.length), invariant);\\n            sum = sum.add(balances[j]);\\n        }\\n        // No need to use safe math, based on the loop above `sum` is greater than or equal to `balances[tokenIndex]`\\n        sum = sum - balances[tokenIndex];\\n\\n        uint256 inv2 = Math.mul(invariant, invariant);\\n        // We remove the balance from c by multiplying it\\n        uint256 c = Math.mul(\\n            Math.mul(Math.divUp(inv2, Math.mul(ampTimesTotal, P_D)), _AMP_PRECISION),\\n            balances[tokenIndex]\\n        );\\n        uint256 b = sum.add(Math.mul(Math.divDown(invariant, ampTimesTotal), _AMP_PRECISION));\\n\\n        // We iterate to find the balance\\n        uint256 prevTokenBalance = 0;\\n        // We multiply the first iteration outside the loop with the invariant to set the value of the\\n        // initial approximation.\\n        uint256 tokenBalance = Math.divUp(inv2.add(c), invariant.add(b));\\n\\n        for (uint256 i = 0; i < 255; i++) {\\n            prevTokenBalance = tokenBalance;\\n\\n            tokenBalance = Math.divUp(\\n                Math.mul(tokenBalance, tokenBalance).add(c),\\n                Math.mul(tokenBalance, 2).add(b).sub(invariant)\\n            );\\n\\n            if (tokenBalance > prevTokenBalance) {\\n                if (tokenBalance - prevTokenBalance <= 1) {\\n                    return tokenBalance;\\n                }\\n            } else if (prevTokenBalance - tokenBalance <= 1) {\\n                return tokenBalance;\\n            }\\n        }\\n\\n        _revert(Errors.STABLE_GET_BALANCE_DIDNT_CONVERGE);\\n    }\\n\\n    function _computeProportionalAmountsIn(\\n        uint256[] memory balances,\\n        uint256 bptAmountOut,\\n        uint256 totalBPT\\n    ) internal pure returns (uint256[] memory) {\\n        /************************************************************************************\\n        // tokensInForExactBptOut                                                          //\\n        // (per token)                                                                     //\\n        // aI = amountIn                   /   bptOut   \\\\                                  //\\n        // b = balance           aI = b * | ------------ |                                 //\\n        // bptOut = bptAmountOut           \\\\  totalBPT  /                                  //\\n        // bpt = totalBPT                                                                  //\\n        ************************************************************************************/\\n\\n        // Tokens in, so we round up overall.\\n        uint256 bptRatio = bptAmountOut.divUp(totalBPT);\\n\\n        uint256[] memory amountsIn = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsIn[i] = balances[i].mulUp(bptRatio);\\n        }\\n\\n        return amountsIn;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        _require(x >> 255 == 0, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        _require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev IPools with the General specialization setting should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\n * grant to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IGeneralPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/BasePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\nimport \\\"./BalancerPoolToken.sol\\\";\\nimport \\\"./BasePoolAuthorization.sol\\\";\\nimport \\\"./RecoveryMode.sol\\\";\\n\\n// solhint-disable max-states-count\\n\\n/**\\n * @notice Reference implementation for the base layer of a Pool contract.\\n * @dev Reference implementation for the base layer of a Pool contract that manages a single Pool with optional\\n * Asset Managers, an admin-controlled swap fee percentage, and an emergency pause mechanism.\\n *\\n * This Pool pays protocol fees by minting BPT directly to the ProtocolFeeCollector instead of using the\\n * `dueProtocolFees` return value. This results in the underlying tokens continuing to provide liquidity\\n * for traders, while still keeping gas usage to a minimum since only a single token (the BPT) is transferred.\\n *\\n * Note that neither swap fees nor the pause mechanism are used by this contract. They are passed through so that\\n * derived contracts can use them via the `_addSwapFeeAmount` and `_subtractSwapFeeAmount` functions, and the\\n * `whenNotPaused` modifier.\\n *\\n * No admin permissions are checked here: instead, this contract delegates that to the Vault's own Authorizer.\\n *\\n * Because this contract doesn't implement the swap hooks, derived contracts should generally inherit from\\n * BaseGeneralPool or BaseMinimalSwapInfoPool. Otherwise, subclasses must inherit from the corresponding interfaces\\n * and implement the swap callbacks themselves.\\n */\\nabstract contract BasePool is\\n    IBasePool,\\n    IControlledPool,\\n    BasePoolAuthorization,\\n    BalancerPoolToken,\\n    TemporarilyPausable,\\n    RecoveryMode\\n{\\n    using WordCodec for bytes32;\\n    using FixedPoint for uint256;\\n    using BasePoolUserData for bytes;\\n\\n    uint256 private constant _MIN_TOKENS = 2;\\n\\n    uint256 private constant _DEFAULT_MINIMUM_BPT = 1e6;\\n\\n    // 1e18 corresponds to 1.0, or a 100% fee\\n    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%\\n    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10% - this fits in 64 bits\\n\\n    // `_miscData` is a storage slot that can be used to store unrelated pieces of information. All pools store the\\n    // recovery mode flag and swap fee percentage, but `miscData` can be extended to store more pieces of information.\\n    // The most signficant bit is reserved for the recovery mode flag, and the swap fee percentage is stored in\\n    // the next most significant 63 bits, leaving the remaining 192 bits free to store any other information derived\\n    // pools might need.\\n    //\\n    // This slot is preferred for gas-sensitive operations as it is read in all joins, swaps and exits,\\n    // and therefore warm.\\n\\n    // [ recovery | swap  fee | available ]\\n    // [   1 bit  |  63 bits  |  192 bits ]\\n    // [ MSB                          LSB ]\\n    bytes32 private _miscData;\\n\\n    uint256 private constant _SWAP_FEE_PERCENTAGE_OFFSET = 192;\\n    uint256 private constant _RECOVERY_MODE_BIT_OFFSET = 255;\\n\\n    // A fee can never be larger than FixedPoint.ONE, which fits in 60 bits, so 63 is more than enough.\\n    uint256 private constant _SWAP_FEE_PERCENTAGE_BIT_LENGTH = 63;\\n\\n    bytes32 private immutable _poolId;\\n\\n    // Note that this value is immutable in the Vault, so we can make it immutable here and save gas\\n    IProtocolFeesCollector private immutable _protocolFeesCollector;\\n\\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\\n\\n    constructor(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers,\\n        uint256 swapFeePercentage,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner\\n    )\\n        // Base Pools are expected to be deployed using factories. By using the factory address as the action\\n        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for\\n        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in\\n        // any Pool created by the same factory), while still making action identifiers unique among different factories\\n        // if the selectors match, preventing accidental errors.\\n        Authentication(bytes32(uint256(msg.sender)))\\n        BalancerPoolToken(name, symbol, vault)\\n        BasePoolAuthorization(owner)\\n        TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration)\\n    {\\n        _require(tokens.length >= _MIN_TOKENS, Errors.MIN_TOKENS);\\n        _require(tokens.length <= _getMaxTokens(), Errors.MAX_TOKENS);\\n\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        // Also, since these Pools will register tokens only once, we can ensure the Pool tokens will follow the same\\n        // order. We rely on this property to make Pools simpler to write, as it lets us assume that the\\n        // order of token-specific parameters (such as token weights) will not change.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        _setSwapFeePercentage(swapFeePercentage);\\n\\n        bytes32 poolId = vault.registerPool(specialization);\\n\\n        vault.registerTokens(poolId, tokens, assetManagers);\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n        _poolId = poolId;\\n        _protocolFeesCollector = vault.getProtocolFeesCollector();\\n    }\\n\\n    // Getters / Setters\\n\\n    /**\\n     * @notice Return the pool id.\\n     */\\n    function getPoolId() public view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function _getTotalTokens() internal view virtual returns (uint256);\\n\\n    function _getMaxTokens() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns the minimum BPT supply. This amount is minted to the zero address during initialization, effectively\\n     * locking it.\\n     *\\n     * This is useful to make sure Pool initialization happens only once, but derived Pools can change this value (even\\n     * to zero) by overriding this function.\\n     */\\n    function _getMinimumBpt() internal pure virtual returns (uint256) {\\n        return _DEFAULT_MINIMUM_BPT;\\n    }\\n\\n    /**\\n     * @notice Return the current value of the swap fee percentage.\\n     * @dev This is stored in `_miscData`.\\n     */\\n    function getSwapFeePercentage() public view virtual override returns (uint256) {\\n        return _miscData.decodeUint(_SWAP_FEE_PERCENTAGE_OFFSET, _SWAP_FEE_PERCENTAGE_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @notice Return the ProtocolFeesCollector contract.\\n     * @dev This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)\\n     */\\n    function getProtocolFeesCollector() public view returns (IProtocolFeesCollector) {\\n        return _protocolFeesCollector;\\n    }\\n\\n    /**\\n     * @notice Set the swap fee percentage.\\n     * @dev This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the\\n     * bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.\\n     */\\n    function setSwapFeePercentage(uint256 swapFeePercentage) public virtual override authenticate whenNotPaused {\\n        _setSwapFeePercentage(swapFeePercentage);\\n    }\\n\\n    function _setSwapFeePercentage(uint256 swapFeePercentage) internal virtual {\\n        _require(swapFeePercentage >= _getMinSwapFeePercentage(), Errors.MIN_SWAP_FEE_PERCENTAGE);\\n        _require(swapFeePercentage <= _getMaxSwapFeePercentage(), Errors.MAX_SWAP_FEE_PERCENTAGE);\\n\\n        _miscData = _miscData.insertUint(\\n            swapFeePercentage,\\n            _SWAP_FEE_PERCENTAGE_OFFSET,\\n            _SWAP_FEE_PERCENTAGE_BIT_LENGTH\\n        );\\n\\n        emit SwapFeePercentageChanged(swapFeePercentage);\\n    }\\n\\n    function _getMinSwapFeePercentage() internal pure virtual returns (uint256) {\\n        return _MIN_SWAP_FEE_PERCENTAGE;\\n    }\\n\\n    function _getMaxSwapFeePercentage() internal pure virtual returns (uint256) {\\n        return _MAX_SWAP_FEE_PERCENTAGE;\\n    }\\n\\n    /**\\n     * @notice Returns whether the pool is in Recovery Mode.\\n     */\\n    function inRecoveryMode() public view override returns (bool) {\\n        return _miscData.decodeBool(_RECOVERY_MODE_BIT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Sets the recoveryMode state, and emits the corresponding event.\\n     */\\n    function _setRecoveryMode(bool enabled) internal virtual override {\\n        _miscData = _miscData.insertBool(enabled, _RECOVERY_MODE_BIT_OFFSET);\\n\\n        emit RecoveryModeStateChanged(enabled);\\n\\n        // Some pools need to update their state when leaving recovery mode to ensure proper functioning of the Pool.\\n        // We do not allow an `_onEnableRecoveryMode()` hook as this may jeopardize the ability to enable Recovery mode.\\n        if (!enabled) _onDisableRecoveryMode();\\n    }\\n\\n    /**\\n     * @dev Performs any necessary actions on the disabling of Recovery Mode.\\n     * This is usually to reset any fee collection mechanisms to ensure that they operate correctly going forward.\\n     */\\n    function _onDisableRecoveryMode() internal virtual {}\\n\\n    /**\\n     * @notice Set the asset manager parameters for the given token.\\n     * @dev This is a permissioned function, unavailable when the pool is paused.\\n     * The details of the configuration data are set by each Asset Manager. (For an example, see\\n     * `RewardsAssetManager`.)\\n     */\\n    function setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig)\\n        public\\n        virtual\\n        override\\n        authenticate\\n        whenNotPaused\\n    {\\n        _setAssetManagerPoolConfig(token, poolConfig);\\n    }\\n\\n    function _setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig) private {\\n        bytes32 poolId = getPoolId();\\n        (, , , address assetManager) = getVault().getPoolTokenInfo(poolId, token);\\n\\n        IAssetManager(assetManager).setConfig(poolId, poolConfig);\\n    }\\n\\n    /**\\n     * @notice Pause the pool: an emergency action which disables all pool functions.\\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\\n     * deployment (see `TemporarilyPausable`).\\n     */\\n    function pause() external authenticate {\\n        _setPaused(true);\\n    }\\n\\n    /**\\n     * @notice Reverse a `pause` operation, and restore a pool to normal functionality.\\n     * @dev This is a permissioned function that will only work on a paused pool within the Buffer Period set during\\n     * pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause\\n     * after the Buffer Period expires.\\n     */\\n    function unpause() external authenticate {\\n        _setPaused(false);\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {\\n        return\\n            (actionId == getActionId(this.setSwapFeePercentage.selector)) ||\\n            (actionId == getActionId(this.setAssetManagerPoolConfig.selector)) ||\\n            super._isOwnerOnlyAction(actionId);\\n    }\\n\\n    function _getMiscData() internal view returns (bytes32) {\\n        return _miscData;\\n    }\\n\\n    /**\\n     * @dev Inserts data into the least-significant 192 bits of the misc data storage slot.\\n     * Note that the remaining 64 bits are used for the swap fee percentage and cannot be overloaded.\\n     */\\n    function _setMiscData(bytes32 newData) internal {\\n        _miscData = _miscData.insertBits192(newData, 0);\\n    }\\n\\n    // Join / Exit Hooks\\n\\n    modifier onlyVault(bytes32 poolId) {\\n        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\n        _require(poolId == getPoolId(), Errors.INVALID_POOL_ID);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Vault hook for adding liquidity to a pool (including the first time, \\\"initializing\\\" the pool).\\n     * @dev This function can only be called from the Vault, from `joinPool`.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        _beforeSwapJoinExit();\\n\\n        uint256[] memory scalingFactors = _scalingFactors();\\n\\n        if (totalSupply() == 0) {\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(\\n                poolId,\\n                sender,\\n                recipient,\\n                scalingFactors,\\n                userData\\n            );\\n\\n            // On initialization, we lock _getMinimumBpt() by minting it for the zero address. This BPT acts as a\\n            // minimum as it will never be burned, which reduces potential issues with rounding, and also prevents the\\n            // Pool from ever being fully drained.\\n            _require(bptAmountOut >= _getMinimumBpt(), Errors.MINIMUM_BPT);\\n            _mintPoolTokens(address(0), _getMinimumBpt());\\n            _mintPoolTokens(recipient, bptAmountOut - _getMinimumBpt());\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n\\n            return (amountsIn, new uint256[](balances.length));\\n        } else {\\n            _upscaleArray(balances, scalingFactors);\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onJoinPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode\\n                scalingFactors,\\n                userData\\n            );\\n\\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\\n\\n            _mintPoolTokens(recipient, bptAmountOut);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n\\n            // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\\n            return (amountsIn, new uint256[](balances.length));\\n        }\\n    }\\n\\n    /**\\n     * @notice Vault hook for removing liquidity from a pool.\\n     * @dev This function can only be called from the Vault, from `exitPool`.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory amountsOut;\\n        uint256 bptAmountIn;\\n\\n        // When a user calls `exitPool`, this is the first point of entry from the Vault.\\n        // We first check whether this is a Recovery Mode exit - if so, we proceed using this special lightweight exit\\n        // mechanism which avoids computing any complex values, interacting with external contracts, etc., and generally\\n        // should always work, even if the Pool's mathematics or a dependency break down.\\n        if (userData.isRecoveryModeExitKind()) {\\n            // This exit kind is only available in Recovery Mode.\\n            _ensureInRecoveryMode();\\n\\n            // Note that we don't upscale balances nor downscale amountsOut - we don't care about scaling factors during\\n            // a recovery mode exit.\\n            (bptAmountIn, amountsOut) = _doRecoveryModeExit(balances, totalSupply(), userData);\\n        } else {\\n            // Note that we only call this if we're not in a recovery mode exit.\\n            _beforeSwapJoinExit();\\n\\n            uint256[] memory scalingFactors = _scalingFactors();\\n            _upscaleArray(balances, scalingFactors);\\n\\n            (bptAmountIn, amountsOut) = _onExitPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode\\n                scalingFactors,\\n                userData\\n            );\\n\\n            // amountsOut are amounts exiting the Pool, so we round down.\\n            _downscaleDownArray(amountsOut, scalingFactors);\\n        }\\n\\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\\n\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\\n        return (amountsOut, new uint256[](balances.length));\\n    }\\n\\n    // Query functions\\n\\n    /**\\n     * @notice \\\"Dry run\\\" `onJoinPool`.\\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override returns (uint256 bptOut, uint256[] memory amountsIn) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\n\\n        _queryAction(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage,\\n            userData,\\n            _onJoinPool,\\n            _downscaleUpArray\\n        );\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptOut, amountsIn);\\n    }\\n\\n    /**\\n     * @notice \\\"Dry run\\\" `onExitPool`.\\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override returns (uint256 bptIn, uint256[] memory amountsOut) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\n\\n        _queryAction(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage,\\n            userData,\\n            _onExitPool,\\n            _downscaleDownArray\\n        );\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptIn, amountsOut);\\n    }\\n\\n    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are\\n    // upscaled.\\n\\n    /**\\n     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.\\n     *\\n     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.\\n     *\\n     * Minted BPT will be sent to `recipient`, except for _getMinimumBpt(), which will be deducted from this amount and\\n     * sent to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP\\n     * from ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire\\n     * Pool's lifetime.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     */\\n    function _onInitializePool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\n\\n    /**\\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\\n     *\\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\\n     * tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * Minted BPT will be sent to `recipient`.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\n\\n    /**\\n     * @dev Called whenever the Pool is exited.\\n     *\\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\\n     * the number of tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * BPT will be burnt from `sender`.\\n     *\\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\\n     * (rounding down) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountIn, uint256[] memory amountsOut);\\n\\n    /**\\n     * @dev Called at the very beginning of swaps, joins and exits, even before the scaling factors are read. Derived\\n     * contracts can extend this implementation to perform any state-changing operations they might need (including e.g.\\n     * updating the scaling factors),\\n     *\\n     * The only scenario in which this function is not called is during a recovery mode exit. This makes it safe to\\n     * perform non-trivial computations or interact with external dependencies here, as recovery mode will not be\\n     * affected.\\n     *\\n     * Since this contract does not implement swaps, derived contracts must also make sure this function is called on\\n     * swap handlers.\\n     */\\n    function _beforeSwapJoinExit() internal virtual {\\n        // All joins, exits and swaps are disabled (except recovery mode exits).\\n        _ensureNotPaused();\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev Pays protocol fees by minting `bptAmount` to the Protocol Fee Collector.\\n     */\\n    function _payProtocolFees(uint256 bptAmount) internal {\\n        _mintPoolTokens(address(getProtocolFeesCollector()), bptAmount);\\n    }\\n\\n    /**\\n     * @dev Adds swap fee amount to `amount`, returning a higher value.\\n     */\\n    function _addSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\n        // This returns amount + fee amount, so we round up (favoring a higher fee amount).\\n        return amount.divUp(getSwapFeePercentage().complement());\\n    }\\n\\n    /**\\n     * @dev Subtracts swap fee amount from `amount`, returning a lower value.\\n     */\\n    function _subtractSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\n        // This returns amount - fee amount, so we round up (favoring a higher fee amount).\\n        uint256 feeAmount = amount.mulUp(getSwapFeePercentage());\\n        return amount.sub(feeAmount);\\n    }\\n\\n    // Scaling\\n\\n    /**\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\n     * it had 18 decimals.\\n     */\\n    function _computeScalingFactor(IERC20 token) internal view returns (uint256) {\\n        if (address(token) == address(this)) {\\n            return FixedPoint.ONE;\\n        }\\n\\n        // Tokens that don't implement the `decimals` method are not supported.\\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n        // Tokens with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = Math.sub(18, tokenDecimals);\\n        return FixedPoint.ONE * 10**decimalsDifference;\\n    }\\n\\n    /**\\n     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the\\n     * Pool.\\n     *\\n     * All scaling factors are fixed-point values with 18 decimals, to allow for this function to be overridden by\\n     * derived contracts that need to apply further scaling, making these factors potentially non-integer.\\n     *\\n     * The largest 'base' scaling factor (i.e. in tokens with less than 18 decimals) is 10**18, which in fixed-point is\\n     * 10**36. This value can be multiplied with a 112 bit Vault balance with no overflow by a factor of ~1e7, making\\n     * even relatively 'large' factors safe to use.\\n     *\\n     * The 1e7 figure is the result of 2**256 / (1e18 * 1e18 * 2**112).\\n     */\\n    function _scalingFactor(IERC20 token) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Same as `_scalingFactor()`, except for all registered tokens (in the same order as registered). The Vault\\n     * will always pass balances in this order when calling any of the Pool hooks.\\n     */\\n    function _scalingFactors() internal view virtual returns (uint256[] memory);\\n\\n    function getScalingFactors() external view override returns (uint256[] memory) {\\n        return _scalingFactors();\\n    }\\n\\n    /**\\n     * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\\n     * scaling or not.\\n     */\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        // Upscale rounding wouldn't necessarily always go in the same direction: in a swap for example the balance of\\n        // token in should be rounded up, and that of token out rounded down. This is the only place where we round in\\n        // the same direction for all amounts, as the impact of this rounding is expected to be minimal (and there's no\\n        // rounding error unless `_scalingFactor()` is overriden).\\n        return FixedPoint.mulDown(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\\n     * the `amounts` array.\\n     */\\n    function _upscaleArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal pure {\\n        uint256 length = amounts.length;\\n        InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            amounts[i] = FixedPoint.mulDown(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded down.\\n     */\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return FixedPoint.divDown(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\\n     * *mutates* the `amounts` array.\\n     */\\n    function _downscaleDownArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal pure {\\n        uint256 length = amounts.length;\\n        InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            amounts[i] = FixedPoint.divDown(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded up.\\n     */\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return FixedPoint.divUp(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_downscaleUp`, but for an entire array. This function does not return anything, but instead\\n     * *mutates* the `amounts` array.\\n     */\\n    function _downscaleUpArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal pure {\\n        uint256 length = amounts.length;\\n        InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            amounts[i] = FixedPoint.divUp(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\n        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which\\n        // accounts can call permissioned functions: for example, to perform emergency pauses.\\n        // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under\\n        // Governance control.\\n        return getVault().getAuthorizer();\\n    }\\n\\n    function _queryAction(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        function(bytes32, address, address, uint256[] memory, uint256, uint256, uint256[] memory, bytes memory)\\n            internal\\n            returns (uint256, uint256[] memory) _action,\\n        function(uint256[] memory, uint256[] memory) internal view _downscaleArray\\n    ) private {\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\n        // explanation.\\n\\n        if (msg.sender != address(this)) {\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\n            // the preceding if statement will be executed instead.\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = address(this).call(msg.data);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\n                switch success\\n                    case 0 {\\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\n                        // stored there as we take full control of the execution and then immediately return.\\n\\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\n                        // there was another revert reason and we should forward it.\\n                        returndatacopy(0, 0, 0x04)\\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n\\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\n                        if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\n                            returndatacopy(0, 0, returndatasize())\\n                            revert(0, returndatasize())\\n                        }\\n\\n                        // The returndata contains the signature, followed by the raw memory representation of the\\n                        // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\n                        // representation of these.\\n                        // An ABI-encoded response will include one additional field to indicate the starting offset of\\n                        // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\n                        // returndata.\\n                        //\\n                        // In returndata:\\n                        // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\n                        //\\n                        // We now need to return (ABI-encoded values):\\n                        // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\n\\n                        // We copy 32 bytes for the `bptAmount` from returndata into memory.\\n                        // Note that we skip the first 4 bytes for the error signature\\n                        returndatacopy(0, 0x04, 32)\\n\\n                        // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\n                        // the initial 64 bytes.\\n                        mstore(0x20, 64)\\n\\n                        // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\n                        // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\n                        // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\n                        returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\n\\n                        // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\n                        // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\n                        // error signature.\\n                        return(0, add(returndatasize(), 28))\\n                    }\\n                    default {\\n                        // This call should always revert, but we fail nonetheless if that didn't happen\\n                        invalid()\\n                    }\\n            }\\n        } else {\\n            // This imitates the relevant parts of the bodies of onJoin and onExit. Since they're not virtual, we know\\n            // that their implementations will match this regardless of what derived contracts might do.\\n\\n            _beforeSwapJoinExit();\\n\\n            uint256[] memory scalingFactors = _scalingFactors();\\n            _upscaleArray(balances, scalingFactors);\\n\\n            (uint256 bptAmount, uint256[] memory tokenAmounts) = _action(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                protocolSwapFeePercentage,\\n                scalingFactors,\\n                userData\\n            );\\n\\n            _downscaleArray(tokenAmounts, scalingFactors);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\n                let size := mul(mload(tokenAmounts), 32)\\n\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\n                // will be at least one available slot due to how the memory scratch space works.\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\n                let start := sub(tokenAmounts, 0x20)\\n                mstore(start, bptAmount)\\n\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\n                // We use the previous slot to `bptAmount`.\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\n                start := sub(start, 0x04)\\n\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\n                // the `bptAmount`, the array 's length, and the error signature.\\n                revert(start, add(size, 68))\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).\\n     */\\n    function getPoolId() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a\\n     * 10% swap fee.\\n     */\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically\\n     * not relevant for outside parties, but which might be useful for some types of Pools.\\n     */\\n    function getScalingFactors() external view returns (uint256[] memory);\\n\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IAssetManager {\\n    /**\\n     * @notice Emitted when asset manager is rebalanced\\n     */\\n    event Rebalance(bytes32 poolId);\\n\\n    /**\\n     * @notice Sets the config\\n     */\\n    function setConfig(bytes32 poolId, bytes calldata config) external;\\n\\n    /**\\n     * Note: No function to read the asset manager config is included in IAssetManager\\n     * as the signature is expected to vary between asset manager implementations\\n     */\\n\\n    /**\\n     * @notice Returns the asset manager's token\\n     */\\n    function getToken() external view returns (IERC20);\\n\\n    /**\\n     * @return the current assets under management of this asset manager\\n     */\\n    function getAUM(bytes32 poolId) external view returns (uint256);\\n\\n    /**\\n     * @return poolCash - The up-to-date cash balance of the pool\\n     * @return poolManaged - The up-to-date managed balance of the pool\\n     */\\n    function getPoolBalances(bytes32 poolId) external view returns (uint256 poolCash, uint256 poolManaged);\\n\\n    /**\\n     * @return The difference in tokens between the target investment\\n     * and the currently invested amount (i.e. the amount that can be invested)\\n     */\\n    function maxInvestableBalance(bytes32 poolId) external view returns (int256);\\n\\n    /**\\n     * @notice Updates the Vault on the value of the pool's investment returns\\n     */\\n    function updateBalanceOfPool(bytes32 poolId) external;\\n\\n    /**\\n     * @notice Determines whether the pool should rebalance given the provided balances\\n     */\\n    function shouldRebalance(uint256 cash, uint256 managed) external view returns (bool);\\n\\n    /**\\n     * @notice Rebalances funds between the pool and the asset manager to maintain target investment percentage.\\n     * @param poolId - the poolId of the pool to be rebalanced\\n     * @param force - a boolean representing whether a rebalance should be forced even when the pool is near balance\\n     */\\n    function rebalance(bytes32 poolId, bool force) external;\\n\\n    /**\\n     * @notice allows an authorized rebalancer to remove capital to facilitate large withdrawals\\n     * @param poolId - the poolId of the pool to withdraw funds back to\\n     * @param amount - the amount of tokens to withdraw back to the pool\\n     */\\n    function capitalOut(bytes32 poolId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IControlledPool {\\n    function setSwapFeePercentage(uint256 swapFeePercentage) external;\\n\\n    function setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n *\\n * We could use Solidity structs to pack values together in a single storage slot instead of relying on a custom and\\n * error-prone library, but unfortunately Solidity only allows for structs to live in either storage, calldata or\\n * memory. Because a memory struct uses not just memory but also a slot in the stack (to store its memory location),\\n * using memory for word-sized values (i.e. of 256 bits or less) is strictly less gas performant, and doesn't even\\n * prevent stack-too-deep issues. This is compounded by the fact that Balancer contracts typically are memory-intensive,\\n * and the cost of accesing memory increases quadratically with the number of allocated words. Manual packing and\\n * unpacking is therefore the preferred approach.\\n */\\nlibrary WordCodec {\\n    // Masks are values with the least significant N bits set. They can be used to extract an encoded value from a word,\\n    // or to insert a new one replacing the old.\\n    uint256 private constant _MASK_1 = 2**(1) - 1;\\n    uint256 private constant _MASK_192 = 2**(192) - 1;\\n\\n    // In-place insertion\\n\\n    /**\\n     * @dev Inserts an unsigned integer of bitLength, shifted by an offset, into a 256 bit word,\\n     * replacing the old value. Returns the new word.\\n     */\\n    function insertUint(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        uint256 mask = (1 << bitLength) - 1;\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using `bitLength` bits.\\n     */\\n    function insertInt(\\n        bytes32 word,\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        uint256 mask = (1 << bitLength) - 1;\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return clearedWord | bytes32((uint256(value) & mask) << offset);\\n    }\\n\\n    // Encoding\\n\\n    /**\\n     * @dev Encodes an unsigned integer shifted by an offset. Ensures value fits within\\n     * `bitLength` bits.\\n     *\\n     * The return value can be ORed bitwise with other encoded values to form a 256 bit word.\\n     */\\n    function encodeUint(\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        return bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Encodes a signed integer shifted by an offset.\\n     *\\n     * The return value can be ORed bitwise with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt(\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        uint256 mask = (1 << bitLength) - 1;\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & mask) << offset);\\n    }\\n\\n    // Decoding\\n\\n    /**\\n     * @dev Decodes and returns an unsigned integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n     */\\n    function decodeUint(\\n        bytes32 word,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (uint256) {\\n        return uint256(word >> offset) & ((1 << bitLength) - 1);\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a signed integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n     */\\n    function decodeInt(\\n        bytes32 word,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (int256) {\\n        int256 maxInt = int256((1 << (bitLength - 1)) - 1);\\n        uint256 mask = (1 << bitLength) - 1;\\n\\n        int256 value = int256(uint256(word >> offset) & mask);\\n        // In case the decoded value is greater than the max positive integer that can be represented with bitLength\\n        // bits, we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n        return value > maxInt ? (value | int256(~mask)) : value;\\n    }\\n\\n    // Special cases\\n\\n    /**\\n     * @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n     */\\n    function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool) {\\n        return (uint256(word >> offset) & _MASK_1) == 1;\\n    }\\n\\n    /**\\n     * @dev Inserts a 192 bit value shifted by an offset into a 256 bit word, replacing the old value.\\n     * Returns the new word.\\n     *\\n     * Assumes `value` can be represented using 192 bits.\\n     */\\n    function insertBits192(\\n        bytes32 word,\\n        bytes32 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_192 << offset));\\n        return clearedWord | bytes32((uint256(value) & _MASK_192) << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n     * word.\\n     */\\n    function insertBool(\\n        bytes32 word,\\n        bool value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_1 << offset));\\n        return clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n    }\\n\\n    // Helpers\\n\\n    function _validateEncodingParams(\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) private pure {\\n        _require(offset < 256, Errors.OUT_OF_BOUNDS);\\n        // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller\\n        // the maximum bit length.\\n        _require(bitLength >= 1 && bitLength <= Math.min(255, 256 - offset), Errors.OUT_OF_BOUNDS);\\n\\n        // Testing unsigned values for size is straightforward: their upper bits must be cleared.\\n        _require(value >> bitLength == 0, Errors.CODEC_OVERFLOW);\\n    }\\n\\n    function _validateEncodingParams(\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) private pure {\\n        _require(offset < 256, Errors.OUT_OF_BOUNDS);\\n        // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller\\n        // the maximum bit length.\\n        _require(bitLength >= 1 && bitLength <= Math.min(255, 256 - offset), Errors.OUT_OF_BOUNDS);\\n\\n        // Testing signed values for size is a bit more involved.\\n        if (value >= 0) {\\n            // For positive values, we can simply check that the upper bits are clear. Notice we remove one bit from the\\n            // length for the sign bit.\\n            _require(value >> (bitLength - 1) == 0, Errors.CODEC_OVERFLOW);\\n        } else {\\n            // Negative values can receive the same treatment by making them positive, with the caveat that the range\\n            // for negative values in two's complement supports one more value than for the positive case.\\n            _require(Math.abs(value + 1) >> (bitLength - 1) == 0, Errors.CODEC_OVERFLOW);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\n\\n/**\\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\\n * used as an emergency switch in case a security vulnerability or threat is identified.\\n *\\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\\n * analysis later determines there was a false alarm.\\n *\\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\\n *\\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\\n * irreversible.\\n */\\nabstract contract TemporarilyPausable is ITemporarilyPausable {\\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\\n    // solhint-disable not-rely-on-time\\n\\n    uint256 private constant _MAX_PAUSE_WINDOW_DURATION = 90 days;\\n    uint256 private constant _MAX_BUFFER_PERIOD_DURATION = 30 days;\\n\\n    uint256 private immutable _pauseWindowEndTime;\\n    uint256 private immutable _bufferPeriodEndTime;\\n\\n    bool private _paused;\\n\\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\\n        _require(pauseWindowDuration <= _MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\\n        _require(bufferPeriodDuration <= _MAX_BUFFER_PERIOD_DURATION, Errors.MAX_BUFFER_PERIOD_DURATION);\\n\\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\\n\\n        _pauseWindowEndTime = pauseWindowEndTime;\\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    modifier whenNotPaused() {\\n        _ensureNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\\n     * Period.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        override\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        )\\n    {\\n        paused = !_isNotPaused();\\n        pauseWindowEndTime = _getPauseWindowEndTime();\\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\\n    }\\n\\n    /**\\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\\n     * unpaused until the end of the Buffer Period.\\n     *\\n     * Once the Buffer Period expires, this function reverts unconditionally.\\n     */\\n    function _setPaused(bool paused) internal {\\n        if (paused) {\\n            _require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\\n        } else {\\n            _require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\\n        }\\n\\n        _paused = paused;\\n        emit PausedStateChanged(paused);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    function _ensureNotPaused() internal view {\\n        _require(_isNotPaused(), Errors.PAUSED);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not paused.\\n     */\\n    function _ensurePaused() internal view {\\n        _require(!_isNotPaused(), Errors.NOT_PAUSED);\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is unpaused.\\n     *\\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\\n     * longer accessed.\\n     */\\n    function _isNotPaused() internal view returns (bool) {\\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\\n    }\\n\\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\\n\\n    function _getPauseWindowEndTime() private view returns (uint256) {\\n        return _pauseWindowEndTime;\\n    }\\n\\n    function _getBufferPeriodEndTime() private view returns (uint256) {\\n        return _bufferPeriodEndTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}. The total supply should only be read using this function\\n     *\\n     * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\\n     * storage values).\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Sets a new value for the total supply. It should only be set using this function.\\n     *\\n     * * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\\n     * storage values).\\n     */\\n    function _setTotalSupply(uint256 value) internal virtual {\\n        _totalSupply = value;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _setTotalSupply(totalSupply().add(amount));\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_BALANCE);\\n        _setTotalSupply(totalSupply().sub(amount));\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n * - Assigns infinite allowance for all token holders to the Vault\\n */\\ncontract BalancerPoolToken is ERC20Permit {\\n    IVault private immutable _vault;\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IVault vault\\n    ) ERC20(tokenName, tokenSymbol) ERC20Permit(tokenName) {\\n        _vault = vault;\\n    }\\n\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    // Overrides\\n\\n    /**\\n     * @dev Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval.\\n     *\\n     * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this\\n     * contract inherits.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        if (spender == address(getVault())) {\\n            return uint256(-1);\\n        } else {\\n            return super.allowance(owner, spender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        _require(msg.sender == sender || currentAllowance >= amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE);\\n\\n        _transfer(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n\\n        if (amount >= currentAllowance) {\\n            _approve(msg.sender, spender, 0);\\n        } else {\\n            // No risk of underflow due to if condition\\n            _approve(msg.sender, spender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _mint(recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        _burn(sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\\\";\\n\\n/**\\n * @dev Base authorization layer implementation for Pools.\\n *\\n * The owner account can call some of the permissioned functions - access control of the rest is delegated to the\\n * Authorizer. Note that this owner is immutable: more sophisticated permission schemes, such as multiple ownership,\\n * granular roles, etc., could be built on top of this by making the owner a smart contract.\\n *\\n * Access control of all other permissioned functions is delegated to an Authorizer. It is also possible to delegate\\n * control of *all* permissioned functions to the Authorizer by setting the owner address to `_DELEGATE_OWNER`.\\n */\\nabstract contract BasePoolAuthorization is Authentication {\\n    address private immutable _owner;\\n\\n    address private constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;\\n\\n    constructor(address owner) {\\n        _owner = owner;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\n        if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {\\n            // Only the owner can perform \\\"owner only\\\" actions, unless the owner is delegated.\\n            return msg.sender == getOwner();\\n        } else {\\n            // Non-owner actions are always processed via the Authorizer, as \\\"owner only\\\" ones are when delegated.\\n            return _getAuthorizer().canPerform(actionId, account, address(this));\\n        }\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32) internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\n\\nimport \\\"./BasePoolAuthorization.sol\\\";\\n\\n/**\\n * @notice Handle storage and state changes for pools that support \\\"Recovery Mode\\\".\\n *\\n * @dev This is intended to provide a safe way to exit any pool during some kind of emergency, to avoid locking funds\\n * in the event the pool enters a non-functional state (i.e., some code that normally runs during exits is causing\\n * them to revert).\\n *\\n * Recovery Mode is *not* the same as pausing the pool. The pause function is only available during a short window\\n * after factory deployment. Pausing can only be intentionally reversed during a buffer period, and the contract\\n * will permanently unpause itself thereafter. Paused pools are completely disabled, in a kind of suspended animation,\\n * until they are voluntarily or involuntarily unpaused.\\n *\\n * By contrast, a privileged account - typically a governance multisig - can place a pool in Recovery Mode at any\\n * time, and it is always reversible. The pool is *not* disabled while in this mode: though of course whatever\\n * condition prompted the transition to Recovery Mode has likely effectively disabled some functions. Rather,\\n * a special \\\"clean\\\" exit is enabled, which runs the absolute minimum code necessary to exit proportionally.\\n * In particular, stable pools do not attempt to compute the invariant (which is a complex, iterative calculation\\n * that can fail in extreme circumstances), and no protocol fees are collected.\\n *\\n * It is critical to ensure that turning on Recovery Mode would do no harm, if activated maliciously or in error.\\n */\\nabstract contract RecoveryMode is IRecoveryMode, BasePoolAuthorization {\\n    using FixedPoint for uint256;\\n    using BasePoolUserData for bytes;\\n\\n    /**\\n     * @dev Reverts if the contract is in Recovery Mode.\\n     */\\n    modifier whenNotInRecoveryMode() {\\n        _ensureNotInRecoveryMode();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enable recovery mode, which enables a special safe exit path for LPs.\\n     * @dev Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may\\n     * perform certain operations in a \\\"safer\\\" manner that is less likely to fail, in an attempt to keep the pool\\n     * running, even in a pathological state. Unlike the Pause operation, which is only available during a short window\\n     * after factory deployment, Recovery Mode can always be enabled.\\n     */\\n    function enableRecoveryMode() external override authenticate {\\n        _setRecoveryMode(true);\\n    }\\n\\n    /**\\n     * @notice Disable recovery mode, which disables the special safe exit path for LPs.\\n     * @dev Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly\\n     * necessary.\\n     *\\n     * This function will revert when called within a Vault context (i.e. in the middle of a join or an exit).\\n     *\\n     * This function depends on the invariant value, which may be calculated incorrectly in the middle of a join or\\n     * an exit, because the state of the pool could be out of sync with the state of the Vault.\\n     * `_onDisableRecoveryMode` will revert when called from such a context for composable stable pools, effectively\\n     * protecting this function.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     */\\n    function disableRecoveryMode() external override authenticate {\\n        _setRecoveryMode(false);\\n    }\\n\\n    // Defer implementation for functions that require storage\\n\\n    /**\\n     * @notice Override to check storage and return whether the pool is in Recovery Mode\\n     */\\n    function inRecoveryMode() public view virtual override returns (bool);\\n\\n    /**\\n     * @dev Override to update storage and emit the event\\n     *\\n     * No complex code or external calls that could fail should be placed in the implementations,\\n     * which could jeopardize the ability to enable and disable Recovery Mode.\\n     */\\n    function _setRecoveryMode(bool enabled) internal virtual;\\n\\n    /**\\n     * @dev Reverts if the contract is not in Recovery Mode.\\n     */\\n    function _ensureInRecoveryMode() internal view {\\n        _require(inRecoveryMode(), Errors.NOT_IN_RECOVERY_MODE);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is in Recovery Mode.\\n     */\\n    function _ensureNotInRecoveryMode() internal view {\\n        _require(!inRecoveryMode(), Errors.IN_RECOVERY_MODE);\\n    }\\n\\n    /**\\n     * @dev A minimal proportional exit, suitable as is for most pools: though not for pools with preminted BPT\\n     * or other special considerations. Designed to be overridden if a pool needs to do extra processing,\\n     * such as scaling a stored invariant, or caching the new total supply.\\n     *\\n     * No complex code or external calls should be made in derived contracts that override this!\\n     */\\n    function _doRecoveryModeExit(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal virtual returns (uint256, uint256[] memory) {\\n        uint256 bptAmountIn = userData.recoveryModeExit();\\n\\n        uint256[] memory amountsOut = _computeProportionalAmountsOut(balances, totalSupply, bptAmountIn);\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _computeProportionalAmountsOut(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        uint256 bptAmountIn\\n    ) internal pure returns (uint256[] memory amountsOut) {\\n        /**********************************************************************************************\\n        // exactBPTInForTokensOut                                                                    //\\n        // (per token)                                                                               //\\n        // aO = tokenAmountOut             /        bptIn         \\\\                                  //\\n        // b = tokenBalance      a0 = b * | ---------------------  |                                 //\\n        // bptIn = bptAmountIn             \\\\     bptTotalSupply    /                                 //\\n        // bpt = bptTotalSupply                                                                      //\\n        **********************************************************************************************/\\n\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountIn.divDown(totalSupply);\\n\\n        amountsOut = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsOut[i] = balances[i].mulDown(bptRatio);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\\\";\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../helpers/EOASignaturesValidator.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EOASignaturesValidator {\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH = keccak256(\\n        \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n    );\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        bytes32 structHash = keccak256(\\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, value, getNextNonce(owner), deadline)\\n        );\\n\\n        _ensureValidSignature(owner, structHash, _toArraySignature(v, r, s), deadline, Errors.INVALID_SIGNATURE);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return getNextNonce(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return getDomainSeparator();\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\\\";\\n\\nimport \\\"../openzeppelin/EIP712.sol\\\";\\n\\n/**\\n * @dev Utility for signing Solidity function calls.\\n */\\nabstract contract EOASignaturesValidator is ISignaturesValidator, EIP712 {\\n    // Replay attack prevention for each account.\\n    mapping(address => uint256) internal _nextNonce;\\n\\n    function getDomainSeparator() public view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function getNextNonce(address account) public view override returns (uint256) {\\n        return _nextNonce[account];\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 errorCode\\n    ) internal {\\n        return _ensureValidSignature(account, structHash, signature, type(uint256).max, errorCode);\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 deadline,\\n        uint256 errorCode\\n    ) internal {\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        _require(_isValidSignature(account, digest, signature), errorCode);\\n\\n        // We could check for the deadline before validating the signature, but this leads to saner error processing (as\\n        // we only care about expired deadlines if the signature is correct) and only affects the gas cost of the revert\\n        // scenario, which will only occur infrequently, if ever.\\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\\n\\n        // We only advance the nonce after validating the signature. This is irrelevant for this module, but it can be\\n        // important in derived contracts that override _isValidSignature (e.g. SignaturesValidator), as we want for\\n        // the observable state to still have the current nonce as the next valid one.\\n        _nextNonce[account] += 1;\\n    }\\n\\n    function _isValidSignature(\\n        address account,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view virtual returns (bool) {\\n        _require(signature.length == 65, Errors.MALFORMED_SIGNATURE);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the r, s and v signature parameters, and the only way to get them is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n        // ecrecover returns the zero address on recover failure, so we need to handle that explicitly.\\n        return (recoveredAddress != address(0) && recoveredAddress == account);\\n    }\\n\\n    function _toArraySignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory signature = new bytes(65);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(signature, 32), r)\\n            mstore(add(signature, 64), s)\\n            mstore8(add(signature, 96), v)\\n        }\\n\\n        return signature;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // Silence state mutability warning without generating bytecode.\\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\\n        // https://github.com/ethereum/solidity/issues/2691\\n        this;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nlibrary BasePoolUserData {\\n    // Special ExitKind for all pools, used in Recovery Mode. Use the max 8-bit value to prevent conflicts\\n    // with future additions to the ExitKind enums (or any front-end code that maps to existing values)\\n    uint8 public constant RECOVERY_MODE_EXIT_KIND = 255;\\n\\n    // Return true if this is the special exit kind.\\n    function isRecoveryModeExitKind(bytes memory self) internal pure returns (bool) {\\n        // Check for the \\\"no data\\\" case, or abi.decode would revert\\n        return self.length > 0 && abi.decode(self, (uint8)) == RECOVERY_MODE_EXIT_KIND;\\n    }\\n\\n    // Parse the bptAmountIn out of the userData\\n    function recoveryModeExit(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (uint8, uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the RecoveryMode module.\\n */\\ninterface IRecoveryMode {\\n    /**\\n     * @dev Emitted when the Recovery Mode status changes.\\n     */\\n    event RecoveryModeStateChanged(bool enabled);\\n\\n    /**\\n     * @notice Enables Recovery Mode in the Pool, disabling protocol fee collection and allowing for safe proportional\\n     * exits with low computational complexity and no dependencies.\\n     */\\n    function enableRecoveryMode() external;\\n\\n    /**\\n     * @notice Disables Recovery Mode in the Pool, restoring protocol fee collection and disallowing proportional exits.\\n     */\\n    function disableRecoveryMode() external;\\n\\n    /**\\n     * @notice Returns true if the Pool is in Recovery Mode.\\n     */\\n    function inRecoveryMode() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol\\\";\\n\\nimport \\\"../RecoveryMode.sol\\\";\\n\\n/**\\n * @dev The Vault does not provide the protocol swap fee percentage in swap hooks (as swaps don't typically need this\\n * value), so for swaps that need this value, we would have to to fetch it ourselves from the\\n * ProtocolFeePercentagesProvider. Additionally, other protocol fee types (such as Yield or AUM) can only be obtained\\n * by making said call.\\n *\\n * However, these values change so rarely that it doesn't make sense to perform the required calls to get the current\\n * values in every single user interaction. Instead, we keep a local copy that can be permissionlessly updated by anyone\\n * with the real value. We also pack these values together, performing a single storage read to get them all.\\n *\\n * When initialized with a special sentinel value, the swap fee is delegated, meaning the mutable protocol swap fee\\n * cache is set to the current value stored in the ProtocolFeePercentagesProvider, and can be updated by anyone with a\\n * call to `updateProtocolFeePercentageCache`. Any other value means the protocol swap fee is fixed, so it is instead\\n * stored in the immutable `_fixedProtocolSwapFeePercentage`.\\n */\\nabstract contract ProtocolFeeCache is RecoveryMode {\\n    using SafeCast for uint256;\\n\\n    IProtocolFeePercentagesProvider private immutable _protocolFeeProvider;\\n\\n    // Protocol Fee Percentages can never be larger than 100% (1e18), which fits in ~59 bits, so using 64 for each type\\n    // is sufficient.\\n    struct FeeTypeCache {\\n        uint64 swapFee;\\n        uint64 yieldFee;\\n        uint64 aumFee;\\n    }\\n\\n    FeeTypeCache private _cache;\\n\\n    event ProtocolFeePercentageCacheUpdated(uint256 indexed feeType, uint256 protocolFeePercentage);\\n\\n    // Swap fees can be set to a fixed value at construction, or delegated to the ProtocolFeePercentagesProvider if\\n    // passing the special sentinel value.\\n    uint256 public constant DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL = type(uint256).max;\\n\\n    bool private immutable _delegatedProtocolSwapFees;\\n\\n    // Only valid when `_delegatedProtocolSwapFees` is false\\n    uint256 private immutable _fixedProtocolSwapFeePercentage;\\n\\n    constructor(IProtocolFeePercentagesProvider protocolFeeProvider, uint256 protocolSwapFeePercentage) {\\n        // Protocol swap fees are delegated to the value reported by the ProtocolFeePercentagesProvider if the sentinel\\n        // value is passed.\\n        bool delegatedProtocolSwapFees = protocolSwapFeePercentage == DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL;\\n\\n        _delegatedProtocolSwapFees = delegatedProtocolSwapFees;\\n        _protocolFeeProvider = protocolFeeProvider;\\n\\n        _updateProtocolFeeCache(protocolFeeProvider, ProtocolFeeType.YIELD);\\n        _updateProtocolFeeCache(protocolFeeProvider, ProtocolFeeType.AUM);\\n\\n        if (delegatedProtocolSwapFees) {\\n            _updateProtocolFeeCache(protocolFeeProvider, ProtocolFeeType.SWAP);\\n        } else {\\n            _require(\\n                protocolSwapFeePercentage <= protocolFeeProvider.getFeeTypeMaximumPercentage(ProtocolFeeType.SWAP),\\n                Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH\\n            );\\n\\n            // We cannot set `_fixedProtocolSwapFeePercentage` here due to it being immutable so instead we must set it\\n            // in the main function scope with a value based on whether protocol fees are delegated.\\n\\n            // Emit an event as we do in `_updateProtocolFeeCache` to appear the same to offchain indexers.\\n            emit ProtocolFeePercentageCacheUpdated(ProtocolFeeType.SWAP, protocolSwapFeePercentage);\\n        }\\n\\n        // As `_fixedProtocolSwapFeePercentage` is immutable we must set a value, but just set to zero if it's not used.\\n        _fixedProtocolSwapFeePercentage = delegatedProtocolSwapFees ? 0 : protocolSwapFeePercentage;\\n    }\\n\\n    /**\\n     * @dev Returns the cached protocol fee percentage. If `getProtocolSwapFeeDelegation()` is false, this value is\\n     * immutable for swap fee queries. Alternatively, it will track the global fee percentage set in the\\n     * ProtocolFeePercentagesProvider.\\n     */\\n    function getProtocolFeePercentageCache(uint256 feeType) public view returns (uint256) {\\n        if (inRecoveryMode()) {\\n            return 0;\\n        }\\n\\n        if (feeType == ProtocolFeeType.SWAP) {\\n            return getProtocolSwapFeeDelegation() ? _cache.swapFee : _fixedProtocolSwapFeePercentage;\\n        } else if (feeType == ProtocolFeeType.YIELD) {\\n            return _cache.yieldFee;\\n        } else if (feeType == ProtocolFeeType.AUM) {\\n            return _cache.aumFee;\\n        } else {\\n            _revert(Errors.UNHANDLED_FEE_TYPE);\\n        }\\n    }\\n\\n    /**\\n     * @dev Can be called by anyone to update the cached fee percentages (swap fee is only updated when delegated).\\n     * Updates the cache to the latest value set by governance.\\n     *\\n     * This function will revert when called within a Vault context (i.e. in the middle of a join or an exit).\\n     *\\n     * This function depends on the invariant value, which may be calculated incorrectly in the middle of a join or\\n     * an exit, because the state of the pool could be out of sync with the state of the Vault.\\n     * `_beforeProtocolFeeCacheUpdate` will revert when called from such a context for composable stable pools,\\n     * effectively protecting this function.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     */\\n    function updateProtocolFeePercentageCache() external {\\n        _beforeProtocolFeeCacheUpdate();\\n\\n        if (getProtocolSwapFeeDelegation()) {\\n            _updateProtocolFeeCache(_protocolFeeProvider, ProtocolFeeType.SWAP);\\n        }\\n\\n        _updateProtocolFeeCache(_protocolFeeProvider, ProtocolFeeType.YIELD);\\n        _updateProtocolFeeCache(_protocolFeeProvider, ProtocolFeeType.AUM);\\n    }\\n\\n    /**\\n     * @dev Override in derived contracts to perform some action before the cache is updated. This is typically relevant\\n     * to Pools that incur protocol debt between operations. To avoid altering the amount due retroactively, this debt\\n     * needs to be paid before the fee percentages change.\\n     */\\n    function _beforeProtocolFeeCacheUpdate() internal virtual {}\\n\\n    /**\\n     * @dev Returns whether this Pool tracks protocol swap fee changes in the IProtocolFeePercentagesProvider.\\n     */\\n    function getProtocolSwapFeeDelegation() public view returns (bool) {\\n        return _delegatedProtocolSwapFees;\\n    }\\n\\n    function _updateProtocolFeeCache(IProtocolFeePercentagesProvider protocolFeeProvider, uint256 feeType) private {\\n        uint256 currentValue = protocolFeeProvider.getFeeTypePercentage(feeType);\\n\\n        if (feeType == ProtocolFeeType.SWAP) {\\n            _cache.swapFee = currentValue.toUint64();\\n        } else if (feeType == ProtocolFeeType.YIELD) {\\n            _cache.yieldFee = currentValue.toUint64();\\n        } else if (feeType == ProtocolFeeType.AUM) {\\n            _cache.aumFee = currentValue.toUint64();\\n        } else {\\n            _revert(Errors.UNHANDLED_FEE_TYPE);\\n        }\\n\\n        emit ProtocolFeePercentageCacheUpdated(feeType, currentValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport \\\"./ProtocolFees.sol\\\";\\n\\nlibrary InvariantGrowthProtocolSwapFees {\\n    using FixedPoint for uint256;\\n\\n    function getProtocolOwnershipPercentage(\\n        uint256 invariantGrowthRatio,\\n        uint256 supplyGrowthRatio,\\n        uint256 protocolSwapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // Joins and exits are symmetrical; for simplicity, we consider a join, where the invariant and supply\\n        // both increase.\\n\\n        // |-------------------------|-- original invariant * invariantGrowthRatio\\n        // |   increase from fees    |\\n        // |-------------------------|-- original invariant * supply growth ratio (fee-less invariant)\\n        // |                         |\\n        // | increase from balances  |\\n        // |-------------------------|-- original invariant\\n        // |                         |\\n        // |                         |  |------------------|-- currentSupply\\n        // |                         |  |    BPT minted    |\\n        // |                         |  |------------------|-- previousSupply\\n        // |   original invariant    |  |  original supply |\\n        // |_________________________|  |__________________|\\n        //\\n        // If the join is proportional, the invariant and supply will likewise increase proportionally,\\n        // so the growth ratios (invariantGrowthRatio / supplyGrowthRatio) will be equal. In this case, we do not charge\\n        // any protocol fees.\\n        // We also charge no protocol fees in the case where `invariantGrowthRatio < supplyGrowthRatio` to avoid\\n        // potential underflows, however this should only occur in extremely low volume actions due solely to rounding\\n        // error.\\n\\n        if ((supplyGrowthRatio >= invariantGrowthRatio) || (protocolSwapFeePercentage == 0)) return 0;\\n\\n        // If the join is non-proportional, the supply increase will be proportionally less than the invariant increase,\\n        // since the BPT minted will be based on fewer tokens (because swap fees are not included). So the supply growth\\n        // is due entirely to the balance changes, while the invariant growth also includes swap fees.\\n        //\\n        // To isolate the amount of increase by fees then, we multiply the original invariant by the supply growth\\n        // ratio to get the \\\"feeless invariant\\\". The difference between the final invariant and this value is then\\n        // the amount of the invariant due to fees, which we convert to a percentage by normalizing against the\\n        // final invariant. This is expressed as the expression below:\\n        //\\n        // invariantGrowthFromFees = currentInvariant - supplyGrowthRatio * previousInvariant\\n        //\\n        // We then divide through by current invariant so the LHS can be identified as the fraction of the pool which\\n        // is made up of accumulated swap fees.\\n        //\\n        // swapFeesPercentage = 1 - supplyGrowthRatio * previousInvariant / currentInvariant\\n        //\\n        // We then define `invariantGrowthRatio` in a similar fashion to `supplyGrowthRatio` to give the result:\\n        //\\n        // swapFeesPercentage = 1 - supplyGrowthRatio / invariantGrowthRatio\\n        //\\n        // Using this form allows us to consider only the ratios of the two invariants, rather than their absolute\\n        // values: a useful property, as this is sometimes easier than calculating the full invariant twice.\\n\\n        // We've already checked that `supplyGrowthRatio` is smaller than `invariantGrowthRatio`, and hence their ratio\\n        // smaller than FixedPoint.ONE, allowing for unchecked arithmetic.\\n        uint256 swapFeesPercentage = FixedPoint.ONE - supplyGrowthRatio.divDown(invariantGrowthRatio);\\n\\n        // We then multiply by the protocol swap fee percentage to get the fraction of the pool which the protocol\\n        // should own once fees have been collected.\\n        return swapFeesPercentage.mulDown(protocolSwapFeePercentage);\\n    }\\n\\n    function calcDueProtocolFees(\\n        uint256 invariantGrowthRatio,\\n        uint256 previousSupply,\\n        uint256 currentSupply,\\n        uint256 protocolSwapFeePercentage\\n    ) internal pure returns (uint256) {\\n        uint256 protocolOwnershipPercentage = getProtocolOwnershipPercentage(\\n            invariantGrowthRatio,\\n            currentSupply.divDown(previousSupply),\\n            protocolSwapFeePercentage\\n        );\\n\\n        return ProtocolFees.bptForPoolOwnershipPercentage(currentSupply, protocolOwnershipPercentage);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        _require(value >> 255 == 0, Errors.SAFE_CAST_VALUE_CANT_FIT_INT256);\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into an unsigned uint64.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxUint64.\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        _require(value <= type(uint64).max, Errors.SAFE_CAST_VALUE_CANT_FIT_UINT64);\\n        return uint64(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\nlibrary ProtocolFees {\\n    using FixedPoint for uint256;\\n\\n    /**\\n     * @dev Calculates the amount of BPT necessary to give ownership of a given percentage of the Pool.\\n     * Note that this function reverts if `poolPercentage` >= 100%, it's expected that the caller will enforce this.\\n     * @param totalSupply - The total supply of the pool prior to minting BPT.\\n     * @param poolOwnershipPercentage - The desired ownership percentage of the pool to have as a result of minting BPT.\\n     * @return bptAmount - The amount of BPT to mint such that it is `poolPercentage` of the resultant total supply.\\n     */\\n    function bptForPoolOwnershipPercentage(uint256 totalSupply, uint256 poolOwnershipPercentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // If we mint some amount `bptAmount` of BPT then the percentage ownership of the pool this grants is given by:\\n        // `poolOwnershipPercentage = bptAmount / (totalSupply + bptAmount)`.\\n        // Solving for `bptAmount`, we arrive at:\\n        // `bptAmount = totalSupply * poolOwnershipPercentage / (1 - poolOwnershipPercentage)`.\\n        return Math.divDown(Math.mul(totalSupply, poolOwnershipPercentage), poolOwnershipPercentage.complement());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IProtocolFeePercentagesProvider\",\"name\":\"protocolFeeProvider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IRateProvider[]\",\"name\":\"rateProviders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRateCacheDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"exemptFromYieldProtocolFeeFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amplificationParameter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct ComposableStablePool.NewPoolParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AmpUpdateStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"}],\"name\":\"AmpUpdateStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeePercentageCacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TokenRateCacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRateProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cacheDuration\",\"type\":\"uint256\"}],\"name\":\"TokenRateProviderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmplificationParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUpdating\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBptIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastJoinExitData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastJoinExitAmplification\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPostJoinExitInvariant\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBpt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeType\",\"type\":\"uint256\"}],\"name\":\"getProtocolFeePercentageCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract IProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolSwapFeeDelegation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRateProviders\",\"outputs\":[{\"internalType\":\"contract IRateProvider[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScalingFactors\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenRateCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExemptFromYieldProtocolFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenExemptFromYieldProtocolFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onExitPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onJoinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IPoolSwapStructs.SwapRequest\",\"name\":\"swapRequest\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"}],\"name\":\"onSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"poolConfig\",\"type\":\"bytes\"}],\"name\":\"setAssetManagerPoolConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setTokenRateCacheDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rawEndValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"startAmplificationParameterUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAmplificationParameterUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateProtocolFeePercentageCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateTokenRateCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ComposableStablePool", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c800000000000000000000000097207b095e4d5c9a6e4cfbfcd2c3358e03b90c4a00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000000076a6f40000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000028444f204e4f5420555345202d204d6f636b20436f6d706f7361626c6520537461626c6520506f6f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454455354000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d7b226e616d65223a22436f6d706f7361626c65537461626c65506f6f6c222c2276657273696f6e223a352c226465706c6f796d656e74223a2232303233303731312d636f6d706f7361626c652d737461626c652d706f6f6c2d7635227d000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}