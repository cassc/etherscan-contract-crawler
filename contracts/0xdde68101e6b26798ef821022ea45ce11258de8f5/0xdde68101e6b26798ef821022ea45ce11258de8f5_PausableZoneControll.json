{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dependencies/seaport/contracts/interfaces/SeaportInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    BasicOrderParameters,\\n    OrderComponents,\\n    Fulfillment,\\n    FulfillmentComponent,\\n    Execution,\\n    Order,\\n    AdvancedOrder,\\n    OrderStatus,\\n    CriteriaResolver\\n} from \\\"../lib/ConsiderationStructs.sol\\\";\\n\\n/**\\n * @title SeaportInterface\\n * @author 0age\\n * @custom:version 1.1\\n * @notice Seaport is a generalized ETH/ERC20/ERC721/ERC1155 marketplace. It\\n *         minimizes external calls to the greatest extent possible and provides\\n *         lightweight methods for common routes as well as more flexible\\n *         methods for composing advanced orders.\\n *\\n * @dev SeaportInterface contains all external function interfaces for Seaport.\\n */\\ninterface SeaportInterface {\\n    /**\\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\\n     *         the native token for the given chain) as consideration for the\\n     *         order. An arbitrary number of \\\"additional recipients\\\" may also be\\n     *         supplied which will each receive native tokens from the fulfiller\\n     *         as consideration.\\n     *\\n     * @param parameters Additional information on the fulfilled order. Note\\n     *                   that the offerer must first approve this contract (or\\n     *                   their preferred conduit if indicated by the order) for\\n     *                   their offered ERC721 token to be transferred.\\n     *\\n     * @return fulfilled A boolean indicating whether the order has been\\n     *                   successfully fulfilled.\\n     */\\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\\n        external\\n        payable\\n        returns (bool fulfilled);\\n\\n    /**\\n     * @notice Fulfill an order with an arbitrary number of items for offer and\\n     *         consideration. Note that this function does not support\\n     *         criteria-based orders or partial filling of orders (though\\n     *         filling the remainder of a partially-filled order is supported).\\n     *\\n     * @param order               The order to fulfill. Note that both the\\n     *                            offerer and the fulfiller must first approve\\n     *                            this contract (or the corresponding conduit if\\n     *                            indicated) to transfer any relevant tokens on\\n     *                            their behalf and that contracts must implement\\n     *                            `onERC1155Received` to receive ERC1155 tokens\\n     *                            as consideration.\\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\\n     *                            any, to source the fulfiller's token approvals\\n     *                            from. The zero hash signifies that no conduit\\n     *                            should be used, with direct approvals set on\\n     *                            Seaport.\\n     *\\n     * @return fulfilled A boolean indicating whether the order has been\\n     *                   successfully fulfilled.\\n     */\\n    function fulfillOrder(Order calldata order, bytes32 fulfillerConduitKey)\\n        external\\n        payable\\n        returns (bool fulfilled);\\n\\n    /**\\n     * @notice Fill an order, fully or partially, with an arbitrary number of\\n     *         items for offer and consideration alongside criteria resolvers\\n     *         containing specific token identifiers and associated proofs.\\n     *\\n     * @param advancedOrder       The order to fulfill along with the fraction\\n     *                            of the order to attempt to fill. Note that\\n     *                            both the offerer and the fulfiller must first\\n     *                            approve this contract (or their preferred\\n     *                            conduit if indicated by the order) to transfer\\n     *                            any relevant tokens on their behalf and that\\n     *                            contracts must implement `onERC1155Received`\\n     *                            to receive ERC1155 tokens as consideration.\\n     *                            Also note that all offer and consideration\\n     *                            components must have no remainder after\\n     *                            multiplication of the respective amount with\\n     *                            the supplied fraction for the partial fill to\\n     *                            be considered valid.\\n     * @param criteriaResolvers   An array where each element contains a\\n     *                            reference to a specific offer or\\n     *                            consideration, a token identifier, and a proof\\n     *                            that the supplied token identifier is\\n     *                            contained in the merkle root held by the item\\n     *                            in question's criteria element. Note that an\\n     *                            empty criteria indicates that any\\n     *                            (transferable) token identifier on the token\\n     *                            in question is valid and that no associated\\n     *                            proof needs to be supplied.\\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\\n     *                            any, to source the fulfiller's token approvals\\n     *                            from. The zero hash signifies that no conduit\\n     *                            should be used, with direct approvals set on\\n     *                            Seaport.\\n     * @param recipient           The intended recipient for all received items,\\n     *                            with `address(0)` indicating that the caller\\n     *                            should receive the items.\\n     *\\n     * @return fulfilled A boolean indicating whether the order has been\\n     *                   successfully fulfilled.\\n     */\\n    function fulfillAdvancedOrder(\\n        AdvancedOrder calldata advancedOrder,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        bytes32 fulfillerConduitKey,\\n        address recipient\\n    ) external payable returns (bool fulfilled);\\n\\n    /**\\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\\n     *         of items for offer and consideration. Any order that is not\\n     *         currently active, has already been fully filled, or has been\\n     *         cancelled will be omitted. Remaining offer and consideration\\n     *         items will then be aggregated where possible as indicated by the\\n     *         supplied offer and consideration component arrays and aggregated\\n     *         items will be transferred to the fulfiller or to each intended\\n     *         recipient, respectively. Note that a failing item transfer or an\\n     *         issue with order formatting will cause the entire batch to fail.\\n     *         Note that this function does not support criteria-based orders or\\n     *         partial filling of orders (though filling the remainder of a\\n     *         partially-filled order is supported).\\n     *\\n     * @param orders                    The orders to fulfill. Note that both\\n     *                                  the offerer and the fulfiller must first\\n     *                                  approve this contract (or the\\n     *                                  corresponding conduit if indicated) to\\n     *                                  transfer any relevant tokens on their\\n     *                                  behalf and that contracts must implement\\n     *                                  `onERC1155Received` to receive ERC1155\\n     *                                  tokens as consideration.\\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\\n     *                                  indicating which offer items to attempt\\n     *                                  to aggregate when preparing executions.\\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\\n     *                                  indicating which consideration items to\\n     *                                  attempt to aggregate when preparing\\n     *                                  executions.\\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\\n     *                                  if any, to source the fulfiller's token\\n     *                                  approvals from. The zero hash signifies\\n     *                                  that no conduit should be used, with\\n     *                                  direct approvals set on this contract.\\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\\n     *\\n     * @return availableOrders An array of booleans indicating if each order\\n     *                         with an index corresponding to the index of the\\n     *                         returned boolean was fulfillable or not.\\n     * @return executions      An array of elements indicating the sequence of\\n     *                         transfers performed as part of matching the given\\n     *                         orders.\\n     */\\n    function fulfillAvailableOrders(\\n        Order[] calldata orders,\\n        FulfillmentComponent[][] calldata offerFulfillments,\\n        FulfillmentComponent[][] calldata considerationFulfillments,\\n        bytes32 fulfillerConduitKey,\\n        uint256 maximumFulfilled\\n    )\\n        external\\n        payable\\n        returns (bool[] memory availableOrders, Execution[] memory executions);\\n\\n    /**\\n     * @notice Attempt to fill a group of orders, fully or partially, with an\\n     *         arbitrary number of items for offer and consideration per order\\n     *         alongside criteria resolvers containing specific token\\n     *         identifiers and associated proofs. Any order that is not\\n     *         currently active, has already been fully filled, or has been\\n     *         cancelled will be omitted. Remaining offer and consideration\\n     *         items will then be aggregated where possible as indicated by the\\n     *         supplied offer and consideration component arrays and aggregated\\n     *         items will be transferred to the fulfiller or to each intended\\n     *         recipient, respectively. Note that a failing item transfer or an\\n     *         issue with order formatting will cause the entire batch to fail.\\n     *\\n     * @param advancedOrders            The orders to fulfill along with the\\n     *                                  fraction of those orders to attempt to\\n     *                                  fill. Note that both the offerer and the\\n     *                                  fulfiller must first approve this\\n     *                                  contract (or their preferred conduit if\\n     *                                  indicated by the order) to transfer any\\n     *                                  relevant tokens on their behalf and that\\n     *                                  contracts must implement\\n     *                                  `onERC1155Received` to enable receipt of\\n     *                                  ERC1155 tokens as consideration. Also\\n     *                                  note that all offer and consideration\\n     *                                  components must have no remainder after\\n     *                                  multiplication of the respective amount\\n     *                                  with the supplied fraction for an\\n     *                                  order's partial fill amount to be\\n     *                                  considered valid.\\n     * @param criteriaResolvers         An array where each element contains a\\n     *                                  reference to a specific offer or\\n     *                                  consideration, a token identifier, and a\\n     *                                  proof that the supplied token identifier\\n     *                                  is contained in the merkle root held by\\n     *                                  the item in question's criteria element.\\n     *                                  Note that an empty criteria indicates\\n     *                                  that any (transferable) token\\n     *                                  identifier on the token in question is\\n     *                                  valid and that no associated proof needs\\n     *                                  to be supplied.\\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\\n     *                                  indicating which offer items to attempt\\n     *                                  to aggregate when preparing executions.\\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\\n     *                                  indicating which consideration items to\\n     *                                  attempt to aggregate when preparing\\n     *                                  executions.\\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\\n     *                                  if any, to source the fulfiller's token\\n     *                                  approvals from. The zero hash signifies\\n     *                                  that no conduit should be used, with\\n     *                                  direct approvals set on this contract.\\n     * @param recipient                 The intended recipient for all received\\n     *                                  items, with `address(0)` indicating that\\n     *                                  the caller should receive the items.\\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\\n     *\\n     * @return availableOrders An array of booleans indicating if each order\\n     *                         with an index corresponding to the index of the\\n     *                         returned boolean was fulfillable or not.\\n     * @return executions      An array of elements indicating the sequence of\\n     *                         transfers performed as part of matching the given\\n     *                         orders.\\n     */\\n    function fulfillAvailableAdvancedOrders(\\n        AdvancedOrder[] calldata advancedOrders,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        FulfillmentComponent[][] calldata offerFulfillments,\\n        FulfillmentComponent[][] calldata considerationFulfillments,\\n        bytes32 fulfillerConduitKey,\\n        address recipient,\\n        uint256 maximumFulfilled\\n    )\\n        external\\n        payable\\n        returns (bool[] memory availableOrders, Execution[] memory executions);\\n\\n    /**\\n     * @notice Match an arbitrary number of orders, each with an arbitrary\\n     *         number of items for offer and consideration along with as set of\\n     *         fulfillments allocating offer components to consideration\\n     *         components. Note that this function does not support\\n     *         criteria-based or partial filling of orders (though filling the\\n     *         remainder of a partially-filled order is supported).\\n     *\\n     * @param orders       The orders to match. Note that both the offerer and\\n     *                     fulfiller on each order must first approve this\\n     *                     contract (or their conduit if indicated by the order)\\n     *                     to transfer any relevant tokens on their behalf and\\n     *                     each consideration recipient must implement\\n     *                     `onERC1155Received` to enable ERC1155 token receipt.\\n     * @param fulfillments An array of elements allocating offer components to\\n     *                     consideration components. Note that each\\n     *                     consideration component must be fully met for the\\n     *                     match operation to be valid.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function matchOrders(\\n        Order[] calldata orders,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable returns (Execution[] memory executions);\\n\\n    /**\\n     * @notice Match an arbitrary number of full or partial orders, each with an\\n     *         arbitrary number of items for offer and consideration, supplying\\n     *         criteria resolvers containing specific token identifiers and\\n     *         associated proofs as well as fulfillments allocating offer\\n     *         components to consideration components.\\n     *\\n     * @param orders            The advanced orders to match. Note that both the\\n     *                          offerer and fulfiller on each order must first\\n     *                          approve this contract (or a preferred conduit if\\n     *                          indicated by the order) to transfer any relevant\\n     *                          tokens on their behalf and each consideration\\n     *                          recipient must implement `onERC1155Received` in\\n     *                          order to receive ERC1155 tokens. Also note that\\n     *                          the offer and consideration components for each\\n     *                          order must have no remainder after multiplying\\n     *                          the respective amount with the supplied fraction\\n     *                          in order for the group of partial fills to be\\n     *                          considered valid.\\n     * @param criteriaResolvers An array where each element contains a reference\\n     *                          to a specific order as well as that order's\\n     *                          offer or consideration, a token identifier, and\\n     *                          a proof that the supplied token identifier is\\n     *                          contained in the order's merkle root. Note that\\n     *                          an empty root indicates that any (transferable)\\n     *                          token identifier is valid and that no associated\\n     *                          proof needs to be supplied.\\n     * @param fulfillments      An array of elements allocating offer components\\n     *                          to consideration components. Note that each\\n     *                          consideration component must be fully met in\\n     *                          order for the match operation to be valid.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function matchAdvancedOrders(\\n        AdvancedOrder[] calldata orders,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable returns (Execution[] memory executions);\\n\\n    /**\\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\\n     *         or the zone of a given order may cancel it. Callers should ensure\\n     *         that the intended order was cancelled by calling `getOrderStatus`\\n     *         and confirming that `isCancelled` returns `true`.\\n     *\\n     * @param orders The orders to cancel.\\n     *\\n     * @return cancelled A boolean indicating whether the supplied orders have\\n     *                   been successfully cancelled.\\n     */\\n    function cancel(OrderComponents[] calldata orders)\\n        external\\n        returns (bool cancelled);\\n\\n    /**\\n     * @notice Validate an arbitrary number of orders, thereby registering their\\n     *         signatures as valid and allowing the fulfiller to skip signature\\n     *         verification on fulfillment. Note that validated orders may still\\n     *         be unfulfillable due to invalid item amounts or other factors;\\n     *         callers should determine whether validated orders are fulfillable\\n     *         by simulating the fulfillment call prior to execution. Also note\\n     *         that anyone can validate a signed order, but only the offerer can\\n     *         validate an order without supplying a signature.\\n     *\\n     * @param orders The orders to validate.\\n     *\\n     * @return validated A boolean indicating whether the supplied orders have\\n     *                   been successfully validated.\\n     */\\n    function validate(Order[] calldata orders)\\n        external\\n        returns (bool validated);\\n\\n    /**\\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\\n     *         by incrementing a counter. Note that only the offerer may\\n     *         increment the counter.\\n     *\\n     * @return newCounter The new counter.\\n     */\\n    function incrementCounter() external returns (uint256 newCounter);\\n\\n    /**\\n     * @notice Retrieve the order hash for a given order.\\n     *\\n     * @param order The components of the order.\\n     *\\n     * @return orderHash The order hash.\\n     */\\n    function getOrderHash(OrderComponents calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /**\\n     * @notice Retrieve the status of a given order by hash, including whether\\n     *         the order has been cancelled or validated and the fraction of the\\n     *         order that has been filled.\\n     *\\n     * @param orderHash The order hash in question.\\n     *\\n     * @return isValidated A boolean indicating whether the order in question\\n     *                     has been validated (i.e. previously approved or\\n     *                     partially filled).\\n     * @return isCancelled A boolean indicating whether the order in question\\n     *                     has been cancelled.\\n     * @return totalFilled The total portion of the order that has been filled\\n     *                     (i.e. the \\\"numerator\\\").\\n     * @return totalSize   The total size of the order that is either filled or\\n     *                     unfilled (i.e. the \\\"denominator\\\").\\n     */\\n    function getOrderStatus(bytes32 orderHash)\\n        external\\n        view\\n        returns (\\n            bool isValidated,\\n            bool isCancelled,\\n            uint256 totalFilled,\\n            uint256 totalSize\\n        );\\n\\n    /**\\n     * @notice Retrieve the current counter for a given offerer.\\n     *\\n     * @param offerer The offerer in question.\\n     *\\n     * @return counter The current counter.\\n     */\\n    function getCounter(address offerer)\\n        external\\n        view\\n        returns (uint256 counter);\\n\\n    /**\\n     * @notice Retrieve configuration information for this contract.\\n     *\\n     * @return version           The contract version.\\n     * @return domainSeparator   The domain separator for this contract.\\n     * @return conduitController The conduit Controller set for this contract.\\n     */\\n    function information()\\n        external\\n        view\\n        returns (\\n            string memory version,\\n            bytes32 domainSeparator,\\n            address conduitController\\n        );\\n\\n    /**\\n     * @notice Retrieve the name of this contract.\\n     *\\n     * @return contractName The name of this contract.\\n     */\\n    function name() external view returns (string memory contractName);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/interfaces/ZoneInteractionErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ZoneInteractionErrors\\n * @author 0age\\n * @notice ZoneInteractionErrors contains errors related to zone interaction.\\n */\\ninterface ZoneInteractionErrors {\\n    /**\\n     * @dev Revert with an error when attempting to fill an order that specifies\\n     *      a restricted submitter as its order type when not submitted by\\n     *      either the offerer or the order's zone or approved as valid by the\\n     *      zone in question via a staticcall to `isValidOrder`.\\n     *\\n     * @param orderHash The order hash for the invalid restricted order.\\n     */\\n    error InvalidRestrictedOrder(bytes32 orderHash);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/interfaces/ZoneInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    AdvancedOrder,\\n    CriteriaResolver\\n} from \\\"../lib/ConsiderationStructs.sol\\\";\\n\\ninterface ZoneInterface {\\n    // Called by Consideration whenever extraData is not provided by the caller.\\n    function isValidOrder(\\n        bytes32 orderHash,\\n        address caller,\\n        address offerer,\\n        bytes32 zoneHash\\n    ) external view returns (bytes4 validOrderMagicValue);\\n\\n    // Called by Consideration whenever any extraData is provided by the caller.\\n    function isValidOrderIncludingExtraData(\\n        bytes32 orderHash,\\n        address caller,\\n        AdvancedOrder calldata order,\\n        bytes32[] calldata priorOrderHashes,\\n        CriteriaResolver[] calldata criteriaResolvers\\n    ) external view returns (bytes4 validOrderMagicValue);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/lib/ConsiderationEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// prettier-ignore\\nenum OrderType {\\n    // 0: no partial fills, anyone can execute\\n    FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    PARTIAL_RESTRICTED\\n}\\n\\n// prettier-ignore\\nenum BasicOrderType {\\n    // 0: no partial fills, anyone can execute\\n    ETH_TO_ERC721_FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    ETH_TO_ERC721_PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC721_FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n    // 4: no partial fills, anyone can execute\\n    ETH_TO_ERC1155_FULL_OPEN,\\n\\n    // 5: partial fills supported, anyone can execute\\n    ETH_TO_ERC1155_PARTIAL_OPEN,\\n\\n    // 6: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC1155_FULL_RESTRICTED,\\n\\n    // 7: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n    // 8: no partial fills, anyone can execute\\n    ERC20_TO_ERC721_FULL_OPEN,\\n\\n    // 9: partial fills supported, anyone can execute\\n    ERC20_TO_ERC721_PARTIAL_OPEN,\\n\\n    // 10: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC721_FULL_RESTRICTED,\\n\\n    // 11: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n    // 12: no partial fills, anyone can execute\\n    ERC20_TO_ERC1155_FULL_OPEN,\\n\\n    // 13: partial fills supported, anyone can execute\\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\\n\\n    // 14: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\\n\\n    // 15: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n    // 16: no partial fills, anyone can execute\\n    ERC721_TO_ERC20_FULL_OPEN,\\n\\n    // 17: partial fills supported, anyone can execute\\n    ERC721_TO_ERC20_PARTIAL_OPEN,\\n\\n    // 18: no partial fills, only offerer or zone can execute\\n    ERC721_TO_ERC20_FULL_RESTRICTED,\\n\\n    // 19: partial fills supported, only offerer or zone can execute\\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n\\n    // 20: no partial fills, anyone can execute\\n    ERC1155_TO_ERC20_FULL_OPEN,\\n\\n    // 21: partial fills supported, anyone can execute\\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\\n\\n    // 22: no partial fills, only offerer or zone can execute\\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\\n\\n    // 23: partial fills supported, only offerer or zone can execute\\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n}\\n\\n// prettier-ignore\\nenum BasicOrderRouteType {\\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\\n    ETH_TO_ERC721,\\n\\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\\n    ETH_TO_ERC1155,\\n\\n    // 2: provide ERC20 item to receive offered ERC721 item.\\n    ERC20_TO_ERC721,\\n\\n    // 3: provide ERC20 item to receive offered ERC1155 item.\\n    ERC20_TO_ERC1155,\\n\\n    // 4: provide ERC721 item to receive offered ERC20 item.\\n    ERC721_TO_ERC20,\\n\\n    // 5: provide ERC1155 item to receive offered ERC20 item.\\n    ERC1155_TO_ERC20\\n}\\n\\n// prettier-ignore\\nenum ItemType {\\n    // 0: ETH on mainnet, MATIC on polygon, etc.\\n    NATIVE,\\n\\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n    ERC20,\\n\\n    // 2: ERC721 items\\n    ERC721,\\n\\n    // 3: ERC1155 items\\n    ERC1155,\\n\\n    // 4: ERC721 items where a number of tokenIds are supported\\n    ERC721_WITH_CRITERIA,\\n\\n    // 5: ERC1155 items where a number of ids are supported\\n    ERC1155_WITH_CRITERIA\\n}\\n\\n// prettier-ignore\\nenum Side {\\n    // 0: Items that can be spent\\n    OFFER,\\n\\n    // 1: Items that must be received\\n    CONSIDERATION\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/lib/ConsiderationStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    OrderType,\\n    BasicOrderType,\\n    ItemType,\\n    Side\\n} from \\\"./ConsiderationEnums.sol\\\";\\n\\n/**\\n * @dev An order contains eleven components: an offerer, a zone (or account that\\n *      can cancel the order or restrict who can fulfill the order depending on\\n *      the type), the order type (specifying partial fill support as well as\\n *      restricted order status), the start and end time, a hash that will be\\n *      provided to the zone when validating restricted orders, a salt, a key\\n *      corresponding to a given conduit, a counter, and an arbitrary number of\\n *      offer items that can be spent along with consideration items that must\\n *      be received by their respective recipient.\\n */\\nstruct OrderComponents {\\n    address offerer;\\n    address zone;\\n    OfferItem[] offer;\\n    ConsiderationItem[] consideration;\\n    OrderType orderType;\\n    uint256 startTime;\\n    uint256 endTime;\\n    bytes32 zoneHash;\\n    uint256 salt;\\n    bytes32 conduitKey;\\n    uint256 counter;\\n}\\n\\n/**\\n * @dev An offer item has five components: an item type (ETH or other native\\n *      tokens, ERC20, ERC721, and ERC1155, as well as criteria-based ERC721 and\\n *      ERC1155), a token address, a dual-purpose \\\"identifierOrCriteria\\\"\\n *      component that will either represent a tokenId or a merkle root\\n *      depending on the item type, and a start and end amount that support\\n *      increasing or decreasing amounts over the duration of the respective\\n *      order.\\n */\\nstruct OfferItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifierOrCriteria;\\n    uint256 startAmount;\\n    uint256 endAmount;\\n}\\n\\n/**\\n * @dev A consideration item has the same five components as an offer item and\\n *      an additional sixth component designating the required recipient of the\\n *      item.\\n */\\nstruct ConsiderationItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifierOrCriteria;\\n    uint256 startAmount;\\n    uint256 endAmount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev A spent item is translated from a utilized offer item and has four\\n *      components: an item type (ETH or other native tokens, ERC20, ERC721, and\\n *      ERC1155), a token address, a tokenId, and an amount.\\n */\\nstruct SpentItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifier;\\n    uint256 amount;\\n}\\n\\n/**\\n * @dev A received item is translated from a utilized consideration item and has\\n *      the same four components as a spent item, as well as an additional fifth\\n *      component designating the required recipient of the item.\\n */\\nstruct ReceivedItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifier;\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n *      matching, a group of six functions may be called that only requires a\\n *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n *      of the basic order (a simple derivation function for the basic order\\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n */\\nstruct BasicOrderParameters {\\n    // calldata offset\\n    address considerationToken; // 0x24\\n    uint256 considerationIdentifier; // 0x44\\n    uint256 considerationAmount; // 0x64\\n    address payable offerer; // 0x84\\n    address zone; // 0xa4\\n    address offerToken; // 0xc4\\n    uint256 offerIdentifier; // 0xe4\\n    uint256 offerAmount; // 0x104\\n    BasicOrderType basicOrderType; // 0x124\\n    uint256 startTime; // 0x144\\n    uint256 endTime; // 0x164\\n    bytes32 zoneHash; // 0x184\\n    uint256 salt; // 0x1a4\\n    bytes32 offererConduitKey; // 0x1c4\\n    bytes32 fulfillerConduitKey; // 0x1e4\\n    uint256 totalOriginalAdditionalRecipients; // 0x204\\n    AdditionalRecipient[] additionalRecipients; // 0x224\\n    bytes signature; // 0x244\\n    // Total length, excluding dynamic array data: 0x264 (580)\\n}\\n\\n/**\\n * @dev Basic orders can supply any number of additional recipients, with the\\n *      implied assumption that they are supplied from the offered ETH (or other\\n *      native token) or ERC20 token for the order.\\n */\\nstruct AdditionalRecipient {\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev The full set of order components, with the exception of the counter,\\n *      must be supplied when fulfilling more sophisticated orders or groups of\\n *      orders. The total number of original consideration items must also be\\n *      supplied, as the caller may specify additional consideration items.\\n */\\nstruct OrderParameters {\\n    address offerer; // 0x00\\n    address zone; // 0x20\\n    OfferItem[] offer; // 0x40\\n    ConsiderationItem[] consideration; // 0x60\\n    OrderType orderType; // 0x80\\n    uint256 startTime; // 0xa0\\n    uint256 endTime; // 0xc0\\n    bytes32 zoneHash; // 0xe0\\n    uint256 salt; // 0x100\\n    bytes32 conduitKey; // 0x120\\n    uint256 totalOriginalConsiderationItems; // 0x140\\n    // offer.length                          // 0x160\\n}\\n\\n/**\\n * @dev Orders require a signature in addition to the other order parameters.\\n */\\nstruct Order {\\n    OrderParameters parameters;\\n    bytes signature;\\n}\\n\\n/**\\n * @dev Advanced orders include a numerator (i.e. a fraction to attempt to fill)\\n *      and a denominator (the total size of the order) in addition to the\\n *      signature and other order parameters. It also supports an optional field\\n *      for supplying extra data; this data will be included in a staticcall to\\n *      `isValidOrderIncludingExtraData` on the zone for the order if the order\\n *      type is restricted and the offerer or zone are not the caller.\\n */\\nstruct AdvancedOrder {\\n    OrderParameters parameters;\\n    uint120 numerator;\\n    uint120 denominator;\\n    bytes signature;\\n    bytes extraData;\\n}\\n\\n/**\\n * @dev Orders can be validated (either explicitly via `validate`, or as a\\n *      consequence of a full or partial fill), specifically cancelled (they can\\n *      also be cancelled in bulk via incrementing a per-zone counter), and\\n *      partially or fully filled (with the fraction filled represented by a\\n *      numerator and denominator).\\n */\\nstruct OrderStatus {\\n    bool isValidated;\\n    bool isCancelled;\\n    uint120 numerator;\\n    uint120 denominator;\\n}\\n\\n/**\\n * @dev A criteria resolver specifies an order, side (offer vs. consideration),\\n *      and item index. It then provides a chosen identifier (i.e. tokenId)\\n *      alongside a merkle proof demonstrating the identifier meets the required\\n *      criteria.\\n */\\nstruct CriteriaResolver {\\n    uint256 orderIndex;\\n    Side side;\\n    uint256 index;\\n    uint256 identifier;\\n    bytes32[] criteriaProof;\\n}\\n\\n/**\\n * @dev A fulfillment is applied to a group of orders. It decrements a series of\\n *      offer and consideration items, then generates a single execution\\n *      element. A given fulfillment can be applied to as many offer and\\n *      consideration items as desired, but must contain at least one offer and\\n *      at least one consideration that match. The fulfillment must also remain\\n *      consistent on all key parameters across all offer items (same offerer,\\n *      token, type, tokenId, and conduit preference) as well as across all\\n *      consideration items (token, type, tokenId, and recipient).\\n */\\nstruct Fulfillment {\\n    FulfillmentComponent[] offerComponents;\\n    FulfillmentComponent[] considerationComponents;\\n}\\n\\n/**\\n * @dev Each fulfillment component contains one index referencing a specific\\n *      order and another referencing a specific offer or consideration item.\\n */\\nstruct FulfillmentComponent {\\n    uint256 orderIndex;\\n    uint256 itemIndex;\\n}\\n\\n/**\\n * @dev An execution is triggered once all consideration items have been zeroed\\n *      out. It sends the item in question from the offerer to the item's\\n *      recipient, optionally sourcing approvals from either this contract\\n *      directly or from the offerer's chosen conduit if one is specified. An\\n *      execution is not provided as an argument, but rather is derived via\\n *      orders, criteria resolvers, and fulfillments (where the total number of\\n *      executions will be less than or equal to the total number of indicated\\n *      fulfillments) and returned as part of `matchOrders`.\\n */\\nstruct Execution {\\n    ReceivedItem item;\\n    address offerer;\\n    bytes32 conduitKey;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/zones/PausableZone.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ZoneInterface } from \\\"../interfaces/ZoneInterface.sol\\\";\\nimport { ZoneInteractionErrors } from \\\"../interfaces/ZoneInteractionErrors.sol\\\";\\n\\nimport {\\n    PausableZoneEventsAndErrors\\n} from \\\"./interfaces/PausableZoneEventsAndErrors.sol\\\";\\n\\nimport { SeaportInterface } from \\\"../interfaces/SeaportInterface.sol\\\";\\n\\nimport {\\n    AdvancedOrder,\\n    CriteriaResolver,\\n    Order,\\n    OrderComponents,\\n    Fulfillment,\\n    Execution\\n} from \\\"../lib/ConsiderationStructs.sol\\\";\\n\\nimport { PausableZoneInterface } from \\\"./interfaces/PausableZoneInterface.sol\\\";\\n\\n/**\\n * @title  PausableZone\\n * @author cupOJoseph, BCLeFevre, ryanio\\n * @notice PausableZone is a simple zone implementation that approves every\\n *         order. It can be self-destructed by its controller to pause\\n *         restricted orders that have it set as their zone.\\n */\\ncontract PausableZone is\\n    PausableZoneEventsAndErrors,\\n    ZoneInterface,\\n    PausableZoneInterface\\n{\\n    // Set an immutable controller that can pause the zone & update an operator.\\n    address internal immutable _controller;\\n\\n    // Set an operator that can instruct the zone to cancel or execute orders.\\n    address public operator;\\n\\n    /**\\n     * @dev Ensure that the caller is either the operator or controller.\\n     */\\n    modifier isOperator() {\\n        // Ensure that the caller is either the operator or the controller.\\n        if (msg.sender != operator && msg.sender != _controller) {\\n            revert InvalidOperator();\\n        }\\n\\n        // Continue with function execution.\\n        _;\\n    }\\n\\n    /**\\n     * @dev Ensure that the caller is the controller.\\n     */\\n    modifier isController() {\\n        // Ensure that the caller is the controller.\\n        if (msg.sender != _controller) {\\n            revert InvalidController();\\n        }\\n\\n        // Continue with function execution.\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the deployer as the controller of the zone.\\n     */\\n    constructor() {\\n        // Set the controller to the deployer.\\n        _controller = msg.sender;\\n\\n        // Emit an event signifying that the zone is unpaused.\\n        emit Unpaused();\\n    }\\n\\n    /**\\n     * @notice Cancel an arbitrary number of orders that have agreed to use the\\n     *         contract as their zone.\\n     *\\n     * @param seaport  The Seaport address.\\n     * @param orders   The orders to cancel.\\n     *\\n     * @return cancelled A boolean indicating whether the supplied orders have\\n     *                   been successfully cancelled.\\n     */\\n    function cancelOrders(\\n        SeaportInterface seaport,\\n        OrderComponents[] calldata orders\\n    ) external override isOperator returns (bool cancelled) {\\n        // Call cancel on Seaport and return its boolean value.\\n        cancelled = seaport.cancel(orders);\\n    }\\n\\n    /**\\n     * @notice Pause this contract, safely stopping orders from using\\n     *         the contract as a zone. Restricted orders with this address as a\\n     *         zone will not be fulfillable unless the zone is redeployed to the\\n     *         same address.\\n     */\\n    // function pause(address payee) external override isController {\\n    //     // Emit an event signifying that the zone is paused.\\n    //     emit Paused();\\n    //\\n    //     // Destroy the zone, sending any ether to the transaction submitter.\\n    //     selfdestruct(payable(payee));\\n    // }\\n\\n    /**\\n     * @notice Assign the given address with the ability to operate the zone.\\n     *\\n     * @param operatorToAssign The address to assign as the operator.\\n     */\\n    function assignOperator(address operatorToAssign)\\n        external\\n        override\\n        isController\\n    {\\n        // Ensure the operator being assigned is not the null address.\\n        if (operatorToAssign == address(0)) {\\n            revert PauserCanNotBeSetAsZero();\\n        }\\n\\n        // Set the given address as the new operator.\\n        operator = operatorToAssign;\\n\\n        // Emit an event indicating the operator has been updated.\\n        emit OperatorUpdated(operator);\\n    }\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched orders, each with\\n     *         an arbitrary number of items for offer and consideration\\n     *         along with a set of fulfillments allocating offer components\\n     *         to consideration components.\\n     *\\n     * @param seaport      The Seaport address.\\n     * @param orders       The orders to match.\\n     * @param fulfillments An array of elements allocating offer components\\n     *                     to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchOrders(\\n        SeaportInterface seaport,\\n        Order[] calldata orders,\\n        Fulfillment[] calldata fulfillments\\n    )\\n        external\\n        payable\\n        override\\n        isOperator\\n        returns (Execution[] memory executions)\\n    {\\n        // Call matchOrders on Seaport and return the sequence of transfers\\n        // performed as part of matching the given orders.\\n        executions = seaport.matchOrders{ value: msg.value }(\\n            orders,\\n            fulfillments\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched advanced orders,\\n     *         each with an arbitrary number of items for offer and\\n     *         consideration along with a set of fulfillments allocating\\n     *         offer components to consideration components.\\n     *\\n     * @param seaport           The Seaport address.\\n     * @param orders            The orders to match.\\n     * @param criteriaResolvers An array where each element contains a reference\\n     *                          to a specific order as well as that order's\\n     *                          offer or consideration, a token identifier, and\\n     *                          a proof that the supplied token identifier is\\n     *                          contained in the order's merkle root.\\n     * @param fulfillments      An array of elements allocating offer components\\n     *                          to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchAdvancedOrders(\\n        SeaportInterface seaport,\\n        AdvancedOrder[] calldata orders,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        Fulfillment[] calldata fulfillments\\n    )\\n        external\\n        payable\\n        override\\n        isOperator\\n        returns (Execution[] memory executions)\\n    {\\n        // Call matchAdvancedOrders on Seaport and return the sequence of\\n        // transfers performed as part of matching the given orders.\\n        executions = seaport.matchAdvancedOrders{ value: msg.value }(\\n            orders,\\n            criteriaResolvers,\\n            fulfillments\\n        );\\n    }\\n\\n    /**\\n     * @notice Check if a given order is currently valid.\\n     *\\n     * @dev This function is called by Seaport whenever extraData is not\\n     *      provided by the caller.\\n     *\\n     * @param orderHash The hash of the order.\\n     * @param caller    The caller in question.\\n     * @param offerer   The offerer in question.\\n     * @param zoneHash  The hash to provide upon calling the zone.\\n     *\\n     * @return validOrderMagicValue A magic value indicating if the order is\\n     *                              currently valid.\\n     */\\n    function isValidOrder(\\n        bytes32 orderHash,\\n        address caller,\\n        address offerer,\\n        bytes32 zoneHash\\n    ) external pure override returns (bytes4 validOrderMagicValue) {\\n        orderHash;\\n        caller;\\n        offerer;\\n        zoneHash;\\n\\n        // Return the selector of isValidOrder as the magic value.\\n        validOrderMagicValue = ZoneInterface.isValidOrder.selector;\\n    }\\n\\n    /**\\n     * @notice Check if a given order including extraData is currently valid.\\n     *\\n     * @dev This function is called by Seaport whenever any extraData is\\n     *      provided by the caller.\\n     *\\n     * @param orderHash         The hash of the order.\\n     * @param caller            The caller in question.\\n     * @param order             The order in question.\\n     * @param priorOrderHashes  The order hashes of each order supplied prior to\\n     *                          the current order as part of a \\\"match\\\" variety\\n     *                          of order fulfillment.\\n     * @param criteriaResolvers The criteria resolvers corresponding to\\n     *                          the order.\\n     *\\n     * @return validOrderMagicValue A magic value indicating if the order is\\n     *                              currently valid.\\n     */\\n    function isValidOrderIncludingExtraData(\\n        bytes32 orderHash,\\n        address caller,\\n        AdvancedOrder calldata order,\\n        bytes32[] calldata priorOrderHashes,\\n        CriteriaResolver[] calldata criteriaResolvers\\n    ) external pure override returns (bytes4 validOrderMagicValue) {\\n        orderHash;\\n        caller;\\n        order;\\n        priorOrderHashes;\\n        criteriaResolvers;\\n\\n        // Return the selector of isValidOrder as the magic value.\\n        validOrderMagicValue = ZoneInterface.isValidOrder.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/zones/PausableZoneController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PausableZone } from \\\"./PausableZone.sol\\\";\\n\\nimport {\\n    PausableZoneControllerInterface\\n} from \\\"./interfaces/PausableZoneControllerInterface.sol\\\";\\n\\nimport {\\n    PausableZoneEventsAndErrors\\n} from \\\"./interfaces/PausableZoneEventsAndErrors.sol\\\";\\n\\nimport {\\n    Order,\\n    Fulfillment,\\n    OrderComponents,\\n    AdvancedOrder,\\n    CriteriaResolver,\\n    Execution\\n} from \\\"../lib/ConsiderationStructs.sol\\\";\\n\\nimport { SeaportInterface } from \\\"../interfaces/SeaportInterface.sol\\\";\\n\\n/**\\n * @title  PausableZoneController\\n * @author cupOJoseph, BCLeFevre, stuckinaboot, stephankmin\\n * @notice PausableZoneController enables deploying, pausing and executing\\n *         orders on PausableZones. This deployer is designed to be owned\\n *         by a gnosis safe, DAO, or trusted party.\\n */\\ncontract PausableZoneController is\\n    PausableZoneControllerInterface,\\n    PausableZoneEventsAndErrors\\n{\\n    // Set the owner that can deploy, pause and execute orders on PausableZones.\\n    address internal _owner;\\n\\n    // Set the address of the new potential owner of the zone.\\n    address private _potentialOwner;\\n\\n    // Set the address with the ability to pause the zone.\\n    address internal _pauser;\\n\\n    // Set the immutable zone creation code hash.\\n    bytes32 public immutable zoneCreationCode;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or pauser.\\n     */\\n    modifier isPauser() {\\n        if (msg.sender != _pauser && msg.sender != _owner) {\\n            revert InvalidPauser();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the owner of the controller and store\\n     *         the zone creation code.\\n     *\\n     * @param ownerAddress The deployer to be set as the owner.\\n     */\\n    constructor(address ownerAddress) {\\n        // Set the owner address as the owner.\\n        _owner = ownerAddress;\\n\\n        // Hash and store the zone creation code.\\n        zoneCreationCode = keccak256(type(PausableZone).creationCode);\\n    }\\n\\n    /**\\n     * @notice Deploy a PausableZone to a precomputed address.\\n     *\\n     * @param salt The salt to be used to derive the zone address\\n     *\\n     * @return derivedAddress The derived address for the zone.\\n     */\\n    function createZone(bytes32 salt)\\n        external\\n        override\\n        returns (address derivedAddress)\\n    {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n\\n        // Derive the PausableZone address.\\n        // This expression demonstrates address computation but is not required.\\n        derivedAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(this),\\n                            salt,\\n                            zoneCreationCode\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n\\n        // Revert if a zone is currently deployed to the derived address.\\n        if (derivedAddress.code.length != 0) {\\n            revert ZoneAlreadyExists(derivedAddress);\\n        }\\n\\n        // Deploy the zone using the supplied salt.\\n        new PausableZone{ salt: salt }();\\n\\n        // Emit an event signifying that the zone was created.\\n        emit ZoneCreated(derivedAddress, salt);\\n    }\\n\\n    /**\\n     * @notice Pause orders on a given zone.\\n     *\\n     * @param zone The address of the zone to be paused.\\n     *\\n     * @return success A boolean indicating the zone has been paused.\\n     */\\n    // function pause(address zone)\\n    //     external\\n    //     override\\n    //     isPauser\\n    //     returns (bool success)\\n    // {\\n    //     // Call pause on the given zone.\\n    //     PausableZone(zone).pause(msg.sender);\\n    //\\n    //     // Return a boolean indicating the pause was successful.\\n    //     success = true;\\n    // }\\n\\n    /**\\n     * @notice Cancel Seaport orders on a given zone.\\n     *\\n     * @param pausableZoneAddress The zone that manages the\\n     * orders to be cancelled.\\n     * @param seaportAddress      The Seaport address.\\n     * @param orders              The orders to cancel.\\n     */\\n    function cancelOrders(\\n        address pausableZoneAddress,\\n        SeaportInterface seaportAddress,\\n        OrderComponents[] calldata orders\\n    ) external override {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n\\n        // Create a zone object from the zone address.\\n        PausableZone zone = PausableZone(pausableZoneAddress);\\n\\n        // Call cancelOrders on the given zone.\\n        zone.cancelOrders(seaportAddress, orders);\\n    }\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched orders on a given zone.\\n     *\\n     * @param pausableZoneAddress The zone that manages the orders\\n     * to be cancelled.\\n     * @param seaportAddress      The Seaport address.\\n     * @param orders              The orders to match.\\n     * @param fulfillments        An array of elements allocating offer\\n     *                            components to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchOrders(\\n        address pausableZoneAddress,\\n        SeaportInterface seaportAddress,\\n        Order[] calldata orders,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable override returns (Execution[] memory executions) {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n\\n        // Create a zone object from the zone address.\\n        PausableZone zone = PausableZone(pausableZoneAddress);\\n\\n        // Call executeMatchOrders on the given zone and return the sequence\\n        // of transfers performed as part of matching the given orders.\\n        executions = zone.executeMatchOrders{ value: msg.value }(\\n            seaportAddress,\\n            orders,\\n            fulfillments\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched advanced orders on a given\\n     *         zone.\\n     *\\n     * @param pausableZoneAddress The zone that manages the orders to be\\n     *                            cancelled.\\n     * @param seaportAddress      The Seaport address.\\n     * @param orders              The orders to match.\\n     * @param criteriaResolvers   An array where each element contains a\\n     *                            reference to a specific order as well as that\\n     *                            order's offer or consideration, a token\\n     *                            identifier, and a proof that the supplied\\n     *                            token identifier is contained in the\\n     *                            order's merkle root.\\n     * @param fulfillments        An array of elements allocating offer\\n     *                            components to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchAdvancedOrders(\\n        address pausableZoneAddress,\\n        SeaportInterface seaportAddress,\\n        AdvancedOrder[] calldata orders,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable override returns (Execution[] memory executions) {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n\\n        // Create a zone object from the zone address.\\n        PausableZone zone = PausableZone(pausableZoneAddress);\\n\\n        // Call executeMatchOrders on the given zone and return the sequence\\n        // of transfers performed as part of matching the given orders.\\n        executions = zone.executeMatchAdvancedOrders{ value: msg.value }(\\n            seaportAddress,\\n            orders,\\n            criteriaResolvers,\\n            fulfillments\\n        );\\n    }\\n\\n    /**\\n     * @notice Initiate Zone ownership transfer by assigning a new potential\\n     *         owner this contract. Once set, the new potential owner\\n     *         may call `acceptOwnership` to claim ownership.\\n     *         Only the owner in question may call this function.\\n     *\\n     * @param newPotentialOwner The address for which to initiate ownership\\n     *                          transfer to.\\n     */\\n    function transferOwnership(address newPotentialOwner) external override {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n        // Ensure the new potential owner is not an invalid address.\\n        if (newPotentialOwner == address(0)) {\\n            revert OwnerCanNotBeSetAsZero();\\n        }\\n\\n        // Emit an event indicating that the potential owner has been updated.\\n        emit PotentialOwnerUpdated(newPotentialOwner);\\n\\n        // Set the new potential owner as the potential owner.\\n        _potentialOwner = newPotentialOwner;\\n    }\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any.\\n     *         Only the owner of this contract may call this function.\\n     */\\n    function cancelOwnershipTransfer() external override {\\n        // Ensure the caller is the current owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner.\\n        delete _potentialOwner;\\n    }\\n\\n    /**\\n     * @notice Accept ownership of this contract. Only the account that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     */\\n    function acceptOwnership() external override {\\n        // Ensure the caller is the potential owner.\\n        if (msg.sender != _potentialOwner) {\\n            revert CallerIsNotPotentialOwner();\\n        }\\n\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner\\n        delete _potentialOwner;\\n\\n        // Emit an event indicating ownership has been transferred.\\n        emit OwnershipTransferred(_owner, msg.sender);\\n\\n        // Set the caller as the owner of this contract.\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Assign the given address with the ability to pause the zone.\\n     *\\n     * @param pauserToAssign The address to assign the pauser role.\\n     */\\n    function assignPauser(address pauserToAssign) external override {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n        // Ensure the pauser to assign is not an invalid address.\\n        if (pauserToAssign == address(0)) {\\n            revert PauserCanNotBeSetAsZero();\\n        }\\n\\n        // Set the given account as the pauser.\\n        _pauser = pauserToAssign;\\n\\n        // Emit an event indicating the pauser has been assigned.\\n        emit PauserUpdated(_pauser);\\n    }\\n\\n    /**\\n     * @notice Assign the given address with the ability to operate the\\n     *         given zone.\\n     *\\n     * @param pausableZoneAddress The zone address to assign operator role.\\n     * @param operatorToAssign    The address to assign as operator.\\n     */\\n    function assignOperator(\\n        address pausableZoneAddress,\\n        address operatorToAssign\\n    ) external override {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n        // Create a zone object from the zone address.\\n        PausableZone zone = PausableZone(pausableZoneAddress);\\n\\n        // Call assignOperator on the zone by passing in the given\\n        // operator address.\\n        zone.assignOperator(operatorToAssign);\\n    }\\n\\n    /**\\n     * @notice An external view function that returns the owner.\\n     *\\n     * @return The address of the owner.\\n     */\\n    function owner() external view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice An external view function that return the potential owner.\\n     *\\n     * @return The address of the potential owner.\\n     */\\n    function potentialOwner() external view override returns (address) {\\n        return _potentialOwner;\\n    }\\n\\n    /**\\n     * @notice An external view function that returns the pauser.\\n     *\\n     * @return The address of the pauser.\\n     */\\n    function pauser() external view override returns (address) {\\n        return _pauser;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/zones/interfaces/PausableZoneControllerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PausableZone } from \\\"../PausableZone.sol\\\";\\n\\nimport { PausableZoneEventsAndErrors } from \\\"./PausableZoneEventsAndErrors.sol\\\";\\n\\nimport {\\n    Order,\\n    Fulfillment,\\n    OrderComponents,\\n    AdvancedOrder,\\n    CriteriaResolver,\\n    Execution\\n} from \\\"../../lib/ConsiderationStructs.sol\\\";\\n\\nimport { SeaportInterface } from \\\"../../interfaces/SeaportInterface.sol\\\";\\n\\n/**\\n * @title  PausableZoneController\\n * @author cupOJoseph, BCLeFevre, stuckinaboot\\n * @notice PausableZoneController enables deploying, pausing and executing\\n *         orders on PausableZones. This deployer is designed to be owned\\n *         by a gnosis safe, DAO, or trusted party.\\n */\\ninterface PausableZoneControllerInterface {\\n    /**\\n     * @notice Deploy a PausableZone to a precomputed address.\\n     *\\n     * @param salt The salt to be used to derive the zone address\\n     *\\n     * @return derivedAddress The derived address for the zone.\\n     */\\n    function createZone(bytes32 salt) external returns (address derivedAddress);\\n\\n    /**\\n     * @notice Pause orders on a given zone.\\n     *\\n     * @param zone The address of the zone to be paused.\\n     *\\n     * @return success A boolean indicating the zone has been paused.\\n     */\\n    // function pause(address zone) external returns (bool success);\\n\\n    /**\\n     * @notice Cancel Seaport offers on a given zone.\\n     *\\n     * @param pausableZoneAddress The zone that manages the orders to be\\n     *                            cancelled.\\n     * @param seaportAddress      The Seaport address.\\n     * @param orders              The orders to cancel.\\n     */\\n    function cancelOrders(\\n        address pausableZoneAddress,\\n        SeaportInterface seaportAddress,\\n        OrderComponents[] calldata orders\\n    ) external;\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched orders on a given zone.\\n     *\\n     * @param pausableZoneAddress The zone that manages the orders to be\\n     *                            cancelled.\\n     * @param seaportAddress      The Seaport address.\\n     * @param orders              The orders to match.\\n     * @param fulfillments        An array of elements allocating offer\\n     *                            components to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchOrders(\\n        address pausableZoneAddress,\\n        SeaportInterface seaportAddress,\\n        Order[] calldata orders,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable returns (Execution[] memory executions);\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched advanced orders on a\\n     *         given zone.\\n     *\\n     * @param pausableZoneAddress The zone that manages the orders to be\\n     *                            cancelled.\\n     * @param seaportAddress      The Seaport address.\\n     * @param orders              The orders to match.\\n     * @param criteriaResolvers   An array where each element contains a\\n     *                            reference to a specific order as well as\\n     *                            that order's offer or consideration,\\n     *                            a token identifier, and a proof that\\n     *                            the supplied token identifier is\\n     *                            contained in the order's merkle root.\\n     * @param fulfillments        An array of elements allocating offer\\n     *                            components to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchAdvancedOrders(\\n        address pausableZoneAddress,\\n        SeaportInterface seaportAddress,\\n        AdvancedOrder[] calldata orders,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable returns (Execution[] memory executions);\\n\\n    /**\\n     * @notice Initiate Zone ownership transfer by assigning a new potential\\n     *         owner this contract. Once set, the new potential owner\\n     *         may call `acceptOwnership` to claim ownership.\\n     *         Only the owner in question may call this function.\\n     *\\n     * @param newPotentialOwner The address for which to initiate ownership\\n     *                          transfer to.\\n     */\\n    function transferOwnership(address newPotentialOwner) external;\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any.\\n     *         Only the owner of this contract may call this function.\\n     */\\n    function cancelOwnershipTransfer() external;\\n\\n    /**\\n     * @notice Accept ownership of this contract. Only the account that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     */\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @notice Assign the given address with the ability to pause the zone.\\n     *\\n     * @param pauserToAssign The address to assign the pauser role.\\n     */\\n    function assignPauser(address pauserToAssign) external;\\n\\n    /**\\n     * @notice Assign the given address with the ability to operate the\\n     *         given zone.\\n     *\\n     * @param pausableZoneAddress The zone address to assign operator role.\\n     * @param operatorToAssign    The address to assign as operator.\\n     */\\n    function assignOperator(\\n        address pausableZoneAddress,\\n        address operatorToAssign\\n    ) external;\\n\\n    /**\\n     * @notice An external view function that returns the owner.\\n     *\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice An external view function that return the potential owner.\\n     *\\n     * @return The address of the potential owner.\\n     */\\n    function potentialOwner() external view returns (address);\\n\\n    /**\\n     * @notice An external view function that returns the pauser.\\n     *\\n     * @return The address of the pauser.\\n     */\\n    function pauser() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/zones/interfaces/PausableZoneEventsAndErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice PausableZoneEventsAndErrors contains errors and events\\n *         related to zone interaction.\\n */\\ninterface PausableZoneEventsAndErrors {\\n    /**\\n     * @dev Emit an event whenever a zone is successfully paused.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emit an event whenever a zone is successfully unpaused (created).\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emit an event whenever a zone owner registers a new potential\\n     *      owner for that zone.\\n     *\\n     * @param newPotentialOwner The new potential owner of the zone.\\n     */\\n    event PotentialOwnerUpdated(address newPotentialOwner);\\n\\n    /**\\n     * @dev Emit an event whenever zone ownership is transferred.\\n     *\\n     * @param previousOwner The previous owner of the zone.\\n     * @param newOwner      The new owner of the zone.\\n     */\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n     * @dev Emit an event whenever a new zone is created.\\n     *\\n     * @param zone The address of the zone.\\n     * @param salt The salt used to deploy the zone.\\n     */\\n    event ZoneCreated(address zone, bytes32 salt);\\n\\n    /**\\n     * @dev Emit an event whenever a zone owner assigns a new pauser\\n     *\\n     * @param newPauser The new pausear of the zone.\\n     */\\n    event PauserUpdated(address newPauser);\\n\\n    /**\\n     * @dev Emit an event whenever a zone owner assigns a new operator\\n     *\\n     * @param newOperator The new operator of the zone.\\n     */\\n    event OperatorUpdated(address newOperator);\\n\\n    /**\\n     * @dev Revert with an error when attempting to pause the zone\\n     *      while the caller is not the owner or pauser of the zone.\\n     */\\n    error InvalidPauser();\\n\\n    /**\\n     * @dev Revert with an error when attempting to call an operation\\n     *      while the caller is not the controller or operator of the zone.\\n     */\\n    error InvalidOperator();\\n\\n    /**\\n     * @dev Revert with an error when attempting to pause the zone or update the\\n     *      operator while the caller is not the controller of the zone.\\n     */\\n    error InvalidController();\\n    /**\\n     * @dev Revert with an error when attempting to deploy a zone that is\\n     *      currently deployed.\\n     */\\n    error ZoneAlreadyExists(address zone);\\n\\n    /**\\n     * @dev Revert with an error when the caller does not have the _owner role\\n     *\\n     */\\n    error CallerIsNotOwner();\\n\\n    /**\\n     * @dev Revert with an error when the caller does not have the operator role\\n     *\\n     */\\n    error CallerIsNotOperator();\\n\\n    /**\\n     * @dev Revert with an error when attempting to set the new potential owner\\n     *      as the 0 address.\\n     *\\n     */\\n    error OwnerCanNotBeSetAsZero();\\n\\n    /**\\n     * @dev Revert with an error when attempting to set the new potential pauser\\n     *      as the 0 address.\\n     *\\n     */\\n    error PauserCanNotBeSetAsZero();\\n\\n    /**\\n     * @dev Revert with an error when the caller does not have\\n     *      the potentialOwner role.\\n     */\\n    error CallerIsNotPotentialOwner();\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/zones/interfaces/PausableZoneInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SeaportInterface } from \\\"../../interfaces/SeaportInterface.sol\\\";\\n\\nimport {\\n    AdvancedOrder,\\n    CriteriaResolver,\\n    Order,\\n    OrderComponents,\\n    Fulfillment,\\n    Execution\\n} from \\\"../../lib/ConsiderationStructs.sol\\\";\\n\\n/**\\n * @title  PausableZone\\n * @author cupOJoseph, BCLeFevre, ryanio\\n * @notice PausableZone is a simple zone implementation that approves every\\n *         order. It can be self-destructed by its controller to pause\\n *         restricted orders that have it set as their zone.\\n */\\ninterface PausableZoneInterface {\\n    /**\\n     * @notice Cancel an arbitrary number of orders that have agreed to use the\\n     *         contract as their zone.\\n     *\\n     * @param seaport  The Seaport address.\\n     * @param orders   The orders to cancel.\\n     *\\n     * @return cancelled A boolean indicating whether the supplied orders have\\n     *                   been successfully cancelled.\\n     */\\n    function cancelOrders(\\n        SeaportInterface seaport,\\n        OrderComponents[] calldata orders\\n    ) external returns (bool cancelled);\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched orders, each with\\n     *         an arbitrary number of items for offer and consideration\\n     *         along with a set of fulfillments allocating offer components\\n     *         to consideration components.\\n     *\\n     * @param seaport      The Seaport address.\\n     * @param orders       The orders to match.\\n     * @param fulfillments An array of elements allocating offer components\\n     *                     to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchOrders(\\n        SeaportInterface seaport,\\n        Order[] calldata orders,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable returns (Execution[] memory executions);\\n\\n    /**\\n     * @notice Execute an arbitrary number of matched advanced orders,\\n     *         each with an arbitrary number of items for offer and\\n     *         consideration along with a set of fulfillments allocating\\n     *         offer components to consideration components.\\n     *\\n     * @param seaport           The Seaport address.\\n     * @param orders            The orders to match.\\n     * @param criteriaResolvers An array where each element contains a reference\\n     *                          to a specific order as well as that order's\\n     *                          offer or consideration, a token identifier, and\\n     *                          a proof that the supplied token identifier is\\n     *                          contained in the order's merkle root.\\n     * @param fulfillments      An array of elements allocating offer components\\n     *                          to consideration components.\\n     *\\n     * @return executions An array of elements indicating the sequence of\\n     *                    transfers performed as part of matching the given\\n     *                    orders.\\n     */\\n    function executeMatchAdvancedOrders(\\n        SeaportInterface seaport,\\n        AdvancedOrder[] calldata orders,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        Fulfillment[] calldata fulfillments\\n    ) external payable returns (Execution[] memory executions);\\n\\n    /**\\n     * @notice Pause this contract, safely stopping orders from using\\n     *         the contract as a zone. Restricted orders with this address as a\\n     *         zone will not be fulfillable unless the zone is redeployed to the\\n     *         same address.\\n     */\\n    // function pause(address payee) external;\\n\\n    /**\\n     * @notice Assign the given address with the ability to operate the zone.\\n     *\\n     * @param operatorToAssign The address to assign as the operator.\\n     */\\n    function assignOperator(address operatorToAssign) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"contracts/=contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"pnm-contracts/=lib/pnm-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerCanNotBeSetAsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauserCanNotBeSetAsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"ZoneAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ZoneCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pausableZoneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operatorToAssign\",\"type\":\"address\"}],\"name\":\"assignOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pauserToAssign\",\"type\":\"address\"}],\"name\":\"assignPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pausableZoneAddress\",\"type\":\"address\"},{\"internalType\":\"contract SeaportInterface\",\"name\":\"seaportAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderComponents[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createZone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"derivedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pausableZoneAddress\",\"type\":\"address\"},{\"internalType\":\"contract SeaportInterface\",\"name\":\"seaportAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"uint120\",\"name\":\"numerator\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"denominator\",\"type\":\"uint120\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AdvancedOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct CriteriaResolver[]\",\"name\":\"criteriaResolvers\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"offerComponents\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"considerationComponents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Fulfillment[]\",\"name\":\"fulfillments\",\"type\":\"tuple[]\"}],\"name\":\"executeMatchAdvancedOrders\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ReceivedItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"internalType\":\"struct Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pausableZoneAddress\",\"type\":\"address\"},{\"internalType\":\"contract SeaportInterface\",\"name\":\"seaportAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"offerComponents\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"considerationComponents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Fulfillment[]\",\"name\":\"fulfillments\",\"type\":\"tuple[]\"}],\"name\":\"executeMatchOrders\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ReceivedItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"internalType\":\"struct Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zoneCreationCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PausableZoneController", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002f2d07d60ea7330dd2314f4413ccbb2dc25276ef", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}