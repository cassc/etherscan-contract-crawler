{"SourceCode": "pragma solidity ^0.4.10;\r\n\r\ncontract GasToken1 {\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Generic ERC20\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    // owner -> amount\r\n    mapping(address => uint256) s_balances;\r\n    // owner -> spender -> max amount\r\n    mapping(address => mapping(address => uint256)) s_allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Spec: Get the account balance of another account with address `owner`\r\n    function balanceOf(address owner) public constant returns (uint256 balance) {\r\n        return s_balances[owner];\r\n    }\r\n\r\n    function internalTransfer(address from, address to, uint256 value) internal returns (bool success) {\r\n        if (value <= s_balances[from]) {\r\n            s_balances[from] -= value;\r\n            s_balances[to] += value;\r\n            Transfer(from, to, value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens to address `to`\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        address from = msg.sender;\r\n        return internalTransfer(from, to, value);\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens from address `from` to address `to`\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        if(value <= s_allowances[from][spender] && internalTransfer(from, to, value)) {\r\n            s_allowances[from][spender] -= value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Allow `spender` to withdraw from your account, multiple times, up\r\n    // to the `value` amount. If this function is called again it overwrites the\r\n    // current allowance with `value`.\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        address owner = msg.sender;\r\n        if (value != 0 && s_allowances[owner][spender] != 0) {\r\n            return false;\r\n        }\r\n        s_allowances[owner][spender] = value;\r\n        Approval(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Spec: Returns the `amount` which `spender` is still allowed to withdraw\r\n    // from `owner`.\r\n    // What if the allowance is higher than the balance of the `owner`?\r\n    // Callers should be careful to use min(allowance, balanceOf) to make sure\r\n    // that the allowance is actually present in the account!\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\r\n        return s_allowances[owner][spender];\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // GasToken specifics\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    uint8 constant public decimals = 2;\r\n    string constant public name = \"Gastoken.io\";\r\n    string constant public symbol = \"GST1\";\r\n\r\n    // We start our storage at this location. The EVM word at this location\r\n    // contains the number of stored words. The stored words follow at\r\n    // locations (STORAGE_LOCATION_ARRAY+1), (STORAGE_LOCATION_ARRAY+2), ...\r\n    uint256 constant STORAGE_LOCATION_ARRAY = 0xDEADBEEF;\r\n\r\n\r\n    // totalSupply is the number of words we have in storage\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        uint256 storage_location_array = STORAGE_LOCATION_ARRAY;\r\n        assembly {\r\n            supply := sload(storage_location_array)\r\n        }\r\n    }\r\n\r\n    // Mints `value` new sub-tokens (e.g. cents, pennies, ...) by filling up\r\n    // `value` words of EVM storage. The minted tokens are owned by the\r\n    // caller of this function.\r\n    function mint(uint256 value) public {\r\n        uint256 storage_location_array = STORAGE_LOCATION_ARRAY;  // can't use constants inside assembly\r\n\r\n        if (value == 0) {\r\n            return;\r\n        }\r\n\r\n        // Read supply\r\n        uint256 supply;\r\n        assembly {\r\n            supply := sload(storage_location_array)\r\n        }\r\n\r\n        // Set memory locations in interval [l, r]\r\n        uint256 l = storage_location_array + supply + 1;\r\n        uint256 r = storage_location_array + supply + value;\r\n        assert(r >= l);\r\n\r\n        for (uint256 i = l; i <= r; i++) {\r\n            assembly {\r\n                sstore(i, 1)\r\n            }\r\n        }\r\n\r\n        // Write updated supply & balance\r\n        assembly {\r\n            sstore(storage_location_array, add(supply, value))\r\n        }\r\n        s_balances[msg.sender] += value;\r\n    }\r\n\r\n    function freeStorage(uint256 value) internal {\r\n        uint256 storage_location_array = STORAGE_LOCATION_ARRAY;  // can't use constants inside assembly\r\n\r\n        // Read supply\r\n        uint256 supply;\r\n        assembly {\r\n            supply := sload(storage_location_array)\r\n        }\r\n\r\n        // Clear memory locations in interval [l, r]\r\n        uint256 l = storage_location_array + supply - value + 1;\r\n        uint256 r = storage_location_array + supply;\r\n        for (uint256 i = l; i <= r; i++) {\r\n            assembly {\r\n                sstore(i, 0)\r\n            }\r\n        }\r\n\r\n        // Write updated supply\r\n        assembly {\r\n            sstore(storage_location_array, sub(supply, value))\r\n        }\r\n    }\r\n\r\n    // Frees `value` sub-tokens (e.g. cents, pennies, ...) belonging to the\r\n    // caller of this function by clearing value words of EVM storage, which\r\n    // will trigger a partial gas refund.\r\n    function free(uint256 value) public returns (bool success) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        freeStorage(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens. Returns how many tokens were freed.\r\n    // Otherwise, identical to free.\r\n    function freeUpTo(uint256 value) public returns (uint256 freed) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        freeStorage(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return value;\r\n    }\r\n\r\n    // Frees `value` sub-tokens owned by address `from`. Requires that `msg.sender`\r\n    // has been approved by `from`.\r\n    function freeFrom(address from, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            return false;\r\n        }\r\n\r\n        freeStorage(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens owned by address `from`. Returns how many tokens were freed.\r\n    // Otherwise, identical to `freeFrom`.\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            value = spender_allowance;\r\n        }\r\n\r\n        freeStorage(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return value;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeFromUpTo\",\"outputs\":[{\"name\":\"freed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeUpTo\",\"outputs\":[{\"name\":\"freed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "GasToken1", "CompilerVersion": "v0.4.20+commit.3155dd80", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://814e4e76e31471bb35c564b5fa7168f3094feb8b51738e7895e9b727701d2765"}