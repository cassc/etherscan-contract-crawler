{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ncontract Ownable {\r\n    // Only use HD Managed wallet for this owner address.\r\n    // This ensures enhanced security and key management.\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"New owner cannot be the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\ncontract NativeBridgeFromEthereum is Ownable {\r\n    IERC20 private _APM = IERC20(0xC8C424B91D8ce0137bAB4B832B7F7D154156BA6c);\r\n\r\n    // Events for logging\r\n    event SentToRAPM(address indexed sender, uint256 amount);\r\n    event RetrievedFromRAPM(address indexed to, uint256 amount);\r\n    event EmergencyERC20Recovered(address indexed token, uint256 amount);\r\n\r\n    // Getter for the APM address\r\n    function getAPMAddress() public view returns (address) {\r\n        return address(_APM);\r\n    }\r\n\r\n    // Function to transfer ETH to the RAPM chain\r\n    // Note: Reentrancy attack protection is not necessary here as\r\n    // it is handled by external validation nodes.\r\n    function sendToRAPM(uint256 amount) public {\r\n        uint256 allowance = _APM.allowance(msg.sender, address(this));\r\n        require(allowance >= amount, \"Insufficient allowance. Please approve tokens before transferring.\");\r\n\r\n        require(_APM.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n        emit SentToRAPM(msg.sender, amount);\r\n    }\r\n\r\n    // Function to return assets from RAPM to the Ethereum chain\r\n    function retrieveFromRAPM(address to, uint256 amount) public onlyOwner {\r\n        require(to != address(0), \"Invalid address: zero address\");\r\n        require(_APM.transfer(to, amount), \"Transfer failed\");\r\n        emit RetrievedFromRAPM(to, amount);\r\n    }\r\n\r\n    // Getter to check the allowance of tokens for this contract by a specific user\r\n    function checkTokenAllowance(address owner) public view returns (uint256) {\r\n        return _APM.allowance(owner, address(this));\r\n    }\r\n\r\n    // Function to recover ERC20 tokens\r\n    function emergencyRecoverERC20(IERC20 token, uint256 amount) public onlyOwner {\r\n        require(address(token) != address(0), \"Invalid token: zero address\");\r\n        require(token.transfer(msg.sender, amount), \"Recovery failed\");\r\n        emit EmergencyERC20Recovered(address(token), amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyERC20Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RetrievedFromRAPM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentToRAPM\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"checkTokenAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRecoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPMAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveFromRAPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendToRAPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NativeBridgeFromEthereum", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://32e2afa474955223ad0ace0dc03969148006e77c38afb610cec317f867c1f1db"}