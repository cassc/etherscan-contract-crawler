{"SourceCode": "{\"CMTA20.sol\":{\"content\":\"/*\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\\n */\\n\\npragma solidity ^0.5.3;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IIssuable.sol\\\";\\nimport \\\"./IDestroyable.sol\\\";\\nimport \\\"./IReassignable.sol\\\";\\nimport \\\"./IIdentifiable.sol\\\";\\nimport \\\"./IContactable.sol\\\";\\nimport \\\"./IRuleEngine.sol\\\";\\n\\n/**\\n * @title CMTA20\\n * @dev CMTA20 contract\\n *\\n * @author S\u00e9bastien Krafft - \\u003csebastien.krafft@mtpelerin.com\\u003e\\n *\\n * errors:\\n * CM01: Attempt to reassign from an original address which is 0x0\\n * CM02: Attempt to reassign to a replacement address is 0x0\\n * CM03: Attempt to reassign to replacement address which is the same as the original address\\n * CM04: Transfer rejected by Rule Engine\\n * CM05: Attempt to reassign from an original address which does not have any tokens\\n * CM06: Cannot call destroy with owner address contained in parameter\\n */\\n\\n\\ncontract CMTA20 is ERC20, Ownable, Pausable, IContactable, IIdentifiable, IIssuable, IDestroyable, IReassignable {\\n  using SafeMath for uint256;\\n\\n  /* Constants */\\n  uint8 constant TRANSFER_OK = 0;\\n  uint8 constant TRANSFER_REJECTED_PAUSED = 1;\\n\\n  string constant TEXT_TRANSFER_OK = \\\"No restriction\\\";\\n  string constant TEXT_TRANSFER_REJECTED_PAUSED = \\\"All transfers paused\\\";\\n\\n  string public name;\\n  string public symbol;\\n  string public contact;\\n  mapping (address =\\u003e bytes) internal identities;\\n  IRuleEngine public ruleEngine;\\n\\n  // solium-disable-next-line uppercase\\n  uint8 constant public decimals = 0;\\n\\n  constructor(string memory _name, string memory _symbol, string memory _contact) public {\\n    name = _name;\\n    symbol = _symbol;\\n    contact = _contact;\\n  }\\n\\n  event LogRuleEngineSet(address indexed newRuleEngine);\\n\\n  /**\\n  * Purpose\\n  * Set optional rule engine by owner\\n  *\\n  * @param _ruleEngine - the rule engine that will approve/reject transfers\\n  */\\n  function setRuleEngine(IRuleEngine _ruleEngine) external onlyOwner {\\n    ruleEngine = _ruleEngine;\\n    emit LogRuleEngineSet(address(_ruleEngine));\\n  }\\n\\n  /**\\n  * Purpose\\n  * Set contact point for shareholders\\n  *\\n  * @param _contact - the contact information for the shareholders\\n  */\\n  function setContact(string calldata _contact) external onlyOwner {\\n    contact = _contact;\\n    emit LogContactSet(_contact);\\n  }\\n\\n  /**\\n  * Purpose\\n  * Retrieve identity of a potential/actual shareholder\\n  */\\n  function identity(address shareholder) external view returns (bytes memory) {\\n    return identities[shareholder];\\n  }\\n\\n  /**\\n  * Purpose\\n  * Set identity of a potential/actual shareholder. Can only be called by the potential/actual shareholder himself. Has to be encrypted data.\\n  *\\n  * @param _identity - the potential/actual shareholder identity\\n  */\\n  function setMyIdentity(bytes calldata _identity) external {\\n    identities[msg.sender] = _identity;\\n  }\\n\\n  /**\\n  * Purpose:\\n  * Issue tokens on the owner address\\n  *\\n  * @param _value - amount of newly issued tokens\\n  */\\n  function issue(uint256 _value) public onlyOwner {\\n    _balances[owner] = _balances[owner].add(_value);\\n    _totalSupply = _totalSupply.add(_value);\\n\\n    emit Transfer(address(0), owner, _value);\\n    emit LogIssued(_value);\\n  }\\n\\n  /**\\n  * Purpose:\\n  * Redeem tokens on the owner address\\n  *\\n  * @param _value - amount of redeemed tokens\\n  */\\n  function redeem(uint256 _value) public onlyOwner {\\n    _balances[owner] = _balances[owner].sub(_value);\\n    _totalSupply = _totalSupply.sub(_value);\\n\\n    emit Transfer(owner, address(0), _value);\\n    emit LogRedeemed(_value);\\n  }\\n\\n  /**\\n  * @dev check if _value token can be transferred from _from to _to\\n  * @param _from address The address which you want to send tokens from\\n  * @param _to address The address which you want to transfer to\\n  * @param _value uint256 the amount of tokens to be transferred\\n  */\\n  function canTransfer(address _from, address _to, uint256 _value) public view returns (bool) {\\n    if (paused()) {\\n      return false;\\n    }\\n    if (address(ruleEngine) != address(0)) {\\n      return ruleEngine.validateTransfer(_from, _to, _value);\\n    }\\n    return true;\\n  }\\n\\n  /**\\n  * @dev check if _value token can be transferred from _from to _to\\n  * @param _from address The address which you want to send tokens from\\n  * @param _to address The address which you want to transfer to\\n  * @param _value uint256 the amount of tokens to be transferred\\n  * @return code of the rejection reason\\n  */\\n  function detectTransferRestriction (address _from, address _to, uint256 _value) public view returns (uint8) {\\n    if (paused()) {\\n      return TRANSFER_REJECTED_PAUSED;\\n    }\\n    if (address(ruleEngine) != address(0)) {\\n      return ruleEngine.detectTransferRestriction(_from, _to, _value);\\n    }\\n    return TRANSFER_OK;\\n  }\\n\\n  /**\\n  * @dev returns the human readable explaination corresponding to the error code returned by detectTransferRestriction\\n  * @param _restrictionCode The error code returned by detectTransferRestriction\\n  * @return The human readable explaination corresponding to the error code returned by detectTransferRestriction\\n  */\\n  function messageForTransferRestriction (uint8 _restrictionCode) external view returns (string memory) {\\n    if (_restrictionCode == TRANSFER_OK) {\\n      return TEXT_TRANSFER_OK;\\n    } else if (_restrictionCode == TRANSFER_REJECTED_PAUSED) {\\n      return TEXT_TRANSFER_REJECTED_PAUSED;\\n    } else if (address(ruleEngine) != address(0)) {\\n      return ruleEngine.messageForTransferRestriction(_restrictionCode);\\n    }\\n  }\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\\n    if (address(ruleEngine) != address(0)) {\\n      require(ruleEngine.validateTransfer(msg.sender, _to, _value), \\\"CM04\\\");\\n      return super.transfer(_to, _value);\\n    } else {\\n      return super.transfer(_to, _value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\\n    if (address(ruleEngine) != address(0)) {\\n      require(ruleEngine.validateTransfer(_from, _to, _value), \\\"CM04\\\");\\n      return super.transferFrom(_from, _to, _value);\\n    } else {\\n      return super.transferFrom(_from, _to, _value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   *\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseAllowance(address _spender, uint256 _addedValue) public whenNotPaused returns (bool)\\n  {\\n    return super.increaseAllowance(_spender, _addedValue);\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   *\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseAllowance(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool)\\n  {\\n    return super.decreaseAllowance(_spender, _subtractedValue);\\n  }\\n\\n  /**\\n  * Purpose:\\n  * To withdraw tokens from the original address and\\n  * transfer those tokens to the replacement address.\\n  * Use in cases when e.g. investor loses access to his account.\\n  *\\n  * Conditions:\\n  * Throw error if the `original` address supplied is not a shareholder.\\n  * Only issuer can execute this function.\\n  *\\n  * @param original - original address\\n  * @param replacement - replacement address\\n    */\\n  function reassign(address original, address replacement) external onlyOwner whenNotPaused {\\n    require(original != address(0), \\\"CM01\\\");\\n    require(replacement != address(0), \\\"CM02\\\");\\n    require(original != replacement, \\\"CM03\\\");\\n    uint256 originalBalance = _balances[original];\\n    require(originalBalance != 0, \\\"CM05\\\");\\n    _balances[replacement] = _balances[replacement].add(originalBalance);\\n    _balances[original] = 0;\\n    emit Transfer(original, replacement, originalBalance);\\n    emit LogReassigned(original, replacement, originalBalance);\\n  }\\n\\n  /**\\n  * Purpose;\\n  * To destroy issued tokens.\\n  *\\n  * Conditions:\\n  * Only issuer can execute this function.\\n  *\\n  * @param shareholders - list of shareholders\\n  */\\n  function destroy(address[] calldata shareholders) external onlyOwner {\\n    for (uint256 i = 0; i\\u003cshareholders.length; i++) {\\n      require(shareholders[i] != owner, \\\"CM06\\\");\\n      uint256 shareholderBalance = _balances[shareholders[i]];\\n      _balances[owner] = _balances[owner].add(shareholderBalance);\\n      _balances[shareholders[i]] = 0;\\n      emit Transfer(shareholders[i], owner, shareholderBalance);\\n    }\\n    emit LogDestroyed(shareholders);\\n  }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) internal _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See `_burn` and `_approve`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\\n\"},\"IContactable.sol\":{\"content\":\"/* \\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\n */\\n\\npragma solidity ^0.5.3;\\n\\n/**\\n * @title IContactable\\n * @dev IContactable interface\\n *\\n * @author S\u00e9bastien Krafft - \\u003csebastien.krafft@mtpelerin.com\\u003e\\n *\\n **/\\n\\n\\ninterface IContactable {\\n  function contact() external view returns (string memory);\\n  function setContact(string calldata _contact) external;\\n\\n  /**\\n  * Purpose:\\n  * This event is emitted when the contact information is changed\\n  *\\n  * @param contact - new contact information\\n  */\\n  event LogContactSet(string contact);\\n}\\n\"},\"IDestroyable.sol\":{\"content\":\"/* \\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\n */\\n\\npragma solidity ^0.5.3;\\n\\n/**\\n * @title IDestroyable\\n * @dev IDestroyable interface\\n *\\n * @author S\u00e9bastien Krafft - \\u003csebastien.krafft@mtpelerin.com\\u003e\\n *\\n **/\\n \\n\\ninterface IDestroyable {\\n  /**\\n  * Purpose;\\n  * To destroy issued tokens.\\n  *\\n  * Conditions:\\n  * Only issuer can execute this function.\\n  *\\n  * @param shareholders - list of shareholders\\n  */\\n  function destroy(address[] calldata shareholders) external;\\n\\n  /**\\n  * Purpose:\\n  * This event is emitted when issued tokens are destroyed.\\n  *\\n  * @param shareholders - list of shareholders of destroyed tokens\\n  */\\n  event LogDestroyed(address[] shareholders);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IIdentifiable.sol\":{\"content\":\"/* \\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\n */\\n \\npragma solidity ^0.5.3;\\n\\n/**\\n * @title IIdentifiable\\n * @dev IIdentifiable interface\\n *\\n * @author S\u00e9bastien Krafft - \\u003csebastien.krafft@mtpelerin.com\\u003e\\n *\\n **/\\n\\n\\ninterface IIdentifiable {\\n  function identity(address shareholder) external view returns (bytes memory);\\n  function setMyIdentity(bytes calldata _identity) external;\\n}\\n\"},\"IIssuable.sol\":{\"content\":\"/* \\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\n */\\n \\npragma solidity ^0.5.3;\\n\\n/**\\n * @title IIssuable\\n * @dev IIssuable interface\\n *\\n * @author S\u00e9bastien Krafft - \\u003csebastien.krafft@mtpelerin.com\\u003e\\n *\\n **/\\n\\n\\ninterface IIssuable {\\n  function issue(uint256 value) external;\\n  function redeem(uint256 value) external;\\n  /**\\n  * Purpose:\\n  * This event is emitted when new tokens are issued.\\n  *\\n  * @param value - amount of newly issued tokens\\n  */\\n  event LogIssued(uint256 value);\\n\\n  /**\\n  * Purpose:\\n  * This event is emitted when tokens are redeemed.\\n  *\\n  * @param value - amount of redeemed tokens\\n  */\\n  event LogRedeemed(uint256 value);\\n}\\n\"},\"IReassignable.sol\":{\"content\":\"/* \\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\n */\\n \\npragma solidity ^0.5.3;\\n\\n/**\\n * @title IReassignable\\n * @dev IReassignable interface\\n *\\n * @author S\u00e9bastien Krafft - \\u003csebastien.krafft@mtpelerin.com\\u003e\\n *\\n **/\\n \\n\\ninterface IReassignable {\\n  /**\\n  * Purpose:\\n  * To withdraw tokens from the original address and\\n  * transfer those tokens to the replacement address.\\n  * Use in cases when e.g. investor loses access to his account.\\n  *\\n  * Conditions:\\n  * Throw error if the `original` address supplied is not a shareholder.\\n  * Throw error if the \\u0027replacement\\u0027 address already holds tokens.\\n  * Original address MUST NOT be reused again.\\n  * Only issuer can execute this function.\\n  *\\n  * @param original - original address\\n  * @param replacement - replacement address\\n    */\\n  function reassign(\\n    address original,\\n    address replacement\\n  ) \\n    external;\\n\\n  /**\\n  * Purpose:\\n  * This event is emitted when tokens are withdrawn from one address\\n  * and issued to a new one.\\n  *\\n  * @param original - original address\\n  * @param replacement - replacement address\\n  * @param value - amount transfered from original to replacement\\n  */\\n  event LogReassigned(\\n    address indexed original,\\n    address indexed replacement,\\n    uint256 value\\n  );\\n}\\n\"},\"IRule.sol\":{\"content\":\"/* \\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\n */\\n\\npragma solidity ^0.5.3;\\n\\n/**\\n * @title IRule\\n * @dev IRule interface.\\n **/\\ninterface IRule {\\n  function isTransferValid(\\n    address _from, address _to, uint256 _amount)\\n  external view returns (bool isValid);\\n\\n  function detectTransferRestriction(\\n    address _from, address _to, uint256 _amount)\\n  external view returns (uint8);\\n\\n  function canReturnTransferRestrictionCode(uint8 _restrictionCode) external view returns (bool);\\n  function messageForTransferRestriction(uint8 _restrictionCode) external view returns (string memory);\\n}\\n\"},\"IRuleEngine.sol\":{\"content\":\"/* \\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\n * https://cmta.ch\\n *\\n * This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\n */\\n \\npragma solidity ^0.5.3;\\n\\n\\nimport \\\"./IRule.sol\\\";\\n\\n/**\\n * @title IRuleEngine\\n * @dev IRuleEngine \\n **/\\n\\n\\ninterface IRuleEngine {\\n\\n  function setRules(IRule[] calldata rules) external;\\n  function ruleLength() external view returns (uint256);\\n  function rule(uint256 ruleId) external view returns (IRule);\\n  function rules() external view returns(IRule[] memory);\\n\\n  function validateTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount)\\n  external view returns (bool);\\n\\n  function detectTransferRestriction (\\n    address _from,\\n    address _to,\\n    uint256 _value)\\n  external view returns (uint8);\\n\\n  function messageForTransferRestriction (uint8 _restrictionCode) external view returns (string memory);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n * errors\\n * OW01: Sender is not owner\\n * OW02: Trying to set owner to 0x0\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"OW01\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0), \\\"OW02\\\");\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./PauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is PauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"},\"PauserRole.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract PauserRole {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    constructor () internal {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n}\\n\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account\\u0027s access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contact\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"original\",\"type\":\"address\"},{\"name\":\"replacement\",\"type\":\"address\"}],\"name\":\"reassign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identity\",\"type\":\"bytes\"}],\"name\":\"setMyIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contact\",\"type\":\"string\"}],\"name\":\"setContact\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ruleEngine\",\"type\":\"address\"}],\"name\":\"setRuleEngine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shareholders\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ruleEngine\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_contact\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newRuleEngine\",\"type\":\"address\"}],\"name\":\"LogRuleEngineSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"original\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"replacement\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogReassigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholders\",\"type\":\"address[]\"}],\"name\":\"LogDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contact\",\"type\":\"string\"}],\"name\":\"LogContactSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "CMTA20", "CompilerVersion": "v0.5.3+commit.10d17f24", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000135365636f6e6461727920706c6163656d656e740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c41420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c696e666f40636d74612e63680000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MPL-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5da046d6c5d400046c4c6a148752477ac4c8b6a46b406ce29cb70f48b4663b0f"}