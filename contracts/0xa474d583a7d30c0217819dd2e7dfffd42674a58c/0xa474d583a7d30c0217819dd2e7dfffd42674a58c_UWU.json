{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IUniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"src/UWU.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20} from \\\"@oz/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@oz/access/Ownable.sol\\\";\\nimport \\\"./IUniswap.sol\\\";\\n\\n/**\\n * \u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2864\u28e2\u281f\u2881\u28f4\u28fe\u287f\u280b\u2889\u2831\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2811\u2812\u2826\u2884\u28c0\u28f4\u281f\u28a1\u28e0\u28fc\u28ff\u287f\u28b3\u28c4\u2840\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u287f\u2803\u28e0\u28ff\u28ff\u283f\u2802\u2800\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b2\u287f\u280b\u28b0\u28fe\u28ff\u28ff\u285f\u2800\u2800\u2808\u2819\u2886\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u285c\u283b\u28f7\u28fe\u28ff\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28c1\u28f0\u28b8\u28ff\u28bb\u281f\u2880\u2800\u2800\u2800\u2800\u2800\u2801\\n * \u2800\u2800\u2800\u2800\u2830\u2800\u2800\u2899\u287f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28ff\u28ef\u2840\u2800\u2883\u2800\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u280e\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u28a0\u28f7\u2840\u2800\u2800\u2800\u2800\u2840\u2804\u2800\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2811\u2800\u28e2\u2844\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2870\u2803\u2880\u2804\u2800\u2800\u2800\u2800\u28fc\u287f\u2846\u28b8\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28b7\u2844\u2800\u2800\u2800\u2831\u2840\u2830\u2840\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u28b8\u28e7\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2821\u28a2\u280b\u2800\u2800\u2800\u2800\u28fc\u285f\u2800\u28c7\u28b8\u2846\u2800\u2800\u2800\u2844\u2800\u28bf\u2800\u28b3\u2844\u2800\u2800\u2800\u28b3\u2800\u28b3\u2800\u2800\u2800\u2808\u28ff\u28ff\u28ff\u28ff\u28f7\u28d8\u285f\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2880\u2807\u2800\u2800\u2800\u2800\u28f8\u287f\u28a4\u2824\u2838\u2878\u28f7\u2800\u2800\u2800\u28b1\u2800\u28fe\u2864\u2824\u28bf\u2864\u2880\u2840\u2800\u28a7\u2818\u2846\u2800\u2800\u2800\u28b8\u285f\u283b\u28bf\u281f\u28ff\u28f7\u2844\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u285e\u2800\u2800\u2800\u2800\u28b0\u287f\u28a0\u2807\u2800\u2800\u28b3\u28ff\u2887\u2800\u2800\u2808\u2847\u28ff\u2847\u2800\u2800\u283b\u28c4\u2800\u2800\u2818\u2846\u2847\u2800\u2800\u2800\u2800\u28c7\u2880\u284f\u2800\u28ff\u287f\u28c4\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u28b0\u2801\u2800\u2800\u2800\u2800\u28ff\u2801\u28c4\u28c0\u28c0\u2840\u2808\u28bf\u285c\u2844\u2800\u2800\u28b9\u28ff\u2847\u2810\u2884\u28c0\u2818\u28a7\u2840\u2800\u2839\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u28f7\u28f6\u28ff\u2847\u28b9\u2847\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u283e\u2800\u2800\u2800\u2800\u28b8\u28e7\u28fe\u281f\u2889\u28fd\u28ff\u28e6\u2808\u28b7\u2858\u28c6\u2800\u2838\u285f\u28f7\u28f6\u281f\u281b\u28bb\u28f7\u28e6\u28c0\u2800\u28bb\u2800\u2800\u2800\u2800\u28b8\u28cf\u28e9\u28fc\u28ff\u2847\u2808\u28f7\u2800\u2800\\n * \u2800\u2800\u2800\u2803\u2800\u2800\u2800\u2800\u2800\u28ff\u287f\u2801\u2800\u28e0\u28fe\u28ff\u28ff\u2800\u2808\u28bf\u283a\u2846\u2800\u28e7\u28b8\u2800\u2800\u2880\u28f9\u28ff\u28ff\u28ff\u28f7\u28fc\u28e4\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u28ff\u2800\u2800\\n * \u2800\u2800\u28e0\u2804\u28c0\u2800\u2800\u2800\u28a0\u28ff\u2847\u2800\u2800\u28bb\u28bb\u28df\u28bf\u2800\u2800\u2808\u2823\u2808\u2813\u283e\u2800\u2800\u2800\u28ff\u28ff\u28bf\u28ff\u28ff\u2818\u2847\u285e\u2800\u2800\u28a0\u28fe\u28ff\u28ff\u28ff\u284f\u2800\u2800\u28b9\u2800\u2800\\n * \u2800\u2800\u281b\u2800\u28ff\u2800\u2800\u2800\u28b8\u28ff\u28ff\u2840\u2800\u2808\u2803\u2810\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28c4\u28d0\u28e0\u280f\u28a0\u28ff\u2801\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u28b8\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u28b9\u2846\u2830\u2840\u28b8\u285f\u2829\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u2803\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u281f\u2800\u2800\u2800\u2818\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u288e\u28ff\u2840\u28b1\u289e\u28c1\u28c0\u287f\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u281e\u284f\u287c\u2800\u2800\u2800\u28fe\u28ff\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2808\u283f\u283b\u2847\u2800\u2800\u2812\u2822\u28b5\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28fd\u2801\u2800\u2800\u28a0\u287f\u28b9\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2840\u2800\u2800\u2800\u2800\u2800\u2800\u285f\u28e6\u2840\u2800\u2800\u2800\u2808\u2813\u2884\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28bf\u2847\u2800\u2800\u2844\u28f8\u28c7\u28fc\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2840\u2800\u2800\u2800\u2800\u2800\u28b0\u2807\u28ff\u28b8\u28e6\u2840\u2800\u2800\u2800\u2800\u2808\u2832\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u28c0\u2864\u2812\u2889\u2874\u2803\u28f8\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u2803\u2864\u280a\u2801\u2809\u2811\u2884\u2800\u2800\u2800\\n * \u2847\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u28ff\u28fe\u28ff\u28bf\u2832\u28c4\u2800\u2800\u2800\u2800\u2818\u281f\u28e6\u28e4\u28f4\u2852\u2809\u2880\u2860\u2816\u2809\u2800\u28e0\u2803\u2800\u28e0\u28ff\u28ff\u287f\u2801\u280a\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u28ff\u281b\u28bf\u2808\u28a2\u280f\u2800\u2800\u2800\u2800\u2800\u28f0\u28cf\u28c0\u28ff\u2817\u280a\u2801\u2800\u2800\u28e0\u28fe\u2803\u2880\u2874\u283f\u281b\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2880\u2807\u2800\u2808\u28a0\u2803\u2800\u2800\u2800\u2800\u2800\u28b0\u281f\u2801\u2800\u28b9\u2887\u2800\u28c0\u2834\u280a\u2871\u2825\u2814\u280b\u2800\u2800\u28b0\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u285f\u2800\u2880\u2874\u2801\u2800\u2800\u2800\u2800\u2800\u28a0\u285f\u2800\u2800\u28f0\u28bf\u2858\u28fe\u2845\u2800\u2800\u2800\u2800\u2880\u2804\u2800\u28a0\u280f\u2880\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u28f0\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u2803\u2880\u287e\u2847\u2818\u283b\u287f\u28b7\u2840\u2800\u2800\u2812\u2801\u2800\u28a0\u280f\u2880\u280f\u28f8\u2803\u28bb\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n * \u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u28fe\u28f9\u28ff\u2800\u2800\u2800\u2800\u2800\u28a0\u280f\u2889\u2800\u285e\u28f0\u2847\u2800\u28f4\u28e5\u281e\u28b7\u2800\u2800\u2800\u2800\u28e0\u280e\u2800\u2838\u28f6\u280b\u28e0\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n */\\ncontract UWU is IERC20, Ownable {\\n    string private constant _name = \\\"MENTALLYSANE\\\";\\n    string private constant _symbol = \\\"UWU\\\";\\n    uint8 private constant _decimals = 9;\\n\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant _tTotal = 1_000_000_000 * 10 ** _decimals;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n    uint256 private _redisFeeOnBuy = 0;\\n    uint256 private _taxFeeOnBuy = 25;\\n    uint256 private _redisFeeOnSell = 0;\\n    uint256 private _taxFeeOnSell = 30;\\n\\n    uint256 private _redisFee = _redisFeeOnSell;\\n    uint256 private _taxFee = _taxFeeOnSell;\\n\\n    uint256 private _previousredisFee = _redisFee;\\n    uint256 private _previoustaxFee = _taxFee;\\n\\n    mapping(address => bool) public bots;\\n    mapping(address => uint256) public _buyMap;\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    bool private tradingOpen = false;\\n    bool private inSwap = false;\\n    bool private swapEnabled = true;\\n\\n    uint256 public _maxTxAmount = 10_000_000 * 10 ** _decimals;\\n    uint256 public _maxWalletSize = 10_000_000 * 10 ** _decimals;\\n    uint256 public _swapTokensAtAmount = 10_000 * 10 ** _decimals;\\n\\n    uint256 public deployBlock;\\n\\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor() Ownable(msg.sender) {\\n        _rOwned[msg.sender] = _rTotal;\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        deployBlock = block.number;\\n\\n        emit Transfer(address(0), msg.sender, _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(\\n            amount <= _allowances[sender][msg.sender],\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _allowances[sender][msg.sender] -= amount;\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender]);\\n        _transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) private view returns (uint256) {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount / currentRate;\\n    }\\n\\n    function removeAllFee() private {\\n        if (_redisFee == 0 && _taxFee == 0) return;\\n\\n        _previousredisFee = _redisFee;\\n        _previoustaxFee = _taxFee;\\n\\n        _redisFee = 0;\\n        _taxFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _redisFee = _previousredisFee;\\n        _taxFee = _previoustaxFee;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if (from != owner() && to != owner()) {\\n            //Trade start check\\n            if (!tradingOpen) {\\n                require(\\n                    from == owner(),\\n                    \\\"TOKEN: This account cannot send tokens until trading is enabled\\\"\\n                );\\n            }\\n\\n            require(amount <= _maxTxAmount, \\\"TOKEN: Max Transaction Limit\\\");\\n            require(\\n                !bots[from] && !bots[to],\\n                \\\"TOKEN: Your account is blacklisted!\\\"\\n            );\\n\\n            if (to != uniswapV2Pair) {\\n                require(\\n                    balanceOf(to) + amount < _maxWalletSize,\\n                    \\\"TOKEN: Balance exceeds wallet size!\\\"\\n                );\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\\n\\n            if (contractTokenBalance >= _maxTxAmount) {\\n                contractTokenBalance = _maxTxAmount;\\n            }\\n\\n            if (\\n                canSwap &&\\n                !inSwap &&\\n                from != uniswapV2Pair &&\\n                swapEnabled &&\\n                !_isExcludedFromFee[from] &&\\n                !_isExcludedFromFee[to]\\n            ) {\\n                swapTokensForEth(contractTokenBalance);\\n                uint256 contractETHBalance = address(this).balance;\\n                if (contractETHBalance > 0) {\\n                    _sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        bool takeFee = true;\\n\\n        //Transfer Tokens\\n        if (\\n            (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||\\n            (from != uniswapV2Pair && to != uniswapV2Pair)\\n        ) {\\n            takeFee = false;\\n        } else {\\n            //Set Fee for Buys\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\\n                _redisFee = _redisFeeOnBuy;\\n                _taxFee = _taxFeeOnBuy;\\n            }\\n\\n            //Set Fee for Sells\\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\\n                _redisFee = _redisFeeOnSell;\\n                _taxFee = _taxFeeOnSell;\\n            }\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _sendETHToFee(uint256 amount) private {\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    function kawaii(bool _tradingOpen) public onlyOwner {\\n        tradingOpen = _tradingOpen;\\n    }\\n\\n    function manualswap() public onlyOwner {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (contractTokenBalance >= _maxTxAmount) {\\n            contractTokenBalance = _maxTxAmount;\\n        }\\n        if (contractTokenBalance > 0) {\\n            swapTokensForEth(contractTokenBalance);\\n        }\\n    }\\n\\n    function manualsend() public onlyOwner {\\n        _sendETHToFee(address(this).balance);\\n    }\\n\\n    function blockBots(address[] memory bots_) public onlyOwner {\\n        for (uint256 i = 0; i < bots_.length; i++) {\\n            bots[bots_[i]] = true;\\n        }\\n    }\\n\\n    function unblockBot(address notbot) public onlyOwner {\\n        bots[notbot] = false;\\n    }\\n\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) removeAllFee();\\n        _transferStandard(sender, recipient, amount);\\n        if (!takeFee) restoreAllFee();\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tTeam\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeTeam(tTeam);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _takeTeam(uint256 tTeam) private {\\n        uint256 currentRate = _getRate();\\n        uint256 rTeam = tTeam * currentRate;\\n        _rOwned[address(this)] = _rOwned[address(this)] + rTeam;\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal - rFee;\\n        _tFeeTotal = _tFeeTotal + tFee;\\n    }\\n\\n    receive() external payable {}\\n\\n    function _getValues(\\n        uint256 tAmount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(\\n            tAmount,\\n            _redisFee,\\n            _taxFee\\n        );\\n        uint256 currentRate = _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            tTeam,\\n            currentRate\\n        );\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\\n    }\\n\\n    function _getTValues(\\n        uint256 tAmount,\\n        uint256 redisFee,\\n        uint256 taxFee\\n    ) private pure returns (uint256, uint256, uint256) {\\n        uint256 tFee = (tAmount * redisFee) / 100;\\n        uint256 tTeam = (tAmount * taxFee) / 100;\\n        uint256 tTransferAmount = tAmount - tFee - tTeam;\\n        return (tTransferAmount, tFee, tTeam);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tTeam,\\n        uint256 currentRate\\n    ) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount * currentRate;\\n        uint256 rFee = tFee * currentRate;\\n        uint256 rTeam = tTeam * currentRate;\\n        uint256 rTransferAmount = rAmount - rFee - rTeam;\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function setFee(\\n        uint256 redisFeeOnBuy,\\n        uint256 redisFeeOnSell,\\n        uint256 taxFeeOnBuy,\\n        uint256 taxFeeOnSell\\n    ) public onlyOwner {\\n        _redisFeeOnBuy = redisFeeOnBuy;\\n        _redisFeeOnSell = redisFeeOnSell;\\n        _taxFeeOnBuy = taxFeeOnBuy;\\n        _taxFeeOnSell = taxFeeOnSell;\\n    }\\n\\n    function setMinSwapTokensThreshold(\\n        uint256 swapTokensAtAmount\\n    ) public onlyOwner {\\n        _swapTokensAtAmount = swapTokensAtAmount;\\n    }\\n\\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\\n        swapEnabled = _swapEnabled;\\n    }\\n\\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\\n        _maxTxAmount = maxTxAmount;\\n    }\\n\\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\\n        _maxWalletSize = maxWalletSize;\\n    }\\n\\n    function removeTaxes() public onlyOwner {\\n        require(block.number >= deployBlock + 10, \\\"Not elapsed\\\");\\n        setFee(0, 0, 0, 0);\\n    }\\n\\n    function excludeMultipleAccountsFromFees(\\n        address[] calldata accounts,\\n        bool excluded\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _isExcludedFromFee[accounts[i]] = excluded;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@oz/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"kawaii\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UWU", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}