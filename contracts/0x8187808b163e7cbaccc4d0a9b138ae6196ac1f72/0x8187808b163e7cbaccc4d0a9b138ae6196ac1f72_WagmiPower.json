{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/WagmiPower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract WagmiPower {\\r\\n\\r\\n    address public immutable wagmi;\\r\\n    address public immutable ice;\\r\\n    address public immutable nice;\\r\\n    address public immutable v2pair;\\r\\n\\r\\n    /**\\r\\n     * @dev The multiplier equals to ice.balanceOf(nice) / nice.totalSupply() with 1e18 BPS\\r\\n     */\\r\\n    uint256 public constant NICE_MULTIPLIER = 82079452713910313409;\\r\\n    uint256 public constant BPS = 1e18;\\r\\n\\r\\n    constructor(\\r\\n        address _wagmi,\\r\\n        address _ice,\\r\\n        address _nice,\\r\\n        address _v2pair\\r\\n    ) {\\r\\n        wagmi = _wagmi;\\r\\n        ice = _ice;\\r\\n        nice = _nice;\\r\\n        v2pair = _v2pair;\\r\\n    }\\r\\n\\r\\n    function balanceOfAll(address account) external view returns (uint256 powah) {\\r\\n        if (wagmi != address(0))\\r\\n            powah += safeBalanceOf(wagmi, account);\\r\\n        if (ice != address(0))\\r\\n            powah += safeBalanceOf(ice, account) * 69;\\r\\n        if (nice != address(0))\\r\\n            powah += safeBalanceOf(nice, account) * NICE_MULTIPLIER / BPS;\\r\\n        if (v2pair != address(0))\\r\\n            powah += safeBalanceOf(v2pair, account) * safeBalanceOf(ice, v2pair) / IERC20(v2pair).totalSupply() * 2 * 69;\\r\\n    }\\r\\n\\r\\n    function balanceOfWagmi(address account) external view returns (uint256 powah) {\\r\\n        if (wagmi != address(0))\\r\\n            powah += safeBalanceOf(wagmi, account);\\r\\n    }\\r\\n\\r\\n    function safeBalanceOf(address token, address owner) private view returns (uint256 balance) {\\r\\n        (bool success, bytes memory data) = token.staticcall(\\r\\n            abi.encodeWithSelector(IERC20.balanceOf.selector, owner)\\r\\n        );\\r\\n        require(success && data.length >= 32);\\r\\n        return abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wagmi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_v2pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powah\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfWagmi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powah\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wagmi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WagmiPower", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000092cc36d66e9d739d50673d1f27929a371fb83a67000000000000000000000000f16e81dce15b08f326220742020379b855b87df9000000000000000000000000ff3ac80c1caa08cbd43a7e90d20c398d54c7342f00000000000000000000000094b86ca6f7a495930fe7f552eb9e4cbb5ef2b736", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}