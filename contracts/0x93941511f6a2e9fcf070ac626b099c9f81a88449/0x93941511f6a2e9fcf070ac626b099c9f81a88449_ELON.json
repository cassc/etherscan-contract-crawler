{"SourceCode": "// Telegram - https://t.me/elon_muskErc\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\npragma solidity ^0.8.12;\r\n\r\nabstract contract Context {\r\n\r\n  function _msgSender() internal view virtual returns (address) {\r\n\r\n    return msg.sender;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n\r\n  address private _owner;\r\n\r\n  address private _previousOwner;\r\n\r\n  event OwnershipTransferred(\r\n\r\n    address indexed previousOwner,\r\n\r\n    address indexed newOwner\r\n\r\n  );\r\n\r\n \r\n\r\n  constructor() {\r\n\r\n    address msgSender = _msgSender();\r\n\r\n    _owner = msgSender;\r\n\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n\r\n  }\r\n\r\n\r\n\r\n  function owner() public view returns (address) {\r\n\r\n    return _owner;\r\n\r\n  }\r\n\r\n \r\n\r\n  modifier onlyOwner() {\r\n\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n\r\n    emit OwnershipTransferred(_owner, address(0));\r\n\r\n    _owner = address(0);\r\n\r\n  }\r\n\r\n \r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n\r\n    _owner = newOwner;\r\n\r\n  }\r\n\r\n \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n \r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n \r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n \r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n \r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n \r\n\r\n  function transferFrom(\r\n\r\n    address sender,\r\n\r\n    address recipient,\r\n\r\n    uint256 amount\r\n\r\n  ) external returns (bool);\r\n\r\n \r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(\r\n\r\n    address indexed owner,\r\n\r\n    address indexed spender,\r\n\r\n    uint256 value\r\n\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n  function createPair(address tokenA, address tokenB)\r\n\r\n    external\r\n\r\n    returns (address pair);\r\n\r\n}\r\n\r\n \r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n    uint256 amountIn,\r\n\r\n    uint256 amountOutMin,\r\n\r\n    address[] calldata path,\r\n\r\n    address to,\r\n\r\n    uint256 deadline\r\n\r\n  ) external;\r\n\r\n \r\n\r\n  function factory() external pure returns (address);\r\n\r\n \r\n\r\n  function WETH() external pure returns (address);\r\n\r\n \r\n\r\n  function addLiquidityETH(\r\n\r\n    address token,\r\n\r\n    uint256 amountTokenDesired,\r\n\r\n    uint256 amountTokenMin,\r\n\r\n    uint256 amountETHMin,\r\n\r\n    address to,\r\n\r\n    uint256 deadline\r\n\r\n  )\r\n\r\n    external\r\n\r\n    payable\r\n\r\n    returns (\r\n\r\n      uint256 amountToken,\r\n\r\n      uint256 amountETH,\r\n\r\n      uint256 liquidity\r\n\r\n    );\r\n\r\n}\r\n\r\n \r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n \r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n  }\r\n\r\n \r\n\r\n  function sub(\r\n\r\n    uint256 a,\r\n\r\n    uint256 b,\r\n\r\n    string memory errorMessage\r\n\r\n  ) internal pure returns (uint256) {\r\n\r\n    require(b <= a, errorMessage);\r\n\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n \r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    uint256 c = a * b;\r\n\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n \r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n\r\n  }\r\n\r\n \r\n\r\n  function div(\r\n\r\n    uint256 a,\r\n\r\n    uint256 b,\r\n\r\n    string memory errorMessage\r\n\r\n  ) internal pure returns (uint256) {\r\n\r\n    require(b > 0, errorMessage);\r\n\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\ncontract ELON is Context, IERC20, Ownable {\r\n\r\n \r\n\r\n  using SafeMath for uint256;\r\n\r\n \r\n\r\n  string private constant _name = \"ELON MUSK\"; \r\n\r\n  string private constant _symbol = \"ELON\"; \r\n\r\n  uint8 private constant _decimals = 9;\r\n\r\n \r\n\r\n  mapping(address => uint256) private _rOwned;\r\n\r\n  mapping(address => uint256) private _tOwned;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  mapping(address => bool) private _isExcludedFromFee;\r\n\r\n  uint256 private constant MAX = ~uint256(0);\r\n\r\n\r\n\r\n  uint256 private constant _tTotal = 1000000000 * 10**9; \r\n\r\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n  uint256 private _tFeeTotal;\r\n\r\n \r\n\r\n  //Buy Fee\r\n\r\n  uint256 private _feeOnBuy = 0; \r\n\r\n  uint256 private _taxOnBuy = 10;  \r\n\r\n \r\n\r\n  //Sell Fee\r\n\r\n  uint256 private _feeOnSell = 0; \r\n\r\n  uint256 private _taxOnSell = 10; \r\n\r\n\r\n\r\n  uint256 public totalFees;\r\n\r\n \r\n\r\n  //Original Fee\r\n\r\n  uint256 private _redisFee = _feeOnSell;\r\n\r\n  uint256 private _taxFee = _taxOnSell;\r\n\r\n \r\n\r\n  uint256 private _previousredisFee = _redisFee;\r\n\r\n  uint256 private _previoustaxFee = _taxFee;\r\n\r\n \r\n\r\n  mapping(address => uint256) private cooldown;\r\n\r\n \r\n\r\n  address payable private _developmentWalletAddress = payable(0x5A8Dc4b3EB57e71ddaD90a10b317fB138232b297);\r\n\r\n  address payable private _marketingWalletAddress = payable(0x5A8Dc4b3EB57e71ddaD90a10b317fB138232b297);\r\n\r\n \r\n\r\n  IUniswapV2Router02 public uniswapV2Router;\r\n\r\n  address public uniswapV2Pair;\r\n\r\n \r\n\r\n  bool private tradingOpen;\r\n\r\n  bool private inSwap = false;\r\n\r\n  bool private swapEnabled = true;\r\n\r\n \r\n\r\n  uint256 public _maxTxAmount = 20000000 * 10**9;\r\n\r\n  uint256 public _maxWalletSize = 20000000 * 10**9; \r\n\r\n  uint256 public _swapTokensAtAmount = 10000 * 10**9; \r\n\r\n \r\n\r\n  event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n\r\n  modifier lockTheSwap {\r\n\r\n    inSwap = true;\r\n\r\n    _;\r\n\r\n    inSwap = false;\r\n\r\n  }\r\n\r\n \r\n\r\n  constructor() {\r\n\r\n \r\n\r\n    _rOwned[_msgSender()] = _rTotal;\r\n\r\n \r\n\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    uniswapV2Router = _uniswapV2Router;\r\n\r\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\r\n      .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n \r\n\r\n    _isExcludedFromFee[owner()] = true;\r\n\r\n    _isExcludedFromFee[address(this)] = true;\r\n\r\n    _isExcludedFromFee[_developmentWalletAddress] = true;\r\n\r\n    _isExcludedFromFee[_marketingWalletAddress] = true;\r\n\r\n \r\n\r\n \r\n\r\n    emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n  }\r\n\r\n \r\n\r\n  function name() public pure returns (string memory) {\r\n\r\n    return _name;\r\n\r\n  }\r\n\r\n \r\n\r\n  function symbol() public pure returns (string memory) {\r\n\r\n    return _symbol;\r\n\r\n  }\r\n\r\n \r\n\r\n  function decimals() public pure returns (uint8) {\r\n\r\n    return _decimals;\r\n\r\n  }\r\n\r\n \r\n\r\n  function totalSupply() public pure override returns (uint256) {\r\n\r\n    return _tTotal;\r\n\r\n  }\r\n\r\n \r\n\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n\r\n    return tokenFromReflection(_rOwned[account]);\r\n\r\n  }\r\n\r\n \r\n\r\n  function transfer(address recipient, uint256 amount)\r\n\r\n    public\r\n\r\n    override\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    _transfer(_msgSender(), recipient, amount);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n  function allowance(address owner, address spender)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    override\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    return _allowances[owner][spender];\r\n\r\n  }\r\n\r\n \r\n\r\n  function approve(address spender, uint256 amount)\r\n\r\n    public\r\n\r\n    override\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    _approve(_msgSender(), spender, amount);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n  function transferFrom(\r\n\r\n    address sender,\r\n\r\n    address recipient,\r\n\r\n    uint256 amount\r\n\r\n  ) public override returns (bool) {\r\n\r\n    _transfer(sender, recipient, amount);\r\n\r\n    _approve(\r\n\r\n      sender,\r\n\r\n      _msgSender(),\r\n\r\n      _allowances[sender][_msgSender()].sub(\r\n\r\n        amount,\r\n\r\n        \"ERC20: transfer amount exceeds allowance\"\r\n\r\n      )\r\n\r\n    );\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n  function tokenFromReflection(uint256 rAmount)\r\n\r\n    private\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    require(\r\n\r\n      rAmount <= _rTotal,\r\n\r\n      \"Amount must be less than total reflections\"\r\n\r\n    );\r\n\r\n    uint256 currentRate = _getRate();\r\n\r\n    return rAmount.div(currentRate);\r\n\r\n  }\r\n\r\n \r\n\r\n  function removeAllFee() private {\r\n\r\n    if (_redisFee == 0 && _taxFee == 0) return;\r\n\r\n \r\n\r\n    _previousredisFee = _redisFee;\r\n\r\n    _previoustaxFee = _taxFee;\r\n\r\n \r\n\r\n    _redisFee = 0;\r\n\r\n    _taxFee = 0;\r\n\r\n  }\r\n\r\n \r\n\r\n  function restoreAllFee() private {\r\n\r\n    _redisFee = _previousredisFee;\r\n\r\n    _taxFee = _previoustaxFee;\r\n\r\n  }\r\n\r\n \r\n\r\n  function _approve(\r\n\r\n    address owner,\r\n\r\n    address spender,\r\n\r\n    uint256 amount\r\n\r\n  ) private {\r\n\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n\r\n    emit Approval(owner, spender, amount);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _transfer(\r\n\r\n    address from,\r\n\r\n    address to,\r\n\r\n    uint256 amount\r\n\r\n  ) private {\r\n\r\n    require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n    require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n \r\n\r\n    if (from != owner() && to != owner()) {\r\n\r\n \r\n\r\n      //Trade start check\r\n\r\n      if (!tradingOpen) {\r\n\r\n        require(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n\r\n      }\r\n\r\n \r\n\r\n      require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n\r\n \r\n\r\n      if(to != uniswapV2Pair) {\r\n\r\n        require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n\r\n      }\r\n\r\n \r\n\r\n      uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n      bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\n \r\n\r\n      if(contractTokenBalance >= _maxTxAmount)\r\n\r\n      {\r\n\r\n        contractTokenBalance = _maxTxAmount;\r\n\r\n      }\r\n\r\n \r\n\r\n      if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n\r\n        swapTokensForEth(contractTokenBalance);\r\n\r\n        uint256 contractETHBalance = address(this).balance;\r\n\r\n        if (contractETHBalance > 0) {\r\n\r\n          sendETHToFee(address(this).balance);\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n \r\n\r\n    bool takeFee = true;\r\n\r\n \r\n\r\n    //Transfer Tokens\r\n\r\n    if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n\r\n      takeFee = false;\r\n\r\n    } else {\r\n\r\n \r\n\r\n      //Set Fee for Buys\r\n\r\n      if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n\r\n        _redisFee = _feeOnBuy;\r\n\r\n        _taxFee = _taxOnBuy;\r\n\r\n      }\r\n\r\n \r\n\r\n      //Set Fee for Sells\r\n\r\n      if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n\r\n        _redisFee = _feeOnSell;\r\n\r\n        _taxFee = _taxOnSell;\r\n\r\n      }\r\n\r\n \r\n\r\n    }\r\n\r\n \r\n\r\n    _tokenTransfer(from, to, amount, takeFee);\r\n\r\n  }\r\n\r\n \r\n\r\n  function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n\r\n    address[] memory path = new address[](2);\r\n\r\n    path[0] = address(this);\r\n\r\n    path[1] = uniswapV2Router.WETH();\r\n\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n      tokenAmount,\r\n\r\n      0,\r\n\r\n      path,\r\n\r\n      address(this),\r\n\r\n      block.timestamp\r\n\r\n    );\r\n\r\n  }\r\n\r\n \r\n\r\n  function sendETHToFee(uint256 amount) private {\r\n\r\n    _developmentWalletAddress.transfer(amount.div(2));\r\n\r\n    _marketingWalletAddress.transfer(amount.div(2));\r\n\r\n  }\r\n\r\n \r\n\r\n  function setTrading(bool _tradingOpen) public onlyOwner {\r\n\r\n    tradingOpen = _tradingOpen;\r\n\r\n  }\r\n\r\n \r\n\r\n  function manualswap() external {\r\n\r\n    require(_msgSender() == _developmentWalletAddress || _msgSender() == _marketingWalletAddress);\r\n\r\n    uint256 contractBalance = balanceOf(address(this));\r\n\r\n    swapTokensForEth(contractBalance);\r\n\r\n  }\r\n\r\n \r\n\r\n  function manualsend() external {\r\n\r\n    require(_msgSender() == _developmentWalletAddress || _msgSender() == _marketingWalletAddress);\r\n\r\n    uint256 contractETHBalance = address(this).balance;\r\n\r\n    sendETHToFee(contractETHBalance);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _tokenTransfer(\r\n\r\n    address sender,\r\n\r\n    address recipient,\r\n\r\n    uint256 amount,\r\n\r\n    bool takeFee\r\n\r\n  ) private {\r\n\r\n    if (!takeFee) removeAllFee();\r\n\r\n    _transferStandard(sender, recipient, amount);\r\n\r\n    if (!takeFee) restoreAllFee();\r\n\r\n  }\r\n\r\n \r\n\r\n  function _transferStandard(\r\n\r\n    address sender,\r\n\r\n    address recipient,\r\n\r\n    uint256 tAmount\r\n\r\n  ) private {\r\n\r\n    (\r\n\r\n      uint256 rAmount,\r\n\r\n      uint256 rTransferAmount,\r\n\r\n      uint256 rFee,\r\n\r\n      uint256 tTransferAmount,\r\n\r\n      uint256 tFee,\r\n\r\n      uint256 tTeam\r\n\r\n    ) = _getValues(tAmount);\r\n\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n    _takeTeam(tTeam);\r\n\r\n    _reflectFee(rFee, tFee);\r\n\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _takeTeam(uint256 tTeam) private {\r\n\r\n    uint256 currentRate = _getRate();\r\n\r\n    uint256 rTeam = tTeam.mul(currentRate);\r\n\r\n    _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\r\n    _rTotal = _rTotal.sub(rFee);\r\n\r\n    _tFeeTotal = _tFeeTotal.add(tFee);\r\n\r\n  }\r\n\r\n \r\n\r\n  receive() external payable {}\r\n\r\n \r\n\r\n  function _getValues(uint256 tAmount)\r\n\r\n    private\r\n\r\n    view\r\n\r\n    returns (\r\n\r\n      uint256,\r\n\r\n      uint256,\r\n\r\n      uint256,\r\n\r\n      uint256,\r\n\r\n      uint256,\r\n\r\n      uint256\r\n\r\n    )\r\n\r\n  {\r\n\r\n    (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n\r\n      _getTValues(tAmount, _redisFee, _taxFee);\r\n\r\n    uint256 currentRate = _getRate();\r\n\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n\r\n      _getRValues(tAmount, tFee, tTeam, currentRate);\r\n\r\n \r\n\r\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _getTValues(\r\n\r\n    uint256 tAmount,\r\n\r\n    uint256 redisFee,\r\n\r\n    uint256 taxFee\r\n\r\n  )\r\n\r\n    private\r\n\r\n    pure\r\n\r\n    returns (\r\n\r\n      uint256,\r\n\r\n      uint256,\r\n\r\n      uint256\r\n\r\n    )\r\n\r\n  {\r\n\r\n    uint256 tFee = tAmount.mul(redisFee).div(100);\r\n\r\n    uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n\r\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n\r\n \r\n\r\n    return (tTransferAmount, tFee, tTeam);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _getRValues(\r\n\r\n    uint256 tAmount,\r\n\r\n    uint256 tFee,\r\n\r\n    uint256 tTeam,\r\n\r\n    uint256 currentRate\r\n\r\n  )\r\n\r\n    private\r\n\r\n    pure\r\n\r\n    returns (\r\n\r\n      uint256,\r\n\r\n      uint256,\r\n\r\n      uint256\r\n\r\n    )\r\n\r\n  {\r\n\r\n    uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n    uint256 rFee = tFee.mul(currentRate);\r\n\r\n    uint256 rTeam = tTeam.mul(currentRate);\r\n\r\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n\r\n \r\n\r\n    return (rAmount, rTransferAmount, rFee);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _getRate() private view returns (uint256) {\r\n\r\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\r\n \r\n\r\n    return rSupply.div(tSupply);\r\n\r\n  }\r\n\r\n \r\n\r\n  function _getCurrentSupply() private view returns (uint256, uint256) {\r\n\r\n    uint256 rSupply = _rTotal;\r\n\r\n    uint256 tSupply = _tTotal;\r\n\r\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\r\n \r\n\r\n    return (rSupply, tSupply);\r\n\r\n  }\r\n\r\n \r\n\r\n  function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n\r\n    _feeOnBuy = redisFeeOnBuy;\r\n\r\n    _feeOnSell = redisFeeOnSell;\r\n\r\n    _taxOnBuy = taxFeeOnBuy;\r\n\r\n    _taxOnSell = taxFeeOnSell;\r\n\r\n    totalFees = _feeOnBuy + _feeOnSell + _taxOnBuy + _taxOnSell;\r\n\r\n    require(totalFees <= 100, \"Must keep fees at 100% or less\");\r\n\r\n  }\r\n\r\n \r\n\r\n  //Set minimum tokens required to swap.\r\n\r\n  function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n\r\n    _swapTokensAtAmount = swapTokensAtAmount;\r\n\r\n  }\r\n\r\n \r\n\r\n  //Set minimum tokens required to swap.\r\n\r\n  function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n\r\n    swapEnabled = _swapEnabled;\r\n\r\n  }\r\n\r\n \r\n\r\n \r\n\r\n  //Set max buy amount \r\n\r\n  function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n\r\n    _maxTxAmount = maxTxAmount;\r\n\r\n  }\r\n\r\n\r\n\r\n  //Set max wallet amount \r\n\r\n  function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n\r\n    _maxWalletSize = maxWalletSize;\r\n\r\n  }\r\n\r\n\r\n\r\n  function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n\r\n    for(uint256 i = 0; i < accounts.length; i++) {\r\n\r\n      _isExcludedFromFee[accounts[i]] = excluded;\r\n\r\n    }\r\n\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ELON", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5df364d1fccbd8889681a0fc3ab1605d89a84597780979ec4c6ae6d49df2c989"}