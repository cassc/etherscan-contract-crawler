{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-10-24\r\n*/\r\n\r\n/******************************************************************        \r\n\r\n\ud83e\ude84\ud83e\ude84\u2728\ud83e\ude84\ud83e\ude84\r\n\r\nAn alien race called \"The Korbs\" have landed on earth and require their nfts to be minted to be awoken from their space ships, best of all the mint is free!\r\n\r\n\ud83e\ude84\ud83e\ude84\u2728\ud83e\ude84\ud83e\ude84\r\n\r\n To build the power to go home their token $DREAM must reach 100million mc. So we are banding together to get them out of their space ship and help them build their $DREAM power to go home.\r\n\r\n\ud83e\ude84\ud83e\ude84\u2728\ud83e\ude84\ud83e\ude84\r\n\r\nT.me/dreamlandportal\r\n\r\nKorbs.nfts2.me\r\n\r\nX.com/dreamlanderc20\r\n\r\n******************************************************************/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() private view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract DREAM is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    string private constant _name = \"Dreamland Power\";\r\n    string private constant _symbol = \"DREAM\";\r\n    uint256 private constant _totalSupply = 1_000_000_000 * 10**18;\r\n    uint256 public maxWalletlimit = 2_00_00_001 * 10**18; // 2% Maxwalletlimit\r\n    uint256 public minSwap = 1_000_000 * 10**18; \r\n    uint8 private constant _decimals = 18;\r\n\r\n    IUniswapV2Router02 immutable uniswapV2Router;\r\n    address immutable uniswapV2Pair;\r\n    address immutable WETH;\r\n \r\n    address payable public marketingWallet;\r\n    address payable public DevWallet;\r\n    uint256 public BuyTax;\r\n    uint256 public SellTax;\r\n    uint8 private inSwapAndLiquify;\r\n    \r\n    uint256 public taxChangeInterval = 10 minutes;\r\n    uint256 public lastTaxChangeTimestamp;\r\n    uint8 public currentTaxPeriod = 0;\r\n    \r\n    bool public TradingEnabled = false;\r\n\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedFromWalletLimit;\r\n\r\n\r\n    constructor() {\r\n        uniswapV2Router = IUniswapV2Router02( \r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        WETH = uniswapV2Router.WETH();\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            WETH\r\n        );\r\n\r\n        //initial tax values\r\n        BuyTax = 6;\r\n        SellTax = 6;\r\n\r\n        marketingWallet = payable(0xBC4ecA72B61249cEBA894dafBe6E24acb9fE472b); //Marketing Wallet Address\r\n        DevWallet = payable(0xB0bcD16C0C67D3faF2B10De1DA671d86029842d6); // Dev Wallet Address\r\n        _balance[DevWallet] = _totalSupply;\r\n        _isExcludedFromFees[marketingWallet] = true;\r\n        _isExcludedFromFees[msg.sender] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(uniswapV2Router)] = true;\r\n        _isExcludedFromWalletLimit[marketingWallet] = true;\r\n        _isExcludedFromWalletLimit[msg.sender] = true;\r\n        _isExcludedFromWalletLimit[address(this)] = true;\r\n        _isExcludedFromWalletLimit[address(uniswapV2Router)] = true;\r\n\r\n        _allowances[address(this)][address(uniswapV2Router)] = type(uint256)\r\n            .max;\r\n        _allowances[msg.sender][address(uniswapV2Router)] = type(uint256).max;\r\n        _allowances[marketingWallet][address(uniswapV2Router)] = type(uint256)\r\n            .max;\r\n\r\n        emit Transfer(address(0), DevWallet, _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function ExcludeFromFees(address holder, bool exempt) external onlyOwner {\r\n        _isExcludedFromFees[holder] = exempt;\r\n    }\r\n    \r\n    function ChangeMinSwap(uint256 NewMinSwapAmount) external onlyOwner {\r\n        minSwap = NewMinSwapAmount * 10**18;\r\n    }\r\n\r\n    function ChangeMarketingWalletAddress(address newAddress) external onlyOwner() {\r\n        marketingWallet = payable(newAddress);\r\n    }\r\n    \r\n    function ChangeDevWalletAddress(address newAddress) external onlyOwner() {\r\n        DevWallet = payable(newAddress);\r\n    }\r\n    \r\n    function EnableTrading() external onlyOwner {\r\n        TradingEnabled = true;\r\n        lastTaxChangeTimestamp = block.timestamp;\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function DisableWalletLimit() external onlyOwner {\r\n        maxWalletlimit = _totalSupply;\r\n    }\r\n    \r\n    function ExcludeFromWalletLimit(address holder, bool exempt) external onlyOwner {\r\n        _isExcludedFromWalletLimit[holder] = exempt;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 1e9, \"Min transfer amt\");\r\n        require(TradingEnabled || _isExcludedFromFees[from] || _isExcludedFromFees[to], \"Not Enabled\");\r\n        \r\n        \r\n        uint256 elapsedTime = block.timestamp - lastTaxChangeTimestamp;\r\n        \r\n        if (elapsedTime >= taxChangeInterval && currentTaxPeriod < 2) {\r\n            currentTaxPeriod++;\r\n                if (currentTaxPeriod == 1) {\r\n                    //Initial Tax values\r\n                    BuyTax = 6;\r\n                    SellTax = 6;\r\n                } else if (currentTaxPeriod == 2) {\r\n                    // After 15 minutes, set buyTax to 2% and sellTax to 2%\r\n                    BuyTax = 0;\r\n                    SellTax = 6;\r\n                }\r\n                // Update the last tax change timestamp    \r\n                lastTaxChangeTimestamp = block.timestamp;\r\n            }\r\n\r\n\r\n\r\n        uint256 _tax;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            _tax = 0;\r\n        } else {\r\n\r\n            if (inSwapAndLiquify == 1) {\r\n                //No tax transfer\r\n                _balance[from] -= amount;\r\n                _balance[to] += amount;\r\n\r\n                emit Transfer(from, to, amount);\r\n                return;\r\n            }\r\n\r\n            if (from == uniswapV2Pair) {\r\n                    _tax = BuyTax;\r\n                if (!_isExcludedFromWalletLimit[from] || !_isExcludedFromWalletLimit[to]) {\r\n                require(balanceOf(to).add(amount) <= maxWalletlimit);\r\n                }\r\n            } else if (to == uniswapV2Pair) {\r\n                uint256 tokensToSwap = _balance[address(this)];\r\n                if (tokensToSwap > minSwap && inSwapAndLiquify == 0) {\r\n                    inSwapAndLiquify = 1;\r\n                    address[] memory path = new address[](2);\r\n                    path[0] = address(this);\r\n                    path[1] = WETH;\r\n                    uniswapV2Router\r\n                        .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                            tokensToSwap,\r\n                            0,\r\n                            path,\r\n                            address(this),\r\n                            block.timestamp\r\n                        );\r\n                    inSwapAndLiquify = 0;\r\n                }\r\n                    _tax = SellTax;\r\n\r\n            } else {\r\n                _tax = 0;\r\n            }\r\n        }\r\n        \r\n\r\n        //Is there tax for sender|receiver?\r\n        if (_tax != 0) {\r\n            //Tax transfer\r\n            uint256 taxTokens = (amount * _tax) / 100;\r\n            uint256 transferAmount = amount - taxTokens;\r\n\r\n            _balance[from] -= amount;\r\n            _balance[to] += transferAmount;\r\n            _balance[address(this)] += taxTokens;\r\n            emit Transfer(from, address(this), taxTokens);\r\n            emit Transfer(from, to, transferAmount);\r\n        } else {\r\n            //No tax transfer\r\n            _balance[from] -= amount;\r\n            _balance[to] += amount;\r\n\r\n            emit Transfer(from, to, amount);\r\n        }\r\n\r\n    uint256 amountReceived = address(this).balance;\r\n\r\n    uint256 amountETHMarketing = amountReceived.mul(50).div(100); // 50% to marketing wallet\r\n    uint256 amountETHDev = amountReceived.mul(50).div(100); // 50% to dev wallet\r\n    \r\n    if (amountETHMarketing > 0)\r\n    transferToAddressETH(marketingWallet, amountETHMarketing);\r\n    \r\n    if (amountETHDev > 0)\r\n    transferToAddressETH(DevWallet, amountETHDev);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewMinSwapAmount\",\"type\":\"uint256\"}],\"name\":\"ChangeMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DevWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"ExcludeFromWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTaxPeriod\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTaxChangeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxChangeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DREAM", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://740ab4421bfadf6f921dd572a4102b6db59bb980b02fbdc2a9a9eef9226ad9b1"}