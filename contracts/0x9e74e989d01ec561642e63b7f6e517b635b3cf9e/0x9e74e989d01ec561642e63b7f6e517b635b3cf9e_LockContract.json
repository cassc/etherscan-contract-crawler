{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITradeContract.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface ITradeContract {}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IV3SwapRouter.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVolumnSwap.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IVolumnSwap {\\n    struct CreateVolV2Params {\\n        address router;\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 minFirstAmountOut;\\n        uint16 slippage;\\n        uint32 loopTimes;\\n        address to;\\n    }\\n\\n    function createVolETHV2(CreateVolV2Params calldata params) external payable;\\n\\n    struct CreateVolV2NoSlippageParams {\\n        address router;\\n        address[] path;\\n        uint256 amountIn;\\n        uint32 loopTimes;\\n        address to;\\n    }\\n\\n    function createVolETHV2NoSlippage(\\n        CreateVolV2NoSlippageParams calldata params\\n    ) external payable;\\n\\n    struct BuyVolV2Params {\\n        address router;\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 minFirstAmountOut;\\n        uint16 slippage;\\n        address[] to;\\n    }\\n\\n    function buyVolETHV2(BuyVolV2Params calldata params) external payable;\\n\\n    struct CreateVolV3Params {\\n        address swapRouter;\\n        address[] path;\\n        uint24[] fee;\\n        uint256 amountIn;\\n        uint256 minFirstAmountOut;\\n        uint16 slippage;\\n        uint32 loopTimes;\\n        address to;\\n    }\\n\\n    function createVolETHV3(CreateVolV3Params calldata params) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH9.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/TestERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract TestERC20 is ERC20 {\\n    constructor() ERC20(\\\"TestERC20\\\", \\\"MTK\\\") {}\\n\\n    function mint(uint256 amount) external {\\n        _mint(_msgSender(), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/standard/LockContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\nIntroduction:\\n    + We are coming from the best security team in UK\\n    + This contract allows you to lock your token, lp token without avoiding scam projects\\n    + This contract is audited and KYC by best team in UK\\n    + If anyone face any errors with their projects, please contact me on discord\\n    for helping doing emergencyWithdraw function. KYC is needed to avoid scammer!\\nCheers!\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract LockContract is Ownable, ReentrancyGuard {\\n    struct LockInfo {\\n        address erc20Token;\\n        uint256 amount;\\n        uint256 unlockDate;\\n        address owner;\\n        bool isWithdraw;\\n    }\\n\\n    event StartLock(\\n        address _erc20Token,\\n        uint256 _amount,\\n        uint256 _unlockDate,\\n        address _owner\\n    );\\n    event Withdraw(\\n        uint256 _lockId,\\n        address _erc20Token,\\n        uint256 _amount,\\n        address _owner\\n    );\\n\\n    uint256 public lockId = 0;\\n    mapping(uint256 => LockInfo) public lockData;\\n\\n    function lockToken(\\n        address _erc20Token,\\n        uint256 _amount,\\n        uint256 _unlockDate\\n    ) external nonReentrant {\\n        IERC20 token = IERC20(_erc20Token);\\n\\n        bool success = token.transferFrom(_msgSender(), address(this), _amount);\\n        require(success, \\\"LockContract::can not transfer token\\\");\\n\\n        require(\\n            block.timestamp < _unlockDate,\\n            \\\"LockContract::unlock has to be greater than current time\\\"\\n        );\\n\\n        lockData[lockId] = LockInfo({\\n            erc20Token: _erc20Token,\\n            amount: _amount,\\n            unlockDate: _unlockDate,\\n            owner: _msgSender(),\\n            isWithdraw: false\\n        });\\n        lockId++;\\n    }\\n\\n    function lockLpToken(\\n        address _erc20Token,\\n        uint256 _amount,\\n        uint256 _unlockDate\\n    ) external nonReentrant {\\n        IERC20 token = IERC20(_erc20Token);\\n\\n        bool success = token.transferFrom(_msgSender(), address(this), _amount);\\n        require(success, \\\"LockContract::can not transfer token\\\");\\n\\n        require(\\n            block.timestamp < _unlockDate,\\n            \\\"LockContract::unlock has to be greater than current time\\\"\\n        );\\n\\n        lockData[lockId] = LockInfo({\\n            erc20Token: _erc20Token,\\n            amount: _amount,\\n            unlockDate: _unlockDate,\\n            owner: _msgSender(),\\n            isWithdraw: false\\n        });\\n        lockId++;\\n\\n        emit StartLock(_erc20Token, _amount, _unlockDate, _msgSender());\\n    }\\n\\n    function withdraw(uint256 _lockId) external nonReentrant {\\n        LockInfo storage _lockData = lockData[_lockId];\\n        require(_msgSender() == _lockData.owner, \\\"LockContract::not owner\\\");\\n        require(\\n            block.timestamp > _lockData.unlockDate,\\n            \\\"LockContract::not time for withdraw\\\"\\n        );\\n        require(\\n            _lockData.isWithdraw == false,\\n            \\\"LockContract::already withdraw\\\"\\n        );\\n        IERC20 token = IERC20(_lockData.erc20Token);\\n\\n        bool success = token.transfer(_msgSender(), _lockData.amount);\\n        require(success, \\\"LockContract::can not transfer token\\\");\\n\\n        _lockData.isWithdraw = true;\\n        emit Withdraw(\\n            lockId,\\n            _lockData.erc20Token,\\n            _lockData.amount,\\n            _lockData.owner\\n        );\\n    }\\n\\n    // In case, locker face some issue with their tokens, they have to contact us to execute this function\\n    // KYC is needed for this case to avoid scam projects\\n    function emergencyWithdraw(\\n        uint256 _lockId\\n    ) external nonReentrant onlyOwner {\\n        LockInfo storage _lockData = lockData[_lockId];\\n        require(\\n            _lockData.isWithdraw == false,\\n            \\\"LockContract::already withdraw\\\"\\n        );\\n        IERC20 token = IERC20(_lockData.erc20Token);\\n\\n        token.approve(address(this), type(uint256).max);\\n        bool success = token.transfer(_lockData.owner, _lockData.amount);\\n        require(success, \\\"LockContract::can not transfer token\\\");\\n\\n        _lockData.isWithdraw = true;\\n        emit Withdraw(\\n            lockId,\\n            _lockData.erc20Token,\\n            _lockData.amount,\\n            _lockData.owner\\n        );\\n    }\\n\\n    // Use only for error case\\n    function withdrawStuckToken(\\n        address _token\\n    ) external nonReentrant onlyOwner {\\n        IERC20 token = IERC20(_token);\\n        token.approve(address(this), type(uint256).max);\\n        bool success = token.transfer(\\n            _msgSender(),\\n            token.balanceOf(address(this))\\n        );\\n        require(success, \\\"LockContract::can not transfer token\\\");\\n    }\\n\\n    // Use only for error case\\n    function withdrawStuckETH() external onlyOwner {\\n        (bool success, ) = payable(_msgSender()).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"LockContract::withdraw failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/standard/MultiSend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MultiSend is Ownable {\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function batchETHSend(address[] calldata _addresses) external payable {\\n        uint256 _sendAmount = msg.value / _addresses.length;\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            (bool success, ) = payable(_addresses[i]).call{\\n                value: _sendAmount\\n            }(\\\"\\\");\\n            require(success == true, \\\"MultiSend::Batch send failed\\\");\\n        }\\n    }\\n\\n    function batchTokenSend(\\n        address _token,\\n        uint256 _amount,\\n        address[] calldata _addresses\\n    ) external {\\n        uint256 _sendAmount = _amount / _addresses.length;\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            bool success = IERC20(_token).transferFrom(\\n                _msgSender(),\\n                _addresses[i],\\n                _sendAmount\\n            );\\n            require(success == true, \\\"MultiSend::Batch send token failed\\\");\\n        }\\n    }\\n\\n    function withdraw() external payable onlyOwner {\\n        (bool success, ) = payable(_msgSender()).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"MultiSend::withdraw failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/standard/TradeContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/ITradeContract.sol\\\";\\nimport \\\"../interfaces/IV3SwapRouter.sol\\\";\\nimport \\\"../interfaces/IWETH9.sol\\\";\\n\\ncontract TradeContract is ITradeContract, Pausable, Ownable {\\n    struct BuyV2Params {\\n        address router;\\n        address[] path;\\n        uint256 amountBuyInETH;\\n        uint256 times;\\n        address to;\\n    }\\n\\n    struct ExactInputParam {\\n        address router;\\n        address[] path;\\n        uint24[] fee;\\n        uint256 amountIn;\\n        uint256 times;\\n        address to;\\n    }\\n\\n    struct SellV2Params {\\n        address router;\\n        address[] path;\\n        uint256 amountSellInTokens;\\n        uint256 times;\\n        address to;\\n    }\\n\\n    uint256 public immutable MAX_PERCENTAGE = 10000;\\n\\n    constructor() {}\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function buyV2(BuyV2Params calldata params) external payable {\\n        IWETH9 weth = IWETH9(params.path[0]);\\n        IUniswapV2Router02 router = IUniswapV2Router02(params.router);\\n\\n        if (msg.value > 0) {\\n            weth.deposit{ value: address(this).balance }();\\n        }\\n\\n        require(\\n            weth.balanceOf(address(this)) >\\n                params.amountBuyInETH * params.times,\\n            \\\"TradeContract::not enough eth\\\"\\n        );\\n\\n        weth.approve(address(router), type(uint256).max);\\n\\n        for (uint8 i = 0; i < params.times; i++) {\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                params.amountBuyInETH,\\n                0,\\n                params.path,\\n                address(this),\\n                block.timestamp + 1 minutes\\n            );\\n        }\\n    }\\n\\n    function sellV2(SellV2Params calldata params) external {\\n        IERC20 token = IERC20(params.path[params.path.length - 1]);\\n        IUniswapV2Router02 router = IUniswapV2Router02(params.router);\\n\\n        token.approve(address(router), type(uint256).max);\\n\\n        for (uint8 i = 0; i < params.times; i++) {\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                params.amountSellInTokens,\\n                0,\\n                reversePath(params.path),\\n                address(this),\\n                block.timestamp + 1 minutes\\n            );\\n        }\\n    }\\n\\n    function exactInput(ExactInputParam calldata params) external payable {\\n        IV3SwapRouter router = IV3SwapRouter(params.router);\\n        IWETH9 weth = IWETH9(params.path[0]);\\n        weth.approve(params.router, type(uint256).max);\\n\\n        if (msg.value > 0) {\\n            weth.deposit{ value: address(this).balance }();\\n        }\\n\\n        bytes memory _path = \\\"\\\";\\n\\n        for (uint8 i = 0; i < params.fee.length; i++) {\\n            _path = bytes.concat(\\n                _path,\\n                bytes20(params.path[i]),\\n                bytes3(params.fee[i]),\\n                bytes20(params.path[i + 1])\\n            );\\n        }\\n\\n        for (uint8 i = 0; i < params.times; i++) {\\n            router.exactInput(\\n                IV3SwapRouter.ExactInputParams({\\n                    path: _path,\\n                    recipient: address(this),\\n                    amountIn: params.amountIn,\\n                    amountOutMinimum: 0\\n                })\\n            );\\n        }\\n    }\\n\\n    function balance(address token) external view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function withdraw(address _weth) external onlyOwner {\\n        IWETH9 weth = IWETH9(_weth);\\n        weth.withdraw(weth.balanceOf(address(this)));\\n        _withdraw(_msgSender(), address(this).balance);\\n    }\\n\\n    function transferWeth(address _weth) external onlyOwner {\\n        IWETH9 weth = IWETH9(_weth);\\n        weth.approve(address(this), type(uint256).max);\\n        weth.transfer(_msgSender(), weth.balanceOf(address(this)));\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _withdraw(address _to, uint256 _amount) internal {\\n        (bool success, ) = payable(_to).call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"VolumnSwap::withdraw failed\\\");\\n    }\\n\\n    function reversePath(\\n        address[] calldata _array\\n    ) internal pure returns (address[] memory) {\\n        uint256 length = _array.length;\\n        address[] memory reversedArray = new address[](length);\\n        uint256 j = 0;\\n        for (uint256 i = length; i >= 1; i--) {\\n            reversedArray[j] = _array[i - 1];\\n            j++;\\n        }\\n        return reversedArray;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/standard/VolumnSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IVolumnSwap.sol\\\";\\nimport \\\"../interfaces/IV3SwapRouter.sol\\\";\\nimport \\\"../interfaces/IWETH9.sol\\\";\\n\\ncontract VolumnSwap is IVolumnSwap, Pausable, Ownable {\\n    uint256 public immutable MAX_PERCENTAGE = 10000;\\n\\n    constructor() {}\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function createVolETHV2(\\n        CreateVolV2Params calldata params\\n    ) external payable override(IVolumnSwap) whenNotPaused {\\n        require(msg.value == params.amountIn, \\\"VolumnSwap::not enough amount\\\");\\n\\n        // Avoid mev bot in first transaction\\n        IWETH9(params.path[0]).deposit{ value: address(this).balance }();\\n\\n        _createVolETHV2(params);\\n    }\\n\\n    function createVolETHV2NoSlippage(\\n        CreateVolV2NoSlippageParams calldata params\\n    ) external payable override(IVolumnSwap) whenNotPaused {\\n        require(msg.value == params.amountIn, \\\"VolumnSwap::not enough amount\\\");\\n\\n        // Avoid mev bot in first transaction\\n        IWETH9(params.path[0]).deposit{ value: address(this).balance }();\\n\\n        _createVolETHV2NoSlippage(params);\\n    }\\n\\n    function buyVolETHV2(BuyVolV2Params calldata params) external payable {\\n        require(\\n            msg.value == params.amountIn * params.to.length,\\n            \\\"VolumnSwap::not enough eth\\\"\\n        );\\n        IUniswapV2Router02 router = IUniswapV2Router02(params.router);\\n\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: params.amountIn\\n        }(\\n            (params.minFirstAmountOut * (MAX_PERCENTAGE - params.slippage)) /\\n                MAX_PERCENTAGE,\\n            params.path,\\n            params.to[0],\\n            block.timestamp + 1 minutes\\n        );\\n\\n        for (uint256 i = 1; i < params.to.length; i++) {\\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: params.amountIn\\n            }(0, params.path, params.to[i], block.timestamp + 1 minutes);\\n        }\\n    }\\n\\n    function createVolETHV3(\\n        CreateVolV3Params calldata params\\n    ) external payable override(IVolumnSwap) whenNotPaused {\\n        require(msg.value == params.amountIn, \\\"VolumnSwap::not enough amount\\\");\\n        require(\\n            params.path.length == params.fee.length + 1,\\n            \\\"VolumnSwap::not enough length\\\"\\n        );\\n        require(\\n            params.path.length <= type(uint32).max,\\n            \\\"VolumnSwap::overflow path length\\\"\\n        );\\n\\n        IWETH9(params.path[0]).deposit{ value: address(this).balance }();\\n\\n        _createVolETHV3(params);\\n    }\\n\\n    function withdraw(address _weth) external onlyOwner {\\n        IWETH9 weth = IWETH9(_weth);\\n        weth.withdraw(weth.balanceOf(address(this)));\\n        _withdraw(_msgSender(), address(this).balance);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _createVolETHV2(CreateVolV2Params calldata params) private {\\n        IUniswapV2Router02 router = IUniswapV2Router02(params.router);\\n        IERC20 token = IERC20(params.path[params.path.length - 1]);\\n        IWETH9 weth = IWETH9(params.path[0]);\\n        weth.approve(params.router, type(uint256).max);\\n        token.approve(params.router, type(uint256).max);\\n\\n        for (uint32 i = 0; i < params.loopTimes; i++) {\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                weth.balanceOf(address(this)),\\n                0,\\n                params.path,\\n                address(this),\\n                block.timestamp + 1 minutes\\n            );\\n\\n            if (i == 0) {\\n                uint256 minAmountOut = (params.minFirstAmountOut *\\n                    (MAX_PERCENTAGE - params.slippage)) / (MAX_PERCENTAGE);\\n                require(\\n                    token.balanceOf(address(this)) >= minAmountOut,\\n                    \\\"VolumnSwap::mev bot comming...\\\"\\n                );\\n            }\\n\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                token.balanceOf(address(this)),\\n                0,\\n                reversePath(params.path),\\n                address(this),\\n                block.timestamp + 1 minutes\\n            );\\n        }\\n    }\\n\\n    function _createVolETHV2NoSlippage(\\n        CreateVolV2NoSlippageParams calldata params\\n    ) private {\\n        IUniswapV2Router02 router = IUniswapV2Router02(params.router);\\n        IERC20 token = IERC20(params.path[params.path.length - 1]);\\n        IWETH9 weth = IWETH9(params.path[0]);\\n        weth.approve(params.router, type(uint256).max);\\n        token.approve(params.router, type(uint256).max);\\n\\n        for (uint32 i = 0; i < params.loopTimes; i++) {\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                weth.balanceOf(address(this)),\\n                0,\\n                params.path,\\n                address(this),\\n                block.timestamp + 1 minutes\\n            );\\n\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                token.balanceOf(address(this)),\\n                0,\\n                reversePath(params.path),\\n                address(this),\\n                block.timestamp + 1 minutes\\n            );\\n        }\\n    }\\n\\n    // 0xc35DADB65012eC5796536bD9864eD8773aBc74C4\\n    function _createVolETHV3(CreateVolV3Params calldata params) private {\\n        IV3SwapRouter router = IV3SwapRouter(params.swapRouter);\\n        IERC20 token = IERC20(params.path[params.path.length - 1]);\\n        IWETH9 weth = IWETH9(params.path[0]);\\n        weth.approve(params.swapRouter, type(uint256).max);\\n        token.approve(params.swapRouter, type(uint256).max);\\n\\n        bytes memory _path = \\\"\\\";\\n\\n        for (uint8 i = 0; i < params.fee.length; i++) {\\n            _path = bytes.concat(\\n                _path,\\n                bytes20(params.path[i]),\\n                bytes3(params.fee[i]),\\n                bytes20(params.path[i + 1])\\n            );\\n        }\\n\\n        bytes memory _reversePath = \\\"\\\";\\n\\n        for (uint8 i = uint8(params.fee.length); i >= 1; i--) {\\n            _reversePath = bytes.concat(\\n                _reversePath,\\n                bytes20(params.path[i]),\\n                bytes3(params.fee[i - 1]),\\n                bytes20(params.path[i - 1])\\n            );\\n        }\\n\\n        for (uint32 i = 0; i < params.loopTimes; i++) {\\n            router.exactInput(\\n                IV3SwapRouter.ExactInputParams({\\n                    path: _path,\\n                    recipient: address(this),\\n                    amountIn: weth.balanceOf(address(this)),\\n                    amountOutMinimum: 0\\n                })\\n            );\\n\\n            if (i == 0) {\\n                uint256 minAmountOut = (params.minFirstAmountOut *\\n                    (MAX_PERCENTAGE - params.slippage)) / (MAX_PERCENTAGE);\\n                require(\\n                    token.balanceOf(address(this)) >= minAmountOut,\\n                    \\\"VolumnSwap::mev bot comming...\\\"\\n                );\\n            }\\n\\n            router.exactInput(\\n                IV3SwapRouter.ExactInputParams({\\n                    path: _reversePath,\\n                    recipient: address(this),\\n                    amountIn: token.balanceOf(address(this)),\\n                    amountOutMinimum: 0\\n                })\\n            );\\n        }\\n    }\\n\\n    function _withdraw(address _to, uint256 _amount) internal {\\n        (bool success, ) = payable(_to).call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"VolumnSwap::withdraw failed\\\");\\n    }\\n\\n    function reversePath(\\n        address[] calldata _array\\n    ) internal pure returns (address[] memory) {\\n        uint256 length = _array.length;\\n        address[] memory reversedArray = new address[](length);\\n        uint256 j = 0;\\n        for (uint256 i = length; i >= 1; i--) {\\n            reversedArray[j] = _array[i - 1];\\n            j++;\\n        }\\n        return reversedArray;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"StartLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"lockLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockContract", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}