{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// \r\nuint256 constant RESOLUTION = 10000;\r\n\r\nuint256 constant PAYOUT_AMPLIFIER = 10 ** 24;\r\n\r\nlibrary Types {\r\n    struct Bet {\r\n        uint256 globalBetId;\r\n        uint256 playerBetId;\r\n        uint256 gameId;\r\n        uint256 rolls;\r\n        uint256 betNum;\r\n        uint256 stake;\r\n        uint256 payout;\r\n        bool complete;\r\n        uint256 opened;\r\n        uint256 closed;\r\n        uint256[50] data;\r\n        address player;\r\n    }\r\n\r\n    struct Game {\r\n        uint256 id;\r\n        bool live;\r\n        uint256 edge;\r\n        uint256 date;\r\n        address impl;\r\n        string name;\r\n    }\r\n\r\n    struct HouseGame {\r\n        uint256 betCount;\r\n        uint256[] betIds;\r\n    }\r\n\r\n    struct PlayerGame {\r\n        uint256 betCount;\r\n        uint256 wagers;\r\n        uint256 profits;\r\n        uint256 wins;\r\n        uint256 losses;\r\n    }\r\n\r\n    struct Player {\r\n        uint256 betCount;\r\n        uint256[] betIds;\r\n\r\n        uint256 wagers;\r\n        uint256 profits;\r\n\r\n        uint256 wins;\r\n        uint256 losses;\r\n    }\r\n\r\n    struct Player2 {\r\n        Player info;\r\n        mapping (uint256 => PlayerGame) games;\r\n    }\r\n}\r\n\r\n/*\r\npragma solidity ^0.8.0;\r\n\r\nuint256 constant RESOLUTION = 10000;\r\nuint256 constant PAYOUT_AMPLIFIER = 10 ** 24;\r\n\r\ntype BETCOUNT is uint32;\r\ntype GAMECOUNT is uint16;\r\ntype DATAVALUE is uint128;\r\ntype ROLLCOUNT is uint16;\r\ntype BETNUM is uint32;\r\ntype TOKENAMOUNT is uint128;\r\ntype TIMESTAMP is uint32;\r\ntype EDGEAMOUNT is uint16;\r\n\r\nlibrary Types {\r\n\r\n    function add(BETCOUNT a, uint256 b) internal pure returns (BETCOUNT) {\r\n        return BETCOUNT.wrap(uint32(uint256(BETCOUNT.unwrap(a)) + b));\r\n    }\r\n\r\n    function toUint256(BETCOUNT a) internal pure returns (uint256) {\r\n        return uint256(BETCOUNT.unwrap(a));\r\n    }\r\n\r\n    function add(GAMECOUNT a, uint256 b) internal pure returns (GAMECOUNT) {\r\n        return GAMECOUNT.wrap(uint16(uint256(GAMECOUNT.unwrap(a)) + b));\r\n    }\r\n\r\n    struct Bet {\r\n        BETCOUNT globalBetId;\r\n        BETCOUNT playerBetId;\r\n        GAMECOUNT gameId;\r\n        ROLLCOUNT rolls;\r\n        BETNUM betNum;\r\n        TOKENAMOUNT stake;\r\n        TOKENAMOUNT payout;\r\n        bool complete;\r\n        TIMESTAMP opened;\r\n        TIMESTAMP closed;\r\n        DATAVALUE[50] data;\r\n        address player;\r\n    }\r\n\r\n    struct Game {\r\n        GAMECOUNT id;\r\n        bool live;\r\n        EDGEAMOUNT edge;\r\n        TIMESTAMP date;\r\n        address impl;\r\n        string name;\r\n    }\r\n\r\n    struct HouseGame {\r\n        BETCOUNT betCount;\r\n        BETCOUNT[] betIds;\r\n    }\r\n\r\n    struct PlayerGame {\r\n        BETCOUNT betCount;\r\n        TOKENAMOUNT wagers;\r\n        TOKENAMOUNT profits;\r\n        BETCOUNT wins;\r\n        BETCOUNT losses;\r\n    }\r\n\r\n    struct Player {\r\n        BETCOUNT betCount;\r\n        BETCOUNT[] betIds;\r\n\r\n        TOKENAMOUNT wagers;\r\n        TOKENAMOUNT profits;\r\n\r\n        BETCOUNT wins;\r\n        BETCOUNT losses;\r\n\r\n        mapping (GAMECOUNT => PlayerGame) games;\r\n    }\r\n}\r\n*/\r\n\r\n// \r\ninterface IConsole {\r\n    function getGame(uint256 _id) external view returns (Types.Game memory);\r\n    function getGameByImpl(address _impl) external view returns (Types.Game memory);\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// \r\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\ncontract Console is IConsole, Ownable {\r\n    error GameNotFound(uint256 _id);\r\n\r\n    mapping (uint256 => Types.Game) public games;\r\n    mapping (address => uint256) public impls;\r\n    uint256 public id;\r\n\r\n    constructor () {}\r\n\r\n    function addGame(bool _live, string memory _name, uint256 _edge, address _impl) external onlyOwner {\r\n        Types.Game memory _game = Types.Game({\r\n            id: id,\r\n            live: _live,\r\n            name: _name,\r\n            edge: _edge,\r\n            date: block.timestamp,\r\n            impl: _impl\r\n        });\r\n\r\n        games[id] = _game;\r\n        impls[_impl] = id;\r\n        id ++;\r\n    }\r\n\r\n    function editGame(uint256 _id, bool _live, string memory _name, uint256 _edge, address _impl) external onlyOwner {\r\n        if (games[_id].date == 0) {\r\n            revert GameNotFound(_id);\r\n        }\r\n\r\n        Types.Game memory _game = Types.Game({\r\n            id: games[_id].id,\r\n            live: _live,\r\n            name: _name,\r\n            edge: _edge,\r\n            date: block.timestamp,\r\n            impl: _impl\r\n        });\r\n        games[_id] = _game;\r\n        impls[_impl] = _id;\r\n    }\r\n\r\n    function getId() external view returns (uint256) {\r\n        return id;\r\n    }\r\n\r\n    function getGame(uint256 _id) external view returns (Types.Game memory) {\r\n        return games[_id];\r\n    }\r\n\r\n    function getGameByImpl(address _impl) external view returns (Types.Game memory) {\r\n        return games[impls[_impl]];\r\n    }\r\n\r\n    function getLiveGames() external view returns (Types.Game[] memory) {\r\n        Types.Game[] memory _games;\r\n        uint256 _j = 0;\r\n        for (uint256 _i = 0; _i < id; _i++) {\r\n            Types.Game memory _game = games[_i];\r\n            if (_game.live) {\r\n                _games[_j] = _game;\r\n                _j++;\r\n            }\r\n        }\r\n        return _games;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GameNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_live\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_edge\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"addGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_live\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_edge\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"editGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"edge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"edge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Types.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"getGameByImpl\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"edge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Types.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiveGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"edge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Types.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"impls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Console", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5cdb511a0a0358184dd36c20271e6f8c2f2dd75955428f9508316d4d55f417c9"}