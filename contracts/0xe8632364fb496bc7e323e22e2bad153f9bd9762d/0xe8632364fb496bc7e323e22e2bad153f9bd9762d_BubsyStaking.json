{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BubsyStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n       _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\t\\r\\n    modifier nonReentrant() {\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\t\\t\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BubsyStaking is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\t\\r\\n    address public BUBSY;\\r\\n\\tuint256 public precisionFactor;\\r\\n\\tuint256 public undistributedReward;\\r\\n\\t\\r\\n\\tbool public contractStatus;\\r\\n\\tbool public rewardStatus;\\r\\n\\t\\r\\n\\tuint256[3] public poolDuration;\\r\\n\\tuint256[3] public poolMultiplier;\\r\\n\\tuint256[3] public BUBSYStaked;\\r\\n\\tuint256[3] public minStaking;\\r\\n\\tuint256[3] public rewardPerShare;\\r\\n\\tuint256[3] public rewardDistributedPerPool;\\r\\n\\t\\r\\n\\tstruct StakingInfo {\\r\\n\\t  uint256 stakedBUBSY; \\r\\n\\t  uint256 startTime;\\r\\n\\t  uint256 endTime;\\r\\n\\t  bool unstaked;\\r\\n\\t  uint256 pool;\\r\\n\\t  uint256 rewardClaimed;\\r\\n\\t  uint256 claimedETH;\\r\\n\\t  uint256 rewardUnclaimed;\\r\\n    }\\r\\n\\t\\r\\n\\tmapping(address => mapping(uint256 => StakingInfo)) public mapStakingInfo;\\r\\n\\tmapping(address => uint256) public stakingCount;\\r\\n\\tmapping(address => bool) public isWhitelistForSendFund;\\r\\n\\t\\r\\n\\tevent Staked(address staker, uint256 amount);\\r\\n\\tevent Unstaked(address staker, uint256 amount, uint256 reward);\\r\\n\\tevent PoolUpdated(uint256 amount);\\r\\n\\tevent RewardClaimed(address staker, uint256 amount);\\r\\n\\tevent ContractStatusUpdated(bool status);\\r\\n\\tevent RewardStatusUpdated(bool status);\\r\\n\\tevent PoolDurationUpdated(uint256 pool1, uint256 pool2, uint256 pool3);\\r\\n\\tevent PoolMultiplierUpdated(uint256 pool1Multiplier, uint256 pool2Multiplier, uint256 pool3Multiplier);\\r\\n\\tevent WhitelistStatusUpdated(address wallet, bool status);\\r\\n\\tevent ETHRescueFromContract(address receiver, uint256 amount);\\r\\n\\t\\r\\n    constructor(address _owner) {\\r\\n\\t   require(_owner != address(0), \\\"Owner:: zero address\\\");\\r\\n\\t   \\r\\n\\t   minStaking = [1 * 10**18, 1 * 10**18, 1 * 10**18];\\r\\n\\t   poolDuration = [15 days, 90 days, 365 days];\\r\\n\\t   poolMultiplier = [100, 125, 200];\\r\\n\\t   \\r\\n\\t   BUBSY = address(0xD699B83e43415B774B6ed4ce9999680F049aF2ab);\\r\\n       precisionFactor = 1 * 10**18;\\r\\n\\t   _transferOwnership(address(_owner));\\r\\n    }\\r\\n\\t\\r\\n\\treceive() external payable {}\\r\\n\\t\\r\\n\\tfunction updateContractStatus(bool status) external onlyOwner {\\r\\n\\t    require(contractStatus != status, \\\"Same status already active\\\");\\r\\n\\t\\t\\r\\n\\t\\tcontractStatus = status;\\r\\n\\t\\temit ContractStatusUpdated(status);\\r\\n  \\t}\\r\\n\\t\\r\\n\\tfunction updateRewardStatus(bool status) external onlyOwner {\\r\\n\\t    require(rewardStatus != status, \\\"Same status already active\\\");\\r\\n\\t\\t\\r\\n\\t\\trewardStatus = status;\\r\\n\\t\\tif(rewardStatus && undistributedReward > 0)\\r\\n\\t\\t{\\r\\n\\t\\t   _distributeReward(undistributedReward);\\r\\n\\t\\t   undistributedReward = 0;\\r\\n\\t\\t}\\r\\n\\t\\temit RewardStatusUpdated(status);\\r\\n  \\t}\\r\\n\\t\\r\\n\\tfunction updatePoolDuration(uint256[3] calldata newPoolDuration) external onlyOwner {\\r\\n\\t    require(newPoolDuration[0] > 0 && newPoolDuration[1] > 0 && newPoolDuration[2] > 0, \\\"Staking duration is not correct\\\");\\r\\n\\t\\t\\r\\n\\t\\tpoolDuration[0] = newPoolDuration[0];\\r\\n\\t\\tpoolDuration[1] = newPoolDuration[1];\\r\\n\\t\\tpoolDuration[2] = newPoolDuration[2];\\r\\n        emit PoolDurationUpdated(newPoolDuration[0], newPoolDuration[1], newPoolDuration[2]);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction updatePoolMultiplier(uint256[3] calldata newMultiplier) external onlyOwner {\\r\\n\\t    require(newMultiplier[0] > 0 && newMultiplier[1] > 0 && newMultiplier[2] > 0, \\\"Pool multiplier amount is not correct\\\");\\r\\n\\t\\t\\r\\n\\t\\tpoolMultiplier[0] = newMultiplier[0];\\r\\n\\t\\tpoolMultiplier[1] = newMultiplier[1];\\r\\n\\t\\tpoolMultiplier[2] = newMultiplier[2];\\r\\n        emit PoolMultiplierUpdated(newMultiplier[0], newMultiplier[1], newMultiplier[2]);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction whitelistFundWallet(address wallet, bool status) external onlyOwner {\\r\\n\\t   require(address(wallet) != address(0), \\\"Zero address\\\");\\r\\n\\t   require(isWhitelistForSendFund[address(wallet)] != status, \\\"Wallet is already the value of 'status'\\\");\\r\\n\\t   \\r\\n\\t   isWhitelistForSendFund[address(wallet)] = status;\\r\\n\\t   emit WhitelistStatusUpdated(address(wallet), status);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction rescueETH(address receiver, uint256 amount) external onlyOwner {\\r\\n\\t   require(address(receiver) != address(0), \\\"Zero address\\\");\\r\\n\\t   require(address(this).balance >= amount, \\\"Insufficient ETH balance in contract\\\");\\r\\n\\t   \\r\\n\\t   payable(address(receiver)).transfer(amount);\\r\\n\\t   emit ETHRescueFromContract(address(receiver), amount);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction stake(uint256 amount, uint256 pool) external {\\r\\n\\t    require(contractStatus, \\\"Contract is not enabled\\\");\\r\\n\\t\\trequire(IERC20(BUBSY).balanceOf(address(msg.sender)) >= amount, \\\"Balance not available for staking\\\");\\r\\n\\t\\trequire(poolDuration.length > pool, \\\"Staking pool is not correct\\\");\\r\\n\\t\\trequire(amount >= minStaking[pool], \\\"Stake amount is less than required amount\\\");\\r\\n\\t\\t\\r\\n\\t\\tuint256 count = stakingCount[address(msg.sender)];\\r\\n\\t\\t\\r\\n\\t\\tIERC20(BUBSY).safeTransferFrom(address(msg.sender), address(this), amount);\\r\\n\\t\\tBUBSYStaked[pool] += amount;\\r\\n\\t\\tstakingCount[address(msg.sender)] += 1;\\r\\n\\t\\t\\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].stakedBUBSY = amount;\\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].startTime = block.timestamp;\\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].endTime = block.timestamp + poolDuration[pool];\\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].pool = pool;\\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].rewardClaimed = (amount * rewardPerShare[pool]) / precisionFactor;\\r\\n        emit Staked(address(msg.sender), amount);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction unstake(address staker, uint256 count) external onlyOwner nonReentrant {\\r\\n\\t\\trequire(mapStakingInfo[address(staker)][count].unstaked == false, \\\"Staking already unstaked\\\");\\r\\n\\t\\trequire(stakingCount[address(staker)] > count, \\\"Staking not found\\\");\\r\\n\\t\\t\\r\\n        uint256 pending = pendingReward(address(msg.sender), count);\\r\\n\\t\\tuint256 amount = mapStakingInfo[address(msg.sender)][count].stakedBUBSY;\\r\\n\\t\\tuint256 pool = mapStakingInfo[address(msg.sender)][count].pool;\\r\\n\\t\\t\\r\\n\\t\\tBUBSYStaked[pool] -= amount; \\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].unstaked = true;\\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].rewardUnclaimed = pending;\\r\\n\\t\\t\\r\\n\\t\\tIERC20(BUBSY).safeTransfer(address(msg.sender), amount);\\r\\n\\t\\temit Unstaked(address(msg.sender), amount, pending);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction unstake(uint256 count) external nonReentrant {\\r\\n\\t    require(contractStatus, \\\"Contract is not enabled\\\");\\r\\n\\t\\trequire(mapStakingInfo[address(msg.sender)][count].unstaked == false, \\\"Staking already unstaked\\\");\\r\\n\\t\\trequire(mapStakingInfo[address(msg.sender)][count].endTime <= block.timestamp, \\\"Staking time is not over\\\");\\r\\n\\t\\trequire(stakingCount[address(msg.sender)] > count, \\\"Staking not found\\\");\\r\\n\\t\\t\\r\\n        uint256 pending = pendingReward(address(msg.sender), count);\\r\\n\\t\\tuint256 amount = mapStakingInfo[address(msg.sender)][count].stakedBUBSY;\\r\\n\\t\\tuint256 pool = mapStakingInfo[address(msg.sender)][count].pool;\\r\\n\\t\\t\\r\\n\\t\\tBUBSYStaked[pool] -= amount; \\r\\n\\t\\tmapStakingInfo[address(msg.sender)][count].unstaked = true;\\r\\n\\t\\t\\r\\n\\t\\tif(pending > 0 && address(this).balance >= pending)\\r\\n\\t\\t{\\r\\n\\t\\t   payable(address(msg.sender)).transfer(pending);\\r\\n\\t\\t   mapStakingInfo[address(msg.sender)][count].claimedETH += pending;\\r\\n\\t\\t}\\r\\n\\t\\tIERC20(BUBSY).safeTransfer(address(msg.sender), amount);\\r\\n\\t\\temit Unstaked(address(msg.sender), amount, pending);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction claimReward(uint256 count) external nonReentrant{\\r\\n\\t    require(stakingCount[address(msg.sender)] > count, \\\"Staking not found\\\");\\r\\n\\t\\trequire(contractStatus, \\\"Contract is not enabled\\\");\\r\\n\\t\\t\\r\\n\\t    uint256 pending = pendingReward(address(msg.sender), count);\\r\\n\\t\\tif(pending > 0 && address(this).balance >= pending) \\r\\n\\t\\t{\\r\\n\\t\\t\\tpayable(address(msg.sender)).transfer(pending);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tuint256 pool = mapStakingInfo[address(msg.sender)][count].pool;\\r\\n\\t\\t    uint256 amount = mapStakingInfo[address(msg.sender)][count].stakedBUBSY;\\r\\n\\t\\t\\tmapStakingInfo[address(msg.sender)][count].rewardClaimed = (amount * rewardPerShare[pool]) / precisionFactor;\\r\\n\\t\\t\\tmapStakingInfo[address(msg.sender)][count].claimedETH += pending;\\r\\n\\t\\t\\temit RewardClaimed(address(msg.sender), pending);\\r\\n\\t\\t}\\r\\n    }\\r\\n\\t\\r\\n\\tfunction pendingReward(address staker, uint256 count) public view returns (uint256) {\\r\\n\\t\\r\\n\\t   if(mapStakingInfo[address(staker)][count].stakedBUBSY > 0 && !mapStakingInfo[address(staker)][count].unstaked && stakingCount[address(staker)] > count)\\r\\n\\t   {\\r\\n\\t\\t   uint256 pool = mapStakingInfo[address(staker)][count].pool;\\r\\n\\t\\t   uint256 amount = mapStakingInfo[address(staker)][count].stakedBUBSY;\\r\\n\\t\\t   uint256 claimed = mapStakingInfo[address(staker)][count].rewardClaimed;\\r\\n\\t\\t   \\r\\n\\t\\t   uint256 pending = ((amount * rewardPerShare[pool]) / precisionFactor) - (claimed);\\r\\n\\t\\t   return pending;\\r\\n       } \\r\\n\\t   else \\r\\n\\t   {\\r\\n\\t\\t   return 0;\\r\\n\\t   }\\r\\n    }\\r\\n\\t\\r\\n\\tfunction updatePool() external payable nonReentrant {\\r\\n\\t   require(isWhitelistForSendFund[address(msg.sender)], \\\"Sender is not whitelisted for add fund\\\");\\r\\n\\t   \\r\\n\\t   if(rewardStatus)\\r\\n\\t   {\\r\\n\\t       _distributeReward(msg.value);\\r\\n\\t   }\\r\\n\\t   else\\r\\n\\t   {\\r\\n\\t       undistributedReward += msg.value;\\r\\n\\t   }\\r\\n\\t   emit PoolUpdated(msg.value);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction _distributeReward(uint256 amount) internal {\\t\\r\\n\\t   \\r\\n\\t   uint256 pool0StakedBUBSY = ((BUBSYStaked[0] * poolMultiplier[0]) / 100);\\r\\n\\t   uint256 pool1StakedBUBSY = ((BUBSYStaked[1] * poolMultiplier[1]) / 100);\\r\\n\\t   uint256 pool2StakedBUBSY = ((BUBSYStaked[2] * poolMultiplier[2]) / 100);\\r\\n\\t   uint256 totalStakedBUBSY = (pool0StakedBUBSY + pool1StakedBUBSY + pool2StakedBUBSY);\\r\\n\\t   \\r\\n\\t   if(totalStakedBUBSY > 0)\\r\\n\\t   {\\r\\n\\t      uint256 pool0Share = ((amount * pool0StakedBUBSY) / totalStakedBUBSY);\\r\\n\\t\\t  uint256 pool1Share = ((amount * pool1StakedBUBSY) / totalStakedBUBSY);\\r\\n\\t\\t  uint256 pool2Share = amount - pool0Share - pool1Share;\\r\\n\\t\\t  \\r\\n\\t\\t  rewardPerShare[0] += ((pool0Share * precisionFactor) / BUBSYStaked[0]);\\r\\n\\t\\t  rewardPerShare[1] += ((pool1Share * precisionFactor) / BUBSYStaked[1]);\\r\\n\\t\\t  rewardPerShare[2] += ((pool2Share * precisionFactor) / BUBSYStaked[2]);\\r\\n\\t\\t  \\r\\n\\t\\t  rewardDistributedPerPool[0] += pool0Share;\\r\\n\\t\\t  rewardDistributedPerPool[1] += pool1Share;\\r\\n\\t\\t  rewardDistributedPerPool[2] += pool2Share;\\r\\n\\t   }\\r\\n\\t   else\\r\\n\\t   {\\r\\n\\t      undistributedReward += amount;\\r\\n\\t   }\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ContractStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHRescueFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool3\",\"type\":\"uint256\"}],\"name\":\"PoolDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool1Multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool2Multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool3Multiplier\",\"type\":\"uint256\"}],\"name\":\"PoolMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"RewardStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUBSY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BUBSYStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistForSendFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBUBSY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardUnclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precisionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDistributedPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undistributedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"newPoolDuration\",\"type\":\"uint256[3]\"}],\"name\":\"updatePoolDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"newMultiplier\",\"type\":\"uint256[3]\"}],\"name\":\"updatePoolMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateRewardStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"whitelistFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BubsyStaking", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e6d8a62a9c463786d4b12f6273f484aa8c3875f9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}