{"SourceCode": "// File contracts/strategy/CurveVault.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\t * revert reason using the provided one.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the decimals places of the token.\r\n\t */\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n\t/**\r\n\t * @dev Indicates that the contract has been initialized.\r\n\t */\r\n\tbool private _initialized;\r\n\r\n\t/**\r\n\t * @dev Indicates that the contract is in the process of being initialized.\r\n\t */\r\n\tbool private _initializing;\r\n\r\n\t/**\r\n\t * @dev Modifier to protect an initializer function from being invoked twice.\r\n\t */\r\n\tmodifier initializer() {\r\n\t\t// If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n\t\t// inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n\t\t// contract may have been reentered.\r\n\t\trequire(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n\t\tbool isTopLevelCall = !_initializing;\r\n\t\tif (isTopLevelCall) {\r\n\t\t\t_initializing = true;\r\n\t\t\t_initialized = true;\r\n\t\t}\r\n\r\n\t\t_;\r\n\r\n\t\tif (isTopLevelCall) {\r\n\t\t\t_initializing = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n\t * {initializer} modifier, directly or indirectly.\r\n\t */\r\n\tmodifier onlyInitializing() {\r\n\t\trequire(_initializing, \"Initializable: contract is not initializing\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isConstructor() private view returns (bool) {\r\n\t\treturn !AddressUpgradeable.isContract(address(this));\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n\tfunction __Context_init() internal onlyInitializing {\r\n\t\t__Context_init_unchained();\r\n\t}\r\n\r\n\tfunction __Context_init_unchained() internal onlyInitializing {}\r\n\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n\r\n\tuint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}.\r\n\t *\r\n\t * The default value of {decimals} is 18. To select a different value for\r\n\t * {decimals} you should overload it.\r\n\t *\r\n\t * All two of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tfunction __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n\t\t__Context_init_unchained();\r\n\t\t__ERC20_init_unchained(name_, symbol_);\r\n\t}\r\n\r\n\tfunction __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n\t * overridden;\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\t\tunchecked {\r\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\t\tunchecked {\r\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n\t *\r\n\t * This internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[sender] = senderBalance - amount;\r\n\t\t}\r\n\t\t_balances[recipient] += amount;\r\n\r\n\t\temit Transfer(sender, recipient, amount);\r\n\r\n\t\t_afterTokenTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\r\n\t\t_afterTokenTransfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[account] = accountBalance - amount;\r\n\t\t}\r\n\t\t_totalSupply -= amount;\r\n\r\n\t\temit Transfer(account, address(0), amount);\r\n\r\n\t\t_afterTokenTransfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\t *\r\n\t * This internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\t/**\r\n\t * @dev Hook that is called after any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * has been transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _afterTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\tuint256[45] private __gap;\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n\tusing AddressUpgradeable for address;\r\n\r\n\tfunction safeTransfer(\r\n\t\tIERC20Upgradeable token,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\tIERC20Upgradeable token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deprecated. This function has issues similar to the ones found in\r\n\t * {IERC20-approve}, and its usage is discouraged.\r\n\t *\r\n\t * Whenever possible, use {safeIncreaseAllowance} and\r\n\t * {safeDecreaseAllowance} instead.\r\n\t */\r\n\tfunction safeApprove(\r\n\t\tIERC20Upgradeable token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\trequire(\r\n\t\t\t(value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(\r\n\t\tIERC20Upgradeable token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender) + value;\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(\r\n\t\tIERC20Upgradeable token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tunchecked {\r\n\t\t\tuint256 oldAllowance = token.allowance(address(this), spender);\r\n\t\t\trequire(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n\t\t\tuint256 newAllowance = oldAllowance - value;\r\n\t\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\t\tif (returndata.length > 0) {\r\n\t\t\t// Return data is optional\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the decimals places of the token.\r\n\t */\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}.\r\n\t *\r\n\t * The default value of {decimals} is 18. To select a different value for\r\n\t * {decimals} you should overload it.\r\n\t *\r\n\t * All two of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n\t * overridden;\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\t\tunchecked {\r\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\t\tunchecked {\r\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n\t *\r\n\t * This internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[sender] = senderBalance - amount;\r\n\t\t}\r\n\t\t_balances[recipient] += amount;\r\n\r\n\t\temit Transfer(sender, recipient, amount);\r\n\r\n\t\t_afterTokenTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\r\n\t\t_afterTokenTransfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[account] = accountBalance - amount;\r\n\t\t}\r\n\t\t_totalSupply -= amount;\r\n\r\n\t\temit Transfer(account, address(0), amount);\r\n\r\n\t\t_afterTokenTransfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\t *\r\n\t * This internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\t/**\r\n\t * @dev Hook that is called after any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * has been transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _afterTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ninterface ILiquidityGaugeStrat {\r\n\tstruct Reward {\r\n\t\taddress token;\r\n\t\taddress distributor;\r\n\t\tuint256 period_finish;\r\n\t\tuint256 rate;\r\n\t\tuint256 last_update;\r\n\t\tuint256 integral;\r\n\t}\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction claim_rewards_for(address _user, address _recipient) external;\r\n\r\n\t// // solhint-disable-next-line\r\n\t// function claim_rewards_for(address _user) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit(uint256 _value, address _addr) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_tokens(uint256 _i) external view returns (address);\r\n\r\n\tfunction withdraw(\r\n\t\tuint256 _value,\r\n\t\taddress _addr,\r\n\t\tbool _claim_rewards\r\n\t) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\r\n\r\n\tfunction balanceOf(address) external returns (uint256);\r\n\r\n\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\r\n\r\n\tfunction user_checkpoint(address _user) external returns (bool);\r\n\r\n\tfunction commit_transfer_ownership(address) external;\r\n\r\n\tfunction initialize(\r\n\t\taddress _staking_token,\r\n\t\taddress _admin,\r\n\t\taddress _SDT,\r\n\t\taddress _voting_escrow,\r\n\t\taddress _veBoost_proxy,\r\n\t\taddress _distributor,\r\n\t\taddress _vault,\r\n\t\tstring memory _symbol\r\n\t) external;\r\n\r\n\tfunction add_reward(address, address) external;\r\n\r\n\tfunction set_claimer(address) external;\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\t * revert reason using the provided one.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\tIERC20 token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deprecated. This function has issues similar to the ones found in\r\n\t * {IERC20-approve}, and its usage is discouraged.\r\n\t *\r\n\t * Whenever possible, use {safeIncreaseAllowance} and\r\n\t * {safeDecreaseAllowance} instead.\r\n\t */\r\n\tfunction safeApprove(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\trequire(\r\n\t\t\t(value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender) + value;\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tunchecked {\r\n\t\t\tuint256 oldAllowance = token.allowance(address(this), spender);\r\n\t\t\trequire(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n\t\t\tuint256 newAllowance = oldAllowance - value;\r\n\t\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\t\tif (returndata.length > 0) {\r\n\t\t\t// Return data is optional\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface ILocker {\r\n\tfunction createLock(uint256, uint256) external;\r\n\r\n\tfunction increaseAmount(uint256) external;\r\n\r\n\tfunction increaseUnlockTime(uint256) external;\r\n\r\n\tfunction release() external;\r\n\r\n\tfunction claimRewards(address, address) external;\r\n\r\n\tfunction claimFXSRewards(address) external;\r\n\r\n\tfunction execute(\r\n\t\taddress,\r\n\t\tuint256,\r\n\t\tbytes calldata\r\n\t) external returns (bool, bytes memory);\r\n\r\n\tfunction setGovernance(address) external;\r\n\r\n\tfunction voteGaugeWeight(address, uint256) external;\r\n\r\n\tfunction setAngleDepositor(address) external;\r\n\r\n\tfunction setFxsDepositor(address) external;\r\n}\r\n\r\ncontract BaseStrategy {\r\n\t/* ========== STATE VARIABLES ========== */\r\n\tILocker public locker;\r\n\taddress public governance;\r\n\taddress public rewardsReceiver;\r\n\taddress public veSDTFeeProxy;\r\n\taddress public vaultGaugeFactory;\r\n\tuint256 public constant BASE_FEE = 10_000;\r\n\tmapping(address => address) public gauges;\r\n\tmapping(address => bool) public vaults;\r\n\tmapping(address => uint256) public perfFee;\r\n\tmapping(address => address) public multiGauges;\r\n\tmapping(address => uint256) public accumulatorFee; // gauge -> fee\r\n\tmapping(address => uint256) public claimerRewardFee; // gauge -> fee\r\n\tmapping(address => uint256) public veSDTFee; // gauge -> fee\r\n\r\n\t/* ========== EVENTS ========== */\r\n\tevent Deposited(address _gauge, address _token, uint256 _amount);\r\n\tevent Withdrawn(address _gauge, address _token, uint256 _amount);\r\n\tevent Claimed(address _gauge, address _token, uint256 _amount);\r\n\tevent RewardReceiverSet(address _gauge, address _receiver);\r\n\tevent VaultToggled(address _vault, bool _newState);\r\n\tevent GaugeSet(address _gauge, address _token);\r\n\r\n\t/* ========== MODIFIERS ========== */\r\n\tmodifier onlyGovernance() {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyApprovedVault() {\r\n\t\trequire(vaults[msg.sender], \"!approved vault\");\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyGovernanceOrFactory() {\r\n\t\trequire(msg.sender == governance || msg.sender == vaultGaugeFactory, \"!governance && !factory\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(\r\n\t\tILocker _locker,\r\n\t\taddress _governance,\r\n\t\taddress _receiver\r\n\t) {\r\n\t\tlocker = _locker;\r\n\t\tgovernance = _governance;\r\n\t\trewardsReceiver = _receiver;\r\n\t}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\tfunction deposit(address _token, uint256 _amount) external virtual onlyApprovedVault {}\r\n\r\n\tfunction withdraw(address _token, uint256 _amount) external virtual onlyApprovedVault {}\r\n\r\n\tfunction claim(address _gauge) external virtual {}\r\n\r\n\tfunction toggleVault(address _vault) external virtual onlyGovernanceOrFactory {}\r\n\r\n\tfunction setGauge(address _token, address _gauge) external virtual onlyGovernanceOrFactory {}\r\n\r\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external virtual onlyGovernanceOrFactory {}\r\n}\r\n\r\ninterface ILiquidityGauge {\r\n\tstruct Reward {\r\n\t\taddress token;\r\n\t\taddress distributor;\r\n\t\tuint256 period_finish;\r\n\t\tuint256 rate;\r\n\t\tuint256 last_update;\r\n\t\tuint256 integral;\r\n\t}\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction claim_rewards_for(address _user, address _recipient) external;\r\n\r\n\t// // solhint-disable-next-line\r\n\t// function claim_rewards_for(address _user) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit(uint256 _value, address _addr) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_tokens(uint256 _i) external view returns (address);\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\r\n\r\n\tfunction balanceOf(address) external returns (uint256);\r\n\r\n\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\r\n\r\n\tfunction claimable_tokens(address _user) external returns (uint256);\r\n\r\n\tfunction user_checkpoint(address _user) external returns (bool);\r\n\r\n\tfunction commit_transfer_ownership(address) external;\r\n\r\n\tfunction claim_rewards(address) external;\r\n}\r\n\r\ninterface ISDTDistributor {\r\n\tfunction distribute(address gaugeAddr) external;\r\n}\r\n\r\n/// @title BaseAccumulator\r\n/// @notice A contract that defines the functions shared by all accumulators\r\n/// @author StakeDAO\r\ncontract BaseAccumulator {\r\n\tusing SafeERC20 for IERC20;\r\n\t/* ========== STATE VARIABLES ========== */\r\n\taddress public governance;\r\n\taddress public locker;\r\n\taddress public tokenReward;\r\n\taddress public gauge;\r\n\taddress public sdtDistributor;\r\n\tuint256 public claimerFee;\r\n\r\n\t/* ========== EVENTS ========== */\r\n\r\n\tevent SdtDistributorUpdated(address oldDistributor, address newDistributor);\r\n\tevent GaugeSet(address oldGauge, address newGauge);\r\n\tevent RewardNotified(address gauge, address tokenReward, uint256 amount);\r\n\tevent LockerSet(address oldLocker, address newLocker);\r\n\tevent GovernanceSet(address oldGov, address newGov);\r\n\tevent TokenRewardSet(address oldTr, address newTr);\r\n\tevent TokenDeposited(address token, uint256 amount);\r\n\tevent ERC20Rescued(address token, uint256 amount);\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(address _tokenReward) {\r\n\t\ttokenReward = _tokenReward;\r\n\t\tgovernance = msg.sender;\r\n\t}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n\t/// @notice Notify the reward using an extra token\r\n\t/// @param _tokenReward token address to notify\r\n\t/// @param _amount amount to notify\r\n\tfunction notifyExtraReward(address _tokenReward, uint256 _amount) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\t_notifyReward(_tokenReward, _amount, true);\r\n\t}\r\n\r\n\t/// @notice Notify the reward using all balance of extra token\r\n\t/// @param _tokenReward token address to notify\r\n\tfunction notifyAllExtraReward(address _tokenReward) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\tuint256 amount = IERC20(_tokenReward).balanceOf(address(this));\r\n\t\t_notifyReward(_tokenReward, amount, true);\r\n\t}\r\n\r\n\t/// @notice Notify the new reward to the LGV4\r\n\t/// @param _tokenReward token to notify\r\n\t/// @param _amount amount to notify\r\n\tfunction _notifyReward(\r\n\t\taddress _tokenReward,\r\n\t\tuint256 _amount,\r\n\t\tbool _distributeSDT\r\n\t) internal {\r\n\t\trequire(gauge != address(0), \"gauge not set\");\r\n\t\trequire(_amount > 0, \"set an amount > 0\");\r\n\t\tuint256 balanceBefore = IERC20(_tokenReward).balanceOf(address(this));\r\n\t\trequire(balanceBefore >= _amount, \"amount not enough\");\r\n\t\tif (ILiquidityGauge(gauge).reward_data(_tokenReward).distributor != address(0)) {\r\n\t\t\tif (_distributeSDT) {\r\n\t\t\t\t// Distribute SDT\r\n\t\t\t\tISDTDistributor(sdtDistributor).distribute(gauge);\r\n\t\t\t}\r\n\t\t\tuint256 claimerReward = (_amount * claimerFee) / 10000;\r\n\t\t\tIERC20(_tokenReward).transfer(msg.sender, claimerReward);\r\n\t\t\t_amount -= claimerReward;\r\n\t\t\tIERC20(_tokenReward).approve(gauge, _amount);\r\n\t\t\tILiquidityGauge(gauge).deposit_reward_token(_tokenReward, _amount);\r\n\r\n\t\t\tuint256 balanceAfter = IERC20(_tokenReward).balanceOf(address(this));\r\n\r\n\t\t\trequire(balanceBefore - balanceAfter == _amount, \"wrong amount notified\");\r\n\r\n\t\t\temit RewardNotified(gauge, _tokenReward, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Deposit token into the accumulator\r\n\t/// @param _token token to deposit\r\n\t/// @param _amount amount to deposit\r\n\tfunction depositToken(address _token, uint256 _amount) external {\r\n\t\trequire(_amount > 0, \"set an amount > 0\");\r\n\t\tIERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\t\temit TokenDeposited(_token, _amount);\r\n\t}\r\n\r\n\t/// @notice Sets gauge for the accumulator which will receive and distribute the rewards\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _gauge gauge address\r\n\tfunction setGauge(address _gauge) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_gauge != address(0), \"can't be zero address\");\r\n\t\temit GaugeSet(gauge, _gauge);\r\n\t\tgauge = _gauge;\r\n\t}\r\n\r\n\t/// @notice Sets SdtDistributor to distribute from the Accumulator SDT Rewards to Gauge.\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _sdtDistributor gauge address\r\n\tfunction setSdtDistributor(address _sdtDistributor) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_sdtDistributor != address(0), \"can't be zero address\");\r\n\r\n\t\temit SdtDistributorUpdated(sdtDistributor, _sdtDistributor);\r\n\t\tsdtDistributor = _sdtDistributor;\r\n\t}\r\n\r\n\t/// @notice Allows the governance to set the new governance\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _governance governance address\r\n\tfunction setGovernance(address _governance) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_governance != address(0), \"can't be zero address\");\r\n\t\temit GovernanceSet(governance, _governance);\r\n\t\tgovernance = _governance;\r\n\t}\r\n\r\n\t/// @notice Allows the governance to set the locker\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _locker locker address\r\n\tfunction setLocker(address _locker) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_locker != address(0), \"can't be zero address\");\r\n\t\temit LockerSet(locker, _locker);\r\n\t\tlocker = _locker;\r\n\t}\r\n\r\n\t/// @notice Allows the governance to set the token reward\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _tokenReward token reward address\r\n\tfunction setTokenReward(address _tokenReward) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_tokenReward != address(0), \"can't be zero address\");\r\n\t\temit TokenRewardSet(tokenReward, _tokenReward);\r\n\t\ttokenReward = _tokenReward;\r\n\t}\r\n\r\n\tfunction setClaimerFee(uint256 _claimerFee) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\tclaimerFee = _claimerFee;\r\n\t}\r\n\r\n\t/// @notice A function that rescue any ERC20 token\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to rescue\r\n\t/// @param _recipient address to send token rescued\r\n\tfunction rescueERC20(\r\n\t\taddress _token,\r\n\t\tuint256 _amount,\r\n\t\taddress _recipient\r\n\t) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_amount > 0, \"set an amount > 0\");\r\n\t\trequire(_recipient != address(0), \"can't be zero address\");\r\n\t\tIERC20(_token).safeTransfer(_recipient, _amount);\r\n\t\temit ERC20Rescued(_token, _amount);\r\n\t}\r\n}\r\n\r\n/// @title A contract that accumulates 3crv rewards and notifies them to the LGV4\r\n/// @author StakeDAO\r\ncontract CurveAccumulator is BaseAccumulator {\r\n\taddress public constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(address _tokenReward) BaseAccumulator(_tokenReward) {}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\t/// @notice Notify a 3crv amount to the LGV4\r\n\t/// @param _amount amount to notify after the claim\r\n\tfunction notify(uint256 _amount) external {\r\n\t\t_notifyReward(tokenReward, _amount, true);\r\n\t}\r\n\r\n\t/// @notice Notify all 3crv accumulator balance to the LGV4\r\n\tfunction notifyAll() external {\r\n\t\tuint256 crv3Amount = IERC20(CRV3).balanceOf(address(this));\r\n\t\t_notifyReward(tokenReward, crv3Amount, true);\r\n\t}\r\n}\r\n\r\ninterface IMultiRewards {\r\n\tfunction balanceOf(address) external returns (uint256);\r\n\r\n\tfunction stakeFor(address, uint256) external;\r\n\r\n\tfunction withdrawFor(address, uint256) external;\r\n\r\n\tfunction notifyRewardAmount(address, uint256) external;\r\n\r\n\tfunction mintFor(address recipient, uint256 amount) external;\r\n\r\n\tfunction burnFrom(address _from, uint256 _amount) external;\r\n\r\n\tfunction stakeOf(address account) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n\t// Booleans are more expensive than uint256 or any type that takes up a full\r\n\t// word because each write operation emits an extra SLOAD to first read the\r\n\t// slot's contents, replace the bits taken up by the boolean, and then write\r\n\t// back. This is the compiler's defense against contract upgrades and\r\n\t// pointer aliasing, and it cannot be disabled.\r\n\r\n\t// The values being non-zero value makes deployment a bit more expensive,\r\n\t// but in exchange the refund on every call to nonReentrant will be lower in\r\n\t// amount. Since refunds are capped to a percentage of the total\r\n\t// transaction's gas, it is best to keep them low in cases like this one, to\r\n\t// increase the likelihood of the full refund coming into effect.\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\tfunction __ReentrancyGuard_init() internal onlyInitializing {\r\n\t\t__ReentrancyGuard_init_unchained();\r\n\t}\r\n\r\n\tfunction __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and making it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\tuint256[49] private __gap;\r\n}\r\n\r\ninterface IGaugeController {\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_types(address addr) external view returns (int128);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_relative_weight_write(address addr, uint256 timestamp) external returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_relative_weight(address addr) external view returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_relative_weight(address addr, uint256 timestamp) external view returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction get_total_weight() external view returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction get_gauge_weight(address addr) external view returns (uint256);\r\n}\r\n\r\ninterface ISdtMiddlemanGauge {\r\n\tfunction notifyReward(address gauge, uint256 amount) external;\r\n}\r\n\r\n/// @title IStakingRewardsFunctions\r\n/// @author StakeDAO Core Team\r\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\r\ninterface IStakingRewardsFunctions {\r\n\tfunction notifyRewardAmount(uint256 reward) external;\r\n\r\n\tfunction recoverERC20(\r\n\t\taddress tokenAddress,\r\n\t\taddress to,\r\n\t\tuint256 tokenAmount\r\n\t) external;\r\n\r\n\tfunction setNewRewardsDistribution(address newRewardsDistribution) external;\r\n}\r\n\r\n/// @title IStakingRewards\r\n/// @author StakeDAO Core Team\r\n/// @notice Previous interface with additionnal getters for public variables\r\ninterface IStakingRewards is IStakingRewardsFunctions {\r\n\tfunction rewardToken() external view returns (IERC20);\r\n}\r\n\r\ninterface IMasterchef {\r\n\tfunction deposit(uint256, uint256) external;\r\n\r\n\tfunction withdraw(uint256, uint256) external;\r\n\r\n\tfunction userInfo(uint256, address) external view returns (uint256, uint256);\r\n\r\n\tfunction poolInfo(uint256)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t);\r\n\r\n\tfunction totalAllocPoint() external view returns (uint256);\r\n\r\n\tfunction sdtPerBlock() external view returns (uint256);\r\n\r\n\tfunction pendingSdt(uint256, address) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\ncontract MasterchefMasterToken is ERC20, Ownable {\r\n\tconstructor() ERC20(\"Masterchef Master Token\", \"MMT\") {\r\n\t\t_mint(msg.sender, 1e18);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n\tbytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\t */\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0x00\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\t */\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\t\tbytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = \"0\";\r\n\t\tbuffer[1] = \"x\";\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, \"Strings: hex length insufficient\");\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n/// @title IAccessControl\r\n/// @author Forked from OpenZeppelin\r\n/// @notice Interface for `AccessControl` contracts\r\ninterface IAccessControl {\r\n\tfunction hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n\tfunction getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n\tfunction grantRole(bytes32 role, address account) external;\r\n\r\n\tfunction revokeRole(bytes32 role, address account) external;\r\n\r\n\tfunction renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\r\n * The only difference is the removal of the ERC165 implementation as it's not\r\n * needed in Angle.\r\n *\r\n * Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\r\n\tfunction __AccessControl_init() internal initializer {\r\n\t\t__AccessControl_init_unchained();\r\n\t}\r\n\r\n\tfunction __AccessControl_init_unchained() internal initializer {}\r\n\r\n\tstruct RoleData {\r\n\t\tmapping(address => bool) members;\r\n\t\tbytes32 adminRole;\r\n\t}\r\n\r\n\tmapping(bytes32 => RoleData) private _roles;\r\n\r\n\tbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n\t/**\r\n\t * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n\t *\r\n\t * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n\t * {RoleAdminChanged} not being emitted signaling this.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n\t/**\r\n\t * @dev Emitted when `account` is granted `role`.\r\n\t *\r\n\t * `sender` is the account that originated the contract call, an admin role\r\n\t * bearer except when using {_setupRole}.\r\n\t */\r\n\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\t/**\r\n\t * @dev Emitted when `account` is revoked `role`.\r\n\t *\r\n\t * `sender` is the account that originated the contract call:\r\n\t *   - if using `revokeRole`, it is the admin role bearer\r\n\t *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n\t */\r\n\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\t/**\r\n\t * @dev Modifier that checks that an account has a specific role. Reverts\r\n\t * with a standardized message including the required role.\r\n\t *\r\n\t * The format of the revert reason is given by the following regular expression:\r\n\t *\r\n\t *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n\t *\r\n\t * _Available since v4.1._\r\n\t */\r\n\tmodifier onlyRole(bytes32 role) {\r\n\t\t_checkRole(role, msg.sender);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns `true` if `account` has been granted `role`.\r\n\t */\r\n\tfunction hasRole(bytes32 role, address account) public view override returns (bool) {\r\n\t\treturn _roles[role].members[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Revert with a standard message if `account` is missing `role`.\r\n\t *\r\n\t * The format of the revert reason is given by the following regular expression:\r\n\t *\r\n\t *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n\t */\r\n\tfunction _checkRole(bytes32 role, address account) internal view {\r\n\t\tif (!hasRole(role, account)) {\r\n\t\t\trevert(\r\n\t\t\t\tstring(\r\n\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\t\"AccessControl: account \",\r\n\t\t\t\t\t\tStringsUpgradeable.toHexString(uint160(account), 20),\r\n\t\t\t\t\t\t\" is missing role \",\r\n\t\t\t\t\t\tStringsUpgradeable.toHexString(uint256(role), 32)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n\t * {revokeRole}.\r\n\t *\r\n\t * To change a role's admin, use {_setRoleAdmin}.\r\n\t */\r\n\tfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n\t\treturn _roles[role].adminRole;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Grants `role` to `account`.\r\n\t *\r\n\t * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\t * event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must have ``role``'s admin role.\r\n\t */\r\n\tfunction grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\r\n\t\t_grantRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Revokes `role` from `account`.\r\n\t *\r\n\t * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must have ``role``'s admin role.\r\n\t */\r\n\tfunction revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\r\n\t\t_revokeRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Revokes `role` from the calling account.\r\n\t *\r\n\t * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n\t * purpose is to provide a mechanism for accounts to lose their privileges\r\n\t * if they are compromised (such as when a trusted device is misplaced).\r\n\t *\r\n\t * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n\t * event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must be `account`.\r\n\t */\r\n\tfunction renounceRole(bytes32 role, address account) external override {\r\n\t\trequire(account == msg.sender, \"71\");\r\n\r\n\t\t_revokeRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Grants `role` to `account`.\r\n\t *\r\n\t * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\t * event. Note that unlike {grantRole}, this function doesn't perform any\r\n\t * checks on the calling account.\r\n\t *\r\n\t * [WARNING]\r\n\t * ====\r\n\t * This function should only be called from the constructor when setting\r\n\t * up the initial roles for the system.\r\n\t *\r\n\t * Using this function in any other way is effectively circumventing the admin\r\n\t * system imposed by {AccessControl}.\r\n\t * ====\r\n\t */\r\n\tfunction _setupRole(bytes32 role, address account) internal {\r\n\t\t_grantRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `adminRole` as ``role``'s admin role.\r\n\t *\r\n\t * Emits a {RoleAdminChanged} event.\r\n\t */\r\n\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\r\n\t\temit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n\t\t_roles[role].adminRole = adminRole;\r\n\t}\r\n\r\n\tfunction _grantRole(bytes32 role, address account) internal {\r\n\t\tif (!hasRole(role, account)) {\r\n\t\t\t_roles[role].members[account] = true;\r\n\t\t\temit RoleGranted(role, account, msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _revokeRole(bytes32 role, address account) internal {\r\n\t\tif (hasRole(role, account)) {\r\n\t\t\t_roles[role].members[account] = false;\r\n\t\t\temit RoleRevoked(role, account, msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tuint256[49] private __gap;\r\n}\r\n\r\n/// @title SdtDistributorEvents\r\n/// @author StakeDAO Core Team\r\n/// @notice All the events used in `SdtDistributor` contract\r\nabstract contract SdtDistributorEvents {\r\n\tevent DelegateGaugeUpdated(address indexed _gaugeAddr, address indexed _delegateGauge);\r\n\tevent DistributionsToggled(bool _distributionsOn);\r\n\tevent GaugeControllerUpdated(address indexed _controller);\r\n\tevent GaugeToggled(address indexed gaugeAddr, bool newStatus);\r\n\tevent InterfaceKnownToggled(address indexed _delegateGauge, bool _isInterfaceKnown);\r\n\tevent RateUpdated(uint256 _newRate);\r\n\tevent Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\r\n\tevent RewardDistributed(address indexed gaugeAddr, uint256 sdtDistributed, uint256 lastMasterchefPull);\r\n\tevent UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\r\n}\r\n\r\n/// @title SdtDistributorV2\r\n/// @notice Earn from Masterchef SDT and distribute it to gauges\r\ncontract SdtDistributorV2 is ReentrancyGuardUpgradeable, AccessControlUpgradeable, SdtDistributorEvents {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- CONSTANTS\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Accounting\r\n\tuint256 public constant BASE_UNIT = 10_000;\r\n\r\n\t/// @notice Address of the SDT token given as a reward.\r\n\tIERC20 public constant rewardToken = IERC20(0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F);\r\n\r\n\t/// @notice Address of the masterchef.\r\n\tIMasterchef public constant masterchef = IMasterchef(0xfEA5E213bbD81A8a94D0E1eDB09dBD7CEab61e1c);\r\n\r\n\t/// @notice Role for governors only.\r\n\tbytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\r\n\t/// @notice Role for the guardian\r\n\tbytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- STORAGE SLOTS\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Time between SDT Harvest.\r\n\tuint256 public timePeriod;\r\n\r\n\t/// @notice Address of the token that will be deposited in masterchef.\r\n\tIERC20 public masterchefToken;\r\n\r\n\t/// @notice Address of the `GaugeController` contract.\r\n\tIGaugeController public controller;\r\n\r\n\t/// @notice Address responsible for pulling rewards of type >= 2 gauges and distributing it to the\r\n\t/// associated contracts if there is not already an address delegated for this specific contract.\r\n\taddress public delegateGauge;\r\n\r\n\t/// @notice Whether SDT distribution through this contract is on or no.\r\n\tbool public distributionsOn;\r\n\r\n\t/// @notice Maps the address of a type >= 2 gauge to a delegate address responsible\r\n\t/// for giving rewards to the actual gauge.\r\n\tmapping(address => address) public delegateGauges;\r\n\r\n\t/// @notice Maps the address of a gauge to whether it was killed or not\r\n\t/// A gauge killed in this contract cannot receive any rewards.\r\n\tmapping(address => bool) public killedGauges;\r\n\r\n\t/// @notice Maps the address of a gauge delegate to whether this delegate supports the `notifyReward` interface\r\n\t/// and is therefore built for automation.\r\n\tmapping(address => bool) public isInterfaceKnown;\r\n\r\n\t/// @notice Masterchef PID\r\n\tuint256 public masterchefPID;\r\n\r\n\t/// @notice Timestamp of the last pull from masterchef.\r\n\tuint256 public lastMasterchefPull;\r\n\r\n\t/// @notice Maps the timestamp of pull action to the amount of SDT that pulled.\r\n\tmapping(uint256 => uint256) public pulls; // day => SDT amount\r\n\r\n\t/// @notice Maps the timestamp of last pull to the gauge addresses then keeps the data if particular gauge paid in the last pull.\r\n\tmapping(uint256 => mapping(address => bool)) public isGaugePaid;\r\n\r\n\t/// @notice Incentive for caller.\r\n\tuint256 public claimerFee;\r\n\r\n\t/// @notice Number of days to go through for past distributing.\r\n\tuint256 public lookPastDays;\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- INITIALIZATION LOGIC\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Initialize function\r\n\t/// @param _controller gauge controller to manage votes\r\n\t/// @param _governor governor address\r\n\t/// @param _guardian guardian address\r\n\t/// @param _delegateGauge delegate gauge address\r\n\tfunction initialize(\r\n\t\taddress _controller,\r\n\t\taddress _governor,\r\n\t\taddress _guardian,\r\n\t\taddress _delegateGauge\r\n\t) external initializer {\r\n\t\trequire(_controller != address(0) && _guardian != address(0) && _governor != address(0), \"0\");\r\n\r\n\t\tcontroller = IGaugeController(_controller);\r\n\t\tdelegateGauge = _delegateGauge;\r\n\r\n\t\tmasterchefToken = IERC20(address(new MasterchefMasterToken()));\r\n\t\tdistributionsOn = false;\r\n\r\n\t\ttimePeriod = 3600 * 24; // One day in seconds\r\n\t\tlookPastDays = 45; // for past 45 days check\r\n\r\n\t\t_setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\r\n\t\t_setRoleAdmin(GUARDIAN_ROLE, GOVERNOR_ROLE);\r\n\r\n\t\t_setupRole(GUARDIAN_ROLE, _guardian);\r\n\t\t_setupRole(GOVERNOR_ROLE, _governor);\r\n\t\t_setupRole(GUARDIAN_ROLE, _governor);\r\n\t}\r\n\r\n\t/// @custom:oz-upgrades-unsafe-allow constructor\r\n\tconstructor() initializer {}\r\n\r\n\t/// @notice Initialize the masterchef depositing the master token\r\n\t/// @param _pid pool id to deposit the token\r\n\tfunction initializeMasterchef(uint256 _pid) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tmasterchefPID = _pid;\r\n\t\tmasterchefToken.approve(address(masterchef), 1e18);\r\n\t\tmasterchef.deposit(_pid, 1e18);\r\n\t}\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- DISTRIBUTION LOGIC\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Distribute SDT to Gauges\r\n\t/// @param gaugeAddr Address of the gauge to distribute.\r\n\tfunction distribute(address gaugeAddr) external nonReentrant {\r\n\t\t_distribute(gaugeAddr);\r\n\t}\r\n\r\n\t/// @notice Distribute SDT to Multiple Gauges\r\n\t/// @param gaugeAddr Array of addresses of the gauge to distribute.\r\n\tfunction distributeMulti(address[] calldata gaugeAddr) public nonReentrant {\r\n\t\tuint256 length = gaugeAddr.length;\r\n\t\tfor (uint256 i; i < length; i++) {\r\n\t\t\t_distribute(gaugeAddr[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Internal implementation of distribute logic.\r\n\t/// @param gaugeAddr Address of the gauge to distribute rewards to\r\n\tfunction _distribute(address gaugeAddr) internal {\r\n\t\trequire(distributionsOn, \"not allowed\");\r\n\t\t(bool success, bytes memory result) = address(controller).call(\r\n\t\t\tabi.encodeWithSignature(\"gauge_types(address)\", gaugeAddr)\r\n\t\t);\r\n\t\tif (!success || killedGauges[gaugeAddr]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint128 gaugeType = abi.decode(result, (int128));\r\n\r\n\t\t// Rounded to beginning of the day -> 00:00 UTC\r\n\t\tuint256 roundedTimestamp = (block.timestamp / 1 days) * 1 days;\r\n\r\n\t\tuint256 totalDistribute;\r\n\r\n\t\tif (block.timestamp > lastMasterchefPull + timePeriod) {\r\n\t\t\tuint256 sdtBefore = rewardToken.balanceOf(address(this));\r\n\t\t\t_pullSDT();\r\n\t\t\tpulls[roundedTimestamp] = rewardToken.balanceOf(address(this)) - sdtBefore;\r\n\t\t\tlastMasterchefPull = roundedTimestamp;\r\n\t\t}\r\n\t\t// check past n days\r\n\t\tfor (uint256 i; i < lookPastDays; i++) {\r\n\t\t\tuint256 currentTimestamp = roundedTimestamp - (i * 86_400);\r\n\r\n\t\t\tif (pulls[currentTimestamp] > 0) {\r\n\t\t\t\tbool isPaid = isGaugePaid[currentTimestamp][gaugeAddr];\r\n\t\t\t\tif (isPaid) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Retrieve the amount pulled from Masterchef at the given timestamp.\r\n\t\t\t\tuint256 sdtBalance = pulls[currentTimestamp];\r\n\t\t\t\tuint256 gaugeRelativeWeight;\r\n\r\n\t\t\t\tif (i == 0) {\r\n\t\t\t\t\t// Makes sure the weight is checkpointed. Also returns the weight.\r\n\t\t\t\t\tgaugeRelativeWeight = controller.gauge_relative_weight_write(gaugeAddr, currentTimestamp);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgaugeRelativeWeight = controller.gauge_relative_weight(gaugeAddr, currentTimestamp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuint256 sdtDistributed = (sdtBalance * gaugeRelativeWeight) / 1e18;\r\n\t\t\t\ttotalDistribute += sdtDistributed;\r\n\t\t\t\tisGaugePaid[currentTimestamp][gaugeAddr] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (totalDistribute > 0) {\r\n\t\t\tif (gaugeType == 1) {\r\n\t\t\t\trewardToken.safeTransfer(gaugeAddr, totalDistribute);\r\n\t\t\t\tIStakingRewards(gaugeAddr).notifyRewardAmount(totalDistribute);\r\n\t\t\t} else if (gaugeType >= 2) {\r\n\t\t\t\t// If it is defined, we use the specific delegate attached to the gauge\r\n\t\t\t\taddress delegate = delegateGauges[gaugeAddr];\r\n\t\t\t\tif (delegate == address(0)) {\r\n\t\t\t\t\t// If not, we check if a delegate common to all gauges with type >= 2 can be used\r\n\t\t\t\t\tdelegate = delegateGauge;\r\n\t\t\t\t}\r\n\t\t\t\tif (delegate != address(0)) {\r\n\t\t\t\t\t// In the case where the gauge has a delegate (specific or not), then rewards are transferred to this gauge\r\n\t\t\t\t\trewardToken.safeTransfer(delegate, totalDistribute);\r\n\t\t\t\t\t// If this delegate supports a specific interface, then rewards sent are notified through this\r\n\t\t\t\t\t// interface\r\n\t\t\t\t\tif (isInterfaceKnown[delegate]) {\r\n\t\t\t\t\t\tISdtMiddlemanGauge(delegate).notifyReward(gaugeAddr, totalDistribute);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\trewardToken.safeTransfer(gaugeAddr, totalDistribute);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tILiquidityGauge(gaugeAddr).deposit_reward_token(address(rewardToken), totalDistribute);\r\n\t\t\t}\r\n\r\n\t\t\temit RewardDistributed(gaugeAddr, totalDistribute, lastMasterchefPull);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Internal function to pull SDT from the MasterChef\r\n\tfunction _pullSDT() internal {\r\n\t\tmasterchef.withdraw(masterchefPID, 0);\r\n\t}\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- RESTRICTIVE FUNCTIONS\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Sets the distribution state (on/off)\r\n\t/// @param _state new distribution state\r\n\tfunction setDistribution(bool _state) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tdistributionsOn = _state;\r\n\t}\r\n\r\n\t/// @notice Sets a new gauge controller\r\n\t/// @param _controller Address of the new gauge controller\r\n\tfunction setGaugeController(address _controller) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trequire(_controller != address(0), \"0\");\r\n\t\tcontroller = IGaugeController(_controller);\r\n\t\temit GaugeControllerUpdated(_controller);\r\n\t}\r\n\r\n\t/// @notice Sets a new delegate gauge for pulling rewards of a type >= 2 gauges or of all type >= 2 gauges\r\n\t/// @param gaugeAddr Gauge to change the delegate of\r\n\t/// @param _delegateGauge Address of the new gauge delegate related to `gaugeAddr`\r\n\t/// @param toggleInterface Whether we should toggle the fact that the `_delegateGauge` is built for automation or not\r\n\t/// @dev This function can be used to remove delegating or introduce the pulling of rewards to a given address\r\n\t/// @dev If `gaugeAddr` is the zero address, this function updates the delegate gauge common to all gauges with type >= 2\r\n\t/// @dev The `toggleInterface` parameter has been added for convenience to save one transaction when adding a gauge delegate\r\n\t/// which supports the `notifyReward` interface\r\n\tfunction setDelegateGauge(\r\n\t\taddress gaugeAddr,\r\n\t\taddress _delegateGauge,\r\n\t\tbool toggleInterface\r\n\t) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tif (gaugeAddr != address(0)) {\r\n\t\t\tdelegateGauges[gaugeAddr] = _delegateGauge;\r\n\t\t} else {\r\n\t\t\tdelegateGauge = _delegateGauge;\r\n\t\t}\r\n\t\temit DelegateGaugeUpdated(gaugeAddr, _delegateGauge);\r\n\r\n\t\tif (toggleInterface) {\r\n\t\t\t_toggleInterfaceKnown(_delegateGauge);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Toggles the status of a gauge to either killed or unkilled\r\n\t/// @param gaugeAddr Gauge to toggle the status of\r\n\t/// @dev It is impossible to kill a gauge in the `GaugeController` contract, for this reason killing of gauges\r\n\t/// takes place in the `SdtDistributor` contract\r\n\t/// @dev This means that people could vote for a gauge in the gauge controller contract but that rewards are not going\r\n\t/// to be distributed to it in the end: people would need to remove their weights on the gauge killed to end the diminution\r\n\t/// in rewards\r\n\t/// @dev In the case of a gauge being killed, this function resets the timestamps at which this gauge has been approved and\r\n\t/// disapproves the gauge to spend the token\r\n\t/// @dev It should be cautiously called by governance as it could result in less SDT overall rewards than initially planned\r\n\t/// if people do not remove their voting weights to the killed gauge\r\n\tfunction toggleGauge(address gaugeAddr) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tbool gaugeKilledMem = killedGauges[gaugeAddr];\r\n\t\tif (!gaugeKilledMem) {\r\n\t\t\trewardToken.safeApprove(gaugeAddr, 0);\r\n\t\t}\r\n\t\tkilledGauges[gaugeAddr] = !gaugeKilledMem;\r\n\t\temit GaugeToggled(gaugeAddr, !gaugeKilledMem);\r\n\t}\r\n\r\n\t/// @notice Notifies that the interface of a gauge delegate is known or has changed\r\n\t/// @param _delegateGauge Address of the gauge to change\r\n\t/// @dev Gauge delegates that are built for automation should be toggled\r\n\tfunction toggleInterfaceKnown(address _delegateGauge) external onlyRole(GUARDIAN_ROLE) {\r\n\t\t_toggleInterfaceKnown(_delegateGauge);\r\n\t}\r\n\r\n\t/// @notice Toggles the fact that a gauge delegate can be used for automation or not and therefore supports\r\n\t/// the `notifyReward` interface\r\n\t/// @param _delegateGauge Address of the gauge to change\r\n\tfunction _toggleInterfaceKnown(address _delegateGauge) internal {\r\n\t\tbool isInterfaceKnownMem = isInterfaceKnown[_delegateGauge];\r\n\t\tisInterfaceKnown[_delegateGauge] = !isInterfaceKnownMem;\r\n\t\temit InterfaceKnownToggled(_delegateGauge, !isInterfaceKnownMem);\r\n\t}\r\n\r\n\t/// @notice Gives max approvement to the gauge\r\n\t/// @param gaugeAddr Address of the gauge\r\n\tfunction approveGauge(address gaugeAddr) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trewardToken.safeApprove(gaugeAddr, type(uint256).max);\r\n\t}\r\n\r\n\t/// @notice Set the time period to pull SDT from Masterchef\r\n\t/// @param _timePeriod new timePeriod value in seconds\r\n\tfunction setTimePeriod(uint256 _timePeriod) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trequire(_timePeriod >= 1 days, \"TOO_LOW\");\r\n\t\ttimePeriod = _timePeriod;\r\n\t}\r\n\r\n\tfunction setClaimerFee(uint256 _newFee) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trequire(_newFee <= BASE_UNIT, \"TOO_HIGH\");\r\n\t\tclaimerFee = _newFee;\r\n\t}\r\n\r\n\t/// @notice Set the how many days we should look back for reward distribution\r\n\t/// @param _newLookPastDays new value for how many days we should look back\r\n\tfunction setLookPastDays(uint256 _newLookPastDays) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tlookPastDays = _newLookPastDays;\r\n\t}\r\n\r\n\t/// @notice Withdraws ERC20 tokens that could accrue on this contract\r\n\t/// @param tokenAddress Address of the ERC20 token to withdraw\r\n\t/// @param to Address to transfer to\r\n\t/// @param amount Amount to transfer\r\n\t/// @dev Added to support recovering LP Rewards and other mistaken tokens\r\n\t/// from other systems to be distributed to holders\r\n\t/// @dev This function could also be used to recover SDT tokens in case the rate got smaller\r\n\tfunction recoverERC20(\r\n\t\taddress tokenAddress,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tIERC20(tokenAddress).safeTransfer(to, amount);\r\n\t\temit Recovered(tokenAddress, to, amount);\r\n\t}\r\n}\r\n\r\ncontract CurveStrategy is BaseStrategy {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tCurveAccumulator public accumulator;\r\n\taddress public sdtDistributor;\r\n\taddress public constant CRV_FEE_D = 0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc;\r\n\taddress public constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n\taddress public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n\taddress public constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n\tmapping(address => uint256) public lGaugeType;\r\n\r\n\tstruct ClaimerReward {\r\n\t\taddress rewardToken;\r\n\t\tuint256 amount;\r\n\t}\r\n\tenum MANAGEFEE {\r\n\t\tPERFFEE,\r\n\t\tVESDTFEE,\r\n\t\tACCUMULATORFEE,\r\n\t\tCLAIMERREWARD\r\n\t}\r\n\r\n\tevent Crv3Claimed(uint256 amount, bool notified);\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(\r\n\t\tILocker _locker,\r\n\t\taddress _governance,\r\n\t\taddress _receiver,\r\n\t\tCurveAccumulator _accumulator,\r\n\t\taddress _veSDTFeeProxy,\r\n\t\taddress _sdtDistributor\r\n\t) BaseStrategy(_locker, _governance, _receiver) {\r\n\t\taccumulator = _accumulator;\r\n\t\tveSDTFeeProxy = _veSDTFeeProxy;\r\n\t\tsdtDistributor = _sdtDistributor;\r\n\t}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\t/// @notice function to deposit into a gauge\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to deposit\r\n\tfunction deposit(address _token, uint256 _amount) external override onlyApprovedVault {\r\n\t\tIERC20(_token).transferFrom(msg.sender, address(locker), _amount);\r\n\t\taddress gauge = gauges[_token];\r\n\t\trequire(gauge != address(0), \"!gauge\");\r\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, 0));\r\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, _amount));\r\n\r\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"deposit(uint256)\", _amount));\r\n\t\trequire(success, \"Deposit failed!\");\r\n\t\temit Deposited(gauge, _token, _amount);\r\n\t}\r\n\r\n\t/// @notice function to withdraw from a gauge\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to withdraw\r\n\tfunction withdraw(address _token, uint256 _amount) external override onlyApprovedVault {\r\n\t\tuint256 _before = IERC20(_token).balanceOf(address(locker));\r\n\t\taddress gauge = gauges[_token];\r\n\t\trequire(gauge != address(0), \"!gauge\");\r\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"withdraw(uint256)\", _amount));\r\n\t\trequire(success, \"Transfer failed!\");\r\n\t\tuint256 _after = IERC20(_token).balanceOf(address(locker));\r\n\r\n\t\tuint256 _net = _after - _before;\r\n\t\t(success, ) = locker.execute(_token, 0, abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, _net));\r\n\t\trequire(success, \"Transfer failed!\");\r\n\t\temit Withdrawn(gauge, _token, _amount);\r\n\t}\r\n\r\n\t/// @notice function to send funds into the related accumulator\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to send\r\n\tfunction sendToAccumulator(address _token, uint256 _amount) external onlyGovernance {\r\n\t\tIERC20(_token).approve(address(accumulator), _amount);\r\n\t\taccumulator.depositToken(_token, _amount);\r\n\t}\r\n\r\n\t/// @notice function to claim the reward\r\n\t/// @param _token token address\r\n\tfunction claim(address _token) external override {\r\n\t\taddress gauge = gauges[_token];\r\n\t\trequire(gauge != address(0), \"!gauge\");\r\n\r\n\t\tuint256 crvBeforeClaim = IERC20(CRV).balanceOf(address(locker));\r\n\r\n\t\t// Claim CRV\r\n\t\t// within the mint() it calls the user checkpoint\r\n\t\t(bool success, ) = locker.execute(CRV_MINTER, 0, abi.encodeWithSignature(\"mint(address)\", gauge));\r\n\t\trequire(success, \"CRV mint failed!\");\r\n\r\n\t\tuint256 crvMinted = IERC20(CRV).balanceOf(address(locker)) - crvBeforeClaim;\r\n\r\n\t\t// Send CRV here\r\n\t\t(success, ) = locker.execute(\r\n\t\t\tCRV,\r\n\t\t\t0,\r\n\t\t\tabi.encodeWithSignature(\"transfer(address,uint256)\", address(this), crvMinted)\r\n\t\t);\r\n\t\trequire(success, \"CRV transfer failed!\");\r\n\r\n\t\t// Distribute CRV\r\n\t\tuint256 crvNetRewards = sendFee(gauge, CRV, crvMinted);\r\n\t\tIERC20(CRV).approve(multiGauges[gauge], crvNetRewards);\r\n\t\tILiquidityGauge(multiGauges[gauge]).deposit_reward_token(CRV, crvNetRewards);\r\n\t\temit Claimed(gauge, CRV, crvMinted);\r\n\r\n\t\t// Distribute SDT to the related gauge\r\n\t\tSdtDistributorV2(sdtDistributor).distribute(multiGauges[gauge]);\r\n\r\n\t\t// Claim rewards only for lg type 0 and if there is at least one reward token added\r\n\t\tif (lGaugeType[gauge] == 0 && ILiquidityGauge(gauge).reward_tokens(0) != address(0)) {\r\n\t\t\t(success, ) = locker.execute(\r\n\t\t\t\tgauge,\r\n\t\t\t\t0,\r\n\t\t\t\tabi.encodeWithSignature(\"claim_rewards(address,address)\", address(locker), address(this))\r\n\t\t\t);\r\n\t\t\tif (!success) {\r\n\t\t\t\t// Claim on behalf of locker\r\n\t\t\t\tILiquidityGauge(gauge).claim_rewards(address(locker));\r\n\t\t\t}\r\n\t\t\taddress rewardToken;\r\n\t\t\tuint256 rewardsBalance;\r\n\t\t\tfor (uint8 i = 0; i < 8; i++) {\r\n\t\t\t\trewardToken = ILiquidityGauge(gauge).reward_tokens(i);\r\n\t\t\t\tif (rewardToken == address(0)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (success) {\r\n\t\t\t\t\trewardsBalance = IERC20(rewardToken).balanceOf(address(this));\r\n\t\t\t\t} else {\r\n\t\t\t\t\trewardsBalance = IERC20(rewardToken).balanceOf(address(locker));\r\n\t\t\t\t\t(success, ) = locker.execute(\r\n\t\t\t\t\t\trewardToken,\r\n\t\t\t\t\t\t0,\r\n\t\t\t\t\t\tabi.encodeWithSignature(\"transfer(address,uint256)\", address(this), rewardsBalance)\r\n\t\t\t\t\t);\r\n\t\t\t\t\trequire(success, \"Transfer failed\");\r\n\t\t\t\t}\r\n\t\t\t\tIERC20(rewardToken).approve(multiGauges[gauge], rewardsBalance);\r\n\t\t\t\tILiquidityGauge(multiGauges[gauge]).deposit_reward_token(rewardToken, rewardsBalance);\r\n\t\t\t\temit Claimed(gauge, rewardToken, rewardsBalance);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction sendFee(\r\n\t\taddress _gauge,\r\n\t\taddress _rewardToken,\r\n\t\tuint256 _rewardsBalance\r\n\t) internal returns (uint256) {\r\n\t\t// calculate the amount for each fee recipient\r\n\t\tuint256 multisigFee = (_rewardsBalance * perfFee[_gauge]) / BASE_FEE;\r\n\t\tuint256 accumulatorPart = (_rewardsBalance * accumulatorFee[_gauge]) / BASE_FEE;\r\n\t\tuint256 veSDTPart = (_rewardsBalance * veSDTFee[_gauge]) / BASE_FEE;\r\n\t\tuint256 claimerPart = (_rewardsBalance * claimerRewardFee[_gauge]) / BASE_FEE;\r\n\t\t// send\r\n\t\tIERC20(_rewardToken).approve(address(accumulator), accumulatorPart);\r\n\t\taccumulator.depositToken(_rewardToken, accumulatorPart);\r\n\t\tIERC20(_rewardToken).transfer(rewardsReceiver, multisigFee);\r\n\t\tIERC20(_rewardToken).transfer(veSDTFeeProxy, veSDTPart);\r\n\t\tIERC20(_rewardToken).transfer(msg.sender, claimerPart);\r\n\t\treturn _rewardsBalance - multisigFee - accumulatorPart - veSDTPart - claimerPart;\r\n\t}\r\n\r\n\t/// @notice function to claim 3crv every week from the curve Fee Distributor\r\n\t/// @param _notify choose if claim or claim and notify the amount to the related gauge\r\n\tfunction claim3Crv(bool _notify) external {\r\n\t\t// Claim 3crv from the curve fee Distributor\r\n\t\t// It will send 3crv to the crv locker\r\n\t\tbool success;\r\n\t\t(success, ) = locker.execute(CRV_FEE_D, 0, abi.encodeWithSignature(\"claim()\"));\r\n\t\trequire(success, \"3crv claim failed\");\r\n\t\t// Send 3crv from the locker to the accumulator\r\n\t\tuint256 amountToSend = IERC20(CRV3).balanceOf(address(locker));\r\n\t\trequire(amountToSend > 0, \"nothing claimed\");\r\n\t\t(success, ) = locker.execute(\r\n\t\t\tCRV3,\r\n\t\t\t0,\r\n\t\t\tabi.encodeWithSignature(\"transfer(address,uint256)\", address(accumulator), amountToSend)\r\n\t\t);\r\n\t\trequire(success, \"3crv transfer failed\");\r\n\t\tif (_notify) {\r\n\t\t\taccumulator.notifyAll();\r\n\t\t}\r\n\t\temit Crv3Claimed(amountToSend, _notify);\r\n\t}\r\n\r\n\t/// @notice function to toggle a vault\r\n\t/// @param _vault vault address\r\n\tfunction toggleVault(address _vault) external override onlyGovernanceOrFactory {\r\n\t\trequire(_vault != address(0), \"zero address\");\r\n\t\tvaults[_vault] = !vaults[_vault];\r\n\t\temit VaultToggled(_vault, vaults[_vault]);\r\n\t}\r\n\r\n\t/// @notice function to set a gauge type\r\n\t/// @param _gauge gauge address\r\n\t/// @param _gaugeType type of gauge\r\n\tfunction setLGtype(address _gauge, uint256 _gaugeType) external onlyGovernanceOrFactory {\r\n\t\tlGaugeType[_gauge] = _gaugeType;\r\n\t}\r\n\r\n\t/// @notice function to set a new gauge\r\n\t/// It permits to set it as  address(0), for disabling it\r\n\t/// in case of migration\r\n\t/// @param _token token address\r\n\t/// @param _gauge gauge address\r\n\tfunction setGauge(address _token, address _gauge) external override onlyGovernanceOrFactory {\r\n\t\trequire(_token != address(0), \"zero address\");\r\n\t\t// Set new gauge\r\n\t\tgauges[_token] = _gauge;\r\n\t\temit GaugeSet(_gauge, _token);\r\n\t}\r\n\r\n\t/// @notice function to migrate any LP to another strategy contract (hard migration)\r\n\t/// @param _token token address\r\n\tfunction migrateLP(address _token) external onlyApprovedVault {\r\n\t\trequire(gauges[_token] != address(0), \"not existent gauge\");\r\n\t\tmigrate(_token);\r\n\t}\r\n\r\n\t/// @notice function to migrate any LP, it sends them to the vault\r\n\t/// @param _token token address\r\n\tfunction migrate(address _token) internal {\r\n\t\taddress gauge = gauges[_token];\r\n\t\tuint256 amount = IERC20(gauge).balanceOf(address(locker));\r\n\t\t// Withdraw LPs from the old gauge\r\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"withdraw(uint256)\", amount));\r\n\t\trequire(success, \"Withdraw failed!\");\r\n\r\n\t\t// Transfer LPs to the approved vault\r\n\t\t(success, ) = locker.execute(_token, 0, abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, amount));\r\n\t\trequire(success, \"Transfer failed!\");\r\n\t}\r\n\r\n\t/// @notice function to set a multi gauge\r\n\t/// @param _gauge gauge address\r\n\t/// @param _multiGauge multi gauge address\r\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external override onlyGovernanceOrFactory {\r\n\t\trequire(_gauge != address(0), \"zero address\");\r\n\t\trequire(_multiGauge != address(0), \"zero address\");\r\n\t\tmultiGauges[_gauge] = _multiGauge;\r\n\t}\r\n\r\n\t/// @notice function to set a new veSDTProxy\r\n\t/// @param _newVeSDTProxy veSdtProxy address\r\n\tfunction setVeSDTProxy(address _newVeSDTProxy) external onlyGovernance {\r\n\t\trequire(_newVeSDTProxy != address(0), \"zero address\");\r\n\t\tveSDTFeeProxy = _newVeSDTProxy;\r\n\t}\r\n\r\n\t/// @notice function to set a new accumulator\r\n\t/// @param _newAccumulator accumulator address\r\n\tfunction setAccumulator(address _newAccumulator) external onlyGovernance {\r\n\t\trequire(_newAccumulator != address(0), \"zero address\");\r\n\t\taccumulator = CurveAccumulator(_newAccumulator);\r\n\t}\r\n\r\n\t/// @notice function to set a new reward receiver\r\n\t/// @param _newRewardsReceiver reward receiver address\r\n\tfunction setRewardsReceiver(address _newRewardsReceiver) external onlyGovernance {\r\n\t\trequire(_newRewardsReceiver != address(0), \"zero address\");\r\n\t\trewardsReceiver = _newRewardsReceiver;\r\n\t}\r\n\r\n\t/// @notice function to set a new governance address\r\n\t/// @param _newGovernance governance address\r\n\tfunction setGovernance(address _newGovernance) external onlyGovernance {\r\n\t\trequire(_newGovernance != address(0), \"zero address\");\r\n\t\tgovernance = _newGovernance;\r\n\t}\r\n\r\n\tfunction setVaultGaugeFactory(address _newVaultGaugeFactory) external onlyGovernance {\r\n\t\trequire(_newVaultGaugeFactory != address(0), \"zero address\");\r\n\t\tvaultGaugeFactory = _newVaultGaugeFactory;\r\n\t}\r\n\r\n\t/// @notice function to set new fees\r\n\t/// @param _manageFee manageFee\r\n\t/// @param _gauge gauge address\r\n\t/// @param _newFee new fee to set\r\n\tfunction manageFee(\r\n\t\tMANAGEFEE _manageFee,\r\n\t\taddress _gauge,\r\n\t\tuint256 _newFee\r\n\t) external onlyGovernanceOrFactory {\r\n\t\trequire(_gauge != address(0), \"zero address\");\r\n\t\tif (_manageFee == MANAGEFEE.PERFFEE) {\r\n\t\t\t// 0\r\n\t\t\tperfFee[_gauge] = _newFee;\r\n\t\t} else if (_manageFee == MANAGEFEE.VESDTFEE) {\r\n\t\t\t// 1\r\n\t\t\tveSDTFee[_gauge] = _newFee;\r\n\t\t} else if (_manageFee == MANAGEFEE.ACCUMULATORFEE) {\r\n\t\t\t//2\r\n\t\t\taccumulatorFee[_gauge] = _newFee;\r\n\t\t} else if (_manageFee == MANAGEFEE.CLAIMERREWARD) {\r\n\t\t\t// 3\r\n\t\t\tclaimerRewardFee[_gauge] = _newFee;\r\n\t\t}\r\n\t\trequire(\r\n\t\t\tperfFee[_gauge] + veSDTFee[_gauge] + accumulatorFee[_gauge] + claimerRewardFee[_gauge] <= BASE_FEE,\r\n\t\t\t\"fee to high\"\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice execute a function\r\n\t/// @param _to Address to sent the value to\r\n\t/// @param _value Value to be sent\r\n\t/// @param _data Call function data\r\n\tfunction execute(\r\n\t\taddress _to,\r\n\t\tuint256 _value,\r\n\t\tbytes calldata _data\r\n\t) external onlyGovernance returns (bool, bytes memory) {\r\n\t\t(bool success, bytes memory result) = _to.call{ value: _value }(_data);\r\n\t\treturn (success, result);\r\n\t}\r\n}\r\n\r\ncontract CurveVault is ERC20Upgradeable {\r\n\tusing SafeERC20Upgradeable for ERC20Upgradeable;\r\n\tusing AddressUpgradeable for address;\r\n\r\n\tERC20Upgradeable public token;\r\n\taddress public governance;\r\n\tuint256 public withdrawalFee;\r\n\tuint256 public keeperFee;\r\n\taddress public liquidityGauge;\r\n\tuint256 public accumulatedFee;\r\n\tCurveStrategy public curveStrategy;\r\n\tuint256 public min;\r\n\tuint256 public constant MAX = 10000;\r\n\tevent Earn(address _token, uint256 _amount);\r\n\tevent Deposit(address _depositor, uint256 _amount);\r\n\tevent Withdraw(address _depositor, uint256 _amount);\r\n\r\n\tfunction init(\r\n\t\tERC20Upgradeable _token,\r\n\t\taddress _governance,\r\n\t\tstring memory name_,\r\n\t\tstring memory symbol_,\r\n\t\tCurveStrategy _curveStrategy\r\n\t) public initializer {\r\n\t\t__ERC20_init(name_, symbol_);\r\n\t\ttoken = _token;\r\n\t\tgovernance = _governance;\r\n\t\tmin = 10000;\r\n\t\tkeeperFee = 10; // %0.1\r\n\t\tcurveStrategy = _curveStrategy;\r\n\t}\r\n\r\n\t/// @notice function to deposit a new amount\r\n\t/// @param _staker address to stake for\r\n\t/// @param _amount amount to deposit\r\n\t/// @param _earn earn or not\r\n\tfunction deposit(\r\n\t\taddress _staker,\r\n\t\tuint256 _amount,\r\n\t\tbool _earn\r\n\t) public {\r\n\t\trequire(address(liquidityGauge) != address(0), \"Gauge not yet initialized\");\r\n\t\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\t\tif (!_earn) {\r\n\t\t\tuint256 keeperCut = (_amount * keeperFee) / 10000;\r\n\t\t\t_amount -= keeperCut;\r\n\t\t\taccumulatedFee += keeperCut;\r\n\t\t} else {\r\n\t\t\t_amount += accumulatedFee;\r\n\t\t\taccumulatedFee = 0;\r\n\t\t}\r\n\t\t_mint(address(this), _amount);\r\n\t\tERC20Upgradeable(address(this)).approve(liquidityGauge, _amount);\r\n\t\tILiquidityGaugeStrat(liquidityGauge).deposit(_amount, _staker);\r\n\t\tif (_earn) {\r\n\t\t\tearn();\r\n\t\t}\r\n\t\temit Deposit(msg.sender, _amount);\r\n\t}\r\n\r\n\t/// @notice function to withdraw\r\n\t/// @param _shares amount to withdraw\r\n\tfunction withdraw(uint256 _shares) public {\r\n\t\tuint256 userTotalShares = ILiquidityGaugeStrat(liquidityGauge).balanceOf(msg.sender);\r\n\t\trequire(_shares <= userTotalShares, \"Not enough staked\");\r\n\t\tILiquidityGaugeStrat(liquidityGauge).withdraw(_shares, msg.sender, true);\r\n\t\t_burn(address(this), _shares);\r\n\t\tuint256 tokenBalance = token.balanceOf(address(this)) - accumulatedFee;\r\n\t\tuint256 withdrawFee;\r\n\t\tif (_shares > tokenBalance) {\r\n\t\t\tuint256 amountToWithdraw = _shares - tokenBalance;\r\n\t\t\tcurveStrategy.withdraw(address(token), amountToWithdraw);\r\n\t\t\twithdrawFee = (amountToWithdraw * withdrawalFee) / 10000;\r\n\t\t\ttoken.safeTransfer(governance, withdrawFee);\r\n\t\t}\r\n\t\ttoken.safeTransfer(msg.sender, _shares - withdrawFee);\r\n\t\temit Withdraw(msg.sender, _shares - withdrawFee);\r\n\t}\r\n\r\n\t/// @notice function to withdraw all curve LPs deposited\r\n\tfunction withdrawAll() external {\r\n\t\twithdraw(balanceOf(msg.sender));\r\n\t}\r\n\r\n\t/// @notice function to set the governance\r\n\t/// @param _governance governance address\r\n\tfunction setGovernance(address _governance) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\trequire(_governance != address(0), \"zero address\");\r\n\t\tgovernance = _governance;\r\n\t}\r\n\r\n\t/// @notice function to set the keeper fee\r\n\t/// @param _newFee keeper fee\r\n\tfunction setKeeperFee(uint256 _newFee) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\trequire(_newFee <= MAX, \"more than 100%\");\r\n\t\tkeeperFee = _newFee;\r\n\t}\r\n\r\n\t/// @notice function to set the gauge multi rewards\r\n\t/// @param _liquidityGauge gauge address\r\n\tfunction setLiquidityGauge(address _liquidityGauge) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\trequire(_liquidityGauge != address(0), \"zero address\");\r\n\t\tliquidityGauge = _liquidityGauge;\r\n\t}\r\n\r\n\t/// @notice function to set the curve strategy\r\n\t/// @param _newStrat curve strategy infos\r\n\tfunction setCurveStrategy(CurveStrategy _newStrat) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\trequire(address(_newStrat) != address(0), \"zero address\");\r\n\t\t// migration (send all LPs here)\r\n\t\tcurveStrategy.migrateLP(address(token));\r\n\t\tcurveStrategy = _newStrat;\r\n\t\t// deposit LPs into the new strategy\r\n\t\tearn();\r\n\t}\r\n\r\n\t/// @notice function to return the vault token decimals\r\n\tfunction decimals() public view override returns (uint8) {\r\n\t\treturn token.decimals();\r\n\t}\r\n\r\n\t/// @notice function to set the withdrawn fee\r\n\t/// @param _newFee withdrawn fee\r\n\tfunction setWithdrawnFee(uint256 _newFee) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\trequire(_newFee <= MAX, \"more than 100%\");\r\n\t\twithdrawalFee = _newFee;\r\n\t}\r\n\r\n\t/// @notice function to set the min (it needs to be lower than MAX)\r\n\t/// @param _min min amount\r\n\tfunction setMin(uint256 _min) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\trequire(_min <= MAX, \"more than 100%\");\r\n\t\tmin = _min;\r\n\t}\r\n\r\n\t/// @notice view function to fetch the available amount to send to the strategy\r\n\tfunction available() public view returns (uint256) {\r\n\t\treturn ((token.balanceOf(address(this)) - accumulatedFee) * min) / MAX;\r\n\t}\r\n\r\n\t/// @notice internal function to move funds to the strategy\r\n\tfunction earn() internal {\r\n\t\tuint256 tokenBalance = available();\r\n\t\ttoken.approve(address(curveStrategy), 0);\r\n\t\ttoken.approve(address(curveStrategy), tokenBalance);\r\n\t\tcurveStrategy.deposit(address(token), tokenBalance);\r\n\t\temit Earn(address(token), tokenBalance);\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveStrategy\",\"outputs\":[{\"internalType\":\"contract CurveStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_earn\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract CurveStrategy\",\"name\":\"_curveStrategy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CurveStrategy\",\"name\":\"_newStrat\",\"type\":\"address\"}],\"name\":\"setCurveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setKeeperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveVault", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6fdd994141ce84b2280b5e11f6d83f4a8984692da616ef09219ecc41073a7a97"}