{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEverscale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\ninterface IEverscale {\\n    struct EverscaleAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    struct EverscaleEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiVaultToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\ninterface IMultiVaultToken {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external;\\n\\n    function burn(address account, uint256 amount) external;\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\ninterface IMultiVaultFacetFees {\\n    enum Fee { Deposit, Withdraw }\\n\\n    function defaultNativeDepositFee() external view returns (uint);\\n    function defaultNativeWithdrawFee() external view returns (uint);\\n    function defaultAlienDepositFee() external view returns (uint);\\n    function defaultAlienWithdrawFee() external view returns (uint);\\n\\n    function fees(address token) external view returns (uint);\\n\\n    function skim(\\n        address token\\n    ) external;\\n\\n    function setDefaultAlienWithdrawFee(uint fee) external;\\n    function setDefaultAlienDepositFee(uint fee) external;\\n    function setDefaultNativeWithdrawFee(uint fee) external;\\n    function setDefaultNativeDepositFee(uint fee) external;\\n\\n    function setTokenWithdrawFee(\\n        address token,\\n        uint _withdrawFee\\n    ) external;\\n    function setTokenDepositFee(\\n        address token,\\n        uint _depositFee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetFeesEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\ninterface IMultiVaultFacetFeesEvents {\\n    event UpdateDefaultNativeDepositFee(uint fee);\\n    event UpdateDefaultNativeWithdrawFee(uint fee);\\n    event UpdateDefaultAlienDepositFee(uint fee);\\n    event UpdateDefaultAlienWithdrawFee(uint fee);\\n\\n    event UpdateTokenDepositFee(address token, uint256 fee);\\n    event UpdateTokenWithdrawFee(address token, uint256 fee);\\n\\n    event EarnTokenFee(address token, uint amount);\\n\\n    event SkimFee(\\n        address token,\\n        uint256 amount\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\ninterface IMultiVaultFacetLiquidity {\\n    struct Liquidity {\\n        uint activation;\\n        uint supply;\\n        uint cash;\\n        uint interest;\\n    }\\n\\n    function mintLP(\\n        address token,\\n        uint amount,\\n        address recipient\\n    ) external;\\n\\n    function redeemLP(\\n        address token,\\n        uint amount,\\n        address recipient\\n    ) external;\\n\\n    function exchangeRateCurrent(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getCash(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getSupply(\\n        address token\\n    ) external view returns(uint);\\n\\n    function setTokenInterest(\\n        address token,\\n        uint interest\\n    ) external;\\n\\n    function setDefaultInterest(\\n        uint interest\\n    ) external;\\n\\n    function liquidity(\\n        address token\\n    ) external view returns (Liquidity memory);\\n\\n    function convertLPToUnderlying(\\n        address token,\\n        uint amount\\n    ) external view returns (uint);\\n\\n    function convertUnderlyingToLP(\\n        address token,\\n        uint amount\\n    ) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetLiquidityEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\ninterface IMultiVaultFacetLiquidityEvents {\\n    event UpdateTokenLiquidityInterest(address token, uint interest);\\n    event UpdateDefaultLiquidityInterest(uint inetrest);\\n\\n    event MintLiquidity(address sender, address token, uint amount, uint lp_amount);\\n    event RedeemLiquidity(address sender, address token, uint amount, uint underlying_amount);\\n\\n    event EarnTokenCash(address token, uint amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"../IEverscale.sol\\\";\\nimport \\\"./IMultiVaultFacetWithdraw.sol\\\";\\n\\n\\ninterface IMultiVaultFacetPendingWithdrawals {\\n    enum ApproveStatus { NotRequired, Required, Approved, Rejected }\\n\\n    struct WithdrawalLimits {\\n        uint undeclared;\\n        uint daily;\\n        bool enabled;\\n    }\\n\\n    struct PendingWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        uint256 bounty;\\n        uint256 timestamp;\\n        ApproveStatus approveStatus;\\n\\n        uint256 chainId;\\n        IMultiVaultFacetWithdraw.Callback callback;\\n    }\\n\\n    struct PendingWithdrawalId {\\n        address recipient;\\n        uint256 id;\\n    }\\n\\n    struct WithdrawalPeriodParams {\\n        uint256 total;\\n        uint256 considered;\\n    }\\n\\n    function pendingWithdrawalsPerUser(address user) external view returns (uint);\\n    function pendingWithdrawalsTotal(address token) external view returns (uint);\\n\\n    function pendingWithdrawals(\\n        address user,\\n        uint256 id\\n    ) external view returns (PendingWithdrawalParams memory);\\n\\n    function setPendingWithdrawalBounty(\\n        uint256 id,\\n        uint256 bounty\\n    ) external;\\n\\n    function cancelPendingWithdrawal(\\n        uint256 id,\\n        uint256 amount,\\n        IEverscale.EverscaleAddress memory recipient,\\n        uint expected_evers,\\n        bytes memory payload,\\n        uint bounty\\n    ) external payable;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId memory pendingWithdrawalId,\\n        ApproveStatus approveStatus\\n    ) external;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId[] memory pendingWithdrawalId,\\n        ApproveStatus[] memory approveStatus\\n    ) external;\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId[] memory pendingWithdrawalIds\\n    ) external;\\n\\n    function withdrawalLimits(\\n        address token\\n    ) external view returns(WithdrawalLimits memory);\\n\\n    function withdrawalPeriods(\\n        address token,\\n        uint256 withdrawalPeriodId\\n    ) external view returns (WithdrawalPeriodParams memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n// Not ingerited anyware\\n// MultiVaultFacetTokenFactory has different pragma solidity (0.8.0)\\n// Since it depends on not-upgredeable MultiVaultToken\\ninterface IMultiVaultFacetTokenFactory {\\n    function getLPToken(\\n        address token\\n    ) external view returns (address lp);\\n\\n    function getNativeToken(\\n        int8 wid,\\n        uint256 addr\\n    ) external view returns (address token);\\n\\n    function deployTokenForNative(\\n        int8 wid,\\n        uint256 addr,\\n        string calldata name,\\n        string calldata symbol,\\n        uint8 decimals\\n    ) external returns (address token);\\n\\n    function deployLPToken(\\n        address token\\n    ) external returns (address lp);\\n\\n    function mint(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function burn(\\n        address token,\\n        address owner,\\n        uint256 amount\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"./../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetTokens {\\n    enum TokenType { Native, Alien }\\n\\n    struct TokenPrefix {\\n        uint activation;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TokenMeta {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct Token {\\n        uint activation;\\n        bool blacklisted;\\n        uint depositFee;\\n        uint withdrawFee;\\n        bool isNative;\\n        address custom; // deprecated\\n        uint256 depositLimit;\\n    }\\n\\n    function prefixes(address _token) external view returns (TokenPrefix memory);\\n    function tokens(address _token) external view returns (Token memory);\\n    function natives(address _token) external view returns (IEverscale.EverscaleAddress memory);\\n\\n    function setDepositLimit(\\n        address token,\\n        uint amount\\n    ) external;\\n\\n    function setTokenBlacklist(\\n        address token,\\n        bool blacklisted\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultFacetWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"./IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetWithdraw {\\n    struct Callback {\\n        address recipient;\\n        bytes payload;\\n        bool strict;\\n    }\\n\\n    struct NativeWithdrawalParams {\\n        IEverscale.EverscaleAddress native;\\n        IMultiVaultFacetTokens.TokenMeta meta;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    struct AlienWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    function withdrawalIds(bytes32) external view returns (bool);\\n\\n    function saveWithdrawNative(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint bounty\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/facets/MultiVaultFacetFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetFees.sol\\\";\\nimport \\\"../../interfaces/IMultiVaultToken.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\nimport \\\"../helpers/MultiVaultHelperActors.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperFee.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperReentrancyGuard.sol\\\";\\n\\n\\ncontract MultiVaultFacetFees is\\n    MultiVaultHelperActors,\\n    MultiVaultHelperFee,\\n    MultiVaultHelperReentrancyGuard,\\n    IMultiVaultFacetFees\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Set deposit fee for specific token.\\n    /// This may be called only by `governance` or `management`.\\n    /// @param token Token address\\n    /// @param _depositFee Deposit fee, must be less than FEE_LIMIT.\\n    function setTokenDepositFee(\\n        address token,\\n        uint _depositFee\\n    )\\n        public\\n        override\\n        onlyGovernance\\n        respectFeeLimit(_depositFee)\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.tokens_[token].depositFee = _depositFee;\\n\\n        emit UpdateTokenDepositFee(token, _depositFee);\\n    }\\n\\n    /// @notice Set withdraw fee for specific token.\\n    /// This may be called only by `governance` or `management`\\n    /// @param token Token address, must be enabled\\n    /// @param _withdrawFee Withdraw fee, must be less than FEE_LIMIT.\\n    function setTokenWithdrawFee(\\n        address token,\\n        uint _withdrawFee\\n    )\\n        public\\n        override\\n        onlyGovernance\\n        respectFeeLimit(_withdrawFee)\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.tokens_[token].withdrawFee = _withdrawFee;\\n\\n        emit UpdateTokenWithdrawFee(token, _withdrawFee);\\n    }\\n\\n    /// @notice Skim multivault fees for specific token\\n    /// Can be called only by governance or management.\\n    /// @param token Token address, can be both native or alien\\n    function skim(\\n        address token\\n    ) external override nonReentrant onlyGovernanceOrManagement {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        uint fee = s.fees[token];\\n\\n        require(fee > 0, \\\"Fees: no fees to skim\\\");\\n\\n        s.fees[token] = 0;\\n\\n        // Find out token type\\n        bool isNative = s.tokens_[token].isNative;\\n\\n        if (isNative) {\\n            IMultiVaultToken(token).mint(s.governance, fee);\\n        } else {\\n            IERC20(token).safeTransfer(s.governance, fee);\\n        }\\n\\n        emit SkimFee(token, fee);\\n    }\\n\\n    /// @notice Set default deposit fee for native tokens.\\n    /// Charged on the `deposit`.\\n    /// @param fee Fee amount, should be less than FEE_LIMIT\\n    function setDefaultNativeDepositFee(\\n        uint fee\\n    )\\n        external\\n        override\\n        onlyGovernance\\n        respectFeeLimit(fee)\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.defaultNativeDepositFee = fee;\\n\\n        emit UpdateDefaultNativeDepositFee(fee);\\n    }\\n\\n    /// @notice Set default withdraw fee for native tokens.\\n    /// Charged on the `saveWithdrawNative`.\\n    /// @param fee Fee amount, should be less than FEE_LIMIT\\n    function setDefaultNativeWithdrawFee(\\n        uint fee\\n    )\\n        external\\n        override\\n        onlyGovernance\\n        respectFeeLimit(fee)\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.defaultNativeWithdrawFee = fee;\\n\\n        emit UpdateDefaultNativeWithdrawFee(fee);\\n    }\\n\\n    /// @notice Set default deposit fee for alien tokens.\\n    /// Charged on the `deposit`.\\n    /// @param fee Fee amount, should be less than FEE_LIMIT\\n    function setDefaultAlienDepositFee(\\n        uint fee\\n    )\\n        external\\n        override\\n        onlyGovernance\\n        respectFeeLimit(fee)\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.defaultAlienDepositFee = fee;\\n\\n        emit UpdateDefaultAlienDepositFee(fee);\\n    }\\n\\n    /// @notice Set default withdraw fee for alien tokens.\\n    /// Charged on the `saveWithdrawAlien`.\\n    /// @param fee Fee amount, should be less than FEE_LIMIT\\n    function setDefaultAlienWithdrawFee(\\n        uint fee\\n    )\\n        external\\n        override\\n        onlyGovernance\\n        respectFeeLimit(fee)\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.defaultAlienWithdrawFee = fee;\\n\\n        emit UpdateDefaultAlienWithdrawFee(fee);\\n    }\\n\\n    function fees(address _token) external view override returns (uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.fees[_token];\\n    }\\n\\n    function defaultNativeWithdrawFee() external view override returns (uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.defaultNativeWithdrawFee;\\n    }\\n\\n    function defaultNativeDepositFee() external view override returns (uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.defaultNativeDepositFee;\\n    }\\n\\n    function defaultAlienDepositFee() external view override returns (uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.defaultAlienDepositFee;\\n    }\\n\\n    function defaultAlienWithdrawFee() external view override returns (uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.defaultAlienWithdrawFee;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/helpers/MultiVaultHelperActors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperActors {\\n    modifier onlyPendingGovernance() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.pendingGovernance, \\\"Actors: only pending governance\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance, \\\"Actors: only governance\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrManagement() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance || msg.sender == s.management, \\\"Actors: only governance or management\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrWithdrawGuardian() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance || msg.sender == s.withdrawGuardian, \\\"Actors: only governance or withdraw guardian\\\");\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/helpers/MultiVaultHelperFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetFees.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetLiquidity.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetFeesEvents.sol\\\";\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\nimport \\\"./MultiVaultHelperLiquidity.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperFee is MultiVaultHelperLiquidity, IMultiVaultFacetFeesEvents {\\n    modifier respectFeeLimit(uint fee) {\\n        require(fee <= MultiVaultStorage.FEE_LIMIT, \\\"Fee: limit exceeded\\\");\\n\\n        _;\\n    }\\n\\n    /// @notice Calculates fee for deposit or withdrawal.\\n    /// @param amount Amount of tokens.\\n    /// @param _token Token address.\\n    /// @param fee Fee type (Deposit = 0, Withdraw = 1).\\n    function _calculateMovementFee(\\n        uint256 amount,\\n        address _token,\\n        IMultiVaultFacetFees.Fee fee\\n    ) internal view returns (uint256) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        IMultiVaultFacetTokens.Token memory token = s.tokens_[_token];\\n\\n        uint tokenFee = fee == IMultiVaultFacetFees.Fee.Deposit ? token.depositFee : token.withdrawFee;\\n\\n        return tokenFee * amount / MultiVaultStorage.MAX_BPS;\\n    }\\n\\n    function _increaseTokenFee(\\n        address token,\\n        uint _amount\\n    ) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        if (_amount == 0) return;\\n\\n        IMultiVaultFacetLiquidity.Liquidity memory liquidity = s.liquidity[token];\\n\\n        uint amount;\\n\\n        if (s.liquidity[token].activation == 0 || s.liquidity[token].supply == 0) {\\n            amount = _amount;\\n        } else {\\n            uint liquidity_fee = _amount * liquidity.interest / MultiVaultStorage.MAX_BPS;\\n\\n            amount = _amount - liquidity_fee;\\n\\n            _increaseTokenCash(token, liquidity_fee);\\n        }\\n\\n        s.fees[token] += amount;\\n        emit EarnTokenFee(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/helpers/MultiVaultHelperLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetLiquidityEvents.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetLiquidity.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokenFactory.sol\\\";\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperLiquidity is IMultiVaultFacetLiquidityEvents {\\n    modifier onlyActivatedLP(address token) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(s.liquidity[token].activation != 0, \\\"Liquidity: LP not activated\\\");\\n\\n        _;\\n    }\\n\\n    function _getLPToken(\\n        address token\\n    ) internal view returns (address lp) {\\n        return IMultiVaultFacetTokenFactory(address(this)).getLPToken(token);\\n    }\\n\\n    function _exchangeRateCurrent(\\n        address token\\n    ) internal view returns(uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        IMultiVaultFacetLiquidity.Liquidity memory liquidity = s.liquidity[token];\\n\\n        if (liquidity.supply == 0 || liquidity.activation == 0) return MultiVaultStorage.LP_EXCHANGE_RATE_BPS;\\n\\n        return MultiVaultStorage.LP_EXCHANGE_RATE_BPS * liquidity.cash / liquidity.supply;\\n    }\\n\\n    function _getCash(\\n        address token\\n    ) internal view returns(uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        IMultiVaultFacetLiquidity.Liquidity memory liquidity = s.liquidity[token];\\n\\n        return liquidity.cash;\\n    }\\n\\n    function _getSupply(\\n        address token\\n    ) internal view returns(uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        IMultiVaultFacetLiquidity.Liquidity memory liquidity = s.liquidity[token];\\n\\n        return liquidity.supply;\\n    }\\n\\n    function _convertLPToUnderlying(\\n        address token,\\n        uint amount\\n    ) internal view returns (uint) {\\n        return _exchangeRateCurrent(token) * amount / MultiVaultStorage.LP_EXCHANGE_RATE_BPS;\\n    }\\n\\n    function _convertUnderlyingToLP(\\n        address token,\\n        uint amount\\n    ) internal view returns (uint) {\\n        return MultiVaultStorage.LP_EXCHANGE_RATE_BPS * amount / _exchangeRateCurrent(token);\\n    }\\n\\n    function _increaseTokenCash(\\n        address token,\\n        uint amount\\n    ) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        if (amount == 0) return;\\n\\n        s.liquidity[token].cash += amount;\\n\\n        emit EarnTokenCash(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/helpers/MultiVaultHelperReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"./../storage/MultiVaultStorageReentrancyGuard.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperReentrancyGuard {\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        MultiVaultStorageReentrancyGuard.ReentrancyGuardStorage storage s = MultiVaultStorageReentrancyGuard._storage();\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(s._status != MultiVaultStorageReentrancyGuard._ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        s._status = MultiVaultStorageReentrancyGuard._ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        MultiVaultStorageReentrancyGuard.ReentrancyGuardStorage storage s = MultiVaultStorageReentrancyGuard._storage();\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        s._status = MultiVaultStorageReentrancyGuard._NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/storage/MultiVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"../../interfaces/IEverscale.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetLiquidity.sol\\\";\\n\\n\\nlibrary MultiVaultStorage {\\n    uint constant public MAX_BPS = 10_000;\\n    uint constant public FEE_LIMIT = MAX_BPS / 2;\\n\\n    uint8 constant public DECIMALS_LIMIT = 18;\\n    uint256 constant public SYMBOL_LENGTH_LIMIT = 32;\\n    uint256 constant public NAME_LENGTH_LIMIT = 32;\\n\\n    uint256 constant public WITHDRAW_PERIOD_DURATION_IN_SECONDS = 60 * 60 * 24; // 24 hours\\n\\n    // Previous version of the Vault contract was built with Upgradable Proxy Pattern, without using Diamond storage\\n    bytes32 constant public MULTIVAULT_LEGACY_STORAGE_POSITION = 0x0000000000000000000000000000000000000000000000000000000000000002;\\n\\n    uint constant LP_EXCHANGE_RATE_BPS = 10_000_000_000;\\n\\n    struct Storage {\\n        mapping (address => IMultiVaultFacetTokens.Token) tokens_;\\n        mapping (address => IEverscale.EverscaleAddress) natives_;\\n\\n        uint defaultNativeDepositFee;\\n        uint defaultNativeWithdrawFee;\\n        uint defaultAlienDepositFee;\\n        uint defaultAlienWithdrawFee;\\n\\n        bool emergencyShutdown;\\n\\n        address bridge;\\n        mapping(bytes32 => bool) withdrawalIds;\\n        IEverscale.EverscaleAddress rewards_; // deprecated\\n        IEverscale.EverscaleAddress configurationNative_;\\n        IEverscale.EverscaleAddress configurationAlien_;\\n\\n        address governance;\\n        address pendingGovernance;\\n        address guardian;\\n        address management;\\n\\n        mapping (address => IMultiVaultFacetTokens.TokenPrefix) prefixes_; // deprecated\\n        mapping (address => uint) fees;\\n\\n        // STORAGE UPDATE 1\\n        // Pending withdrawals\\n        // - Counter pending withdrawals per user\\n        mapping(address => uint) pendingWithdrawalsPerUser;\\n        // - Pending withdrawal details\\n        mapping(address => mapping(uint256 => IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams)) pendingWithdrawals_;\\n\\n        // - Total amount of pending withdrawals per token\\n        mapping(address => uint) pendingWithdrawalsTotal;\\n\\n        // STORAGE UPDATE 2\\n        // Withdrawal limits per token\\n        mapping(address => IMultiVaultFacetPendingWithdrawals.WithdrawalLimits) withdrawalLimits_;\\n\\n        // - Withdrawal periods. Each period is `WITHDRAW_PERIOD_DURATION_IN_SECONDS` seconds long.\\n        // If some period has reached the `withdrawalLimitPerPeriod` - all the future\\n        // withdrawals in this period require manual approve, see note on `setPendingWithdrawalsApprove`\\n        mapping(address => mapping(uint256 => IMultiVaultFacetPendingWithdrawals.WithdrawalPeriodParams)) withdrawalPeriods_;\\n\\n        address withdrawGuardian;\\n\\n        // STORAGE UPDATE 3\\n        mapping (address => IMultiVaultFacetLiquidity.Liquidity) liquidity;\\n        uint defaultInterest;\\n\\n        // STORAGE UPDATE 4\\n        // - Receives native value, attached to the deposit\\n        address gasDonor;\\n        address weth;\\n    }\\n\\n    function _storage() internal pure returns (Storage storage s) {\\n        assembly {\\n            s.slot := MULTIVAULT_LEGACY_STORAGE_POSITION\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/storage/MultiVaultStorageReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\n\\n//import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nlibrary MultiVaultStorageReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 public constant _NOT_ENTERED = 1;\\n    uint256 public constant _ENTERED = 2;\\n\\n    bytes32 constant public REENTRANCY_GUARD_LEGACY_STORAGE_POSITION = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function _storage() internal pure returns (ReentrancyGuardStorage storage s) {\\n        assembly {\\n            s.slot := REENTRANCY_GUARD_LEGACY_STORAGE_POSITION\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnTokenCash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnTokenFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp_amount\",\"type\":\"uint256\"}],\"name\":\"MintLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying_amount\",\"type\":\"uint256\"}],\"name\":\"RedeemLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SkimFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultAlienDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultAlienWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inetrest\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultLiquidityInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultNativeDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultNativeWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenLiquidityInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenWithdrawFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"defaultAlienDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAlienWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultNativeDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultNativeWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDefaultAlienDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDefaultAlienWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDefaultNativeDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDefaultNativeWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setTokenDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setTokenWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiVaultFacetFees", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}