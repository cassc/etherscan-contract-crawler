{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-09-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\ninterface IERC721{\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface Ifactory{\r\n    function getToken(address nft, address userB, uint256 id) external;\r\n    function linkActive(address user, uint256 methodId) external;\r\n    function mintShadow( address to, address nft, uint256 tokenId) external;\r\n    function burnShadow(address nft, uint256 tokenId) external;\r\n}\r\n\r\n\r\ncontract Initialize {\r\n    bool internal initialized;\r\n    modifier noInit(){\r\n        require(!initialized, \"initialized\");\r\n        _;\r\n        initialized = true;\r\n    }\r\n}\r\n\r\n\r\ncontract Enum {\r\n    Status public status;\r\n    enum Status {INITED, AGREED, CLOSED}\r\n    enum MethodId {cancel, agree, reject, close}\r\n    \r\n    function _init() internal {status = Status.INITED;}\r\n\r\n    function _agree() internal {status = Status.AGREED;}\r\n\r\n    function _close() internal {status = Status.CLOSED;}\r\n}\r\n\r\n\r\ncontract LinkV2 is Initialize, Enum{\r\n    using SafeMath for uint256;\r\n    //string  public symbol;\r\n    address public factory;\r\n    address public NFT;\r\n    address public userA;\r\n    address public userB;\r\n    uint256 public idA;\r\n    uint256 public idB;\r\n    bool    public isFullLink;\r\n    address public closer;\r\n    uint256 public lockDays;\r\n    uint256 public startTime;\r\n    uint256 public expiredTime;\r\n    uint256 public closeTime;\r\n\r\n    modifier onlyLinkUser(){\r\n        require(msg.sender == userA || msg.sender == userB, \"Link: access denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUserB(){\r\n        require(msg.sender == userB, \"Link: noly userB\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyINITED(){\r\n        require(status == Status.INITED, \"Link: only initialized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAGREED(){\r\n        require(status == Status.AGREED, \"Link: only agreed\");\r\n        _;\r\n    }\r\n\r\n\r\n    function _linkActive(MethodId _methodId) internal{\r\n        Ifactory(factory).linkActive(msg.sender, uint256(_methodId));\r\n    }\r\n\r\n    function initialize(address _factory, address _nft, address _userA, address _userB, uint256 _idA, uint256 _idB, uint256 _lockDays) external{\r\n        (factory, NFT, userA, userB, idA, idB, lockDays ) = (_factory, _nft, _userA, _userB, _idA, _idB, _lockDays);\r\n        if(_idB != 0){\r\n            isFullLink = true;\r\n            startTime = block.timestamp;\r\n            expiredTime = startTime.add(lockDays.mul(1 days));\r\n            _agree();\r\n        }else{\r\n            _init();\r\n        }\r\n    }\r\n\r\n    function getLinkInfo() external view returns(address NFT_, address userA_, address userB_, uint256 idA_, uint256 idB_, uint256 lockDays_, uint256 startTime_, uint256 expiredTime_, uint256 status_, bool isFullLink_){\r\n        return (NFT, userA, userB, idA, idB, lockDays, startTime, expiredTime, uint256(status), isFullLink);\r\n    }\r\n\r\n    function getCloseInfo() external view returns(address closer_, uint256 closeTime_){\r\n        return (closer, closeTime);\r\n    }\r\n\r\n    function getStatus() external view returns(string memory status_){\r\n        if (Status.INITED == status)  return \"initialized\";\r\n        if (Status.AGREED == status)  return \"agreed\";\r\n        if (Status.CLOSED == status)  return \"closed\";\r\n    }\r\n\r\n    function cancel() external onlyINITED {\r\n        IERC721(NFT).transferFrom(address(this), userA, idA);\r\n        _close();\r\n        _linkActive(MethodId.cancel);\r\n    }\r\n\r\n    function agree(uint256 _idB) external onlyUserB onlyINITED{\r\n        require(_idB != 0, \"idB can`t be 0\");\r\n        idB = _idB;\r\n        Ifactory(factory).getToken(NFT, userB, idB);\r\n        Ifactory(factory).mintShadow(userB, NFT, idB);\r\n        startTime = block.timestamp;\r\n        expiredTime = startTime.add(lockDays.mul(1 days));\r\n        _agree();\r\n        _linkActive(MethodId.agree);\r\n    }\r\n\r\n    function reject() external onlyUserB onlyINITED{\r\n        IERC721(NFT).transferFrom(address(this), userA, idA);\r\n        _close();\r\n        _linkActive(MethodId.reject);\r\n    }\r\n\r\n\r\n    function close() external onlyLinkUser onlyAGREED{\r\n        require(block.timestamp >= expiredTime, \"not expired\");\r\n        //burn shadowNFT\r\n        Ifactory(factory).burnShadow(NFT, idA);\r\n        Ifactory(factory).burnShadow(NFT, idB);\r\n\r\n        IERC721(NFT).transferFrom(address(this), userA, idA);\r\n        if (isFullLink){ \r\n            IERC721(NFT).transferFrom(address(this), userA, idB);\r\n        }else{\r\n            IERC721(NFT).transferFrom(address(this), userB, idB);\r\n        }\r\n        \r\n        _close();\r\n        closer = msg.sender;\r\n        closeTime = block.timestamp;\r\n\r\n        _linkActive(MethodId.close);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idB\",\"type\":\"uint256\"}],\"name\":\"agree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiredTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCloseInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"closer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closeTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"NFT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userA_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userB_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFullLink_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"status_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFullLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Enum.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LinkV2", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20f544f7b7f2923a9e6775783940508d2bce507d969ffbf64995140640e8bab3"}