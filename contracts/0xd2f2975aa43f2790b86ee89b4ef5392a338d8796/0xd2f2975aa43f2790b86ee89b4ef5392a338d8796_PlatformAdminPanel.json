{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/platform/admin_panel/Iplatform_admin_panel/IPlatformAdminPanel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IPlatformAdminPanel {\\r\\n    function isAdmin(address wallet) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/platform/admin_panel/PlatformAdminPanel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\nimport \\\"./Iplatform_admin_panel/IPlatformAdminPanel.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Platform admins holder contract\\r\\n * @notice Used to check accessibility of senders to admin functions in platform contracts\\r\\n */\\r\\ncontract PlatformAdminPanel is IPlatformAdminPanel {\\r\\n    /**\\r\\n     * @notice Emit during root admin set and reset\\r\\n     */\\r\\n    event SetRootAdmin(address indexed wallet);\\r\\n\\r\\n    event InsertAdminList(address[] adminList);\\r\\n\\r\\n    event RemoveAdminList(address[] adminList);\\r\\n\\r\\n    mapping(address => bool) private _adminMap;\\r\\n    address private _rootAdmin;\\r\\n\\r\\n    modifier onlyRootAdmin() {\\r\\n        require(_rootAdmin == msg.sender, \\\"sender is not root admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Specify the root admin, only he has the rights to add and remove admins\\r\\n     */\\r\\n    constructor(address rootAdminWallet) {\\r\\n        _setRootAdmin(rootAdminWallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Needed to determine if the user has admin rights for platform contracts\\r\\n     */\\r\\n    function isAdmin(address wallet)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return wallet == _rootAdmin || _adminMap[wallet];\\r\\n    }\\r\\n\\r\\n    function rootAdmin() external view returns (address) {\\r\\n        return _rootAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only root admin can call\\r\\n     */\\r\\n    function insertAdminList(address[] calldata adminList)\\r\\n        external\\r\\n        onlyRootAdmin\\r\\n    {\\r\\n        require(0 < adminList.length, \\\"empty admin list\\\");\\r\\n\\r\\n        uint256 index = adminList.length;\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n\\r\\n            _adminMap[adminList[index]] = true;\\r\\n        }\\r\\n\\r\\n        emit InsertAdminList(adminList);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only root admin can call\\r\\n     */\\r\\n    function removeAdminList(address[] calldata adminList)\\r\\n        external\\r\\n        onlyRootAdmin\\r\\n    {\\r\\n        require(0 < adminList.length, \\\"empty admin list\\\");\\r\\n\\r\\n        uint256 index = adminList.length;\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n\\r\\n            _adminMap[adminList[index]] = false;\\r\\n        }\\r\\n\\r\\n        emit RemoveAdminList(adminList);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only root admin can call\\r\\n     */\\r\\n    function setRootAdmin(address rootAdminWallet) external onlyRootAdmin {\\r\\n        _setRootAdmin(rootAdminWallet);\\r\\n    }\\r\\n\\r\\n    function _setRootAdmin(address wallet) private {\\r\\n        require(wallet != address(0), \\\"wallet is zero address\\\");\\r\\n\\r\\n        _rootAdmin = wallet;\\r\\n\\r\\n        emit SetRootAdmin(wallet);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 4000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootAdminWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adminList\",\"type\":\"address[]\"}],\"name\":\"InsertAdminList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adminList\",\"type\":\"address[]\"}],\"name\":\"RemoveAdminList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetRootAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adminList\",\"type\":\"address[]\"}],\"name\":\"insertAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adminList\",\"type\":\"address[]\"}],\"name\":\"removeAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootAdminWallet\",\"type\":\"address\"}],\"name\":\"setRootAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlatformAdminPanel", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "4000", "ConstructorArguments": "000000000000000000000000bc9eee29be72df6603a36a85f1e3a45e55d15fe3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}