{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BenNationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport {Ownable} from \\\"./oz/access/Ownable.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"./oz/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport {BenNationInitializable} from \\\"./BenNationInitializable.sol\\\";\\r\\nimport {BenNationVault} from \\\"./BenNationVault.sol\\\";\\r\\n\\r\\ncontract BenNationFactory is Ownable {\\r\\n  event NewBenNationContract(address indexed smartChef, address indexed vault);\\r\\n\\r\\n  /*\\r\\n   * @notice Deploy the pool\\r\\n   * @param _stakedToken: staked token address\\r\\n   * @param _rewardToken: reward token address\\r\\n   * @param _rewardPerBlock: reward per block (in rewardToken)\\r\\n   * @param _startBlock: start block\\r\\n   * @param _endBlock: end block\\r\\n   * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\\r\\n   * @param _numberBlocksForUserLimit: block numbers available for user limit (after start block)\\r\\n   * @param _admin: admin address with ownership\\r\\n   */\\r\\n  function deployPool(\\r\\n    IERC20Metadata _stakedToken,\\r\\n    IERC20Metadata _rewardToken,\\r\\n    uint256 _rewardPerBlock,\\r\\n    uint256 _startBlock,\\r\\n    uint256 _endBlock,\\r\\n    uint256 _poolLimitPerUser,\\r\\n    uint256 _numberBlocksForUserLimit,\\r\\n    address _admin\\r\\n  ) external onlyOwner {\\r\\n    bytes32 salt = keccak256(abi.encodePacked(_stakedToken, _rewardToken, _startBlock));\\r\\n    address benNationAddress;\\r\\n    {\\r\\n      bytes memory bytecode = type(BenNationInitializable).creationCode;\\r\\n\\r\\n      assembly (\\\"memory-safe\\\") {\\r\\n        benNationAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    address vault;\\r\\n    if (_stakedToken == _rewardToken) {\\r\\n      bytes memory bytecode = type(BenNationVault).creationCode;\\r\\n      assembly (\\\"memory-safe\\\") {\\r\\n        vault := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n      }\\r\\n      BenNationVault(vault).transferOwnership(benNationAddress);\\r\\n    }\\r\\n\\r\\n    BenNationInitializable(benNationAddress).initialize(\\r\\n      _stakedToken,\\r\\n      _rewardToken,\\r\\n      _rewardPerBlock,\\r\\n      _startBlock,\\r\\n      _endBlock,\\r\\n      _poolLimitPerUser,\\r\\n      _numberBlocksForUserLimit,\\r\\n      vault,\\r\\n      _admin\\r\\n    );\\r\\n\\r\\n    emit NewBenNationContract(benNationAddress, vault);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BenNationInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport {Ownable} from \\\"./oz/access/Ownable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"./oz/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"./oz/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {SafeERC20} from \\\"./oz/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport {BenNationVault} from \\\"./BenNationVault.sol\\\";\\r\\n\\r\\ncontract BenNationInitializable is Ownable, ReentrancyGuard {\\r\\n  using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n  // The address of the smart chef factory\\r\\n  address public immutable BEN_NATION_FACTORY;\\r\\n\\r\\n  // Whether a limit is set for users\\r\\n  bool public userLimit;\\r\\n\\r\\n  // Whether it is initialized\\r\\n  bool public isInitialized;\\r\\n\\r\\n  // Accrued token per share\\r\\n  uint256 public accTokenPerShare;\\r\\n\\r\\n  // The block number when reward mining ends.\\r\\n  uint256 public endBlock;\\r\\n\\r\\n  // The block number when reward mining starts.\\r\\n  uint256 public startBlock;\\r\\n\\r\\n  // The block number of the last pool update\\r\\n  uint256 public lastRewardBlock;\\r\\n\\r\\n  // The pool limit (0 if none)\\r\\n  uint256 public poolLimitPerUser;\\r\\n\\r\\n  // Block numbers available for user limit (after start block)\\r\\n  uint256 public numberBlocksForUserLimit;\\r\\n\\r\\n  // Reward tokens created per block.\\r\\n  uint256 public rewardPerBlock;\\r\\n\\r\\n  // The precision factor\\r\\n  uint256 public PRECISION_FACTOR;\\r\\n\\r\\n  // The reward token\\r\\n  IERC20Metadata public rewardToken;\\r\\n\\r\\n  // The staked token\\r\\n  IERC20Metadata public stakedToken;\\r\\n\\r\\n  // The vault if rewardToken == stakedToken\\r\\n  BenNationVault public vault;\\r\\n\\r\\n  // Info of each user that stakes tokens (stakedToken)\\r\\n  mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n  struct UserInfo {\\r\\n    uint256 amount; // How many staked tokens the user has provided\\r\\n    uint256 rewardDebt; // Reward debt\\r\\n  }\\r\\n\\r\\n  event Deposit(address indexed user, uint256 amount);\\r\\n  event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n  event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\r\\n  event NewRewardPerBlock(uint256 rewardPerBlock);\\r\\n  event NewPoolLimit(uint256 poolLimitPerUser);\\r\\n  event RewardsStop(uint256 blockNumber);\\r\\n  event TokenRecovery(address indexed token, uint256 amount);\\r\\n  event Withdraw(address indexed user, uint256 amount);\\r\\n\\r\\n  error AmountToWithdrawTooHigh();\\r\\n  error MustBeSet();\\r\\n  error PoolHasStarted();\\r\\n  error NotFactory();\\r\\n  error MustBeInferiorTo30Decimals();\\r\\n  error DepositLimitReached();\\r\\n  error CannotRecoverStakedToken();\\r\\n  error CannotRecoverRewardToken();\\r\\n  error CannotRecoverZeroBalance();\\r\\n  error NewLimitMustBeHigher();\\r\\n  error AlreadyInitialized();\\r\\n  error NewStartHigherThanEndBlock();\\r\\n  error NewStartBlockLowerThanCurrentBlock();\\r\\n\\r\\n  modifier onlyFactory() {\\r\\n    if (msg.sender != BEN_NATION_FACTORY) {\\r\\n      revert NotFactory();\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Constructor\\r\\n   */\\r\\n  constructor() {\\r\\n    BEN_NATION_FACTORY = msg.sender;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Initialize the contract\\r\\n   * @param _stakedToken: staked token address\\r\\n   * @param _rewardToken: reward token address\\r\\n   * @param _rewardPerBlock: reward per block (in rewardToken)\\r\\n   * @param _startBlock: start block\\r\\n   * @param _endBlock: end block\\r\\n   * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\\r\\n   * @param _numberBlocksForUserLimit: block numbers available for user limit (after start block)\\r\\n   * @param _vault: vault address if rewardToken == stakedToken\\r\\n   * @param _admin: admin address with ownership\\r\\n   */\\r\\n  function initialize(\\r\\n    IERC20Metadata _stakedToken,\\r\\n    IERC20Metadata _rewardToken,\\r\\n    uint256 _rewardPerBlock,\\r\\n    uint256 _startBlock,\\r\\n    uint256 _endBlock,\\r\\n    uint256 _poolLimitPerUser,\\r\\n    uint256 _numberBlocksForUserLimit,\\r\\n    address _vault,\\r\\n    address _admin\\r\\n  ) external onlyFactory {\\r\\n    if (isInitialized) {\\r\\n      revert AlreadyInitialized();\\r\\n    }\\r\\n    if (_stakedToken == _rewardToken && _vault == address(0)) {\\r\\n      revert MustBeSet();\\r\\n    }\\r\\n\\r\\n    // Make this contract initialized\\r\\n    isInitialized = true;\\r\\n\\r\\n    stakedToken = _stakedToken;\\r\\n    rewardToken = _rewardToken;\\r\\n    rewardPerBlock = _rewardPerBlock;\\r\\n    startBlock = _startBlock;\\r\\n    endBlock = _endBlock;\\r\\n\\r\\n    if (_poolLimitPerUser > 0) {\\r\\n      userLimit = true;\\r\\n      poolLimitPerUser = _poolLimitPerUser;\\r\\n      numberBlocksForUserLimit = _numberBlocksForUserLimit;\\r\\n    }\\r\\n\\r\\n    uint256 decimalsRewardToken = uint256(rewardToken.decimals());\\r\\n    if (decimalsRewardToken >= 30) {\\r\\n      revert MustBeInferiorTo30Decimals();\\r\\n    }\\r\\n\\r\\n    PRECISION_FACTOR = uint256(10 ** (uint256(30) - decimalsRewardToken));\\r\\n\\r\\n    // Set the lastRewardBlock as the startBlock\\r\\n    lastRewardBlock = _startBlock;\\r\\n\\r\\n    vault = BenNationVault(_vault);\\r\\n\\r\\n    // Transfer ownership to the admin address who becomes owner of the contract\\r\\n    transferOwnership(_admin);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Deposit staked tokens and collect reward tokens (if any)\\r\\n   * @param _amount: amount to withdraw (in rewardToken)\\r\\n   */\\r\\n  function deposit(uint256 _amount) external nonReentrant {\\r\\n    UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n    userLimit = hasUserLimit();\\r\\n\\r\\n    if (userLimit && !((_amount + user.amount) <= poolLimitPerUser)) {\\r\\n      revert DepositLimitReached();\\r\\n    }\\r\\n\\r\\n    _updatePool();\\r\\n\\r\\n    if (user.amount > 0) {\\r\\n      uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n      if (pending > 0) {\\r\\n        _safeTransfer(pending);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (_amount > 0) {\\r\\n      user.amount = user.amount + _amount;\\r\\n      stakedToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n    emit Deposit(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Withdraw staked tokens and collect reward tokens\\r\\n   * @param _amount: amount to withdraw (in rewardToken)\\r\\n   */\\r\\n  function withdraw(uint256 _amount) external nonReentrant {\\r\\n    UserInfo storage user = userInfo[msg.sender];\\r\\n    if (user.amount < _amount) {\\r\\n      revert AmountToWithdrawTooHigh();\\r\\n    }\\r\\n\\r\\n    _updatePool();\\r\\n\\r\\n    uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n\\r\\n    if (_amount > 0) {\\r\\n      user.amount = user.amount - _amount;\\r\\n      stakedToken.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    if (pending > 0) {\\r\\n      _safeTransfer(pending);\\r\\n    }\\r\\n\\r\\n    user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n    emit Withdraw(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Withdraw staked tokens without caring about rewards\\r\\n   * @dev Needs to be for emergency.\\r\\n   */\\r\\n  function emergencyWithdraw() external nonReentrant {\\r\\n    UserInfo storage user = userInfo[msg.sender];\\r\\n    uint256 amountToTransfer = user.amount;\\r\\n    user.amount = 0;\\r\\n    user.rewardDebt = 0;\\r\\n\\r\\n    if (amountToTransfer > 0) {\\r\\n      stakedToken.safeTransfer(msg.sender, amountToTransfer);\\r\\n    }\\r\\n\\r\\n    emit EmergencyWithdraw(msg.sender, user.amount);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Stop rewards\\r\\n   * @dev Only callable by owner. Needs to be for emergency.\\r\\n   */\\r\\n  function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\r\\n    _safeTransfer(_amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Allows the owner to recover tokens sent to the contract by mistake\\r\\n   * @param _token: token address\\r\\n   * @dev Callable by owner\\r\\n   */\\r\\n  function recoverToken(address _token) external onlyOwner {\\r\\n    if (_token == address(stakedToken)) {\\r\\n      revert CannotRecoverStakedToken();\\r\\n    }\\r\\n    if (_token == address(rewardToken)) {\\r\\n      revert CannotRecoverRewardToken();\\r\\n    }\\r\\n\\r\\n    uint256 balance = IERC20Metadata(_token).balanceOf(address(this));\\r\\n    if (balance == 0) {\\r\\n      revert CannotRecoverZeroBalance();\\r\\n    }\\r\\n\\r\\n    IERC20Metadata(_token).safeTransfer(msg.sender, balance);\\r\\n\\r\\n    emit TokenRecovery(_token, balance);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Stop rewards\\r\\n   * @dev Only callable by owner\\r\\n   */\\r\\n  function stopReward() external onlyOwner {\\r\\n    endBlock = block.number;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Update pool limit per user\\r\\n   * @dev Only callable by owner.\\r\\n   * @param _userLimit: whether the limit remains forced\\r\\n   * @param _poolLimitPerUser: new pool limit per user\\r\\n   */\\r\\n  function updatePoolLimitPerUser(bool _userLimit, uint256 _poolLimitPerUser) external onlyOwner {\\r\\n    if (!userLimit) {\\r\\n      revert MustBeSet();\\r\\n    }\\r\\n    if (_userLimit) {\\r\\n      if (_poolLimitPerUser <= poolLimitPerUser) {\\r\\n        revert NewLimitMustBeHigher();\\r\\n      }\\r\\n      poolLimitPerUser = _poolLimitPerUser;\\r\\n    } else {\\r\\n      userLimit = _userLimit;\\r\\n      poolLimitPerUser = 0;\\r\\n    }\\r\\n    emit NewPoolLimit(poolLimitPerUser);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Update reward per block\\r\\n   * @dev Only callable by owner.\\r\\n   * @param _rewardPerBlock: the reward per block\\r\\n   */\\r\\n  function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\r\\n    if (block.number >= startBlock) {\\r\\n      revert PoolHasStarted();\\r\\n    }\\r\\n    rewardPerBlock = _rewardPerBlock;\\r\\n    emit NewRewardPerBlock(_rewardPerBlock);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice It allows the admin to update start and end blocks\\r\\n   * @dev This function is only callable by owner.\\r\\n   * @param _startBlock: the new start block\\r\\n   * @param _endBlock: the new end block\\r\\n   */\\r\\n  function updateStartAndEndBlocks(uint256 _startBlock, uint256 _endBlock) external onlyOwner {\\r\\n    if (block.number >= startBlock) {\\r\\n      revert PoolHasStarted();\\r\\n    }\\r\\n    if (_startBlock >= _endBlock) {\\r\\n      revert NewStartHigherThanEndBlock();\\r\\n    }\\r\\n    if (block.number >= _startBlock) {\\r\\n      revert NewStartBlockLowerThanCurrentBlock();\\r\\n    }\\r\\n\\r\\n    startBlock = _startBlock;\\r\\n    endBlock = _endBlock;\\r\\n\\r\\n    // Set the lastRewardBlock as the startBlock\\r\\n    lastRewardBlock = startBlock;\\r\\n\\r\\n    emit NewStartAndEndBlocks(_startBlock, _endBlock);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice View function to see pending reward on frontend.\\r\\n   * @param _user: user address\\r\\n   * @return Pending reward for a given user\\r\\n   */\\r\\n  function pendingReward(address _user) external view returns (uint256) {\\r\\n    UserInfo storage user = userInfo[_user];\\r\\n    uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\r\\n    if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\\r\\n      uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n      uint256 reward = multiplier * rewardPerBlock;\\r\\n      uint256 adjustedTokenPerShare = accTokenPerShare + (reward * PRECISION_FACTOR) / stakedTokenSupply;\\r\\n      return (user.amount * adjustedTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n    } else {\\r\\n      return (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Update reward variables of the given pool to be up-to-date.\\r\\n   */\\r\\n  function _updatePool() internal {\\r\\n    if (block.number <= lastRewardBlock) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\r\\n\\r\\n    if (stakedTokenSupply == 0) {\\r\\n      lastRewardBlock = block.number;\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n    uint256 reward = multiplier * rewardPerBlock;\\r\\n    accTokenPerShare = accTokenPerShare + (reward * PRECISION_FACTOR) / stakedTokenSupply;\\r\\n    lastRewardBlock = block.number;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Transfer from this contract if it doesn't use a vault, otherwise transfer from vault\\r\\n   */\\r\\n  function _safeTransfer(uint256 _amount) internal {\\r\\n    if (stakedToken == rewardToken) {\\r\\n      vault.safeTransfer(rewardToken, msg.sender, _amount);\\r\\n    } else {\\r\\n      rewardToken.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Return reward multiplier over the given _from to _to block.\\r\\n   * @param _from: block to start\\r\\n   * @param _to: block to finish\\r\\n   */\\r\\n  function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\\r\\n    if (_to <= endBlock) {\\r\\n      return _to - _from;\\r\\n    } else if (_from >= endBlock) {\\r\\n      return 0;\\r\\n    } else {\\r\\n      return endBlock - _from;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * @notice Return user limit is set or zero.\\r\\n   */\\r\\n  function hasUserLimit() public view returns (bool) {\\r\\n    if (!userLimit || (block.number >= (startBlock + numberBlocksForUserLimit))) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BenNationVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport {SafeERC20, IERC20} from \\\"./oz/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {Ownable} from \\\"./oz/access/Ownable.sol\\\";\\r\\n\\r\\ncontract BenNationVault is Ownable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  function safeTransfer(IERC20 _token, address _to, uint _amount) external onlyOwner {\\r\\n    _token.safeTransfer(_to, _amount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    error OnlyOwner();\\r\\n    error NewOwnerIsZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OnlyOwner();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert NewOwnerIsZeroAddress();\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    error SafeERC20ApproveFromNonZeroToNonZeroAllowance();\\r\\n    error SafeERC20DecreaseAllowanceBelowZero();\\r\\n    error SafeERC20PermitInvalidNonce();\\r\\n    error SafeERC20ERC20OperationFailed();\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\r\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        if ((value != 0) && (token.allowance(address(this), spender) != 0)) {\\r\\n            revert SafeERC20ApproveFromNonZeroToNonZeroAllowance();\\r\\n        }\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            if (oldAllowance < value) {\\r\\n                revert SafeERC20DecreaseAllowanceBelowZero();\\r\\n            }\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\r\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\r\\n     */\\r\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\r\\n\\r\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\r\\n            _callOptionalReturn(token, approvalCall);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\r\\n     * Revert on invalid signature.\\r\\n     */\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        if (nonceAfter != nonceBefore + 1) {\\r\\n            revert SafeERC20PermitInvalidNonce();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\r\\n            revert SafeERC20ERC20OperationFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     *\\r\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\r\\n     */\\r\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\r\\n        // and not revert is the subcall reverts.\\r\\n\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        return\\r\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999999,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartChef\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"NewBenNationContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberBlocksForUserLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BenNationFactory", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "9999999", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}