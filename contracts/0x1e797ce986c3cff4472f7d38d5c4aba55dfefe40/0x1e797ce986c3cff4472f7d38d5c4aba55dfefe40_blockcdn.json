{"SourceCode": "pragma solidity ^0.4.2;\r\ncontract blockcdn {\r\n    mapping (address => uint256) balances;\r\n\tmapping (address => uint256) fundValue;\r\n\taddress public owner;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public minFundedValue;\r\n\tuint256 public maxFundedValue;\r\n    bool public isFundedMax;\r\n    bool public isFundedMini;\r\n    uint256 public closeTime;\r\n    uint256 public startTime;\r\n    \r\n     /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    function blockcdn(\r\n\t    address _owner,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n\t\tuint256 _totalSupply,\r\n        uint256 _closeTime,\r\n        uint256 _startTime,\r\n\t\tuint256 _minValue,\r\n\t\tuint256 _maxValue\r\n        ) { \r\n        owner = _owner;                                      // Set owner of contract \r\n        name = _tokenName;                                   // Set the name for display purposes\r\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        closeTime = _closeTime;                              // Set fund closing time\r\n\t\tstartTime = _startTime;                              // Set fund start time\r\n\t\ttotalSupply = _totalSupply;                          // Total supply\r\n\t\tminFundedValue = _minValue;                          // Set minimum funding goal\r\n\t\tmaxFundedValue = _maxValue;                          // Set max funding goal\r\n\t\tisFundedMax = false;                                 // Initialize fund minimum flag \r\n\t\tisFundedMini = false;                                // Initialize fund max flag\r\n\t\tbalances[owner] = _totalSupply;                      // Set owner balance equal totalsupply \r\n    }\r\n    \r\n\t/*default-function called when values are sent */\r\n\tfunction () payable {\r\n       buyBlockCDN();\r\n    }\r\n\t\r\n    /*send ethereum and get BCDN*/\r\n    function buyBlockCDN() payable returns (bool success){\r\n\t\tif(msg.sender == owner) throw;\r\n        if(now > closeTime) throw; \r\n        if(now < startTime) throw;\r\n        if(isFundedMax) throw;\r\n        uint256 token = 0;\r\n        if(closeTime - 2 weeks > now) {\r\n             token = msg.value;\r\n        }else {\r\n            uint day = (now - (closeTime - 2 weeks))/(2 days) + 1;\r\n            token = msg.value;\r\n            while( day > 0) {\r\n                token  =   token * 95 / 100 ;    \r\n                day -= 1;\r\n            }\r\n        }\r\n        \r\n        balances[msg.sender] += token;\r\n        if(balances[owner] < token) \r\n            return false;\r\n        balances[owner] -= token;\r\n        if(this.balance >= minFundedValue) {\r\n            isFundedMini = true;\r\n        }\r\n        if(this.balance >= maxFundedValue) {\r\n            isFundedMax = true;   \r\n        }\r\n\t\tfundValue[msg.sender] += msg.value;\r\n        Transfer(owner, msg.sender, token);    \r\n        return true;\r\n    }    \r\n    \r\n     /*query BCDN balance*/\r\n    function balanceOf( address _owner) constant returns (uint256 value)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\t\r\n\t/*query fund ethereum balance */\r\n\tfunction balanceOfFund(address _owner) constant returns (uint256 value)\r\n\t{\r\n\t\treturn fundValue[_owner];\r\n\t}\r\n\r\n    /*refund 'msg.sender' in the case the Token Sale didn't reach ite minimum \r\n    funding goal*/\r\n    function reFund() payable returns (bool success) {\r\n        if(now <= closeTime) throw;     \r\n\t\tif(isFundedMini) throw;             \r\n\t\tuint256 value = fundValue[msg.sender];\r\n\t\tfundValue[msg.sender] = 0;\r\n\t\tif(value <= 0) throw;\r\n        if(!msg.sender.send(value)) \r\n            throw;\r\n        balances[owner] +=  balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        Transfer(msg.sender, this, balances[msg.sender]); \r\n        return true;\r\n    }\r\n\r\n\t\r\n\t/*refund _fundaddr in the case the Token Sale didn't reach ite minimum \r\n    funding goal*/\r\n\tfunction reFundByOther(address _fundaddr) payable returns (bool success) {\r\n\t    if(now <= closeTime) throw;    \r\n\t\tif(isFundedMini) throw;           \r\n\t\tuint256 value = fundValue[_fundaddr];\r\n\t\tfundValue[_fundaddr] = 0;\r\n\t\tif(value <= 0) throw;\r\n        if(!_fundaddr.send(value)) throw;\r\n        balances[owner] += balances[_fundaddr];\r\n        balances[_fundaddr] = 0;\r\n        Transfer(msg.sender, this, balances[_fundaddr]); \r\n        return true;\r\n\t}\r\n\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) payable returns (bool success) {\r\n        if(_value <= 0 ) throw;                                      // Check send token value > 0;\r\n\t\tif (balances[msg.sender] < _value) throw;                    // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) throw;           // Check for overflows\r\n\t\tif(now < closeTime ) {\t\t\t\t\t\t\t\t\t\t // unclosed allowed retrieval, Closed fund allow transfer   \r\n\t\t\tif(_to == address(this)) {\r\n\t\t\t\tfundValue[msg.sender] -= _value;\r\n\t\t\t\tbalances[msg.sender] -= _value;\r\n\t\t\t\tbalances[owner] += _value;\r\n\t\t\t\tif(!msg.sender.send(_value))\r\n\t\t\t\t\treturn false;\r\n\t\t\t\tTransfer(msg.sender, _to, _value); \t\t\t\t\t\t\t// Notify anyone listening that this transfer took place\r\n\t\t\t\treturn true;      \r\n\t\t\t}\r\n\t\t} \t\t\t\t\t\t\t\t\t\t\r\n\t\t\r\n\t\tbalances[msg.sender] -= _value;                          // Subtract from the sender\r\n\t\tbalances[_to] += _value;                                 // Add the same to the recipient                       \r\n\t\t \r\n\t\tTransfer(msg.sender, _to, _value); \t\t\t\t\t\t\t// Notify anyone listening that this transfer took place\r\n\t\treturn true;      \r\n    }\r\n    \r\n    /*send reward*/\r\n    function sendRewardBlockCDN(address rewarder, uint256 value) payable returns (bool success) {\r\n        if(msg.sender != owner) throw;\r\n\t\tif(now <= closeTime) throw;        \r\n\t\tif(!isFundedMini) throw;               \r\n        if( balances[owner] < value) throw;\r\n        balances[rewarder] += value;\r\n        uint256 halfValue  = value / 2;\r\n        balances[owner] -= halfValue;\r\n        totalSupply +=  halfValue;\r\n        Transfer(owner, rewarder, value);    \r\n        return true;\r\n       \r\n    }\r\n    \r\n    function modifyStartTime(uint256 _startTime) {\r\n\t\tif(msg.sender != owner) throw;\r\n        startTime = _startTime;\r\n    }\r\n    \r\n    function modifyCloseTime(uint256 _closeTime) {\r\n\t\tif(msg.sender != owner) throw;\r\n       closeTime = _closeTime;\r\n    }\r\n    \r\n    /*withDraw ethereum when closed fund*/\r\n    function withDrawEth(uint256 value) payable returns (bool success) {\r\n        if(now <= closeTime ) throw;\r\n        if(!isFundedMini) throw;\r\n        if(this.balance < value) throw;\r\n        if(msg.sender != owner) throw;\r\n        if(!msg.sender.send(value))\r\n            return false;\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reFund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfFund\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withDrawEth\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rewarder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendRewardBlockCDN\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closeTime\",\"type\":\"uint256\"}],\"name\":\"modifyCloseTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyBlockCDN\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFundedMini\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFundedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"modifyStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundaddr\",\"type\":\"address\"}],\"name\":\"reFundByOther\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFundedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFundedMax\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_closeTime\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_minValue\",\"type\":\"uint256\"},{\"name\":\"_maxValue\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "blockcdn", "CompilerVersion": "v0.4.2+commit.af6afb04", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000015cac84e1f7fafe8ed8811b3d2f1359c5074aa8a0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000058605d8000000000000000000000000000000000000000000000000000000000583b7380000000000000000000000000000000000000000000001fc3842bd1f071c000000000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000000000000000000000044243444e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044243444e00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}