{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/invoke/Bounty.sol\": {\r\n      \"content\": \"pragma solidity =0.8.15;\\n\\nimport {IIndexToken} from \\\"../interfaces/IIndexToken.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {TokenInfo} from \\\"../Common.sol\\\";\\nimport {SCALAR, fmul} from \\\"../lib/FixedPoint.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface Rebalancer {\\n    function rebalanceCallback(\\n        TokenInfo[] calldata required,\\n        TokenInfo[] calldata received\\n    ) external;\\n}\\n\\ninterface ActiveBounty {\\n    function activeBounty() external view returns (bytes32);\\n\\n    function authority() external view returns (address);\\n}\\n\\nstruct Bounty {\\n    TokenInfo[] infos;\\n    uint256 deadline;\\n    bytes32 salt;\\n}\\n\\nstruct QuoteInput {\\n    TokenInfo[] targets;\\n    uint256 supply;\\n    uint256 trackedMultiplier;\\n}\\n\\ncontract InvokeableBounty {\\n    using SafeERC20 for IERC20;\\n    error BountyInvalidHash();\\n    error BountyAlreadyCompleted();\\n    error BountyPastDeadline();\\n    error BountyAMKTSupplyChange();\\n    error BountyReentrant();\\n    error BountyMustIncludeAllUnderlyings();\\n\\n    event BountyFulfilled(Bounty bounty, bool callback);\\n\\n    mapping(bytes32 => bool) public completedBounties;\\n\\n    IIndexToken public immutable indexToken;\\n\\n    IVault public immutable vault;\\n\\n    ActiveBounty public immutable activeBounty;\\n\\n    uint256 public immutable version;\\n    uint256 public immutable chainId;\\n\\n    uint256 public reentrancyLock = 1;\\n\\n    modifier ReentrancyGuard() {\\n        if (reentrancyLock > 1) revert BountyReentrant();\\n        reentrancyLock = 2;\\n        _;\\n        reentrancyLock = 1;\\n    }\\n\\n    modifier invariantCheck() {\\n        _;\\n        vault.invariantCheck();\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _activeBounty,\\n        uint256 _version,\\n        uint256 _chainId\\n    ) {\\n        vault = IVault(_vault);\\n        indexToken = IIndexToken(vault.indexToken());\\n        activeBounty = ActiveBounty(_activeBounty);\\n        version = _version;\\n        chainId = _chainId;\\n    }\\n\\n    /// @notice fulfill a bounty, were going to reset the multiplier to 1 (SCALAR) here\\n    /// @dev we send out the tokens first, so we need to check for weird supply stuff\\n    /// @dev also we dont follow CEI so we need to check for reentrancy\\n    /// @dev the units in the bounty are the target units, ie amount of units per 1e18 amkt\\n    /// @dev check for supply becasue even though they mint/burn at the smae price becasue nominals havent been changed yet,\\n    ///      if the  supply changes the \\\"value\\\" of the first leg will be differnt from the \\\"value\\\" of the second leg\\n    ///\\n    ///\\n    /// @param bounty the bounty to fulfill\\n    /// @param callback whether or not to call the rebalancer callback\\n    function fulfillBounty(\\n        Bounty memory bounty,\\n        bool callback\\n    ) external ReentrancyGuard invariantCheck {\\n        bytes32 bountyHash = hashBounty(bounty);\\n\\n        if (activeBounty.activeBounty() != bountyHash)\\n            revert BountyInvalidHash();\\n\\n        if (completedBounties[bountyHash]) revert BountyAlreadyCompleted();\\n\\n        if (block.timestamp > bounty.deadline) revert BountyPastDeadline();\\n\\n        vault.tryInflation();\\n\\n        (, uint256 trackedMultiplier, , ) = vault.multiplier();\\n\\n        uint256 startingSupply = indexToken.totalSupply();\\n\\n        (\\n            IVault.InvokeERC20Args[] memory outs,\\n            TokenInfo[] memory ins,\\n            IVault.SetNominalArgs[] memory nominals,\\n            uint256 underlyingTally\\n        ) = _quote(QuoteInput(bounty.infos, startingSupply, trackedMultiplier));\\n\\n        if (underlyingTally < vault.underlyingLength())\\n            revert BountyMustIncludeAllUnderlyings();\\n\\n        // sends all the tokens to the rebalancer first\\n        vault.invokeERC20s(outs);\\n\\n        if (callback) {\\n            Rebalancer(msg.sender).rebalanceCallback(ins, intoTokenInfo(outs));\\n        }\\n\\n        if (indexToken.totalSupply() != startingSupply) {\\n            revert BountyAMKTSupplyChange();\\n        }\\n\\n        // take all tokens from msg.sender\\n        for (uint256 i; i < ins.length; i++) {\\n            IERC20(ins[i].token).safeTransferFrom(\\n                msg.sender,\\n                address(vault),\\n                ins[i].units\\n            );\\n        }\\n\\n        // in case any tokens have a callback\\n        if (indexToken.totalSupply() != startingSupply) {\\n            revert BountyAMKTSupplyChange();\\n        }\\n\\n        vault.invokeSetNominals(nominals);\\n        vault.invokeSetMultiplier(SCALAR);\\n\\n        completedBounties[bountyHash] = true;\\n        emit BountyFulfilled(bounty, callback);\\n    }\\n\\n    function quoteBounty(\\n        Bounty calldata bounty\\n    ) external view returns (TokenInfo[] memory outs, TokenInfo[] memory) {\\n        (, uint256 trackedMultipler, , ) = vault.multiplier();\\n\\n        uint256 startingSupply = indexToken.totalSupply();\\n\\n        TokenInfo[] memory targets = bounty.infos;\\n\\n        (\\n            IVault.InvokeERC20Args[] memory _outs,\\n            TokenInfo[] memory ins,\\n            ,\\n\\n        ) = _quote(QuoteInput(targets, startingSupply, trackedMultipler));\\n\\n        outs = intoTokenInfo(_outs);\\n        return (outs, ins);\\n    }\\n\\n    function _quote(\\n        QuoteInput memory input\\n    )\\n        internal\\n        view\\n        returns (\\n            IVault.InvokeERC20Args[] memory outs,\\n            TokenInfo[] memory ins,\\n            IVault.SetNominalArgs[] memory nominals,\\n            uint256 underlyingTally\\n        )\\n    {\\n        outs = new IVault.InvokeERC20Args[](input.targets.length);\\n\\n        ins = new TokenInfo[](input.targets.length);\\n\\n        nominals = new IVault.SetNominalArgs[](input.targets.length);\\n\\n        // store the lengths because we dont actually know the size off the bat\\n        uint256 lenOuts;\\n        uint256 lenIns;\\n        uint256 lenNominals;\\n\\n        for (uint256 i; i < input.targets.length; i++) {\\n            address token = input.targets[i].token;\\n\\n            if (vault.isUnderlying(token)) underlyingTally++;\\n\\n            // number of target units per 1e18 amkt\\n            uint256 targetUnits = input.targets[i].units;\\n\\n            uint256 realUnitsAtLastFeeTimestamp = fmul(\\n                vault.virtualUnits(token),\\n                input.trackedMultiplier\\n            );\\n\\n            if (realUnitsAtLastFeeTimestamp > targetUnits) {\\n                outs[lenOuts] = IVault.InvokeERC20Args(\\n                    token,\\n                    msg.sender,\\n                    fmul(\\n                        realUnitsAtLastFeeTimestamp - targetUnits,\\n                        input.supply\\n                    )\\n                );\\n\\n                unchecked {\\n                    lenOuts++;\\n                }\\n            } else if (targetUnits > realUnitsAtLastFeeTimestamp) {\\n                ins[lenIns] = TokenInfo(\\n                    token,\\n                    fmul(\\n                        targetUnits - realUnitsAtLastFeeTimestamp,\\n                        input.supply\\n                    )\\n                );\\n\\n                unchecked {\\n                    lenIns++;\\n                }\\n            } else {\\n                // theyre equal so we dont need to do anything\\n                continue;\\n            }\\n\\n            nominals[lenNominals] = IVault.SetNominalArgs(token, targetUnits);\\n\\n            unchecked {\\n                lenNominals++;\\n            }\\n        }\\n\\n        // use assembly to set the actual sizes so were not sending over a bunch of empty data\\n        // no effect, since the compiler is planning on allocating outside of this empty zone anyway\\n        assembly {\\n            mstore(outs, lenOuts)\\n            mstore(ins, lenIns)\\n            mstore(nominals, lenNominals)\\n        }\\n\\n        return (outs, ins, nominals, underlyingTally);\\n    }\\n\\n    function hashBounty(\\n        Bounty memory bounty\\n    ) public view returns (bytes32 hash) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"alongside::invoker::bounty\\\",\\n                    abi.encode(version),\\n                    abi.encode(chainId),\\n                    keccak256(abi.encode(bounty))\\n                )\\n            );\\n    }\\n\\n    function intoTokenInfo(\\n        IVault.InvokeERC20Args[] memory args\\n    ) internal pure returns (TokenInfo[] memory infos) {\\n        infos = new TokenInfo[](args.length);\\n\\n        for (uint256 i; i < args.length; i++) {\\n            infos[i] = TokenInfo(args[i].token, args[i].amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IIndexToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\n\\ninterface IIndexToken is IERC20Upgradeable {\\n    event MinterSet(address indexed minter);\\n\\n    ///=============================================================================================\\n    /// Initializer\\n    ///=============================================================================================\\n\\n    function initialize(address _minter) external;\\n\\n    ///=============================================================================================\\n    /// State\\n    ///=============================================================================================\\n\\n    function minter() external view returns (address);\\n\\n    ///=============================================================================================\\n    /// Mint Logic\\n    ///=============================================================================================\\n\\n    /// @notice External mint function\\n    /// @dev Mint function can only be called externally by the controller\\n    /// @param to address\\n    /// @param amount uint256\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @notice External burn function\\n    /// @dev burn function can only be called externally by the controller\\n    /// @param from address\\n    /// @param amount uint256\\n    function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity =0.8.15;\\n\\nimport {TokenInfo} from \\\"../Common.sol\\\";\\nimport {IIndexToken} from \\\"./IIndexToken.sol\\\";\\n\\ninterface IVault {\\n    error AMKTVaultOnlyInvokers();\\n    error AMKTVaultOnly(address who);\\n    error AMKTVaultFeeTooLarge();\\n    error AMKTVaultEmergency();\\n    error VaultInvariant();\\n\\n    event VaultIssuanceSet(address issuance);\\n    event VaultRebalancerSet(address rebalancer);\\n    event VaultFeeRecipientSet(address feeRecipient);\\n    event VaultEmergencyResponderSet(address emergencyResponder);\\n    event VaultFeeScaledSet(uint256 feeScaled);\\n    event VaultEmergencySet(bool emergency);\\n    event VaultFeeMinted(address indexed to, uint256 amount);\\n\\n    struct InvokeERC20Args {\\n        address token;\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    struct SetNominalArgs {\\n        address token;\\n        uint256 virtualUnits;\\n    }\\n\\n    function issuance() external view returns (address);\\n\\n    function rebalancer() external view returns (address);\\n\\n    function tryInflation() external returns (uint256);\\n\\n    function feeScaled() external view returns (uint256);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function invokeERC20s(InvokeERC20Args[] calldata args) external;\\n\\n    function invokeSetNominals(SetNominalArgs[] calldata args) external;\\n\\n    function invokeERC20(InvokeERC20Args calldata args) external;\\n\\n    function invokeSetNominal(SetNominalArgs calldata args) external;\\n\\n    function invokeSetMultiplier(uint256 multiplier) external;\\n\\n    function virtualUnits(address token) external view returns (uint256);\\n\\n    function realUnits(address token) external view returns (uint256);\\n\\n    function realUnits() external view returns (TokenInfo[] memory);\\n\\n    function invariantCheck() external view;\\n\\n    function isUnderlying(address target) external view returns (bool);\\n\\n    function underlying() external view returns (address[] memory);\\n\\n    function underlyingLength() external view returns (uint256);\\n\\n    function invokeMint(address to, uint256 amount) external;\\n\\n    function invokeBurn(address from, uint256 amount) external;\\n\\n    function indexToken() external view returns (IIndexToken);\\n\\n    function multiplier()\\n        external\\n        view\\n        returns (\\n            uint256 lastTrackedTimestamp,\\n            uint256 lastTrackedMultiplier,\\n            uint256 newFeeAccrued,\\n            uint256 multiplier\\n        );\\n}\\n\"\r\n    },\r\n    \"src/Common.sol\": {\r\n      \"content\": \"pragma solidity =0.8.15;\\n\\nstruct TokenInfo {\\n    address token;\\n    uint256 units;\\n}\\n\"\r\n    },\r\n    \"src/lib/FixedPoint.sol\": {\r\n      \"content\": \"pragma solidity =0.8.15;\\n\\nuint256 constant SCALAR = 1e18;\\n\\nfunction fmul(uint256 a, uint256 b) pure returns (uint256 ret) {\\n    ret = (a * b) / SCALAR;\\n}\\n\\nfunction fdiv(uint256 a, uint256 b) pure returns (uint256 ret) {\\n    ret = (a * SCALAR) / b;\\n}\\n\\nfunction finv(uint256 a) pure returns (uint256 ret) {\\n    ret = fdiv(SCALAR, a);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"src/=src/\",\r\n      \"invoke-modules/=src/invoke/\",\r\n      \"core-libs/=src/lib/\",\r\n      \"core-test/=test/core/\",\r\n      \"mocks/=test/mocks/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@optimism/=lib/optimism/packages/contracts-bedrock/contracts/\",\r\n      \"@amkt/contracts/=lib/amkt-contracts/src/\",\r\n      \"@layerzero/contracts/=lib/solidity-examples/contracts/\",\r\n      \"amkt-contracts/=lib/amkt-contracts/src/\",\r\n      \"multicall/=lib/optimism/packages/contracts-periphery/lib/multicall/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"optimism/=lib/optimism/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activeBounty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BountyAMKTSupplyChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyInvalidHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyMustIncludeAllUnderlyings\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyPastDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyReentrant\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct Bounty\",\"name\":\"bounty\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"callback\",\"type\":\"bool\"}],\"name\":\"BountyFulfilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeBounty\",\"outputs\":[{\"internalType\":\"contract ActiveBounty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"completedBounties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct Bounty\",\"name\":\"bounty\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"callback\",\"type\":\"bool\"}],\"name\":\"fulfillBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct Bounty\",\"name\":\"bounty\",\"type\":\"tuple\"}],\"name\":\"hashBounty\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexToken\",\"outputs\":[{\"internalType\":\"contract IIndexToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct Bounty\",\"name\":\"bounty\",\"type\":\"tuple\"}],\"name\":\"quoteBounty\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"outs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reentrancyLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InvokeableBounty", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000176ff36a5a92a68f624a5db2ce3dd0e0775c37730000000000000000000000009bd02de66b07cfe7d07345763fc995a2a2d6c1ed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}