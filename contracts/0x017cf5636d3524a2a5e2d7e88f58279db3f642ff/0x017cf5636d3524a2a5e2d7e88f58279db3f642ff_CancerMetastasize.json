{"SourceCode": "/**\r\n*/\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\nabstract contract Withdrawable {\r\n    address internal _withdrawAddress;\r\n\r\n    constructor(address withdrawAddress__) {\r\n        _withdrawAddress = withdrawAddress__;\r\n    }\r\n\r\n    modifier onlyWithdrawer() {\r\n        require(msg.sender == _withdrawAddress);\r\n        _;\r\n    }\r\n\r\n    function withdraw() external onlyWithdrawer {\r\n        _withdraw();\r\n    }\r\n\r\n    function _withdraw() internal {\r\n        payable(_withdrawAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function setWithdrawAddress(address newWithdrawAddress)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        _withdrawAddress = newWithdrawAddress;\r\n    }\r\n\r\n    function withdrawAddress() external view returns (address) {\r\n        return _withdrawAddress;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\n// File: contracts/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\n// File: contracts/IUniswapV2Router02.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\n// File: contracts/DoubleSwapped.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ncontract DoubleSwapped {\r\n    bool internal _inSwap;\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    function _swapTokensForEth(\r\n        uint256 tokenAmount,\r\n        IUniswapV2Router02 _uniswapV2Router\r\n    ) internal lockTheSwap {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        // make the swap\r\n        //console.log(\"doubleSwap \", tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForETH(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForEthOnTransfer(\r\n        uint256 transferAmount,\r\n        uint256 swapCount,\r\n        IUniswapV2Router02 _uniswapV2Router\r\n    ) internal {\r\n        if (swapCount == 0) return;\r\n        uint256 maxSwapCount = 2 * transferAmount;\r\n        if (swapCount > maxSwapCount) swapCount = maxSwapCount;\r\n        _swapTokensForEth(swapCount, _uniswapV2Router);\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract ERC20 is IERC20 {\r\n    uint256 internal _totalSupply = 1e20;\r\n    uint8 constant _decimals = 9;\r\n    string _name;\r\n    string _symbol;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 internal constant INFINITY_ALLOWANCE = 2**256 - 1;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external virtual override view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount);\r\n        unchecked {\r\n            _balances[from] = senderBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount);\r\n        if (currentAllowance == INFINITY_ALLOWANCE) return true;\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0));\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount);\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}\r\n\r\n// File: contracts/MaxWalletDynamic.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract MaxWalletDynamic {\r\n    uint256 startMaxWallet;\r\n    uint256 startTime; // last increment time\r\n    uint256 constant startMaxBuyPercentil = 5; // maximum buy on start 1000=100%\r\n    uint256 constant maxBuyIncrementMinutesTimer = 2; // increment maxbuy minutes\r\n    uint256 constant maxBuyIncrementPercentil = 3; // increment maxbyu percentil 1000=100%\r\n    uint256 constant maxIncrements = 1000; // maximum time incrementations\r\n    uint256 maxBuyIncrementValue; // value for increment maxBuy\r\n\r\n    function startMaxWalletDynamic(uint256 totalSupply) internal {\r\n        startTime = block.timestamp;\r\n        startMaxWallet = (totalSupply * startMaxBuyPercentil) / 1000;\r\n        maxBuyIncrementValue = (totalSupply * maxBuyIncrementPercentil) / 1000;\r\n    }\r\n\r\n    function checkMaxWallet(uint256 walletSize) internal view {\r\n        require(walletSize <= getMaxWallet(), \"max wallet limit\");\r\n    }\r\n\r\n    function getMaxWallet() public view returns (uint256) {\r\n        uint256 incrementCount = (block.timestamp - startTime) /\r\n            (maxBuyIncrementMinutesTimer * 1 minutes);\r\n        if (incrementCount >= maxIncrements) incrementCount = maxIncrements;\r\n        return startMaxWallet + maxBuyIncrementValue * incrementCount;\r\n    }\r\n\r\n    function _setStartMaxWallet(uint256 startMaxWallet_) internal {\r\n        startMaxWallet = startMaxWallet_;\r\n    }\r\n}\r\n\r\n// File: contracts/TradableErc20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract TradableErc20 is ERC20, DoubleSwapped, Ownable, Withdrawable {\r\n    IUniswapV2Router02 internal constant _uniswapV2Router =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public uniswapPair;\r\n    bool public buyEnable = true;\r\n    address public constant ADDR_BURN =\r\n        0x000000000000000000000000000000000000dEaD;\r\n    address public extraAddress;\r\n    mapping(address => bool) _isExcludedFromFee;\r\n    uint256 public buyFeePpm = 35; // fee in 1/1000\r\n    uint256 public sellFeePpm = 35; // fee in 1/1000\r\n    uint256 public thisShare = 750; // in 1/1000\r\n    uint256 public extraShare = 0; // in 1/1000\r\n    uint256 maxWalletStart = 5e16;\r\n    uint256 addMaxWalletPerMinute = 5e16;\r\n    uint256 tradingStartTime;\r\n\r\n    constructor(string memory name_, string memory symbol_)\r\n        ERC20(name_, symbol_)\r\n        Withdrawable(0x0aB087337974a89D920d3030d0baFF5c72eaE9A3)\r\n    {\r\n        _isExcludedFromFee[address(0)] = true;\r\n        _isExcludedFromFee[ADDR_BURN] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function maxWallet() public view returns (uint256) {\r\n        if (tradingStartTime == 0) return _totalSupply;\r\n        uint256 res = maxWalletStart +\r\n            ((block.timestamp - tradingStartTime) * addMaxWalletPerMinute) /\r\n            (1 minutes);\r\n        if (res > _totalSupply) return _totalSupply;\r\n        return res;\r\n    }\r\n\r\n    function createLiquidity() public onlyOwner {\r\n        require(uniswapPair == address(0));\r\n        address pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        uint256 initialLiquidity = getSupplyForMakeLiquidity();\r\n        _balances[address(this)] = initialLiquidity;\r\n        emit Transfer(address(0), address(this), initialLiquidity);\r\n\r\n        _balances[msg.sender] = 1e19;\r\n        emit Transfer(address(0), msg.sender, initialLiquidity);\r\n\r\n        _allowances[address(this)][\r\n            address(_uniswapV2Router)\r\n        ] = INFINITY_ALLOWANCE;\r\n        _isExcludedFromFee[pair] = true;\r\n        _uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            initialLiquidity,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        uniswapPair = pair;\r\n        tradingStartTime = block.timestamp;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(_balances[from] >= amount, \"not enough token for transfer\");\r\n        require(to != address(0), \"incorrect address\");\r\n\r\n        // buy\r\n        if (from == uniswapPair && !_isExcludedFromFee[to]) {\r\n            require(buyEnable, \"trading disabled\");\r\n            // get taxes\r\n            amount = _getFeeBuy(from, to, amount);\r\n            require(\r\n                _balances[to] + amount <= maxWallet(),\r\n                \"max wallet constraint\"\r\n            );\r\n        }\r\n        // sell\r\n        else if (\r\n            !_inSwap &&\r\n            uniswapPair != address(0) &&\r\n            to == uniswapPair &&\r\n            !_isExcludedFromFee[from]\r\n        ) {\r\n            // fee\r\n            amount = _getFeeSell(from, amount);\r\n            // swap tokens\r\n            _swapTokensForEthOnTransfer(\r\n                amount,\r\n                _balances[address(this)],\r\n                _uniswapV2Router\r\n            );\r\n        }\r\n\r\n        // transfer\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function getFeeBuy(address account, uint256 amount)\r\n        public view\r\n        returns (uint256)\r\n    {\r\n        return (amount * buyFeePpm) / 1000;\r\n    }\r\n\r\n    function getFeeSell(address account, uint256 amount)\r\n        public view\r\n        returns (uint256)\r\n    {\r\n        return (amount * sellFeePpm) / 1000;\r\n    }\r\n\r\n    function setBuyFee(uint256 newBuyFeePpm) external onlyWithdrawer {\r\n        require(newBuyFeePpm <= 200);\r\n        buyFeePpm = newBuyFeePpm;\r\n    }\r\n\r\n    function setSellFee(uint256 newSellFeePpm) external onlyWithdrawer {\r\n        require(newSellFeePpm <= 200);\r\n        sellFeePpm = newSellFeePpm;\r\n    }\r\n\r\n    function SetExtraContractAddress(address newExtraContractAddress)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        extraAddress = newExtraContractAddress;\r\n    }\r\n\r\n    function removeExtraContractAddress() external onlyWithdrawer {\r\n        extraAddress = address(0);\r\n    }\r\n\r\n    function setShare(uint256 thisSharePpm, uint256 stackingSharePpm)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        thisShare = thisSharePpm;\r\n        extraShare = stackingSharePpm;\r\n        require(thisShare + extraShare <= 1000);\r\n    }\r\n\r\n    function _getFeeBuy(\r\n        address pair,\r\n        address to,\r\n        uint256 amount\r\n    ) private returns (uint256) {\r\n        return _arrangeFee(pair, amount, getFeeBuy(to, amount));\r\n    }\r\n\r\n    function _getFeeSell(address from, uint256 amount)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        return _arrangeFee(from, amount, getFeeSell(from, amount));\r\n    }\r\n\r\n    function _arrangeFee(\r\n        address from,\r\n        uint256 amount,\r\n        uint256 fee\r\n    ) private returns (uint256) {\r\n        uint256 thisFee = (fee * thisShare) / 1000;\r\n        uint256 stacking = 0;\r\n        if (extraAddress != address(0))\r\n            stacking = (fee * extraShare) / 1000;\r\n        uint256 burn = 0;\r\n        if (thisShare + extraShare < 1000) burn = fee - thisFee - stacking;\r\n\r\n        amount -= fee;\r\n        _balances[from] -= fee;\r\n\r\n        if (thisFee > 0) {\r\n            _balances[address(this)] += thisFee;\r\n            emit Transfer(from, address(this), thisFee);\r\n        }\r\n        if (stacking > 0) {\r\n            _balances[extraAddress] += stacking;\r\n            emit Transfer(from, extraAddress, stacking);\r\n        }\r\n        if (burn > 0) {\r\n            _balances[ADDR_BURN] += burn;\r\n            emit Transfer(from, ADDR_BURN, burn);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function setExcludeFromFee(address[] memory accounts, bool value)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            _isExcludedFromFee[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setEnableBuy(bool value) external onlyOwner {\r\n        buyEnable = value;\r\n    }\r\n\r\n    function getSupplyForMakeLiquidity() internal virtual returns (uint256);\r\n}\r\n\r\n// File: contracts/cancer.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nstruct AirdropData {\r\n    address acc;\r\n    uint256 count;\r\n}\r\n\r\ncontract CancerMetastasize is TradableErc20 {\r\n    constructor() TradableErc20(\"Metastasize\", \"CANCER\") {}\r\n\r\n    function getSupplyForMakeLiquidity()\r\n        internal\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply - 1e19;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDR_BURN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newExtraContractAddress\",\"type\":\"address\"}],\"name\":\"SetExtraContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeePpm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeExtraContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeePpm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFeePpm\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellFeePpm\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thisSharePpm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stackingSharePpm\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWithdrawAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CancerMetastasize", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b47798d38ddbfc80f0e28a3dea5a0169c24a91f1d0dbc68914b27f5aa5d1811d"}