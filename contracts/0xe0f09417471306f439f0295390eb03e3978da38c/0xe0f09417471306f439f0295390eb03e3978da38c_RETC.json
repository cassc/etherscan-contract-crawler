{"SourceCode": "pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract RETC is ERC20 {\r\n    \r\n    using SafeMath for uint256; \r\n    address owner = msg.sender; \r\n\taddress locker15 = msg.sender;\r\n\taddress locker10 = msg.sender;\t\r\n\taddress locker05 = msg.sender;\t\r\n\t\r\n    mapping (address => uint256) balances; \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    mapping (address => uint256) times;//\u6b21\u6570T\r\n\r\n    mapping (address => mapping (uint256 => uint256)) lockdata;//\u6570\u76ee\r\n    mapping (address => mapping (uint256 => uint256)) locktime;//\u65f6\u95f4\u6233\r\n    mapping (address => mapping (uint256 => uint256)) lockday;//\u65f6\u95f4\r\n    \r\n    \r\n\r\n    string public constant name = \"RealEstatePublicBlockchain\";\r\n    string public constant symbol = \"RETC\";\r\n    uint public constant decimals = 3;\r\n    uint256 _Rate = 10 ** decimals; \r\n    uint256 public totalSupply = 10000000000 * _Rate;\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n     function RETC () public {\r\n        owner = msg.sender;\r\n  \r\n        balances[owner] = totalSupply;\r\n    }\r\n     function nowInSeconds() public view returns (uint256){\r\n        return now;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0) && newOwner != owner) {          \r\n             owner = newOwner;   \r\n        }\r\n    }\r\n\r\n    function locked(address _from, address _to, uint256 _amount) private {\r\n\t\tuint lockmon;\r\n\t\tuint lockper;\r\n\t\tif (_from == locker15) {\r\n            lockmon = 60 * 30 * 1 days;\r\n\t\t\tlockper = (_amount.div(100)).mul(15);\r\n        }\r\n\t\tif (_from == locker10) {\r\n\t\t    lockmon = 48 * 30 * 1 days;\r\n\t\t\tlockper = (_amount.div(100)).mul(10);\r\n        }\r\n\t\tif (_from == locker05 ) {\r\n            lockmon = 36 * 30 * 1 days;\r\n\t\t\tlockper = (_amount.div(100)).mul(5);\r\n        }\t\t\r\n\t\ttimes[_to] += 1;\r\n        locktime[_to][times[_to]] = now;\r\n        lockday[_to][times[_to]] = lockmon;\r\n        lockdata[_to][times[_to]] = lockper;\r\n        \r\n    }\r\n \r\n\r\n    function set_locker(address _locker15, address _locker10, address _locker05) onlyOwner public {\r\n\t\trequire(_locker15 != _locker10 && _locker15 != _locker05 && _locker05 != _locker10 );\r\n\t\tlocker15 = _locker15;\r\n\t\tlocker10 = _locker10;\t\r\n\t\tlocker05 = _locker05;\r\n\t\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n\t    return balances[_owner];\r\n    }\r\n//\u67e5\u8be2\u5730\u5740\u9501\u5b9a\u5e01\u6570\r\n    function lockOf(address _owner) constant public returns (uint256) {\r\n    uint locknum = 0;\r\n    for (uint8 i = 1; i < times[_owner] + 1; i++){\r\n       if(now < locktime[_owner][i] + 30* 1 days){\r\n            locknum += lockdata[_owner][i];\r\n        }\r\n       else{\r\n            if(now < locktime[_owner][i] + lockday[_owner][i] + 1* 1 days){\r\n\t\t\t\tuint lockmon = lockday[_owner][i].div(30 * 1 days);\r\n\t\t\t\tuint locknow = (now - locktime[_owner][i]).div(30 * 1 days);\r\n                locknum += ((lockmon-locknow).mul(lockdata[_owner][i])).div(lockmon);\r\n              }\r\n              else{\r\n                 locknum += 0;\r\n              }\r\n        }\r\n    }\r\n\r\n\r\n\t    return locknum;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= (balances[msg.sender].sub(lockOf(msg.sender))));\r\n                      \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\t\t\r\n\t\tif (msg.sender == locker15 || msg.sender == locker10 || msg.sender == locker05 ) {\r\n            locked(msg.sender, _to, _amount);\r\n        }\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= (allowed[_from][msg.sender].sub(lockOf(msg.sender))));\r\n\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        address theowner = msg.sender;\r\n        theowner.transfer(etherBalance);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locker15\",\"type\":\"address\"},{\"name\":\"_locker10\",\"type\":\"address\"},{\"name\":\"_locker05\",\"type\":\"address\"}],\"name\":\"set_locker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowInSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "RETC", "CompilerVersion": "v0.4.20+commit.3155dd80", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9bceffbee89e69fd1427416ac036afb03dc45cf230c8dadc5d248b2f4ab295e4"}