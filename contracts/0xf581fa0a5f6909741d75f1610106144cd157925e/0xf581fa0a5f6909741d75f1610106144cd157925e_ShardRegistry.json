{"SourceCode": "/* solhint-disable no-mix-tabs-and-spaces */\r\n/* solhint-disable indent */\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20Mintable} that adds a cap to the supply of tokens.\r\n */\r\ncontract ERC20Capped is ERC20Mintable {\r\n    uint256 private _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor (uint256 cap) public {\r\n        require(cap > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20Mintable-mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `value` must not cause the total supply to go over the cap.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(totalSupply().add(value) <= _cap, \"ERC20Capped: cap exceeded\");\r\n        super._mint(account, value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 with pausable transfers and allowances.\r\n *\r\n * Useful if you want to stop trades until the end of a crowdsale, or have\r\n * an emergency switch for freezing all token transfers in the event of a large\r\n * bug.\r\n */\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n/* solhint-disable no-mix-tabs-and-spaces */\r\n/* solhint-disable indent */\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n/* solhint-disable no-mix-tabs-and-spaces */\r\n/* solhint-disable indent */\r\n\r\n\r\n\r\n/**\r\n\t* @title Contract managing Shard Offering lifecycle, similar to a crowdsale.\r\n\t* @author Joel Hubert (Metalith.io)\r\n\t* @dev OpenZeppelin contracts are not ready for 0.6.0 yet, using 0.5.16.\r\n\t* @dev Acts as a wallet containing subscriber Ether.\r\n\t*/\r\n\r\ncontract ShardOffering {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tShardGovernor private _shardGovernor;\r\n\tuint private _offeringDeadline;\r\n\tuint private _pricePerShardInWei;\r\n\tuint private _contributionTargetInWei;\r\n\tuint private _liqProviderCutInShards;\r\n\tuint private _artistCutInShards;\r\n\tuint private _offererShardAmount;\r\n\r\n\taddress[] private _contributors;\r\n\tmapping(address => uint) private _contributionsinWei;\r\n\tmapping(address => uint) private _contributionsInShards;\r\n\tmapping(address => bool) private _hasClaimedShards;\r\n\tuint private _totalWeiContributed;\r\n\tuint private _totalShardsClaimed;\r\n\tbool private _offeringCompleted;\r\n\r\n\tevent Contribution(address indexed contributor, uint indexed weiAmount);\r\n\tevent OfferingWrappedUp();\r\n\r\n\tconstructor(\r\n\t\tuint pricePerShardInWei,\r\n\t\tuint shardAmountOffered,\r\n\t\tuint liqProviderCutInShards,\r\n\t\tuint artistCutInShards,\r\n\t\tuint offeringDeadline,\r\n\t\tuint cap\r\n\t) public {\r\n\t\t_pricePerShardInWei = pricePerShardInWei;\r\n\t\t_liqProviderCutInShards = liqProviderCutInShards;\r\n\t\t_artistCutInShards = artistCutInShards;\r\n\t\t_offeringDeadline = offeringDeadline;\r\n\t\t_shardGovernor = ShardGovernor(msg.sender);\r\n\t\t_contributionTargetInWei = (pricePerShardInWei.mul(shardAmountOffered)).div(10**18);\r\n\t\t_offererShardAmount = cap.sub(shardAmountOffered).sub(liqProviderCutInShards).sub(artistCutInShards);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Contribute Ether to offering.\r\n\t\t* @dev Blocks Offerer from contributing. May be exaggerated.\r\n\t\t* @dev if target Ether amount is raised, automatically transfers Ether to Offerer.\r\n\t\t*/\r\n\tfunction contribute() external payable {\r\n\t\trequire(\r\n\t\t\t!_offeringCompleted,\r\n\t\t\t\"[contribute] Offering is complete\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.value > 0,\r\n\t\t\t\"[contribute] Contribution requires ether\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.value <= _contributionTargetInWei - _totalWeiContributed,\r\n\t\t\t\"[contribute] Ether value exceeds remaining quota\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.sender != _shardGovernor.offererAddress(),\r\n\t\t\t\"[contribute] Offerer cannot contribute\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tnow < _offeringDeadline,\r\n\t\t\t\"[contribute] Deadline for offering expired\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_shardGovernor.checkLock(),\r\n\t\t\t\"[contribute] NFT not locked yet\"\r\n\t\t);\r\n\t\tif (_contributionsinWei[msg.sender] == 0) {\r\n\t\t\t_contributors.push(msg.sender);\r\n\t\t}\r\n\t\t_contributionsinWei[msg.sender] = _contributionsinWei[msg.sender].add(msg.value);\r\n\t\tuint shardAmount = (msg.value.mul(10**18)).div(_pricePerShardInWei);\r\n\t\t_contributionsInShards[msg.sender] = _contributionsInShards[msg.sender].add(shardAmount);\r\n\t\t_totalWeiContributed = _totalWeiContributed.add(msg.value);\r\n\t\t_totalShardsClaimed = _totalShardsClaimed.add(shardAmount);\r\n\t\tif (_totalWeiContributed == _contributionTargetInWei) {\r\n\t\t\t_offeringCompleted = true;\r\n\t\t\t(bool success, ) = _shardGovernor.offererAddress().call.value(address(this).balance)(\"\");\r\n\t\t\trequire(success, \"[contribute] Transfer failed.\");\r\n\t\t}\r\n\t\temit Contribution(msg.sender, msg.value);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Prematurely end Offering.\r\n\t\t* @dev Called by Governor contract when Offering deadline expires and has not\r\n\t\t* raised the target amount of Ether.\r\n\t\t* @dev reentrancy is guarded in _shardGovernor.checkOfferingAndIssue() by\r\n\t\t`hasClaimedShards`.\r\n\t\t*/\r\n\tfunction wrapUpOffering() external {\r\n\t\trequire(\r\n\t\t\tmsg.sender == address(_shardGovernor),\r\n\t\t\t\"[wrapUpOffering] Unauthorized caller\"\r\n\t\t);\r\n\t\t_offeringCompleted = true;\r\n\t\t(bool success, ) = _shardGovernor.offererAddress().call.value(address(this).balance)(\"\");\r\n\t\trequire(success, \"[wrapUpOffering] Transfer failed.\");\r\n\t\temit OfferingWrappedUp();\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Records Shard claim for subcriber.\r\n\t\t* @dev Can only be called by Governor contract on Offering close.\r\n\t\t* @param claimant wallet address of the person claiming the Shards they\r\n\t\tsubscribed to.\r\n\t\t*/\r\n\tfunction claimShards(address claimant) external {\r\n\t\trequire(\r\n\t\t\tmsg.sender == address(_shardGovernor),\r\n\t\t\t\"[claimShards] Unauthorized caller\"\r\n\t\t);\r\n\t\t_hasClaimedShards[claimant] = true;\r\n\t}\r\n\r\n\tfunction offeringDeadline() external view returns (uint) {\r\n\t\treturn _offeringDeadline;\r\n\t}\r\n\r\n\tfunction getSubEther(address sub) external view returns (uint) {\r\n\t\treturn _contributionsinWei[sub];\r\n\t}\r\n\r\n\tfunction getSubShards(address sub) external view returns (uint) {\r\n\t\treturn _contributionsInShards[sub];\r\n\t}\r\n\r\n\tfunction hasClaimedShards(address claimant) external view returns (bool) {\r\n\t\treturn _hasClaimedShards[claimant];\r\n\t}\r\n\r\n\tfunction pricePerShardInWei() external view returns (uint) {\r\n\t\treturn _pricePerShardInWei;\r\n\t}\r\n\r\n\tfunction offererShardAmount() external view returns (uint) {\r\n\t\treturn _offererShardAmount;\r\n\t}\r\n\r\n\tfunction liqProviderCutInShards() external view returns (uint) {\r\n\t\treturn _liqProviderCutInShards;\r\n\t}\r\n\r\n\tfunction artistCutInShards() external view returns (uint) {\r\n\t\treturn _artistCutInShards;\r\n\t}\r\n\r\n\tfunction offeringCompleted() external view returns (bool) {\r\n\t\treturn _offeringCompleted;\r\n\t}\r\n\r\n\tfunction totalShardsClaimed() external view returns (uint) {\r\n\t\treturn _totalShardsClaimed;\r\n\t}\r\n\r\n\tfunction totalWeiContributed() external view returns (uint) {\r\n\t\treturn _totalWeiContributed;\r\n\t}\r\n\r\n\tfunction contributionTargetInWei() external view returns (uint) {\r\n\t\treturn _contributionTargetInWei;\r\n\t}\r\n\r\n\tfunction getContractBalance() external view returns (uint) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction contributors() external view returns (address[] memory) {\r\n\t\treturn _contributors;\r\n\t}\r\n}\r\n/* solhint-disable no-mix-tabs-and-spaces */\r\n/* solhint-disable indent */\r\n\r\n\r\n\r\n/**\r\n\t* @title Contract managing Shotgun Clause lifecycle\r\n\t* @author Joel Hubert (Metalith.io)\r\n\t* @dev OpenZeppelin contracts are not ready for 0.6.0 yet, using 0.5.16.\r\n\t* @dev This contract is deployed once a Shotgun is initiated by calling the Registry.\r\n\t*/\r\n\r\ncontract ShotgunClause {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tShardGovernor private _shardGovernor;\r\n\tShardRegistry private _shardRegistry;\r\n\r\n\tenum ClaimWinner { None, Claimant, Counterclaimant }\r\n\tClaimWinner private _claimWinner = ClaimWinner.None;\r\n\r\n\tuint private _deadlineTimestamp;\r\n\tuint private _initialOfferInWei;\r\n\tuint private _pricePerShardInWei;\r\n\taddress payable private _initialClaimantAddress;\r\n\tuint private _initialClaimantBalance;\r\n\tbool private _shotgunEnacted = false;\r\n\tuint private _counterWeiContributed;\r\n\taddress[] private _counterclaimants;\r\n\tmapping(address => uint) private _counterclaimContribs;\r\n\r\n\tevent Countercommit(address indexed committer, uint indexed weiAmount);\r\n\tevent EtherCollected(address indexed collector, uint indexed weiAmount);\r\n\r\n\tconstructor(\r\n\t\taddress payable initialClaimantAddress,\r\n\t\tuint initialClaimantBalance,\r\n\t\taddress shardRegistryAddress\r\n\t) public payable {\r\n\t\t_shardGovernor = ShardGovernor(msg.sender);\r\n\t\t_shardRegistry = ShardRegistry(shardRegistryAddress);\r\n\t\t_deadlineTimestamp = now.add(1 * 14 days);\r\n\t\t_initialClaimantAddress = initialClaimantAddress;\r\n\t\t_initialClaimantBalance = initialClaimantBalance;\r\n\t\t_initialOfferInWei = msg.value;\r\n\t\t_pricePerShardInWei = (_initialOfferInWei.mul(10**18)).div(_shardRegistry.cap().sub(_initialClaimantBalance));\r\n\t\t_claimWinner = ClaimWinner.Claimant;\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Contribute Ether to the counterclaim for this Shotgun.\r\n\t\t* @dev Automatically enacts Shotgun once enough Ether is raised and\r\n\t\treturns initial claimant's Ether offer.\r\n\t\t*/\r\n\tfunction counterCommitEther() external payable {\r\n\t\trequire(\r\n\t\t\t_shardRegistry.balanceOf(msg.sender) > 0,\r\n\t\t\t\"[counterCommitEther] Account does not own Shards\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.value > 0,\r\n\t\t\t\"[counterCommitEther] Ether is required\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_initialClaimantAddress != address(0),\r\n\t\t\t\"[counterCommitEther] Initial claimant does not exist\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.sender != _initialClaimantAddress,\r\n\t\t\t\"[counterCommitEther] Initial claimant cannot countercommit\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!_shotgunEnacted,\r\n\t\t\t\"[counterCommitEther] Shotgun already enacted\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tnow < _deadlineTimestamp,\r\n\t\t\t\"[counterCommitEther] Deadline has expired\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.value + _counterWeiContributed <= getRequiredWeiForCounterclaim(),\r\n\t\t\t\"[counterCommitEther] Ether exceeds goal\"\r\n\t\t);\r\n\t\tif (_counterclaimContribs[msg.sender] == 0) {\r\n\t\t\t_counterclaimants.push(msg.sender);\r\n\t\t}\r\n\t\t_counterclaimContribs[msg.sender] = _counterclaimContribs[msg.sender].add(msg.value);\r\n\t\t_counterWeiContributed = _counterWeiContributed.add(msg.value);\r\n\t\temit Countercommit(msg.sender, msg.value);\r\n\t\tif (_counterWeiContributed == getRequiredWeiForCounterclaim()) {\r\n\t\t\t_claimWinner = ClaimWinner.Counterclaimant;\r\n\t\t\tenactShotgun();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Collect ether from completed Shotgun.\r\n\t\t* @dev Called by Shard Registry after burning caller's Shards.\r\n\t\t* @dev For counterclaimants, returns both the proportional worth of their\r\n\t\tShards in Ether AND any counterclaim contributions they have made.\r\n\t\t* @dev alternative: OpenZeppelin PaymentSplitter\r\n\t\t*/\r\n\tfunction collectEtherProceeds(uint balance, address payable caller) external {\r\n\t\trequire(\r\n\t\t\tmsg.sender == address(_shardRegistry),\r\n\t\t\t\"[collectEtherProceeds] Caller not authorized\"\r\n\t\t);\r\n\t\tif (_claimWinner == ClaimWinner.Claimant && caller != _initialClaimantAddress) {\r\n\t\t\tuint weiProceeds = (_pricePerShardInWei.mul(balance)).div(10**18);\r\n\t\t\tweiProceeds = weiProceeds.add(_counterclaimContribs[caller]);\r\n\t\t\t_counterclaimContribs[caller] = 0;\r\n\t\t\t(bool success, ) = address(caller).call.value(weiProceeds)(\"\");\r\n\t\t\trequire(success, \"[collectEtherProceeds] Transfer failed.\");\r\n\t\t\temit EtherCollected(caller, weiProceeds);\r\n\t\t} else if (_claimWinner == ClaimWinner.Counterclaimant && caller == _initialClaimantAddress) {\r\n\t\t\tuint amount = (_pricePerShardInWei.mul(_initialClaimantBalance)).div(10**18);\r\n\t\t\tamount = amount.add(_initialOfferInWei);\r\n\t\t\t_initialClaimantBalance = 0;\r\n\t\t\t(bool success, ) = address(caller).call.value(amount)(\"\");\r\n\t\t\trequire(success, \"[collectEtherProceeds] Transfer failed.\");\r\n\t\t\temit EtherCollected(caller, amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Use by successful counterclaimants to collect Shards from initial claimant.\r\n\t\t*/\r\n\tfunction collectShardProceeds() external {\r\n\t\trequire(\r\n\t\t\t_shotgunEnacted && _claimWinner == ClaimWinner.Counterclaimant,\r\n\t\t\t\"[collectShardProceeds] Shotgun has not been enacted or invalid winner\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_counterclaimContribs[msg.sender] != 0,\r\n\t\t\t\"[collectShardProceeds] Account has not participated in counterclaim\"\r\n\t\t);\r\n\t\tuint proportionContributed = (_counterclaimContribs[msg.sender].mul(10**18)).div(_counterWeiContributed);\r\n\t\t_counterclaimContribs[msg.sender] = 0;\r\n\t\tuint shardsToReceive = (proportionContributed.mul(_initialClaimantBalance)).div(10**18);\r\n\t\t_shardGovernor.transferShards(msg.sender, shardsToReceive);\r\n\t}\r\n\r\n\tfunction deadlineTimestamp() external view returns (uint256) {\r\n\t\treturn _deadlineTimestamp;\r\n\t}\r\n\r\n\tfunction shotgunEnacted() external view returns (bool) {\r\n\t\treturn _shotgunEnacted;\r\n\t}\r\n\r\n\tfunction initialClaimantAddress() external view returns (address) {\r\n\t\treturn _initialClaimantAddress;\r\n\t}\r\n\r\n\tfunction initialClaimantBalance() external view returns (uint) {\r\n\t\treturn _initialClaimantBalance;\r\n\t}\r\n\r\n\tfunction initialOfferInWei() external view returns (uint256) {\r\n\t\treturn _initialOfferInWei;\r\n\t}\r\n\r\n\tfunction pricePerShardInWei() external view returns (uint256) {\r\n\t\treturn _pricePerShardInWei;\r\n\t}\r\n\r\n\tfunction claimWinner() external view returns (ClaimWinner) {\r\n\t\treturn _claimWinner;\r\n\t}\r\n\r\n\tfunction counterclaimants() external view returns (address[] memory) {\r\n\t\treturn _counterclaimants;\r\n\t}\r\n\r\n\tfunction getCounterclaimantContribution(address counterclaimant) external view returns (uint) {\r\n\t\treturn _counterclaimContribs[counterclaimant];\r\n\t}\r\n\r\n\tfunction counterWeiContributed() external view returns (uint) {\r\n\t\treturn _counterWeiContributed;\r\n\t}\r\n\r\n\tfunction getContractBalance() external view returns (uint) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction shardGovernor() external view returns (address) {\r\n\t\treturn address(_shardGovernor);\r\n\t}\r\n\r\n\tfunction getRequiredWeiForCounterclaim() public view returns (uint) {\r\n\t\treturn (_pricePerShardInWei.mul(_initialClaimantBalance)).div(10**18);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Initiate Shotgun enactment.\r\n\t\t* @dev Automatically called if enough Ether is raised by counterclaimants,\r\n\t\tor manually called if deadline expires without successful counterclaim.\r\n\t\t*/\r\n\tfunction enactShotgun() public {\r\n\t\trequire(\r\n\t\t\t!_shotgunEnacted,\r\n\t\t\t\"[enactShotgun] Shotgun already enacted\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_claimWinner == ClaimWinner.Counterclaimant ||\r\n\t\t\t(_claimWinner == ClaimWinner.Claimant && now > _deadlineTimestamp),\r\n\t\t\t\"[enactShotgun] Conditions not met to enact Shotgun Clause\"\r\n\t\t);\r\n\t\t_shotgunEnacted = true;\r\n\t\t_shardGovernor.enactShotgun();\r\n\t}\r\n}\r\n/* solhint-disable no-mix-tabs-and-spaces */\r\n/* solhint-disable indent */\r\n\r\n\r\ninterface IUniswapExchange {\r\n\tfunction removeLiquidity(\r\n\t\tuint256 uniTokenAmount,\r\n\t\tuint256 minEth,\r\n\t\tuint256 minTokens,\r\n\t\tuint256 deadline\r\n\t) external returns(\r\n\t\tuint256, uint256\r\n\t);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns (bool);\r\n}\r\n\r\n/**\r\n\t* @title Contract managing Shard lifecycle (NFT custody + Shard issuance and redemption)\r\n\t* @author Joel Hubert (Metalith.io)\r\n\t* @dev OpenZeppelin contracts are not ready for 0.6.0 yet, using 0.5.15.\r\n\t* @dev This contract owns the Registry, Offering and any Shotgun contracts,\r\n\t* making it the gateway for core state changes.\r\n\t*/\r\n\r\ncontract ShardGovernor is IERC721Receiver {\r\n\r\n  using SafeMath for uint256;\r\n\r\n\t// Equals `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\tbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\tShardRegistry private _shardRegistry;\r\n\tShardOffering private _shardOffering;\r\n\tShotgunClause private _currentShotgunClause;\r\n\taddress payable private _offererAddress;\r\n\taddress private _nftRegistryAddress;\r\n\taddress payable private _niftexWalletAddress;\r\n\taddress payable private _artistWalletAddress;\r\n\tuint256 private _tokenId;\r\n\r\n\tenum ClaimWinner { None, Claimant, Counterclaimant }\r\n\taddress[] private _shotgunAddressArray;\r\n\tmapping(address => uint) private _shotgunMapping;\r\n\tuint private _shotgunCounter;\r\n\r\n\tevent NewShotgun(address indexed shotgun);\r\n\tevent ShardsClaimed(address indexed claimant, uint indexed shardAmount);\r\n\tevent NftRedeemed(address indexed redeemer);\r\n\tevent ShotgunEnacted(address indexed enactor);\r\n\tevent ShardsCollected(address indexed collector, uint indexed shardAmount, address indexed shotgun);\r\n\r\n\t/**\r\n\t\t* @dev Checks whether offerer indeed owns the relevant NFT.\r\n\t\t* @dev Offering deadline starts ticking on deployment, but offerer needs to transfer\r\n\t\t* NFT to this contract before anyone can contribute.\r\n\t\t*/\r\n  constructor(\r\n\t\taddress nftRegistryAddress,\r\n\t\taddress payable offererAddress,\r\n\t\tuint256 tokenId,\r\n\t\taddress payable niftexWalletAddress,\r\n\t\taddress payable artistWalletAddress,\r\n\t\tuint liqProviderCutInShards,\r\n\t\tuint artistCutInShards,\r\n\t\tuint pricePerShardInWei,\r\n\t\tuint shardAmountOffered,\r\n\t\tuint offeringDeadline,\r\n\t\tuint256 cap,\r\n\t\tstring memory name,\r\n\t\tstring memory symbol\r\n\t) public {\r\n\t\trequire(\r\n\t\t\tIERC721(nftRegistryAddress).ownerOf(tokenId) == offererAddress,\r\n\t\t\t\"Offerer is not owner of tokenId\"\r\n\t\t);\r\n\t\t_nftRegistryAddress = nftRegistryAddress;\r\n\t\t_niftexWalletAddress = niftexWalletAddress;\r\n\t\t_artistWalletAddress = artistWalletAddress;\r\n\t\t_tokenId = tokenId;\r\n\t\t_offererAddress = offererAddress;\r\n\t\t_shardRegistry = new ShardRegistry(cap, name, symbol);\r\n\t\t_shardOffering = new ShardOffering(\r\n\t\t\tpricePerShardInWei,\r\n\t\t\tshardAmountOffered,\r\n\t\t\tliqProviderCutInShards,\r\n\t\t\tartistCutInShards,\r\n\t\t\tofferingDeadline,\r\n\t\t\tcap\r\n\t\t);\r\n  }\r\n\r\n\t/**\r\n\t\t* @dev Used to receive ether from the pullLiquidity function.\r\n\t\t*/\r\n\tfunction() external payable { }\r\n\r\n\t/**\r\n\t\t* @notice Issues Shards upon completion of Offering.\r\n\t\t* @dev Cap should equal totalSupply when all Shards have been claimed.\r\n\t\t* @dev The Offerer may close an undersubscribed Offering once the deadline has\r\n\t\t* passed and claim the remaining Shards.\r\n\t\t*/\r\n\tfunction checkOfferingAndIssue() external {\r\n\t\trequire(\r\n\t\t\t_shardRegistry.totalSupply() != _shardRegistry.cap(),\r\n\t\t\t\"[checkOfferingAndIssue] Shards have already been issued\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!_shardOffering.hasClaimedShards(msg.sender),\r\n\t\t\t\"[checkOfferingAndIssue] You have already claimed your Shards\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_shardOffering.offeringCompleted() ||\r\n\t\t\t(now > _shardOffering.offeringDeadline() && !_shardOffering.offeringCompleted()),\r\n\t\t\t\"Offering not completed or deadline not expired\"\r\n\t\t);\r\n\t\tif (_shardOffering.offeringCompleted()) {\r\n\t\t\tif (_shardOffering.getSubEther(msg.sender) != 0) {\r\n\t\t\t\t_shardOffering.claimShards(msg.sender);\r\n\t\t\t\tuint subShards = _shardOffering.getSubShards(msg.sender);\r\n\t\t\t\tbool success = _shardRegistry.mint(msg.sender, subShards);\r\n\t\t\t\trequire(success, \"[checkOfferingAndIssue] Mint failed\");\r\n\t\t\t\temit ShardsClaimed(msg.sender, subShards);\r\n\t\t\t} else if (msg.sender == _offererAddress) {\r\n\t\t\t\t_shardOffering.claimShards(msg.sender);\r\n\t\t\t\tuint offShards = _shardOffering.offererShardAmount();\r\n\t\t\t\tbool success = _shardRegistry.mint(msg.sender, offShards);\r\n\t\t\t\trequire(success, \"[checkOfferingAndIssue] Mint failed\");\r\n\t\t\t\temit ShardsClaimed(msg.sender, offShards);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t_shardOffering.wrapUpOffering();\r\n\t\t\tuint remainingShards = _shardRegistry.cap().sub(_shardOffering.totalShardsClaimed());\r\n\t\t\tremainingShards = remainingShards\r\n\t\t\t\t.sub(_shardOffering.liqProviderCutInShards())\r\n\t\t\t\t.sub(_shardOffering.artistCutInShards());\r\n\t\t\tbool success = _shardRegistry.mint(_offererAddress, remainingShards);\r\n\t\t\trequire(success, \"[checkOfferingAndIssue] Mint failed\");\r\n\t\t\temit ShardsClaimed(msg.sender, remainingShards);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Used by NIFTEX to claim predetermined amount of shards in offering in order\r\n\t\t* to bootstrap liquidity on Uniswap-type exchange.\r\n\t\t*/\r\n\t/* function claimLiqProviderShards() external {\r\n\t\trequire(\r\n\t\t\tmsg.sender == _niftexWalletAddress,\r\n\t\t\t\"[claimLiqProviderShards] Unauthorized caller\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!_shardOffering.hasClaimedShards(msg.sender),\r\n\t\t\t\"[claimLiqProviderShards] You have already claimed your Shards\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_shardOffering.offeringCompleted(),\r\n\t\t\t\"[claimLiqProviderShards] Offering not completed\"\r\n\t\t);\r\n\t\t_shardOffering.claimShards(_niftexWalletAddress);\r\n\t\tuint cut = _shardOffering.liqProviderCutInShards();\r\n\t\tbool success = _shardRegistry.mint(_niftexWalletAddress, cut);\r\n\t\trequire(success, \"[claimLiqProviderShards] Mint failed\");\r\n\t\temit ShardsClaimed(msg.sender, cut);\r\n\t} */\r\n\r\n\tfunction mintReservedShards(address _beneficiary) external {\r\n\t\tbool niftex;\r\n\t\tif (_beneficiary == _niftexWalletAddress) niftex = true;\r\n\t\trequire(\r\n\t\t\tniftex ||\r\n\t\t\t_beneficiary == _artistWalletAddress,\r\n\t\t\t\"[mintReservedShards] Unauthorized beneficiary\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!_shardOffering.hasClaimedShards(_beneficiary),\r\n\t\t\t\"[mintReservedShards] Shards already claimed\"\r\n\t\t);\r\n\t\t_shardOffering.claimShards(_beneficiary);\r\n\t\tuint cut;\r\n\t\tif (niftex) {\r\n\t\t\tcut = _shardOffering.liqProviderCutInShards();\r\n\t\t} else {\r\n\t\t\tcut = _shardOffering.artistCutInShards();\r\n\t\t}\r\n\t\tbool success = _shardRegistry.mint(_beneficiary, cut);\r\n\t\trequire(success, \"[mintReservedShards] Mint failed\");\r\n\t\temit ShardsClaimed(_beneficiary, cut);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice In the unlikely case that one account accumulates all Shards,\r\n\t\t* they can be redeemed directly for the underlying NFT.\r\n\t\t*/\r\n\tfunction redeem() external {\r\n\t\trequire(\r\n\t\t\t_shardRegistry.balanceOf(msg.sender) == _shardRegistry.cap(),\r\n\t\t\t\"[redeem] Account does not own total amount of Shards outstanding\"\r\n\t\t);\r\n\t\tIERC721(_nftRegistryAddress).safeTransferFrom(address(this), msg.sender, _tokenId);\r\n\t\temit NftRedeemed(msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Creates a new Shotgun claim.\r\n\t\t* @dev This Function is called from the Shard Registry because the claimant's\r\n\t\t* Shards must be frozen until the Shotgun is resolved: if they lose the claim,\r\n\t\t* their Shards are automatically distributed to the counterclaimants.\r\n\t\t* @dev The Registry is paused while an active Shotgun claim exists to\r\n\t\t* let the process work in an orderly manner.\r\n\t\t* @param initialClaimantAddress wallet address of the person who initiated Shotgun.\r\n\t\t* @param initialClaimantBalance Shard balance of the person who initiated Shotgun.\r\n\t\t*/\r\n\tfunction claimInitialShotgun(\r\n\t\taddress payable initialClaimantAddress,\r\n\t\tuint initialClaimantBalance\r\n\t) external payable returns (bool) {\r\n\t\trequire(\r\n\t\t\tmsg.sender == address(_shardRegistry),\r\n\t\t\t\"[claimInitialShotgun] Caller not authorized\"\r\n\t\t);\r\n\t\t_currentShotgunClause = (new ShotgunClause).value(msg.value)(\r\n\t\t\tinitialClaimantAddress,\r\n\t\t\tinitialClaimantBalance,\r\n\t\t\taddress(_shardRegistry)\r\n\t\t);\r\n\t\temit NewShotgun(address(_currentShotgunClause));\r\n\t\t_shardRegistry.pause();\r\n\t\t_shotgunAddressArray.push(address(_currentShotgunClause));\r\n\t\t_shotgunCounter++;\r\n\t\t_shotgunMapping[address(_currentShotgunClause)] = _shotgunCounter;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Effects the results of a (un)successful Shotgun claim.\r\n\t\t* @dev This Function can only be called by a Shotgun contract in two scenarios:\r\n\t\t* - Counterclaimants raise enough ether to buy claimant out\r\n\t\t* - Shotgun deadline passes without successful counter-raise, claimant wins\r\n\t\t*/\r\n\tfunction enactShotgun() external {\r\n\t\trequire(\r\n\t\t\t_shotgunMapping[msg.sender] != 0,\r\n\t\t\t\"[enactShotgun] Invalid Shotgun Clause\"\r\n\t\t);\r\n\t\tShotgunClause _shotgunClause = ShotgunClause(msg.sender);\r\n\t\taddress initialClaimantAddress = _shotgunClause.initialClaimantAddress();\r\n\t\tif (uint(_shotgunClause.claimWinner()) == uint(ClaimWinner.Claimant)) {\r\n\t\t\t_shardRegistry.burn(_shardRegistry.balanceOf(initialClaimantAddress));\r\n\t\t\tIERC721(_nftRegistryAddress).safeTransferFrom(address(this), initialClaimantAddress, _tokenId);\r\n\t\t\t_shardRegistry.unpause();\r\n\t\t\temit ShotgunEnacted(address(_shotgunClause));\r\n\t\t} else if (uint(_shotgunClause.claimWinner()) == uint(ClaimWinner.Counterclaimant)) {\r\n\t\t\t_shardRegistry.unpause();\r\n\t\t\temit ShotgunEnacted(address(_shotgunClause));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Transfer Shards to counterclaimants after unsuccessful Shotgun claim.\r\n\t\t* @dev This contract custodies the claimant's Shards when they claim Shotgun -\r\n\t\t* if they lose the claim these Shards must be transferred to counterclaimants.\r\n\t\t* This process is initiated by the relevant Shotgun contract.\r\n\t\t* @param recipient wallet address of the person receiving the Shards.\r\n\t\t* @param amount the amount of Shards to receive.\r\n\t\t*/\r\n\tfunction transferShards(address recipient, uint amount) external {\r\n\t\trequire(\r\n\t\t\t_shotgunMapping[msg.sender] != 0,\r\n\t\t\t\"[transferShards] Unauthorized caller\"\r\n\t\t);\r\n\t\tbool success = _shardRegistry.transfer(recipient, amount);\r\n\t\trequire(success, \"[transferShards] Transfer failed\");\r\n\t\temit ShardsCollected(recipient, amount, msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Allows liquidity providers to pull funds during shotgun.\r\n\t\t* @dev Requires Unitokens to be sent to the contract so the contract can\r\n\t\t* remove liquidity.\r\n\t\t* @param exchangeAddress address of the Uniswap pool.\r\n\t\t* @param liqProvAddress address of the liquidity provider.\r\n\t\t* @param uniTokenAmount liquidity tokens to redeem.\r\n\t\t* @param minEth minimum ether to withdraw.\r\n\t\t* @param minTokens minimum tokens to withdraw.\r\n\t\t* @param deadline deadline for the withdrawal.\r\n\t\t*/\r\n\tfunction pullLiquidity(\r\n\t\taddress exchangeAddress,\r\n\t\taddress liqProvAddress,\r\n\t\tuint256 uniTokenAmount,\r\n\t\tuint256 minEth,\r\n\t\tuint256 minTokens,\r\n\t\tuint256 deadline\r\n\t) public {\r\n\t\trequire(msg.sender == _niftexWalletAddress, \"[pullLiquidity] Unauthorized call\");\r\n\t\tIUniswapExchange uniExchange = IUniswapExchange(exchangeAddress);\r\n\t\tuniExchange.transferFrom(liqProvAddress, address(this), uniTokenAmount);\r\n\t\t_shardRegistry.unpause();\r\n\t\t(uint ethAmount, uint tokenAmount) = uniExchange.removeLiquidity(uniTokenAmount, minEth, minTokens, deadline);\r\n\t\t(bool ethSuccess, ) = liqProvAddress.call.value(ethAmount)(\"\");\r\n\t\trequire(ethSuccess, \"[pullLiquidity] ETH transfer failed.\");\r\n\t\tbool tokenSuccess = _shardRegistry.transfer(liqProvAddress, tokenAmount);\r\n\t\trequire(tokenSuccess, \"[pullLiquidity] Token transfer failed\");\r\n\t\t_shardRegistry.pause();\r\n\t}\r\n\r\n\t/**\r\n\t\t* @dev Utility function to check if a Shotgun is in progress.\r\n\t\t*/\r\n\tfunction checkShotgunState() external view returns (bool) {\r\n\t\tif (_shotgunCounter == 0) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tShotgunClause _shotgunClause = ShotgunClause(_shotgunAddressArray[_shotgunCounter - 1]);\r\n\t\t\tif (_shotgunClause.shotgunEnacted()) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction currentShotgunClause() external view returns (address) {\r\n\t\treturn address(_currentShotgunClause);\r\n\t}\r\n\r\n\tfunction shardRegistryAddress() external view returns (address) {\r\n\t\treturn address(_shardRegistry);\r\n\t}\r\n\r\n\tfunction shardOfferingAddress() external view returns (address) {\r\n\t\treturn address(_shardOffering);\r\n\t}\r\n\r\n\tfunction getContractBalance() external view returns (uint) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction offererAddress() external view returns (address payable) {\r\n\t\treturn _offererAddress;\r\n\t}\r\n\r\n\tfunction shotgunCounter() external view returns (uint) {\r\n\t\treturn _shotgunCounter;\r\n\t}\r\n\r\n\tfunction shotgunAddressArray() external view returns (address[] memory) {\r\n\t\treturn _shotgunAddressArray;\r\n\t}\r\n\r\n\t/**\r\n\t\t* @dev Utility function to check whether this contract owns the Sharded NFT.\r\n\t\t*/\r\n\tfunction checkLock() external view returns (bool) {\r\n\t\taddress owner = IERC721(_nftRegistryAddress).ownerOf(_tokenId);\r\n\t\treturn owner == address(this);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Handle the receipt of an NFT.\r\n\t\t* @dev The ERC721 smart contract calls this function on the recipient\r\n\t\t* after a `safetransfer`. This function MAY throw to revert and reject the\r\n\t\t* transfer. Return of other than the magic value MUST result in the\r\n\t\t* transaction being reverted.\r\n\t\t* Note: the contract address is always the message sender.\r\n\t\t* @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t\t*/\r\n\tfunction onERC721Received(address, address, uint256, bytes memory) public returns(bytes4) {\r\n\t\treturn _ERC721_RECEIVED;\r\n\t}\r\n}\r\n\r\n/**\r\n\t* @title ERC20 base for Shards with additional methods related to governance\r\n\t* @author Joel Hubert (Metalith.io)\r\n\t* @dev OpenZeppelin contracts are not ready for 0.6.0 yet, using 0.5.16.\r\n\t*/\r\n\r\ncontract ShardRegistry is ERC20Detailed, ERC20Capped, ERC20Burnable, ERC20Pausable {\r\n\r\n\tShardGovernor private _shardGovernor;\r\n\tenum ClaimWinner { None, Claimant, Counterclaimant }\r\n\r\n\tconstructor (\r\n\t\tuint256 cap,\r\n\t\tstring memory name,\r\n\t\tstring memory symbol\r\n\t) ERC20Detailed(name, symbol, 18) ERC20Capped(cap) public {\r\n\t\t_shardGovernor = ShardGovernor(msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Called to initiate Shotgun claim. Requires Ether.\r\n\t\t* @dev Transfers claimant's Shards into Governor contract's custody until\r\n\t\tclaim is resolved.\r\n\t\t* @dev Forwards Ether to Shotgun contract through Governor contract.\r\n\t\t*/\r\n\tfunction lockShardsAndClaim() external payable {\r\n\t\trequire(\r\n\t\t\t_shardGovernor.checkLock(),\r\n\t\t\t\"[lockShardsAndClaim] NFT not locked, Shotgun cannot be triggered\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_shardGovernor.checkShotgunState(),\r\n\t\t\t\"[lockShardsAndClaim] Shotgun already in progress\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.value > 0,\r\n\t\t\t\"[lockShardsAndClaim] Transaction must send ether to activate Shotgun Clause\"\r\n\t\t);\r\n\t\tuint initialClaimantBalance = balanceOf(msg.sender);\r\n\t\trequire(\r\n\t\t\tinitialClaimantBalance > 0,\r\n\t\t\t\"[lockShardsAndClaim] Account does not own Shards\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tinitialClaimantBalance < cap(),\r\n\t\t\t\"[lockShardsAndClaim] Account owns all Shards\"\r\n\t\t);\r\n\t\ttransfer(address(_shardGovernor), balanceOf(msg.sender));\r\n\t\t(bool success) = _shardGovernor.claimInitialShotgun.value(msg.value)(\r\n\t\t\tmsg.sender, initialClaimantBalance\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tsuccess,\r\n\t\t\t\"[lockShards] Ether forwarding unsuccessful\"\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t\t* @notice Called to collect Ether from Shotgun proceeds. Burns Shard holdings.\r\n\t\t* @dev can be called in both Shotgun outcome scenarios by:\r\n\t\t- Initial claimant, if they lose the claim to counterclaimants and their\r\n\t\tShards are bought out\r\n\t\t- Counterclaimants, bought out if initial claimant is successful.\r\n\t\t* @dev initial claimant does not own Shards at this point because they have\r\n\t\tbeen custodied in Governor contract at start of Shotgun.\r\n\t\t* @param shotgunClause address of the relevant Shotgun contract.\r\n\t\t*/\r\n\tfunction burnAndCollectEther(address shotgunClause) external {\r\n\t\tShotgunClause _shotgunClause = ShotgunClause(shotgunClause);\r\n\t\tbool enacted = _shotgunClause.shotgunEnacted();\r\n\t\tif (!enacted) {\r\n\t\t\t_shotgunClause.enactShotgun();\r\n\t\t}\r\n\t\trequire(\r\n\t\t\tenacted || _shotgunClause.shotgunEnacted(),\r\n\t\t\t\"[burnAndCollectEther] Shotgun Clause not enacted\"\r\n\t\t);\r\n\t\tuint balance = balanceOf(msg.sender);\r\n\t\trequire(\r\n\t\t\tbalance > 0 || msg.sender == _shotgunClause.initialClaimantAddress(),\r\n\t\t\t\"[burnAndCollectEther] Account does not own Shards\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tuint(_shotgunClause.claimWinner()) == uint(ClaimWinner.Claimant) &&\r\n\t\t\tmsg.sender != _shotgunClause.initialClaimantAddress() ||\r\n\t\t\tuint(_shotgunClause.claimWinner()) == uint(ClaimWinner.Counterclaimant) &&\r\n\t\t\tmsg.sender == _shotgunClause.initialClaimantAddress(),\r\n\t\t\t\"[burnAndCollectEther] Account does not have right to collect ether\"\r\n\t\t);\r\n\t\tburn(balance);\r\n\t\t_shotgunClause.collectEtherProceeds(balance, msg.sender);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"shotgunClause\",\"type\":\"address\"}],\"name\":\"burnAndCollectEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockShardsAndClaim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShardRegistry", "CompilerVersion": "v0.5.15+commit.6a57276f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a4861757465636c6572650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044841555400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://abbb925dde8b62e4f9d8bcc161e2c7601f687939d36f4d93e542d04981be9ebf"}