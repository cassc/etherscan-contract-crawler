{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SmartAlpha.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OwnableERC20.sol\\\";\\nimport \\\"./interfaces/ISeniorRateModel.sol\\\";\\nimport \\\"./Governed.sol\\\";\\n\\n/// @title SMART Alpha\\n/// @notice This contract implements the main logic of the system.\\ncontract SmartAlpha is Governed {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    bool public initialized;\\n\\n    IERC20 public poolToken;\\n\\n    OwnableERC20 public juniorToken;\\n    OwnableERC20 public seniorToken;\\n\\n    uint256 public epoch1Start;\\n    uint256 public epochDuration;\\n\\n    /// epoch accounting\\n    uint256 public epoch;\\n    uint256 public epochSeniorLiquidity;\\n    uint256 public epochJuniorLiquidity;\\n    uint256 public epochUpsideExposureRate;\\n    uint256 public epochDownsideProtectionRate;\\n    uint256 public epochEntryPrice;\\n\\n    uint256 public queuedJuniorsUnderlyingIn;\\n    uint256 public queuedJuniorsUnderlyingOut;\\n    uint256 public queuedJuniorTokensBurn;\\n\\n    uint256 public queuedSeniorsUnderlyingIn;\\n    uint256 public queuedSeniorsUnderlyingOut;\\n    uint256 public queuedSeniorTokensBurn;\\n\\n    /// history management\\n    mapping(uint256 => uint256) public history_epochJuniorTokenPrice;\\n    mapping(uint256 => uint256) public history_epochSeniorTokenPrice;\\n\\n    // a user can have only one queue position at a time\\n    // if they try a new deposit while there's a queue position redeemable, it will be automatically redeemed\\n    struct QueuePosition {\\n        uint256 epoch;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => QueuePosition) public juniorEntryQueue;\\n    mapping(address => QueuePosition) public juniorExitQueue;\\n    mapping(address => QueuePosition) public seniorEntryQueue;\\n    mapping(address => QueuePosition) public seniorExitQueue;\\n\\n    constructor (address _dao, address _guardian) Governed(_dao, _guardian) {}\\n\\n    /// @notice Initialize the SmartAlpha system\\n    /// @dev Junior and Senior tokens must be owner by this contract or the function will revert.\\n    /// @param poolTokenAddr Address of the pool token\\n    /// @param oracleAddr Address of the price oracle for the pool token\\n    /// @param seniorRateModelAddr Address of the senior rate model (used to calculate upside exposure and downside protection rates)\\n    /// @param accountingModelAddr Address of the accounting model (used to determine the junior or senior losses for an epoch)\\n    /// @param juniorTokenAddr Address of the junior token (ERC20)\\n    /// @param seniorTokenAddr Address of the senior token (ERC20)\\n    /// @param _epoch1Start Timestamp at which the first epoch begins\\n    /// @param _epochDuration Duration of the epoch in seconds\\n    function initialize(\\n        address poolTokenAddr,\\n        address oracleAddr,\\n        address seniorRateModelAddr,\\n        address accountingModelAddr,\\n        address juniorTokenAddr,\\n        address seniorTokenAddr,\\n        uint256 _epoch1Start,\\n        uint256 _epochDuration\\n    ) public {\\n        require(!initialized, \\\"contract already initialized\\\");\\n        initialized = true;\\n\\n        enforceCallerDAO();\\n        setPriceOracle(oracleAddr);\\n        setSeniorRateModel(seniorRateModelAddr);\\n        setAccountingModel(accountingModelAddr);\\n\\n        require(poolTokenAddr != address(0), \\\"pool token can't be 0x0\\\");\\n        require(juniorTokenAddr != address(0), \\\"junior token can't be 0x0\\\");\\n        require(seniorTokenAddr != address(0), \\\"senior token can't be 0x0\\\");\\n\\n        poolToken = IERC20(poolTokenAddr);\\n\\n        juniorToken = OwnableERC20(juniorTokenAddr);\\n        require(juniorToken.owner() == address(this), \\\"junior token owner must be SA\\\");\\n\\n        seniorToken = OwnableERC20(seniorTokenAddr);\\n        require(seniorToken.owner() == address(this), \\\"senior token owner must be SA\\\");\\n\\n        epoch1Start = _epoch1Start;\\n        epochDuration = _epochDuration;\\n    }\\n\\n    /// @notice Advance/finalize an epoch\\n    /// @dev Epochs are automatically advanced/finalized if there are user interactions with the contract.\\n    /// @dev If there are no interactions for one or multiple epochs, they will be skipped and the materializing of\\n    /// @dev profits and losses will only happen as if only one epoch passed. We call this \\\"elastic epochs\\\".\\n    /// @dev This function may also be called voluntarily by any party (including bots).\\n    function advanceEpoch() public {\\n        uint256 currentEpoch = getCurrentEpoch();\\n\\n        if (epoch >= currentEpoch) {\\n            return;\\n        }\\n\\n        // finalize the current epoch and take the fee from the side that made profits this epoch\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n        if (seniorProfits > 0) {\\n            uint256 fee = seniorProfits * feesPercentage / scaleFactor;\\n            epochJuniorLiquidity = epochJuniorLiquidity - seniorProfits;\\n            epochSeniorLiquidity = epochSeniorLiquidity + (seniorProfits - fee);\\n        } else if (juniorProfits > 0) {\\n            uint256 fee = juniorProfits * feesPercentage / scaleFactor;\\n            epochSeniorLiquidity = epochSeniorLiquidity - juniorProfits;\\n            epochJuniorLiquidity = epochJuniorLiquidity + (juniorProfits - fee);\\n        }\\n\\n        emit EpochEnd(epoch, juniorProfits, seniorProfits);\\n\\n        // set the epoch entry price to the current price, effectively resetting profits and losses to 0\\n        epochEntryPrice = priceOracle.getPrice();\\n\\n        uint256 juniorUnderlyingOut = _processJuniorQueues();\\n        uint256 seniorUnderlyingOut = _processSeniorQueues();\\n\\n        // move the liquidity from the entry queue to the epoch balance & the exited liquidity from the epoch to the exit queue\\n        epochSeniorLiquidity = epochSeniorLiquidity - seniorUnderlyingOut + queuedSeniorsUnderlyingIn;\\n        queuedSeniorsUnderlyingOut += seniorUnderlyingOut;\\n        queuedSeniorsUnderlyingIn = 0;\\n\\n        epochJuniorLiquidity = epochJuniorLiquidity - juniorUnderlyingOut + queuedJuniorsUnderlyingIn;\\n        queuedJuniorsUnderlyingOut += juniorUnderlyingOut;\\n        queuedJuniorsUnderlyingIn = 0;\\n\\n        // reset the queue of tokens to burn\\n        queuedJuniorTokensBurn = 0;\\n        queuedSeniorTokensBurn = 0;\\n\\n        // update the upside exposure and downside protection rates based on the new pool composition (after processing the entry and exit queues)\\n        (epochUpsideExposureRate, epochDownsideProtectionRate) = seniorRateModel.getRates(epochJuniorLiquidity, epochSeniorLiquidity);\\n\\n        // set the stored epoch to the current epoch\\n        epoch = currentEpoch;\\n    }\\n\\n    /// @notice Signal the entry into the pool as a junior\\n    /// @dev If the user already has a position in the queue, they can increase the amount by calling this function again\\n    /// @dev If a user is in the queue, they cannot exit it\\n    /// @param amount The amount of underlying the user wants to increase his queue position with\\n    function depositJunior(uint256 amount) public {\\n        enforceSystemNotPaused();\\n        advanceEpoch();\\n\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        require(poolToken.allowance(msg.sender, address(this)) >= amount, \\\"not enough allowance\\\");\\n\\n        QueuePosition storage pos = juniorEntryQueue[msg.sender];\\n\\n        // if the user already has a position for an older epoch that was not redeemed, do it automatically\\n        // after this operation, pos.amount would be set to 0\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemJuniorTokens();\\n        }\\n\\n        // update the stored position's epoch to the current one\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        // add the amount to the queue to be converted into junior tokens when the epoch ends\\n        queuedJuniorsUnderlyingIn += amount;\\n\\n        uint256 newBalance = pos.amount + amount;\\n        pos.amount = newBalance;\\n\\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit JuniorJoinEntryQueue(msg.sender, epoch, amount, newBalance);\\n    }\\n\\n    /// @notice Redeem the junior tokens generated for a user that participated in the queue at a specific epoch\\n    /// @dev User will receive an amount of junior tokens corresponding to his underlying balance converted at the price the epoch was finalized\\n    /// @dev This only works for past epochs and will revert if called for current or future epochs.\\n    function redeemJuniorTokens() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = juniorEntryQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 underlyingAmount = pos.amount;\\n        require(underlyingAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochJuniorTokenPrice[pos.epoch];\\n        uint256 amountJuniorTokensDue = underlyingAmount * scaleFactor / price;\\n\\n        juniorToken.transfer(msg.sender, amountJuniorTokensDue);\\n\\n        emit JuniorRedeemTokens(msg.sender, pos.epoch, amountJuniorTokensDue);\\n    }\\n\\n    /// @notice Signal the entry into the pool as a senior\\n    /// @dev If the user already has a position in the queue, they can increase the amount by calling this function again\\n    /// @dev If a user is in the queue, they cannot exit it\\n    /// @param amount The amount of underlying the user wants to increase his queue position with\\n    function depositSenior(uint256 amount) public {\\n        enforceSystemNotPaused();\\n        advanceEpoch();\\n\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        require(poolToken.allowance(msg.sender, address(this)) >= amount, \\\"not enough allowance\\\");\\n\\n        QueuePosition storage pos = seniorEntryQueue[msg.sender];\\n\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemSeniorTokens();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        queuedSeniorsUnderlyingIn += amount;\\n\\n        uint256 newBalance = pos.amount + amount;\\n        pos.amount = newBalance;\\n\\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit SeniorJoinEntryQueue(msg.sender, epoch, amount, newBalance);\\n    }\\n\\n    /// @notice Redeem the senior tokens generated for a user that participated in the queue at a specific epoch\\n    /// @dev User will receive an amount of senior tokens corresponding to his underlying balance converted at the price the epoch was finalized\\n    /// @dev This only works for past epochs and will revert if called for current or future epochs.\\n    function redeemSeniorTokens() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = seniorEntryQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 underlyingAmount = pos.amount;\\n        require(underlyingAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochSeniorTokenPrice[pos.epoch];\\n        uint256 amountSeniorTokensDue = underlyingAmount * scaleFactor / price;\\n\\n        seniorToken.transfer(msg.sender, amountSeniorTokensDue);\\n\\n        emit SeniorRedeemTokens(msg.sender, pos.epoch, amountSeniorTokensDue);\\n    }\\n\\n    /// @notice Signal the intention to leave the pool as a junior\\n    /// @dev User will join the exit queue and his junior tokens will be transferred back to the pool.\\n    /// @dev Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.\\n    /// @dev Users can increase their queue amount but can't exit the queue\\n    /// @param amountJuniorTokens The amount of tokens the user wants to exit with\\n    function exitJunior(uint256 amountJuniorTokens) public {\\n        advanceEpoch();\\n\\n        uint256 balance = juniorToken.balanceOf(msg.sender);\\n        require(balance >= amountJuniorTokens, \\\"not enough balance\\\");\\n\\n        queuedJuniorTokensBurn += amountJuniorTokens;\\n\\n        QueuePosition storage pos = juniorExitQueue[msg.sender];\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemJuniorUnderlying();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        uint256 newBalance = pos.amount + amountJuniorTokens;\\n        pos.amount = newBalance;\\n\\n        juniorToken.transferAsOwner(msg.sender, address(this), amountJuniorTokens);\\n\\n        emit JuniorJoinExitQueue(msg.sender, epoch, amountJuniorTokens, newBalance);\\n    }\\n\\n    /// @notice Redeem the underlying for an exited epoch\\n    /// @dev Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.\\n    /// @dev Can only be called for a previous epoch and will revert for current and future epochs.\\n    /// @dev At this point, the junior tokens were burned by the contract and the underlying was set aside.\\n    function redeemJuniorUnderlying() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = juniorExitQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 juniorTokenAmount = pos.amount;\\n        require(juniorTokenAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochJuniorTokenPrice[pos.epoch];\\n        uint256 underlyingDue = juniorTokenAmount * price / scaleFactor;\\n\\n        queuedJuniorsUnderlyingOut -= underlyingDue;\\n\\n        poolToken.safeTransfer(msg.sender, underlyingDue);\\n\\n        emit JuniorRedeemUnderlying(msg.sender, pos.epoch, underlyingDue);\\n    }\\n\\n    /// @notice Signal the intention to leave the pool as a senior\\n    /// @dev User will join the exit queue and his senior tokens will be transferred back to the pool.\\n    /// @dev Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.\\n    /// @dev Users can increase their queue amount but can't exit the queue\\n    /// @param amountSeniorTokens The amount of tokens the user wants to exit with\\n    function exitSenior(uint256 amountSeniorTokens) public {\\n        advanceEpoch();\\n\\n        uint256 balance = seniorToken.balanceOf(msg.sender);\\n        require(balance >= amountSeniorTokens, \\\"not enough balance\\\");\\n\\n        queuedSeniorTokensBurn += amountSeniorTokens;\\n\\n        QueuePosition storage pos = seniorExitQueue[msg.sender];\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemSeniorUnderlying();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        uint256 newBalance = pos.amount + amountSeniorTokens;\\n        pos.amount = newBalance;\\n\\n        seniorToken.transferAsOwner(msg.sender, address(this), amountSeniorTokens);\\n\\n        emit SeniorJoinExitQueue(msg.sender, epoch, amountSeniorTokens, newBalance);\\n    }\\n\\n    /// @notice Redeem the underlying for an exited epoch\\n    /// @dev Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.\\n    /// @dev Can only be called for a previous epoch and will revert for current and future epochs.\\n    /// @dev At this point, the senior tokens were burned by the contract and the underlying was set aside.\\n    function redeemSeniorUnderlying() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = seniorExitQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 seniorTokenAmount = pos.amount;\\n        require(seniorTokenAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochSeniorTokenPrice[pos.epoch];\\n        uint256 underlyingDue = seniorTokenAmount * price / scaleFactor;\\n\\n        queuedSeniorsUnderlyingOut -= underlyingDue;\\n\\n        poolToken.safeTransfer(msg.sender, underlyingDue);\\n\\n        emit SeniorRedeemUnderlying(msg.sender, pos.epoch, underlyingDue);\\n    }\\n\\n    /// @notice Transfer the accrued fees to the fees owner\\n    /// @dev Anyone can call but fees are transferred to fees owner. Reverts if no fees accrued.\\n    function transferFees() public {\\n        uint256 amount = feesAccrued();\\n        require(amount > 0, \\\"no fees\\\");\\n        require(feesOwner != address(0), \\\"no fees owner\\\");\\n\\n        // assumption: if there are fees accrued, it means there was an owner at some point\\n        // since the percentage cannot be set without an owner and the owner can't be set to address(0) later\\n        poolToken.safeTransfer(feesOwner, amount);\\n\\n        emit FeesTransfer(msg.sender, feesOwner, amount);\\n    }\\n\\n    /// @notice Calculates the current epoch based on the start of the first epoch and the epoch duration\\n    /// @return The id of the current epoch\\n    function getCurrentEpoch() public view returns (uint256) {\\n        if (block.timestamp < epoch1Start) {\\n            return 0;\\n        }\\n\\n        return (block.timestamp - epoch1Start) / epochDuration + 1;\\n    }\\n\\n    /// @notice Calculates the junior profits based on current pool conditions\\n    /// @dev It always returns 0 if the price went down.\\n    /// @return The amount, in pool tokens, that is considered profit for the juniors\\n    function getCurrentJuniorProfits() public view returns (uint256) {\\n        uint256 currentPrice = priceOracle.getPrice();\\n\\n        return accountingModel.calcJuniorProfits(\\n            epochEntryPrice,\\n            currentPrice,\\n            epochUpsideExposureRate,\\n            epochSeniorLiquidity,\\n            epochBalance()\\n        );\\n    }\\n\\n    /// @notice Calculates the junior losses (in other words, senior profits) based on the current pool conditions\\n    /// @dev It always returns 0 if the price went up.\\n    /// @return The amount, in pool tokens, that is considered loss for the juniors\\n    function getCurrentSeniorProfits() public view returns (uint256) {\\n        uint256 currentPrice = priceOracle.getPrice();\\n\\n        return accountingModel.calcSeniorProfits(\\n            epochEntryPrice,\\n            currentPrice,\\n            epochDownsideProtectionRate,\\n            epochSeniorLiquidity,\\n            epochBalance()\\n        );\\n    }\\n\\n    /// @notice Calculate the epoch balance\\n    /// @return epoch balance\\n    function epochBalance() public view returns (uint256) {\\n        return epochJuniorLiquidity + epochSeniorLiquidity;\\n    }\\n\\n    /// @notice Return the total amount of underlying in the queues\\n    /// @return amount of underlying in the queues\\n    function underlyingInQueues() public view returns (uint256) {\\n        return queuedJuniorsUnderlyingIn + queuedSeniorsUnderlyingIn + queuedJuniorsUnderlyingOut + queuedSeniorsUnderlyingOut;\\n    }\\n\\n    /// @notice Calculate the total fees accrued\\n    /// @dev We consider fees any amount of underlying that is not accounted for in the epoch balance & queues\\n    function feesAccrued() public view returns (uint256) {\\n        return poolToken.balanceOf(address(this)) - epochBalance() - underlyingInQueues();\\n    }\\n\\n    /// @notice Return the price of the junior token for the current epoch\\n    /// @dev If there's no supply, it returns 1 (scaled by scaleFactor).\\n    /// @dev It does not take into account the current profits and losses.\\n    /// @return The price of a junior token in pool tokens\\n    function getEpochJuniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = juniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return epochJuniorLiquidity * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the price of the senior token for the current epoch\\n    /// @dev If there's no supply, it returns 1 (scaled by scaleFactor).\\n    /// @dev It does not take into account the current profits and losses.\\n    /// @return The price of a senior token in pool tokens\\n    function getEpochSeniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = seniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return epochSeniorLiquidity * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the senior liquidity taking into account the current, unrealized, profits and losses\\n    /// @return The estimated senior liquidity\\n    function estimateCurrentSeniorLiquidity() public view returns (uint256) {\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n        if (seniorProfits > 0) {\\n            uint256 fee = seniorProfits * feesPercentage / scaleFactor;\\n            seniorProfits -= fee;\\n        }\\n\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n\\n        return epochSeniorLiquidity + seniorProfits - juniorProfits;\\n    }\\n\\n    /// @notice Return the junior liquidity taking into account the current, unrealized, profits and losses\\n    /// @return The estimated junior liquidity\\n    function estimateCurrentJuniorLiquidity() public view returns (uint256) {\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n        if (juniorProfits > 0) {\\n            uint256 fee = juniorProfits * feesPercentage / scaleFactor;\\n            juniorProfits -= fee;\\n        }\\n\\n        return epochJuniorLiquidity - seniorProfits + juniorProfits;\\n    }\\n\\n    /// @notice Return the current senior token price taking into account the current, unrealized, profits and losses\\n    /// @return The estimated senior token price\\n    function estimateCurrentSeniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = seniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return estimateCurrentSeniorLiquidity() * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the current junior token price taking into account the current, unrealized, profits and losses\\n    /// @return The estimated junior token price\\n    function estimateCurrentJuniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = juniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return estimateCurrentJuniorLiquidity() * scaleFactor / supply;\\n    }\\n\\n    /// @notice Process the junior entry and exit queues\\n    /// @dev It saves the junior token price valid for the stored epoch to storage for further reference.\\n    /// @dev It optimizes gas usage by re-using some of the tokens it already has minted which leads to only one of the {mint, burn} actions to be executed.\\n    /// @dev All queued positions will be converted into junior tokens or underlying at the same price.\\n    /// @return The amount of underlying (pool tokens) that should be set aside\\n    function _processJuniorQueues() internal returns (uint256){\\n        uint256 juniorTokenPrice = getEpochJuniorTokenPrice();\\n        history_epochJuniorTokenPrice[epoch] = juniorTokenPrice;\\n\\n        uint256 juniorTokensToMint = queuedJuniorsUnderlyingIn * scaleFactor / juniorTokenPrice;\\n        uint256 juniorTokensToBurn = queuedJuniorTokensBurn;\\n\\n        uint256 juniorUnderlyingOut = juniorTokensToBurn * juniorTokenPrice / scaleFactor;\\n\\n        if (juniorTokensToMint > juniorTokensToBurn) {\\n            uint256 diff = juniorTokensToMint - juniorTokensToBurn;\\n            juniorToken.mint(address(this), diff);\\n        } else if (juniorTokensToBurn > juniorTokensToMint) {\\n            uint256 diff = juniorTokensToBurn - juniorTokensToMint;\\n            juniorToken.burn(address(this), diff);\\n        } else {\\n            // nothing to mint or burn\\n        }\\n\\n        return juniorUnderlyingOut;\\n    }\\n\\n    /// @notice Process the senior entry and exit queues\\n    /// @dev It saves the senior token price valid for the stored epoch to storage for further reference.\\n    /// @dev It optimizes gas usage by re-using some of the tokens it already has minted which leads to only one of the {mint, burn} actions to be executed.\\n    /// @dev All queued positions will be converted into senior tokens or underlying at the same price.\\n    /// @return The amount of underlying (pool tokens) that should be set aside\\n    function _processSeniorQueues() internal returns (uint256) {\\n        uint256 seniorTokenPrice = getEpochSeniorTokenPrice();\\n        history_epochSeniorTokenPrice[epoch] = seniorTokenPrice;\\n\\n        uint256 seniorTokensToMint = queuedSeniorsUnderlyingIn * scaleFactor / seniorTokenPrice;\\n        uint256 seniorTokensToBurn = queuedSeniorTokensBurn;\\n\\n        uint256 seniorUnderlyingOut = seniorTokensToBurn * seniorTokenPrice / scaleFactor;\\n\\n        if (seniorTokensToMint > seniorTokensToBurn) {\\n            uint256 diff = seniorTokensToMint - seniorTokensToBurn;\\n            seniorToken.mint(address(this), diff);\\n        } else if (seniorTokensToBurn > seniorTokensToMint) {\\n            uint256 diff = seniorTokensToBurn - seniorTokensToMint;\\n            seniorToken.burn(address(this), diff);\\n        } else {\\n            // nothing to mint or burn\\n        }\\n\\n        return seniorUnderlyingOut;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface IPriceOracle {\\n    function getPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OwnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title A token that allows advanced privileges to its owner\\n/// @notice Allows the owner to mint, burn and transfer tokens without requiring explicit user approval\\ncontract OwnableERC20 is ERC20, Ownable {\\n    uint8 private _dec;\\n\\n    constructor(string memory name, string memory symbol, uint8 _decimals) ERC20(name, symbol) {\\n        _dec = _decimals;\\n    }\\n\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    /// be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    ///\\n    /// Tokens usually opt for a value of 18, imitating the relationship between\\n    /// Ether and Wei. This is the value {ERC20} uses, unless this function is\\n    /// overridden;\\n    ///\\n    /// NOTE: This information is only used for _display_ purposes: it in\\n    /// no way affects any of the arithmetic of the contract, including\\n    /// {IERC20-balanceOf} and {IERC20-transfer}.\\n    function decimals() public view override returns (uint8) {\\n        return _dec;\\n    }\\n\\n    /// @notice Allow the owner of the contract to mint an amount of tokens to the specified user\\n    /// @dev Only callable by owner\\n    /// @dev Emits a Transfer from the 0 address\\n    /// @param user The address of the user to mint tokens for\\n    /// @param amount The amount of tokens to mint\\n    function mint(address user, uint256 amount) public onlyOwner {\\n        _mint(user, amount);\\n    }\\n\\n    /// @notice Allow the owner of the contract to burn an amount of tokens from the specified user address\\n    /// @dev Only callable by owner\\n    /// @dev The user's balance must be at least equal to the amount specified\\n    /// @dev Emits a Transfer to the 0 address\\n    /// @param user The address of the user from which to burn tokens\\n    /// @param amount The amount of tokens to burn\\n    function burn(address user, uint256 amount) public onlyOwner {\\n        _burn(user, amount);\\n    }\\n\\n    /// @notice Allow the owner of the contract to transfer an amount of tokens from sender to recipient\\n    /// @dev Only callable by owner\\n    /// @dev Acts just like transferFrom but without the allowance check\\n    /// @param sender The address of the account from which to transfer tokens\\n    /// @param recipient The address of the account to which to transfer tokens\\n    /// @param amount The amount of tokens to transfer\\n    /// @return bool (always true)\\n    function transferAsOwner(address sender, address recipient, uint256 amount) public onlyOwner returns (bool){\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISeniorRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface ISeniorRateModel {\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256, uint256);\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/ISeniorRateModel.sol\\\";\\nimport \\\"./interfaces/IAccountingModel.sol\\\";\\nimport \\\"./SmartAlphaEvents.sol\\\";\\n\\n/// @notice Governance functions for SmartAlpha\\n/// @dev It defines a DAO and a Guardian\\n/// From a privilege perspective, the DAO is also considered Guardian, allowing it to execute any action\\n/// that the Guardian can do.\\nabstract contract Governed is SmartAlphaEvents {\\n    address public dao;\\n    address public guardian;\\n\\n    bool public paused;\\n\\n    IPriceOracle public priceOracle;\\n    ISeniorRateModel public seniorRateModel;\\n    IAccountingModel public accountingModel;\\n\\n    uint256 public constant MAX_FEES_PERCENTAGE = 5 * 10 ** 16; // 5% * 10^18\\n    address public feesOwner;\\n    uint256 public feesPercentage;\\n\\n    constructor (address _dao, address _guardian) {\\n        require(_dao != address(0), \\\"invalid address\\\");\\n        require(_guardian != address(0), \\\"invalid address\\\");\\n\\n        dao = _dao;\\n        guardian = _guardian;\\n    }\\n\\n    /// @notice Transfer the DAO to a new address\\n    /// @dev Only callable by the current DAO. The new dao cannot be address(0) or the same dao.\\n    /// @param newDAO The address of the new dao\\n    function transferDAO(address newDAO) public {\\n        enforceCallerDAO();\\n        require(newDAO != address(0), \\\"invalid address\\\");\\n        require(newDAO != dao, \\\"!new\\\");\\n\\n        emit TransferDAO(dao, newDAO);\\n\\n        dao = newDAO;\\n    }\\n\\n    /// @notice Transfer the Guardian to a new address\\n    /// @dev Callable by the current DAO or the current Guardian. The new Guardian cannot be address(0)\\n    /// or the same as before.\\n    /// @param newGuardian The address of the new Guardian\\n    function transferGuardian(address newGuardian) public {\\n        enforceCallerGuardian();\\n        require(newGuardian != address(0), \\\"invalid address\\\");\\n        require(newGuardian != guardian, \\\"!new\\\");\\n\\n        emit TransferGuardian(guardian, newGuardian);\\n\\n        guardian = newGuardian;\\n    }\\n\\n    /// @notice Pause the deposits into the system\\n    /// @dev Callable by DAO or Guardian. It will block any junior & senior deposits until resumed.\\n    function pauseSystem() public {\\n        enforceCallerGuardian();\\n        require(!paused, \\\"paused\\\");\\n\\n        paused = true;\\n\\n        emit PauseSystem();\\n    }\\n\\n    /// @notice Resume the deposits into the system\\n    /// @dev Callable by DAO or Guardian. It will resume deposits.\\n    function resumeSystem() public {\\n        enforceCallerGuardian();\\n        require(paused, \\\"!paused\\\");\\n\\n        paused = false;\\n\\n        emit ResumeSystem();\\n    }\\n\\n    /// @notice Change the price oracle\\n    /// @dev Only callable by DAO. The address of the new price oracle must have contract code.\\n    /// @param newPriceOracle The address of the new price oracle contract\\n    function setPriceOracle(address newPriceOracle) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newPriceOracle, \\\"invalid address\\\");\\n\\n        emit SetPriceOracle(address(priceOracle), newPriceOracle);\\n\\n        priceOracle = IPriceOracle(newPriceOracle);\\n    }\\n\\n    /// @notice Change the senior rate model contract\\n    /// @dev Only callable by DAO. The address of the new contract must have code.\\n    /// @param newModel The address of the new model\\n    function setSeniorRateModel(address newModel) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newModel, \\\"invalid address\\\");\\n\\n        emit SetSeniorRateModel(address(seniorRateModel), newModel);\\n\\n        seniorRateModel = ISeniorRateModel(newModel);\\n    }\\n\\n    /// @notice Change the accounting model contract\\n    /// @dev Only callable by DAO. The address of the new contract must have code.\\n    /// @param newModel The address of the new model\\n    function setAccountingModel(address newModel) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newModel, \\\"invalid address\\\");\\n\\n        emit SetAccountingModel(address(accountingModel), newModel);\\n\\n        accountingModel = IAccountingModel(newModel);\\n    }\\n\\n    /// @notice Change the owner of the fees\\n    /// @dev Only callable by DAO. The new owner must not be 0 address.\\n    /// @param newOwner The address to which fees will be transferred\\n    function setFeesOwner(address newOwner) public {\\n        enforceCallerDAO();\\n        require(newOwner != address(0), \\\"invalid address\\\");\\n\\n        emit SetFeesOwner(feesOwner, newOwner);\\n\\n        feesOwner = newOwner;\\n    }\\n\\n    /// @notice Change the percentage of the fees applied\\n    /// @dev Only callable by DAO. If the percentage is greater than 0, it must also have a fees owner.\\n    /// @param percentage The percentage of profits to be taken as fee\\n    function setFeesPercentage(uint256 percentage) public {\\n        enforceCallerDAO();\\n        if (percentage > 0) {\\n            require(feesOwner != address(0), \\\"no fees owner\\\");\\n        }\\n        require(percentage < MAX_FEES_PERCENTAGE, \\\"max percentage exceeded\\\");\\n\\n        emit SetFeesPercentage(feesPercentage, percentage);\\n\\n        feesPercentage = percentage;\\n    }\\n\\n    /// @notice Helper function to enforce that the call comes from the DAO\\n    /// @dev Reverts the execution if msg.sender is not the DAO.\\n    function enforceCallerDAO() internal view {\\n        require(msg.sender == dao, \\\"!dao\\\");\\n    }\\n\\n    /// @notice Helper function to enforce that the call comes from the Guardian\\n    /// @dev Reverts the execution if msg.sender is not the Guardian.\\n    function enforceCallerGuardian() internal view {\\n        require(msg.sender == guardian || msg.sender == dao, \\\"!guardian\\\");\\n    }\\n\\n    /// @notice Helper function to block any action while the system is paused\\n    /// @dev Reverts the execution if the system is paused\\n    function enforceSystemNotPaused() internal view {\\n        require(!paused, \\\"paused\\\");\\n    }\\n\\n    /// @notice Helper function to check for contract code at given address\\n    /// @dev Reverts if there's no code at the given address.\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccountingModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface IAccountingModel {\\n    function calcJuniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 upsideExposureRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n\\n    function calcSeniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 downsideProtectionRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/SmartAlphaEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nabstract contract SmartAlphaEvents {\\n    /// @notice Logs a deposit of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param underlyingIn The amount of underlying deposited\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event JuniorJoinEntryQueue(address indexed user, uint256 epochId, uint256 underlyingIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs a redeem (2nd step of deposit) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param tokensOut The amount of junior tokens redeemed\\n    event JuniorRedeemTokens(address indexed user, uint256 epochId, uint256 tokensOut);\\n\\n    /// @notice Logs an exit (1st step) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param tokensIn The amount of junior tokens deposited into the queue\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event JuniorJoinExitQueue(address indexed user, uint256 epochId, uint256 tokensIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs an exit (2nd step) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param underlyingOut The amount of underlying transferred to the user\\n    event JuniorRedeemUnderlying(address indexed user, uint256 epochId, uint256 underlyingOut);\\n\\n    /// @notice Logs a deposit of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param underlyingIn The amount of underlying deposited\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event SeniorJoinEntryQueue(address indexed user, uint256 epochId, uint256 underlyingIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs a redeem (2nd step of deposit) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param tokensOut The amount of senior tokens redeemed\\n    event SeniorRedeemTokens(address indexed user, uint256 epochId, uint256 tokensOut);\\n\\n    /// @notice Logs an exit (1st step) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param tokensIn The amount of senior tokens deposited into the queue\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event SeniorJoinExitQueue(address indexed user, uint256 epochId, uint256 tokensIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs an exit (2nd step) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param underlyingOut The amount of underlying transferred to the user\\n    event SeniorRedeemUnderlying(address indexed user, uint256 epochId, uint256 underlyingOut);\\n\\n    /// @notice Logs an epoch end\\n    /// @param epochId The id of the epoch that just ended\\n    /// @param juniorProfits The amount of junior profits for the epoch that ended in underlying tokens\\n    /// @param seniorProfits The amount of senior profits for the epoch that ended in underlying tokens\\n    event EpochEnd(uint256 epochId, uint256 juniorProfits, uint256 seniorProfits);\\n\\n    /// @notice Logs a transfer of fees\\n    /// @param caller The caller of the function\\n    /// @param destination The destination address of the funds\\n    /// @param amount The amount of tokens that were transferred\\n    event FeesTransfer(address caller, address destination, uint256 amount);\\n\\n    /// @notice Logs a transfer of dao power to a new address\\n    /// @param oldDAO The address of the old DAO\\n    /// @param newDAO The address of the new DAO\\n    event TransferDAO(address oldDAO, address newDAO);\\n\\n    /// @notice Logs a transfer of Guardian power to a new address\\n    /// @param oldGuardian The address of the old guardian\\n    /// @param newGuardian The address of the new guardian\\n    event TransferGuardian(address oldGuardian, address newGuardian);\\n\\n    /// @notice Logs a system pause\\n    event PauseSystem();\\n\\n    /// @notice logs a system resume\\n    event ResumeSystem();\\n\\n    /// @notice logs a change of price oracle\\n    /// @param oldOracle Address of the old oracle\\n    /// @param newOracle Address of the new oracle\\n    event SetPriceOracle(address oldOracle, address newOracle);\\n\\n    /// @notice Logs a change of senior rate model contract\\n    /// @param oldModel Address of the old model\\n    /// @param newModel Address of the new model\\n    event SetSeniorRateModel(address oldModel, address newModel);\\n\\n    /// @notice Logs a change of accounting model contract\\n    /// @param oldModel Address of the old model\\n    /// @param newModel Address of the new model\\n    event SetAccountingModel(address oldModel, address newModel);\\n\\n    /// @notice Logs a change of fees owner\\n    /// @param oldOwner Address of the old owner of fees\\n    /// @param newOwner Address of the new owner of fees\\n    event SetFeesOwner(address oldOwner, address newOwner);\\n\\n    /// @notice Logs a change of fees percentage\\n    /// @param oldPercentage The old percentage of fees\\n    /// @param newPercentage The new percentage of fees\\n    event SetFeesPercentage(uint256 oldPercentage, uint256 newPercentage);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorProfits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorProfits\",\"type\":\"uint256\"}],\"name\":\"EpochEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"JuniorJoinEntryQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"JuniorJoinExitQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"JuniorRedeemTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingOut\",\"type\":\"uint256\"}],\"name\":\"JuniorRedeemUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ResumeSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"SeniorJoinEntryQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"SeniorJoinExitQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"SeniorRedeemTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingOut\",\"type\":\"uint256\"}],\"name\":\"SeniorRedeemUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"SetAccountingModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetFeesOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"SetFeesPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"SetPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"SetSeniorRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDAO\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDAO\",\"type\":\"address\"}],\"name\":\"TransferDAO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"TransferGuardian\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEES_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingModel\",\"outputs\":[{\"internalType\":\"contract IAccountingModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advanceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositJunior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositSenior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch1Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDownsideProtectionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochJuniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSeniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochUpsideExposureRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentJuniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentJuniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentSeniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentSeniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountJuniorTokens\",\"type\":\"uint256\"}],\"name\":\"exitJunior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSeniorTokens\",\"type\":\"uint256\"}],\"name\":\"exitSenior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentJuniorProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSeniorProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochJuniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochSeniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history_epochJuniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history_epochSeniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorRateModelAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingModelAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch1Start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"juniorEntryQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"juniorExitQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorToken\",\"outputs\":[{\"internalType\":\"contract OwnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedJuniorTokensBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedJuniorsUnderlyingIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedJuniorsUnderlyingOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedSeniorTokensBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedSeniorsUnderlyingIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedSeniorsUnderlyingOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemJuniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemJuniorUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemSeniorUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seniorEntryQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seniorExitQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seniorRateModel\",\"outputs\":[{\"internalType\":\"contract ISeniorRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seniorToken\",\"outputs\":[{\"internalType\":\"contract OwnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"setAccountingModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setFeesOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setFeesPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"setSeniorRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDAO\",\"type\":\"address\"}],\"name\":\"transferDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"transferGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingInQueues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmartAlpha", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "2", "ConstructorArguments": "000000000000000000000000fb2859365084c653d41d6e1109d6eb3c6a31738b00000000000000000000000054e6a2f9991b6b6d57d152d21427e8cb80b25e91", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}