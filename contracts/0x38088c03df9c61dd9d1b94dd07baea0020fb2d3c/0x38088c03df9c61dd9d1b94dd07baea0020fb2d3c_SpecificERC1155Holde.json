{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/eligibility/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2022 PROOF Holdings Inc\\npragma solidity >=0.8.16 <0.9.0;\\n\\nimport {IEligibilityConstraint} from \\\"./IEligibilityConstraint.sol\\\";\\nimport {IMoonbirds} from \\\"moonbirds/IMoonbirds.sol\\\";\\nimport {IERC1155} from \\\"openzeppelin-contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {ANested} from \\\"./Nested.sol\\\";\\nimport {\\n    AMoonbirdConstraint,\\n    AMoonbirdOwnerConstraint\\n} from \\\"./MoonbirdConstraint.sol\\\";\\n\\n/**\\n * @notice Eligibility if the moonbird owner holds a specific kind of ERC1155\\n * token.\\n */\\nabstract contract ASpecificERC1155Holder is AMoonbirdOwnerConstraint {\\n    /**\\n     * @notice The collection of interest.\\n     */\\n    IERC1155 private immutable _token;\\n\\n    /**\\n     * @notice The ERC1155 token-type (i.e. id) of interest within the\\n     * collection.\\n     */\\n    uint256 private immutable _id;\\n\\n    constructor(IERC1155 token, uint256 id) {\\n        _token = token;\\n        _id = id;\\n    }\\n\\n    /**\\n     * @inheritdoc AMoonbirdOwnerConstraint\\n     * @dev Returns true iff the moonbird holder also owns a token from a\\n     * pre-defined collection.\\n     */\\n    function isEligible(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _token.balanceOf(owner, _id) > 0;\\n    }\\n}\\n\\n/**\\n * @notice Eligibility if the moonbird is nested and the owner holds a specific\\n * kind of ERC1155 token.\\n */\\nabstract contract ANestedSpecificERC1155Holder is\\n    ANested,\\n    ASpecificERC1155Holder\\n{\\n    /**\\n     * @inheritdoc IEligibilityConstraint\\n     * @dev Returns true iff the moonbird is nested and its holder also owns a\\n     * token from a pre-defined collection.\\n     */\\n    function isEligible(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override(ANested, AMoonbirdOwnerConstraint)\\n        returns (bool)\\n    {\\n        return ANested.isEligible(tokenId)\\n            && AMoonbirdOwnerConstraint.isEligible(tokenId);\\n    }\\n}\\n\\n/**\\n * @notice Eligibility if the moonbird owner holds a token from another ERC721\\n * collection.\\n */\\ncontract SpecificERC1155Holder is ASpecificERC1155Holder {\\n    constructor(IMoonbirds moonbirds, IERC1155 token, uint256 id)\\n        AMoonbirdConstraint(moonbirds)\\n        ASpecificERC1155Holder(token, id)\\n    {}\\n}\\n\\n/**\\n * @notice Eligibility if the moonbird is nested and the owner holds a specific\\n * kind of ERC1155 token.\\n */\\ncontract NestedSpecificERC1155Holder is ANestedSpecificERC1155Holder {\\n    constructor(IMoonbirds moonbirds, IERC1155 token, uint256 id)\\n        AMoonbirdConstraint(moonbirds)\\n        ASpecificERC1155Holder(token, id)\\n    {} //solhint-disable-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"src/eligibility/IEligibilityConstraint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2022 PROOF Holdings Inc\\npragma solidity >=0.8.16 <0.9.0;\\n\\n/**\\n * @notice Interface to encapsulate generic eligibility requirements.\\n * @dev This is intended to be used with the activation of Mutators.\\n */\\ninterface IEligibilityConstraint {\\n    /**\\n     * @notice Checks if a given moonbird is eligible.\\n     */\\n    function isEligible(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/moonbirds-contract/contracts/IMoonbirds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\n/**\\n@dev A minimal interface for interaction with the Moonbirds contract.\\n */\\ninterface IMoonbirds is IERC721 {\\n    function nestingPeriod(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            bool nesting,\\n            uint256 current,\\n            uint256 total\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/eligibility/Nested.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2022 PROOF Holdings Inc\\npragma solidity >=0.8.16 <0.9.0;\\n\\nimport {IEligibilityConstraint} from \\\"./IEligibilityConstraint.sol\\\";\\nimport {IMoonbirds} from \\\"moonbirds/IMoonbirds.sol\\\";\\nimport {AMoonbirdConstraint} from \\\"./MoonbirdConstraint.sol\\\";\\n\\n/**\\n * @notice Eligibility if a moonbird is nested.\\n */\\nabstract contract ANested is AMoonbirdConstraint {\\n    /**\\n     * @inheritdoc IEligibilityConstraint\\n     * @dev Returns true iff the moonbird is nested.\\n     */\\n    function isEligible(uint256 tokenId) public view virtual returns (bool) {\\n        (bool nesting,,) = _moonbirds.nestingPeriod(tokenId);\\n        return nesting;\\n    }\\n}\\n\\n/**\\n * @notice Eligibility if a moonbird is nested since a given time.\\n */\\nabstract contract ANestedSince is AMoonbirdConstraint {\\n    /**\\n     * @notice A moonbird has to be nested since this timestamp to be eligible.\\n     */\\n    uint256 private immutable _sinceTimestamp;\\n\\n    constructor(uint256 sinceTimestamp_) {\\n        _sinceTimestamp = sinceTimestamp_;\\n    }\\n\\n    /**\\n     * @inheritdoc IEligibilityConstraint\\n     * @dev Returns true iff the moonbird is nested since a given time.\\n     */\\n    function isEligible(uint256 tokenId) public view virtual returns (bool) {\\n        (bool nested, uint256 current,) = _moonbirds.nestingPeriod(tokenId);\\n        //solhint-disable-next-line not-rely-on-time\\n        return nested && block.timestamp - current <= _sinceTimestamp;\\n    }\\n}\\n\\n/**\\n * @notice Eligibility if a moonbird is nested.\\n */\\ncontract Nested is ANested {\\n    constructor(IMoonbirds moonbirds) AMoonbirdConstraint(moonbirds) {}\\n}\\n\\n/**\\n * @notice Eligibility if a moonbird is nested since a given time.\\n */\\ncontract NestedSince is ANestedSince {\\n    constructor(IMoonbirds moonbirds, uint256 sinceTimestamp)\\n        AMoonbirdConstraint(moonbirds)\\n        ANestedSince(sinceTimestamp)\\n    {}\\n}\\n\"\r\n    },\r\n    \"src/eligibility/MoonbirdConstraint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2022 PROOF Holdings Inc\\npragma solidity >=0.8.16 <0.9.0;\\n\\nimport {IEligibilityConstraint} from \\\"./IEligibilityConstraint.sol\\\";\\nimport {IMoonbirds} from \\\"moonbirds/IMoonbirds.sol\\\";\\n\\n/**\\n * @notice Eligibility based on moonbird properties.\\n */\\nabstract contract AMoonbirdConstraint is IEligibilityConstraint {\\n    /**\\n     * @notice The moonbird token.\\n     */\\n    IMoonbirds internal immutable _moonbirds;\\n\\n    constructor(IMoonbirds moonbirds) {\\n        _moonbirds = moonbirds;\\n    }\\n}\\n\\n/**\\n * @notice Eligibility based on moonbird owner properties.\\n */\\nabstract contract AMoonbirdOwnerConstraint is AMoonbirdConstraint {\\n    /**\\n     * @inheritdoc IEligibilityConstraint\\n     * @dev Returns true iff the holder of the given moonbird is eligible.\\n     */\\n    function isEligible(uint256 tokenId) public view virtual returns (bool) {\\n        return isEligible(_moonbirds.ownerOf(tokenId));\\n    }\\n\\n    /**\\n     * @notice Returns true iff a given moonbird owner is eligible.\\n     * @dev Intended to be implemented by derived contracts.\\n     */\\n    function isEligible(address owner) public view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@divergencetech/ethier/=lib/ethier_0_27_0/\",\r\n      \"erc721a/=lib/ERC721A/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"ethier/=lib/ethier/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"inflate-sol/=lib/inflate-sol/contracts/\",\r\n      \"moonbirds-inchain/=src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"moonbirds/=lib/moonbirds-contract/contracts/\",\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"solidify-contracts/=lib/solidify/contracts/\",\r\n      \"erc4626-tests/=lib/solidify/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"ethier_0_27_0/=lib/ethier_0_27_0/\",\r\n      \"moonbirds-contract/=lib/moonbirds-contract/\",\r\n      \"solidify-test/=lib/solidify/./test/\",\r\n      \"solidify/=lib/solidify/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"lib/solidify/contracts/InflateLibWrapper.sol\": {\r\n        \"PublicInflateLibWrapper\": \"0x8d69408205dEc1F1Eb5A2250C8638017Ef6069b6\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMoonbirds\",\"name\":\"moonbirds\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpecificERC1155Holder", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b000000000000000000000000bb6eefd83daab02fa1a697eb9d8495eec9f9b3840000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}