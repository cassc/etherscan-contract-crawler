{"SourceCode": "//          NNNNNNNN        NNNNNNNN     OOOOOOOOO     NNNNNNNN        NNNNNNNNEEEEEEEEEEEEEEEEEEEEEE\r\n//          N:::::::N       N::::::N   OO:::::::::OO   N:::::::N       N::::::NE::::::::::::::::::::E\r\n//          N::::::::N      N::::::N OO:::::::::::::OO N::::::::N      N::::::NE::::::::::::::::::::E\r\n//          N:::::::::N     N::::::NO:::::::OOO:::::::ON:::::::::N     N::::::NEE::::::EEEEEEEEE::::E\r\n//          N::::::::::N    N::::::NO::::::O   O::::::ON::::::::::N    N::::::N  E:::::E       EEEEEE\r\n//          N:::::::::::N   N::::::NO:::::O     O:::::ON:::::::::::N   N::::::N  E:::::E             \r\n//          N:::::::N::::N  N::::::NO:::::O     O:::::ON:::::::N::::N  N::::::N  E::::::EEEEEEEEEE   \r\n//          N::::::N N::::N N::::::NO:::::O     O:::::ON::::::N N::::N N::::::N  E:::::::::::::::E   \r\n//          N::::::N  N::::N:::::::NO:::::O     O:::::ON::::::N  N::::N:::::::N  E:::::::::::::::E   \r\n//          N::::::N   N:::::::::::NO:::::O     O:::::ON::::::N   N:::::::::::N  E::::::EEEEEEEEEE   \r\n//          N::::::N    N::::::::::NO:::::O     O:::::ON::::::N    N::::::::::N  E:::::E             \r\n//          N::::::N     N:::::::::NO::::::O   O::::::ON::::::N     N:::::::::N  E:::::E       EEEEEE\r\n//          N::::::N      N::::::::NO:::::::OOO:::::::ON::::::N      N::::::::NEE::::::EEEEEEEE:::::E\r\n//          N::::::N       N:::::::N OO:::::::::::::OO N::::::N       N:::::::NE::::::::::::::::::::E\r\n//          N::::::N        N::::::N   OO:::::::::OO   N::::::N        N::::::NE::::::::::::::::::::E\r\n//          NNNNNNNN         NNNNNNN     OOOOOOOOO     NNNNNNNN         NNNNNNNEEEEEEEEEEEEEEEEEEEEEE\r\n// \r\n// \r\n//                  An enterprise level discord based NFT and shitcoin trading tool...\r\n// \r\n//                                          https://noneth.io\r\n//                                        https://docs.noneth.io\r\n//                                      https://discord.gg/noneth\r\n//                                     https://twitter.com/nonethio\r\n// \r\n//                                          None Revenue Helper\r\n//              The purpose of this contract is to split the team, and holders allocation of\r\n//                            generated revenue, while keeping it transparent.\r\n// \r\n                                                                                         \r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract RevenueHelper is Ownable {\r\n\r\n    address teamTreasury;\r\n\r\n    address holderRewardsReserve;\r\n\r\n    uint256 teamAllocation = 75;\r\n\r\n    constructor(address _teamTreasury, address _holderRewardsReserve) Ownable(msg.sender) {\r\n        teamTreasury = _teamTreasury;\r\n        holderRewardsReserve = _holderRewardsReserve;\r\n    }\r\n\r\n    // Changes the team treasury address...\r\n    function changeTeamTreasury(address _teamTreasury) external onlyOwner {\r\n        teamTreasury = _teamTreasury;\r\n    }\r\n\r\n    // Changes the holder rewards address...\r\n    // We will be changing this address in the future to a smart contract where holders can claim their ETH automatically.\r\n    function changeHolderRewardsReserve(address _holderRewardsReserve) external onlyOwner {\r\n        holderRewardsReserve = _holderRewardsReserve;\r\n    }\r\n\r\n    // Changes the team's allocation from the revenue split.\r\n    function changeTeamAllocation(uint256 _teamAllocation) external onlyOwner {\r\n        require(_teamAllocation <= 100, \"Cannot be more than 100%.\");\r\n        teamAllocation = _teamAllocation;\r\n    }\r\n\r\n    // Send remaining balance to teamTreasury\r\n    function withdrawExcessEth() external onlyOwner {\r\n        (bool success, ) = teamTreasury.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer to Team Treasury failed.\");\r\n    }\r\n\r\n    // When ETH is received, it will automatically split to the team wallet, and the holder revenue share wallet.\r\n    receive() payable external {\r\n        unchecked {\r\n        uint256 amountReceived = msg.value;\r\n        // Calculates reward allocation by subtracting the amount allocated to the team\r\n        uint256 rewardAllocation = 100 - teamAllocation;\r\n\r\n        (bool success, ) = teamTreasury.call{value: (amountReceived / 100 * teamAllocation)}(\"\");\r\n        require(success, \"Transfer to Team Treasury failed\");\r\n        (success, ) = holderRewardsReserve.call{value: (amountReceived / 100 * rewardAllocation)}(\"\");\r\n        require(success, \"Transfer to Reward Reserve failed\");\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holderRewardsReserve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holderRewardsReserve\",\"type\":\"address\"}],\"name\":\"changeHolderRewardsReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamAllocation\",\"type\":\"uint256\"}],\"name\":\"changeTeamAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamTreasury\",\"type\":\"address\"}],\"name\":\"changeTeamTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExcessEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RevenueHelper", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008b8af6c77c6ad634a236448143f888bed585348b0000000000000000000000009c0096a7668ffe704b7c90c94f69dfac71876722", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fe4e5abb8a0616975f56d7652dac7c14e68d0a8b85b4f05fd2429fad69966266"}