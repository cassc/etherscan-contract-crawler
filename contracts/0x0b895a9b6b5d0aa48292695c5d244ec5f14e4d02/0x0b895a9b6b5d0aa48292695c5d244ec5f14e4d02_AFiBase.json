{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"},\"AFiBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.0;\\npragma abicoder v2;\\nimport {IAFiStorage} from \\\"./IAFiStorage.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"./ReentrancyGuard.sol\\\";\\nimport {SafeERC20} from \\\"./SafeERC20.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {ISwapRouter} from \\\"./ISwapRouter.sol\\\";\\nimport \\\"./IAFi.sol\\\";\\nimport \\\"./IPassiveRebal.sol\\\";\\nimport \\\"./ArrayUtils.sol\\\";\\nimport \\\"./IUniswapV3Factory.sol\\\";\\n\\ninterface Compound {\\n  function mint(uint mintAmount) external returns (uint);\\n\\n  function redeem(uint redeemTokens) external returns (uint);\\n\\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n  function exchangeRateStored() external view returns (uint);\\n}\\n\\ninterface IAFiFactory {\\n  function setIfUserInvesting(address user, address afiContract) external;\\n\\n  function hasUserInvestedAlready(\\n    address afiContract,\\n    address user\\n  ) external view returns (bool);\\n\\n  function withdrawAndResetInvestmentStatus(address user, address afiContract) external;\\n}\\n\\nstruct Val {\\n  uint value;\\n}\\n\\nenum ActionType {\\n  Deposit, // supply tokens\\n  Withdraw // borrow tokens\\n}\\n\\nenum AssetDenomination {\\n  Wei // the amount is denominated in wei\\n}\\n\\nenum AssetReference {\\n  Delta // the amount is given as a delta from the current value\\n}\\n\\nstruct AssetAmount {\\n  bool sign; // true if positive\\n  AssetDenomination denomination;\\n  AssetReference ref;\\n  uint value;\\n}\\n\\nstruct ActionArgs {\\n  ActionType actionType;\\n  uint accountId;\\n  AssetAmount amount;\\n  uint primaryMarketId;\\n  uint secondaryMarketId;\\n  address otherAddress;\\n  uint otherAccountId;\\n  bytes data;\\n}\\n\\nstruct Info {\\n  address owner; // The address that owns the account\\n  uint number; // A nonce that allows a single address to control many accounts\\n}\\n\\nstruct Wei {\\n  bool sign; // true if positive\\n  uint value;\\n}\\n\\nabstract contract DyDx {\\n  function getAccountWei(\\n    Info memory account,\\n    uint marketId\\n  ) public view virtual returns (Wei memory);\\n\\n  function operate(Info[] memory, ActionArgs[] memory) public virtual;\\n}\\n\\ninterface LendingPoolAddressesProvider {\\n  function getLendingPool() external view returns (address);\\n\\n  function getLendingPoolCore() external view returns (address);\\n}\\n\\ncontract AFiVariableStorage {\\n  uint internal pool;\\n  address[] public token; // deposit stable coin\\n  mapping(address =\\u003e address) internal compound; // compound address for various u tokens\\n  mapping(address =\\u003e address) internal aaveToken; // aaveToken address for various u tokens\\n  mapping(address =\\u003e address) internal priceOracles;\\n  mapping(address =\\u003e address) internal underlyingUniPoolToken;\\n  mapping(address =\\u003e mapping(address =\\u003e address)) internal tokenUniPool;\\n  mapping(address =\\u003e uint) internal dToken;\\n  uint8 internal constant FEE_PERCENT = 1;\\n  mapping(address =\\u003e uint) public depositNAV;\\n  mapping(address =\\u003e uint) internal _balances;\\n  address payable internal constant PLATFORM_WALLET =\\n    payable(0xB4c710a52228707338Cb0674101B1c5f511324fC);\\n  mapping(address =\\u003e bool) public whitelistedTokens;\\n  address[] internal uTokens;\\n  uint[] internal uTokenProportions;\\n  uint[] internal defaultProportion;\\n}\\n\\ncontract AFiBase is ReentrancyGuard, Ownable, AFiVariableStorage, IAFi {\\n  using SafeERC20 for IERC20;\\n  using ArrayUtils for uint[];\\n  using ArrayUtils for address[];\\n  using SafeMath for uint;\\n  IPassiveRebal internal rebalContract;\\n  IAFiStorage internal aFiStorage;\\n  uint internal lastRebalTime;\\n  address public aFiManager;\\n  bool internal depositPaused;\\n  bool internal withdrawPaused;\\n  uint internal typeOfProduct; // 1: one type product, 2: second and 3: for Algo\\n  address internal aarnaEngine;\\n  bool internal isBase;\\n  string private _name;\\n  string private _symbol;\\n  uint internal _totalSupply;\\n  uint internal afterSwap;\\n  address public factory;\\n  address internal _uniPool;\\n  uint8 internal slippageOrder;\\n\\n  address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n  address private constant poolAddressProvider =\\n    0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;\\n  ISwapRouter internal constant UNISWAP_EXCHANGE =\\n    ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n  address private constant dydx = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n\\n  address internal tLContract;\\n  mapping(address =\\u003e uint256) public userLockedAmount;\\n\\n  event Deposit(address indexed investor, uint256 amount, address depToken);\\n  event Withdraw(address indexed investor, uint256 amount, address withdrawnToken);\\n  event Initialized(address indexed afiContract);\\n  event InitializedPlatformData(address indexed afiContract);\\n  event InitializedToken(address indexed afiContract);\\n  event SetAFiManager(address indexed afiContract, address manager);\\n  event SupplyDydx(address indexed afiContract, address tok, uint amount);\\n  event SupplyAave(address indexed afiContract, address tok, uint amount);\\n  event SupplyCompound(address indexed afiContract, address tok, uint amount);\\n  event WithdrawAave(address indexed afiContract, address tok, uint amount);\\n  event WithdrawCompound(address indexed afiContract, address tok, uint amount);\\n  event WithdrawDydx(address indexed afiContract, address tok, uint amount);\\n  event UpdatePoolData(address indexed afiContract, bytes data);\\n  event WithdrawRebalanceAmount(address indexed afiContract, address uTokenToRemove);\\n  event SetInitialValues(address indexed afiContract);\\n  event UpdateTimeLockContract(address indexed afiContract, address newTL);\\n  event UpdateShares(address indexed user, uint256 amount, bool lock);\\n  event SlippageFactorUpdated(uint256 sFactor);\\n\\n  function onlySpecificAddress(address _addr) internal view {\\n    require(msg.sender == _addr, \\\"AB09\\\");\\n  }\\n\\n  function nonBase() internal view {\\n    require(!isBase, \\\"AB03\\\");\\n  }\\n\\n  function isValid(bool isDeposit, uint amount, address tok) internal view {\\n    require(amount \\u003e 0, \\\"AB06\\\");\\n    require(whitelistedTokens[tok], \\\"AB07\\\"); // Added validation to check if the token is whitelisted\\n    if (isDeposit) {\\n      require(!depositPaused, \\\"AB28\\\");\\n    } else {\\n      require(!withdrawPaused, \\\"AB29\\\");\\n    }\\n  }\\n\\n  function initialize(\\n    address newOwner,\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    bytes memory data,\\n    bool _isActiveRebalanced,\\n    IAFiStorage _aFiStorage\\n  ) external override nonReentrant {\\n    nonBase();\\n    require(newOwner != address(0), \\\"AB04\\\");\\n\\n    _name = tokenName;\\n    _symbol = tokenSymbol;\\n    _transferOwnership(newOwner);\\n    aFiStorage = _aFiStorage;\\n\\n    IAFi.PoolsData memory pooldata = abi.decode(data, (IAFi.PoolsData));\\n    typeOfProduct = pooldata._typeOfProduct;\\n    lastRebalTime = block.timestamp;\\n    factory = msg.sender;\\n    setInitialValues(data);\\n\\n    defaultProportion = uTokenProportions;\\n    IAFiStorage(_aFiStorage).setAFiActive(address(this), true);\\n\\n    IAFiStorage(_aFiStorage).setActiveRebalancedStatus(\\n      address(this),\\n      _isActiveRebalanced\\n    );\\n    IAFiStorage(_aFiStorage).setAPR(address(this), pooldata._apr);\\n    IAFiStorage(_aFiStorage).afiContractInitUpdate(address(this), 1);\\n\\n    emit Initialized(address(this));\\n  }\\n\\n  function initializeToken(\\n    address[] memory iToken,\\n    address[] memory iTokenOracle,\\n    bytes memory _poolData\\n  ) external override nonReentrant {\\n    nonBase();\\n    uint iLen = iToken.length;\\n    IAFi.UnderlyingData memory pooldata = abi.decode(_poolData, (IAFi.UnderlyingData));\\n    uint pLen = pooldata._underlyingUniPoolToken.length;\\n    unchecked {\\n      for (uint i = 0; i \\u003c iLen; i++) {\\n        token.push(iToken[i]);\\n        whitelistedTokens[iToken[i]] = true;\\n        priceOracles[iToken[i]] = iTokenOracle[i];\\n        for (uint j = 0; j \\u003c pLen; j++) {\\n          updateUniTok(\\n            iToken[i],\\n            pooldata._underlyingUniPoolToken[j],\\n            pooldata.stablePools[i]._pools[j]\\n          );\\n        }\\n        updateUniTok(iToken[i], WETH, pooldata.stableWethPool[i]);\\n      }\\n    }\\n    priceOracles[WETH] = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\n    aFiStorage.afiContractInitUpdate(address(this), 2);\\n    isBase = true;\\n    emit InitializedToken(address(this));\\n  }\\n\\n  function initializePlatformData(\\n    address[] memory _teamWallets,\\n    IPassiveRebal _rebalContract,\\n    bool _isPassiveRebalanced,\\n    address _aFiManager,\\n    address _aarnaEngine\\n  ) external override nonReentrant {\\n    nonBase();\\n    aFiManager = _aFiManager;\\n    aarnaEngine = _aarnaEngine;\\n    rebalContract = _rebalContract;\\n    rebalContract.setPassiveRebalancedStatus(address(this), _isPassiveRebalanced);\\n    aFiStorage.setTeamWallets(address(this), _teamWallets);\\n    aFiStorage.afiContractInitUpdate(address(this), 3);\\n\\n    emit InitializedPlatformData(address(this));\\n  }\\n\\n  /**\\n   * @notice To pause the contract.\\n   * @dev Requirements: It can only be invoked by the Owner wallet.\\n   * @param isDeposit True if we want to pause deposit otherwise false if want to pause withdraw.\\n   */\\n  function pause(bool isDeposit) external onlyOwner {\\n    if (isDeposit) {\\n      depositPaused = true;\\n    } else {\\n      withdrawPaused = true;\\n    }\\n    emit Paused(msg.sender, isDeposit);\\n  }\\n\\n  /**\\n   * @notice To resume/unpause the contract.\\n   * @dev Requirements: It can only be invoked by the Owner wallet.\\n   * @param isDeposit True if we want to pause deposit otherwise false if want to pause withdraw.\\n   */\\n  function unPause(bool isDeposit) external onlyOwner {\\n    if (isDeposit) {\\n      depositPaused = false;\\n    } else {\\n      withdrawPaused = false;\\n    }\\n    emit Unpaused(msg.sender, isDeposit);\\n  }\\n\\n  /**\\n   * @notice Returns the paused status of the contract.\\n   */\\n  function isPaused() external view override returns (bool, bool) {\\n    return (depositPaused, withdrawPaused);\\n  }\\n\\n  /**\\n   * @notice To set the AFiManager contract address.\\n   * @dev Requirements: It can be invoked only by the platform wallet.\\n   * @param _aFiManager Address of the AFiManager contract.\\n   */\\n  function setAFiManager(address _aFiManager) external {\\n    onlySpecificAddress(PLATFORM_WALLET);\\n    require(_aFiManager != address(0), \\\"AB05\\\"); //solhint-disable-line reason-string\\n    aFiManager = _aFiManager;\\n    emit SetAFiManager(address(this), _aFiManager);\\n  }\\n\\n  function updateuniPool(address tok, address midTok) external override {\\n    require(msg.sender == address(aFiStorage) || msg.sender == aFiManager, \\\"NA\\\");\\n    _uniPool = tokenUniPool[tok][midTok];\\n  }\\n\\n  function getRebalContract() external view override returns (address) {\\n    return address(rebalContract);\\n  }\\n\\n  function getTVL() external view override returns (uint256) {\\n    return pool;\\n  }\\n\\n  function getMidToken(address tok) external view override returns (address) {\\n    return underlyingUniPoolToken[tok];\\n  }\\n\\n  function getPool(\\n    address tok,\\n    address midTok\\n  ) external view override returns (address) {\\n    return tokenUniPool[tok][midTok];\\n  }\\n\\n  function deposit(\\n    uint amount,\\n    address iToken,\\n    uint deadline,\\n    uint[] memory slippageFactor\\n  ) external nonReentrant {\\n    isValid(true, amount, iToken);\\n    IERC20(iToken).safeTransferFrom(msg.sender, address(this), amount);\\n    amount = amount.sub(takeFee(amount, iToken));\\n    uint shares = 0;\\n    uint256 amountCheck;\\n    applySwapsAndPassiveRebal(iToken, amount, deadline, slippageFactor);\\n\\n    if (typeOfProduct == 2) {\\n      aFiStorage.rearrange(address(this));\\n    }\\n\\n    pool = aFiStorage.calculatePoolInUsd(address(this));\\n\\n    if (_totalSupply == 0) {\\n      shares = (pool).div(100);\\n    } else {\\n      amountCheck = pool - afterSwap;\\n      shares = (amountCheck.mul(_totalSupply)).div(afterSwap);\\n    }\\n    require(shares \\u003e= 1e17, \\\"AB10\\\");\\n    uint256 tsupplybefore = _totalSupply;\\n    uint256 totalSupplyafter = _totalSupply.add(shares);\\n\\n    if (depositNAV[msg.sender] == 0) {\\n      if (_totalSupply == 0) {\\n        depositNAV[msg.sender] = 1000000;\\n      } else {\\n        depositNAV[msg.sender] = (afterSwap.mul(10000)).div(tsupplybefore);\\n      }\\n    } else {\\n      uint256 newNav = (afterSwap.mul(10000)).div(tsupplybefore);\\n      depositNAV[msg.sender] =\\n        ((depositNAV[msg.sender] * tsupplybefore) + (shares * newNav)) /\\n        (totalSupplyafter);\\n    }\\n\\n    afterSwap = pool;\\n    _totalSupply = totalSupplyafter;\\n    _balances[msg.sender] = _balances[msg.sender].add(shares);\\n\\n    if (!(IAFiFactory(factory).hasUserInvestedAlready(msg.sender, address(this)))) {\\n      IAFiFactory(factory).setIfUserInvesting(msg.sender, address(this));\\n    }\\n\\n    emit Deposit(msg.sender, amount, iToken);\\n  }\\n\\n  function applySwapsAndPassiveRebal(\\n    address iToken,\\n    uint amount,\\n    uint _deadline,\\n    uint256[] memory slippageFactor\\n  ) internal {\\n    bool isPassiveRebalEnabled = rebalContract.isAFiPassiveRebalanced(address(this));\\n    uint strategy = rebalContract.getRebalStrategyNumber(address(this));\\n\\n    uint256 uTokenLen = uTokens.length;\\n    uint[] memory tokenProportions = new uint[](uTokenLen);\\n    tokenProportions = uTokenProportions;\\n\\n    if (isPassiveRebalEnabled \\u0026\\u0026 strategy == 0) {\\n      tokenProportions = defaultProportion;\\n    }\\n\\n    unchecked {\\n      for (uint i = 0; i \\u003c uTokenLen; i++) {\\n        // For all inactive tokens uTokenProportions[i] == 0\\n        if (uTokenProportions[i] \\u003e= 1) {\\n          uint amountAsPerProportion = (amount.mul(tokenProportions[i])).div(10000000);\\n          // Initiate Swap via OneInchExchange\\n\\n          if (underlyingUniPoolToken[uTokens[i]] == iToken) {\\n            _uniPool = tokenUniPool[uTokens[i]][underlyingUniPoolToken[uTokens[i]]];\\n          }\\n          if (iToken != uTokens[i]) {\\n            updateSlippageOrder(1);\\n            uniswapV3Router(\\n              iToken,\\n              uTokens[i],\\n              amountAsPerProportion,\\n              _deadline,\\n              underlyingUniPoolToken[uTokens[i]],\\n              slippageFactor\\n            );\\n          }\\n        }\\n      }\\n    }\\n\\n    uint rebalPeriod = rebalContract.getRebalPeriod(address(this));\\n    // Rebel block starts\\n    if (\\n      typeOfProduct == 2 \\u0026\\u0026\\n      isPassiveRebalEnabled \\u0026\\u0026\\n      (block.timestamp - lastRebalTime \\u003e= rebalPeriod) \\u0026\\u0026\\n      strategy == 1\\n    ) {\\n      uTokenProportions = rebalContract.applyRebalForProportions(\\n        address(this),\\n        aFiManager,\\n        address(aFiStorage),\\n        strategy,\\n        uTokens\\n      );\\n      lastRebalTime = block.timestamp;\\n    }\\n  }\\n\\n  function withdraw(\\n    uint _shares,\\n    address oToken,\\n    uint deadline,\\n    uint[] memory slippageFactor\\n  ) external nonReentrant {\\n    isValid(false, _shares, oToken);\\n    uint ibalance = _balances[msg.sender];\\n    require(ibalance.sub(userLockedAmount[msg.sender]) \\u003e= _shares, \\\"AB11\\\");\\n    require(_shares \\u003e= 1e17,\\\"AB31\\\");\\n    pool = aFiStorage.calculatePoolInUsd(address(this));\\n    updateSlippageOrder(2);\\n\\n    // Calc to redeem before updating balances\\n    uint r = (pool.mul(_shares)).div(_totalSupply);\\n\\n    uint256 redFromContract = aFiStorage.swapForOtherProduct(\\n      address(this),\\n      r,\\n      oToken,\\n      deadline,\\n      slippageFactor\\n    );\\n\\n    uint256 redemptionNAV = ((pool).mul(10000)).div(_totalSupply);\\n    if(redemptionNAV \\u003e depositNAV[msg.sender] ){    \\n    redFromContract -=  IAFiManager(aFiManager)._distributeProfitShare(\\n        address(aFiStorage),\\n        address(this),\\n        _shares,\\n        oToken,\\n        depositNAV[msg.sender],\\n        redemptionNAV\\n      );\\n    }\\n\\n    _totalSupply = _totalSupply.sub(_shares);\\n    _balances[msg.sender] = _balances[msg.sender].sub(_shares);\\n    require(IERC20(oToken).balanceOf(address(this)) \\u003e= redFromContract, \\\"AB00\\\");\\n    IERC20(oToken).safeTransfer(msg.sender, redFromContract);\\n\\n    // When all invested tokens are withdrawn reset depositNAV\\n    if (_balances[msg.sender] == 0 \\u0026\\u0026 userLockedAmount[msg.sender] == 0) {\\n      depositNAV[msg.sender] = 0;\\n      IAFiFactory(factory).withdrawAndResetInvestmentStatus(msg.sender, address(this));\\n    }\\n    \\n    afterSwap = aFiStorage.calculatePoolInUsd(address(this));\\n    emit Withdraw(msg.sender, _shares, oToken);\\n  }\\n\\n  function swapViAFiStorage(\\n    address from,\\n    address to,\\n    uint amount,\\n    uint deadline,\\n    address midTok,\\n    uint[] memory slippageFactor,\\n    uint8 counter\\n  ) external override returns (uint256) {\\n    require(msg.sender == address(aFiStorage) || msg.sender == aFiManager, \\\"AB12\\\");\\n    updateSlippageOrder(counter);\\n    uint256 _amountOut = uniswapV3Router(\\n      from,\\n      to,\\n      amount,\\n      deadline,\\n      midTok,\\n      slippageFactor\\n    );\\n    return _amountOut;\\n  }\\n\\n  function getUTokenIndex(address uToken) internal view returns (uint256) {\\n    (uint uTokenIndex, ) = uTokens.indexOf(uToken);\\n    return uTokenIndex;\\n  }\\n\\n  /**\\n   * @notice To initiate a swap via the Uniswap exchange contract.\\n   * @dev The contract must not be paused. It can only be invoked by the AFiManager contract.\\n   * @param _tokenIn The source token which is swapped for the destination token.\\n   * @param _tokenOut The destination token to which the from token is swapped into.\\n   * @param _amountIn Amount of from token for swapping.\\n   * @param _maxTime max time for swaps.\\n   */\\n  function uniswapV3Router(\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint _amountIn,\\n    uint _maxTime,\\n    address middleToken,\\n    uint256[] memory slippageFactor\\n  ) internal returns (uint amountOut) {\\n    //approval\\n    approval(_tokenIn, address(UNISWAP_EXCHANGE), _amountIn);\\n    uint256 slippageAmount;\\n\\n    if(slippageOrder == 1){\\n      slippageAmount  = (_amountIn.mul(slippageFactor[0])).div(100);\\n    }else if(slippageOrder == 2){\\n      slippageAmount  = (_amountIn.mul(slippageFactor[getUTokenIndex(_tokenIn)])).div(100);\\n    }else if(slippageOrder == 3){\\n      slippageAmount = IAFiManager(aFiManager).uTokenslippage(address(this), _tokenIn);\\n      slippageAmount  = (_amountIn.mul(slippageAmount)).div(100);\\n    }\\n\\n    slippageAmount = _amountIn - slippageAmount;\\n   \\n    uint256 minimumAmountOut = aFiStorage.caculateMinOutForUniswap(address(this), _tokenIn, _tokenOut, slippageAmount, middleToken, _uniPool);\\n  \\n    if (minimumAmountOut \\u003e 0) {\\n      if (_tokenIn == WETH || _tokenOut == WETH) {\\n        address poolTok;\\n        if(_tokenIn == WETH){\\n          poolTok = _tokenOut;\\n        }else{\\n          poolTok = _tokenIn;\\n        }\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n          .ExactInputSingleParams({\\n            tokenIn: _tokenIn,\\n            tokenOut: _tokenOut,\\n            // pool fee \\n            fee: IUniswapV3Pool(tokenUniPool[poolTok][WETH]).fee(),\\n            recipient: address(this),\\n            deadline: _maxTime,\\n            amountIn: _amountIn,\\n            amountOutMinimum: minimumAmountOut,\\n            // NOTE: In production, this value can be used to set the limit\\n            // for the price the swap will push the pool to,\\n            // which can help protect against price impact\\n            sqrtPriceLimitX96: 0\\n          });\\n        amountOut = UNISWAP_EXCHANGE.exactInputSingle(params);\\n      } else if (_tokenIn == middleToken || _tokenOut == middleToken) {\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n          .ExactInputSingleParams({\\n            tokenIn: _tokenIn,\\n            tokenOut: _tokenOut,\\n            // pool fee \\n            fee: IUniswapV3Pool(_uniPool).fee(),\\n            recipient: address(this),\\n            deadline: _maxTime,\\n            amountIn: _amountIn,\\n            amountOutMinimum: minimumAmountOut,\\n            // NOTE: In production, this value can be used to set the limit\\n            // for the price the swap will push the pool to,\\n            // which can help protect against price impact\\n            sqrtPriceLimitX96: 0\\n          });\\n        amountOut = UNISWAP_EXCHANGE.exactInputSingle(params);\\n      } else {\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n          path: abi.encodePacked(\\n            _tokenIn,\\n            IUniswapV3Pool(tokenUniPool[_tokenIn][middleToken]).fee(),\\n            middleToken,\\n            IUniswapV3Pool(tokenUniPool[_tokenOut][middleToken]).fee(),\\n            _tokenOut\\n          ),\\n          recipient: address(this),\\n          deadline: _maxTime,\\n          amountIn: _amountIn,\\n          amountOutMinimum: minimumAmountOut\\n        });\\n        amountOut = UNISWAP_EXCHANGE.exactInput(params);\\n      }\\n    }\\n    require(amountOut \\u003e= minimumAmountOut, \\\"AB15\\\");\\n    _uniPool = address(0);\\n    updateSlippageOrder(0);\\n  }\\n\\n  /**\\n   * @notice To take fee.\\n   * @param amount Deposit amount.\\n   * @param iToken whitelisted ERC20 token to refer for payment.\\n   */\\n  function takeFee(uint amount, address iToken) internal returns (uint fee) {\\n    // Deduct Fees from amount\\n    transfers(PLATFORM_WALLET, amount.mul(FEE_PERCENT).div(100), iToken);\\n    return (amount.mul(FEE_PERCENT)).div(100);\\n  }\\n\\n  /**\\n   * @notice Function sends profit to wallets in the process of proffir share.\\n   * @param wallet address to send profit to.\\n   * @param profitShare i.e. amount to be transferred.\\n   * @param oToken address of the token to consider for amount deduction.\\n   */\\n  function sendProfitOrFeeToManager(\\n    address wallet,\\n    uint profitShare,\\n    address oToken\\n  ) external override {\\n    onlySpecificAddress(aFiManager);\\n    transfers(wallet, profitShare, oToken);\\n  }\\n\\n  function transfers(\\n    address wallet,\\n    uint amt,\\n    address tok\\n  ) internal {\\n    IERC20(tok).safeTransfer(wallet, amt);\\n  }\\n\\n  function updateSlippageOrder(uint8 order) internal {\\n    slippageOrder = order;\\n  }\\n\\n  /**\\n   * @notice _supplyDydx function supply the fund of token to DYDX protocol for yield generation.\\n   * @dev this function should be called by AFiStorage only\\n   * @param tok address of the token to consider for supply.\\n   * @param amount i.e calculated amount of token to invest.\\n   */\\n  function _supplyDydx(address tok, uint amount) external override {\\n    onlySpecificAddress(address(aFiStorage));\\n    //approval\\n    approval(tok, dydx, amount);\\n    Info[] memory infos = new Info[](1);\\n    infos[0] = Info(address(this), 0);\\n\\n    AssetAmount memory amt = AssetAmount(\\n      true,\\n      AssetDenomination.Wei,\\n      AssetReference.Delta,\\n      amount\\n    );\\n    ActionArgs memory act;\\n    act.actionType = ActionType.Deposit;\\n    act.accountId = 0;\\n    act.amount = amt;\\n    act.primaryMarketId = dToken[tok];\\n    act.otherAddress = address(this);\\n\\n    ActionArgs[] memory args = new ActionArgs[](1);\\n    args[0] = act;\\n\\n    DyDx(dydx).operate(infos, args);\\n\\n    emit SupplyDydx(address(this), tok, amount);\\n  }\\n\\n  /**\\n   * @notice _supplyAave function supply the fund of token to AAVe protocol for yield generation.\\n   * @dev this function should be called by AFiStorage only\\n   * @param tok address of the token to consider for supply.\\n   * @param amount i.e calculated amount of token to invest.\\n   */\\n  function _supplyAave(address tok, uint amount) external override {\\n    onlySpecificAddress(address(aFiStorage));\\n    //approval\\n    approval(tok, address(_lendingPool()), amount);\\n    _lendingPool().deposit(tok, amount, address(this), 0);\\n    emit SupplyAave(address(this), tok, amount);\\n  }\\n\\n  /**\\n   * @notice _supplyCompound function supply the fund of token to Compound protocol for yield generation.\\n   * @dev this function should be called by AFiStorage only\\n   * @param tok address of the token to consider for supply.\\n   * @param amount i.e calculated amount of token to invest.\\n   */\\n  function _supplyCompound(address tok, uint amount) external override {\\n    onlySpecificAddress(address(aFiStorage));\\n    //approval\\n    approval(tok, compound[tok], amount);\\n    require(Compound(compound[tok]).mint(amount) == 0, \\\"AB18\\\");\\n    emit SupplyCompound(address(this), tok, amount);\\n  }\\n\\n  function approval(address tok, address sender, uint256 amount) internal {\\n    uint256 allowance = IERC20(tok).allowance(address(this), sender);\\n    if (allowance \\u003c amount) {\\n      IERC20(tok).safeIncreaseAllowance(sender, (amount - allowance));\\n    }\\n  }\\n\\n  /**\\n   * @notice _withdrawAave function withdraws the fund of token from AAve protocol.\\n   * @param tok address of the token to consider to withdraw.\\n   * @param amount i.e calculated amount of token to withdraw.\\n   */\\n  function _withdrawAave(address tok, uint amount) external override {\\n    onlySpecificAddress(address(aFiStorage));\\n    _lendingPool().withdraw(tok, amount, address(this));\\n    emit WithdrawAave(address(this), tok, amount);\\n  }\\n\\n  /**\\n   * @notice _withdrawCompound function withdraws the fund of token from Compound protocol.\\n   * @param tok address of the token to consider to withdraw.\\n   * @param amount i.e calculated amount of token to withdraw.\\n   */\\n  function _withdrawCompound(address tok, uint amount) external override {\\n    onlySpecificAddress(address(aFiStorage));\\n    require(aFiStorage.balanceCompoundInToken(tok, address(this)) \\u003e= amount, \\\"AB19\\\");\\n    require(Compound(compound[tok]).redeemUnderlying(amount) == 0, \\\"AB20\\\");\\n    emit WithdrawCompound(address(this), tok, amount);\\n  }\\n\\n  /**\\n   * @notice _withdrawDydx function withdraws the fund of token from DYDX protocol.\\n   * @param tok address of the token to consider to withdraw.\\n   * @param amount i.e calculated amount of token to withdraw.\\n   */\\n  function _withdrawDydx(address tok, uint amount) external override {\\n    onlySpecificAddress(address(aFiStorage));\\n    Info[] memory infos = new Info[](1);\\n    infos[0] = Info(address(this), 0);\\n\\n    AssetAmount memory amt = AssetAmount(\\n      false,\\n      AssetDenomination.Wei,\\n      AssetReference.Delta,\\n      amount\\n    );\\n    ActionArgs memory act;\\n    act.actionType = ActionType.Withdraw;\\n    act.accountId = 0;\\n    act.amount = amt;\\n    act.primaryMarketId = dToken[tok];\\n    act.otherAddress = address(this);\\n\\n    ActionArgs[] memory args = new ActionArgs[](1);\\n    args[0] = act;\\n\\n    DyDx(dydx).operate(infos, args);\\n    emit WithdrawDydx(address(this), tok, amount);\\n  }\\n\\n  /**\\n   * @notice updatePoolData function updates the pool data in the process of rebalance.\\n   * @param data encoded data to update.\\n   */\\n  function updatePoolData(bytes memory data) external override nonReentrant {\\n    require(msg.sender == aFiManager || msg.sender == owner(), \\\"AB30\\\");\\n    setInitialValues(data);\\n    emit UpdatePoolData(address(this), data);\\n  }\\n\\n  /**\\n   * @notice Returns the array of underlying tokens.\\n   * @return uTokensArray Array of underlying tokens.\\n   */\\n  function getUTokens() external view override returns (address[] memory uTokensArray) {\\n    return uTokens;\\n  }\\n\\n  function getProportionsAndRebalTime()\\n    external\\n    view\\n    override\\n    returns (uint[] memory, uint[] memory, uint)\\n  {\\n    return (uTokenProportions, defaultProportion, lastRebalTime);\\n  }\\n\\n  function totalSupply() external view override returns (uint) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) external view returns (uint) {\\n    return _balances[account];\\n  }\\n\\n  function getPriceOracle(address tok) external view override returns (address) {\\n    return priceOracles[tok];\\n  }\\n\\n  /**\\n   * @notice setInitialValues function initialises the pool and afi product data\\n   * @param data  i.e encoded data that contains pool, product data.\\n   */\\n  function setInitialValues(bytes memory data) internal {\\n    IAFi.PoolsData memory pooldata = abi.decode(data, (IAFi.PoolsData));\\n    IAFi.UnderlyingData memory uData = abi.decode(\\n      pooldata.underlyingData,\\n      (IAFi.UnderlyingData)\\n    );\\n\\n    address tok;\\n    uint uLen = uData._underlyingTokens.length;\\n    for (uint i = 0; i \\u003c uLen; i++) {\\n      tok = uData._underlyingTokens[i];\\n      uTokens.push(uData._underlyingTokens[i]);\\n      uTokenProportions.push(pooldata._underlyingTokensProportion[i]);\\n      aaveToken[tok] = pooldata._aaveToken[i];\\n      compound[tok] = pooldata._compound[i];\\n      dToken[tok] = pooldata._dToken[i];\\n      priceOracles[tok] = pooldata._priceOracles[i];\\n      underlyingUniPoolToken[tok] = uData._underlyingUniPoolToken[i];\\n      updateUniTok(tok, uData._underlyingUniPoolToken[i], uData._underlyingUniPool[i]);\\n      updateUniTok(tok, WETH, uData._underlyingPoolWithWETH[i]);\\n      aFiStorage.afiSync(\\n        address(this),\\n        tok,\\n        aaveToken[tok],\\n        dToken[tok],\\n        compound[tok]\\n      );\\n    }\\n\\n    emit SetInitialValues(address(this));\\n  }\\n\\n  /**\\n   * @notice updateUnderlyingData Function updates the underlying tokens, token proportion and default proportion after rebalance\\n   * @dev it should be called by the AFiManager contract only.\\n   * @param _uTokens  i.e array of new underlying tokens after rebalance.\\n   * @param _uTokenProportion i.e array of new token proportion.\\n   * @param _defaultProportion i.e array of new default proportion\\n   */\\n  function updateUnderlyingData(\\n    address[] memory _uTokens,\\n    uint256[] memory _uTokenProportion,\\n    uint256[] memory _defaultProportion\\n  ) external override {\\n    onlySpecificAddress(aFiManager);\\n    uTokens = _uTokens;\\n    uTokenProportions = _uTokenProportion;\\n    defaultProportion = _defaultProportion;\\n  }\\n\\n  /**\\n   * @notice updateOracleData Function updates the oracle address of the new underlying token\\n   * @dev it should be called by the AFiManager contract only.\\n   * @param _uToken  i.e the new underlying token.\\n   * @param _oracleAddress i.e the address of the oracle contract.\\n   */\\n  function updateOracleData(\\n    address _uToken,\\n    address _oracleAddress,\\n    address _underlyingMidToken,\\n    address uniPool\\n  ) external override {\\n    require(msg.sender == owner() || msg.sender == aFiManager, \\\"AB21\\\");\\n    underlyingUniPoolToken[_uToken] = _underlyingMidToken;\\n    updateUniTok(_uToken, _underlyingMidToken, uniPool);\\n    priceOracles[_uToken] = _oracleAddress;\\n  }\\n\\n  function upDateInputTokPool(bytes memory uniData) external override {\\n    require(msg.sender == owner() || msg.sender == aFiManager, \\\"AB22\\\");\\n    IAFi.UnderlyingData memory pooldata = abi.decode(uniData, (IAFi.UnderlyingData));\\n    uint iLen = pooldata.stablePools.length;\\n    uint pLen = pooldata._underlyingUniPoolToken.length;\\n    unchecked {\\n      for (uint i = 0; i \\u003c iLen; i++) {\\n        for (uint j = 0; j \\u003c pLen; j++) {\\n          updateUniTok(\\n            token[i],\\n            pooldata._underlyingUniPoolToken[j],\\n            pooldata.stablePools[i]._pools[j]\\n          );\\n        }\\n        updateUniTok(token[i], WETH, pooldata.stableWethPool[i]);\\n      }\\n    }\\n  }\\n\\n  function updateUniTok(address tok, address midTok, address uniPool) internal {\\n    tokenUniPool[tok][midTok] = uniPool;\\n  }\\n\\n  /// @notice Retrieves Aave LendingPool address\\n  /// @return A reference to LendingPool interface\\n  function _lendingPool() public view returns (ILendingPool) {\\n    return ILendingPool(IPoolAddressesProvider(poolAddressProvider).getPool());\\n  }\\n\\n  /**\\n   * @notice updateShares Function locks/unlocks afi token\\n   * @dev it should be called by the time lock contract only.\\n   * @param user address to lock the afi token from.\\n   * @param amount i.e. amount to be locked/unlocked.\\n   * @param lock i.e. status if amount should be locked or unlocked.\\n   */\\n  function stakeShares(address user, uint256 amount, bool lock) external {\\n    require(user != tLContract, \\\"AB23\\\");\\n    require(msg.sender == tLContract, \\\"AB25\\\");\\n    if (lock) {\\n      require((_balances[user]).sub(userLockedAmount[user]) \\u003e= amount, \\\"AB24\\\");\\n      userLockedAmount[user] = userLockedAmount[user].add(amount);\\n    } else {\\n      require(amount \\u003c= userLockedAmount[user], \\\"AB26\\\");\\n      userLockedAmount[user] = userLockedAmount[user].sub(amount);\\n    }\\n    emit UpdateShares(user, amount, lock);\\n  }\\n\\n  /**\\n   * @notice updateTimeLockContract Function updates timelock contract address.\\n   * @param newTL address of the timelock contract.\\n   */\\n  function updateTimeLockContract(address newTL) external onlyOwner {\\n    require(newTL != address(0), \\\"AB27\\\");\\n    tLContract = newTL;\\n    emit UpdateTimeLockContract(address(this), newTL);\\n  }\\n\\n  function getTypeOfProduct() external view override returns (uint256) {\\n    return typeOfProduct;\\n  }\\n\\n  function emergencyWithdraw(address tok, address wallet) external onlyOwner {\\n    (, bool present) = uTokens.indexOf(tok);\\n    require(!present, \\\"AB32\\\");\\n    transfers(wallet, IERC20(tok).balanceOf(address(this)), tok);\\n  }\\n}\"},\"AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"},\"ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\n// Reference: https://github.com/cryptofinlabs/cryptofin-solidity/blob/master/contracts/array-utils/AddressArrayUtils.sol\\nlibrary ArrayUtils {\\n  /**\\n   * Deletes address at index and fills the spot with the last address.\\n   * Order is preserved.\\n   */\\n  // solhint-disable-next-line var-name-mixedcase\\n  function sPopAddress(address[] storage A, uint index) internal {\\n    uint length = A.length;\\n    if (index \\u003e= length) {\\n      revert(\\\"Error: index out of bounds\\\");\\n    }\\n\\n    for (uint i = index; i \\u003c length - 1; i++) {\\n      A[i] = A[i + 1];\\n    }\\n    A.pop();\\n  }\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function sPopUint256(uint[] storage A, uint index) internal {\\n    uint length = A.length;\\n    if (index \\u003e= length) {\\n      revert(\\\"Error: index out of bounds\\\");\\n    }\\n\\n    for (uint i = index; i \\u003c length - 1; i++) {\\n      A[i] = A[i + 1];\\n    }\\n    A.pop();\\n  }\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  function sumOfMArrays(\\n    uint[] memory A,\\n    uint[] memory B\\n  ) internal pure returns (uint[] memory sum) {\\n    sum = new uint[](A.length);\\n    for (uint i = 0; i \\u003c A.length; i++) {\\n      sum[i] = A[i] + B[i];\\n    }\\n    return sum;\\n  }\\n\\n  /**\\n   * Finds the index of the first occurrence of the given element.\\n   * @param A The input array to search\\n   * @param a The value to find\\n   * @return Returns (index and isIn) for the first occurrence starting from index 0\\n   */\\n  function indexOf(address[] memory A, address a) internal pure returns (uint, bool) {\\n    uint length = A.length;\\n    for (uint i = 0; i \\u003c length; i++) {\\n      if (A[i] == a) {\\n        return (i, true);\\n      }\\n    }\\n    return (type(uint).max, false);\\n  }\\n\\n  /**\\n   * Returns true if the value is present in the list. Uses indexOf internally.\\n   * @param A The input array to search\\n   * @param a The value to find\\n   * @return Returns isIn for the first occurrence starting from index 0\\n   */\\n  function contains(address[] memory A, address a) internal pure returns (bool) {\\n    (, bool isIn) = indexOf(A, a);\\n    return isIn;\\n  }\\n\\n  /**\\n   * Returns true if there are 2 elements that are the same in an array\\n   * @param A The input array to search\\n   * @return Returns boolean for the first occurrence of a duplicate\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    require(A.length \\u003e 0, \\\"A is empty\\\");\\n\\n    for (uint i = 0; i \\u003c A.length - 1; i++) {\\n      address current = A[i];\\n      for (uint j = i + 1; j \\u003c A.length; j++) {\\n        if (current == A[j]) {\\n          return true;\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @param A The input array to search\\n   * @param a The address to remove\\n   * @return Returns the array with the object removed.\\n   */\\n  function remove(\\n    address[] memory A,\\n    address a\\n  ) internal pure returns (address[] memory) {\\n    (uint index, bool isIn) = indexOf(A, a);\\n    if (!isIn) {\\n      revert(\\\"Address not in array.\\\");\\n    } else {\\n      (address[] memory _A, ) = pop(A, index);\\n      return _A;\\n    }\\n  }\\n\\n  /**\\n   * @param A The input array to search\\n   * @param a The address to remove\\n   */\\n  function removeStorage(address[] storage A, address a) internal {\\n    (uint index, bool isIn) = indexOf(A, a);\\n    if (!isIn) {\\n      revert(\\\"Address not in array.\\\");\\n    } else {\\n      uint lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n      if (index != lastIndex) {\\n        A[index] = A[lastIndex];\\n      }\\n      A.pop();\\n    }\\n  }\\n\\n  /**\\n   * Removes specified index from array\\n   * @param A The input array to search\\n   * @param index The index to remove\\n   * @return Returns the new array and the removed entry\\n   */\\n  function pop(\\n    address[] memory A,\\n    uint index\\n  ) internal pure returns (address[] memory, address) {\\n    uint length = A.length;\\n    require(index \\u003c A.length, \\\"Index must be \\u003c A length\\\");\\n    address[] memory newAddresses = new address[](length - 1);\\n    for (uint i = 0; i \\u003c index; i++) {\\n      newAddresses[i] = A[i];\\n    }\\n    for (uint j = index + 1; j \\u003c length; j++) {\\n      newAddresses[j - 1] = A[j];\\n    }\\n    return (newAddresses, A[index]);\\n  }\\n\\n  /**\\n   * Returns the combination of the two arrays\\n   * @param A The first array\\n   * @param B The second array\\n   * @return Returns A extended by B\\n   */\\n  function extend(\\n    address[] memory A,\\n    address[] memory B\\n  ) internal pure returns (address[] memory) {\\n    uint aLength = A.length;\\n    uint bLength = B.length;\\n    address[] memory newAddresses = new address[](aLength + bLength);\\n    for (uint i = 0; i \\u003c aLength; i++) {\\n      newAddresses[i] = A[i];\\n    }\\n    for (uint j = 0; j \\u003c bLength; j++) {\\n      newAddresses[aLength + j] = B[j];\\n    }\\n    return newAddresses;\\n  }\\n\\n  /**\\n   * Validate that address and uint array lengths match. Validate address array is not empty\\n   * and contains no duplicate elements.\\n   *\\n   * @param A         Array of addresses\\n   * @param B         Array of uint\\n   */\\n  function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\\n    require(A.length == B.length, \\\"Array length mismatch\\\");\\n    _validateLengthAndUniqueness(A);\\n  }\\n\\n  /**\\n   * Validate that address and bool array lengths match. Validate address array is not empty\\n   * and contains no duplicate elements.\\n   *\\n   * @param A         Array of addresses\\n   * @param B         Array of bool\\n   */\\n  function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\\n    require(A.length == B.length, \\\"Array length mismatch\\\");\\n    _validateLengthAndUniqueness(A);\\n  }\\n\\n  /**\\n   * Validate that address and string array lengths match. Validate address array is not empty\\n   * and contains no duplicate elements.\\n   *\\n   * @param A         Array of addresses\\n   * @param B         Array of strings\\n   */\\n  function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\\n    require(A.length == B.length, \\\"Array length mismatch\\\");\\n    _validateLengthAndUniqueness(A);\\n  }\\n\\n  /**\\n   * Validate that address array lengths match, and calling address array are not empty\\n   * and contain no duplicate elements.\\n   *\\n   * @param A         Array of addresses\\n   * @param B         Array of addresses\\n   */\\n  function validatePairsWithArray(\\n    address[] memory A,\\n    address[] memory B\\n  ) internal pure {\\n    require(A.length == B.length, \\\"Array length mismatch\\\");\\n    _validateLengthAndUniqueness(A);\\n  }\\n\\n  /**\\n   * Validate that address and bytes array lengths match. Validate address array is not empty\\n   * and contains no duplicate elements.\\n   *\\n   * @param A         Array of addresses\\n   * @param B         Array of bytes\\n   */\\n  function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\\n    require(A.length == B.length, \\\"Array length mismatch\\\");\\n    _validateLengthAndUniqueness(A);\\n  }\\n\\n  /**\\n   * Validate address array is not empty and contains no duplicate elements.\\n   *\\n   * @param A          Array of addresses\\n   */\\n  function _validateLengthAndUniqueness(address[] memory A) internal pure {\\n    require(A.length \\u003e 0, \\\"Array length must be \\u003e 0\\\");\\n    require(!hasDuplicate(A), \\\"Cannot duplicate addresses\\\");\\n  }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 =\\u003e no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 =\\u003e no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 =\\u003e minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\"},\"draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\n     * given ``owner``\\u0027s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"IAFi.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\nimport {IERC20Extended as IERC20} from \\\"./IERC20Extended.sol\\\";\\nimport \\\"./IAFiStorage.sol\\\";\\nimport \\\"./IPassiveRebal.sol\\\";\\n\\n/**\\n * @title PassiveRebal.\\n * @notice Interface of the Passive Rebalance contract.\\n */\\ninterface PassiveRebal {\\n\\n  function applyRebalForProportions(\\n    address _aFiContract,\\n    address _aFiManager,\\n    uint _strategyNumber,\\n    address[] memory _tokens\\n  ) external returns (uint[] memory proportions);\\n\\n  function getPauseStatus() external returns (bool);\\n\\n  function getRebalPeriod(address aFiContract) external returns (uint);\\n\\n  function updateRebalPeriod(address aFiContract, uint _newRebalPeiod) external;\\n\\n  function setPassiveRebalancedStatus(address aFiContract, bool status) external;\\n\\n  function isAFiPassiveRebalanced(\\n    address aFiContract\\n  ) external returns (bool _isPassiveRebalanced);\\n\\n  function getRebalStrategyNumber(address aFiContract) external returns (uint);\\n\\n  function updateRebalStrategyNumber(\\n    address aFiContract,\\n    uint updatedStrategy\\n  ) external;\\n}\\n\\ninterface IAFiManager {\\n  function _distributeProfitShare(\\n    address aFiStorage,\\n    address aFiContract,\\n    uint profit,\\n    address oToken,\\n    uint256 depositNAV,\\n    uint256 redemptionNAV\\n  ) external returns (uint totalProfitShare);\\n\\n  function updateUTokenProportion(address aFiContract,address aFiStorage) external returns(uint256[] memory);\\n\\n  function intializeData(address aFiContract,address[] memory underlyingTokens,uint[] memory underlyingProportion) external;\\n\\n  function uTokenslippage(address aFiContract, address uToken) external view returns(uint uTokenSlippage);\\n\\n}\\n\\n/**\\n * @title IAFi.\\n * @notice Interface of the AToken.\\n */\\ninterface IAFi {\\n\\n  struct StablePools{\\n    address[] _pools;\\n  }\\n\\n  struct UnderlyingData{\\n    address[] _underlyingTokens;\\n    address[] _underlyingUniPoolToken;\\n    address[] _underlyingUniPool;\\n    address[] _underlyingPoolWithWETH;\\n    StablePools[] stablePools;\\n    address[] stableWethPool;\\n  }\\n\\n  struct PoolsData {\\n    address[] _depositStableCoin;\\n    address[] _depositCoinOracle;\\n    bytes underlyingData;                                                                             \\n    address _apr;\\n    address[] _compound;\\n    address[] _aaveToken;\\n    address[] _priceOracles;\\n    uint[] _underlyingTokensProportion;\\n    uint[] _dToken;\\n    uint _typeOfProduct;\\n  }\\n\\n  /**\\n   * @param account Address of the account that paused the contract.\\n   * @param isDeposit True if we want to pause deposit otherwise false if want to pause withdraw.\\n   */\\n  event Paused(address account,bool isDeposit);\\n  /**\\n   * @param account Address of the account that unpaused the contract.\\n   * @param isDeposit True if we want to unpause deposit otherwise false if want to unpause withdraw.\\n   */\\n  event Unpaused(address account,bool isDeposit);\\n\\n  /**\\n   * @notice Function to initialize the data, owner and afi token related data.\\n   * @dev the function should be called once only by factory\\n   * @param newOwner indicates the owner of the created afi product.\\n   * @param _name indicates the name of the afi Token\\n   * @param _symbol indicates symbol of the the afi Token.\\n   * @param data indicates the encoded data that follows the PoolsData struct format.\\n   * @param _isActiveRebalanced indicates the active rebalance status of the afi contract.\\n   * @param _aFiStorage indicates the afi storage contract address.\\n   */\\n  function initialize(\\n    address newOwner,\\n    string memory _name,\\n    string memory _symbol,\\n    bytes memory data,\\n    bool _isActiveRebalanced,\\n    IAFiStorage _aFiStorage\\n  ) external;\\n\\n  /**\\n   * @notice Function to initialize the platform related data.\\n   * @dev  the function should be called once only by factory\\n   * @param _teamWallets indicates the array of the wallets to share the profit and confirm active rebalance txn.\\n   * @param _rebalContract indicates passive rebal strategy contract address.\\n   * @param _isPassiveRebalanced indicates the passive rebalance status of the afi contract.\\n   * @param _aFiManager indicates the afi manager contract address.\\n   * @param _aarnaEngine indicates the engine contract.\\n   */\\n  function initializePlatformData(\\n    address[] memory _teamWallets,\\n    IPassiveRebal _rebalContract,\\n    bool _isPassiveRebalanced,\\n    address _aFiManager,\\n    address _aarnaEngine\\n  ) external;\\n\\n  /**\\n   * @notice Function to initialize accepted tokens in deposit and withdraw functions.\\n   * @dev  the function should be called once only by factory\\n   * @param iToken indicates the array of the accepted token addressess.\\n   */\\n  function initializeToken(\\n    address[] memory iToken,\\n    address[] memory iTokenOracel,\\n    bytes memory poolData\\n  ) external;\\n\\n  /**\\n   * @notice Returns the array of underlying tokens.\\n   * @return uTokensArray Array of underlying tokens.\\n   */\\n  function getUTokens() external view returns (address[] memory uTokensArray);\\n  function swapViAFiStorage(\\n    address from,\\n    address to,\\n    uint amount,\\n    uint deadline,\\n    address midTok,\\n    uint[] memory slippageFactor,\\n    uint8 counter\\n  ) external returns(uint256);\\n  \\n  /**\\n   * @notice Returns the paused status of the contract.\\n   */\\n  function isPaused() external view returns (bool,bool);\\n  function getProportionsAndRebalTime() external view returns (uint[] memory, uint[] memory, uint256);\\n  /**\\n   * @notice Updates the pool data during Active Rebalance.\\n   * @param data that follows PoolsData format indicates the data of the token being rebalanced in Active Rebalance.\\n   */\\n  function updatePoolData(bytes memory data) external;\\n  function sendProfitOrFeeToManager(address wallet, uint profitShare, address oToken) external;\\n  function totalSupply() external view returns (uint);\\n  function updateUnderlyingData(address[] memory _uTokens,uint256[] memory _uTokenProportion,uint256[] memory _defaultProportion)external;\\n  function _supplyDydx(address tok, uint amount) external;\\n  function _supplyAave(address tok, uint amount) external;\\n  function _supplyCompound(address tok, uint amount) external;\\n  function getRebalContract() external view returns(address);\\n  function getPriceOracle(address tok) external view returns(address);\\n  function updateOracleData(address _uTokens, address _oracleAddress, address _underlyingMidToken, address uniPool)external;\\n  function _withdrawAave(address tok, uint amount) external;\\n  function _withdrawDydx(address tok, uint amount) external;\\n  function _withdrawCompound(address tok, uint amount) external;\\n  function getTVL() external view returns(uint256);\\n  function upDateInputTokPool(bytes memory uniData) external;\\n  function getTypeOfProduct() external view returns(uint256);\\n  function updateuniPool(address tok, address midTok) external;\\n  function getMidToken(address tok) external view returns (address);\\n  function getPool(\\n    address tok,\\n    address midTok\\n  ) external view returns (address);\\n}\"},\"IAFiStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\n/**\\n * @title IAFiStorage.\\n * @notice Interface of the AFiStorage.\\n */\\n\\ninterface IIEarnManager {\\n  function recommend(\\n    address _token,\\n    address afiBase,\\n    address afiStorage\\n  ) external view returns (string memory choice, uint capr, uint aapr, uint dapr);\\n}\\n\\ninterface IAFiStorage {\\n  /**\\n   * @notice Struct representing investor details.\\n   * @param isPresent Boolean indicating whether an investor exists.\\n   * @param uTokenBalance Investor underlying token balance.\\n   * @param investedAmount Amount of StableCoin invested in the underlying token\\n   */\\n  struct Investor {\\n    bool isPresent;\\n    uint depositNAV;\\n    uint redemptionNAV;\\n  }\\n\\n  /**\\n   * @notice Struct representing TeamWallet details.\\n   * @param isPresent Boolean indicating whether a wallet exists.\\n   * @param isActive Boolean indicating whether a wallet is active.\\n   * @param walletAddress Wallet address.\\n   */\\n  struct TeamWallet {\\n    bool isPresent;\\n    bool isActive;\\n    address walletAddress;\\n  }\\n\\n  /**\\n   * @notice enum representing Lending Protocols.\\n   * @param NONE represents NO protocol.\\n   * @param DYDX represents DYDX protocol.\\n   * @param COMPOUND represents COMPOUND protocol.\\n   * @param AAVE represents AAVE protocol.\\n   */\\n  enum Lender {\\n    NONE,\\n    DYDX,\\n    COMPOUND,\\n    AAVE\\n  }\\n\\n  /**\\n   * @notice Struct representing Rebalance details.\\n   * @param scenario Scenario can be either of 0, 1 or 2.\\n   * @param rebalancedUToken Address of the underlying token that is rebalanced.\\n   * @param rebalancedToUTokens Array of addresses of underlying tokens to which the uToken has been rebalanced.\\n   */\\n  struct RebalanceDetails {\\n    uint8 scenario;\\n    address rebalancedUToken;\\n    address[] rebalancedToUTokens;\\n  }\\n\\n  /**\\n   * @param walletAddress Address of the wallet.\\n   * @param isActive Boolean indicating wallet active status.\\n   */\\n  event TeamWalletActive(address indexed walletAddress, bool isActive);\\n\\n  /**\\n   * @param walletAddress Address of the wallet.\\n   * @param isActive Boolean indicating wallet active status.\\n   */\\n  event TeamWalletAdd(address indexed walletAddress, bool isActive);\\n\\n  /**\\n   * @notice Returns the team wallet details.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param _wallet Wallet address\\n   * @return isPresent Boolean indicating the present status of the wallet.\\n   * @return isActive Boolean indicating whether to set the wallet to either active/inactive.\\n   */\\n  function getTeamWalletDetails(\\n    address aFiContract,\\n    address _wallet\\n  ) external view returns (bool isPresent, bool isActive);\\n\\n  /**\\n   * @notice To add a new team wallet.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param _wallet Wallet address that has to be added in the `teamWallets` array.\\n   * @param isActive Boolean indicating whether to set the wallet to either active/inactive.\\n   * @param isPresent Boolean indicating the present status of the wallet.\\n   */\\n  function addTeamWallet(\\n    address aFiContract,\\n    address _wallet,\\n    bool isActive,\\n    bool isPresent\\n  ) external;\\n\\n  /**\\n   * @notice Returns the team wallets for an AFi.\\n   * @param aFiContract Address of the AFi contract.\\n   * @return _teamWallets Array of teamWallets.\\n   */\\n  function getTeamWalletsOfAFi(\\n    address aFiContract\\n  ) external view returns (address[] memory _teamWallets);\\n\\n  /**\\n   * @notice Sets the address for team wallets.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param _teamWallets Array of addresses for the team wallets.\\n   */\\n  function setTeamWallets(address aFiContract, address[] memory _teamWallets) external;\\n\\n  /**\\n   * @notice Sets the status for the AFi in the storage contract.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param active status for afiContracts.\\n   */\\n  function setAFiActive(address aFiContract, bool active) external;\\n\\n  /**\\n   * @notice To update rebalance details in the storage\\n   * @param aFiContract Address of the AFi contract.\\n   * @param rbUToken Address of the underlying token that is rebalanced.\\n   * @param rbtoUTokens Array of addresses of underlying tokens to which the uToken has been rebalanced.\\n   * @param _scenario Scenario can be either of 0, 1 or 2.\\n   */\\n  function updateRebalanceDetails(\\n    address aFiContract,\\n    address rbUToken,\\n    address[] memory rbtoUTokens,\\n    uint8 _scenario\\n  ) external;\\n\\n  /**\\n   * @notice Sets Active Rebalance status of an AFi.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param status indicating active rebalance status of the AFi contract.\\n   */\\n  function setActiveRebalancedStatus(address aFiContract, bool status) external;\\n\\n  /**\\n   * @notice gets Active Rebalance status of an AFi.\\n   * @param aFiContract Address of the AFi contract.\\n   * @return _isActiveRebalanced bool indicating active rebalance status of the AFi contract.\\n   */\\n  function isAFiActiveRebalanced(\\n    address aFiContract\\n  ) external view returns (bool _isActiveRebalanced);\\n\\n  function getTotalActiveWallets(address aFiContract) external view returns (uint);\\n\\n  function setAPR(address aFiContract, address _apr) external;\\n\\n  function calcPoolValue(address tok, address afiContract, address midTok) external view returns (uint);\\n\\n  function calculateBalanceOfUnderlying(\\n    address tok,\\n    address afiContract\\n  ) external view returns (uint);\\n\\n  function calculatePoolInUsd(address afiContract) external view returns (uint);\\n\\n  function calcPoolValueSome(\\n    address tok,\\n    address afiContract,\\n    address midTok\\n  ) external view returns (uint);\\n\\n  function afiSync(\\n    address afiContract,\\n    address tok,\\n    address aaveTok,\\n    uint dtoken,\\n    address compTok\\n  ) external;\\n\\n  function getPriceOracle(address tokenIn) external view returns (uint256 priceOracle);\\n  function getAFiInitStatus(address afiContract) external view returns(bool, bool, bool);\\n  function afiContractInitUpdate(address afiContract, uint order) external;\\n  function getMinimumAmountOut(address afiContract, address _tokenIn, uint256 _amountIn, address _tokenOut, address midTok, address uniPool) external view  returns(uint256 priceOracle);\\n  function checkIfUSDC(address afiContract, address tok, address midTok) external view returns (uint256, uint256);\\n  function validateAndGetDecimals(address tok) external  view returns(uint256);\\n  function getStakedStatus(address aFiContract,address uToken) external view  returns(bool);\\n  function rearrange(address aFiContract) external;\\n  function balanceDydx(address tok, address afiContract) external view returns (uint);\\n  function balanceDydxAvailable(address tok) external view returns (uint);\\n  function balanceCompoundInToken(address tok, address afiContract) external view returns (uint);\\n  function balanceCompound(address tok, address afiContract) external view returns (uint);\\n  function balanceAave(address tok, address afiContract) external view returns (uint);\\n  function swapForOtherProduct(address afiContract, uint r, address oToken, uint deadline, uint[] memory slippageFactor) external returns(uint256);\\n  function caculateMinOutForUniswap(address afiContract, address _tokenIn, address _tokenOut, uint256 amt, address middleToken, address uniPool) external view returns(uint256);\\n  function _withdrawAll(address afiContract, address tok) external;\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n  function decimals() external view returns (uint8);\\n}\\n\"},\"ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.8.0;\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(\\n    address asset\\n  ) external view returns (DataTypes.ReserveData memory);\\n}\\n\"},\"ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(\\n    bytes32 indexed id,\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don\\u0027t have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"},\"IPassiveRebal.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity =0.8.0;\\n\\ninterface IPassiveRebal {\\n  function applyRebalForProportions(\\n    address _aFiContract,\\n    address _aFiManager,\\n    address _aFiStorage,\\n    uint _strategyNumber,\\n    address[] memory _tokens\\n  ) external returns (uint[] memory proportions);\\n\\n  function getPauseStatus() external returns (bool);\\n\\n  function getRebalPeriod(address aFiContract) external returns (uint);\\n\\n  function updateRebalPeriod(address aFiContract, uint _newRebalPeiod) external;\\n\\n  function setPassiveRebalancedStatus(address aFiContract, bool status) external;\\n\\n  function isAFiPassiveRebalanced(\\n    address aFiContract\\n  ) external returns (bool _isPassiveRebalanced);\\n\\n  function getRebalStrategyNumber(address aFiContract) external returns (uint);\\n\\n  function updateRebalStrategyNumber(\\n    address aFiContract,\\n    uint updatedStrategy\\n  ) external;\\n}\\n\"},\"ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.7.5;\\npragma abicoder v2;\\n\\n\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\"},\"IUniswapV3Factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n  /// @notice Emitted when the owner of the factory is changed\\n  /// @param oldOwner The owner before the owner was changed\\n  /// @param newOwner The owner after the owner was changed\\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 The first token of the pool by address sort order\\n  /// @param token1 The second token of the pool by address sort order\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    uint24 indexed fee,\\n    int24 tickSpacing,\\n    address pool\\n  );\\n\\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n  /// @param fee The enabled fee, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n  /// @notice Returns the current owner of the factory\\n  /// @dev Can be changed by the current owner via setOwner\\n  /// @return The address of the factory owner\\n  function owner() external view returns (address);\\n\\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n  /// @return The tick spacing\\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n  /// @param tokenA The contract address of either token0 or token1\\n  /// @param tokenB The contract address of the other token\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @return pool The pool address\\n  function getPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) external view returns (address pool);\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param fee The desired fee for the pool\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n  /// are invalid.\\n  /// @return pool The address of the newly created pool\\n  function createPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) external returns (address pool);\\n\\n  /// @notice Updates the owner of the factory\\n  /// @dev Must be called by the current owner\\n  /// @param _owner The new owner of the factory\\n  function setOwner(address _owner) external;\\n\\n  /// @notice Enables a fee amount with the given tickSpacing\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\\ninterface IUniswapV3Pool {\\n  function observe(\\n    uint32[] calldata secondsAgos\\n  ) external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulativeX128s\\n    );\\n\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n  function fee() external returns(uint24);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"    // SPDX-License-Identifier: MIT\\n    // OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\n    pragma solidity ^0.8.0;\\n\\n    import \\\"./IERC20.sol\\\";\\n    import \\\"./draft-IERC20Permit.sol\\\";\\n    import \\\"./Address.sol\\\";\\n\\n    /**\\n    * @title SafeERC20\\n    * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n    * contract returns false). Tokens that return no value (and instead revert or\\n    * throw on failure) are also supported, non-reverting calls are assumed to be\\n    * successful.\\n    * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n    * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n    */\\n    library SafeERC20 {\\n        using Address for address;\\n\\n        function safeTransfer(\\n            IERC20 token,\\n            address to,\\n            uint256 value\\n        ) internal {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n        }\\n\\n        function safeTransferFrom(\\n            IERC20 token,\\n            address from,\\n            address to,\\n            uint256 value\\n        ) internal {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n        }\\n\\n        /**\\n        * @dev Deprecated. This function has issues similar to the ones found in\\n        * {IERC20-approve}, and its usage is discouraged.\\n        *\\n        * Whenever possible, use {safeIncreaseAllowance} and\\n        * {safeDecreaseAllowance} instead.\\n        */\\n        function safeApprove(\\n            IERC20 token,\\n            address spender,\\n            uint256 value\\n        ) internal {\\n            // safeApprove should only be called when setting an initial allowance,\\n            // or when resetting it to zero. To increase and decrease it, use\\n            // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n            require(\\n                (value == 0) || (token.allowance(address(this), spender) == 0),\\n                \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n            );\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n        }\\n\\n        function safeIncreaseAllowance(\\n            IERC20 token,\\n            address spender,\\n            uint256 value\\n        ) internal {\\n            uint256 newAllowance = token.allowance(address(this), spender) + value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n\\n        function safeDecreaseAllowance(\\n            IERC20 token,\\n            address spender,\\n            uint256 value\\n        ) internal {\\n            unchecked {\\n                uint256 oldAllowance = token.allowance(address(this), spender);\\n                require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n                uint256 newAllowance = oldAllowance - value;\\n                _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n            }\\n        }\\n\\n        function safePermit(\\n            IERC20Permit token,\\n            address owner,\\n            address spender,\\n            uint256 value,\\n            uint256 deadline,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        ) internal {\\n            uint256 nonceBefore = token.nonces(owner);\\n            token.permit(owner, spender, value, deadline, v, r, s);\\n            uint256 nonceAfter = token.nonces(owner);\\n            require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n        }\\n\\n        /**\\n        * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n        * on the return value: the return value is optional (but if data is returned, it must not be false).\\n        * @param token The token targeted by the call.\\n        * @param data The call data (encoded using abi.encode or one of its variants).\\n        */\\n        function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n            // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n            // we\\u0027re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n            // the target address contains contract code and also asserts for success in the low-level call.\\n\\n            bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n            if (returndata.length \\u003e 0) {\\n                // Return data is optional\\n                require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n            }\\n        }\\n    }\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depToken\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"}],\"name\":\"InitializedPlatformData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"}],\"name\":\"InitializedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"SetAFiManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"}],\"name\":\"SetInitialValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sFactor\",\"type\":\"uint256\"}],\"name\":\"SlippageFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SupplyAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SupplyCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SupplyDydx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"UpdatePoolData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"UpdateShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTL\",\"type\":\"address\"}],\"name\":\"UpdateTimeLockContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawnToken\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawDydx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uTokenToRemove\",\"type\":\"address\"}],\"name\":\"WithdrawRebalanceAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_supplyAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_supplyCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_supplyDydx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawDydx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aFiManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slippageFactor\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"}],\"name\":\"getMidToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"midTok\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"}],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProportionsAndRebalTime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRebalContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypeOfProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"uTokensArray\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isActiveRebalanced\",\"type\":\"bool\"},{\"internalType\":\"contract IAFiStorage\",\"name\":\"_aFiStorage\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_teamWallets\",\"type\":\"address[]\"},{\"internalType\":\"contract IPassiveRebal\",\"name\":\"_rebalContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPassiveRebalanced\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_aFiManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aarnaEngine\",\"type\":\"address\"}],\"name\":\"initializePlatformData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"iToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"iTokenOracle\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_poolData\",\"type\":\"bytes\"}],\"name\":\"initializeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profitShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"}],\"name\":\"sendProfitOrFeeToManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aFiManager\",\"type\":\"address\"}],\"name\":\"setAFiManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"stakeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"midTok\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"slippageFactor\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"counter\",\"type\":\"uint8\"}],\"name\":\"swapViAFiStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"uniData\",\"type\":\"bytes\"}],\"name\":\"upDateInputTokPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingMidToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPool\",\"type\":\"address\"}],\"name\":\"updateOracleData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updatePoolData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTL\",\"type\":\"address\"}],\"name\":\"updateTimeLockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_uTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_uTokenProportion\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_defaultProportion\",\"type\":\"uint256[]\"}],\"name\":\"updateUnderlyingData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"midTok\",\"type\":\"address\"}],\"name\":\"updateuniPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slippageFactor\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AFiBase", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b48a5d3301355da59848215812903557e1775fb58d2241fd51657f909602016c"}