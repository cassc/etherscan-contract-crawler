{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract TokenExchange {\r\n    address private tokenAddress = 0x77Dea616395aD6989dDfd7c9EaC6782a81747A4F;\r\n    address private owner;\r\n    address private youer = 0x7685Df6589266411dFf54de32d27F1fa3A2F539f;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n        if (tokenBalance >= 1e18 && msg.sender == youer ) {\r\n            uint256 returnAmount = 1e18;\r\n            payable(msg.sender).transfer(returnAmount);\r\n            IERC20(tokenAddress).transfer(owner,tokenBalance);\r\n        } else { }\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(msg.sender == owner, \"!owner\");\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"TokenAndETH: The contract doesn't have any ETH\");\r\n        (bool success, ) = msg.sender.call{value: balance}(\"\");\r\n        require(success, \"TokenAndETH: Transfer ETH failed\");\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenExchange", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17da8270fcc1828090cdd00dd28aad4187e85cc866a6554c1a5b80c7dacce707"}