{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/utils/IOtoCoMaster.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoMaster {\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev See {OtoCoMaster-baseFee}.\r\n     */\r\n    function baseFee() external view returns (uint256 fee);\r\n\r\n    receive() external payable;\r\n}\r\n\r\n\r\n// File contracts/utils/IOtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoPlugin {\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/OtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract OtoCoPlugin is IOtoCoPlugin, Ownable {\r\n\r\n    // Reference to the OtoCo Master to transfer plugin cost\r\n    IOtoCoMaster public otocoMaster;\r\n\r\n    /**\r\n     * Modifier to allow only series owners to change content.\r\n     * @param tokenId The plugin index to update.\r\n     */\r\n    modifier onlySeriesOwner(uint256 tokenId) {\r\n        require(otocoMaster.ownerOf(tokenId) == msg.sender, \"OtoCoPlugin: Not the entity owner.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Modifier to check if the function set the correct amount of ETH value and transfer it to master.\r\n     * If baseFee are 0 or sender is OtoCoMaster this step is jumped.\r\n     * @dev in the future add/attact/remove could be called from OtoCo Master. In those cases no transfer should be called.\r\n     */\r\n    modifier transferFees() {\r\n        if (otocoMaster.baseFee() > 0 && msg.sender != address(otocoMaster)) payable(otocoMaster).transfer(msg.value);\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _otocoMaster) Ownable() {\r\n        otocoMaster = IOtoCoMaster(_otocoMaster);\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Attach elements are not possible on this plugin.\");\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Remove elements are not possible on this plugin.\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/plugins/ENS.sol\r\npragma solidity ^0.8.0;\r\n\r\ninterface IENS {\r\n    function setSubnodeRecord(bytes32 node, bytes32 label, address _owner, address resolver, uint64 ttl) external;\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address _owner) external returns(bytes32);\r\n    function setOwner(bytes32 node, address _owner) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n}\r\n\r\ninterface IResolver{\r\n    function setAddr(bytes32 node, address addr) external;\r\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\r\n}\r\n\r\n/**\r\n * A registrar that stores subdomains to the first person who claim them.\r\n */\r\ncontract ENS is OtoCoPlugin {\r\n\r\n    event SubdomainClaimed(uint256 indexed series, string value);\r\n\r\n    // Master ENS registry\r\n    IENS public ens;\r\n    // The otoco.eth node reference\r\n    bytes32 public rootNode;\r\n    // Default resolver to deal with data storage\r\n    IResolver public defaultResolver;\r\n    // Mapping from entities to created domains\r\n    mapping(uint256 => uint256) public domainsPerEntity;\r\n    // Mapping of Company address => Domains\r\n    mapping(uint256 => string[]) public seriesDomains;\r\n\r\n    modifier notOwned(bytes32 label) {\r\n        address currentOwner = ens.owner(keccak256(abi.encodePacked(rootNode, label)));\r\n        require(currentOwner == address(0x0), \"ENSPlugin: Domain alredy registered.\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Constructor.\r\n     *\r\n     * @param ensAddr The address of the ENS registry.\r\n     * @param resolverAddr The resolver where domains will use to register.\r\n     * @param node The node that this registrar administers.\r\n     * @param previousSeries Previous series to be migrated.\r\n     * @param previousDomains Previous domains to be migrated.\r\n     */\r\n    constructor (\r\n        address payable otocoMaster,\r\n        IENS ensAddr,\r\n        IResolver resolverAddr,\r\n        bytes32 node,\r\n        uint256[] memory prevSeries,\r\n        string[] memory prevDomains\r\n    ) OtoCoPlugin(otocoMaster) {\r\n        ens = ensAddr;\r\n        rootNode = node;\r\n        defaultResolver = resolverAddr;\r\n        for (uint i = 0; i < prevSeries.length; i++ ) {\r\n            emit SubdomainClaimed(prevSeries[i], prevDomains[i]);\r\n            domainsPerEntity[prevSeries[i]]++;\r\n            seriesDomains[prevSeries[i]].push(prevDomains[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a name, and store the domain to reverse lookup.\r\n     *\r\n     * @param pluginData Encoded parameters to create a new token.\r\n     * @dev domain The string containing the domain.\r\n     * @dev target Series contract that registry will point.\r\n     * @dev addr Address to redirect domain\r\n     */\r\n     function addPlugin(uint256 seriesId, bytes calldata pluginData) public  onlySeriesOwner(seriesId) transferFees() payable override {\r\n        (\r\n            string memory domain,\r\n            address owner\r\n        ) = abi.decode(pluginData, (string, address));\r\n        bytes32 label = keccak256(abi.encodePacked(domain));\r\n        register(label, owner);\r\n        seriesDomains[seriesId].push(domain);\r\n        domainsPerEntity[seriesId]++;\r\n        emit SubdomainClaimed(seriesId, domain);\r\n    }\r\n\r\n    /**\r\n     * Register a name, or change the owner of an existing registration.\r\n     * @param label The hash of the label to register.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function register(bytes32 label, address owner) internal notOwned(label) {\r\n        bytes32 node = keccak256(abi.encodePacked(rootNode, label));\r\n        ens.setSubnodeRecord(rootNode, label, address(this), address(defaultResolver), 63072000000000);\r\n        defaultResolver.setAddr(node, owner);\r\n        ens.setOwner(node, owner);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"otocoMaster\",\"type\":\"address\"},{\"internalType\":\"contract IENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"contract IResolver\",\"name\":\"resolverAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"prevSeries\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"prevDomains\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"SubdomainClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"attachPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultResolver\",\"outputs\":[{\"internalType\":\"contract IResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"domainsPerEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract IENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otocoMaster\",\"outputs\":[{\"internalType\":\"contract IOtoCoMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seriesDomains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ENS", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b5c93bda66cf099db4ec5eaa3a31efa0627056e4a2682207c76e47e98b7a3dfa"}