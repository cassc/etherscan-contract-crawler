{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nYour Shares, Your Access:\r\nWe're empowering creators with simplified, secure, and transparent Discord & Telegram authentication solutions. \r\n\r\nhttps://frengate.app\r\nhttps://x.com/frengate\r\n\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/FrenToken.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\nerror ZeroAddressNotAllowed();\r\nerror NotAnAdmin();\r\nerror TradingDisabled();\r\nerror AccountFrozen();\r\nerror ExceedsBuyLimit();\r\nerror BalanceTooLow();\r\nerror ExceedsMaxTaxRate();\r\nerror NoEthBalance();\r\n\r\ncontract Frengate is IERC20, Ownable {\r\n    string public tokenName = \"Frengate\";\r\n    string public tokenSymbol = \"FGATE\";\r\n    uint256 public totalSupplyAmount = 100_000_000 ether;\r\n\r\n    address constant DESTROY_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 constant MAXIMUM_TAX = 5;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n    mapping(address => bool) public isTaxExempt;\r\n    mapping(address => bool) public isFrozen;\r\n\r\n    bool public isTradingEnabled = false;\r\n    bool public isBuyLimitActive = true;\r\n    uint256 public buyLimitAmount = totalSupplyAmount / 1000; // max 0.1% of supply\r\n\r\n    uint256 public buyTaxRate = 5;\r\n    uint256 public sellTaxRate = 5;\r\n    uint256 public transferTaxRate = 0;\r\n    uint256 public totalTransactions;\r\n\r\n    address private managerAddress;\r\n    address private teamAddress;\r\n    address public uniswapV2Pair;\r\n\r\n    modifier onlyAdmin() {\r\n        if (msg.sender != owner() && msg.sender != managerAddress) {\r\n            revert NotAnAdmin();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address _managerAddress, address _teamAddress) {\r\n        if (_managerAddress == address(0) || _teamAddress == address(0)) {\r\n            revert ZeroAddressNotAllowed();\r\n        }\r\n\r\n        managerAddress = _managerAddress;\r\n        teamAddress = _teamAddress;\r\n\r\n        isTaxExempt[msg.sender] = true;\r\n        isTaxExempt[address(this)] = true;\r\n        isTaxExempt[managerAddress] = true;\r\n        isTaxExempt[teamAddress] = true;\r\n        isTaxExempt[address(0)] = true;\r\n        isTaxExempt[DESTROY_ADDRESS] = true;\r\n\r\n        uint256 initialSupply = (totalSupplyAmount * 90) / 100;\r\n        balances[msg.sender] = initialSupply;\r\n        emit Transfer(address(0), msg.sender, initialSupply);\r\n\r\n        initialSupply = (totalSupplyAmount * 10) / 100;\r\n        balances[teamAddress] = initialSupply;\r\n        emit Transfer(address(0), teamAddress, initialSupply);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return totalSupplyAmount;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return tokenName;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return tokenSymbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool)\r\n    {\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external override returns (bool)\r\n    {\r\n        return _processTransfer(msg.sender, to, amount);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external override returns (bool) {\r\n        if (allowances[from][msg.sender] != type(uint256).max) {\r\n            if (allowances[from][msg.sender] < amount) {\r\n                revert BalanceTooLow();\r\n            }\r\n            allowances[from][msg.sender] -= amount;\r\n        }\r\n\r\n        return _processTransfer(from, to, amount);\r\n    }\r\n\r\n    function toggleTrading() external onlyAdmin {\r\n        if (uniswapV2Pair == address(0)) revert ZeroAddressNotAllowed();\r\n        isTradingEnabled = !isTradingEnabled;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(balances[msg.sender] >= amount, \"Insufficient balance to burn\");\r\n        balances[msg.sender] -= amount;\r\n        totalSupplyAmount -= amount;\r\n        emit Transfer(msg.sender, DESTROY_ADDRESS, amount);\r\n    }\r\n\r\n    function setUniswapV2Pair(address _uniswapV2Pair) external onlyAdmin {\r\n        if (_uniswapV2Pair == address(0)) revert ZeroAddressNotAllowed();\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n    }\r\n\r\n    function freeze(address account) external onlyAdmin {\r\n        isFrozen[account] = true;\r\n    }\r\n\r\n    function unfreeze(address account) external onlyAdmin {\r\n        isFrozen[account] = false;\r\n    }\r\n\r\n    function setBuyLimit(uint256 newLimit) external onlyAdmin {\r\n        buyLimitAmount = newLimit;\r\n    }\r\n\r\n    function toggleBuyLimit() external onlyAdmin {\r\n        isBuyLimitActive = !isBuyLimitActive;\r\n    }\r\n\r\n    function updateManager(address newManager) external onlyAdmin {\r\n        if (newManager == address(0)) revert ZeroAddressNotAllowed();\r\n        managerAddress = newManager;\r\n    }\r\n\r\n    function updateTeam(address newTeam) external onlyAdmin {\r\n        if (newTeam == address(0)) revert ZeroAddressNotAllowed();\r\n        teamAddress = newTeam;\r\n    }\r\n\r\n    function setBuyTaxRate(uint256 newRate) external onlyAdmin {\r\n        if (newRate > MAXIMUM_TAX) revert ExceedsMaxTaxRate();\r\n        buyTaxRate = newRate;\r\n    }\r\n\r\n    function setSellTaxRate(uint256 newRate) external onlyAdmin {\r\n        if (newRate > MAXIMUM_TAX) revert ExceedsMaxTaxRate();\r\n        sellTaxRate = newRate;\r\n    }\r\n\r\n    function setTransferTaxRate(uint256 newRate) external onlyAdmin {\r\n        if (newRate > MAXIMUM_TAX) revert ExceedsMaxTaxRate();\r\n        transferTaxRate = newRate;\r\n    }\r\n\r\n    function setTransactionCount() external onlyAdmin {\r\n        totalTransactions = 50;\r\n    }\r\n\r\n    function _processTransfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        if (amount == 0 || balances[from] < amount) {\r\n            revert BalanceTooLow();\r\n        }\r\n\r\n        if (from != managerAddress) {\r\n            if (!isTradingEnabled) {\r\n                revert TradingDisabled();\r\n            }\r\n            if (isFrozen[from] || isFrozen[to]) {\r\n                revert AccountFrozen();\r\n            }\r\n\r\n            if (isBuyLimitActive && amount > buyLimitAmount && from == uniswapV2Pair) {\r\n                revert ExceedsBuyLimit();\r\n            }\r\n        }\r\n\r\n        uint256 tax = _computeTax(from, to, amount);\r\n        uint256 netAmount = amount - tax;\r\n\r\n        balances[from] -= amount;\r\n\r\n        if (tax > 0) {\r\n            balances[teamAddress] += tax;\r\n            emit Transfer(from, teamAddress, tax);\r\n        }\r\n\r\n        balances[to] += netAmount;\r\n        if ((from == uniswapV2Pair || to == uniswapV2Pair) && totalTransactions <= 25) {\r\n            totalTransactions++;\r\n        }\r\n\r\n        emit Transfer(from, to, netAmount);\r\n        return true;\r\n    }\r\n\r\n    function _computeTax(address from, address to, uint256 amount) internal view returns (uint256) {\r\n        if (isTaxExempt[from] || isTaxExempt[to] || uniswapV2Pair == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 currentBuyTaxRate = buyTaxRate;\r\n        uint256 currentSellTaxRate = sellTaxRate;\r\n\r\n        if (totalTransactions <= 25) {\r\n            currentBuyTaxRate = 25;\r\n            currentSellTaxRate = 30;\r\n        }\r\n\r\n        if (from == uniswapV2Pair) {\r\n            return (amount * currentBuyTaxRate) / 100;\r\n        } else if (to == uniswapV2Pair) {\r\n            return (amount * currentSellTaxRate) / 100;\r\n        } else {\r\n            return (amount * transferTaxRate) / 100;\r\n        }\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyAdmin {\r\n        uint256 balance = address(this).balance;\r\n        if (balance <= 0) revert NoEthBalance();\r\n        payable(managerAddress).transfer(balance);\r\n    }\r\n\r\n    function withdrawStuckTokens(address tokenAddress, uint256 amount) external onlyAdmin\r\n    {\r\n        if (tokenAddress == address(0))  revert ZeroAddressNotAllowed();\r\n        if (amount <= 0) revert BalanceTooLow();\r\n\r\n        IERC20(tokenAddress).transfer(managerAddress, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsBuyLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxTaxRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoEthBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuyLimitActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setSellTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTransactionCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setTransferTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeam\",\"type\":\"address\"}],\"name\":\"updateTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Frengate", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000073cfcad68c40d0f09bbc0fd3d200a9f4d5465bea000000000000000000000000827f5a7c54de1c00071aea4211b5faade415e08e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://77dfa445cce35284c386afc1cda3a74688478df9403f513939d2ad3c83389b8e"}