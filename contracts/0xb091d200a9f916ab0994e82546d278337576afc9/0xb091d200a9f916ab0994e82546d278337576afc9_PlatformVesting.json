{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/platform/access_controller/PlatformAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../admin_panel/PlatformAdminPanel.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Abstract contract from which platform contracts with admin function are inherited\\r\\n * @dev Contains the platform admin panel\\r\\n * Contains modifier that checks whether sender is platform admin, use platform admin panel\\r\\n */\\r\\nabstract contract PlatformAccessController {\\r\\n    address public _panel;\\r\\n\\r\\n    error CallerNotAdmin();\\r\\n    error AlreadyInitialized();\\r\\n\\r\\n    function _initiatePlatformAccessController(address adminPanel) internal {\\r\\n        if(address(_panel) != address(0))\\r\\n            revert AlreadyInitialized();\\r\\n\\r\\n        _panel = adminPanel;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that makes function available for platform admins only\\r\\n     */\\r\\n    modifier onlyPlatformAdmin() {\\r\\n        if(!PlatformAdminPanel(_panel).isAdmin(msgSender()))\\r\\n            revert CallerNotAdmin();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _isAdmin() internal view returns (bool) {\\r\\n        return PlatformAdminPanel(_panel).isAdmin(msgSender());\\r\\n    }\\r\\n\\r\\n    function msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/platform/admin_panel/Iplatform_admin_panel/IPlatformAdminPanel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IPlatformAdminPanel {\\r\\n    function isAdmin(address wallet) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/platform/admin_panel/PlatformAdminPanel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\nimport \\\"./Iplatform_admin_panel/IPlatformAdminPanel.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Platform admins holder contract\\r\\n * @notice Used to check accessibility of senders to admin functions in platform contracts\\r\\n */\\r\\ncontract PlatformAdminPanel is IPlatformAdminPanel {\\r\\n    /**\\r\\n     * @notice Emit during root admin set and reset\\r\\n     */\\r\\n    event SetRootAdmin(address indexed wallet);\\r\\n\\r\\n    event InsertAdminList(address[] adminList);\\r\\n\\r\\n    event RemoveAdminList(address[] adminList);\\r\\n\\r\\n    mapping(address => bool) private _adminMap;\\r\\n    address private _rootAdmin;\\r\\n\\r\\n    modifier onlyRootAdmin() {\\r\\n        require(_rootAdmin == msg.sender, \\\"sender is not root admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Specify the root admin, only he has the rights to add and remove admins\\r\\n     */\\r\\n    constructor(address rootAdminWallet) {\\r\\n        _setRootAdmin(rootAdminWallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Needed to determine if the user has admin rights for platform contracts\\r\\n     */\\r\\n    function isAdmin(address wallet)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return wallet == _rootAdmin || _adminMap[wallet];\\r\\n    }\\r\\n\\r\\n    function rootAdmin() external view returns (address) {\\r\\n        return _rootAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only root admin can call\\r\\n     */\\r\\n    function insertAdminList(address[] calldata adminList)\\r\\n        external\\r\\n        onlyRootAdmin\\r\\n    {\\r\\n        require(0 < adminList.length, \\\"empty admin list\\\");\\r\\n\\r\\n        uint256 index = adminList.length;\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n\\r\\n            _adminMap[adminList[index]] = true;\\r\\n        }\\r\\n\\r\\n        emit InsertAdminList(adminList);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only root admin can call\\r\\n     */\\r\\n    function removeAdminList(address[] calldata adminList)\\r\\n        external\\r\\n        onlyRootAdmin\\r\\n    {\\r\\n        require(0 < adminList.length, \\\"empty admin list\\\");\\r\\n\\r\\n        uint256 index = adminList.length;\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n\\r\\n            _adminMap[adminList[index]] = false;\\r\\n        }\\r\\n\\r\\n        emit RemoveAdminList(adminList);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only root admin can call\\r\\n     */\\r\\n    function setRootAdmin(address rootAdminWallet) external onlyRootAdmin {\\r\\n        _setRootAdmin(rootAdminWallet);\\r\\n    }\\r\\n\\r\\n    function _setRootAdmin(address wallet) private {\\r\\n        require(wallet != address(0), \\\"wallet is zero address\\\");\\r\\n\\r\\n        _rootAdmin = wallet;\\r\\n\\r\\n        emit SetRootAdmin(wallet);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/platform/token/IplatformToken/IPlatformToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IPlatformToken {\\r\\n    function specialTransferFrom(\\r\\n        address from,\\r\\n        uint256 value,\\r\\n        uint256 validAfter,\\r\\n        uint256 validBefore,\\r\\n        bytes32 nonce,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/platform/vesting/IPlatformVesting/IPlatformVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IPlatformVesting {\\r\\n    function amountForClaim(address wallet, uint256 timestampInSeconds) external view returns (uint256 amount);\\r\\n    function claim(address wallet) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/platform/vesting/PlatformVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../access_controller/PlatformAccessController.sol\\\";\\r\\nimport \\\"../token/IplatformToken/IPlatformToken.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IPlatformVesting/IPlatformVesting.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Separate vesting pool, each with separate liquidity, whitelists and parameters\\r\\n */\\r\\ncontract PlatformVesting is PlatformAccessController, ReentrancyGuard, IPlatformVesting {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n\\r\\n    event InsertVestingList(address indexed admin, uint256 vestingCount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emit during vesting vesting liquidity increasing\\r\\n     * Liquidity of the vesting decreases\\r\\n     * @param admin Platform admin which do this action\\r\\n     * @param vestingId The vesting id\\r\\n     * @param amount The PROPC token amount which add to vesting free amount\\r\\n     */\\r\\n    event IncreaseLiquidity(\\r\\n        address indexed admin,\\r\\n        uint256 indexed vestingId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emit during vesting vesting liquidity decreasing process\\r\\n     * Liquidity of the vesting increases\\r\\n     * @param admin Platform admin which do this action\\r\\n     * @param amount The PROPC token amount which rem from vesting free amount\\r\\n     */\\r\\n    event DecreaseLiquidity(\\r\\n        address indexed admin,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event InsertWalletListToVesting(\\r\\n        address indexed admin,\\r\\n        uint256 indexed vestingId,\\r\\n        address[] walletList\\r\\n    );\\r\\n\\r\\n    event RemoveWalletListFromVesting(\\r\\n        address indexed admin,\\r\\n        uint256 indexed vestingId,\\r\\n        address[] walletList\\r\\n    );\\r\\n\\r\\n    event TGESet(\\r\\n        uint256 tgeDate,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event UpdateTokenAddress(\\r\\n        address _address,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event VestingRemoved(\\r\\n        uint256 id,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event VestingAdded(\\r\\n        uint256 amountForUser,\\r\\n        uint256 tgeAmountForUser,\\r\\n        uint256 startTime,\\r\\n        uint256 tickCount,\\r\\n        uint256 tickDuration,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emit when user claim his PROPC from vesting\\r\\n     * @param vestingId The vesting id\\r\\n     * @param wallet The user wallet\\r\\n     * @param amount The PROPC token amount which user save\\r\\n     */\\r\\n    event Claim(\\r\\n        uint256 indexed vestingId,\\r\\n        address indexed wallet,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    struct VestingProperties {\\r\\n        uint256 amountForUser;\\r\\n        uint256 tgeAmountForUser;\\r\\n        uint256 startTime;\\r\\n        uint256 tickCount;\\r\\n        uint256 tickDuration;\\r\\n        uint256 unallocatedAmount;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    struct UserProperties {\\r\\n        bool isActive;\\r\\n        uint256 spentAmount;\\r\\n        uint256 vestingId;\\r\\n        bool tgeClaimed;\\r\\n    }\\r\\n\\r\\n    error InsufficientBalance();\\r\\n    error InvalidTimestamp();\\r\\n    error ZeroAddress();\\r\\n    error ZeroAmount();\\r\\n    error OutOfBounds();\\r\\n    error EmptyArray();\\r\\n    error ArraySizeDoesNotMatch();\\r\\n    error VestingDoesNotExist();\\r\\n    error UserAlreadyActive();\\r\\n    error UserNotActive();\\r\\n    error NoClaimAvailable();\\r\\n    error VestingAlreadyActive();\\r\\n    error StartBeforeNow();\\r\\n    error StartBeforeTGE();\\r\\n    error TicksMissing();\\r\\n    error FatalError(string message);\\r\\n\\r\\n    struct VestingLink {\\r\\n        address user;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    uint256 private constant TOTAL_SHARE = 100_000;\\r\\n\\r\\n    uint256 public tgeStartDate;\\r\\n    address private _token;\\r\\n\\r\\n    uint256 public _vestingCount;\\r\\n    uint256 public totalRemainingAllocatedAmount;\\r\\n\\r\\n    mapping(uint256 => VestingProperties) private _vestingMap;\\r\\n    mapping(uint256 => VestingLink) private _vestingToUser;\\r\\n    mapping(address => UserProperties) private _userMapping;\\r\\n\\r\\n    modifier existingVesting(uint256 vestingId) {\\r\\n        require(vestingId <= _vestingCount, \\\"vesting does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address adminPanel) {\\r\\n        if(adminPanel == address(0))\\r\\n            revert ZeroAddress();\\r\\n        _initiatePlatformAccessController(adminPanel);\\r\\n    }\\r\\n\\r\\n    function setTgeDate(uint256 timestamp) external onlyPlatformAdmin {\\r\\n        if(timestamp < block.timestamp)\\r\\n            revert InvalidTimestamp();\\r\\n        tgeStartDate = timestamp;\\r\\n\\r\\n        emit TGESet(timestamp, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function updateTokenAddress(address token) external onlyPlatformAdmin {\\r\\n        if(token == address(0))\\r\\n            revert ZeroAddress();\\r\\n        _token = token;\\r\\n\\r\\n        emit UpdateTokenAddress(token, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get vesting pool properties list\\r\\n     * vesting.amountForUser   Total PROPC amount which user can claim\\r\\n     * vesting.tgeAmountForUser   PROPC amount which user can claim immediately after the `tgeStartDate`\\r\\n     * vesting.startTime   The moment after that users can start claiming tick by tick\\r\\n     * vesting.tickCount   The number of ticks that must pass to fully unlock funds\\r\\n     * Each tick unlocks a proportional amount\\r\\n     * vesting.tickDuration   Tick duration on seconds\\r\\n     * vesting.unallocatedAmount PROPC that has not yet been assigned to any users\\r\\n     * Grows when users are deleted and liquidity is increased by the admin\\r\\n     * Falls when users are deleted and the liquidity is reduced by the admin\\r\\n     */\\r\\n    function vestingPropertiesList()\\r\\n        external\\r\\n        view\\r\\n        returns (VestingProperties[] memory vestingList)\\r\\n    {\\r\\n        uint256 count = _vestingCount;\\r\\n\\r\\n        vestingList = new VestingProperties[](count);\\r\\n\\r\\n        while (0 < count) {\\r\\n            --count;\\r\\n\\r\\n            vestingList[count] = _vestingMap[count];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get properties list for the user\\r\\n     * @param wallet User wallet\\r\\n     * user.isActive   Indicates whether the user is on the whitelist or not\\r\\n     * Admin can add or remove users.\\r\\n     * user.spentAmount   Amount that was branded by the user or seized as staking fee\\r\\n     */\\r\\n    function userPropertiesList(address wallet)\\r\\n        external\\r\\n        view\\r\\n        returns (UserProperties memory userProperties)\\r\\n    {\\r\\n        userProperties = _userMapping[wallet];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get possible claim amount for user list for vesting pool\\r\\n     * @param wallet User wallet\\r\\n     * @param timestampInSeconds Time at which they plan to make claim\\r\\n     */\\r\\n    function amountForClaim(address wallet, uint256 timestampInSeconds)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        UserProperties storage user = _userMapping[wallet];\\r\\n        VestingProperties storage vesting = _vestingMap[user.vestingId];\\r\\n        amount = _amountForClaim(\\r\\n            vesting,\\r\\n            user,\\r\\n            timestampInSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only platform admin can do\\r\\n     * If 0 < vesting.unallocatedAmount amount will be transfer from sender wallet\\r\\n     */\\r\\n    function insertVestingList(\\r\\n        VestingProperties[] calldata vestingList\\r\\n    ) external onlyPlatformAdmin {\\r\\n        uint256 count = _vestingCount;\\r\\n        if(vestingList.length == 0)\\r\\n            revert EmptyArray();\\r\\n\\r\\n        uint256 liquidity;\\r\\n\\r\\n        uint256 index = vestingList.length;\\r\\n\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n\\r\\n            liquidity += _setVesting(count + index, vestingList[index]);\\r\\n        }\\r\\n\\r\\n        _vestingCount += vestingList.length;\\r\\n\\r\\n        if (liquidity > 0) {\\r\\n            totalRemainingAllocatedAmount += liquidity;\\r\\n            emit InsertVestingList(msgSender(), vestingList.length);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeVesting(uint256 vestingId) external onlyPlatformAdmin {\\r\\n        if(vestingId >= _vestingCount)\\r\\n            revert OutOfBounds();\\r\\n\\r\\n        VestingProperties storage vp = _vestingMap[vestingId];\\r\\n        VestingLink storage vl = _vestingToUser[vestingId];\\r\\n        UserProperties storage up = _userMapping[vl.user];\\r\\n\\r\\n        if(!vp.active)\\r\\n            revert VestingDoesNotExist();\\r\\n\\r\\n        if(vp.amountForUser < up.spentAmount)\\r\\n            revert FatalError(\\\"user exceeded maximum spending amount\\\");\\r\\n\\r\\n        uint256 remainingPayoutAmount = vp.amountForUser - up.spentAmount;\\r\\n        if(totalRemainingAllocatedAmount < remainingPayoutAmount)\\r\\n            revert FatalError(\\\"less balance than allocated amount\\\");\\r\\n        totalRemainingAllocatedAmount -= remainingPayoutAmount;\\r\\n\\r\\n        delete _userMapping[vl.user];\\r\\n        delete _vestingMap[vestingId];\\r\\n        delete _vestingToUser[vestingId];\\r\\n\\r\\n        emit VestingRemoved(vestingId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only platform admin can do\\r\\n     * @param vestingId Target vesting pool id\\r\\n     * @param amount Target additional liquidity amount\\r\\n     * Amount will be transfer from sender wallet\\r\\n     */\\r\\n    function increaseLiquidity(\\r\\n        uint256 vestingId,\\r\\n        uint256 amount,\\r\\n        uint256 validAfter,\\r\\n        uint256 validBefore,\\r\\n        bytes32 nonce,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external onlyPlatformAdmin existingVesting(vestingId) nonReentrant {\\r\\n        if(amount == 0)\\r\\n            revert ZeroAmount();\\r\\n\\r\\n        VestingProperties storage vesting = _vestingMap[vestingId];\\r\\n\\r\\n        address admin = msgSender();\\r\\n\\r\\n        IPlatformToken(_token).specialTransferFrom(\\r\\n            admin,\\r\\n            amount,\\r\\n            validAfter,\\r\\n            validBefore,\\r\\n            nonce,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n\\r\\n        vesting.unallocatedAmount += amount;\\r\\n\\r\\n        emit IncreaseLiquidity(admin, vestingId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only platform admin can do\\r\\n     * @param amount Target removal liquidity amount\\r\\n     * Amount will be transfer to sender wallet\\r\\n     */\\r\\n    function decreaseLiquidity(uint256 amount)\\r\\n        external\\r\\n        onlyPlatformAdmin\\r\\n    {\\r\\n        if(amount == 0)\\r\\n            revert ZeroAmount();\\r\\n        uint256 availableSenderBalance = IERC20(_token).balanceOf(address(this));\\r\\n        if(amount > availableSenderBalance)\\r\\n            revert InsufficientBalance();\\r\\n\\r\\n        if(totalRemainingAllocatedAmount > availableSenderBalance)\\r\\n            revert FatalError(\\\"balance less than allocated amount\\\");\\r\\n\\r\\n        uint256 availableBalance = availableSenderBalance - totalRemainingAllocatedAmount;\\r\\n        if(amount > availableBalance)\\r\\n            revert InsufficientBalance();\\r\\n\\r\\n        address admin = msgSender();\\r\\n        IERC20(_token).safeTransfer(admin, amount);\\r\\n\\r\\n        emit DecreaseLiquidity(admin, amount);\\r\\n    }\\r\\n\\r\\n    function insertWalletListToVesting(\\r\\n        uint256[] calldata vestingIdList,\\r\\n        address[] calldata walletList\\r\\n    ) external onlyPlatformAdmin {\\r\\n        if(walletList.length != vestingIdList.length)\\r\\n            revert ArraySizeDoesNotMatch();\\r\\n        if(walletList.length == 0)\\r\\n            revert EmptyArray();\\r\\n\\r\\n        uint256 decrease;\\r\\n\\r\\n        uint256 index = walletList.length;\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n\\r\\n            uint256 vestingId = vestingIdList[index];\\r\\n            if(vestingId >= _vestingCount)\\r\\n                revert VestingDoesNotExist();\\r\\n\\r\\n            VestingProperties storage vesting = _vestingMap[vestingId];\\r\\n            uint256 amountForUser = vesting.amountForUser;\\r\\n\\r\\n            address wallet = walletList[index];\\r\\n            UserProperties storage user = _userMapping[wallet];\\r\\n\\r\\n            if(user.isActive)\\r\\n                revert UserAlreadyActive();\\r\\n            user.isActive = true;\\r\\n            user.vestingId = vestingId;\\r\\n\\r\\n            VestingLink storage vl = _vestingToUser[vestingId];\\r\\n            if(vl.active)\\r\\n                revert VestingAlreadyActive();\\r\\n            vl.user = wallet;\\r\\n            vl.active = true;\\r\\n\\r\\n            decrease = amountForUser - user.spentAmount;\\r\\n\\r\\n            uint256 oldUnallocatedAmount = vesting.unallocatedAmount;\\r\\n\\r\\n            if(decrease > oldUnallocatedAmount)\\r\\n                revert InsufficientBalance();\\r\\n            vesting.unallocatedAmount = oldUnallocatedAmount - decrease;\\r\\n\\r\\n            emit InsertWalletListToVesting(msgSender(), vestingId, walletList);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeWalletListFromVesting(\\r\\n        address[] calldata walletList\\r\\n    ) external onlyPlatformAdmin {\\r\\n        if(walletList.length == 0)\\r\\n            revert EmptyArray();\\r\\n\\r\\n        uint256 increasing;\\r\\n\\r\\n        uint256 index = walletList.length;\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n\\r\\n            address wallet = walletList[index];\\r\\n            UserProperties storage user = _userMapping[wallet];\\r\\n\\r\\n            uint256 vestingId = user.vestingId;\\r\\n            VestingProperties storage vesting = _vestingMap[vestingId];\\r\\n            uint256 amountForUser = vesting.amountForUser;\\r\\n\\r\\n            if(!user.isActive)\\r\\n                revert UserNotActive();\\r\\n            user.isActive = false;\\r\\n            VestingLink storage vl = _vestingToUser[vestingId];\\r\\n            vl.user = address(0);\\r\\n            vl.active = false;\\r\\n\\r\\n            increasing = amountForUser - user.spentAmount;\\r\\n\\r\\n            vesting.unallocatedAmount += increasing;\\r\\n            emit RemoveWalletListFromVesting(msgSender(), vestingId, walletList);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim possible for user amount from the pool\\r\\n     * If possible amounts equal to zero will revert\\r\\n     * @param wallet User wallet\\r\\n     */\\r\\n    function claim(address wallet) external {\\r\\n        _claim(wallet);\\r\\n    }\\r\\n\\r\\n    function _claim(address wallet) private {\\r\\n        UserProperties storage user = _userMapping[wallet];\\r\\n        VestingProperties storage vesting = _vestingMap[user.vestingId];\\r\\n\\r\\n        uint256 claimAmount = _amountForClaim(vesting, user, block.timestamp);\\r\\n        if(claimAmount == 0)\\r\\n            revert NoClaimAvailable();\\r\\n\\r\\n        user.spentAmount += claimAmount;\\r\\n        uint256 vestingId = user.vestingId;\\r\\n\\r\\n        totalRemainingAllocatedAmount -= claimAmount;\\r\\n\\r\\n        IERC20(_token).safeTransfer(wallet, claimAmount);\\r\\n\\r\\n        emit Claim(vestingId, wallet, claimAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice allows to individually send the TGE amount to a participant\\r\\n    */\\r\\n    function distributeAmount(uint256 vestingId) private {\\r\\n        if(vestingId >= _vestingCount)\\r\\n            revert OutOfBounds();\\r\\n        VestingLink memory vl = _vestingToUser[vestingId];\\r\\n\\r\\n        if(vl.active)   {\\r\\n            _claim(vl.user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice allows to airdrop currently available amounts to all vesting wallets\\r\\n    * @param batchSize the number of people being airdropped in this call\\r\\n    * @param offset the offset to select the correct batch\\r\\n    */\\r\\n    function airdrop(uint256 batchSize, uint256 offset) external onlyPlatformAdmin {\\r\\n        if(offset > _vestingCount)\\r\\n            revert OutOfBounds();\\r\\n\\r\\n        uint256 index = _vestingCount - offset;\\r\\n\\r\\n        while (0 < index) {\\r\\n            --index;\\r\\n            if(batchSize == 0)\\r\\n                return;\\r\\n\\r\\n            distributeAmount(index);\\r\\n            batchSize--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _share(\\r\\n        uint256 amount,\\r\\n        uint256 share,\\r\\n        uint256 total\\r\\n    ) private pure returns (uint256) {\\r\\n        return (amount * share) / total;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total amount claimable until the nowPoint point in time\\r\\n     * @param vesting schedule to calculate amount for\\r\\n     * @param user to retrieve the already spent amount\\r\\n     * @param nowTime point in time to check for\\r\\n     */\\r\\n    function _amountForClaim(\\r\\n        VestingProperties storage vesting,\\r\\n        UserProperties storage user,\\r\\n        uint256 nowTime\\r\\n    ) private view returns (uint256) {\\r\\n        uint256 startTime = vesting.startTime;\\r\\n\\r\\n        if (!user.isActive) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (nowTime < tgeStartDate) {\\r\\n            return 0;\\r\\n        } else if (nowTime >= tgeStartDate && nowTime < startTime) {\\r\\n            return vesting.tgeAmountForUser - user.spentAmount;\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        uint256 tickCount = vesting.tickCount;\\r\\n        uint256 tick = (nowTime - startTime) / vesting.tickDuration + 1; // at start time, the first tick is available\\r\\n\\r\\n        uint256 amount = vesting.tgeAmountForUser;\\r\\n        uint256 rest = vesting.amountForUser - amount;\\r\\n        if (tick < tickCount) {\\r\\n            uint256 share = _share(TOTAL_SHARE, tick, tickCount);\\r\\n            amount += _share(rest, share, TOTAL_SHARE);\\r\\n        } else {\\r\\n            amount += rest;\\r\\n        }\\r\\n\\r\\n        uint256 alreadyClaimed = user.spentAmount;\\r\\n        if (amount <= alreadyClaimed) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return amount - alreadyClaimed;\\r\\n    }\\r\\n\\r\\n    function _setVesting(uint256 vestingId, VestingProperties calldata setting)\\r\\n        private\\r\\n        returns (uint256 liquidity)\\r\\n    {\\r\\n        if(setting.tgeAmountForUser > setting.amountForUser)\\r\\n            revert FatalError(\\\"tge amount greater than total amount\\\");\\r\\n\\r\\n        if(setting.startTime <= block.timestamp)\\r\\n            revert StartBeforeNow();\\r\\n        if(setting.startTime < tgeStartDate)\\r\\n            revert StartBeforeTGE();\\r\\n\\r\\n        if (setting.tgeAmountForUser < setting.amountForUser) {\\r\\n            if(0 == setting.tickCount || setting.tickDuration == 0)\\r\\n                revert TicksMissing();\\r\\n        }\\r\\n\\r\\n        _vestingMap[vestingId] = setting;\\r\\n\\r\\n        liquidity = setting.unallocatedAmount;\\r\\n\\r\\n        emit VestingAdded(\\r\\n            setting.amountForUser,\\r\\n            setting.tgeAmountForUser,\\r\\n            setting.startTime,\\r\\n            setting.tickCount,\\r\\n            setting.tickDuration,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 4000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminPanel\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraySizeDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"FatalError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StartBeforeNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StartBeforeTGE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TicksMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingCount\",\"type\":\"uint256\"}],\"name\":\"InsertVestingList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"walletList\",\"type\":\"address[]\"}],\"name\":\"InsertWalletListToVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"walletList\",\"type\":\"address[]\"}],\"name\":\"RemoveWalletListFromVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TGESet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tgeAmountForUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VestingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VestingRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_panel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vestingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestampInSeconds\",\"type\":\"uint256\"}],\"name\":\"amountForClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"increaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountForUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeAmountForUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unallocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct PlatformVesting.VestingProperties[]\",\"name\":\"vestingList\",\"type\":\"tuple[]\"}],\"name\":\"insertVestingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vestingIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"walletList\",\"type\":\"address[]\"}],\"name\":\"insertWalletListToVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"removeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"walletList\",\"type\":\"address[]\"}],\"name\":\"removeWalletListFromVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setTgeDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRemainingAllocatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"userPropertiesList\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct PlatformVesting.UserProperties\",\"name\":\"userProperties\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPropertiesList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountForUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeAmountForUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unallocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct PlatformVesting.VestingProperties[]\",\"name\":\"vestingList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PlatformVesting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "4000", "ConstructorArguments": "00000000000000000000000011b4b52e6cad795d7210c1620f026c432c98599e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}