{"SourceCode": "pragma solidity ^0.4.13;\r\n\r\ncontract Versioned {\r\n    string public version;\r\n\r\n    function Versioned(string _version) public {\r\n        version = _version;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner public {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() onlyOwner public {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract Extractable is Ownable {\r\n    // allow contract to receive ether\r\n    function () payable public {}\r\n\r\n    // allow to extract ether from contract\r\n    function extractEther(address withdrawalAddress) public onlyOwner {\r\n        if (this.balance > 0) {\r\n            withdrawalAddress.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    // Allow to withdraw ERC20 token from contract\r\n    function extractToken(address tokenAddress, address withdrawalAddress) public onlyOwner {\r\n        ERC20Basic tokenContract = ERC20Basic(tokenAddress);\r\n        uint256 balance = tokenContract.balanceOf(this);\r\n        if (balance > 0) {\r\n            tokenContract.transfer(withdrawalAddress, balance);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract FloatingSupplyToken is Ownable, StandardToken {\r\n    using SafeMath for uint256;\r\n    // create new token tranche for contract you own\r\n    // this increases total supply and credits new tokens to owner\r\n    function issueTranche(uint256 _amount) public onlyOwner returns (uint256) {\r\n        require(_amount > 0);\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[owner] = balances[owner].add(_amount);\r\n\r\n        emit Transfer(address(0), owner, _amount);\r\n        return totalSupply;\r\n    }\r\n\r\n    // destroy tokens that belongs to you\r\n    // this decreases your balance and total supply\r\n    function burn(uint256 _amount) public {\r\n        require(_amount > 0);\r\n        require(balances[msg.sender] > 0);\r\n        require(_amount <= balances[msg.sender]);\r\n\r\n        assert(_amount <= totalSupply);\r\n\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n    }\r\n}\r\n\r\ncontract FundToken is StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    // Fund internal balances are held in here\r\n    mapping (address => mapping (address => uint256)) fundBalances;\r\n\r\n    // Owner of account manages funds on behalf of third parties and\r\n    // need to keep an account of what belongs to whom\r\n    mapping (address => bool) public fundManagers;\r\n\r\n    // modifiers\r\n    // only fund manager can execute that\r\n    modifier onlyFundManager() {\r\n        require(fundManagers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // simple balance management\r\n    // wrapper for StandardToken to control fundmanager status\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(!fundManagers[msg.sender]);\r\n        require(!fundManagers[_to]);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    // events\r\n\r\n    // register address as fund address\r\n    event RegisterFund(address indexed _fundManager);\r\n\r\n    // remove address from registered funds\r\n    event DissolveFund(address indexed _fundManager);\r\n\r\n    // owner's tokens moved into the fund\r\n    event FundTransferIn(address indexed _from, address indexed _fundManager,\r\n                         address indexed _owner, uint256 _value);\r\n\r\n    // tokens moved from the fund to a regular address\r\n    event FundTransferOut(address indexed _fundManager, address indexed _from,\r\n                          address indexed _to, uint256 _value);\r\n\r\n    // tokens moved from the fund to a regular address\r\n    event FundTransferWithin(address indexed _fundManager, address indexed _from,\r\n                             address indexed _to, uint256 _value);\r\n\r\n    // fund register/dissolve\r\n    // register fund status for an address, address must be empty for that\r\n    function registerFund() public {\r\n        require(balances[msg.sender] == 0);\r\n        require(!fundManagers[msg.sender]);\r\n\r\n        fundManagers[msg.sender] = true;\r\n\r\n        emit RegisterFund(msg.sender);\r\n    }\r\n\r\n    // unregister fund status for an address, address must be empty for that\r\n    function dissolveFund() public {\r\n        require(balances[msg.sender] == 0);\r\n        require(fundManagers[msg.sender]);\r\n\r\n        delete fundManagers[msg.sender];\r\n\r\n        emit DissolveFund(msg.sender);\r\n    }\r\n\r\n\r\n    // funded balance management\r\n\r\n    // returns balance of an account inside the fund\r\n    function fundBalanceOf(address _fundManager, address _owner) public view returns (uint256) {\r\n        return fundBalances[_fundManager][_owner];\r\n    }\r\n\r\n    // Transfer the balance from simple account to account in the fund\r\n    function fundTransferIn(address _fundManager, address _to, uint256 _amount) public {\r\n        require(fundManagers[_fundManager]);\r\n        require(!fundManagers[msg.sender]);\r\n\r\n        require(balances[msg.sender] >= _amount);\r\n        require(_amount > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_fundManager] = balances[_fundManager].add(_amount);\r\n        fundBalances[_fundManager][_to] = fundBalances[_fundManager][_to].add(_amount);\r\n\r\n        emit FundTransferIn(msg.sender, _fundManager, _to, _amount);\r\n        emit Transfer(msg.sender, _fundManager, _amount);\r\n    }\r\n\r\n    // Transfer the balance from account in the fund to simple account\r\n    function fundTransferOut(address _from, address _to, uint256 _amount) public {\r\n        require(!fundManagers[_to]);\r\n        require(fundManagers[msg.sender]);\r\n\r\n        require(_amount > 0);\r\n        require(balances[msg.sender] >= _amount);\r\n        require(fundBalances[msg.sender][_from] >= _amount);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        fundBalances[msg.sender][_from] = fundBalances[msg.sender][_from].sub(_amount);\r\n        \r\n        if (fundBalances[msg.sender][_from] == 0){\r\n            delete fundBalances[msg.sender][_from];\r\n        }\r\n        \r\n        emit FundTransferOut(msg.sender, _from, _to, _amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    // Transfer the balance between two accounts within the fund\r\n    function fundTransferWithin(address _from, address _to, uint256 _amount) public {\r\n        require(fundManagers[msg.sender]);\r\n\r\n        require(_amount > 0);\r\n        require(balances[msg.sender] >= _amount);\r\n        require(fundBalances[msg.sender][_from] >= _amount);\r\n\r\n        fundBalances[msg.sender][_from] = fundBalances[msg.sender][_from].sub(_amount);\r\n        fundBalances[msg.sender][_to] = fundBalances[msg.sender][_to].add(_amount);\r\n\r\n        if (fundBalances[msg.sender][_from] == 0){\r\n            delete fundBalances[msg.sender][_from];\r\n        }\r\n\r\n        emit FundTransferWithin(msg.sender, _from, _to, _amount);\r\n    }\r\n\r\n    // check fund controls before forwarding call\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value .\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!fundManagers[msg.sender]);\r\n\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    // check fund controls before forwarding call to standard token allowance spending function\r\n    function transferFrom(address _from, address _to,\r\n                          uint256 _amount) public returns (bool success) {\r\n        require(!fundManagers[_from]);\r\n        require(!fundManagers[_to]);\r\n\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnFundToken is FundToken, FloatingSupplyToken {\r\n    using SafeMath for uint256;\r\n\r\n    //events\r\n    // owner's tokens from the managed fund burned\r\n    event FundBurn(address indexed _fundManager, address indexed _owner, uint256 _value);\r\n\r\n    // destroy tokens that belongs to you\r\n    // this decreases total supply\r\n    function burn(uint256 _amount) public {\r\n        require(!fundManagers[msg.sender]);\r\n\r\n        super.burn(_amount);\r\n    }\r\n\r\n    // destroy tokens that belong to the fund you control\r\n    // this decreases that account's balance, fund balance, total supply\r\n    function fundBurn(address _fundAccount, uint256 _amount) public onlyFundManager {\r\n        require(fundManagers[msg.sender]);\r\n        require(balances[msg.sender] != 0);\r\n        require(fundBalances[msg.sender][_fundAccount] > 0);\r\n        require(_amount > 0);\r\n        require(_amount <= fundBalances[msg.sender][_fundAccount]);\r\n\r\n        assert(_amount <= totalSupply);\r\n        assert(_amount <= balances[msg.sender]);\r\n\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        fundBalances[msg.sender][_fundAccount] = fundBalances[msg.sender][_fundAccount].sub(_amount);\r\n\r\n        emit FundBurn(msg.sender, _fundAccount, _amount);\r\n    }\r\n}\r\n\r\ncontract PausableToken is BurnFundToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function burn(uint256 _amount) public whenNotPaused {\r\n        return super.burn(_amount);\r\n    }\r\n\r\n    function fundBurn(address _fundAccount, uint256 _amount) public whenNotPaused {\r\n        return super.fundBurn(_fundAccount, _amount);\r\n    }\r\n\r\n    function registerFund() public whenNotPaused {\r\n        return super.registerFund();\r\n    }\r\n\r\n    function dissolveFund() public whenNotPaused {\r\n        return super.dissolveFund();\r\n    }\r\n\r\n    function fundTransferIn(address _fundManager, address _to, uint256 _amount) public whenNotPaused {\r\n        return super.fundTransferIn(_fundManager, _to, _amount);\r\n    }\r\n\r\n    function fundTransferOut(address _from, address _to, uint256 _amount) public whenNotPaused {\r\n        return super.fundTransferOut(_from, _to, _amount);\r\n    }\r\n\r\n    function fundTransferWithin(address _from, address _to, uint256 _amount) public whenNotPaused {\r\n        return super.fundTransferWithin(_from, _to, _amount);\r\n    }\r\n}\r\n\r\ncontract DAXT is PausableToken,\r\n    DetailedERC20(\"Digital Asset Exchange Token\", \"DAXT\", 18),\r\n    Versioned(\"1.2.0\"),\r\n    Destructible,\r\n    Extractable {\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"extractToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dissolveFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueTranche\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"extractEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fundManager\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"fundBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundAccount\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundTransferWithin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundManager\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundTransferIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundTransferOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fundManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FundBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fundManager\",\"type\":\"address\"}],\"name\":\"RegisterFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fundManager\",\"type\":\"address\"}],\"name\":\"DissolveFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_fundManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FundTransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fundManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FundTransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fundManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FundTransferWithin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "DAXT", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a842491986e57aa3ad0da60cd6c699884e0dc6c797a0d2e07c692b5686680b2d"}