{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IUSDTToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Based on Tether Token contract (2017-11-28): https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7#code\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface ERC20Basic {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address who) external view returns (uint);\\n    function transfer(address to, uint value) external;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function transferFrom(address from, address to, uint value) external;\\n    function approve(address spender, uint value) external;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\"\r\n    },\r\n    \"contracts/Interfaces/IWilsonToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts (v4.8.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the Wilson Token.\\n */\\ninterface IWilsonToken {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * \\n     * @dev Function checks for user to have more tokens that he wants to burn\\n     * @param amount Amount of tokens to be burned (with 8 decimals)\\n     */\\n    function burn(uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/PublicSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Interfaces/IWilsonToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Interfaces/IUSDTToken.sol\\\";\\n\\ncontract PublicSale is Ownable {\\n    IWilsonToken public WilsonToken;  // Wilson token instance\\n    ERC20 public UsdtToken;  // USDT Token instance\\n   \\n\\n    mapping(address => uint256) public tokensPerAddress;\\n    uint256 public tokensSold = 0;\\n    bool public saleFinished = false;\\n    uint8 public currentRound = 0;\\n\\n    struct Round {\\n        uint256 amount;\\n        uint256 tokenWeiPrice;  // 10 ** (-18) ETH\\n        uint256 wilsonAmountSold;\\n    }\\n\\n    Round[5] public rounds;\\n\\n    event EthWithdrawn(bool success, uint256 amount);\\n    event UsdtWithdrawn(address receiver, uint256 amount);\\n    event TokenPurchase(uint256 amount, address buyer);\\n    event TokensClaimed(uint256 amount, address buyer);\\n    event TokensBurned(uint256 amount);\\n\\n    /**\\n     * \\n     * @param _tokenAddress Address of the target token \\n     * @param _usdtAddress  Address of Tether token\\n     */\\n    constructor(address _tokenAddress, address _usdtAddress) {\\n        WilsonToken = IWilsonToken(_tokenAddress);\\n        UsdtToken = ERC20(_usdtAddress);\\n        \\n\\n        rounds[0] = Round({ // 1 round\\n                        amount: 20 * 10 ** (12 + 8),\\n                        tokenWeiPrice: 8125 * 10 ** 3,\\n                        wilsonAmountSold: 0\\n                    });\\n        rounds[1] = Round({ // 2 round\\n                        amount: 25 * 10 ** (12 + 8),\\n                        tokenWeiPrice: 8475 * 10 ** 3,\\n                        wilsonAmountSold: 0\\n                    });\\n        rounds[2] = Round({ // 3 round\\n                        amount: 30 * 10 ** (12 + 8),\\n                        tokenWeiPrice: 8750 * 10 ** 3,\\n                        wilsonAmountSold: 0\\n                    });\\n        rounds[3] = Round({ // 4 round\\n                        amount: 35 * 10 ** (12 + 8),\\n                        tokenWeiPrice: 90625 * 10 ** 2,\\n                        wilsonAmountSold: 0\\n                    });\\n        rounds[4] = Round({ // 5 round\\n                        amount: 37  * 10 ** (12 + 8),\\n                        tokenWeiPrice: 96875 * 10 ** 2,\\n                        wilsonAmountSold: 0\\n                    });\\n    }\\n\\n\\n    /**\\n     * @notice Receives Eth value.\\n     * @dev amount in Wei.\\n     */\\n    receive() external payable{}\\n\\n    /**\\n     *  @notice Sale function, call it to buy tokens (for ETH).\\n     *  @dev Amount of ETH (msg.value) in Wei.\\n     */\\n    function publicSaleETH() public payable {\\n        require(!saleFinished, \\\"Sale is over!\\\");\\n        uint256 wilsonAmount = ((msg.value * (10 ** 8)) / rounds[currentRound].tokenWeiPrice);  // 1 ETH = 10 ** 18 Wei\\n        require(\\n            wilsonAmount + rounds[currentRound].wilsonAmountSold <= rounds[currentRound].amount,\\n            \\\"Reached the current round supply limit, check the remaining amount!\\\" \\n        );\\n        require(\\n            tokensPerAddress[msg.sender] + wilsonAmount < 10 ** (8 + 4 + 8),  // used \\\"10 ** (-8)\\\"\\\" price per token\\n            \\\"Error: Too big amount for purchase per wallet (max is 10000 usdt equivalent)\\\"\\n        );\\n        rounds[currentRound].wilsonAmountSold += wilsonAmount;\\n        tokensSold +=  wilsonAmount;\\n        tokensPerAddress[msg.sender]+= wilsonAmount;\\n        emit TokenPurchase(wilsonAmount, msg.sender);\\n    }\\n\\n    /**\\n     *  @notice Sale function, call it to buy tokens (for USDT).\\n     *  @dev Amount of USDT with 6 decimals. Amount should be approved in the Tether Token contract\\n     */\\n    function publicSaleUSDT(uint256 usdtAmount) external {\\n        require(saleFinished == false, \\\"Sale is over!\\\");\\n        require(usdtAmount >=  5 * 10 ** 6, \\\"Too small amount for purchase! Min is 5 usdt\\\");\\n        require(usdtAmount <= UsdtToken.balanceOf(msg.sender), \\\"Buyer doesn't have enough Usdt\\\");\\n        uint256 usdtBalanceBefore = UsdtToken.balanceOf(address(this));\\n        require(UsdtToken.allowance(msg.sender, address(this)) >= usdtAmount, \\\"Token allowance was not aproved!\\\");\\n\\n        //uint256 tokenUsdtPrice = (rounds[currentRound].tokenWeiPrice * 2400 * 10 ** 6) / 10 ** 9;  // 2400 usdt/eth\\n        uint256 wilsonAmount = (usdtAmount * 10 ** (8 + 18) / (rounds[currentRound].tokenWeiPrice * 2400 * 10 ** 6)) ;  // 1 ETH = 10 ** 18 Wei\\n\\n        require(\\n            wilsonAmount + rounds[currentRound].wilsonAmountSold <= rounds[currentRound].amount,\\n            \\\"Reached the current round supply limit, check the remaining amount!\\\" \\n        );\\n        require(\\n            tokensPerAddress[msg.sender] + wilsonAmount < 10 ** (8 + 4 + 8),  // used \\\"10 ** (-8) usdt\\\"  price per Wilson token\\n            \\\"Error: Too big amount for purchase per wallet (max is 10000 usdt equivalent)\\\"\\n        );\\n        UsdtToken.transferFrom(msg.sender, address(this), usdtAmount);\\n        require(UsdtToken.balanceOf(address(this)) >= usdtBalanceBefore + usdtAmount, \\\"USDT tokens were not transfered\\\");\\n        rounds[currentRound].wilsonAmountSold += wilsonAmount;\\n        tokensSold += wilsonAmount;\\n        tokensPerAddress[msg.sender]+= wilsonAmount;\\n        emit TokenPurchase(wilsonAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Starts the next round of sale\\n     * @dev OnlyOwner. Increments the currentRound counter, checks that it si not the last round\\n     */\\n    function startNextRound() external onlyOwner returns(uint8) {\\n        require(currentRound < 4, \\\"Last round was alredy started!\\\");\\n        currentRound += 1;\\n        return currentRound;\\n    }\\n\\n    /**\\n     * @notice Function to withdraw ETH from contract (for owner).\\n     * @param amount Amount in wei.\\n     * @dev OnlyOwner. Checks for the sale to be finished.\\n     */\\n    function withdrawETH(uint256 amount) external onlyOwner { \\n        require(address(this).balance >= amount , \\\"Insufficient ETH balance\\\");\\n        require(saleFinished == true, \\\"Public Sale not over!\\\");\\n        // Transfer ETH to the caller\\n        (bool sent, bytes memory data) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        emit EthWithdrawn(sent, amount);  \\n    }\\n\\n    /**\\n     * @notice Function to withdraw USDT from contract (for owner).\\n     * @param amount Amount with 6 decimals.\\n     * @dev OnlyOwner. Checks for the sale to be finished.\\n     */\\n    function withdrawUsdt(uint256 amount) external onlyOwner { \\n        require(UsdtToken.balanceOf(address(this)) >= amount , \\\"Insufficient USDT balance\\\");\\n        require(saleFinished, \\\"Public Sale not over!\\\");\\n        // Transfer USDT to the caller\\n        UsdtToken.transfer(msg.sender, amount);\\n        emit UsdtWithdrawn(msg.sender, amount);  \\n    }\\n\\n    /**\\n     * @notice Finishes the public sale. Irreversible!!! Call it only when you want to finish the whole sale.\\n     * @dev Onlyowner. Checks for sale not to be already finished.\\n     */\\n    function finishSale() external onlyOwner {\\n        require(saleFinished == false, \\\"Public Sale already finished!\\\");\\n        saleFinished = true;\\n    }\\n\\n    /**\\n     * @notice Sends the tokens to the buers (all at once)!\\n     * @dev OnlyOwner. Sets amount per adrress to 0.\\n     */\\n    function claimTokens() external {\\n        require(saleFinished, \\\"Public Sale not over!\\\");\\n        address receiver = msg.sender;\\n        uint256 claimAmount = tokensPerAddress[receiver];\\n        require(claimAmount >= 1, \\\"No tokens to claim\\\");\\n        tokensPerAddress[receiver] = 0;\\n        transferWilsonTokens(receiver, claimAmount);\\n        emit TokensClaimed(claimAmount, receiver);\\n    }\\n\\n     /**\\n     * @notice Burns remaining tokens after the sale is over.\\n     * @dev OnlyOwner. Checks for the sale to be finished.\\n     */\\n    function burnRemainingTokens() external onlyOwner{\\n        require(saleFinished, \\\"Public Sale not over!\\\");\\n        uint256 burnAmount = WilsonToken.balanceOf(address(this)) - tokensSold;\\n        WilsonToken.burn(burnAmount);\\n        emit TokensBurned(burnAmount);\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Transfers Wilson tokens from this address.\\n     * @param _to Address of receiver.\\n     * @param _amount Amount of tokens, with decimals.\\n     */\\n    function transferWilsonTokens(address _to, uint256 _amount) internal {\\n        require(WilsonToken.transfer(_to, _amount), \\\"Transfer failed!\\\"); \\n    }\\n\\n\\n    //Get Methods\\n\\n    /**\\n     * @notice Check the amount to be distributed in Wilson tokens.\\n     * @param _account Address of holder.\\n     * @return Amount in Wilson tokens with 8 decimals.\\n     */\\n    function checkPurchasedAmount(address _account) external view returns (uint256) {\\n        return tokensPerAddress[_account];\\n    }\\n\\n    /**\\n     * @notice Returns amount of tokens available to purchase in current round \\n     * @return Amount with 8 decimals.\\n     */\\n    function currentRoundRemainingAmount() external view returns(uint256) {\\n        return rounds[currentRound].amount - rounds[currentRound].wilsonAmountSold;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UsdtWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UsdtToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WilsonToken\",\"outputs\":[{\"internalType\":\"contract IWilsonToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"publicSaleUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeiPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wilsonAmountSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNextRound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PublicSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000ce236c50139764badf9938efc73c4a341070ab4000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}