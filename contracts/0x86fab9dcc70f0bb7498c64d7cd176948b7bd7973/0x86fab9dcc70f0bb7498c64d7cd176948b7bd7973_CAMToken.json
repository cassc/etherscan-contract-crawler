{"SourceCode": "{\"CAMToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\r\\n\\r\\nimport \\\"./ERC20Interface.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./OwnerHelper.sol\\\";\\r\\n\\r\\n\\r\\n//----------------------------------------------------------------\\r\\n\\r\\ncontract CAMToken is ERC20Interface, OwnerHelper {\\r\\n    using SafeMath for uint256;\\r\\n   \\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public _allowances;\\r\\n\\r\\n    uint256 public _totalSupply;\\r\\n    string public _name;\\r\\n    string public _symbol;\\r\\n    uint8 public _decimals;\\r\\n    bool public _tokenLock;\\r\\n    mapping (address =\\u003e bool) public _personalTokenLock;\\r\\n\\r\\n    constructor(string memory getName, string memory getSymbol) {\\r\\n        _name = getName;\\r\\n        _symbol = getSymbol;\\r\\n        _decimals = 3;\\r\\n        _totalSupply = 20000000000e3;\\r\\n        _balances[msg.sender] = _totalSupply;\\r\\n        _tokenLock = false;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint amount) external virtual override returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[msg.sender][spender];  // \ucd94\uac00\\r\\n        require(_balances[msg.sender] \\u003e= amount,\\\"ERC20: The amount to be transferred exceeds the amount of tokens held by the owner.\\\");\\r\\n        _approve(msg.sender, spender, currentAllowance, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        emit Transfer(msg.sender, sender, recipient, amount);\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n    \\r\\n        _approve(sender, msg.sender, currentAllowance, currentAllowance - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(isTokenLock(sender, recipient) == false, \\\"TokenLock: invalid token transfer\\\");\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance.sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isTokenLock(address from, address to) public view returns (bool lock) {\\r\\n        lock = false;\\r\\n\\r\\n        if(_tokenLock == true)\\r\\n        {\\r\\n             lock = true;\\r\\n        }\\r\\n\\r\\n        if(_personalTokenLock[from] == true || _personalTokenLock[to] == true) {\\r\\n             lock = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeTokenLock() onlyOwner public {\\r\\n        require(_tokenLock == true);\\r\\n        _tokenLock = false;\\r\\n    }\\r\\n \\r\\n    function removePersonalTokenLock(address _who) onlyOwner public {\\r\\n        require(_personalTokenLock[_who] == true);\\r\\n        _personalTokenLock[_who] = false;\\r\\n    }\\r\\n\\r\\n    function addTokenLock() onlyOwner public {\\r\\n        require(_tokenLock == false);\\r\\n        _tokenLock = true;\\r\\n    }\\r\\n \\r\\n    function addPersonalTokenLock(address _who) onlyOwner public {\\r\\n        require(_personalTokenLock[_who] == false);\\r\\n        _personalTokenLock[_who] = true;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 currentAmount, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        require(currentAmount == _allowances[owner][spender], \\\"ERC20: invalid currentAmount\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, currentAmount, amount);\\r\\n    }\\r\\n\\r\\n}\"},\"ERC20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\r\\n\\r\\ninterface ERC20Interface {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(address spender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Transfer(address indexed spender, address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 oldAmount, uint256 amount);\\r\\n}\"},\"OwnerHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\r\\n\\r\\nabstract contract OwnerHelper {\\r\\n\\r\\n  \\taddress private _owner;\\r\\n\\r\\n  \\tevent OwnershipTransferred(address indexed preOwner, address indexed nextOwner);\\r\\n\\r\\n  \\tmodifier onlyOwner {\\r\\n\\t\\trequire(msg.sender == _owner, \\\"OwnerHelper: caller is not owner\\\");\\r\\n\\t\\t_;\\r\\n  \\t}\\r\\n\\r\\n  \\tconstructor() {\\r\\n            _owner = msg.sender;\\r\\n  \\t}\\r\\n\\r\\n       function owner() public view virtual returns (address) {\\r\\n           return _owner;\\r\\n       }\\r\\n\\r\\n  \\tfunction transferOwnership(address newOwner) onlyOwner public {\\r\\n            require(newOwner != _owner);\\r\\n            require(newOwner != address(0x0));\\r\\n            address preOwner = _owner;\\r\\n    \\t    _owner = newOwner;\\r\\n    \\t    emit OwnershipTransferred(preOwner, newOwner);\\r\\n  \\t}\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  \\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\tassert(a == 0 || c / a == b);\\r\\n\\t\\treturn c;\\r\\n  \\t}\\r\\n\\r\\n  \\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t    uint256 c = a / b;\\r\\n\\t\\treturn c;\\r\\n  \\t}\\r\\n\\r\\n  \\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tassert(b \\u003c= a);\\r\\n\\t\\treturn a - b;\\r\\n  \\t}\\r\\n\\r\\n  \\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\tassert(c \\u003e= a);\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"getName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"getSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"preOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_personalTokenLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addPersonalTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isTokenLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removePersonalTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CAMToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b43616d656c6c20436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343414d0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00ed30302f5fc538e7c4813e5a959f5f9ad5f94e6c0a7594489b3bbe3ae86d4a"}