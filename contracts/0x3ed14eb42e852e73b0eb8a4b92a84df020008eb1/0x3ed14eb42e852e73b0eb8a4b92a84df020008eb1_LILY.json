{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function isFeeExempt(address addr) external view returns (bool);\r\n\r\n    function getTradingInfo(address trader) external view returns (uint256, uint256, uint256);\r\n\r\n    function getTotalTradingInfo() external view returns (uint256, uint256, uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: contracts/interfaces/IERC20Metadata.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n// File: contracts/libraries/Context.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: contracts/libraries/Ownable.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n// File: contracts/LILY.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\ncontract LILY is Context, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct TradingInfo {\r\n        uint256 boughtAmount;\r\n        uint256 soldAmount;\r\n        uint256 transferredAmount;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private constant _name = \"Lily\";\r\n    string private constant _symbol = \"$LILY\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _hardCap = 420_000_000_000 * (10 ** _decimals);\r\n\r\n    address payable _liquidityWallet;\r\n    address payable _rewardWallet;\r\n    address payable _companyWallet;\r\n\r\n    uint256 _buyTax = 15;\r\n    uint256 _sellTax = 20;\r\n    uint256 _normalTax = 5;\r\n\r\n    uint256 _liquidityWalletTaxAllocation = 45;\r\n    uint256 _rewardWalletTaxAllocation = 40;\r\n    uint256 _companyWalletTaxAllocation = 15;\r\n\r\n    uint256 _initialMintRatio = 25;\r\n    uint256 _maxHalvings = 120;\r\n    uint256 _halvingReduction = 25;\r\n    uint256 _mintRate = 3000;\r\n    uint256 _mintDenom = 100000;\r\n    uint256 _halvingCount = 1;\r\n    uint256 _maxHoldingAmount = _hardCap.div(400);\r\n    uint256 _maxTxAmount = _hardCap.div(800);\r\n\r\n    uint256 _totalBoughtAmount = 0;\r\n    uint256 _totalSoldAmount = 0;\r\n    uint256 _totalTransferredAmount = 0;\r\n\r\n    IUniswapV2Router02 _uniswapRouter;\r\n    address _uniswapPair;\r\n    bool _tradingOpen = false;\r\n    bool _limited = true;\r\n\r\n    mapping(address => TradingInfo) _tradingInfo;\r\n    mapping(address => bool) _isFeeExempt;\r\n    mapping(address => bool) _automatedMarketMakerPairs;\r\n\r\n    event OpenTrading(bool flag, uint256 timeStamp);\r\n    event HalvingMint(address to, uint256 amount, uint256 halvingCount);\r\n    event SetAutomatedMarketMakerPairs(address ammPair, bool flag);\r\n    event SetLimitation(bool limit, uint256 maxTxAmount, uint256 maxHoldingAmount);\r\n    event SetFeeExempt(address indexed addr, bool value);\r\n    event SetTax(uint256 buyTax, uint256 sellTax, uint256 normalTax);\r\n    event SetTaxWallet(address liquidityWallet, address rewardWallet, address companyWallet);\r\n    event SetTaxAllocation(uint256 liquidityWalletTaxAllocation, uint256 rewardWalletTaxAllocation, uint256 companyWalletTaxAllocation);\r\n    event SetMaxHalving(uint256 maxHalving);\r\n    event SetHalvingReduction(uint256 halvingReduction);\r\n\r\n    constructor() {\r\n        _uniswapRouter = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _uniswapPair = IUniswapV2Factory(_uniswapRouter.factory())\r\n            .createPair(address(this), _uniswapRouter.WETH());\r\n        _mint(msg.sender, _hardCap.mul(_initialMintRatio).div(100));\r\n        _automatedMarketMakerPairs[_uniswapPair] = true;\r\n        _isFeeExempt[msg.sender] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n    }\r\n\r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address from, address to) public view override returns (uint256) {\r\n        return _allowances[from][to];\r\n    }\r\n\r\n    function approve(address to, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: approve from the zero address\");\r\n        require(to != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[from][to] = amount;\r\n        emit Approval(from, to, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount > 0, \"ERC20: transfer amount zero\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        bool excludedAccount = _isFeeExempt[from] || _isFeeExempt[to];\r\n        require(_tradingOpen || excludedAccount, \"LILYLOG:: Trading is not allowed\");\r\n\r\n        if (!_automatedMarketMakerPairs[to] && !excludedAccount && _limited) {\r\n            require(amount <= _maxTxAmount, \"LILYLOG:: Insufficient tx amount\");\r\n            require(_balances[to] + amount <= _maxHoldingAmount, \"LILYLOG:: Insufficient trading amount\");\r\n        }\r\n\r\n        uint256 taxAmount = 0;\r\n        uint256 sendAmount;\r\n\r\n        if (shouldTakeFee(from, to)) {\r\n            taxAmount = calculateTax(from, to, amount);\r\n        }\r\n\r\n        sendAmount = amount.sub(taxAmount);\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(sendAmount);\r\n        emit Transfer(from, to, sendAmount);\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[_liquidityWallet] = _balances[_liquidityWallet].add(taxAmount.mul(_liquidityWalletTaxAllocation).div(100));\r\n            _balances[_rewardWallet] = _balances[_rewardWallet].add(taxAmount.mul(_rewardWalletTaxAllocation).div(100));\r\n            _balances[_companyWallet] = _balances[_companyWallet].add(taxAmount.mul(_companyWalletTaxAllocation).div(100));\r\n            emit Transfer(from, _liquidityWallet, taxAmount.mul(_liquidityWalletTaxAllocation).div(100));\r\n            emit Transfer(from, _rewardWallet, taxAmount.mul(_rewardWalletTaxAllocation).div(100));\r\n            emit Transfer(from, _companyWallet, taxAmount.mul(_companyWalletTaxAllocation).div(100));\r\n        }\r\n\r\n        if (_automatedMarketMakerPairs[from] && !_automatedMarketMakerPairs[to]) {\r\n            _tradingInfo[to].boughtAmount += amount;\r\n            _totalBoughtAmount += amount;\r\n        } else if (!_automatedMarketMakerPairs[from] && _automatedMarketMakerPairs[to]) {\r\n            _tradingInfo[from].soldAmount += amount;\r\n            _totalSoldAmount += amount;\r\n        } else {\r\n            _tradingInfo[from].transferredAmount += amount;\r\n            _totalTransferredAmount += amount;\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n        require(account != address(0), \"LILYLOG:: Mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external onlyOwner {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function halvingMint() external onlyOwner() {\r\n        uint256 mintAmount = _hardCap.mul(_mintRate).div(_mintDenom);\r\n        if (_mintRate < 1)\r\n            return;\r\n        _mint(_liquidityWallet, mintAmount.mul(_liquidityWalletTaxAllocation).div(100));\r\n        _mint(_rewardWallet, mintAmount.mul(_rewardWalletTaxAllocation).div(100));\r\n        _mint(_companyWallet, mintAmount.mul(_companyWalletTaxAllocation).div(100));\r\n        if (_halvingCount < _maxHalvings) {\r\n            _mintRate = _mintRate.sub(_halvingReduction.mul(_halvingCount));\r\n            _halvingCount++;\r\n        }        \r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) private view returns (bool) {\r\n        if (_isFeeExempt[from] || _isFeeExempt[to]) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function calculateTax(address from, address to, uint amount) private view returns (uint256) {\r\n        uint256 taxAmount = 0;\r\n        if (_automatedMarketMakerPairs[from]) {\r\n            taxAmount = amount.mul(_buyTax).div(1000);\r\n        } else if (_automatedMarketMakerPairs[to]) {\r\n            taxAmount = amount.mul(_sellTax).div(1000);\r\n        } else if (!_automatedMarketMakerPairs[from] && !_automatedMarketMakerPairs[to]) {\r\n            taxAmount = amount.mul(_normalTax).div(1000);\r\n        }\r\n        return taxAmount;\r\n    }\r\n\r\n    function setFeeExempt(address[] calldata addressLists, bool value) external onlyOwner {\r\n        uint256 length = addressLists.length;\r\n        for (uint256 i = 0; i < length; i ++) {\r\n            _isFeeExempt[addressLists[i]] = value;\r\n            emit SetFeeExempt(addressLists[i], value);\r\n        }\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        _tradingOpen = true;\r\n        emit OpenTrading(_tradingOpen, block.timestamp);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPairs(address ammPair, bool flag) external onlyOwner {\r\n        _automatedMarketMakerPairs[ammPair] = flag;\r\n        emit SetAutomatedMarketMakerPairs(ammPair, flag);\r\n    }\r\n\r\n    function setLimitation(bool limited, uint256 maxTxAmount, uint256 maxHoldingAmount) external onlyOwner {\r\n        _limited = limited;\r\n        _maxTxAmount = maxTxAmount;\r\n        _maxHoldingAmount = maxHoldingAmount;\r\n        emit SetLimitation(limited, maxTxAmount, maxHoldingAmount);\r\n    }\r\n\r\n    function setTax(uint256 buyTax, uint256 sellTax, uint256 normalTax) external onlyOwner {\r\n        require(buyTax > 0, \"LILYLOG:: Buy tax must be higher than zero\");\r\n        require(sellTax > 0, \"LILYLOG:: Sell tax must be higher than zero\");\r\n        require(normalTax > 0, \"LILYLOG:: Normal tax must be higher than zero\");\r\n        _buyTax = buyTax;\r\n        _sellTax = sellTax;\r\n        _normalTax = normalTax;\r\n        emit SetTax(buyTax, sellTax, normalTax);\r\n    }\r\n\r\n    function setTaxAllocation(uint256 liquidityWalletTaxAllocation, uint256 rewardWalletTaxAllocation, uint256 companyWalletTaxAllocation) external onlyOwner {\r\n        require(liquidityWalletTaxAllocation + rewardWalletTaxAllocation + companyWalletTaxAllocation == 100, \"LILYLOG:: Tax allocation is not correct\");\r\n        _liquidityWalletTaxAllocation = liquidityWalletTaxAllocation;\r\n        _rewardWalletTaxAllocation = rewardWalletTaxAllocation;\r\n        _companyWalletTaxAllocation = companyWalletTaxAllocation;\r\n        emit SetTaxAllocation(liquidityWalletTaxAllocation, rewardWalletTaxAllocation, companyWalletTaxAllocation);\r\n    }\r\n\r\n    function setTaxWallet(address liquidityWallet, address rewardWallet, address companyWallet) external onlyOwner {\r\n        _liquidityWallet = payable(liquidityWallet);\r\n        _rewardWallet = payable(rewardWallet);\r\n        _companyWallet = payable(companyWallet);\r\n        _isFeeExempt[_liquidityWallet] = true;\r\n        _isFeeExempt[_rewardWallet] = true;\r\n        _isFeeExempt[_companyWallet] = true;\r\n        emit SetTaxWallet(liquidityWallet, rewardWallet, companyWallet);\r\n    }\r\n\r\n    function setMaxHalving(uint256 maxHalvings) external onlyOwner {\r\n        require(maxHalvings > _maxHalvings, \"LILYLOG:: Max halving must be higher than the prior value\");\r\n        _maxHalvings = maxHalvings;\r\n        emit SetMaxHalving(maxHalvings);\r\n    }\r\n\r\n    function setHalvingReduction(uint256 halvingReduction) external onlyOwner {\r\n        require(halvingReduction > 0, \"LILYLOG:: Halving reduction must be higher than zero\");\r\n        require(halvingReduction < 100, \"LILYLOG:: Halving reduction must be lower than 100\");\r\n        _halvingReduction = halvingReduction;\r\n        emit SetHalvingReduction(halvingReduction);\r\n    }\r\n\r\n    function isFeeExempt(address addr) external view returns (bool) {\r\n        return _isFeeExempt[addr];\r\n    }\r\n\r\n    function getTradingInfo(address trader) external view returns (uint256, uint256, uint256) {\r\n        return (_tradingInfo[trader].boughtAmount, _tradingInfo[trader].soldAmount, _tradingInfo[trader].transferredAmount);\r\n    }\r\n\r\n    function getTotalTradingInfo() external view returns (uint256, uint256, uint256) {\r\n        return (_totalBoughtAmount, _totalSoldAmount, _totalTransferredAmount);\r\n    }\r\n\r\n    receive() payable external {}\r\n    \r\n    fallback() payable external {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"halvingCount\",\"type\":\"uint256\"}],\"name\":\"HalvingMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"OpenTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ammPair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPairs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"halvingReduction\",\"type\":\"uint256\"}],\"name\":\"SetHalvingReduction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"limit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxHoldingAmount\",\"type\":\"uint256\"}],\"name\":\"SetLimitation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxHalving\",\"type\":\"uint256\"}],\"name\":\"SetMaxHalving\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalTax\",\"type\":\"uint256\"}],\"name\":\"SetTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWalletTaxAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardWalletTaxAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"companyWalletTaxAllocation\",\"type\":\"uint256\"}],\"name\":\"SetTaxAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"companyWallet\",\"type\":\"address\"}],\"name\":\"SetTaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTradingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTradingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressLists\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"halvingReduction\",\"type\":\"uint256\"}],\"name\":\"setHalvingReduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"limited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHoldingAmount\",\"type\":\"uint256\"}],\"name\":\"setLimitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHalvings\",\"type\":\"uint256\"}],\"name\":\"setMaxHalving\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalTax\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityWalletTaxAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardWalletTaxAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"companyWalletTaxAllocation\",\"type\":\"uint256\"}],\"name\":\"setTaxAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"companyWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LILY", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dcf349fbb5b2124ca8cde13d58661142505ccec8c0e3ef9e2266f06c75608cbe"}