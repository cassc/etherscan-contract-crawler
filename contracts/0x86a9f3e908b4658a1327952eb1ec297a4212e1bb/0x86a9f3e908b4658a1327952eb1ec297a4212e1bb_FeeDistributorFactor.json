{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/feeDistributorFactory/FeeDistributorFactory.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"../assetRecovering/OwnableAssetRecoverer.sol\\\";\\nimport \\\"./IFeeDistributorFactory.sol\\\";\\nimport \\\"../feeDistributor/IFeeDistributor.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../access/OwnableWithOperator.sol\\\";\\nimport \\\"../p2pEth2Depositor/IP2pOrgUnlimitedEthDepositor.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\n\\n/// @notice Should be a FeeDistributor contract\\n/// @param _passedAddress passed address that does not support IFeeDistributor interface\\nerror FeeDistributorFactory__NotFeeDistributor(address _passedAddress);\\n\\n/// @notice Should be a P2pEth2Depositor contract\\n/// @param _passedAddress passed address that does not support IP2pEth2Depositor interface\\nerror FeeDistributorFactory__NotP2pEth2Depositor(address _passedAddress);\\n\\n/// @notice Reference FeeDistributor should be set before calling `createFeeDistributor`\\nerror FeeDistributorFactory__ReferenceFeeDistributorNotSet();\\n\\n/// @notice caller should be owner, operator, or P2pEth2Depositor contract\\n/// @param _caller calling address\\nerror FeeDistributorFactory__CallerNotAuthorized(address _caller);\\n\\n/// @notice Default client basis points should be >= 0 and <= 10000\\n/// @param _defaultClientBasisPoints passed incorrect default client basis points\\nerror FeeDistributorFactory__InvalidDefaultClientBasisPoints(uint96 _defaultClientBasisPoints);\\n\\n/// @title Factory for cloning (EIP-1167) FeeDistributor instances pre client\\ncontract FeeDistributorFactory is OwnableAssetRecoverer, OwnableWithOperator, ERC165, IFeeDistributorFactory {\\n\\n    /// @notice Default Client Basis Points\\n    /// @dev Used when no client config provided.\\n    /// Default Referrer Basis Points is zero.\\n    uint96 private s_defaultClientBasisPoints;\\n\\n    /// @notice The address of P2pEth2Depositor\\n    address private s_p2pEth2Depositor;\\n\\n    /// @notice client address -> array of client FeeDistributors mapping\\n    mapping(address => address[]) private s_allClientFeeDistributors;\\n\\n    /// @notice array of all FeeDistributors for all clients\\n    address[] private s_allFeeDistributors;\\n\\n    /// @dev Set values known at the initial deploy time.\\n    /// @param _defaultClientBasisPoints Default Client Basis Points\\n    constructor(uint96 _defaultClientBasisPoints) {\\n        if (_defaultClientBasisPoints >= 10000) {\\n            revert FeeDistributorFactory__InvalidDefaultClientBasisPoints(_defaultClientBasisPoints);\\n        }\\n\\n        s_defaultClientBasisPoints = _defaultClientBasisPoints;\\n\\n        emit FeeDistributorFactory__DefaultClientBasisPointsSet(_defaultClientBasisPoints);\\n    }\\n\\n    /// @notice Set a new version of P2pEth2Depositor contract\\n    /// @param _p2pEth2Depositor the address of the new P2pEth2Depositor contract\\n    function setP2pEth2Depositor(address _p2pEth2Depositor) external onlyOwner {\\n        if (!ERC165Checker.supportsInterface(_p2pEth2Depositor, type(IP2pOrgUnlimitedEthDepositor).interfaceId)) {\\n            revert FeeDistributorFactory__NotP2pEth2Depositor(_p2pEth2Depositor);\\n        }\\n\\n        s_p2pEth2Depositor = _p2pEth2Depositor;\\n        emit FeeDistributorFactory__P2pEth2DepositorSet(_p2pEth2Depositor);\\n    }\\n\\n    /// @notice Set a new Default Client Basis Points\\n    /// @param _defaultClientBasisPoints Default Client Basis Points\\n    function setDefaultClientBasisPoints(uint96 _defaultClientBasisPoints) external onlyOwner {\\n        if (_defaultClientBasisPoints >= 10000) {\\n            revert FeeDistributorFactory__InvalidDefaultClientBasisPoints(_defaultClientBasisPoints);\\n        }\\n\\n        s_defaultClientBasisPoints = _defaultClientBasisPoints;\\n\\n        emit FeeDistributorFactory__DefaultClientBasisPointsSet(_defaultClientBasisPoints);\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function createFeeDistributor(\\n        address _referenceFeeDistributor,\\n        FeeRecipient memory _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external returns (address newFeeDistributorAddress) {\\n        check_Operator_Owner_P2pEth2Depositor(msg.sender);\\n\\n        if (_referenceFeeDistributor == address(0)) {\\n            revert FeeDistributorFactory__ReferenceFeeDistributorNotSet();\\n        }\\n\\n        if (!ERC165Checker.supportsInterface(_referenceFeeDistributor, type(IFeeDistributor).interfaceId)) {\\n            revert FeeDistributorFactory__NotFeeDistributor(_referenceFeeDistributor);\\n        }\\n\\n        if (_clientConfig.basisPoints == 0) {\\n            _clientConfig.basisPoints = s_defaultClientBasisPoints;\\n        }\\n\\n        // clone the reference implementation of FeeDistributor\\n        newFeeDistributorAddress = Clones.cloneDeterministic(\\n            _referenceFeeDistributor,\\n            _getSalt(_clientConfig, _referrerConfig)\\n        );\\n\\n        // cast address to FeeDistributor\\n        IFeeDistributor newFeeDistributor = IFeeDistributor(newFeeDistributorAddress);\\n\\n        // set the client address to the cloned FeeDistributor instance\\n        newFeeDistributor.initialize(_clientConfig, _referrerConfig);\\n\\n        // append new FeeDistributor address to all client feeDistributors array\\n        s_allClientFeeDistributors[_clientConfig.recipient].push(newFeeDistributorAddress);\\n\\n        // append new FeeDistributor address to all feeDistributors array\\n        s_allFeeDistributors.push(newFeeDistributorAddress);\\n\\n        // emit event with the address of the newly created instance for the external listener\\n        emit FeeDistributorFactory__FeeDistributorCreated(\\n            newFeeDistributorAddress,\\n            _clientConfig.recipient,\\n            _referenceFeeDistributor,\\n            _clientConfig.basisPoints\\n        );\\n\\n        return newFeeDistributorAddress;\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function predictFeeDistributorAddress(\\n        address _referenceFeeDistributor,\\n        FeeRecipient memory _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) public view returns (address) {\\n        if (_clientConfig.basisPoints == 0) {\\n            _clientConfig.basisPoints = s_defaultClientBasisPoints;\\n        }\\n\\n        return Clones.predictDeterministicAddress(\\n            _referenceFeeDistributor,\\n            _getSalt(_clientConfig, _referrerConfig)\\n        );\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function allClientFeeDistributors(address _client) external view returns (address[] memory) {\\n        return s_allClientFeeDistributors[_client];\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function allFeeDistributors() external view returns (address[] memory) {\\n        return s_allFeeDistributors;\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function p2pEth2Depositor() external view returns (address) {\\n        return s_p2pEth2Depositor;\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function defaultClientBasisPoints() external view returns (uint96) {\\n        return s_defaultClientBasisPoints;\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IFeeDistributorFactory).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IOwnable\\n    function owner() public view override(Ownable, OwnableBase, IOwnable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function operator() public view override(OwnableWithOperator, IFeeDistributorFactory) returns (address) {\\n        return super.operator();\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function checkOperatorOrOwner(address _address) public view override(OwnableWithOperator, IFeeDistributorFactory) {\\n        return super.checkOperatorOrOwner(_address);\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function checkP2pEth2Depositor(address _address) external view {\\n        if (s_p2pEth2Depositor != _address) {\\n            revert FeeDistributorFactory__NotP2pEth2Depositor(_address);\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFactory\\n    function check_Operator_Owner_P2pEth2Depositor(address _address) public view {\\n        address currentOwner = owner();\\n        address currentOperator = operator();\\n\\n        if (currentOperator != _address\\n            && currentOwner != _address\\n            && s_p2pEth2Depositor != _address\\n        ) {\\n            revert FeeDistributorFactory__CallerNotAuthorized(_address);\\n        }\\n    }\\n\\n    /// @notice Calculates the salt required for deterministic clone creation\\n    /// depending on clientConfig and referrerConfig\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    /// @return bytes32 salt\\n    function _getSalt(\\n        FeeRecipient memory _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) private pure returns (bytes32)\\n    {\\n        return keccak256(abi.encode(_clientConfig, _referrerConfig));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assetRecovering/OwnableAssetRecoverer.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, Lido <info@lido.fi>\\n// SPDX-License-Identifier: MIT\\n\\n// https://github.com/lidofinance/lido-otc-seller/blob/master/contracts/lib/AssetRecoverer.sol\\npragma solidity 0.8.10;\\n\\nimport \\\"./OwnableTokenRecoverer.sol\\\";\\nimport \\\"./AssetRecoverer.sol\\\";\\n\\n/// @title Public Asset Recoverer with public functions callable by assetAccessingAddress\\n/// @notice Recover ether, ERC20, ERC721 and ERC1155 from a derived contract\\nabstract contract OwnableAssetRecoverer is OwnableTokenRecoverer, AssetRecoverer {\\n\\n    // Functions\\n\\n    /**\\n     * @notice transfers ether from this contract\\n     * @dev using `address.call` is safer to transfer to other contracts\\n     * @param _recipient address to transfer ether to\\n     * @param _amount amount of ether to transfer\\n     */\\n    function transferEther(address _recipient, uint256 _amount) external onlyOwner {\\n        _transferEther(_recipient, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/feeDistributorFactory/IFeeDistributorFactory.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../access/IOwnable.sol\\\";\\nimport \\\"../feeDistributor/IFeeDistributor.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\n\\n/// @dev External interface of FeeDistributorFactory declared to support ERC165 detection.\\ninterface IFeeDistributorFactory is IOwnable, IERC165 {\\n\\n    /// @notice Emits when a new FeeDistributor instance has been created for a client\\n    /// @param _newFeeDistributorAddress address of the newly created FeeDistributor contract instance\\n    /// @param _clientAddress address of the client for whom the new instance was created\\n    /// @param _referenceFeeDistributor The address of the reference implementation of FeeDistributor used as the basis for clones\\n    /// @param _clientBasisPoints client basis points (percent * 100)\\n    event FeeDistributorFactory__FeeDistributorCreated(\\n        address indexed _newFeeDistributorAddress,\\n        address indexed _clientAddress,\\n        address indexed _referenceFeeDistributor,\\n        uint96 _clientBasisPoints\\n    );\\n\\n    /// @notice Emits when a new P2pEth2Depositor contract address has been set.\\n    /// @param _p2pEth2Depositor the address of the new P2pEth2Depositor contract\\n    event FeeDistributorFactory__P2pEth2DepositorSet(\\n        address indexed _p2pEth2Depositor\\n    );\\n\\n    /// @notice Emits when a new value of defaultClientBasisPoints has been set.\\n    /// @param _defaultClientBasisPoints new value of defaultClientBasisPoints\\n    event FeeDistributorFactory__DefaultClientBasisPointsSet(\\n        uint96 _defaultClientBasisPoints\\n    );\\n\\n    /// @notice Creates a FeeDistributor instance for a client\\n    /// @dev _referrerConfig can be zero if there is no referrer.\\n    ///\\n    /// @param _referenceFeeDistributor The address of the reference implementation of FeeDistributor used as the basis for clones\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    /// @return newFeeDistributorAddress user FeeDistributor instance that has just been deployed\\n    function createFeeDistributor(\\n        address _referenceFeeDistributor,\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external returns (address newFeeDistributorAddress);\\n\\n    /// @notice Computes the address of a FeeDistributor created by `createFeeDistributor` function\\n    /// @dev FeeDistributor instances are guaranteed to have the same address if all of\\n    /// 1) referenceFeeDistributor 2) clientConfig 3) referrerConfig\\n    /// are the same\\n    /// @param _referenceFeeDistributor The address of the reference implementation of FeeDistributor used as the basis for clones\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    /// @return address user FeeDistributor instance that will be or has been deployed\\n    function predictFeeDistributorAddress(\\n        address _referenceFeeDistributor,\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external view returns (address);\\n\\n    /// @notice Returns an array of client FeeDistributors\\n    /// @param _client client address\\n    /// @return address[] array of client FeeDistributors\\n    function allClientFeeDistributors(\\n        address _client\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Returns an array of all FeeDistributors for all clients\\n    /// @return address[] array of all FeeDistributors\\n    function allFeeDistributors() external view returns (address[] memory);\\n\\n    /// @notice The address of P2pEth2Depositor\\n    /// @return address of P2pEth2Depositor\\n    function p2pEth2Depositor() external view returns (address);\\n\\n    /// @notice Returns default client basis points\\n    /// @return default client basis points\\n    function defaultClientBasisPoints() external view returns (uint96);\\n\\n    /// @notice Returns the current operator\\n    /// @return address of the current operator\\n    function operator() external view returns (address);\\n\\n    /// @notice Reverts if the passed address is neither operator nor owner\\n    /// @param _address passed address\\n    function checkOperatorOrOwner(address _address) external view;\\n\\n    /// @notice Reverts if the passed address is not P2pEth2Depositor\\n    /// @param _address passed address\\n    function checkP2pEth2Depositor(address _address) external view;\\n\\n    /// @notice Reverts if the passed address is neither of: 1) operator 2) owner 3) P2pEth2Depositor\\n    /// @param _address passed address\\n    function check_Operator_Owner_P2pEth2Depositor(address _address) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/feeDistributor/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\n\\n/// @dev External interface of FeeDistributor declared to support ERC165 detection.\\ninterface IFeeDistributor is IERC165 {\\n\\n    /// @notice Emits once the client and the optional referrer have been set.\\n    /// @param _client address of the client.\\n    /// @param _clientBasisPoints basis points (percent * 100) of EL rewards that should go to the client\\n    /// @param _referrer address of the referrer.\\n    /// @param _referrerBasisPoints basis points (percent * 100) of EL rewards that should go to the referrer\\n    event FeeDistributor__Initialized(\\n        address indexed _client,\\n        uint96 _clientBasisPoints,\\n        address indexed _referrer,\\n        uint96 _referrerBasisPoints\\n    );\\n\\n    /// @notice Emits on successful withdrawal\\n    /// @param _serviceAmount how much wei service received\\n    /// @param _clientAmount how much wei client received\\n    /// @param _referrerAmount how much wei referrer received\\n    event FeeDistributor__Withdrawn(\\n        uint256 _serviceAmount,\\n        uint256 _clientAmount,\\n        uint256 _referrerAmount\\n    );\\n\\n    /// @notice Emits on request for a voluntary exit of validators\\n    /// @param _pubkeys pubkeys of validators\\n    event FeeDistributor__VoluntaryExit(\\n        bytes[] _pubkeys\\n    );\\n\\n    /// @notice Emits if case there was some ether left after `withdraw` and it has been sent successfully.\\n    /// @param _to destination address for ether.\\n    /// @param _amount how much wei the destination address received.\\n    event FeeDistributor__EtherRecovered(\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n    /// @notice Set client address.\\n    /// @dev Could not be in the constructor since it is different for different clients.\\n    /// _referrerConfig can be zero if there is no referrer.\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    function initialize(\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external;\\n\\n    /// @notice Increase the number of deposited validators.\\n    /// @dev Should be called when a new ETH2 deposit has been made\\n    /// @param _validatorCountToAdd number of newly deposited validators\\n    function increaseDepositedCount(\\n        uint32 _validatorCountToAdd\\n    ) external;\\n\\n    /// @notice Request a voluntary exit of validators\\n    /// @dev Should be called by the client when they want to signal P2P that certain validators need to be exited\\n    /// @param _pubkeys pubkeys of validators\\n    function voluntaryExit(\\n        bytes[] calldata _pubkeys\\n    ) external;\\n\\n    /// @notice Returns the factory address\\n    /// @return address factory address\\n    function factory() external view returns (address);\\n\\n    /// @notice Returns the service address\\n    /// @return address service address\\n    function service() external view returns (address);\\n\\n    /// @notice Returns the client address\\n    /// @return address client address\\n    function client() external view returns (address);\\n\\n    /// @notice Returns the client basis points\\n    /// @return uint256 client basis points\\n    function clientBasisPoints() external view returns (uint256);\\n\\n    /// @notice Returns the referrer address\\n    /// @return address referrer address\\n    function referrer() external view returns (address);\\n\\n    /// @notice Returns the referrer basis points\\n    /// @return uint256 referrer basis points\\n    function referrerBasisPoints() external view returns (uint256);\\n\\n    /// @notice Returns the address for ETH2 0x01 withdrawal credentials associated with this FeeDistributor\\n    /// @dev Return FeeDistributor's own address if FeeDistributor should be CL rewards recipient\\n    /// Otherwise, return the client address\\n    /// @return address address for ETH2 0x01 withdrawal credentials\\n    function eth2WithdrawalCredentialsAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./OwnableBase.sol\\\";\\n\\n/**\\n* @notice _newOwner cannot be a zero address\\n*/\\nerror Ownable__NewOwnerIsZeroAddress();\\n\\n/**\\n * @dev OpenZeppelin's Ownable with modifier onlyOwner extracted to OwnableBase\\n * and removed `renounceOwnership`\\n */\\nabstract contract Ownable is OwnableBase {\\n\\n    /**\\n     * @dev Emits when the owner has been changed.\\n     * @param _previousOwner address of the previous owner\\n     * @param _newOwner address of the new owner\\n     */\\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\\n\\n    address private s_owner;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return s_owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     * @param _newOwner address of the new owner\\n     */\\n    function transferOwnership(address _newOwner) external virtual onlyOwner {\\n        if (_newOwner == address(0)) {\\n            revert Ownable__NewOwnerIsZeroAddress();\\n        }\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address oldOwner = s_owner;\\n        s_owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/OwnableWithOperator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ownable2Step.sol\\\";\\nimport \\\"./IOwnableWithOperator.sol\\\";\\n\\n/**\\n* @notice newOperator is the zero address\\n*/\\nerror Access__ZeroNewOperator();\\n\\n/**\\n* @notice newOperator is the same as the old one\\n*/\\nerror Access__SameOperator(address _operator);\\n\\n/**\\n* @notice caller is neither the operator nor owner\\n*/\\nerror Access__CallerNeitherOperatorNorOwner(address _caller, address _operator, address _owner);\\n\\n/**\\n* @notice address is neither the operator nor owner\\n*/\\nerror Access__AddressNeitherOperatorNorOwner(address _address, address _operator, address _owner);\\n\\n/**\\n * @dev Ownable with an additional role of operator\\n */\\nabstract contract OwnableWithOperator is Ownable2Step, IOwnableWithOperator {\\n    address private s_operator;\\n\\n    /**\\n     * @dev Emits when the operator has been changed\\n     * @param _previousOperator address of the previous operator\\n     * @param _newOperator address of the new operator\\n     */\\n    event OperatorChanged(\\n        address indexed _previousOperator,\\n        address indexed _newOperator\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the operator or the owner.\\n     */\\n    modifier onlyOperatorOrOwner() {\\n        address currentOwner = owner();\\n        address currentOperator = s_operator;\\n\\n        if (currentOperator != _msgSender() && currentOwner != _msgSender()) {\\n            revert Access__CallerNeitherOperatorNorOwner(_msgSender(), currentOperator, currentOwner);\\n        }\\n\\n        _;\\n    }\\n\\n    function checkOperatorOrOwner(address _address) public view virtual {\\n        address currentOwner = owner();\\n        address currentOperator = s_operator;\\n\\n        if (_address == address(0) || (currentOperator != _address && currentOwner != _address)) {\\n            revert Access__AddressNeitherOperatorNorOwner(_address, currentOperator, currentOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current operator.\\n     */\\n    function operator() public view virtual returns (address) {\\n        return s_operator;\\n    }\\n\\n    /**\\n     * @dev Transfers operator to a new account (`newOperator`).\\n     * Can only be called by the current owner.\\n     */\\n    function changeOperator(address _newOperator) external virtual onlyOwner {\\n        if (_newOperator == address(0)) {\\n            revert Access__ZeroNewOperator();\\n        }\\n        if (_newOperator == s_operator) {\\n            revert Access__SameOperator(_newOperator);\\n        }\\n\\n        _changeOperator(_newOperator);\\n    }\\n\\n    /**\\n     * @dev Transfers operator to a new account (`newOperator`).\\n     * Internal function without access restriction.\\n     */\\n    function _changeOperator(address _newOperator) internal virtual {\\n        address oldOperator = s_operator;\\n        s_operator = _newOperator;\\n        emit OperatorChanged(oldOperator, _newOperator);\\n    }\\n\\n    /**\\n     * @dev Dismisses the old operator without setting a new one.\\n     * Can only be called by the current owner.\\n     */\\n    function dismissOperator() external virtual onlyOwner {\\n        _changeOperator(address(0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/p2pEth2Depositor/IP2pOrgUnlimitedEthDepositor.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../feeDistributor/IFeeDistributor.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\n\\n/// @dev External interface of P2pOrgUnlimitedEthDepositor declared to support ERC165 detection.\\ninterface IP2pOrgUnlimitedEthDepositor is IERC165 {\\n\\n    /// @notice Emits when a client adds ETH for staking\\n    /// @param _sender address who sent ETH\\n    /// @param _feeDistributorInstance address of FeeDistributor instance that determines the terms of staking service\\n    /// @param _amount sent amount of ETH in wei\\n    /// @param _expiration block timestamp after which the client will be able to get a refund\\n    event P2pOrgUnlimitedEthDepositor__ClientEthAdded(\\n        address indexed _sender,\\n        address indexed _feeDistributorInstance,\\n        uint256 _amount,\\n        uint40 _expiration\\n    );\\n\\n    /// @notice Emits when a refund has been sent to the client\\n    /// @param _feeDistributorInstance address of FeeDistributor instance that was associated with the client deposit\\n    /// @param _client address who received the refunded ETH\\n    /// @param _amount refunded amount of ETH in wei\\n    event P2pOrgUnlimitedEthDepositor__Refund(\\n        address indexed _feeDistributorInstance,\\n        address indexed _client,\\n        uint256 _amount\\n    );\\n\\n    /// @notice Emits when P2P has made ETH2 deposits with client funds and withdrawal credentials\\n    /// @param _feeDistributorAddress address of FeeDistributor instance that was associated with the client deposit\\n    /// @param _validatorCount number of validators that has been created\\n    event P2pOrgUnlimitedEthDepositor__Eth2Deposit(\\n        address indexed _feeDistributorAddress,\\n        uint256 _validatorCount\\n    );\\n\\n    /// @notice Emits when all the available ETH has been forwarded to Beacon DepositContract\\n    /// @param _feeDistributorAddress address of FeeDistributor instance that was associated with the client deposit\\n    event P2pOrgUnlimitedEthDepositor__Eth2DepositCompleted(\\n        address indexed _feeDistributorAddress\\n    );\\n\\n    /// @notice Emits when some (but not all) of the available ETH has been forwarded to Beacon DepositContract\\n    /// @param _feeDistributorAddress address of FeeDistributor instance that was associated with the client deposit\\n    event P2pOrgUnlimitedEthDepositor__Eth2DepositInProgress(\\n        address indexed _feeDistributorAddress\\n    );\\n\\n    /// @notice Emits when P2P rejects the service for a given FeeDistributor client instance.\\n    /// The client can get a full refund immediately in this case.\\n    /// @param _feeDistributorAddress address of FeeDistributor instance that was associated with the client deposit\\n    /// @param _reason optional reason why P2P decided not to provide service\\n    event P2pOrgUnlimitedEthDepositor__ServiceRejected(\\n        address indexed _feeDistributorAddress,\\n        string _reason\\n    );\\n\\n    /// @notice Send unlimited amount of ETH along with the fixed terms of staking service\\n    /// Callable by clients\\n    /// @param _referenceFeeDistributor address of FeeDistributor template that determines the terms of staking service\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    /// @return feeDistributorInstance client FeeDistributor instance corresponding to the passed template\\n    function addEth(\\n        address _referenceFeeDistributor,\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external payable returns(address feeDistributorInstance);\\n\\n    /// @notice Reject the service for a given FeeDistributor client instance.\\n    /// @dev Allows the client to avoid waiting for expiration to get a refund.\\n    /// @dev Can be helpful if the client made a mistake while adding ETH.\\n    /// @dev Callable by P2P\\n    /// @param _feeDistributorInstance client FeeDistributor instance corresponding to the passed template\\n    /// @param _reason optional reason why P2P decided not to provide service\\n    function rejectService(\\n        address _feeDistributorInstance,\\n        string calldata _reason\\n    ) external;\\n\\n    /// @notice refund the unused for staking ETH after the expiration timestamp.\\n    /// If not called, all multiples of 32 ETH will be used for staking eventually.\\n    /// @param _feeDistributorInstance client FeeDistributor instance that has non-zero ETH amount (can be checked by `depositAmount`)\\n    function refund(address _feeDistributorInstance) external;\\n\\n    /// @notice Send ETH to ETH2 DepositContract on behalf of the client. Callable by P2P\\n    /// @param _feeDistributorInstance user FeeDistributor instance that determines the terms of staking service\\n    /// @param _pubkeys BLS12-381 public keys\\n    /// @param _signatures BLS12-381 signatures\\n    /// @param _depositDataRoots SHA-256 hashes of the SSZ-encoded DepositData objects\\n    function makeBeaconDeposit(\\n        address _feeDistributorInstance,\\n        bytes[] calldata _pubkeys,\\n        bytes[] calldata _signatures,\\n        bytes32[] calldata _depositDataRoots\\n    ) external;\\n\\n    /// @notice Returns the total contract ETH balance in wei\\n    /// @return uint256 total contract ETH balance in wei\\n    function totalBalance() external view returns (uint256);\\n\\n    /// @notice Returns the amount of ETH in wei that is associated with a client FeeDistributor instance\\n    /// @param _feeDistributorInstance address of client FeeDistributor instance\\n    /// @return uint112 amount of ETH in wei\\n    function depositAmount(address _feeDistributorInstance) external view returns (uint112);\\n\\n    /// @notice Returns the block timestamp after which the client will be able to get a refund\\n    /// @param _feeDistributorInstance address of client FeeDistributor instance\\n    /// @return uint40 block timestamp\\n    function depositExpiration(address _feeDistributorInstance) external view returns (uint40);\\n\\n    /// @notice Returns the status of the deposit\\n    /// @param _feeDistributorInstance address of client FeeDistributor instance\\n    /// @return ClientDepositStatus status\\n    function depositStatus(address _feeDistributorInstance) external view returns (ClientDepositStatus);\\n}\\n\"\r\n    },\r\n    \"contracts/structs/P2pStructs.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../feeDistributor/IFeeDistributor.sol\\\";\\n\\n/// @dev 256 bit struct\\n/// @member basisPoints basis points (percent * 100) of EL rewards that should go to the recipient\\n/// @member recipient address of the recipient\\nstruct FeeRecipient {\\n    uint96 basisPoints;\\n    address payable recipient;\\n}\\n\\n/// @dev 256 bit struct\\n/// @member depositedCount the number of deposited validators\\n/// @member exitedCount the number of validators requested to exit\\n/// @member collateralReturnedValue amount of ETH returned to the client to cover the collaterals\\n/// @member cooldownUntil timestamp after which it will be possible to withdraw ignoring the client's revert on ETH receive\\nstruct ValidatorData {\\n    uint32 depositedCount;\\n    uint32 exitedCount;\\n    uint112 collateralReturnedValue;\\n    uint80 cooldownUntil;\\n}\\n\\n/// @dev status of the client deposit\\n/// @member None default status indicating that no ETH is waiting to be forwarded to Beacon DepositContract\\n/// @member EthAdded client added ETH\\n/// @member BeaconDepositInProgress P2P has forwarded some (but not all) ETH to Beacon DepositContract\\n/// If all ETH has been forwarded, the status will be None.\\n/// @member ServiceRejected P2P has rejected the service for a given FeeDistributor instance\\n// The client can get a refund immediately.\\nenum ClientDepositStatus {\\n    None,\\n    EthAdded,\\n    BeaconDepositInProgress,\\n    ServiceRejected\\n}\\n\\n/// @dev 256 bit struct\\n/// @member amount amount of ETH in wei to be used for an ETH2 deposit corresponding to a particular FeeDistributor instance\\n/// @member expiration block timestamp after which the client will be able to get a refund\\n/// @member status deposit status\\n/// @member reservedForFutureUse unused space making up to 256 bit\\nstruct ClientDeposit {\\n    uint112 amount;\\n    uint40 expiration;\\n    ClientDepositStatus status;\\n    uint96 reservedForFutureUse;\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/assetRecovering/OwnableTokenRecoverer.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, Lido <info@lido.fi>\\n// SPDX-License-Identifier: MIT\\n\\n// https://github.com/lidofinance/lido-otc-seller/blob/master/contracts/lib/AssetRecoverer.sol\\npragma solidity 0.8.10;\\n\\nimport \\\"./TokenRecoverer.sol\\\";\\nimport \\\"../access/OwnableBase.sol\\\";\\n\\n/// @title Token Recoverer with public functions callable by assetAccessingAddress\\n/// @notice Recover ERC20, ERC721 and ERC1155 from a derived contract\\nabstract contract OwnableTokenRecoverer is TokenRecoverer, OwnableBase {\\n    // Functions\\n\\n    /**\\n     * @notice transfer an ERC20 token from this contract\\n     * @dev `SafeERC20.safeTransfer` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC20 token\\n     * @param _recipient address to transfer the tokens to\\n     * @param _amount amount of tokens to transfer\\n     */\\n    function transferERC20(\\n        address _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transferERC20(_token, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC721 token from this contract\\n     * @dev `IERC721.safeTransferFrom` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC721 token\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token\\n     */\\n    function transferERC721(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        _transferERC721(_token, _recipient, _tokenId);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC1155 token from this contract\\n     * @dev see `AssetRecoverer`\\n     * @param _token address of the ERC1155 token that is being recovered\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token to transfer\\n     * @param _amount amount of tokens to transfer\\n     * @param _data data to transfer along\\n     */\\n    function transferERC1155(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external onlyOwner {\\n        _transferERC1155(_token, _recipient, _tokenId, _amount, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assetRecovering/AssetRecoverer.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, Lido <info@lido.fi>\\n// SPDX-License-Identifier: MIT\\n\\n// https://github.com/lidofinance/lido-otc-seller/blob/master/contracts/lib/AssetRecoverer.sol\\npragma solidity 0.8.10;\\n\\nimport \\\"./TokenRecoverer.sol\\\";\\n\\n/**\\n* @notice could not transfer ether\\n* @param _recipient address to transfer ether to\\n* @param _amount amount of ether to transfer\\n*/\\nerror AssetRecoverer__TransferFailed(address _recipient, uint256 _amount);\\n\\n\\n/// @title Asset Recoverer\\n/// @notice Recover ether, ERC20, ERC721 and ERC1155 from a derived contract\\nabstract contract AssetRecoverer is TokenRecoverer {\\n    event EtherTransferred(address indexed _recipient, uint256 _amount);\\n\\n    /**\\n     * @notice transfers ether from this contract\\n     * @dev using `address.call` is safer to transfer to other contracts\\n     * @param _recipient address to transfer ether to\\n     * @param _amount amount of ether to transfer\\n     */\\n    function _transferEther(address _recipient, uint256 _amount) internal virtual burnDisallowed(_recipient) {\\n        (bool success, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert AssetRecoverer__TransferFailed(_recipient, _amount);\\n        }\\n        emit EtherTransferred(_recipient, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assetRecovering/TokenRecoverer.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, Lido <info@lido.fi>\\n// SPDX-License-Identifier: MIT\\n\\n// https://github.com/lidofinance/lido-otc-seller/blob/master/contracts/lib/AssetRecoverer.sol\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"../@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"../@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {SafeERC20} from \\\"../@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n* @notice prevents burn for transfer functions\\n* @dev _recipient should not be a zero address\\n*/\\nerror TokenRecoverer__NoBurn();\\n\\n\\n/// @title Token Recoverer\\n/// @notice Recover ERC20, ERC721 and ERC1155 from a derived contract\\nabstract contract TokenRecoverer {\\n    using SafeERC20 for IERC20;\\n\\n    event ERC20Transferred(address indexed _token, address indexed _recipient, uint256 _amount);\\n    event ERC721Transferred(address indexed _token, address indexed _recipient, uint256 _tokenId);\\n    event ERC1155Transferred(address indexed _token, address indexed _recipient, uint256 _tokenId, uint256 _amount, bytes _data);\\n\\n    /**\\n     * @notice prevents burn for transfer functions\\n     * @dev checks for zero address and reverts if true\\n     * @param _recipient address of the transfer recipient\\n     */\\n    modifier burnDisallowed(address _recipient) {\\n        if (_recipient == address(0)) {\\n            revert TokenRecoverer__NoBurn();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice transfer an ERC20 token from this contract\\n     * @dev `SafeERC20.safeTransfer` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC20 token\\n     * @param _recipient address to transfer the tokens to\\n     * @param _amount amount of tokens to transfer\\n     */\\n    function _transferERC20(\\n        address _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal virtual burnDisallowed(_recipient) {\\n        IERC20(_token).safeTransfer(_recipient, _amount);\\n        emit ERC20Transferred(_token, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC721 token from this contract\\n     * @dev `IERC721.safeTransferFrom` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC721 token\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token\\n     */\\n    function _transferERC721(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId\\n    ) internal virtual burnDisallowed(_recipient) {\\n        IERC721(_token).transferFrom(address(this), _recipient, _tokenId);\\n        emit ERC721Transferred(_token, _recipient, _tokenId);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC1155 token from this contract\\n     * @dev `IERC1155.safeTransferFrom` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC1155 token that is being recovered\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token to transfer\\n     * @param _amount amount of tokens to transfer\\n     * @param _data data to transfer along\\n     */\\n    function _transferERC1155(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) internal virtual burnDisallowed(_recipient) {\\n        IERC1155(_token).safeTransferFrom(address(this), _recipient, _tokenId, _amount, _data);\\n        emit ERC1155Transferred(_token, _recipient, _tokenId, _amount, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/OwnableBase.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n* @notice Throws if called by any account other than the owner.\\n* @param _caller address of the caller\\n* @param _owner address of the owner\\n*/\\nerror OwnableBase__CallerNotOwner(address _caller, address _owner);\\n\\n/**\\n * @dev minimalistic version of OpenZeppelin's Ownable.\\n * The owner is abstract and is not persisted in storage.\\n * Needs to be overridden in a child contract.\\n */\\nabstract contract OwnableBase is Context, IOwnable {\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        address caller = _msgSender();\\n        address currentOwner = owner();\\n\\n        if (currentOwner != caller) {\\n            revert OwnableBase__CallerNotOwner(caller, currentOwner);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     * Needs to be overridden in a child contract.\\n     */\\n    function owner() public view virtual override returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev External interface of Ownable.\\n */\\ninterface IOwnable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n* @notice caller must be pendingOwner\\n*/\\nerror Ownable2Step__CallerNotNewOwner();\\n\\n/**\\n* @notice new owner address should be different from the current owner\\n*/\\nerror Ownable2Step__NewOwnerShouldNotBeCurrentOwner();\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private s_pendingOwner;\\n\\n    /**\\n     * @dev Emits in transferOwnership (start of the transfer)\\n     * @param _previousOwner address of the previous owner\\n     * @param _newOwner address of the new owner\\n     */\\n    event OwnershipTransferStarted(address indexed _previousOwner, address indexed _newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return s_pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        address currentOwner = owner();\\n        if (newOwner == currentOwner) {\\n            revert Ownable2Step__NewOwnerShouldNotBeCurrentOwner();\\n        }\\n\\n        s_pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(currentOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete s_pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert Ownable2Step__CallerNotNewOwner();\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/IOwnableWithOperator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @dev Ownable with an additional role of operator\\n */\\ninterface IOwnableWithOperator is IOwnable {\\n    /**\\n     * @dev Returns the current operator.\\n     */\\n    function operator() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_defaultClientBasisPoints\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Access__AddressNeitherOperatorNorOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"Access__SameOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Access__ZeroNewOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetRecoverer__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"FeeDistributorFactory__CallerNotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_defaultClientBasisPoints\",\"type\":\"uint96\"}],\"name\":\"FeeDistributorFactory__InvalidDefaultClientBasisPoints\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"FeeDistributorFactory__NotFeeDistributor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"FeeDistributorFactory__NotP2pEth2Depositor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeDistributorFactory__ReferenceFeeDistributorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable2Step__CallerNotNewOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable2Step__NewOwnerShouldNotBeCurrentOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnableBase__CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenRecoverer__NoBurn\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC1155Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_defaultClientBasisPoints\",\"type\":\"uint96\"}],\"name\":\"FeeDistributorFactory__DefaultClientBasisPointsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newFeeDistributorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_clientAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referenceFeeDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_clientBasisPoints\",\"type\":\"uint96\"}],\"name\":\"FeeDistributorFactory__FeeDistributorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_p2pEth2Depositor\",\"type\":\"address\"}],\"name\":\"FeeDistributorFactory__P2pEth2DepositorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"allClientFeeDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allFeeDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkOperatorOrOwner\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkP2pEth2Depositor\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"check_Operator_Owner_P2pEth2Depositor\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referenceFeeDistributor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"basisPoints\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct FeeRecipient\",\"name\":\"_clientConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"basisPoints\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct FeeRecipient\",\"name\":\"_referrerConfig\",\"type\":\"tuple\"}],\"name\":\"createFeeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newFeeDistributorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultClientBasisPoints\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dismissOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2pEth2Depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referenceFeeDistributor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"basisPoints\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct FeeRecipient\",\"name\":\"_clientConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"basisPoints\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct FeeRecipient\",\"name\":\"_referrerConfig\",\"type\":\"tuple\"}],\"name\":\"predictFeeDistributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_defaultClientBasisPoints\",\"type\":\"uint96\"}],\"name\":\"setDefaultClientBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_p2pEth2Depositor\",\"type\":\"address\"}],\"name\":\"setP2pEth2Depositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FeeDistributorFactory", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000002328", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}