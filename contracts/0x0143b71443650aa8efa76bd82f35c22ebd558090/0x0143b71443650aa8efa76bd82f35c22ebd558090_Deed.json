{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n// File: contracts/abstract/OwnableDelegateProxy.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract OwnableDelegateProxy {}\r\n// File: contracts/abstract/ProxyRegistry.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n// Part: ProxyRegistry\r\n\r\ncontract ProxyRegistry {\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\n// File: contracts/abstract/IERC1155TokenReceiver.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value MUST result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _id        The id of the token being transferred\r\n     * @param _amount    The amount of tokens being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    )\r\n        external returns (\r\n            bytes4\r\n        )\r\n    ;\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value WILL result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _ids       An array containing ids of each token being transferred\r\n     * @param _amounts   An array containing amounts of each token being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address _from,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _amounts,\r\n        bytes calldata _data\r\n    )\r\n        external returns (\r\n            bytes4\r\n        )\r\n    ;\r\n\r\n    /**\r\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n     *      This function MUST NOT consume more than 5,000 gas.\r\n     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n// File: contracts/abstract/ERC1155Metadata.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @notice Contract that handles metadata related methods.\r\n * @dev Methods assume a deterministic generation of URI based on token IDs.\r\n *      Methods also assume that URI uses hex representation of token IDs.\r\n */\r\nabstract contract ERC1155Metadata {\r\n\r\n    /***********************************|\r\n     *   |     Metadata Public Function s    |\r\n     |__________________________________*/\r\n    /**\r\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n     * @dev URIs are defined in RFC 3986.\r\n     *      URIs are assumed to be deterministically generated based on token ID\r\n     *      Token IDs are assumed to be represented in their hex format in URIs\r\n     * @return URI string\r\n     */\r\n    function uri(uint256 _id) external view virtual returns (string memory);\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/IERC1155.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC1155 {\r\n    // Events\r\n    /**\r\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n     *   Operator MUST be msg.sender\r\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n     */\r\n    event TransferSingle(address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _id,\r\n        uint256 _amount);\r\n\r\n    /**\r\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n     *   Operator MUST be msg.sender\r\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n     */\r\n    event TransferBatch(address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256[] _ids,\r\n        uint256[] _amounts);\r\n\r\n    /**\r\n     * @dev MUST emit when an approval is updated\r\n     */\r\n    event ApprovalForAll(address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved);\r\n\r\n    /**\r\n     * @dev MUST emit when the URI is updated for a token ID\r\n     *   URIs are defined in RFC 3986\r\n     *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\r\n     */\r\n    event URI(string _uri, uint256 indexed _id);\r\n\r\n    /**\r\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n     * @dev MUST emit TransferSingle event on success\r\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n     * MUST throw if `_to` is the zero address\r\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n     * MUST throw on any other error\r\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * @param _from    Source address\r\n     * @param _to      Target address\r\n     * @param _id      ID of the token type\r\n     * @param _amount  Transfered amount\r\n     * @param _data    Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n     * @dev MUST emit TransferBatch event on success\r\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n     * MUST throw if `_to` is the zero address\r\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n     * MUST throw on any other error\r\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n     * @param _from     Source addresses\r\n     * @param _to       Target addresses\r\n     * @param _ids      IDs of each token type\r\n     * @param _amounts  Transfer amounts per token type\r\n     * @param _data     Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _amounts,\r\n        bytes calldata _data\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Get the balance of an account's Tokens\r\n     * @param _owner  The address of the token holder\r\n     * @param _id     ID of the Token\r\n     * @return        The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id) external view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the balance of multiple account/token pairs\r\n     * @param _owners The addresses of the token holders\r\n     * @param _ids    ID of the Tokens\r\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata _owners,\r\n        uint256[] calldata _ids\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory\r\n        )\r\n    ;\r\n\r\n    /**\r\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n     * @dev MUST emit the ApprovalForAll event on success\r\n     * @param _operator  Address to add to the set of authorized operators\r\n     * @param _approved  True if the operator is approved, false to revoke approval\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /**\r\n     * @notice Queries the approval status of an operator for a given owner\r\n     * @param _owner      The owner of the Tokens\r\n     * @param _operator   Address of authorized operator\r\n     * @return isOperator True if the operator is approved, false if not\r\n     */\r\n    function isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool isOperator\r\n        )\r\n    ;\r\n}\r\n\r\n// File: contracts/abstract/IERC165.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId) external view\r\n        returns (bool);\r\n}\r\n// File: contracts/abstract/Address.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/Roles.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view\r\n        returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/Context.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n * \r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/Ownable.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@2.5.1/Ownable\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/abstract/MinterRole.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title MinterRole\r\n * @dev Owner is responsible to add/remove minter\r\n */\r\ncontract MinterRole is Context, Ownable {\r\n\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    modifier onlyMinter() {\r\n        require(\r\n            isMinter(_msgSender()),\r\n            \"MinterRole: caller does not have the Minter role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyOwner {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/abstract/SafeMath.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n * \r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n * \r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     * \r\n     * Counterpart to Solidity's `+` operator.\r\n     * \r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     * \r\n     * Counterpart to Solidity's `-` operator.\r\n     * \r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     * \r\n     * Counterpart to Solidity's `-` operator.\r\n     * \r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     * \r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     * \r\n     * Counterpart to Solidity's `*` operator.\r\n     * \r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     * \r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     * \r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     * \r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     * \r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * \r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     * \r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     * \r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     * \r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     * \r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * \r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/ERC1155.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract\r\n */\r\nabstract contract ERC1155 is IERC1155, IERC165, ERC1155Metadata {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    /***********************************|\r\n     *   |        Variables and Events       |\r\n     |__________________________________*/\r\n    // onReceive function signatures\r\n    bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n    bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n    // Objects balances\r\n    mapping(address => mapping(uint256 => uint256)) internal balances;\r\n\r\n    // Operator Functions\r\n    mapping(address => mapping(address => bool)) internal operators;\r\n\r\n    /***********************************|\r\n     *   |     Public Transfer Functions     |\r\n     |__________________________________*/\r\n    /**\r\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n     * @param _from    Source address\r\n     * @param _to      Target address\r\n     * @param _id      ID of the token type\r\n     * @param _amount  Transfered amount\r\n     * @param _data    Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    )\r\n        public override virtual {\r\n        require((\r\n                msg.sender == _from\r\n                )\r\n            || _isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\r\n        require(_to != address(0), \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\r\n        _safeTransferFrom(_from, _to, _id, _amount);\r\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\r\n    }\r\n\r\n    /**\r\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n     * @param _from     Source addresses\r\n     * @param _to       Target addresses\r\n     * @param _ids      IDs of each token type\r\n     * @param _amounts  Transfer amounts per token type\r\n     * @param _data     Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    )\r\n        public override virtual {\r\n        // Requirements\r\n        require((\r\n                msg.sender == _from\r\n                )\r\n            || _isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\r\n        require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n\r\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\r\n    }\r\n\r\n    /***********************************|\r\n     *   |    Internal Transfer Functions    |\r\n     |__________________________________*/\r\n    /**\r\n     * @dev Transfers amount amount of an _id from the _from address to the _to address specified\r\n     * @param _from    Source address\r\n     * @param _to      Target address\r\n     * @param _id      ID of the token type\r\n     * @param _amount  Transfered amount\r\n     */\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    )\r\n        internal {\r\n        // Update balances\r\n        balances[_from][_id] = balances[_from][_id].sub (\r\n            _amount\r\n            )\r\n        ; // Subtract amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount); // Add amount\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n     */\r\n    function _callonERC1155Received(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    )\r\n        internal {\r\n        if (_to.isContract()) {\r\n            try IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data) returns (bytes4 response) {\r\n                if (response != ERC1155_RECEIVED_VALUE) {\r\n                    revert(\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155#_callonERC1155Received: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n     * @param _from     Source addresses\r\n     * @param _to       Target addresses\r\n     * @param _ids      IDs of each token type\r\n     * @param _amounts  Transfer amounts per token type\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts\r\n    )\r\n        internal {\r\n        require (\r\n            _ids.length == _amounts.length, \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\"\r\n            )\r\n        ;\r\n\r\n        // Number of transfer to execute\r\n        uint256 nTransfer = _ids.length;\r\n\r\n        // Executing all transfers\r\n        for (uint256 i = 0; i < nTransfer;i++) {\r\n            // Update storage balance of previous bin\r\n            balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n            balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n        }\r\n\r\n        // Emit event\r\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n     */\r\n    function _callonERC1155BatchReceived(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    )\r\n        internal {\r\n        // Check if recipient is contract\r\n        if (_to.isContract()\r\n        ) {\r\n            try IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data) returns (bytes4 response) {\r\n                if (response != ERC1155_BATCH_RECEIVED_VALUE) {\r\n                    revert(\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155#_callonERC1155BatchReceived: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n     * @param _operator  Address to add to the set of authorized operators\r\n     * @param _approved  True if the operator is approved, false to revoke approval\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external override {\r\n        // Update operator status\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Queries the approval status of an operator for a given owner\r\n     * @param _owner      The owner of the Tokens\r\n     * @param _operator   Address of authorized operator\r\n     * @return isOperator true if the operator is approved, false if not\r\n     */\r\n    function _isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    )\r\n        internal\r\n        view\r\n        returns (bool isOperator) {\r\n        return operators[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the balance of an account's Tokens\r\n     * @param _owner  The address of the token holder\r\n     * @param _id     ID of the Token\r\n     * @return The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id) override public view returns (uint256) {\r\n        return balances[_owner][_id];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the balance of multiple account/token pairs\r\n     * @param _owners The addresses of the token holders\r\n     * @param _ids    ID of the Tokens\r\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n        override\r\n        public\r\n        view\r\n        returns (uint256[] memory) {\r\n        require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n\r\n        // Variables\r\n        uint256[] memory batchBalances = new uint256[](_owners.length);\r\n\r\n        // Iterate over each owner and token ID\r\n        for (uint256 i = 0; i < _owners.length;i++) {\r\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /*\r\n     * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n     */\r\n    bytes4 private constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n\r\n    /*\r\n     * INTERFACE_SIGNATURE_ERC1155 =\r\n     * bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\r\n     * bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\r\n     * bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\r\n     * bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\r\n     * bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n     * bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n     */\r\n    bytes4 private constant INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n     * @return `true` if the contract implements `_interfaceID` and\r\n     */\r\n    function supportsInterface(bytes4 _interfaceID) override external pure returns (bool) {\r\n        if (_interfaceID == INTERFACE_SIGNATURE_ERC165 || _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/ERC1155MintBurn.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions\r\n */\r\nabstract contract ERC1155MintBurn is ERC1155 {\r\n    using SafeMath for uint256;\r\n\r\n    /****************************************|\r\n     *   |            Minting Functions           |\r\n     |_______________________________________*/\r\n    /**\r\n     * @dev Mint _amount of tokens of a given id\r\n     * @param _to      The address to mint tokens to\r\n     * @param _id      Token id to mint\r\n     * @param _amount  The amount to be minted\r\n     * @param _data    Data to pass if receiver is contract\r\n     */\r\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal {\r\n        // Add _amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount);\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint tokens for each ids in _ids\r\n     * @param _to       The address to mint tokens to\r\n     * @param _ids      Array of ids to mint\r\n     * @param _amounts  Array of amount of tokens to mint per id\r\n     * @param _data    Data to pass if receiver is contract\r\n     */\r\n    function _batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    )\r\n        internal {\r\n        require (\r\n            _ids.length == _amounts.length, \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\"\r\n            )\r\n        ;\r\n\r\n        // Number of mints to execute\r\n        uint256 nMint = _ids.length;\r\n\r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nMint;i++) {\r\n            // Update storage balance\r\n            balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n        }\r\n\r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\r\n    }\r\n\r\n    /****************************************|\r\n     *   |            Burning Functions           |\r\n     |_______________________________________*/\r\n    /**\r\n     * @dev Burn _amount of tokens of a given token id\r\n     * @param _from    The address to burn tokens from\r\n     * @param _id      Token id to burn\r\n     * @param _amount  The amount to be burned\r\n     */\r\n    function _burn(address _from, uint256 _id,\r\n        uint256 _amount) internal {\r\n        // Substract _amount\r\n        balances[_from][_id] = balances[_from][_id].sub(_amount);\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n     * @param _from     The address to burn tokens from\r\n     * @param _ids      Array of token ids to burn\r\n     * @param _amounts  Array of the amount to be burned\r\n     */\r\n    function _batchBurn(\r\n        address _from,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts\r\n    )\r\n        internal {\r\n        require (\r\n            _ids.length == _amounts.length, \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\"\r\n            )\r\n        ;\r\n\r\n        // Number of mints to execute\r\n        uint256 nBurn = _ids.length;\r\n\r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nBurn;i++) {\r\n            // Update storage balance\r\n            balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n        }\r\n\r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/ERC1155Tradable.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \r\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n *   like _exists(), name(), symbol(), and totalSupply()\r\n */\r\nabstract contract ERC1155Tradable is ERC1155MintBurn, Ownable, MinterRole {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // OpenSea proxy registry to ease selling NFTs on OpenSea\r\n    address public proxyRegistryAddress;\r\n\r\n    mapping(uint256 => address) public creators;\r\n    mapping(uint256 => uint256) public tokenSupply;\r\n    mapping(uint256 => uint256) public tokenMaxSupply;\r\n    mapping(uint256 => uint8) public tokenCityIndex;\r\n    mapping(uint256 => uint8) public tokenType;\r\n\r\n    // Contract name\r\n    string public name;\r\n\r\n    // Contract symbol\r\n    string public symbol;\r\n\r\n    // URI's default URI prefix\r\n    string internal baseMetadataURI;\r\n\r\n    uint256 internal _currentTokenID = 0;\r\n\r\n    constructor (string memory _name, string memory _symbol, address _proxyRegistryAddress, string memory _baseMetadataURI) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        proxyRegistryAddress = _proxyRegistryAddress;\r\n        baseMetadataURI = _baseMetadataURI;\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return string(abi.encodePacked(baseMetadataURI));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns URIs are defined in RFC 3986.\r\n     *      URIs are assumed to be deterministically generated based on token ID\r\n     *      Token IDs are assumed to be represented in their hex format in URIs\r\n     * @return URI string\r\n     */\r\n    function uri(uint256 _id) override external view returns (string memory) {\r\n        require(_exists(_id), \"Deed NFT doesn't exists\");\r\n        return string(abi.encodePacked(baseMetadataURI, _uint2str(_id)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total quantity for a token ID\r\n     * @param _id uint256 ID of the token to query\r\n     * @return amount of token in existence\r\n     */\r\n    function totalSupply(uint256 _id) public view returns (uint256) {\r\n        return tokenSupply[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the max quantity for a token ID\r\n     * @param _id uint256 ID of the token to query\r\n     * @return amount of token in existence\r\n     */\r\n    function maxSupply(uint256 _id) public view returns (uint256) {\r\n        return tokenMaxSupply[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev return city index of designated NFT with its identifier\r\n     */\r\n    function cityIndex(uint256 _id) public view returns (uint256) {\r\n        require(_exists(_id), \"Deed NFT doesn't exists\");\r\n        return tokenCityIndex[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev return card type of designated NFT with its identifier\r\n     */\r\n    function cardType(uint256 _id) public view returns (uint256) {\r\n        require(_exists(_id), \"Deed NFT doesn't exists\");\r\n        return tokenType[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new token type and assigns _initialSupply to an address\r\n     * @param _initialOwner the first owner of the Token\r\n     * @param _initialSupply Optional amount to supply the first owner (1 for NFT)\r\n     * @param _maxSupply max supply allowed (1 for NFT)\r\n     * @param _cityIndex city index of NFT\r\n     *    (0 = Tanit, 1 = Reshef, 2 = Ashtarte, 3 = Melqart, 4 = Eshmun, 5 = Kushor, 6 = Hammon)\r\n     * @param _type card type of NFT\r\n     *    (0 = Common, 1 = Uncommon, 2 = Rare, 3 = Legendary)\r\n     * @param _data Optional data to pass if receiver is contract\r\n     * @return The newly created token ID\r\n     */\r\n    function create(\r\n        address _initialOwner,\r\n        uint256 _initialSupply,\r\n        uint256 _maxSupply,\r\n        uint8 _cityIndex,\r\n        uint8 _type,\r\n        bytes memory _data\r\n    ) public onlyMinter returns (uint256) {\r\n        require(_initialSupply <= _maxSupply, \"_initialSupply > _maxSupply\");\r\n        uint256 _id = _getNextTokenID();\r\n        _incrementTokenTypeId();\r\n        creators[_id] = _initialOwner;\r\n\r\n        if (_initialSupply != 0) {\r\n            _mint(_initialOwner, _id, _initialSupply, _data);\r\n        }\r\n        tokenSupply[_id] = _initialSupply;\r\n        tokenMaxSupply[_id] = _maxSupply;\r\n        tokenCityIndex[_id] = _cityIndex;\r\n        tokenType[_id] = _type;\r\n        return _id;\r\n    }\r\n\r\n    /**\r\n     * @dev Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\r\n     * @param _owner      The owner of the Tokens\r\n     * @param _operator   Address of authorized operator\r\n     * @return isOperator true if the operator is approved, false if not\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) override public view returns (bool isOperator) {\r\n        // Whitelist OpenSea proxy contract for easy trading.\r\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n        if (address(proxyRegistry.proxies(_owner)) == _operator) {\r\n            return true;\r\n        }\r\n\r\n        return _isApprovedForAll(_owner, _operator);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\r\n     * @param _id uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 _id) internal view returns (bool) {\r\n        return creators[_id] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the next token ID based on value of _currentTokenID\r\n     * @return uint256 for the next token ID\r\n     */\r\n    function _getNextTokenID() private view returns (uint256) {\r\n        return _currentTokenID.add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev increments the value of _currentTokenID\r\n     */\r\n    function _incrementTokenTypeId() private {\r\n        _currentTokenID++;\r\n    }\r\n\r\n    /**\r\n     * @dev Convert uint256 to string\r\n     * @param _i Unsigned integer to convert to string\r\n     */\r\n    function _uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k] = bytes1(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n            if (k > 0) {\r\n                k--;\r\n            }\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n}\r\n// File: contracts/abstract/ManagerRole.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ManagerRole\r\n * @dev Owner is responsible to add/remove manager\r\n */\r\ncontract ManagerRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event ManagerAdded(address indexed account);\r\n    event ManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private _managers;\r\n\r\n    modifier onlyManager() {\r\n        require(isManager(_msgSender()), \"ManagerRole: caller does not have the Manager role\");\r\n        _;\r\n    }\r\n\r\n    function isManager(address account) public view returns (bool) {\r\n        return _managers.has(account);\r\n    }\r\n\r\n    function addManager(address account) public onlyOwner {\r\n        _addManager(account);\r\n    }\r\n\r\n    function removeManager(address account) public onlyOwner {\r\n        _removeManager(account);\r\n    }\r\n\r\n    function _addManager(address account) internal {\r\n        _managers.add(account);\r\n        emit ManagerAdded(account);\r\n    }\r\n\r\n    function _removeManager(address account) internal {\r\n        _managers.remove(account);\r\n        emit ManagerRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/StrategyRole.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title StrategyRole\r\n * @dev Owner is responsible to add/remove strategy\r\n */\r\ncontract StrategyRole is Context, ManagerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event StrategyAdded(address indexed account);\r\n    event StrategyRemoved(address indexed account);\r\n\r\n    Roles.Role private _strategies;\r\n\r\n    modifier onlyStrategy() {\r\n        require(isStrategy(_msgSender()), \"StrategyRole: caller does not have the Strategy role\");\r\n        _;\r\n    }\r\n\r\n    function isStrategy(address account) public view returns (bool) {\r\n        return _strategies.has(account);\r\n    }\r\n\r\n    function addStrategy(address account) public onlyManager {\r\n        _addStrategy(account);\r\n    }\r\n\r\n    function removeStrategy(address account) public onlyManager {\r\n        _removeStrategy(account);\r\n    }\r\n\r\n    function _addStrategy(address account) internal {\r\n        _strategies.add(account);\r\n        emit StrategyAdded(account);\r\n    }\r\n\r\n    function _removeStrategy(address account) internal {\r\n        _strategies.remove(account);\r\n        emit StrategyRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/abstract/StrategyHandler.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title NFT Contract for Meeds DAO\r\n */\r\ninterface StrategyHandler is IERC1155 {\r\n\r\n    /**\r\n     * @dev return the total use count of an NFT by a wallet\r\n     */\r\n    function getTotalUseCount(address _account, uint256 _id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev return the use count of an NFT by wallet inside a strategy\r\n     */\r\n    function getStrategyUseCount(address _account, uint256 _id, address _strategy) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Mark NFT as being used. Only callable by registered strategies\r\n     * @param _account  User account address\r\n     * @param _id       ID of the token type\r\n     */\r\n    function startUsingNFT(address _account, uint256 _id) external returns (bool);\r\n\r\n    /**\r\n     * @notice Unmark NFT as being used. Only callable by registered strategies\r\n     * @param _account  User account address\r\n     * @param _id       ID of the token type\r\n     */\r\n    function endUsingNFT(address _account, uint256 _id) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Deed.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title NFT Contract for Meeds DAO\r\n */\r\ncontract Deed is ERC1155Tradable, StrategyHandler, StrategyRole {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event StartedUsingNFT(address indexed account,\r\n        uint256 indexed id,\r\n        address indexed strategy);\r\n    event EndedUsingNFT(address indexed account,\r\n        uint256 indexed id,\r\n        address indexed strategy);\r\n\r\n    // mapping account => nftId => useCount\r\n    // this is used to restrict transfers if nft is being used in any strategy\r\n    mapping(address => mapping(uint256 => uint256)) internal totalUseCount;\r\n\r\n    // mapping account => nftId => strategyAddress => useCount\r\n    // this is used to make sure a strategy can only end using nft that it started using before\r\n    mapping(address => mapping(uint256 => mapping(address => uint256)))\r\n        internal stratUseCount;\r\n\r\n    constructor (address _proxyRegistryAddress, string memory _baseMetadataURI) ERC1155Tradable(\"Meeds Deed Token\", \"DEED\", _proxyRegistryAddress, _baseMetadataURI) {\r\n    }\r\n\r\n    /**\r\n     * @dev Will update the base URL of token's URI\r\n     * @param _newBaseMetadataURI New base URL of token's URI\r\n     */\r\n    function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyManager {\r\n        baseMetadataURI = _newBaseMetadataURI;\r\n    }\r\n\r\n    /**\r\n     * @dev return the list of NFTs owned by an address\r\n     */\r\n    function nftsOf(address _account) public view returns (uint256[] memory) {\r\n        uint256 len = 0;\r\n        for (uint256 i = 1; i <= _currentTokenID; i++) {\r\n            if (balances[_account][i] > 0) {\r\n              len++;\r\n            }\r\n        }\r\n        uint256 index = 0;\r\n        uint256[] memory nfts = new uint256[](len);\r\n        for (uint256 i = 1; i <= _currentTokenID; i++) {\r\n            if (balances[_account][i] > 0) {\r\n              nfts[index++] = i;\r\n            }\r\n        }\r\n        return nfts;\r\n    }\r\n\r\n    /**\r\n     * @dev return the total supply of NFTs (Token Types)\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _currentTokenID;\r\n    }\r\n\r\n    /**\r\n     * @dev return the total use count of an NFT by owner\r\n     */\r\n    function getTotalUseCount(address _account, uint256 _id) external view returns (uint256) {\r\n        return totalUseCount[_account][_id];\r\n    }\r\n\r\n    /**\r\n     * @dev return the use count of an NFT by wallet inside a strategy\r\n     */\r\n    function getStrategyUseCount(address _account, uint256 _id, address _strategy) external view returns (uint256) {\r\n        return stratUseCount[_account][_id][_strategy];\r\n    }\r\n\r\n    /**\r\n     * @notice Mark NFT as being used. Only callable by registered strategies\r\n     * @param _account  User account address\r\n     * @param _id       ID of the token type\r\n     */\r\n    function startUsingNFT(address _account, uint256 _id) external onlyStrategy returns (bool) {\r\n        require(balances[_account][_id] > 0, \"Deed#startUsingNFT: user account doesn't own the NFT\");\r\n        stratUseCount[_account][_id][msg.sender] = stratUseCount[_account][_id][msg.sender].add(1);\r\n        totalUseCount[_account][_id] = totalUseCount[_account][_id].add(1);\r\n        emit StartedUsingNFT(_account, _id, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Unmark NFT as being used. Only callable by registered strategies\r\n     * @param _account  User account address\r\n     * @param _id       ID of the token type\r\n     */\r\n    function endUsingNFT(address _account, uint256 _id) external onlyStrategy returns (bool) {\r\n        require(stratUseCount[_account][_id][msg.sender] > 0, \"Deed#endUsingNFT: NFT is not currently in use by strategy\");\r\n        stratUseCount[_account][_id][msg.sender] = stratUseCount[_account][_id][msg.sender].sub(1);\r\n        totalUseCount[_account][_id] = totalUseCount[_account][_id].sub(1);\r\n        emit EndedUsingNFT(_account, _id, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides safeTransferFrom function of ERC1155 to introduce totalUseCount check\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data) public override (ERC1155, IERC1155) {\r\n        require(totalUseCount[_from][_id] == 0, \"Deed#safeTransferFrom: NFT being used in strategy\");\r\n        ERC1155.safeTransferFrom(_from, _to, _id, _amount, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides safeBatchTransferFrom function of ERC1155 to introduce totalUseCount check\r\n     */\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data) public  override (ERC1155, IERC1155) {\r\n        // Number of transfer to execute\r\n        uint256 nTransfer = _ids.length;\r\n\r\n        // check if any nft is being used\r\n        for (uint256 i = 0; i < nTransfer; i++) {\r\n            require(totalUseCount[_from][_ids[i]] == 0, \"Deed#safeBatchTransferFrom: NFT being used in strategy\");\r\n        }\r\n\r\n        ERC1155.safeBatchTransferFrom(_from, _to, _ids, _amounts, _data);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseMetadataURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"EndedUsingNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StartedUsingNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cardType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_cityIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"endUsingNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getStrategyUseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTotalUseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"nftsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"startUsingNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCityIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Deed", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c10000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002d68747470733a2f2f6d656564732e696f2f696e766573746f72732f6170692f646565642f6d657461646174612f00000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4fec8e6ae0cb8ab93a37700792d0862de58e7037a69778bd0c74492df9baf22"}