{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/L1MessagesSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.21;\\n\\nimport {IStarknetCore} from \\\"./interfaces/IStarknetCore.sol\\\";\\nimport {Uint256Splitter} from \\\"./lib/Uint256Splitter.sol\\\";\\n\\ncontract L1MessagesSender {\\n    using Uint256Splitter for uint256;\\n\\n    IStarknetCore public immutable starknetCore;\\n\\n    uint256 public immutable l2RecipientAddr;\\n\\n    /// @dev L2 \\\"receive_commitment\\\" L1 handler selector\\n    uint256 constant RECEIVE_COMMITMENT_L1_HANDLER_SELECTOR = 0x3fa70707d0e831418fb142ca8fb7483611b84e89c0c42bf1fc2a7a5c40890ad;\\n\\n    /// @param starknetCore_ a StarknetCore address to send and consume messages on/from L2\\n    /// @param l2RecipientAddr_ a L2 recipient address that is the recipient contract on L2.\\n    constructor(IStarknetCore starknetCore_, uint256 l2RecipientAddr_) {\\n        starknetCore = starknetCore_;\\n        l2RecipientAddr = l2RecipientAddr_;\\n    }\\n\\n    /// @notice Send an exact L1 parent hash to L2\\n    /// @param blockNumber_ the child block of the requested parent hash\\n    function sendExactParentHashToL2(uint256 blockNumber_) external payable {\\n        bytes32 parentHash = blockhash(blockNumber_ - 1);\\n        require(parentHash != bytes32(0), \\\"ERR_INVALID_BLOCK_NUMBER\\\");\\n\\n        _sendBlockHashToL2(parentHash, blockNumber_);\\n    }\\n\\n    /// @notice Send the L1 latest parent hash to L2\\n    function sendLatestParentHashToL2() external payable {\\n        bytes32 parentHash = blockhash(block.number - 1);\\n        _sendBlockHashToL2(parentHash, block.number);\\n    }\\n\\n    function _sendBlockHashToL2(\\n        bytes32 parentHash_,\\n        uint256 blockNumber_\\n    ) internal {\\n        uint256[] memory message = new uint256[](4);\\n        (uint256 parentHashLow, uint256 parentHashHigh) = uint256(parentHash_).split128();\\n        (uint256 blockNumberLow, uint256 blockNumberHigh) = blockNumber_.split128();\\n        message[0] = parentHashLow;\\n        message[1] = parentHashHigh;\\n        message[2] = blockNumberLow;\\n        message[3] = blockNumberHigh;\\n\\n        starknetCore.sendMessageToL2{value: msg.value}(\\n            l2RecipientAddr,\\n            RECEIVE_COMMITMENT_L1_HANDLER_SELECTOR,\\n            message\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStarknetCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.21;\\n\\ninterface IStarknetCore {\\n    /**\\n      Sends a message to an L2 contract.\\n      This function is payable, the payed amount is the message fee.\\n\\n      Returns the hash of the message and the nonce of the message.\\n    */\\n    function sendMessageToL2(\\n        uint256 toAddress,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external payable returns (bytes32, uint256);\\n\\n    /**\\n      Consumes a message that was sent from an L2 contract.\\n\\n      Returns the hash of the message.\\n    */\\n    function consumeMessageFromL2(\\n        uint256 fromAddress,\\n        uint256[] calldata payload\\n    ) external returns (bytes32);\\n\\n    /**\\n      Starts the cancellation of an L1 to L2 message.\\n      A message can be canceled messageCancellationDelay() seconds after this function is called.\\n\\n      Note: This function may only be called for a message that is currently pending and the caller\\n      must be the sender of the that message.\\n    */\\n    function startL1ToL2MessageCancellation(\\n        uint256 toAddress,\\n        uint256 selector,\\n        uint256[] calldata payload,\\n        uint256 nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n      Cancels an L1 to L2 message, this function should be called at least\\n      messageCancellationDelay() seconds after the call to startL1ToL2MessageCancellation().\\n      A message may only be cancelled by its sender.\\n      If the message is missing, the call will revert.\\n\\n      Note that the message fee is not refunded.\\n    */\\n    function cancelL1ToL2Message(\\n        uint256 toAddress,\\n        uint256 selector,\\n        uint256[] calldata payload,\\n        uint256 nonce\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/lib/Uint256Splitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Uint256Splitter {\\n    uint256 constant _MASK = type(uint128).max;\\n\\n    /// @notice Splits a uint256 into two uint128s (low, high) represented as uint256s.\\n    /// @param a The uint256 to split.\\n    function split128(\\n        uint256 a\\n    ) internal pure returns (uint256 lower, uint256 upper) {\\n        return (a & _MASK, a >> 128);\\n    }\\n\\n    /// @notice Merges two uint128s (low, high) into one uint256.\\n    /// @param lower The lower uint256. The caller is required to pass a value that is less than 2^128 - 1.\\n    /// @param upper The upper uint256.\\n    function merge128(\\n        uint256 lower,\\n        uint256 upper\\n    ) internal pure returns (uint256 a) {\\n        require(lower <= _MASK, \\\"Uint256Splitter: lower exceeds uint128\\\");\\n        // return (upper << 128) | lower;\\n        assembly {\\n            a := or(shl(128, upper), lower)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IStarknetCore\",\"name\":\"starknetCore_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2RecipientAddr_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"l2RecipientAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"sendExactParentHashToL2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendLatestParentHashToL2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCore\",\"outputs\":[{\"internalType\":\"contract IStarknetCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "L1MessagesSender", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000c662c410c0ecf747543f5ba90660f6abebd9c8c40631e821aff422197df5aa363c2d51327d9f2d33ae8f0c22a9ace6975917de85", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}