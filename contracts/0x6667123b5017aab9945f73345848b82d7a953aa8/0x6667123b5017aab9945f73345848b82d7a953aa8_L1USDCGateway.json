{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFiatToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IFiatToken {\\n    /**\\n     * @notice Function to mint tokens\\n     * @param _to The address that will receive the minted tokens.\\n     * @param _amount The amount of tokens to mint. Must be less than or equal\\n     * to the minterAllowance of the caller.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(address _to, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice allows a minter to burn some of its own tokens\\n     * Validates that caller is a minter and that sender is not blacklisted\\n     * amount is less than or equal to the minter's account balance\\n     * @param _amount uint256 the amount of tokens to be burned\\n     */\\n    function burn(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUSDCBurnableSourceBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\n/// @title IUSDCBurnableSourceBridge\\n/// @notice The interface of `USDCBurnableSourceBridge` of Circle's upgrader in L1 (Ethereum).\\ninterface IUSDCBurnableSourceBridge {\\n    /**\\n     * @notice Called by Circle, this executes a burn on the source\\n     * chain.\\n     */\\n    function burnAllLockedUSDC() external;\\n}\\n\"\r\n    },\r\n    \"src/L1/gateways/IL1ERC20Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL1ERC20Gateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when ERC20 token is withdrawn from L2 to L1 and transfer to recipient.\\n    /// @param l1Token The address of the token in L1.\\n    /// @param l2Token The address of the token in L2.\\n    /// @param from The address of sender in L2.\\n    /// @param to The address of recipient in L1.\\n    /// @param amount The amount of token withdrawn from L2 to L1.\\n    /// @param data The optional calldata passed to recipient in L1.\\n    event FinalizeWithdrawERC20(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    /// @notice Emitted when someone deposit ERC20 token from L1 to L2.\\n    /// @param l1Token The address of the token in L1.\\n    /// @param l2Token The address of the token in L2.\\n    /// @param from The address of sender in L1.\\n    /// @param to The address of recipient in L2.\\n    /// @param amount The amount of token will be deposited from L1 to L2.\\n    /// @param data The optional calldata passed to recipient in L2.\\n    event DepositERC20(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    /// @notice Emitted when some ERC20 token is refunded.\\n    /// @param token The address of the token in L1.\\n    /// @param recipient The address of receiver in L1.\\n    /// @param amount The amount of token refunded to receiver.\\n    event RefundERC20(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the corresponding l2 token address given l1 token address.\\n    /// @param _l1Token The address of l1 token.\\n    function getL2ERC20Address(address _l1Token) external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Deposit some token to a caller's account on L2.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param _token The address of token in L1.\\n    /// @param _amount The amount of token to transfer.\\n    /// @param _gasLimit Gas limit required to complete the deposit on L2.\\n    function depositERC20(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit some token to a recipient's account on L2.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param _token The address of token in L1.\\n    /// @param _to The address of recipient's account on L2.\\n    /// @param _amount The amount of token to transfer.\\n    /// @param _gasLimit Gas limit required to complete the deposit on L2.\\n    function depositERC20(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit some token to a recipient's account on L2 and call.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param _token The address of token in L1.\\n    /// @param _to The address of recipient's account on L2.\\n    /// @param _amount The amount of token to transfer.\\n    /// @param _data Optional data to forward to recipient's account.\\n    /// @param _gasLimit Gas limit required to complete the deposit on L2.\\n    function depositERC20AndCall(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Complete ERC20 withdraw from L2 to L1 and send fund to recipient's account in L1.\\n    /// @dev Make this function payable to handle WETH deposit/withdraw.\\n    ///      The function should only be called by L1ScrollMessenger.\\n    ///      The function should also only be called by L2ERC20Gateway in L2.\\n    /// @param _l1Token The address of corresponding L1 token.\\n    /// @param _l2Token The address of corresponding L2 token.\\n    /// @param _from The address of account who withdraw the token in L2.\\n    /// @param _to The address of recipient in L1 to receive the token.\\n    /// @param _amount The amount of the token to withdraw.\\n    /// @param _data Optional data to forward to recipient's account.\\n    function finalizeWithdrawERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/L1/gateways/IL1ETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL1ETHGateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when ETH is withdrawn from L2 to L1 and transfer to recipient.\\n    /// @param from The address of sender in L2.\\n    /// @param to The address of recipient in L1.\\n    /// @param amount The amount of ETH withdrawn from L2 to L1.\\n    /// @param data The optional calldata passed to recipient in L1.\\n    event FinalizeWithdrawETH(address indexed from, address indexed to, uint256 amount, bytes data);\\n\\n    /// @notice Emitted when someone deposit ETH from L1 to L2.\\n    /// @param from The address of sender in L1.\\n    /// @param to The address of recipient in L2.\\n    /// @param amount The amount of ETH will be deposited from L1 to L2.\\n    /// @param data The optional calldata passed to recipient in L2.\\n    event DepositETH(address indexed from, address indexed to, uint256 amount, bytes data);\\n\\n    /// @notice Emitted when some ETH is refunded.\\n    /// @param recipient The address of receiver in L1.\\n    /// @param amount The amount of ETH refunded to receiver.\\n    event RefundETH(address indexed recipient, uint256 amount);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Deposit ETH to caller's account in L2.\\n    /// @param amount The amount of ETH to be deposited.\\n    /// @param gasLimit Gas limit required to complete the deposit on L2.\\n    function depositETH(uint256 amount, uint256 gasLimit) external payable;\\n\\n    /// @notice Deposit ETH to some recipient's account in L2.\\n    /// @param to The address of recipient's account on L2.\\n    /// @param amount The amount of ETH to be deposited.\\n    /// @param gasLimit Gas limit required to complete the deposit on L2.\\n    function depositETH(\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit ETH to some recipient's account in L2 and call the target contract.\\n    /// @param to The address of recipient's account on L2.\\n    /// @param amount The amount of ETH to be deposited.\\n    /// @param data Optional data to forward to recipient's account.\\n    /// @param gasLimit Gas limit required to complete the deposit on L2.\\n    function depositETHAndCall(\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Complete ETH withdraw from L2 to L1 and send fund to recipient's account in L1.\\n    /// @dev This function should only be called by L1ScrollMessenger.\\n    ///      This function should also only be called by L1ETHGateway in L2.\\n    /// @param from The address of account who withdraw ETH in L2.\\n    /// @param to The address of recipient in L1 to receive ETH.\\n    /// @param amount The amount of ETH to withdraw.\\n    /// @param data Optional data to forward to recipient's account.\\n    function finalizeWithdrawETH(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/L1/gateways/IL1GatewayRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {IL1ETHGateway} from \\\"./IL1ETHGateway.sol\\\";\\nimport {IL1ERC20Gateway} from \\\"./IL1ERC20Gateway.sol\\\";\\n\\ninterface IL1GatewayRouter is IL1ETHGateway, IL1ERC20Gateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the address of ETH Gateway is updated.\\n    /// @param oldETHGateway The address of the old ETH Gateway.\\n    /// @param newEthGateway The address of the new ETH Gateway.\\n    event SetETHGateway(address indexed oldETHGateway, address indexed newEthGateway);\\n\\n    /// @notice Emitted when the address of default ERC20 Gateway is updated.\\n    /// @param oldDefaultERC20Gateway The address of the old default ERC20 Gateway.\\n    /// @param newDefaultERC20Gateway The address of the new default ERC20 Gateway.\\n    event SetDefaultERC20Gateway(address indexed oldDefaultERC20Gateway, address indexed newDefaultERC20Gateway);\\n\\n    /// @notice Emitted when the `gateway` for `token` is updated.\\n    /// @param token The address of token updated.\\n    /// @param oldGateway The corresponding address of the old gateway.\\n    /// @param newGateway The corresponding address of the new gateway.\\n    event SetERC20Gateway(address indexed token, address indexed oldGateway, address indexed newGateway);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the corresponding gateway address for given token address.\\n    /// @param _token The address of token to query.\\n    function getERC20Gateway(address _token) external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Request ERC20 token transfer from users to gateways.\\n    /// @param sender The address of sender to request fund.\\n    /// @param token The address of token to request.\\n    /// @param amount The amount of token to request.\\n    function requestERC20(\\n        address sender,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /************************\\n     * Restricted Functions *\\n     ************************/\\n\\n    /// @notice Update the address of ETH gateway contract.\\n    /// @dev This function should only be called by contract owner.\\n    /// @param _ethGateway The address to update.\\n    function setETHGateway(address _ethGateway) external;\\n\\n    /// @notice Update the address of default ERC20 gateway contract.\\n    /// @dev This function should only be called by contract owner.\\n    /// @param _defaultERC20Gateway The address to update.\\n    function setDefaultERC20Gateway(address _defaultERC20Gateway) external;\\n\\n    /// @notice Update the mapping from token address to gateway address.\\n    /// @dev This function should only be called by contract owner.\\n    /// @param _tokens The list of addresses of tokens to update.\\n    /// @param _gateways The list of addresses of gateways to update.\\n    function setERC20Gateway(address[] memory _tokens, address[] memory _gateways) external;\\n}\\n\"\r\n    },\r\n    \"src/L1/gateways/L1ERC20Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {IL1ERC20Gateway} from \\\"./IL1ERC20Gateway.sol\\\";\\nimport {IL1GatewayRouter} from \\\"./IL1GatewayRouter.sol\\\";\\n\\nimport {IL2ERC20Gateway} from \\\"../../L2/gateways/IL2ERC20Gateway.sol\\\";\\nimport {ScrollGatewayBase} from \\\"../../libraries/gateway/ScrollGatewayBase.sol\\\";\\nimport {IMessageDropCallback} from \\\"../../libraries/callbacks/IMessageDropCallback.sol\\\";\\n\\n/// @title L1ERC20Gateway\\n/// @notice The `L1ERC20Gateway` as a base contract for ERC20 gateways in L1.\\n/// It has implementation of common used functions for ERC20 gateways.\\nabstract contract L1ERC20Gateway is IL1ERC20Gateway, IMessageDropCallback, ScrollGatewayBase {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @dev The storage slots for future usage.\\n    uint256[50] private __gap;\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @inheritdoc IL1ERC20Gateway\\n    function depositERC20(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable override {\\n        _deposit(_token, _msgSender(), _amount, new bytes(0), _gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1ERC20Gateway\\n    function depositERC20(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable override {\\n        _deposit(_token, _to, _amount, new bytes(0), _gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1ERC20Gateway\\n    function depositERC20AndCall(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data,\\n        uint256 _gasLimit\\n    ) external payable override {\\n        _deposit(_token, _to, _amount, _data, _gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1ERC20Gateway\\n    function finalizeWithdrawERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable virtual override onlyCallByCounterpart nonReentrant {\\n        _beforeFinalizeWithdrawERC20(_l1Token, _l2Token, _from, _to, _amount, _data);\\n\\n        // @note can possible trigger reentrant call to this contract or messenger,\\n        // but it seems not a big problem.\\n        IERC20Upgradeable(_l1Token).safeTransfer(_to, _amount);\\n\\n        _doCallback(_to, _data);\\n\\n        emit FinalizeWithdrawERC20(_l1Token, _l2Token, _from, _to, _amount, _data);\\n    }\\n\\n    /// @inheritdoc IMessageDropCallback\\n    function onDropMessage(bytes calldata _message) external payable virtual onlyInDropContext nonReentrant {\\n        // _message should start with 0x8431f5c1  =>  finalizeDepositERC20(address,address,address,address,uint256,bytes)\\n        require(bytes4(_message[0:4]) == IL2ERC20Gateway.finalizeDepositERC20.selector, \\\"invalid selector\\\");\\n\\n        // decode (token, receiver, amount)\\n        (address _token, , address _receiver, , uint256 _amount, ) = abi.decode(\\n            _message[4:],\\n            (address, address, address, address, uint256, bytes)\\n        );\\n\\n        // do dome check for each custom gateway\\n        _beforeDropMessage(_token, _receiver, _amount);\\n\\n        IERC20Upgradeable(_token).safeTransfer(_receiver, _amount);\\n\\n        emit RefundERC20(_token, _receiver, _amount);\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /// @dev Internal function hook to perform checks and actions before finalizing the withdrawal.\\n    /// @param _l1Token The address of corresponding L1 token in L1.\\n    /// @param _l2Token The address of corresponding L2 token in L2.\\n    /// @param _from The address of account who withdraw the token in L2.\\n    /// @param _to The address of recipient in L1 to receive the token.\\n    /// @param _amount The amount of the token to withdraw.\\n    /// @param _data Optional data to forward to recipient's account.\\n    function _beforeFinalizeWithdrawERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) internal virtual;\\n\\n    /// @dev Internal function hook to perform checks and actions before dropping the message.\\n    /// @param _token The L1 token address.\\n    /// @param _receiver The recipient address on L1.\\n    /// @param _amount The amount of token to refund.\\n    function _beforeDropMessage(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal virtual;\\n\\n    /// @dev Internal function to transfer ERC20 token to this contract.\\n    /// @param _token The address of token to transfer.\\n    /// @param _amount The amount of token to transfer.\\n    /// @param _data The data passed by caller.\\n    function _transferERC20In(\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _data\\n    )\\n        internal\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        address _sender = _msgSender();\\n        address _from = _sender;\\n        if (router == _sender) {\\n            // Extract real sender if this call is from L1GatewayRouter.\\n            (_from, _data) = abi.decode(_data, (address, bytes));\\n            _amount = IL1GatewayRouter(_sender).requestERC20(_from, _token, _amount);\\n        } else {\\n            // common practice to handle fee on transfer token.\\n            uint256 _before = IERC20Upgradeable(_token).balanceOf(address(this));\\n            IERC20Upgradeable(_token).safeTransferFrom(_from, address(this), _amount);\\n            uint256 _after = IERC20Upgradeable(_token).balanceOf(address(this));\\n            // no unchecked here, since some weird token may return arbitrary balance.\\n            _amount = _after - _before;\\n        }\\n        // ignore weird fee on transfer token\\n        require(_amount > 0, \\\"deposit zero amount\\\");\\n\\n        return (_from, _amount, _data);\\n    }\\n\\n    /// @dev Internal function to do all the deposit operations.\\n    ///\\n    /// @param _token The token to deposit.\\n    /// @param _to The recipient address to recieve the token in L2.\\n    /// @param _amount The amount of token to deposit.\\n    /// @param _data Optional data to forward to recipient's account.\\n    /// @param _gasLimit Gas limit required to complete the deposit on L2.\\n    function _deposit(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data,\\n        uint256 _gasLimit\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"src/L1/gateways/usdc/L1USDCGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.16;\\n\\nimport {IFiatToken} from \\\"../../../interfaces/IFiatToken.sol\\\";\\nimport {IUSDCBurnableSourceBridge} from \\\"../../../interfaces/IUSDCBurnableSourceBridge.sol\\\";\\nimport {IL2ERC20Gateway} from \\\"../../../L2/gateways/IL2ERC20Gateway.sol\\\";\\nimport {IL1ScrollMessenger} from \\\"../../IL1ScrollMessenger.sol\\\";\\nimport {IL1ERC20Gateway} from \\\"../IL1ERC20Gateway.sol\\\";\\n\\nimport {ScrollGatewayBase} from \\\"../../../libraries/gateway/ScrollGatewayBase.sol\\\";\\nimport {L1ERC20Gateway} from \\\"../L1ERC20Gateway.sol\\\";\\n\\n/// @title L1USDCGateway\\n/// @notice The `L1USDCGateway` contract is used to deposit `USDC` token in layer 1 and\\n/// finalize withdraw `USDC` from layer 2, before USDC become native in layer 2.\\ncontract L1USDCGateway is L1ERC20Gateway, IUSDCBurnableSourceBridge {\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    /// @notice The address of L1 USDC address.\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable l1USDC;\\n\\n    /// @notice The address of L2 USDC address.\\n    address public immutable l2USDC;\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @notice The address of caller from Circle.\\n    address public circleCaller;\\n\\n    /// @notice The flag indicates whether USDC deposit is paused.\\n    bool public depositPaused;\\n\\n    /// @notice The flag indicates whether USDC withdrawal is paused.\\n    /// @dev This is not necessary to be set `true` since we will set `L2USDCGateway.withdrawPaused` first.\\n    ///      This is kept just in case and will be set after all pending messages are relayed.\\n    bool public withdrawPaused;\\n\\n    /// @notice The total amount of bridged USDC in this contract.\\n    /// @dev Only deposited USDC will count. Accidentally transferred USDC will be ignored.\\n    uint256 public totalBridgedUSDC;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor(address _l1USDC, address _l2USDC) {\\n        _disableInitializers();\\n\\n        l1USDC = _l1USDC;\\n        l2USDC = _l2USDC;\\n    }\\n\\n    /// @notice Initialize the storage of L1WETHGateway.\\n    /// @param _counterpart The address of L2ETHGateway in L2.\\n    /// @param _router The address of L1GatewayRouter.\\n    /// @param _messenger The address of L1ScrollMessenger.\\n    function initialize(\\n        address _counterpart,\\n        address _router,\\n        address _messenger\\n    ) external initializer {\\n        require(_router != address(0), \\\"zero router address\\\");\\n        ScrollGatewayBase._initialize(_counterpart, _router, _messenger);\\n    }\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @inheritdoc IL1ERC20Gateway\\n    function getL2ERC20Address(address) public view override returns (address) {\\n        return l2USDC;\\n    }\\n\\n    /*******************************\\n     * Public Restricted Functions *\\n     *******************************/\\n\\n    /// @inheritdoc IUSDCBurnableSourceBridge\\n    function burnAllLockedUSDC() external override {\\n        require(_msgSender() == circleCaller, \\\"only circle caller\\\");\\n\\n        // @note Only bridged USDC will be burned. We may refund the rest if possible.\\n        uint256 _balance = totalBridgedUSDC;\\n        totalBridgedUSDC = 0;\\n\\n        IFiatToken(l1USDC).burn(_balance);\\n    }\\n\\n    /// @notice Update the Circle EOA address.\\n    /// @param _caller The address to update.\\n    function updateCircleCaller(address _caller) external onlyOwner {\\n        circleCaller = _caller;\\n    }\\n\\n    /// @notice Change the deposit pause status of this contract.\\n    /// @param _paused The new status, `true` means paused and `false` means not paused.\\n    function pauseDeposit(bool _paused) external onlyOwner {\\n        depositPaused = _paused;\\n    }\\n\\n    /// @notice Change the withdraw pause status of this contract.\\n    /// @param _paused The new status, `true` means paused and `false` means not paused.\\n    function pauseWithdraw(bool _paused) external onlyOwner {\\n        withdrawPaused = _paused;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /// @inheritdoc L1ERC20Gateway\\n    function _beforeFinalizeWithdrawERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        address,\\n        address,\\n        uint256 _amount,\\n        bytes calldata\\n    ) internal virtual override {\\n        require(msg.value == 0, \\\"nonzero msg.value\\\");\\n        require(_l1Token == l1USDC, \\\"l1 token not USDC\\\");\\n        require(_l2Token == l2USDC, \\\"l2 token not USDC\\\");\\n        require(!withdrawPaused, \\\"withdraw paused\\\");\\n\\n        totalBridgedUSDC -= _amount;\\n    }\\n\\n    /// @inheritdoc L1ERC20Gateway\\n    function _beforeDropMessage(\\n        address,\\n        address,\\n        uint256 _amount\\n    ) internal virtual override {\\n        require(msg.value == 0, \\\"nonzero msg.value\\\");\\n        totalBridgedUSDC -= _amount;\\n    }\\n\\n    /// @inheritdoc L1ERC20Gateway\\n    function _deposit(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data,\\n        uint256 _gasLimit\\n    ) internal virtual override nonReentrant {\\n        require(_amount > 0, \\\"deposit zero amount\\\");\\n        require(_token == l1USDC, \\\"only USDC is allowed\\\");\\n        require(!depositPaused, \\\"deposit paused\\\");\\n\\n        // 1. Transfer token into this contract.\\n        address _from;\\n        (_from, _amount, _data) = _transferERC20In(_token, _amount, _data);\\n        require(_data.length == 0, \\\"call is not allowed\\\");\\n        totalBridgedUSDC += _amount;\\n\\n        // 2. Generate message passed to L2USDCGateway.\\n        bytes memory _message = abi.encodeCall(\\n            IL2ERC20Gateway.finalizeDepositERC20,\\n            (_token, l2USDC, _from, _to, _amount, _data)\\n        );\\n\\n        // 3. Send message to L1ScrollMessenger.\\n        IL1ScrollMessenger(messenger).sendMessage{value: msg.value}(counterpart, 0, _message, _gasLimit, _from);\\n\\n        emit DepositERC20(_token, l2USDC, _from, _to, _amount, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/L1/IL1ScrollMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {IScrollMessenger} from \\\"../libraries/IScrollMessenger.sol\\\";\\n\\ninterface IL1ScrollMessenger is IScrollMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the maximum number of times each message can be replayed is updated.\\n    /// @param oldMaxReplayTimes The old maximum number of times each message can be replayed.\\n    /// @param newMaxReplayTimes The new maximum number of times each message can be replayed.\\n    event UpdateMaxReplayTimes(uint256 oldMaxReplayTimes, uint256 newMaxReplayTimes);\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct L2MessageProof {\\n        // The index of the batch where the message belongs to.\\n        uint256 batchIndex;\\n        // Concatenation of merkle proof for withdraw merkle trie.\\n        bytes merkleProof;\\n    }\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Relay a L2 => L1 message with message proof.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param nonce The nonce of the message to avoid replay attack.\\n    /// @param message The content of the message.\\n    /// @param proof The proof used to verify the correctness of the transaction.\\n    function relayMessageWithProof(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 nonce,\\n        bytes memory message,\\n        L2MessageProof memory proof\\n    ) external;\\n\\n    /// @notice Replay an existing message.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param messageNonce The nonce for the message to replay.\\n    /// @param message The content of the message.\\n    /// @param newGasLimit New gas limit to be used for this message.\\n    /// @param refundAddress The address of account who will receive the refunded fee.\\n    function replayMessage(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 messageNonce,\\n        bytes memory message,\\n        uint32 newGasLimit,\\n        address refundAddress\\n    ) external payable;\\n\\n    /// @notice Drop a skipped message.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param messageNonce The nonce for the message to drop.\\n    /// @param message The content of the message.\\n    function dropMessage(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 messageNonce,\\n        bytes memory message\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/L2/gateways/IL2ERC20Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL2ERC20Gateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when ERC20 token is deposited from L1 to L2 and transfer to recipient.\\n    /// @param l1Token The address of the token in L1.\\n    /// @param l2Token The address of the token in L2.\\n    /// @param from The address of sender in L1.\\n    /// @param to The address of recipient in L2.\\n    /// @param amount The amount of token withdrawn from L1 to L2.\\n    /// @param data The optional calldata passed to recipient in L2.\\n    event FinalizeDepositERC20(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    /// @notice Emitted when someone withdraw ERC20 token from L2 to L1.\\n    /// @param l1Token The address of the token in L1.\\n    /// @param l2Token The address of the token in L2.\\n    /// @param from The address of sender in L2.\\n    /// @param to The address of recipient in L1.\\n    /// @param amount The amount of token will be deposited from L2 to L1.\\n    /// @param data The optional calldata passed to recipient in L1.\\n    event WithdrawERC20(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the corresponding l1 token address given l2 token address.\\n    /// @param l2Token The address of l2 token.\\n    function getL1ERC20Address(address l2Token) external view returns (address);\\n\\n    /// @notice Return the corresponding l2 token address given l1 token address.\\n    /// @param l1Token The address of l1 token.\\n    function getL2ERC20Address(address l1Token) external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Withdraw of some token to a caller's account on L1.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param token The address of token in L2.\\n    /// @param amount The amount of token to transfer.\\n    /// @param gasLimit Unused, but included for potential forward compatibility considerations.\\n    function withdrawERC20(\\n        address token,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Withdraw of some token to a recipient's account on L1.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param token The address of token in L2.\\n    /// @param to The address of recipient's account on L1.\\n    /// @param amount The amount of token to transfer.\\n    /// @param gasLimit Unused, but included for potential forward compatibility considerations.\\n    function withdrawERC20(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Withdraw of some token to a recipient's account on L1 and call.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param token The address of token in L2.\\n    /// @param to The address of recipient's account on L1.\\n    /// @param amount The amount of token to transfer.\\n    /// @param data Optional data to forward to recipient's account.\\n    /// @param gasLimit Unused, but included for potential forward compatibility considerations.\\n    function withdrawERC20AndCall(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Complete a deposit from L1 to L2 and send fund to recipient's account in L2.\\n    /// @dev Make this function payable to handle WETH deposit/withdraw.\\n    ///      The function should only be called by L2ScrollMessenger.\\n    ///      The function should also only be called by L1ERC20Gateway in L1.\\n    /// @param l1Token The address of corresponding L1 token.\\n    /// @param l2Token The address of corresponding L2 token.\\n    /// @param from The address of account who deposits the token in L1.\\n    /// @param to The address of recipient in L2 to receive the token.\\n    /// @param amount The amount of the token to deposit.\\n    /// @param data Optional data to forward to recipient's account.\\n    function finalizeDepositERC20(\\n        address l1Token,\\n        address l2Token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/libraries/callbacks/IMessageDropCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IMessageDropCallback {\\n    function onDropMessage(bytes memory message) external payable;\\n}\\n\"\r\n    },\r\n    \"src/libraries/callbacks/IScrollGatewayCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollGatewayCallback {\\n    function onScrollGatewayCallback(bytes memory data) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/constants/ScrollConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ScrollConstants {\\n    /// @notice The address of default cross chain message sender.\\n    address internal constant DEFAULT_XDOMAIN_MESSAGE_SENDER = address(1);\\n\\n    /// @notice The address for dropping message.\\n    /// @dev The first 20 bytes of keccak(\\\"drop\\\")\\n    address internal constant DROP_XDOMAIN_MESSAGE_SENDER = 0x6f297C61B5C92eF107fFD30CD56AFFE5A273e841;\\n}\\n\"\r\n    },\r\n    \"src/libraries/gateway/IScrollGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollGateway {\\n    /// @notice The address of corresponding L1/L2 Gateway contract.\\n    function counterpart() external view returns (address);\\n\\n    /// @notice The address of L1GatewayRouter/L2GatewayRouter contract.\\n    function router() external view returns (address);\\n\\n    /// @notice The address of corresponding L1ScrollMessenger/L2ScrollMessenger contract.\\n    function messenger() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/libraries/gateway/ScrollGatewayBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IScrollGateway} from \\\"./IScrollGateway.sol\\\";\\nimport {IScrollMessenger} from \\\"../IScrollMessenger.sol\\\";\\nimport {IScrollGatewayCallback} from \\\"../callbacks/IScrollGatewayCallback.sol\\\";\\nimport {ScrollConstants} from \\\"../constants/ScrollConstants.sol\\\";\\nimport {ITokenRateLimiter} from \\\"../../rate-limiter/ITokenRateLimiter.sol\\\";\\n\\n/// @title ScrollGatewayBase\\n/// @notice The `ScrollGatewayBase` is a base contract for gateway contracts used in both in L1 and L2.\\nabstract contract ScrollGatewayBase is ReentrancyGuardUpgradeable, OwnableUpgradeable, IScrollGateway {\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @inheritdoc IScrollGateway\\n    address public override counterpart;\\n\\n    /// @inheritdoc IScrollGateway\\n    address public override router;\\n\\n    /// @inheritdoc IScrollGateway\\n    address public override messenger;\\n\\n    /// @dev The storage slot used as token rate limiter contract, which is deprecated now.\\n    address private __rateLimiter;\\n\\n    /// @dev The storage slots for future usage.\\n    uint256[46] private __gap;\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyCallByCounterpart() {\\n        address _messenger = messenger; // gas saving\\n        require(_msgSender() == _messenger, \\\"only messenger can call\\\");\\n        require(counterpart == IScrollMessenger(_messenger).xDomainMessageSender(), \\\"only call by counterpart\\\");\\n        _;\\n    }\\n\\n    modifier onlyInDropContext() {\\n        address _messenger = messenger; // gas saving\\n        require(_msgSender() == _messenger, \\\"only messenger can call\\\");\\n        require(\\n            ScrollConstants.DROP_XDOMAIN_MESSAGE_SENDER == IScrollMessenger(_messenger).xDomainMessageSender(),\\n            \\\"only called in drop context\\\"\\n        );\\n        _;\\n    }\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    function _initialize(\\n        address _counterpart,\\n        address _router,\\n        address _messenger\\n    ) internal {\\n        require(_counterpart != address(0), \\\"zero counterpart address\\\");\\n        require(_messenger != address(0), \\\"zero messenger address\\\");\\n\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        OwnableUpgradeable.__Ownable_init();\\n\\n        counterpart = _counterpart;\\n        messenger = _messenger;\\n\\n        // @note: the address of router could be zero, if this contract is GatewayRouter.\\n        if (_router != address(0)) {\\n            router = _router;\\n        }\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /// @dev Internal function to forward calldata to target contract.\\n    /// @param _to The address of contract to call.\\n    /// @param _data The calldata passed to the contract.\\n    function _doCallback(address _to, bytes memory _data) internal {\\n        if (_data.length > 0 && _to.code.length > 0) {\\n            IScrollGatewayCallback(_to).onScrollGatewayCallback(_data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/IScrollMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when a cross domain message is sent.\\n    /// @param sender The address of the sender who initiates the message.\\n    /// @param target The address of target contract to call.\\n    /// @param value The amount of value passed to the target contract.\\n    /// @param messageNonce The nonce of the message.\\n    /// @param gasLimit The optional gas limit passed to L1 or L2.\\n    /// @param message The calldata passed to the target contract.\\n    event SentMessage(\\n        address indexed sender,\\n        address indexed target,\\n        uint256 value,\\n        uint256 messageNonce,\\n        uint256 gasLimit,\\n        bytes message\\n    );\\n\\n    /// @notice Emitted when a cross domain message is relayed successfully.\\n    /// @param messageHash The hash of the message.\\n    event RelayedMessage(bytes32 indexed messageHash);\\n\\n    /// @notice Emitted when a cross domain message is failed to relay.\\n    /// @param messageHash The hash of the message.\\n    event FailedRelayedMessage(bytes32 indexed messageHash);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the sender of a cross domain message.\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Send cross chain message from L1 to L2 or L2 to L1.\\n    /// @param target The address of account who receive the message.\\n    /// @param value The amount of ether passed when call target contract.\\n    /// @param message The content of the message.\\n    /// @param gasLimit Gas limit required to complete the message relay on corresponding chain.\\n    function sendMessage(\\n        address target,\\n        uint256 value,\\n        bytes calldata message,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Send cross chain message from L1 to L2 or L2 to L1.\\n    /// @param target The address of account who receive the message.\\n    /// @param value The amount of ether passed when call target contract.\\n    /// @param message The content of the message.\\n    /// @param gasLimit Gas limit required to complete the message relay on corresponding chain.\\n    /// @param refundAddress The address of account who will receive the refunded fee.\\n    function sendMessage(\\n        address target,\\n        uint256 value,\\n        bytes calldata message,\\n        uint256 gasLimit,\\n        address refundAddress\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/rate-limiter/ITokenRateLimiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ITokenRateLimiter {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the total limit is updated.\\n    /// @param oldTotalLimit The previous value of total limit before updating.\\n    /// @param newTotalLimit The current value of total limit after updating.\\n    event UpdateTotalLimit(address indexed token, uint256 oldTotalLimit, uint256 newTotalLimit);\\n\\n    /**********\\n     * Errors *\\n     **********/\\n\\n    /// @dev Thrown when the `periodDuration` is initialized to zero.\\n    error PeriodIsZero();\\n\\n    /// @dev Thrown when the `totalAmount` is initialized to zero.\\n    /// @param token The address of the token.\\n    error TotalLimitIsZero(address token);\\n\\n    /// @dev Thrown when an amount breaches the total limit in the period.\\n    /// @param token The address of the token.\\n    error ExceedTotalLimit(address token);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Request some token usage for `sender`.\\n    /// @param token The address of the token.\\n    /// @param amount The amount of token to use.\\n    function addUsedAmount(address token, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2USDC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DepositERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FinalizeWithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnAllLockedUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC20AndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getL2ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"onDropMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgedUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"updateCircleCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "L1USDCGateway", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000d79bc6a80acfa1a400aa3b763ba2b8fa0b7aafcd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}