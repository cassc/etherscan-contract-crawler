{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n\r\n    function transfer(address to, uint value) returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) returns (bool ok);\r\n    function approve(address spender, uint value) returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSigWallet {\r\n\r\n    // flag to determine if address is for a real contract or not\r\n    bool public isMultiSigWallet = false;\r\n\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n    address destination;\r\n    uint value;\r\n    bytes data;\r\n    bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner]) throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner]) throw;\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        if (transactions[transactionId].destination == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner]) throw;\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        if (confirmations[transactionId][owner]) throw;\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        if (transactions[transactionId].executed) throw;\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        if (_address == 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        if (ownerCount > MAX_OWNER_COUNT) throw;\r\n        if (_required > ownerCount) throw;\r\n        if (_required == 0) throw;\r\n        if (ownerCount == 0) throw;\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n    payable\r\n    {\r\n        if (msg.value > 0)\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function MultiSigWallet(address[] _owners, uint _required)\r\n    public\r\n    validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            if (isOwner[_owners[i]] || _owners[i] == 0) throw;\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        isMultiSigWallet = true;\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n    public\r\n    onlyWallet\r\n    ownerDoesNotExist(owner)\r\n    notNull(owner)\r\n    validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n    public\r\n    onlyWallet\r\n    ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n        if (owners[i] == owner) {\r\n            owners[i] = owners[owners.length - 1];\r\n            break;\r\n        }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n        changeRequirement(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    /// @param index the indx of the owner to be replaced\r\n    function replaceOwnerIndexed(address owner, address newOwner, uint index)\r\n    public\r\n    onlyWallet\r\n    ownerExists(owner)\r\n    ownerDoesNotExist(newOwner)\r\n    {\r\n        if (owners[index] != owner) throw;\r\n        owners[index] = newOwner;\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n    public\r\n    onlyWallet\r\n    validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n    public\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    transactionExists(transactionId)\r\n    notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n    public\r\n    constant\r\n    returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n            count += 1;\r\n            if (count == required)\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n    internal\r\n    notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction tx = transactions[transactionId];\r\n            tx.executed = true;\r\n            if (tx.destination.call.value(tx.value)(tx.data))\r\n            Execution(transactionId);\r\n            else {\r\n                ExecutionFailure(transactionId);\r\n                tx.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n    internal\r\n    notNull(destination)\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n        destination: destination,\r\n        value: value,\r\n        data: data,\r\n        executed: false\r\n        });\r\n        transactionCount += 1;\r\n        Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n    public\r\n    constant\r\n    returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n        if (confirmations[transactionId][owners[i]])\r\n        count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n    public\r\n    constant\r\n    returns (uint count)\r\n    {\r\n        for (uint i=0; i<transactionCount; i++)\r\n        if ((pending && !transactions[i].executed) ||\r\n        (executed && transactions[i].executed))\r\n        count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n    public\r\n    constant\r\n    returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n    public\r\n    constant\r\n    returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n        if (confirmations[transactionId][owners[i]]) {\r\n            confirmationsTemp[count] = owners[i];\r\n            count += 1;\r\n        }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n        _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n    public\r\n    constant\r\n    returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<transactionCount; i++)\r\n        if ((pending && !transactions[i].executed) ||\r\n        (executed && transactions[i].executed))\r\n        {\r\n            transactionIdsTemp[count] = i;\r\n            count += 1;\r\n        }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n        _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n\r\n}\r\n\r\ncontract OldToken is ERC20 {\r\n    // flag to determine if address is for a real contract or not\r\n    bool public isDecentBetToken;\r\n\r\n    address public decentBetMultisig;\r\n}\r\n\r\ncontract NextUpgradeAgent is SafeMath {\r\n    address public owner;\r\n\r\n    bool public isUpgradeAgent;\r\n\r\n    function upgradeFrom(address _from, uint256 _value) public;\r\n\r\n    function finalizeUpgrade() public;\r\n\r\n    function setOriginalSupply() public;\r\n}\r\n\r\n/// @title Time-locked vault of tokens allocated to DecentBet after 365 days\r\ncontract NewDecentBetVault is SafeMath {\r\n\r\n    // flag to determine if address is for a real contract or not\r\n    bool public isDecentBetVault = false;\r\n\r\n    NewDecentBetToken decentBetToken;\r\n\r\n    address decentBetMultisig;\r\n\r\n    uint256 unlockedAtTime;\r\n\r\n    // 1 year lockup\r\n    uint256 public constant timeOffset = 47 weeks;\r\n\r\n    /// @notice Constructor function sets the DecentBet Multisig address and\r\n    /// total number of locked tokens to transfer\r\n    function NewDecentBetVault(address _decentBetMultisig) /** internal */ {\r\n        if (_decentBetMultisig == 0x0) revert();\r\n        decentBetToken = NewDecentBetToken(msg.sender);\r\n        decentBetMultisig = _decentBetMultisig;\r\n        isDecentBetVault = true;\r\n\r\n        // 1 year later\r\n        unlockedAtTime = safeAdd(getTime(), timeOffset);\r\n    }\r\n\r\n    /// @notice Transfer locked tokens to Decent.bet's multisig wallet\r\n    function unlock() external {\r\n        // Wait your turn!\r\n        if (getTime() < unlockedAtTime) revert();\r\n        // Will fail if allocation (and therefore toTransfer) is 0.\r\n        if (!decentBetToken.transfer(decentBetMultisig, decentBetToken.balanceOf(this))) revert();\r\n    }\r\n\r\n    function getTime() internal returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    // disallow ETH payments to TimeVault\r\n    function() payable {\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\ncontract NewDecentBetToken is ERC20, SafeMath {\r\n\r\n    // Token information\r\n    bool public isDecentBetToken;\r\n\r\n    string public constant name = \"Decent.Bet Token\";\r\n\r\n    string public constant symbol = \"DBET\";\r\n\r\n    uint256 public constant decimals = 18;  // decimal places\r\n\r\n    uint256 public constant housePercentOfTotal = 10;\r\n\r\n    uint256 public constant vaultPercentOfTotal = 18;\r\n\r\n    uint256 public constant bountyPercentOfTotal = 2;\r\n\r\n    uint256 public constant crowdfundPercentOfTotal = 70;\r\n\r\n    // flag to determine if address is for a real contract or not\r\n    bool public isNewToken = false;\r\n\r\n    // Token information\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Upgrade information\r\n    NewUpgradeAgent public upgradeAgent;\r\n\r\n    NextUpgradeAgent public nextUpgradeAgent;\r\n\r\n    bool public finalizedNextUpgrade = false;\r\n\r\n    address public nextUpgradeMaster;\r\n\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event UpgradeFinalized(address sender, address nextUpgradeAgent);\r\n\r\n    event UpgradeAgentSet(address agent);\r\n\r\n    uint256 public totalUpgraded;\r\n\r\n    // Old Token Information\r\n    OldToken public oldToken;\r\n\r\n    address public decentBetMultisig;\r\n\r\n    uint256 public oldTokenTotalSupply;\r\n\r\n    NewDecentBetVault public timeVault;\r\n\r\n    function NewDecentBetToken(address _upgradeAgent,\r\n    address _oldToken, address _nextUpgradeMaster) public {\r\n\r\n        isNewToken = true;\r\n\r\n        isDecentBetToken = true;\r\n\r\n        if (_upgradeAgent == 0x0) revert();\r\n        upgradeAgent = NewUpgradeAgent(_upgradeAgent);\r\n\r\n        if (_nextUpgradeMaster == 0x0) revert();\r\n        nextUpgradeMaster = _nextUpgradeMaster;\r\n\r\n        oldToken = OldToken(_oldToken);\r\n        if (!oldToken.isDecentBetToken()) revert();\r\n        oldTokenTotalSupply = oldToken.totalSupply();\r\n\r\n        decentBetMultisig = oldToken.decentBetMultisig();\r\n        if (!MultiSigWallet(decentBetMultisig).isMultiSigWallet()) revert();\r\n\r\n        timeVault = new NewDecentBetVault(decentBetMultisig);\r\n        if (!timeVault.isDecentBetVault()) revert();\r\n\r\n        // Founder's supply : 18% of total goes to vault, time locked for 1 year\r\n        uint256 vaultTokens = safeDiv(safeMul(oldTokenTotalSupply, vaultPercentOfTotal),\r\n        crowdfundPercentOfTotal);\r\n        balances[timeVault] = safeAdd(balances[timeVault], vaultTokens);\r\n        Transfer(0, timeVault, vaultTokens);\r\n\r\n        // House: 10% of total goes to Decent.bet for initial house setup\r\n        uint256 houseTokens = safeDiv(safeMul(oldTokenTotalSupply, housePercentOfTotal),\r\n        crowdfundPercentOfTotal);\r\n        balances[decentBetMultisig] = safeAdd(balances[decentBetMultisig], houseTokens);\r\n        Transfer(0, decentBetMultisig, houseTokens);\r\n\r\n        // Bounties: 2% of total goes to Decent bet for bounties\r\n        uint256 bountyTokens = safeDiv(safeMul(oldTokenTotalSupply, bountyPercentOfTotal),\r\n        crowdfundPercentOfTotal);\r\n        balances[decentBetMultisig] = safeAdd(balances[decentBetMultisig], bountyTokens);\r\n        Transfer(0, decentBetMultisig, bountyTokens);\r\n\r\n        totalSupply = safeAdd(safeAdd(vaultTokens, houseTokens), bountyTokens);\r\n    }\r\n\r\n    // Upgrade-related methods\r\n    function createToken(address _target, uint256 _amount) public {\r\n        if (msg.sender != address(upgradeAgent)) revert();\r\n        if (_amount == 0) revert();\r\n\r\n        balances[_target] = safeAdd(balances[_target], _amount);\r\n        totalSupply = safeAdd(totalSupply, _amount);\r\n        Transfer(_target, _target, _amount);\r\n    }\r\n\r\n    // ERC20 interface: transfer _value new tokens from msg.sender to _to\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();\r\n        if (_to == address(upgradeAgent)) revert();\r\n        if (_to == address(this)) revert();\r\n        //if (_to == address(UpgradeAgent(upgradeAgent).oldToken())) revert();\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {return false;}\r\n    }\r\n\r\n    // ERC20 interface: transfer _value new tokens from _from to _to\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();\r\n        if (_to == address(upgradeAgent)) revert();\r\n        if (_to == address(this)) revert();\r\n        //if (_to == address(UpgradeAgent(upgradeAgent).oldToken())) revert();\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            balances[_from] = safeSub(balances[_from], _value);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {return false;}\r\n    }\r\n\r\n    // ERC20 interface: delegate transfer rights of up to _value new tokens from\r\n    // msg.sender to _spender\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // ERC20 interface: returns the amount of new tokens belonging to _owner\r\n    // that _spender can spend via transferFrom\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // ERC20 interface: returns the wmount of new tokens belonging to _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Token upgrade functionality\r\n\r\n    /// @notice Upgrade tokens to the new token contract.\r\n    /// @param value The number of tokens to upgrade\r\n    function upgrade(uint256 value) external {\r\n        if (nextUpgradeAgent.owner() == 0x0) revert();\r\n        // need a real upgradeAgent address\r\n        if (finalizedNextUpgrade) revert();\r\n        // cannot upgrade if finalized\r\n\r\n        // Validate input value.\r\n        if (value == 0) revert();\r\n        if (value > balances[msg.sender]) revert();\r\n\r\n        // update the balances here first before calling out (reentrancy)\r\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\r\n        totalSupply = safeSub(totalSupply, value);\r\n        totalUpgraded = safeAdd(totalUpgraded, value);\r\n        nextUpgradeAgent.upgradeFrom(msg.sender, value);\r\n        Upgrade(msg.sender, nextUpgradeAgent, value);\r\n    }\r\n\r\n    /// @notice Set address of next upgrade target contract and enable upgrade\r\n    /// process.\r\n    /// @param agent The address of the UpgradeAgent contract\r\n    function setNextUpgradeAgent(address agent) external {\r\n        if (agent == 0x0) revert();\r\n        // don't set agent to nothing\r\n        if (msg.sender != nextUpgradeMaster) revert();\r\n        // Only a master can designate the next agent\r\n        nextUpgradeAgent = NextUpgradeAgent(agent);\r\n        if (!nextUpgradeAgent.isUpgradeAgent()) revert();\r\n        nextUpgradeAgent.setOriginalSupply();\r\n        UpgradeAgentSet(nextUpgradeAgent);\r\n    }\r\n\r\n    /// @notice Set address of next upgrade master and enable upgrade\r\n    /// process.\r\n    /// @param master The address that will manage upgrades, not the upgradeAgent contract address\r\n    function setNextUpgradeMaster(address master) external {\r\n        if (master == 0x0) revert();\r\n        if (msg.sender != nextUpgradeMaster) revert();\r\n        // Only a master can designate the next master\r\n        nextUpgradeMaster = master;\r\n    }\r\n\r\n    /// @notice finalize the upgrade\r\n    /// @dev Required state: Success\r\n    function finalizeNextUpgrade() external {\r\n        if (nextUpgradeAgent.owner() == 0x0) revert();\r\n        // we need a valid upgrade agent\r\n        if (msg.sender != nextUpgradeMaster) revert();\r\n        // only upgradeMaster can finalize\r\n        if (finalizedNextUpgrade) revert();\r\n        // can't finalize twice\r\n\r\n        finalizedNextUpgrade = true;\r\n        // prevent future upgrades\r\n\r\n        nextUpgradeAgent.finalizeUpgrade();\r\n        // call finalize upgrade on new contract\r\n        UpgradeFinalized(msg.sender, nextUpgradeAgent);\r\n    }\r\n\r\n    /// @dev Fallback function throws to avoid accidentally losing money\r\n    function() {revert();}\r\n}\r\n\r\n\r\n//Test the whole process against this: https://www.kingoftheether.com/contract-safety-checklist.html\r\ncontract NewUpgradeAgent is SafeMath {\r\n\r\n    // flag to determine if address is for a real contract or not\r\n    bool public isUpgradeAgent = false;\r\n\r\n    // Contract information\r\n    address public owner;\r\n\r\n    // Upgrade information\r\n    bool public upgradeHasBegun = false;\r\n\r\n    bool public finalizedUpgrade = false;\r\n\r\n    OldToken public oldToken;\r\n\r\n    address public decentBetMultisig;\r\n\r\n    NewDecentBetToken public newToken;\r\n\r\n    uint256 public originalSupply; // the original total supply of old tokens\r\n\r\n    uint256 public correctOriginalSupply; // Correct original supply accounting for 30% minted at finalizeCrowdfunding\r\n\r\n    uint256 public mintedPercentOfTokens = 30; // Amount of tokens that're minted at finalizeCrowdfunding\r\n\r\n    uint256 public crowdfundPercentOfTokens = 70;\r\n\r\n    uint256 public mintedTokens;\r\n\r\n    event NewTokenSet(address token);\r\n\r\n    event UpgradeHasBegun();\r\n\r\n    event InvariantCheckFailed(uint oldTokenSupply, uint newTokenSupply, uint originalSupply, uint value);\r\n\r\n    event InvariantCheckPassed(uint oldTokenSupply, uint newTokenSupply, uint originalSupply, uint value);\r\n\r\n    function NewUpgradeAgent(address _oldToken) {\r\n        owner = msg.sender;\r\n        isUpgradeAgent = true;\r\n        oldToken = OldToken(_oldToken);\r\n        if (!oldToken.isDecentBetToken()) revert();\r\n        decentBetMultisig = oldToken.decentBetMultisig();\r\n        originalSupply = oldToken.totalSupply();\r\n        mintedTokens = safeDiv(safeMul(originalSupply, mintedPercentOfTokens), crowdfundPercentOfTokens);\r\n        correctOriginalSupply = safeAdd(originalSupply, mintedTokens);\r\n    }\r\n\r\n    /// @notice Check to make sure that the current sum of old and\r\n    /// new version tokens is still equal to the original number of old version\r\n    /// tokens\r\n    /// @param _value The number of DBETs to upgrade\r\n    function safetyInvariantCheck(uint256 _value) public {\r\n        if (!newToken.isNewToken()) revert();\r\n        // Abort if new token contract has not been set\r\n        uint oldSupply = oldToken.totalSupply();\r\n        uint newSupply = newToken.totalSupply();\r\n        if (safeAdd(oldSupply, newSupply) != safeSub(correctOriginalSupply, _value)) {\r\n            InvariantCheckFailed(oldSupply, newSupply, correctOriginalSupply, _value);\r\n        } else {\r\n            InvariantCheckPassed(oldSupply, newSupply, correctOriginalSupply, _value);\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the new token contract address\r\n    /// @param _newToken The address of the new token contract\r\n    function setNewToken(address _newToken) external {\r\n        if (msg.sender != owner) revert();\r\n        if (_newToken == 0x0) revert();\r\n        if (upgradeHasBegun) revert();\r\n        // Cannot change token after upgrade has begun\r\n\r\n        newToken = NewDecentBetToken(_newToken);\r\n        if (!newToken.isNewToken()) revert();\r\n        NewTokenSet(newToken);\r\n    }\r\n\r\n    /// @notice Sets flag to prevent changing newToken after upgrade\r\n    function setUpgradeHasBegun() internal {\r\n        if (!upgradeHasBegun) {\r\n            upgradeHasBegun = true;\r\n            UpgradeHasBegun();\r\n        }\r\n    }\r\n\r\n    /// @notice Creates new version tokens from the new token\r\n    /// contract\r\n    /// @param _from The address of the token upgrader\r\n    /// @param _value The number of tokens to upgrade\r\n    function upgradeFrom(address _from, uint256 _value) public {\r\n        if(finalizedUpgrade) revert();\r\n        if (msg.sender != address(oldToken)) revert();\r\n        // Multisig can't upgrade since tokens are minted for it in new token constructor as it isn't part\r\n        // of totalSupply of oldToken.\r\n        if (_from == decentBetMultisig) revert();\r\n        // only upgrade from oldToken\r\n        if (!newToken.isNewToken()) revert();\r\n        // need a real newToken!\r\n\r\n        setUpgradeHasBegun();\r\n        // Right here oldToken has already been updated, but corresponding\r\n        // DBETs have not been created in the newToken contract yet\r\n        safetyInvariantCheck(_value);\r\n\r\n        newToken.createToken(_from, _value);\r\n\r\n        //Right here totalSupply invariant must hold\r\n        safetyInvariantCheck(0);\r\n    }\r\n\r\n    // Initializes original supply from old token total supply\r\n    function setOriginalSupply() public {\r\n        if (msg.sender != address(oldToken)) revert();\r\n        originalSupply = oldToken.totalSupply();\r\n    }\r\n\r\n    function finalizeUpgrade() public {\r\n        if (msg.sender != address(oldToken)) revert();\r\n        finalizedUpgrade = true;\r\n    }\r\n\r\n    /// @dev Fallback function disallows depositing ether.\r\n    function() {revert();}\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextUpgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldTokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeNextUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDecentBetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNewToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedNextUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"housePercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decentBetMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setNextUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setNextUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextUpgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_upgradeAgent\",\"type\":\"address\"},{\"name\":\"_oldToken\",\"type\":\"address\"},{\"name\":\"_nextUpgradeMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nextUpgradeAgent\",\"type\":\"address\"}],\"name\":\"UpgradeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "NewDecentBetToken", "CompilerVersion": "v0.4.16+commit.d7661dd9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002139ecd8246594ef21267eafdae924130f967a3e000000000000000000000000540449e4d172cd9491c76320440cd74933d5691a000000000000000000000000818e6a1cdccc7db87e991d979aa8d3eec199b868", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://314f30a6df2ff3e86639a0d8681cf81ea07afa8c4b50a27f7282dd722822419c"}