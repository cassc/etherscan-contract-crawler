{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/router/quoter/SwapQuoterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {PoolQuoterV1} from \\\"./PoolQuoterV1.sol\\\";\\nimport {ISwapQuoterV1, LimitedToken, SwapQuery, Pool} from \\\"../interfaces/ISwapQuoterV1.sol\\\";\\nimport {ISwapQuoterV2} from \\\"../interfaces/ISwapQuoterV2.sol\\\";\\nimport {Action, ActionLib} from \\\"../libs/Structs.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts-4.5.0/utils/structs/EnumerableSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\n\\ncontract SwapQuoterV2 is PoolQuoterV1, Ownable, ISwapQuoterV2 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice Error when trying to add a pool that has been added already.\\n    error SwapQuoterV2__DuplicatedPool(address pool);\\n\\n    /// @notice Error when trying to remove a pool that has not been added.\\n    error SwapQuoterV2__UnknownPool(address pool);\\n\\n    /// @notice Emitted when a pool is added to SwapQuoterV2.\\n    event PoolAdded(address bridgeToken, PoolType poolType, address pool);\\n\\n    /// @notice Emitted when a pool is removed from SwapQuoterV2.\\n    event PoolRemoved(address bridgeToken, PoolType poolType, address pool);\\n\\n    /// @notice Emitted when the SynapseRouter contract is updated.\\n    event SynapseRouterUpdated(address synapseRouter);\\n\\n    /// @notice Defines the type of supported liquidity pool.\\n    /// - Default: pool that implements the IDefaultPool interface, which is either the StableSwap pool\\n    /// or a wrapper contract around the non-standard pool that conforms to the interface.\\n    /// - Linked: LinkedPool contract, which is a wrapper for arbitrary amount of liquidity pools to\\n    /// be used for multi-hop swaps.\\n    enum PoolType {\\n        Default,\\n        Linked\\n    }\\n\\n    /// @notice Struct that is used for storing the whitelisted liquidity pool for a bridge token.\\n    /// @dev Occupies a single storage slot.\\n    /// @param poolType     Type of the pool: Default or Linked.\\n    /// @param pool         Address of the whitelisted pool.\\n    struct TypedPool {\\n        PoolType poolType;\\n        address pool;\\n    }\\n\\n    /// @notice Struct that is used as a argument/return value for pool management functions.\\n    /// Therefore, it is not used internally and does not occupy any storage slots.\\n    /// @dev `bridgeToken` can be set to zero, in which case struct defines a pool\\n    /// that could be used for swaps on origin chain only.\\n    /// @param bridgeToken  Address of the bridge token.\\n    /// @param poolType     Type of the pool: Default or Linked.\\n    /// @param pool         Address of the whitelisted pool.\\n    struct BridgePool {\\n        address bridgeToken;\\n        PoolType poolType;\\n        address pool;\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 STORAGE \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Address of the SynapseRouter contract, which is used as \\\"Router Adapter\\\" for doing\\n    /// swaps through Default Pools (or handling ETH).\\n    address public synapseRouter;\\n\\n    /// @dev Set of Default Pools that could be used for swaps on origin chain only\\n    EnumerableSet.AddressSet internal _originDefaultPools;\\n    /// @dev Set of Linked Pools that could be used for swaps on origin chain only\\n    EnumerableSet.AddressSet internal _originLinkedPools;\\n\\n    /// @dev Mapping from a bridge token into a whitelisted liquidity pool for the token.\\n    /// Could be used for swaps on both origin and destination chains.\\n    /// For swaps on destination chains, this is the only pool that could be used for swaps for the given token.\\n    mapping(address => TypedPool) internal _bridgePools;\\n    /// @dev Set of bridge tokens with whitelisted liquidity pools (keys for `_bridgePools` mapping)\\n    EnumerableSet.AddressSet internal _bridgeTokens;\\n\\n    constructor(\\n        address synapseRouter_,\\n        address defaultPoolCalc_,\\n        address weth_,\\n        address owner_\\n    ) PoolQuoterV1(defaultPoolCalc_, weth_) {\\n        setSynapseRouter(synapseRouter_);\\n        transferOwnership(owner_);\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 QUOTER V2 MANAGEMENT \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Allows to add a list of pools to SwapQuoterV2.\\n    /// - If bridgeToken is zero, the pool is added to the set of \\\"origin pools\\\" corresponding to the pool type:\\n    /// Default Pools for PoolType.Default, Linked Pools for PoolType.Linked.\\n    /// - Otherwise, the pool is added as the whitelisted pool for the bridge token. The pool could be used for swaps\\n    /// on both origin and destination chains.\\n    /// > Note: to update the whitelisted pool for the bridge token, supply the new pool with the same bridge token.\\n    /// > It is not required to remove the old pool first.\\n    /// @dev Will revert, if the pool is already added.\\n    function addPools(BridgePool[] memory pools) external onlyOwner {\\n        unchecked {\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < pools.length; ++i) {\\n                _addPool(pools[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Allows to remove a list of pools from SwapQuoterV2.\\n    /// - If bridgeToken is zero, the pool is removed from the set of \\\"origin pools\\\" corresponding to the pool type:\\n    /// Default Pools for PoolType.Default, Linked Pools for PoolType.Linked.\\n    /// - Otherwise, the pool is removed as the whitelisted pool for the bridge token.\\n    /// @dev Will revert, if the pool is not added.\\n    function removePools(BridgePool[] memory pools) external onlyOwner {\\n        unchecked {\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < pools.length; ++i) {\\n                _removePool(pools[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Allows to set the SynapseRouter contract, which is used as \\\"Router Adapter\\\" for doing\\n    /// swaps through Default Pools (or handling ETH).\\n    /// Note: this will not affect the old SynapseRouter contract which still uses this Quoter, as the old SynapseRouter\\n    /// could handle the requests with the new SynapseRouter as external \\\"Router Adapter\\\".\\n    function setSynapseRouter(address synapseRouter_) public onlyOwner {\\n        synapseRouter = synapseRouter_;\\n        emit SynapseRouterUpdated(synapseRouter_);\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 QUOTER V2 VIEWS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Returns the list of Default Pools that could be used for swaps on origin chain only.\\n    function getOriginDefaultPools() external view returns (address[] memory originDefaultPools) {\\n        return _originDefaultPools.values();\\n    }\\n\\n    /// @notice Returns the list of Linked Pools that could be used for swaps on origin chain only.\\n    function getOriginLinkedPools() external view returns (address[] memory originLinkedPools) {\\n        return _originLinkedPools.values();\\n    }\\n\\n    /// @notice Returns the list of bridge tokens with whitelisted liquidity pools.\\n    /// The pools could be used for swaps on both origin and destination chains.\\n    function getBridgePools() external view returns (BridgePool[] memory bridgePools) {\\n        uint256 amtBridgePools = _bridgeTokens.length();\\n        bridgePools = new BridgePool[](amtBridgePools);\\n        unchecked {\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < amtBridgePools; ++i) {\\n                address bridgeToken = _bridgeTokens.at(i);\\n                TypedPool memory typedPool = _bridgePools[bridgeToken];\\n                bridgePools[i] = BridgePool({\\n                    bridgeToken: bridgeToken,\\n                    poolType: typedPool.poolType,\\n                    pool: typedPool.pool\\n                });\\n            }\\n        }\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 GENERAL QUOTES V1 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function findConnectedTokens(LimitedToken[] memory bridgeTokensIn, address tokenOut)\\n        external\\n        view\\n        returns (uint256 amountFound, bool[] memory isConnected)\\n    {\\n        uint256 length = bridgeTokensIn.length;\\n        isConnected = new bool[](length);\\n        unchecked {\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < length; ++i) {\\n                if (\\n                    _isConnected({\\n                        isOriginSwap: false,\\n                        actionMask: bridgeTokensIn[i].actionMask,\\n                        tokenIn: bridgeTokensIn[i].token,\\n                        tokenOut: tokenOut\\n                    })\\n                ) {\\n                    isConnected[i] = true;\\n                    // unchecked: ++amountFound never overflows uint256\\n                    ++amountFound;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function getAmountOut(\\n        LimitedToken memory tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (SwapQuery memory query) {\\n        query = _getAmountOut(tokenIn.actionMask, tokenIn.token, tokenOut, amountIn);\\n        // tokenOut filed should always be populated, even if a path wasn't found\\n        query.tokenOut = tokenOut;\\n        // Fill the remaining fields if a path was found\\n        if (query.minAmountOut > 0) {\\n            // SynapseRouter should be used as \\\"Router Adapter\\\" for doing a swap through Default pools (or handling ETH),\\n            // as it inherits from DefaultAdapter.\\n            if (query.rawParams.length > 0) query.routerAdapter = synapseRouter;\\n            // Set default deadline to infinity. Not using the value of 0,\\n            // which would lead to every swap to revert by default.\\n            query.deadline = type(uint256).max;\\n        }\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 GENERAL QUOTES V2 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @inheritdoc ISwapQuoterV2\\n    function areConnectedTokens(LimitedToken memory tokenIn, address tokenOut) external view returns (bool) {\\n        // Check if this is a request for an origin swap.\\n        // These are given with the tokenIn.actionMask set to the full set of actions.\\n        bool isOriginSwap = tokenIn.actionMask == ActionLib.allActions();\\n        return _isConnected(isOriginSwap, tokenIn.actionMask, tokenIn.token, tokenOut);\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 POOL GETTERS V1 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function allPools() external view returns (Pool[] memory pools) {\\n        // Combine Default, Linked, and Bridge pools into a single array\\n        uint256 amtOriginDefaultPools = _originDefaultPools.length();\\n        uint256 amtOriginLinkedPools = _originLinkedPools.length();\\n        uint256 amtBridgePools = _bridgeTokens.length();\\n        unchecked {\\n            // unchecked: total amount of pools never overflows uint256\\n            pools = new Pool[](amtOriginDefaultPools + amtOriginLinkedPools + amtBridgePools);\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < amtOriginDefaultPools; ++i) {\\n                pools[i] = _getPoolData(PoolType.Default, _originDefaultPools.at(i));\\n            }\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < amtOriginLinkedPools; ++i) {\\n                // unchecked: amtOriginDefaultPools + i < pools.length => never overflows\\n                pools[amtOriginDefaultPools + i] = _getPoolData(PoolType.Linked, _originLinkedPools.at(i));\\n            }\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < amtBridgePools; ++i) {\\n                address bridgeToken = _bridgeTokens.at(i);\\n                TypedPool memory typedPool = _bridgePools[bridgeToken];\\n                // unchecked: amtOriginDefaultPools + amtOriginLinkedPools + i < pools.length => never overflows uint256\\n                pools[amtOriginDefaultPools + amtOriginLinkedPools + i] = _getPoolData(\\n                    typedPool.poolType,\\n                    typedPool.pool\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function poolsAmount() external view returns (uint256 amtPools) {\\n        // Total amount of pools is the sum of pools in each pool type and bridge pools\\n        unchecked {\\n            // unchecked: total amount of pools never overflows uint256\\n            return _originDefaultPools.length() + _originLinkedPools.length() + _bridgeTokens.length();\\n        }\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 INTERNAL: POOL MANAGEMENT \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @dev Adds a pool to SwapQuoterV2.\\n    /// - If bridgeToken is zero, the pool is added to the set of pools corresponding to the pool type.\\n    /// - Otherwise, the pool is added to the set of bridge pools.\\n    function _addPool(BridgePool memory pool) internal {\\n        bool wasAdded = false;\\n        if (pool.bridgeToken == address(0)) {\\n            // No bridge token was supplied, so we add the pool to the corresponding set of \\\"origin pools\\\".\\n            // We also check that the pool has not been added yet.\\n            if (pool.poolType == PoolType.Default) {\\n                wasAdded = _originDefaultPools.add(pool.pool);\\n            } else {\\n                wasAdded = _originLinkedPools.add(pool.pool);\\n            }\\n        } else {\\n            address bridgeToken = pool.bridgeToken;\\n            // Bridge token was supplied, so we set the pool as the whitelisted pool for the bridge token.\\n            // We check that the old whitelisted pool is not the same as the new one.\\n            wasAdded = _bridgePools[bridgeToken].pool != pool.pool;\\n            // Add bridgeToken to the list of keys, if it wasn't added before\\n            _bridgeTokens.add(bridgeToken);\\n            _bridgePools[bridgeToken] = TypedPool({poolType: pool.poolType, pool: pool.pool});\\n        }\\n        if (!wasAdded) revert SwapQuoterV2__DuplicatedPool(pool.pool);\\n        emit PoolAdded(pool.bridgeToken, pool.poolType, pool.pool);\\n    }\\n\\n    /// @dev Removes a pool from SwapQuoterV2.\\n    /// - If bridgeToken is zero, the pool is removed from the set of pools corresponding to the pool type.\\n    /// - Otherwise, the pool is removed from the set of bridge pools.\\n    function _removePool(BridgePool memory pool) internal {\\n        bool wasRemoved = false;\\n        if (pool.bridgeToken == address(0)) {\\n            // No bridge token was supplied, so we remove the pool from the corresponding set of \\\"origin pools\\\".\\n            // We also check that the pool has been added before.\\n            if (pool.poolType == PoolType.Default) {\\n                wasRemoved = _originDefaultPools.remove(pool.pool);\\n            } else {\\n                wasRemoved = _originLinkedPools.remove(pool.pool);\\n            }\\n        } else {\\n            address bridgeToken = pool.bridgeToken;\\n            // Bridge token was supplied, so we remove the pool as the whitelisted pool for the bridge token.\\n            // We check that the old whitelisted pool is the same as the one we want to remove.\\n            // Note: we remove both the pool (value) and the bridge token (key).\\n            wasRemoved = _bridgeTokens.remove(bridgeToken) && _bridgePools[bridgeToken].pool == pool.pool;\\n            delete _bridgePools[pool.bridgeToken];\\n        }\\n        if (!wasRemoved) revert SwapQuoterV2__UnknownPool(pool.pool);\\n        emit PoolRemoved(pool.bridgeToken, pool.poolType, pool.pool);\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 INTERNAL: POOL INSPECTION \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @dev Returns the data for the given pool: pool address, LP token address (if applicable), and tokens.\\n    function _getPoolData(PoolType poolType, address pool) internal view returns (Pool memory poolData) {\\n        poolData.pool = pool;\\n        // Populate LP token field only for default pools\\n        if (poolType == PoolType.Default) poolData.lpToken = _lpToken(pool);\\n        poolData.tokens = _getPoolTokens(pool);\\n    }\\n\\n    /// @dev Checks whether `tokenIn -> tokenOut` is possible given the `actionMask` of available actions for `tokenIn`.\\n    /// Will only consider the whitelisted pool for `tokenIn`, if Swap/AddLiquidity/RemoveLiquidity are required.\\n    function _isConnected(\\n        bool isOriginSwap,\\n        uint256 actionMask,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (bool) {\\n        // If token addresses match, no action is required whatsoever.\\n        if (tokenIn == tokenOut) {\\n            return true;\\n        }\\n        // Check if ETH <> WETH (Action.HandleEth) could fulfill tokenIn -> tokenOut request.\\n        if (Action.HandleEth.isIncluded(actionMask) && _isEthAndWeth(tokenIn, tokenOut)) {\\n            return true;\\n        }\\n        if (isOriginSwap) {\\n            return _isOriginSwapPossible(actionMask, tokenIn, tokenOut);\\n        } else {\\n            return _isDestinationSwapPossible(actionMask, tokenIn, tokenOut);\\n        }\\n    }\\n\\n    /// @dev Checks whether destination swap `tokenIn -> tokenOut` is possible:\\n    /// - Only whitelisted pool for `tokenIn` is considered.\\n    /// - Only pool-related actions included in `actionMask` are considered:\\n    ///     - Default Pool: Swap/AddLiquidity/RemoveLiquidity\\n    ///     - Linked Pool: Swap\\n    function _isDestinationSwapPossible(\\n        uint256 actionMask,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (bool) {\\n        TypedPool memory bridgePool = _bridgePools[tokenIn];\\n        // Do nothing, if tokenIn doesn't have a whitelisted pool\\n        if (bridgePool.pool == address(0)) return false;\\n        if (bridgePool.poolType == PoolType.Default) {\\n            // Check if Default Pool could fulfill tokenIn -> tokenOut request.\\n            return _isConnectedViaDefaultPool(actionMask, bridgePool.pool, tokenIn, tokenOut);\\n        } else {\\n            // Check if Linked Pool could fulfill tokenIn -> tokenOut request.\\n            return _isConnectedViaLinkedPool(actionMask, bridgePool.pool, tokenIn, tokenOut);\\n        }\\n    }\\n\\n    /// @dev Checks whether origin swap `tokenIn -> tokenOut` is possible:\\n    /// - All available pools are considered, both origin-only and whitelisted pools for destination swaps.\\n    /// - Only pool-related actions included in `actionMask` are considered:\\n    ///     - Default Pool: Swap/AddLiquidity/RemoveLiquidity\\n    ///     - Linked Pool: Swap\\n    function _isOriginSwapPossible(\\n        uint256 actionMask,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (bool) {\\n        unchecked {\\n            uint256 numPools = _originDefaultPools.length();\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < numPools; ++i) {\\n                if (_isConnectedViaDefaultPool(actionMask, _originDefaultPools.at(i), tokenIn, tokenOut)) {\\n                    return true;\\n                }\\n            }\\n            numPools = _originLinkedPools.length();\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < numPools; ++i) {\\n                if (_isConnectedViaLinkedPool(actionMask, _originLinkedPools.at(i), tokenIn, tokenOut)) {\\n                    return true;\\n                }\\n            }\\n            // Also check all whitelisted pools for destination swaps, as these could be used for origin swaps as well\\n            numPools = _bridgeTokens.length();\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < numPools; ++i) {\\n                TypedPool memory bridgePool = _bridgePools[_bridgeTokens.at(i)];\\n                if (_isPoolSwapPossible(actionMask, bridgePool, tokenIn, tokenOut)) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Returns the SwapQuery struct that could be used to fulfill `tokenIn -> tokenOut` request.\\n    /// - Will check all liquidity pools, if `actionMask` is set to the full set of actions.\\n    /// - Will only check the whitelisted pool for `tokenIn` otherwise.\\n    /// > Only populates the `minAmountOut` and `rawParams` fields, unless no trade path is found between the tokens.\\n    /// > Other fields are supposed to be populated in the caller function.\\n    function _getAmountOut(\\n        uint256 actionMask,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) internal view returns (SwapQuery memory query) {\\n        // If token addresses match, no action is required whatsoever.\\n        if (tokenIn == tokenOut) {\\n            query.minAmountOut = amountIn;\\n            // query.rawParams is \\\"\\\", indicating that no further action is required\\n            return query;\\n        }\\n        // Note: we will be passing `quote` as a memory reference to the internal functions,\\n        // where it will be populated with the best quote found so far.\\n        // Check if ETH <> WETH (Action.HandleEth) could fulfill tokenIn -> tokenOut request.\\n        _checkHandleETHQuote(actionMask, tokenIn, tokenOut, amountIn, query);\\n        // Check if this is a request for an origin swap.\\n        // These are given with the tokenIn.actionMask set to the full set of actions.\\n        if (actionMask != ActionLib.allActions()) {\\n            // This is a request for a destination swap. Only whitelisted pool for `tokenIn` is considered.\\n            TypedPool memory bridgePool = _bridgePools[tokenIn];\\n            _checkPoolQuote(actionMask, bridgePool, tokenIn, tokenOut, amountIn, query);\\n            return query;\\n        }\\n        unchecked {\\n            // If this is a request for an origin swap, check all available origin-only pools\\n            uint256 numPools = _originDefaultPools.length();\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < numPools; ++i) {\\n                _checkDefaultPoolQuote(actionMask, _originDefaultPools.at(i), tokenIn, tokenOut, amountIn, query);\\n            }\\n            numPools = _originLinkedPools.length();\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < numPools; ++i) {\\n                _checkLinkedPoolQuote(actionMask, _originLinkedPools.at(i), tokenIn, tokenOut, amountIn, query);\\n            }\\n            // Also check all whitelisted pools for destination swaps, as these could be used for origin swaps as well\\n            numPools = _bridgeTokens.length();\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < numPools; ++i) {\\n                TypedPool memory bridgePool = _bridgePools[_bridgeTokens.at(i)];\\n                _checkPoolQuote(actionMask, bridgePool, tokenIn, tokenOut, amountIn, query);\\n            }\\n        }\\n    }\\n\\n    /// @dev Checks whether `tokenIn -> tokenOut` is possible via the given Pool,\\n    /// given the `actionMask` of available actions for the token.\\n    /// Note: only checks pool-related actions:\\n    /// - Default Pool: Swap/AddLiquidity/RemoveLiquidity\\n    /// - Linked Pool: Swap\\n    function _isPoolSwapPossible(\\n        uint256 actionMask,\\n        TypedPool memory bridgePool,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (bool) {\\n        // Don't do anything, if no whitelisted pool exists.\\n        if (bridgePool.pool == address(0)) return false;\\n        if (bridgePool.poolType == PoolType.Default) {\\n            return _isConnectedViaDefaultPool(actionMask, bridgePool.pool, tokenIn, tokenOut);\\n        } else {\\n            return _isConnectedViaLinkedPool(actionMask, bridgePool.pool, tokenIn, tokenOut);\\n        }\\n    }\\n\\n    /// @dev Compares `curBestQuery` (representing query with the best quote found so far) with the quote for\\n    /// `tokenIn -> tokenOut` via the given Pool, given the `actionMask` of available actions for the token.\\n    /// If the action is possible, and the found quote is better, the `curBestQuote` is overwritten with\\n    /// the struct describing the new best quote.\\n    /// Note: `bridgePool` is a whitelisted liquidity pool for `tokenIn`, meaning that this is the only pool\\n    /// that could be used for \\\"destination swaps\\\" when bridging `tokenIn` to this chain.\\n    /// Note: only checks pool-related actions:\\n    /// - Default Pool: Swap/AddLiquidity/RemoveLiquidity\\n    /// - Linked Pool: Swap\\n    function _checkPoolQuote(\\n        uint256 actionMask,\\n        TypedPool memory bridgePool,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        SwapQuery memory curBestQuery\\n    ) internal view {\\n        // Don't do anything, if no whitelisted pool exists.\\n        if (bridgePool.pool == address(0)) return;\\n        if (bridgePool.poolType == PoolType.Default) {\\n            _checkDefaultPoolQuote(actionMask, bridgePool.pool, tokenIn, tokenOut, amountIn, curBestQuery);\\n        } else {\\n            _checkLinkedPoolQuote(actionMask, bridgePool.pool, tokenIn, tokenOut, amountIn, curBestQuery);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/quoter/PoolQuoterV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IDefaultPoolCalc} from \\\"../interfaces/IDefaultPoolCalc.sol\\\";\\nimport {IDefaultExtendedPool} from \\\"../interfaces/IDefaultExtendedPool.sol\\\";\\nimport {ILinkedPool} from \\\"../interfaces/ILinkedPool.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\nimport {ISwapQuoterV1, PoolToken, SwapQuery} from \\\"../interfaces/ISwapQuoterV1.sol\\\";\\nimport {Action, DefaultParams} from \\\"../libs/Structs.sol\\\";\\nimport {UniversalTokenLib} from \\\"../libs/UniversalToken.sol\\\";\\n\\n/// @notice Stateless abstraction to calculate exact quotes for any DefaultPool instances.\\nabstract contract PoolQuoterV1 is ISwapQuoterV1 {\\n    /// @dev Returned index value for a token that is not found in the pool.\\n    /// We reasonably assume that no pool will ever hold 256 tokens, so this value is safe to use.\\n    uint8 private constant NOT_FOUND = 0xFF;\\n\\n    /// @notice Address of deployed calculator contract for DefaultPool, which is able to calculate\\n    /// EXACT quotes for AddLiquidity action (something that DefaultPool contract itself is unable to do).\\n    address public immutable defaultPoolCalc;\\n    /// @notice Address of WETH token used in the pools. Represents wrapped version of chain's native currency,\\n    /// e.g. WETH on Ethereum, WBNB on BSC, etc.\\n    address public immutable weth;\\n\\n    constructor(address defaultPoolCalc_, address weth_) {\\n        defaultPoolCalc = defaultPoolCalc_;\\n        weth = weth_;\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 SPECIFIC POOL QUOTES \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function calculateAddLiquidity(address pool, uint256[] memory amounts) external view returns (uint256 amountOut) {\\n        // Forward the only getter that is not properly implemented in the StableSwap contract (DefaultPool).\\n        return IDefaultPoolCalc(defaultPoolCalc).calculateAddLiquidity(pool, amounts);\\n    }\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function calculateSwap(\\n        address pool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 amountOut) {\\n        return IDefaultExtendedPool(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function calculateRemoveLiquidity(address pool, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory amountsOut)\\n    {\\n        return IDefaultExtendedPool(pool).calculateRemoveLiquidity(amount);\\n    }\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function calculateWithdrawOneToken(\\n        address pool,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 amountOut) {\\n        return IDefaultExtendedPool(pool).calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 POOL GETTERS V1 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function poolInfo(address pool) external view returns (uint256 numTokens, address lpToken) {\\n        numTokens = _numTokens(pool);\\n        lpToken = _lpToken(pool);\\n    }\\n\\n    /// @inheritdoc ISwapQuoterV1\\n    function poolTokens(address pool) external view returns (PoolToken[] memory tokens) {\\n        tokens = _getPoolTokens(pool);\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 POOL INSPECTION \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @dev Returns the LP token address for the given pool, if it exists. Otherwise, returns address(0).\\n    function _lpToken(address pool) internal view returns (address) {\\n        // Try getting the LP token address from the pool.\\n        try IDefaultExtendedPool(pool).swapStorage() returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address lpToken\\n        ) {\\n            return lpToken;\\n        } catch {\\n            // Return address(0) if the pool doesn't have an LP token.\\n            return address(0);\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens the given pool supports.\\n    function _numTokens(address pool) internal view returns (uint256 numTokens) {\\n        while (true) {\\n            // Iterate over the tokens until we get an exception.\\n            try IDefaultExtendedPool(pool).getToken(uint8(numTokens)) returns (address) {\\n                unchecked {\\n                    // unchecked: ++numTokens never overflows uint256\\n                    ++numTokens;\\n                }\\n            } catch {\\n                // End of pool reached, exit the loop.\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the tokens the given pool supports.\\n    function _getPoolTokens(address pool) internal view returns (PoolToken[] memory tokens) {\\n        uint256 numTokens = _numTokens(pool);\\n        tokens = new PoolToken[](numTokens);\\n        unchecked {\\n            // unchecked: ++i never overflows uint256\\n            for (uint256 i = 0; i < numTokens; ++i) {\\n                address token = IDefaultExtendedPool(pool).getToken(uint8(i));\\n                tokens[i] = PoolToken({isWeth: token == weth, token: token});\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns pool indexes for the two given tokens.\\n    /// - The return value NOT_FOUND (0xFF) means a token is not supported by the pool.\\n    /// - If one of the pool tokens is WETH, ETH_ADDRESS is also considered as a pool token: a valid index\\n    /// representing WETH in returned.\\n    /// Note: this is not supposed to be used with LinkedPool contracts, as a single token can appear\\n    /// multiple times in the LinkedPool's token tree.\\n    function _getTokenIndexes(\\n        address pool,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (uint8 indexIn, uint8 indexOut) {\\n        uint256 numTokens = _numTokens(pool);\\n        // Assign NOT_FOUND to both indexes by default. This value will be overwritten if the token is found.\\n        indexIn = NOT_FOUND;\\n        indexOut = NOT_FOUND;\\n        unchecked {\\n            // unchecked: numTokens <= 255 => ++t never overflows uint8\\n            for (uint8 t = 0; t < numTokens; ++t) {\\n                address poolToken = IDefaultExtendedPool(pool).getToken(t);\\n                if (_poolToken(tokenIn) == poolToken) indexIn = t;\\n                if (_poolToken(tokenOut) == poolToken) indexOut = t;\\n            }\\n        }\\n    }\\n\\n    /// @dev Checks if a pool conforms to IPausable interface, and if so, returns its paused state.\\n    /// Returns false if pool does not conform to IPausable interface.\\n    function _isPoolPaused(address pool) internal view returns (bool) {\\n        // We issue a static call in case the pool does not conform to IPausable interface.\\n        (bool success, bytes memory returnData) = pool.staticcall(abi.encodeWithSelector(IPausable.paused.selector));\\n        // Pool is paused if the call was successful and returned true.\\n        // We check the return data length to ensure abi.decode won't revert.\\n        return success && returnData.length == 32 && abi.decode(returnData, (bool));\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 POOL TOKEN -> TOKEN QUOTES \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @dev Checks whether `tokenIn -> tokenOut` is possible via the given Default Pool, given the\\n    /// `actionMask` of available actions for the token.\\n    /// Note: only checks DefaultPool-related actions: Swap/AddLiquidity/RemoveLiquidity.\\n    function _isConnectedViaDefaultPool(\\n        uint256 actionMask,\\n        address pool,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (bool) {\\n        // We don't check for paused pools here, as we only need to know if a connection exists.\\n        (uint8 indexIn, uint8 indexOut) = _getTokenIndexes(pool, tokenIn, tokenOut);\\n        // Check if Swap (tokenIn -> tokenOut) could fulfill tokenIn -> tokenOut request.\\n        if (Action.Swap.isIncluded(actionMask) && indexIn != NOT_FOUND && indexOut != NOT_FOUND) {\\n            return true;\\n        }\\n        address lpToken = _lpToken(pool);\\n        // Check if AddLiquidity (tokenIn -> lpToken) could fulfill tokenIn -> tokenOut request.\\n        if (Action.AddLiquidity.isIncluded(actionMask) && indexIn != NOT_FOUND && tokenOut == lpToken) {\\n            return true;\\n        }\\n        // Check if RemoveLiquidity (lpToken -> tokenOut) could fulfill tokenIn -> tokenOut request.\\n        if (Action.RemoveLiquidity.isIncluded(actionMask) && tokenIn == lpToken && indexOut != NOT_FOUND) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Checks whether `tokenIn -> tokenOut` is possible via the given Linked Pool, given the\\n    /// `actionMask` of available actions for the token.\\n    /// Note: only checks LinkedPool-related actions: Swap.\\n    function _isConnectedViaLinkedPool(\\n        uint256 actionMask,\\n        address pool,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (bool) {\\n        // Check if Swap (tokenIn -> tokenOut) could fulfill tokenIn -> tokenOut request.\\n        if (Action.Swap.isIncluded(actionMask)) {\\n            // Check if tokenIn and tokenOut are connected via the LinkedPool.\\n            // We are converting ETH -> WETH here, as LinkedPool is unaware of ETH.\\n            return ILinkedPool(pool).areConnectedTokens(_poolToken(tokenIn), _poolToken(tokenOut));\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Compares `curBestQuery` (representing query with the best quote found so far) with the quote for\\n    /// `tokenIn -> tokenOut` via the given Default Pool, given the `actionMask` of available actions for the token.\\n    /// If the action is possible, and the found quote is better, the `curBestQuote` is overwritten with\\n    /// the struct describing the new best quote.\\n    /// Note: only checks pool-related actions: Swap/AddLiquidity/RemoveLiquidity.\\n    /// Note: this is not supposed to be used with LinkedPool contracts, as a single token can appear\\n    /// multiple times in the LinkedPool's token tree.\\n    function _checkDefaultPoolQuote(\\n        uint256 actionMask,\\n        address pool,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        SwapQuery memory curBestQuery\\n    ) internal view {\\n        // Skip paused pools\\n        if (_isPoolPaused(pool)) return;\\n        // Check if tokenIn and tokenOut are pool tokens\\n        (uint8 indexIn, uint8 indexOut) = _getTokenIndexes(pool, tokenIn, tokenOut);\\n        if (indexIn != NOT_FOUND && indexOut != NOT_FOUND) {\\n            // tokenIn, tokenOut are pool tokens: Action.Swap is required\\n            _checkSwapQuote(actionMask, pool, indexIn, indexOut, amountIn, curBestQuery);\\n            return;\\n        }\\n        address lpToken = _lpToken(pool);\\n        if (indexIn != NOT_FOUND && tokenOut == lpToken) {\\n            // tokenIn is pool token, tokenOut is LP token: Action.AddLiquidity is required\\n            _checkAddLiquidityQuote(actionMask, pool, indexIn, amountIn, curBestQuery);\\n        } else if (tokenIn == lpToken && indexOut != NOT_FOUND) {\\n            // tokenIn is LP token, tokenOut is pool token: Action.RemoveLiquidity is required\\n            _checkRemoveLiquidityQuote(actionMask, pool, indexOut, amountIn, curBestQuery);\\n        }\\n    }\\n\\n    /// @dev Compares `curBestQuery` (representing query with the best quote found so far) with the quote for\\n    /// `tokenIn -> tokenOut` via the given Linked Pool, given the `actionMask` of available actions for the token.\\n    /// If the action is possible, and the found quote is better, the `curBestQuote` is overwritten with\\n    /// the struct describing the new best quote.\\n    /// Note: only checks pool-related actions: Swap.\\n    function _checkLinkedPoolQuote(\\n        uint256 actionMask,\\n        address pool,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        SwapQuery memory curBestQuery\\n    ) internal view {\\n        // Only Swap action is supported for LinkedPools\\n        if (Action.Swap.isIncluded(actionMask)) {\\n            // Find the best quote that LinkedPool can offer\\n            // We are converting ETH -> WETH here, as LinkedPool is unaware of ETH.\\n            try ILinkedPool(pool).findBestPath(_poolToken(tokenIn), _poolToken(tokenOut), amountIn) returns (\\n                uint8 tokenIndexFrom,\\n                uint8 tokenIndexTo,\\n                uint256 amountOut\\n            ) {\\n                // Update the current quote if the new quote is better\\n                if (amountOut > curBestQuery.minAmountOut) {\\n                    curBestQuery.minAmountOut = amountOut;\\n                    // Encode params for swapping via the current pool: specify indexFrom and indexTo\\n                    curBestQuery.rawParams = abi.encode(DefaultParams(Action.Swap, pool, tokenIndexFrom, tokenIndexTo));\\n                }\\n            } catch {\\n                // solhint-disable-previous-line no-empty-blocks\\n                // Do nothing, if the quote fails\\n            }\\n        }\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 POOL INDEX -> INDEX QUOTES \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @dev Compares `curBestQuery` (representing query with the best quote found so far) with the quote for\\n    /// `tokenIn -> tokenOut` via the given Default Pool, only considering Swap action.\\n    /// If the action is possible, and the found quote is better, the `curBestQuote` is overwritten with\\n    /// the struct describing the new best quote.\\n    /// - tokenIn -> tokenOut swap will be considered.\\n    /// - Won't do anything if Action.Swap is not included in `actionMask`.\\n    function _checkSwapQuote(\\n        uint256 actionMask,\\n        address pool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 amountIn,\\n        SwapQuery memory curBestQuery\\n    ) internal view {\\n        // Don't do anything if we haven't specified Swap as possible action\\n        if (!Action.Swap.isIncluded(actionMask)) return;\\n        try IDefaultExtendedPool(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, amountIn) returns (\\n            uint256 amountOut\\n        ) {\\n            if (amountOut > curBestQuery.minAmountOut) {\\n                curBestQuery.minAmountOut = amountOut;\\n                // Encode params for swapping via the current pool: specify indexFrom and indexTo\\n                curBestQuery.rawParams = abi.encode(DefaultParams(Action.Swap, pool, tokenIndexFrom, tokenIndexTo));\\n            }\\n        } catch {\\n            // solhint-disable-previous-line no-empty-blocks\\n            // If swap quote fails, we just ignore it\\n        }\\n    }\\n\\n    /// @dev Compares `curBestQuery` (representing query with the best quote found so far) with the quote for\\n    /// `tokenIn -> tokenOut` via the given Default Pool, only considering AddLiquidity action.\\n    /// If the action is possible, and the found quote is better, the `curBestQuote` is overwritten with\\n    /// the struct describing the new best quote.\\n    /// - This is the equivalent of tokenIn -> LPToken swap.\\n    /// - Won't do anything if Action.AddLiquidity is not included in `actionMask`.\\n    function _checkAddLiquidityQuote(\\n        uint256 actionMask,\\n        address pool,\\n        uint8 tokenIndexFrom,\\n        uint256 amountIn,\\n        SwapQuery memory curBestQuery\\n    ) internal view {\\n        // Don't do anything if we haven't specified AddLiquidity as possible action\\n        if (!Action.AddLiquidity.isIncluded(actionMask)) return;\\n        uint256[] memory amounts = new uint256[](_numTokens(pool));\\n        amounts[tokenIndexFrom] = amountIn;\\n        // Use DefaultPool Calc as we need the EXACT quote here\\n        try IDefaultPoolCalc(defaultPoolCalc).calculateAddLiquidity(pool, amounts) returns (uint256 amountOut) {\\n            if (amountOut > curBestQuery.minAmountOut) {\\n                curBestQuery.minAmountOut = amountOut;\\n                // Encode params for adding liquidity via the current pool: specify indexFrom (indexTo = 0xFF)\\n                curBestQuery.rawParams = abi.encode(\\n                    DefaultParams(Action.AddLiquidity, pool, tokenIndexFrom, type(uint8).max)\\n                );\\n            }\\n        } catch {\\n            // solhint-disable-previous-line no-empty-blocks\\n            // If addLiquidity quote fails, we just ignore it\\n        }\\n    }\\n\\n    /// @dev Compares `curBestQuery` (representing query with the best quote found so far) with the quote for\\n    /// `tokenIn -> tokenOut` via the given Default Pool, only considering RemoveLiquidity action.\\n    /// If the action is possible, and the found quote is better, the `curBestQuote` is overwritten with\\n    /// the struct describing the new best quote.\\n    /// - This is the equivalent of LPToken -> tokenOut swap.\\n    /// - Won't do anything if Action.RemoveLiquidity is not included in `actionMask`.\\n    function _checkRemoveLiquidityQuote(\\n        uint256 actionMask,\\n        address pool,\\n        uint8 tokenIndexTo,\\n        uint256 amountIn,\\n        SwapQuery memory curBestQuery\\n    ) internal view {\\n        // Don't do anything if we haven't specified RemoveLiquidity as possible action\\n        if (!Action.RemoveLiquidity.isIncluded(actionMask)) return;\\n        try IDefaultExtendedPool(pool).calculateRemoveLiquidityOneToken(amountIn, tokenIndexTo) returns (\\n            uint256 amountOut\\n        ) {\\n            if (amountOut > curBestQuery.minAmountOut) {\\n                curBestQuery.minAmountOut = amountOut;\\n                // Encode params for removing liquidity via the current pool: specify indexTo (indexFrom = 0xFF)\\n                curBestQuery.rawParams = abi.encode(\\n                    DefaultParams(Action.RemoveLiquidity, pool, type(uint8).max, tokenIndexTo)\\n                );\\n            }\\n        } catch {\\n            // solhint-disable-previous-line no-empty-blocks\\n            // If removeLiquidity quote fails, we just ignore it\\n        }\\n    }\\n\\n    /// @dev Compares `curBestQuery` (representing query with the best quote found so far) with the quote for\\n    /// `tokenIn -> tokenOut` only considering HandleEth action.\\n    /// If the action is possible, and the found quote is better, the `curBestQuote` is overwritten with\\n    /// the struct describing the new best quote.\\n    /// - That would be either unwrapping WETH into native ETH, or wrapping ETH into WETH.\\n    /// - Won't do anything if Action.HandleEth is not included in `actionMask`.\\n    function _checkHandleETHQuote(\\n        uint256 actionMask,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        SwapQuery memory curBestQuery\\n    ) internal view {\\n        // Don't do anything if we haven't specified HandleETH as possible action\\n        if (!Action.HandleEth.isIncluded(actionMask)) return;\\n        if (_isEthAndWeth(tokenIn, tokenOut) && amountIn > curBestQuery.minAmountOut) {\\n            curBestQuery.minAmountOut = amountIn;\\n            // Encode params for handling ETH: no pool is present, indexFrom and indexTo are 0xFF\\n            curBestQuery.rawParams = abi.encode(\\n                DefaultParams(Action.HandleEth, address(0), type(uint8).max, type(uint8).max)\\n            );\\n        }\\n    }\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 INTERNAL UTILS: ETH, WETH \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @dev Checks that (tokenA, tokenB) is either (ETH, WETH) or (WETH, ETH).\\n    function _isEthAndWeth(address tokenA, address tokenB) internal view returns (bool) {\\n        return\\n            (tokenA == UniversalTokenLib.ETH_ADDRESS && tokenB == weth) ||\\n            (tokenA == weth && tokenB == UniversalTokenLib.ETH_ADDRESS);\\n    }\\n\\n    /// @dev Returns token address used in the pool for the given \\\"underlying token\\\".\\n    /// This is either the token itself, or WETH if the token is ETH.\\n    function _poolToken(address token) internal view returns (address) {\\n        return token == UniversalTokenLib.ETH_ADDRESS ? weth : token;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/ISwapQuoterV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {LimitedToken, SwapQuery, Pool, PoolToken} from \\\"../libs/Structs.sol\\\";\\n\\n/// @notice Interface for the SwapQuoterV1 version with updated pragma and enriched docs.\\ninterface ISwapQuoterV1 {\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 IMMUTABLES \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Address of deployed calculator contract for DefaultPool, which is able to calculate\\n    /// EXACT quotes for AddLiquidity action (something that DefaultPool contract itself is unable to do).\\n    function defaultPoolCalc() external view returns (address);\\n\\n    /// @notice Address of WETH token used in the pools. Represents wrapped version of chain's native currency,\\n    /// e.g. WETH on Ethereum, WBNB on BSC, etc.\\n    function weth() external view returns (address);\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 POOL GETTERS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Returns a list of all supported pools.\\n    function allPools() external view returns (Pool[] memory pools);\\n\\n    /// @notice Returns the amount of supported pools.\\n    function poolsAmount() external view returns (uint256 amtPools);\\n\\n    /// @notice Returns the number of tokens the given pool supports and the pool's LP token.\\n    function poolInfo(address pool) external view returns (uint256 numTokens, address lpToken);\\n\\n    /// @notice Returns a list of pool tokens for the given pool.\\n    function poolTokens(address pool) external view returns (PoolToken[] memory tokens);\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 GENERAL QUOTES \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Checks if a swap is possible between every bridge token in the given list and tokenOut.\\n    /// Only the bridge token's whitelisted pool is considered for every `tokenIn -> tokenOut` swap.\\n    /// @param bridgeTokensIn   List of structs with following information:\\n    ///                         - actionMask    Bitmask of available actions for doing tokenIn -> tokenOut\\n    ///                         - token         Bridge token address to swap from\\n    /// @param tokenOut         Token address to swap to\\n    /// @return amountFound     Amount of tokens from the list that are swappable to tokenOut\\n    /// @return isConnected     List of bool values, specifying whether a token from the list is swappable to tokenOut\\n    function findConnectedTokens(LimitedToken[] memory bridgeTokensIn, address tokenOut)\\n        external\\n        view\\n        returns (uint256 amountFound, bool[] memory isConnected);\\n\\n    /// @notice Finds the quote and the swap parameters for a tokenIn -> tokenOut swap from the list of supported pools.\\n    /// - If this is a request for the swap to be performed immediately (or the \\\"origin swap\\\" in the bridge workflow),\\n    /// `tokenIn.actionMask` needs to be set to bitmask of all possible actions (ActionLib.allActions()).\\n    /// - If this is a request for the swap to be performed as the \\\"destination swap\\\" in the bridge workflow,\\n    /// `tokenIn.actionMask` needs to be set to bitmask of possible actions for `tokenIn.token` as a bridge token,\\n    /// e.g. Action.Swap for minted tokens, or Action.RemoveLiquidity | Action.HandleEth for withdrawn tokens.\\n    /// > Returns the `SwapQuery` struct, that can be used on SynapseRouter.\\n    /// > minAmountOut and deadline fields will need to be adjusted based on the swap settings.\\n    /// @dev If tokenIn or tokenOut is ETH_ADDRESS, only the pools having WETH as a pool token will be considered.\\n    /// Three potential outcomes are available:\\n    /// 1. `tokenIn` and `tokenOut` represent the same token address (identical tokens).\\n    /// 2. `tokenIn` and `tokenOut` represent different addresses. No trade path from `tokenIn` to `tokenOut` is found.\\n    /// 3. `tokenIn` and `tokenOut` represent different addresses. Trade path from `tokenIn` to `tokenOut` is found.\\n    /// The exact composition of the returned struct for every case is documented in the return parameter documentation.\\n    /// @param tokenIn  Struct with following information:\\n    ///                 - actionMask    Bitmask of available actions for doing tokenIn -> tokenOut\\n    ///                 - token         Token address to swap from\\n    /// @param tokenOut Token address to swap to\\n    /// @param amountIn Amount of tokens to swap from\\n    /// @return query   Struct representing trade path between tokenIn and tokenOut:\\n    ///                 - swapAdapter: adapter address that would handle the swap. Address(0) if no path is found,\\n    ///                 or tokens are identical. Address of SynapseRouter otherwise.\\n    ///                 - tokenOut: always equals to the provided `tokenOut`, even if no path if found.\\n    ///                 - minAmountOut: amount of `tokenOut`, if swap was completed now. 0, if no path is found.\\n    ///                 - deadline: 2**256-1 if path was found, or tokens are identical. 0, if no path is found.\\n    ///                 - rawParams: ABI-encoded DefaultParams struct indicating the swap parameters. Empty string,\\n    ///                 if no path is found, or tokens are identical.\\n    function getAmountOut(\\n        LimitedToken memory tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (SwapQuery memory query);\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 SPECIFIC POOL QUOTES \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Returns the exact quote for adding liquidity to a given pool in a form of a single token.\\n    /// @dev The only way to get a quote for adding liquidity would be `pool.calculateTokenAmount()`,\\n    /// which gives an ESTIMATE: it doesn't take the trade fees into account.\\n    /// We do need the exact quotes for (DAI/USDC/USDT) -> nUSD \\\"swaps\\\" on Mainnet, hence we do this.\\n    /// We also need the exact quotes for adding liquidity to the pools.\\n    /// Note: the function might revert instead of returning 0 for incorrect requests. Make sure\\n    /// to take that into account.\\n    function calculateAddLiquidity(address pool, uint256[] memory amounts) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns the exact quote for swapping between two given tokens.\\n    /// @dev Exposes IDefaultPool.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n    function calculateSwap(\\n        address pool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns the exact quote for withdrawing pools tokens in a balanced way.\\n    /// @dev Exposes IDefaultPool.calculateRemoveLiquidity(amount);\\n    function calculateRemoveLiquidity(address pool, uint256 amount) external view returns (uint256[] memory amountsOut);\\n\\n    /// @notice Returns the exact quote for withdrawing a single pool token.\\n    /// @dev Exposes IDefaultPool.calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);\\n    function calculateWithdrawOneToken(\\n        address pool,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/ISwapQuoterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ISwapQuoterV1} from \\\"./ISwapQuoterV1.sol\\\";\\nimport {LimitedToken} from \\\"../libs/Structs.sol\\\";\\n\\ninterface ISwapQuoterV2 is ISwapQuoterV1 {\\n    /// @notice Checks if tokenIn -> tokenOut swap is possible using the supported pools.\\n    /// Follows `getAmountOut()` convention when it comes to providing tokenIn.actionMask:\\n    /// - If this is a request for the swap to be performed immediately (or the \\\"origin swap\\\" in the bridge workflow),\\n    /// `tokenIn.actionMask` needs to be set to bitmask of all possible actions (ActionLib.allActions()).\\n    ///  For this case, all pools added to SwapQuoterV2 will be considered for the swap.\\n    /// - If this is a request for the swap to be performed as the \\\"destination swap\\\" in the bridge workflow,\\n    /// `tokenIn.actionMask` needs to be set to bitmask of possible actions for `tokenIn.token` as a bridge token,\\n    /// e.g. Action.Swap for minted tokens, or Action.RemoveLiquidity | Action.HandleEth for withdrawn tokens.\\n    ///\\n    /// As for the pools considered for the swap, there are two cases:\\n    /// - If this is a request for the swap to be performed immediately (or the \\\"origin swap\\\" in the bridge workflow),\\n    /// all pools added to SwapQuoterV2 will be considered for the swap.\\n    /// - If this is a request for the swap to be performed as the \\\"destination swap\\\" in the bridge workflow,\\n    /// only the whitelisted pool for tokenIn.token will be considered for the swap.\\n    function areConnectedTokens(LimitedToken memory tokenIn, address tokenOut) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/router/libs/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13; // \\\"using A for B global\\\" requires 0.8.13 or higher\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 TOKEN AND POOL DESCRIPTION \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n/// @notice Struct representing a bridge token. Used as the return value in view functions.\\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\\n/// @param token    Bridge token address\\nstruct BridgeToken {\\n    string symbol;\\n    address token;\\n}\\n\\n/// @notice Struct used by IPoolHandler to represent a token in a pool\\n/// @param index    Token index in the pool\\n/// @param token    Token address\\nstruct IndexedToken {\\n    uint8 index;\\n    address token;\\n}\\n\\n/// @notice Struct representing a token, and the available Actions for performing a swap.\\n/// @param actionMask   Bitmask representing what actions (see ActionLib) are available for swapping a token\\n/// @param token        Token address\\nstruct LimitedToken {\\n    uint256 actionMask;\\n    address token;\\n}\\n\\n/// @notice Struct representing how pool tokens are stored by `SwapQuoter`.\\n/// @param isWeth   Whether the token represents Wrapped ETH.\\n/// @param token    Token address.\\nstruct PoolToken {\\n    bool isWeth;\\n    address token;\\n}\\n\\n/// @notice Struct representing a liquidity pool. Used as the return value in view functions.\\n/// @param pool         Pool address.\\n/// @param lpToken      Address of pool's LP token.\\n/// @param tokens       List of pool's tokens.\\nstruct Pool {\\n    address pool;\\n    address lpToken;\\n    PoolToken[] tokens;\\n}\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 ROUTER STRUCTS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n/// @notice Struct representing a quote request for swapping a bridge token.\\n/// Used in destination chain's SynapseRouter, hence the name \\\"Destination Request\\\".\\n/// @dev tokenOut is passed externally.\\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\\n/// @param amountIn Amount of bridge token to start with, before the bridge fee is applied\\nstruct DestRequest {\\n    string symbol;\\n    uint256 amountIn;\\n}\\n\\n/// @notice Struct representing a swap request for SynapseRouter.\\n/// @dev tokenIn is supplied separately.\\n/// @param routerAdapter    Contract that will perform the swap for the Router. Address(0) specifies a \\\"no swap\\\" query.\\n/// @param tokenOut         Token address to swap to.\\n/// @param minAmountOut     Minimum amount of tokens to receive after the swap, or tx will be reverted.\\n/// @param deadline         Latest timestamp for when the transaction needs to be executed, or tx will be reverted.\\n/// @param rawParams        ABI-encoded params for the swap that will be passed to `routerAdapter`.\\n///                         Should be DefaultParams for swaps via DefaultAdapter.\\nstruct SwapQuery {\\n    address routerAdapter;\\n    address tokenOut;\\n    uint256 minAmountOut;\\n    uint256 deadline;\\n    bytes rawParams;\\n}\\n\\nusing SwapQueryLib for SwapQuery global;\\n\\nlibrary SwapQueryLib {\\n    /// @notice Checks whether the router adapter was specified in the query.\\n    /// Query without a router adapter specifies that no action needs to be taken.\\n    function hasAdapter(SwapQuery memory query) internal pure returns (bool) {\\n        return query.routerAdapter != address(0);\\n    }\\n\\n    /// @notice Fills `routerAdapter` and `deadline` fields in query, if it specifies one of the supported Actions,\\n    /// and if a path for this action was found.\\n    function fillAdapterAndDeadline(SwapQuery memory query, address routerAdapter) internal pure {\\n        // Fill the fields only if some path was found.\\n        if (query.minAmountOut == 0) return;\\n        // Empty params indicates no action needs to be done, thus no adapter is needed.\\n        query.routerAdapter = query.rawParams.length == 0 ? address(0) : routerAdapter;\\n        // Set default deadline to infinity. Not using the value of 0,\\n        // which would lead to every swap to revert by default.\\n        query.deadline = type(uint256).max;\\n    }\\n}\\n\\n// \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 ADAPTER STRUCTS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n/// @notice Struct representing parameters for swapping via DefaultAdapter.\\n/// @param action           Action that DefaultAdapter needs to perform.\\n/// @param pool             Liquidity pool that will be used for Swap/AddLiquidity/RemoveLiquidity actions.\\n/// @param tokenIndexFrom   Token index to swap from. Used for swap/addLiquidity actions.\\n/// @param tokenIndexTo     Token index to swap to. Used for swap/removeLiquidity actions.\\nstruct DefaultParams {\\n    Action action;\\n    address pool;\\n    uint8 tokenIndexFrom;\\n    uint8 tokenIndexTo;\\n}\\n\\n/// @notice All possible actions that DefaultAdapter could perform.\\nenum Action {\\n    Swap, // swap between two pools tokens\\n    AddLiquidity, // add liquidity in a form of a single pool token\\n    RemoveLiquidity, // remove liquidity in a form of a single pool token\\n    HandleEth // ETH <> WETH interaction\\n}\\n\\nusing ActionLib for Action global;\\n\\n/// @notice Library for dealing with bit masks which describe what set of Actions is available.\\nlibrary ActionLib {\\n    /// @notice Returns a bitmask with all possible actions set to True.\\n    function allActions() internal pure returns (uint256 actionMask) {\\n        actionMask = type(uint256).max;\\n    }\\n\\n    /// @notice Returns whether the given action is set to True in the bitmask.\\n    function isIncluded(Action action, uint256 actionMask) internal pure returns (bool) {\\n        return actionMask & mask(action) != 0;\\n    }\\n\\n    /// @notice Returns a bitmask with only the given action set to True.\\n    function mask(Action action) internal pure returns (uint256) {\\n        return 1 << uint256(action);\\n    }\\n\\n    /// @notice Returns a bitmask with only two given actions set to True.\\n    function mask(Action a, Action b) internal pure returns (uint256) {\\n        return mask(a) | mask(b);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/IDefaultPoolCalc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IDefaultPoolCalc {\\n    /// @notice Calculates the EXACT amount of LP tokens received for a given amount of tokens deposited\\n    /// into a DefaultPool.\\n    /// @param pool         Address of the DefaultPool.\\n    /// @param amounts      Amounts of tokens to deposit.\\n    /// @return amountOut   Amount of LP tokens received.\\n    function calculateAddLiquidity(address pool, uint256[] memory amounts) external view returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/IDefaultExtendedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IDefaultPool} from \\\"./IDefaultPool.sol\\\";\\n\\ninterface IDefaultExtendedPool is IDefaultPool {\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 VIEWS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256 initialA,\\n            uint256 futureA,\\n            uint256 initialATime,\\n            uint256 futureATime,\\n            uint256 swapFee,\\n            uint256 adminFee,\\n            address lpToken\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/ILinkedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ILinkedPool {\\n    /// @notice Wrapper for IDefaultPool.swap()\\n    /// @param tokenIndexFrom    the token the user wants to swap from\\n    /// @param tokenIndexTo      the token the user wants to swap to\\n    /// @param dx                the amount of tokens the user wants to swap from\\n    /// @param minDy             the min amount the user would like to receive, or revert.\\n    /// @param deadline          latest timestamp to accept this transaction\\n    /// @return amountOut        amount of tokens bought\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    // \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 VIEWS \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n    /// @notice Wrapper for IDefaultPool.calculateSwap()\\n    /// @param tokenIndexFrom    the token the user wants to sell\\n    /// @param tokenIndexTo      the token the user wants to buy\\n    /// @param dx                the amount of tokens the user wants to sell. If the token charges\\n    ///                          a fee on transfers, use the amount that gets transferred after the fee.\\n    /// @return amountOut        amount of tokens the user will receive\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Wrapper for IDefaultPool.getToken()\\n    /// @param index     the index of the token\\n    /// @return token    address of the token at given index\\n    function getToken(uint8 index) external view returns (address token);\\n\\n    /// @notice Checks if a path exists between the two tokens, using any of the supported pools.\\n    /// @dev This is used by SwapQuoterV2 to check if a path exists between two tokens using the LinkedPool.\\n    /// Note: this only checks if both tokens are present in the tree, but doesn't check if any of the pools\\n    /// connecting the two tokens are paused. This is done to enable caching of the result, the paused/duplicated\\n    /// pools will be discarded, when `findBestPath` is called to fetch the quote.\\n    /// @param tokenIn          Token address to begin from\\n    /// @param tokenOut         Token address to end up with\\n    /// @return areConnected    True if a path exists between the two tokens, false otherwise\\n    function areConnectedTokens(address tokenIn, address tokenOut) external view returns (bool areConnected);\\n\\n    /// @notice Returns the best path for swapping the given amount of tokens. All possible paths\\n    /// present in the internal tree are considered, if any of the tokens are present in the tree more than once.\\n    /// Note: paths that have the same pool more than once are not considered.\\n    /// @dev Will return zero values if no path is found.\\n    /// @param tokenIn          the token the user wants to sell\\n    /// @param tokenOut         the token the user wants to buy\\n    /// @param amountIn         the amount of tokens the user wants to sell\\n    /// @return tokenIndexFrom  the index of the token the user wants to sell\\n    /// @return tokenIndexTo    the index of the token the user wants to buy\\n    /// @return amountOut       amount of tokens the user will receive\\n    function findBestPath(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            uint8 tokenIndexFrom,\\n            uint8 tokenIndexTo,\\n            uint256 amountOut\\n        );\\n\\n    /// @notice Returns the full amount of the \\\"token nodes\\\" in the internal tree.\\n    /// Note that some of the tokens might be duplicated, as the node in the tree represents\\n    /// a given path frm the bridge token to the node token using a series of pools.\\n    function tokenNodesAmount() external view returns (uint256);\\n\\n    /// @notice Returns the list of pools that are \\\"attached\\\" to a node.\\n    /// Pool is attached to a node, if it connects the node to one of its children.\\n    /// Note: pool that is connecting the node to its parent is not considered attached.\\n    function getAttachedPools(uint8 index) external view returns (address[] memory pools);\\n\\n    /// @notice Returns the list of indexes that represent a given token in the tree.\\n    /// @dev Will return empty array for tokens that are not added to the tree.\\n    function getTokenIndexes(address token) external view returns (uint256[] memory indexes);\\n\\n    /// @notice Returns the pool module logic address, that is used to get swap quotes, token indexes and perform swaps.\\n    /// @dev Will return address(0) for pools that are not added to the tree.\\n    /// Will return address(this) for pools that conform to IDefaultPool interface.\\n    function getPoolModule(address pool) external view returns (address poolModule);\\n\\n    /// @notice Returns the index of a parent node for the given node, as well as the pool that connects the two nodes.\\n    /// @dev Will return zero values for the root node. Will revert if index is out of range.\\n    function getNodeParent(uint256 nodeIndex) external view returns (uint256 parentIndex, address parentPool);\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/router/libs/UniversalToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {TokenNotContract} from \\\"./Errors.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary UniversalTokenLib {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\\n    /// @dev This might trigger fallback, if ETH is transferred to the contract.\\n    /// Make sure this can not lead to reentrancy attacks.\\n    function universalTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // Don't do anything, if need to send tokens to this address\\n        if (to == address(this)) return;\\n        if (token == ETH_ADDRESS) {\\n            /// @dev Note: this can potentially lead to executing code in `to`.\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to.call{value: value}(\\\"\\\");\\n            require(success, \\\"ETH transfer failed\\\");\\n        } else {\\n            IERC20(token).safeTransfer(to, value);\\n        }\\n    }\\n\\n    /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\\n    /// to spend the given amount.\\n    function universalApproveInfinity(\\n        address token,\\n        address spender,\\n        uint256 amountToSpend\\n    ) internal {\\n        // ETH Chad doesn't require your approval\\n        if (token == ETH_ADDRESS) return;\\n        // No-op if allowance is already sufficient\\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\\n        if (allowance >= amountToSpend) return;\\n        // Otherwise, reset approval to 0 and set to max allowance\\n        if (allowance > 0) IERC20(token).safeApprove(spender, 0);\\n        IERC20(token).safeApprove(spender, type(uint256).max);\\n    }\\n\\n    /// @notice Returns the balance of the given token (or native ETH) for the given account.\\n    function universalBalanceOf(address token, address account) internal view returns (uint256) {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    /// @dev Checks that token is a contract and not ETH_ADDRESS.\\n    function assertIsContract(address token) internal view {\\n        // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\\n        if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\\n        // Check that token is not an EOA\\n        if (token.code.length == 0) revert TokenNotContract();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/router/interfaces/IDefaultPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IDefaultPool {\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 amountOut);\\n\\n    function getToken(uint8 index) external view returns (address token);\\n}\\n\"\r\n    },\r\n    \"contracts/router/libs/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nerror DeadlineExceeded();\\nerror InsufficientOutputAmount();\\n\\nerror MsgValueIncorrect();\\nerror PoolNotFound();\\nerror TokenAddressMismatch();\\nerror TokenNotContract();\\nerror TokenNotETH();\\nerror TokensIdentical();\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-4.5.0/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@boringcrypto/=node_modules/@boringcrypto/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"sol-explore/=node_modules/sol-explore/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"synthetix/=node_modules/synthetix/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"synapseRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultPoolCalc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"SwapQuoterV2__DuplicatedPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"SwapQuoterV2__UnknownPool\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SwapQuoterV2.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SwapQuoterV2.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"synapseRouter\",\"type\":\"address\"}],\"name\":\"SynapseRouterUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"enum SwapQuoterV2.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct SwapQuoterV2.BridgePool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWeth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct PoolToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Pool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionMask\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct LimitedToken\",\"name\":\"tokenIn\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"areConnectedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"calculateAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateWithdrawOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPoolCalc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionMask\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct LimitedToken[]\",\"name\":\"bridgeTokensIn\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"findConnectedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFound\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"isConnected\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionMask\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct LimitedToken\",\"name\":\"tokenIn\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"routerAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgePools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"enum SwapQuoterV2.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct SwapQuoterV2.BridgePool[]\",\"name\":\"bridgePools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOriginDefaultPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"originDefaultPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOriginLinkedPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"originLinkedPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWeth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct PoolToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amtPools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"enum SwapQuoterV2.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct SwapQuoterV2.BridgePool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"name\":\"removePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"synapseRouter_\",\"type\":\"address\"}],\"name\":\"setSynapseRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synapseRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SwapQuoterV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007e7a0e201fd38d3adaa9523da6c109a07118c96a0000000000000000000000000000000000f54b784e70e1cf1f99fb53b08d6fea000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000fea3e5840334fc758a3decf14546bfdfbef5cd3", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}