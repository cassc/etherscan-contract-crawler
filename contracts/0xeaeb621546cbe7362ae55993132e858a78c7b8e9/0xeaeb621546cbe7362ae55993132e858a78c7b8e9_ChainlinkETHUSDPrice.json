{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/pizza-oracles/src/ChainlinkETHUSDPriceConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9 .0;\\n\\nimport {AggregatorV3Interface} from \\\"../lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract ChainlinkETHUSDPriceConsumer {\\n    AggregatorV3Interface internal dataFeed;\\n\\n    /**\\n     * Network: Sepolia\\n     * Aggregator: ETH/USD\\n     * Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\\n     */\\n\\n    /**\\n     * Network: Mainnet\\n     * Aggregator: ETH/USD\\n     * Address: 0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419\\n     */\\n\\n    /**\\n     * Network: Goerli\\n     * Aggregator ETH/USD\\n     * Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n     */\\n\\n    constructor(address aggregatorAddress) {\\n        dataFeed = AggregatorV3Interface(aggregatorAddress);\\n    }\\n\\n    /**\\n     * Returns the latest answer.\\n     */\\n\\n    // Gold has 8 decimals - same as BTC\\n    function getLatestData() public view returns (int) {\\n        // prettier-ignore\\n        (\\n            ,\\n            int answer,\\n            ,\\n            ,\\n            \\n        ) = dataFeed.latestRoundData();\\n        return answer;\\n    }\\n\\n    /**\\n     * Returns historical price for a round id.\\n     * roundId is NOT incremental. Not all roundIds are valid.\\n     * You must know a valid roundId before consuming historical data.\\n     *\\n     * ROUNDID VALUES:\\n     *    InValid:      18446744073709562300\\n     *    Valid:        18446744073709554683\\n     *\\n     * @dev A timestamp with zero value means the round is not complete and should not be used.\\n     */\\n    function getHistoricalPrice(uint80 roundId) public view returns (int256) {\\n        // prettier-ignore\\n        (\\n            ,\\n            int price,\\n            ,\\n            uint timeStamp,\\n        ) = dataFeed.getRoundData(roundId);\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\n        return price;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/pizza-oracles/lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@prb-test/=lib/pizza/lib/prb-test/src/\",\r\n      \"@prb/test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"@uniswap/lib/=lib/pizza/lib/solidity-lib/\",\r\n      \"@uniswap/v2-core/=lib/pizza/lib/v2-core/\",\r\n      \"@uniswap/v2-periphery/=lib/pizza/lib/v2-periphery/contracts/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"pizza-oracles/=lib/pizza-oracles/src/\",\r\n      \"pizza/=lib/pizza/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-test/src/\",\r\n      \"pyth-sdk-solidity/=lib/pizza/lib/pyth-sdk-solidity/\",\r\n      \"solidity-lib/=lib/pizza/lib/solidity-lib/contracts/\",\r\n      \"v2-core/=lib/pizza/lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/pizza/lib/v2-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkETHUSDPriceConsumer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}