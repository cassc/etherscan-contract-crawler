{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DUELVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract DynamicVestingV1 {\\n    mapping(address => uint256) public startTimes;\\n    mapping(address => uint256[]) public releaseAmounts;\\n}\\n\\ncontract VestingBase is Ownable {\\n    address duelToken;\\n\\n    constructor(address _duelToken) Ownable(msg.sender) {\\n        duelToken = _duelToken;\\n    }\\n\\n    function setDuelToken(address newContract) external onlyOwner {\\n        duelToken = newContract;\\n    }\\n\\n    function allocateDUEL(address, uint256) external virtual {}\\n\\n    function allocateDUEL(address, uint256, uint256) external virtual {}\\n\\n    function claimDUEL() external virtual {}\\n}\\n\\n/// @title Core static vesting contract allowing for cliff and variable percentage releases\\n/// @author Haider\\n/// @notice Contract uses pre-approved DUEL amount to transferFrom() the owner()\\n/// @notice Deploy 3 versions: Private Sale, Team & Advisors, Operations & Marketing\\ncontract StaticVesting is VestingBase {\\n    uint256[] public releaseTimestamps; // Release UNIX timestamps\\n    uint16[] public releasePercentages; // Release percentage [0,0,0,100,100,100,...]\\n    mapping(address => uint256) public vestedAllocations; // wallet => total allocated\\n    mapping(address => uint256) public vestedClaims; // wallet => total claimed\\n\\n    constructor(\\n        address _duelToken,\\n        uint256[] memory _releaseTimestamps,\\n        uint16[] memory _releasePercentages\\n    ) VestingBase(_duelToken) {\\n        require(\\n            releaseTimestamps.length == releasePercentages.length,\\n            \\\"PARAMETERS_MISMATCH\\\"\\n        );\\n        releaseTimestamps = _releaseTimestamps;\\n        releasePercentages = _releasePercentages;\\n    }\\n\\n    function updateReleaseParameters(\\n        uint256[] memory _releaseTimestamps,\\n        uint16[] memory _releasePercentages\\n    ) external onlyOwner {\\n        require(\\n            releaseTimestamps.length == releasePercentages.length,\\n            \\\"PARAMETERS_MISMATCH\\\"\\n        );\\n        releaseTimestamps = _releaseTimestamps;\\n        releasePercentages = _releasePercentages;\\n    }\\n\\n    function batchAllocateDUEL(\\n        address[] memory wallets,\\n        uint256[] memory allocations\\n    ) external onlyOwner {\\n        for (uint16 i = 0; i < wallets.length; i++) {\\n            vestedAllocations[wallets[i]] = allocations[i];\\n        }\\n    }\\n\\n    function batchUpdateAllocations(\\n        address[] memory wallets,\\n        uint256[] memory allocations,\\n        uint256[] memory claims\\n    ) external onlyOwner {\\n        for (uint16 i = 0; i < wallets.length; i++) {\\n            vestedAllocations[wallets[i]] = allocations[i];\\n            vestedClaims[wallets[i]] = claims[i];\\n        }\\n    }\\n\\n    function allocateDUEL(\\n        address wallet,\\n        uint256 amount\\n    ) external override onlyOwner {\\n        require(vestedAllocations[wallet] == 0, \\\"ALREADY_ALLOCATED\\\");\\n        vestedAllocations[wallet] = amount;\\n    }\\n\\n    function claimDUEL() external override {\\n        require(\\n            vestedAllocations[_msgSender()] > 0 &&\\n                vestedAllocations[_msgSender()] > vestedClaims[_msgSender()],\\n            \\\"NO_CLAIMS\\\"\\n        );\\n\\n        uint16 cumulativePercentage = 0; // Cumulative percentage released so far\\n        for (uint8 i = 0; i < releaseTimestamps.length; i++) {\\n            if (releaseTimestamps[i] > block.timestamp) {\\n                break;\\n            }\\n            cumulativePercentage += releasePercentages[i];\\n        }\\n\\n        uint256 availableClaim = (vestedAllocations[_msgSender()] *\\n            cumulativePercentage) / 10000;\\n        require(availableClaim > vestedClaims[_msgSender()], \\\"ALREADY_CLAIMED\\\");\\n\\n        uint256 unclaimedTokens = availableClaim - vestedClaims[_msgSender()];\\n        vestedClaims[_msgSender()] += unclaimedTokens;\\n        IERC20(duelToken).transfer(_msgSender(), unclaimedTokens);\\n    }\\n\\n    function withdrawDUEL(uint256 amount) external onlyOwner {\\n        if (amount == 0) {\\n            amount = IERC20(duelToken).balanceOf(address(this));\\n        }\\n        IERC20(duelToken).transfer(owner(), amount);\\n    }\\n}\\n\\n/// @title Core dynamic vesting contract to be used upon RAINxDUEL conversion\\n/// @author Haider\\n/// @notice Contract uses pre-approved DUEL amount to transferFrom() the owner()\\n/// @dev Does not allow for two separate schedules for same wallet\\ncontract DynamicVesting is VestingBase {\\n    DynamicVestingV1 public dynamicVestingV1;\\n    mapping(address => uint256) public startTimes; // wallet => claim start time\\n    mapping(address => uint256[]) public releaseAmounts; // wallet => [amount30d, amount90d]\\n\\n    constructor(address _duelToken) VestingBase(_duelToken) {}\\n\\n    function setDynamicVestingV1(\\n        DynamicVestingV1 newContract\\n    ) external onlyOwner {\\n        dynamicVestingV1 = newContract;\\n    }\\n\\n    function batchV1Transition(address[] memory wallets) external onlyOwner {\\n        for (uint16 i = 0; i < wallets.length; i++) {\\n            if (dynamicVestingV1.startTimes(wallets[i]) > 0) {\\n                startTimes[wallets[i]] = dynamicVestingV1.startTimes(\\n                    wallets[i]\\n                );\\n                releaseAmounts[wallets[i]].push(\\n                    dynamicVestingV1.releaseAmounts(wallets[i], 0)\\n                );\\n                releaseAmounts[wallets[i]].push(\\n                    dynamicVestingV1.releaseAmounts(wallets[i], 1)\\n                );\\n            }\\n        }\\n    }\\n\\n    function allocateDUEL(\\n        address wallet,\\n        uint256 amount30d,\\n        uint256 amount90d\\n    ) external override {\\n        require(\\n            _msgSender() == duelToken || _msgSender() == owner(),\\n            \\\"Access forbidden\\\"\\n        );\\n        require(startTimes[wallet] == 0, \\\"Vesting already in progress\\\");\\n        startTimes[wallet] = block.timestamp;\\n        releaseAmounts[wallet] = [amount30d, amount90d];\\n    }\\n\\n    function claimDUEL() external override {\\n        require(startTimes[_msgSender()] >= 0, \\\"Nothing vested\\\");\\n\\n        uint256 availableAmount = 0;\\n        if (\\n            block.timestamp >= startTimes[_msgSender()] + 30 days &&\\n            releaseAmounts[_msgSender()][0] > 0\\n        ) {\\n            availableAmount += releaseAmounts[_msgSender()][0];\\n            releaseAmounts[_msgSender()][0] = 0;\\n        }\\n        if (\\n            block.timestamp >= startTimes[_msgSender()] + 90 days &&\\n            releaseAmounts[_msgSender()][1] > 0\\n        ) {\\n            availableAmount += releaseAmounts[_msgSender()][1];\\n            releaseAmounts[_msgSender()][1] = 0;\\n        }\\n\\n        require(availableAmount > 0, \\\"Nothing to claim\\\");\\n        IERC20(duelToken).transferFrom(owner(), _msgSender(), availableAmount);\\n    }\\n}\\n\\ncontract DynamicVestingMin is Ownable {\\n    address duelToken;\\n    address vestingV1;\\n    bytes32 public merkleRoot;\\n    mapping(address => bool[]) public claimed;\\n\\n    event Claimed(address indexed wallet, uint256 amount, bool was30d);\\n\\n    constructor(address _duelToken, address _vestingV1) Ownable(msg.sender) {\\n        duelToken = _duelToken;\\n        vestingV1 = _vestingV1;\\n    }\\n\\n    function setDuelToken(address _newToken) external onlyOwner {\\n        duelToken = _newToken;\\n    }\\n\\n    function setVestingV1(address _newV1) external onlyOwner {\\n        vestingV1 = _newV1;\\n    }\\n\\n    function setMerkleRoot(bytes32 _newRoot) external onlyOwner {\\n        merkleRoot = _newRoot;\\n    }\\n\\n    function claimDUEL(\\n        uint8 chainId,\\n        uint256 unlock30d,\\n        uint256 unlock90d,\\n        bytes32[] calldata merkleProof\\n    ) external {\\n        bytes32 leaf = keccak256(\\n            abi.encodePacked(_msgSender(), chainId, unlock30d, unlock90d)\\n        );\\n        require(\\n            MerkleProof.verify(merkleProof, merkleRoot, leaf),\\n            \\\"INCORRECT_PROOF\\\"\\n        );\\n        require(chainId == block.chainid, \\\"INCORRECT_CHAIN\\\");\\n\\n        uint256 startTime = DynamicVestingV1(vestingV1).startTimes(\\n            _msgSender()\\n        );\\n\\n        uint256 claimable = 0;\\n        if (block.timestamp > startTime + 30 days && claimed[_msgSender()].length == 0) {\\n            claimable +=  unlock30d;\\n            claimed[_msgSender()].push(true);\\n            emit Claimed(_msgSender(), unlock30d, true);\\n        }\\n        \\n        if (block.timestamp > startTime + 90 days && claimed[_msgSender()].length <= 1) {\\n            claimable += unlock90d;\\n            claimed[_msgSender()].push(true);\\n            emit Claimed(_msgSender(), unlock90d, false);\\n        }\\n        require(claimable > 0, \\\"NOTHING_CLAIMABLE\\\");\\n        IERC20(duelToken).transfer(_msgSender(), claimable);\\n    }\\n\\n    function withdrawDUEL(uint256 amount) external onlyOwner {\\n        uint256 balance = IERC20(duelToken).balanceOf(address(this));\\n        IERC20(duelToken).transfer(owner(), amount == 0 ? balance : amount);\\n    }\\n}\\n\\ncontract SingleBeneficiaryLockup is VestingBase {\\n    string public LOCKUP_TYPE;\\n    address public BENEFICIARY;\\n\\n    uint256[] releaseTimestamps;\\n    uint16[] releasePercentages;\\n    uint256 vestedAllocation;\\n    uint256 vestedClaim;\\n\\n    constructor(\\n        address _duelToken,\\n        string memory name\\n    ) VestingBase(_duelToken) {\\n        LOCKUP_TYPE = name;\\n    }\\n\\n    function updateReleaseParameters(\\n        uint256[] memory _releaseTimestamps,\\n        uint16[] memory _releasePercentages\\n    ) external onlyOwner {\\n        require(\\n            releaseTimestamps.length == releasePercentages.length,\\n            \\\"Parameters length mismatch\\\"\\n        );\\n        releaseTimestamps = _releaseTimestamps;\\n        releasePercentages = _releasePercentages;\\n    }\\n\\n    function allocateDUEL(\\n        address beneficiary,\\n        uint256 amount\\n    ) external override onlyOwner {\\n        IERC20(duelToken).transferFrom(owner(), address(this), amount);\\n        BENEFICIARY = beneficiary;\\n        vestedAllocation = amount;\\n        vestedClaim = 0;\\n    }\\n\\n    function reallocateDUEL(\\n        address newBeneficiary,\\n        uint256 amountOut,\\n        uint256 amountIn\\n    ) external onlyOwner {\\n        IERC20(duelToken).transfer(owner(), amountOut);\\n        IERC20(duelToken).transferFrom(owner(), address(this), amountIn);\\n        BENEFICIARY = newBeneficiary;\\n    }\\n\\n    function claimDUEL() external override {\\n        require(_msgSender() == BENEFICIARY, \\\"ACCESS_FORBIDDEN\\\");\\n        require(\\n            vestedAllocation > 0 && vestedAllocation > vestedClaim,\\n            \\\"Nothing to claim\\\"\\n        );\\n\\n        uint16 cumulativePercentage = 0;\\n        for (uint8 i = 0; i < releaseTimestamps.length; i++) {\\n            if (releaseTimestamps[i] > block.timestamp) {\\n                break;\\n            }\\n            cumulativePercentage += releasePercentages[i];\\n        }\\n\\n        uint256 availableClaim = (vestedAllocation * cumulativePercentage) /\\n            100000;\\n        require(availableClaim > vestedClaim, \\\"Period already claimed\\\");\\n\\n        uint256 unclaimedTokens = availableClaim - vestedClaim;\\n        vestedClaim += unclaimedTokens;\\n\\n        IERC20(duelToken).transfer(_msgSender(), unclaimedTokens);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_duelToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"was30d\",\"type\":\"bool\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unlock30d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock90d\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimDUEL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setDuelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newV1\",\"type\":\"address\"}],\"name\":\"setVestingV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDUEL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DynamicVestingMin", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000943af2ece93118b973c95c2f698ee9d15002e604000000000000000000000000f619a53968dbb9f48ee7fd1fab38258f87d2ce44", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}