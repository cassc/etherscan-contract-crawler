{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract VotingToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // ERC 20 fields\r\n    // ------------------------------------------------------------------------\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Fields required for the referendum\r\n    // ------------------------------------------------------------------------\r\n    Description public description;\r\n    Props public props;\r\n    Reward public reward;\r\n    bool public open;\r\n    \r\n    struct Description {\r\n        string question;\r\n        string firstProp;\r\n        string secondProp;\r\n    }\r\n\r\n    struct Props {\r\n        address firstPropAddress;\r\n        address secondPropAddress;\r\n        address blankVoteAddress;\r\n    }\r\n\r\n    struct Reward {\r\n        address tokenAddress;\r\n        address refundWalletAddress; \r\n    }\r\n\r\n    event VoteRewarded(address indexed to, uint amount);\r\n    event Finish(string question, \r\n        string firstProp, uint firstPropCount, \r\n        string secondProp, uint secondPropCount, uint blankVoteCount);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function VotingToken(\r\n        string _symbol, string _name, uint _totalSupply, \r\n        string _question, string _firstProp, string _secondProp,\r\n        address _firstPropAddress, address _secondPropAddress, address _blankVoteAddress,\r\n        address _tokenAddress) public {\r\n\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = 8;\r\n        totalSupply = _totalSupply;\r\n        balances[owner] = _totalSupply;\r\n        Transfer(address(0), owner, totalSupply);\r\n\r\n        description = Description(_question, _firstProp, _secondProp);\r\n        props = Props(_firstPropAddress, _secondPropAddress, _blankVoteAddress);\r\n        reward = Reward(_tokenAddress, owner);\r\n        open = true;\r\n    }\r\n\r\n    function close() public onlyOwner returns (bool success) {\r\n        require(open);\r\n        open = false;\r\n        Finish(description.question, \r\n            description.firstProp, balanceOf(props.firstPropAddress), \r\n            description.firstProp, balanceOf(props.secondPropAddress), \r\n            balanceOf(props.blankVoteAddress));\r\n\r\n        ERC20Interface rewardToken = ERC20Interface(reward.tokenAddress);\r\n        uint leftBalance = rewardToken.balanceOf(address(this));\r\n        rewardToken.transfer(reward.refundWalletAddress, leftBalance);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateRefundWalletAddress(address _wallet) public onlyOwner returns (bool success) {\r\n        reward.refundWalletAddress = _wallet;\r\n        return true;\r\n    }\r\n\r\n    function getResults() public view returns (uint firstPropCount, uint secondPropCount, uint blankVoteCount) {\r\n        return (\r\n            balanceOf(props.firstPropAddress), \r\n            balanceOf(props.secondPropAddress), \r\n            balanceOf(props.blankVoteAddress));\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupply - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address _tokenOwner) public constant returns (uint balance) {\r\n        return balances[_tokenOwner];\r\n    }\r\n\r\n    function rewardVote(address _from, address _to, uint _tokens) private {\r\n        if(_to == props.firstPropAddress || \r\n           _to == props.secondPropAddress || \r\n           _to == props.blankVoteAddress) {\r\n            ERC20Interface rewardToken = ERC20Interface(reward.tokenAddress);\r\n            uint rewardTokens = _tokens.div(100);\r\n            rewardToken.transfer(_from, rewardTokens);\r\n            VoteRewarded(_from, _tokens);\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        return transferFrom(msg.sender, to, tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(open);\r\n        balances[from] = balances[from].sub(tokens);\r\n        if(from != msg.sender) {\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        }\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        rewardVote(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        require(open);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"props\",\"outputs\":[{\"name\":\"firstPropAddress\",\"type\":\"address\"},{\"name\":\"secondPropAddress\",\"type\":\"address\"},{\"name\":\"blankVoteAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"refundWalletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getResults\",\"outputs\":[{\"name\":\"firstPropCount\",\"type\":\"uint256\"},{\"name\":\"secondPropCount\",\"type\":\"uint256\"},{\"name\":\"blankVoteCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"question\",\"type\":\"string\"},{\"name\":\"firstProp\",\"type\":\"string\"},{\"name\":\"secondProp\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateRefundWalletAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_question\",\"type\":\"string\"},{\"name\":\"_firstProp\",\"type\":\"string\"},{\"name\":\"_secondProp\",\"type\":\"string\"},{\"name\":\"_firstPropAddress\",\"type\":\"address\"},{\"name\":\"_secondPropAddress\",\"type\":\"address\"},{\"name\":\"_blankVoteAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VoteRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"firstProp\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"firstPropCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"secondProp\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"secondPropCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blankVoteCount\",\"type\":\"uint256\"}],\"name\":\"Finish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "VotingToken", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000002ef9d3426b0626d8392398cdc11accf70819120000000000000000000000000036f5611e5f64e92afae7efa7755cf75713f4e000000000000000000000000000003d13e305562c87260d40d6733c3c9163d499000000000000000000000000ba9d4199fab4f26efe3551d490e3821486f135ba0000000000000000000000000000000000000000000000000000000000000004525342310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000165377697373426f7267205265666572656e64756d203100000000000000000000000000000000000000000000000000000000000000000000000000000000003d57686174206b696e64206f66206170702073686f756c6420746865205377697373426f726720696e766573746d656e7420706c6174666f726d2062653f00000000000000000000000000000000000000000000000000000000000000000000124120526561637469766520576562204170700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c41204d6f62696c65204170700000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://020512a3630a4bdb093dd6414341e1f100d719118f7f9424153d8e97f37b65e1"}