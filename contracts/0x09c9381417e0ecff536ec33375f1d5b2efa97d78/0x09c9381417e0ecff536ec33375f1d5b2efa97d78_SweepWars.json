{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/voting/SweepWars.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SignedMath} from '@openzeppelin/contracts/utils/math/SignedMath.sol';\\n\\nimport {AuthorityControl} from '@floor/authorities/AuthorityControl.sol';\\nimport {VeFloorStaking} from '@floor/staking/VeFloorStaking.sol';\\nimport {CannotSetNullAddress, CollectionNotApproved} from '@floor/utils/Errors.sol';\\n\\nimport {ICollectionRegistry} from '@floor-interfaces/collections/CollectionRegistry.sol';\\nimport {INftStaking} from '@floor-interfaces/staking/NftStaking.sol';\\nimport {IBaseStrategy} from '@floor-interfaces/strategies/BaseStrategy.sol';\\nimport {IStrategyFactory} from '@floor-interfaces/strategies/StrategyFactory.sol';\\nimport {ISweepWars} from '@floor-interfaces/voting/SweepWars.sol';\\nimport {ITreasury} from '@floor-interfaces/Treasury.sol';\\n\\n/// If a vote is cast against our WETH address\\nerror CannotVoteWeth();\\n\\n/// If a vote with a zero amount is sent\\nerror CannotVoteWithZeroAmount();\\n\\n/// If the caller attempts to vote with more than their available voting power\\n/// @param amount The amount of votes requested to cast\\n/// @param available The amount of votes available for the caller to cast\\nerror InsufficientVotesAvailable(uint amount, uint available);\\n\\n/// If an invalid collection and/or amount array are passed when revoking votes\\nerror InvalidCollectionsAndAmounts();\\n\\n/// If the caller attempts to revoke more votes than votes cast\\n/// @param amount The amount of votes requested to revoke\\n/// @param available The amount of votes available to be revoked\\nerror InsufficientVotesToRevoke(uint amount, uint available);\\n\\n/// If a sample size is attempted to be set to zero\\nerror SampleSizeCannotBeZero();\\n\\n/**\\n * Each epoch, unless we have set up a {NewCollectionWar} to run, then a sweep war will\\n * take place. This contract will handle the voting and calculations for these wars.\\n *\\n * When a Sweep War epoch ends, then the `snapshot` function will be called that finds the\\n * top _x_ collections and their relative sweep amounts based on the votes cast.\\n */\\ncontract SweepWars is AuthorityControl, ISweepWars {\\n\\n    /// Keep a store of the number of collections we want to reward pick per epoch\\n    uint public sampleSize = 3;\\n\\n    /// Internal contract references\\n    ICollectionRegistry public immutable collectionRegistry;\\n    IStrategyFactory public immutable strategyFactory;\\n    VeFloorStaking public immutable veFloor;\\n    ITreasury public immutable treasury;\\n    INftStaking public nftStaking;\\n\\n    /**\\n     * We will need to maintain an internal structure to map the voters against\\n     * a strategy address so that we can determine vote growth and reallocation. We\\n     * will additionally maintain a mapping of strategy address to total amount that\\n     * will better allow for snapshots to be taken for less gas.\\n     *\\n     * This will result in a slightly increased write, to provide a greatly\\n     * reduced read.\\n     */\\n\\n    /// Store a mapping of the collection address to the number of votes\\n    mapping(address => int) public collectionVotes;\\n\\n    /**\\n     * A collection of votes that the user currently has placed.\\n     *\\n     * Mapping user address -> collection address -> amount.\\n     */\\n    mapping(bytes32 => uint) private _userForVotes;\\n    mapping(bytes32 => uint) private _userAgainstVotes;\\n    mapping(address => uint) private _totalUserVotes;\\n\\n    /**\\n     * Sets up our contract parameters.\\n     *\\n     * @param _collectionRegistry Address of our {CollectionRegistry}\\n     * @param _strategyFactory Address of our {StrategyFactory}\\n     * @param _veFloor Address of our {veFLOOR}\\n     * @param _authority {AuthorityRegistry} contract address\\n     */\\n    constructor(address _collectionRegistry, address _strategyFactory, address _veFloor, address _authority, address _treasury)\\n        AuthorityControl(_authority)\\n    {\\n        if (_collectionRegistry == address(0) || _strategyFactory == address(0) || _veFloor == address(0) || _treasury == address(0)) {\\n            revert CannotSetNullAddress();\\n        }\\n\\n        collectionRegistry = ICollectionRegistry(_collectionRegistry);\\n        strategyFactory = IStrategyFactory(_strategyFactory);\\n        veFloor = VeFloorStaking(_veFloor);\\n        treasury = ITreasury(_treasury);\\n\\n        // Emit our initial sampleSize\\n        emit SampleSizeUpdated(sampleSize);\\n    }\\n\\n    /**\\n     * The total voting power of a user, regardless of if they have cast votes\\n     * or not.\\n     *\\n     * @param _user User address being checked\\n     */\\n    function userVotingPower(address _user) public view returns (uint) {\\n        return veFloor.votingPowerOf(_user);\\n    }\\n\\n    /**\\n     * The total number of votes that a user has available.\\n     *\\n     * @param _user User address being checked\\n     *\\n     * @return uint Number of votes available to the user\\n     */\\n    function userVotesAvailable(address _user) public view returns (uint) {\\n        uint _userVotingPower = userVotingPower(_user);\\n        uint totalUserVotes = _totalUserVotes[_user];\\n\\n        // We shouldn't be in a situation where the user's total votes is above the\\n        // available voting power, but to avoid reverts..\\n        if (totalUserVotes >= _userVotingPower) {\\n            return 0;\\n        }\\n\\n        return _userVotingPower - totalUserVotes;\\n    }\\n\\n    /**\\n     * Allows a user to cast a vote using their veFloor allocation. We don't\\n     * need to monitor transfers as veFloor can only be minted or burned, and\\n     * we check the voters balance during the `snapshot` call.\\n     *\\n     * A user can vote with a partial amount of their veFloor holdings, and when\\n     * it comes to calculating their voting power this will need to be taken into\\n     * consideration that it will be:\\n     *\\n     * ```\\n     * staked balance + (gains from staking * (total balance - staked balance)%)\\n     * ```\\n     *\\n     * The {Treasury} cannot vote with it's holdings, as it shouldn't be holding\\n     * any staked Floor.\\n     *\\n     * @param _collection The collection address being voted for\\n     * @param _amount The number of votes the caller is casting\\n     */\\n    function vote(address _collection, int _amount) external {\\n        if (_amount == 0) {\\n            revert CannotVoteWithZeroAmount();\\n        }\\n\\n        // Prevent a vote against WETH as this is a protected collection\\n        if (_collection == address(treasury.weth())) {\\n            revert CannotVoteWeth();\\n        }\\n\\n        // Get an absolute value of our cast amount\\n        uint absAmount = SignedMath.abs(_amount);\\n\\n        // Ensure the user has enough votes available to cast\\n        uint votesAvailable = userVotesAvailable(msg.sender);\\n        if (votesAvailable < absAmount) {\\n            revert InsufficientVotesAvailable(absAmount, votesAvailable);\\n        }\\n\\n        // Confirm that the collection being voted for is approved and valid, if we\\n        // aren't voting for a zero address (which symbolises FLOOR).\\n        if (!collectionRegistry.isApproved(_collection)) {\\n            revert CollectionNotApproved(_collection);\\n        }\\n\\n        unchecked {\\n            // Increase our tracked user amounts\\n            if (_amount < 0) {\\n                _userAgainstVotes[keccak256(abi.encode(msg.sender, _collection))] += absAmount;\\n            } else {\\n                _userForVotes[keccak256(abi.encode(msg.sender, _collection))] += absAmount;\\n            }\\n\\n            collectionVotes[_collection] += _amount;\\n            _totalUserVotes[msg.sender] += absAmount;\\n        }\\n\\n        // Trigger our potential restake due to vote action\\n        veFloor.refreshLock(msg.sender);\\n\\n        emit VoteCast(msg.sender, _collection, _amount);\\n    }\\n\\n    /**\\n     * Gets the number of votes for a collection at the current epoch.\\n     *\\n     * @param _collection The collection to check vote amount for\\n     *\\n     * @return votes_ The number of votes at the current epoch\\n     */\\n    function votes(address _collection) public view returns (int votes_) {\\n         votes_ = collectionVotes[_collection];\\n\\n        // Pull in the additional voting power generated by NFT staking\\n        if (address(nftStaking) != address(0)) {\\n            votes_ = nftStaking.collectionBoost(_collection, votes_);\\n        }\\n    }\\n\\n    /**\\n     * Allows a user to revoke their votes from strategies. This will free up the\\n     * user's available votes that can subsequently be voted again with.\\n     *\\n     * @param _collections[] The collection address(es) being revoked\\n     */\\n    function revokeVotes(address[] calldata _collections) external {\\n        _revokeVotes(msg.sender, _collections);\\n    }\\n\\n    /**\\n     * Allows an authorised contract or wallet to revoke all user votes. This\\n     * can be called when the veFLOOR balance is reduced.\\n     *\\n     * @param _account The user having their votes revoked\\n     */\\n    function revokeAllUserVotes(address _account) external onlyRole(VOTE_MANAGER) {\\n        _revokeVotes(_account, voteOptions());\\n    }\\n\\n    function _revokeVotes(address _account, address[] memory _collections) internal {\\n        // Pull our the number of collections we are revoking from for gas saves\\n        uint length = _collections.length;\\n\\n        // Define variables ahead of our loop for gas saves\\n        bytes32 collectionHash;\\n        uint userCollectionVotes;\\n\\n        // Iterate over our collections to revoke the user's vote amounts\\n        for (uint i; i < length;) {\\n            // Find the collection hash for the user and get their total for and against votes\\n            collectionHash = keccak256(abi.encode(_account, _collections[i]));\\n            userCollectionVotes = _userForVotes[collectionHash] + _userAgainstVotes[collectionHash];\\n\\n            // Check that the user has voted for the collection in some way\\n            if (userCollectionVotes != 0) {\\n                // Update the power and power burn based on the new amount added\\n                collectionVotes[_collections[i]] += int(_userAgainstVotes[collectionHash]);\\n                collectionVotes[_collections[i]] -= int(_userForVotes[collectionHash]);\\n\\n                // Reduce the number of votes cast by the user as a whole\\n                _totalUserVotes[_account] -= userCollectionVotes;\\n\\n                emit VotesRevoked(_account, _collections[i], _userForVotes[collectionHash], _userAgainstVotes[collectionHash]);\\n\\n                // Set the number of for and against user votes back to 0 for the collection\\n                _userForVotes[collectionHash] = 0;\\n                _userAgainstVotes[collectionHash] = 0;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * The snapshot function will need to iterate over all collections that have\\n     * more than 0 votes against them. With that we will need to find each\\n     * strategy percentage share within each collection, in relation to others.\\n     *\\n     * We check against the `sampleSize` that has been set to only select the first\\n     * _x_ top voted collections. We find the strategies that align to the collection\\n     * and give them a sub-percentage of the collection's allocation based on the\\n     * total number of rewards generated within that collection.\\n     *\\n     * @param tokens The number of tokens rewards in the snapshot\\n     *\\n     * @return address[] The collections that were granted rewards\\n     * @return amounts[] The vote values of each collection\\n     */\\n    function snapshot(uint tokens) external view returns (address[] memory, uint[] memory) {\\n        // Keep track of remaining tokens to avoid dust\\n        uint remainingTokens = tokens;\\n\\n        // Set up our temporary collections array that will maintain our top voted collections\\n        (address[] memory collections, uint[] memory collectionVotePowers) = _topCollections();\\n        uint collectionsLength = collections.length;\\n\\n        // Set up our amounts array that will hold the relevant share of the token allocation\\n        uint[] memory amounts = new uint[](collectionsLength);\\n\\n        // Iterate through our sample size of collections to get the total number of\\n        // votes placed that need to be used in distribution calculations to find\\n        // collection share.\\n        uint totalRelevantVotes;\\n        for (uint i; i < collectionsLength;) {\\n            totalRelevantVotes += collectionVotePowers[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Iterate over our collections\\n        for (uint i; i < collectionsLength;) {\\n            // Calculate the reward allocation to be given to the collection based on\\n            // the number of votes from the total votes.\\n            if (i == collectionsLength - 1) {\\n                amounts[i] = remainingTokens;\\n            } else {\\n                amounts[i] = (tokens * ((collectionVotePowers[i] * 1 ether) / totalRelevantVotes)) / 1 ether;\\n            }\\n\\n            unchecked {\\n                remainingTokens -= amounts[i];\\n                ++i;\\n            }\\n        }\\n\\n        return (collections, amounts);\\n    }\\n\\n    /**\\n     * Finds the top voted collections based on the number of votes cast. This is quite\\n     * an intensive process for how simple it is, but essentially just orders creates an\\n     * ordered subset of the top _x_ voted collection addresses.\\n     *\\n     * @dev It may be possible to cache the `votes()` call value, but unsure of gas save\\n     *\\n     * @return Array of collections limited to sample size\\n     * @return Respective vote power for each collection\\n     */\\n    function _topCollections() internal view returns (address[] memory, uint[] memory) {\\n        // Get all of our collections\\n        address[] memory approvedCollections = voteOptions();\\n        uint length = approvedCollections.length;\\n\\n        // We need to see which see if we have enough vote positive collections to fill the\\n        // sample size. If we don't, then we replace the sample size with. Whilst in this\\n        // loop we can also find vote amounts to save repeatedly calling them later on.\\n        uint positiveCollections;\\n\\n        for (uint i; i < length;) {\\n            // If our vote amount is over zero, then we count this to compare against\\n            // the sample size later.\\n            if (votes(approvedCollections[i]) > 0) {\\n                unchecked {\\n                    ++positiveCollections;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Check if the number of positive collections is smaller than the sample size. If it\\n        // is then we need to reduce the sample size we are looking at to only include positive\\n        // ones.\\n        uint _sampleSize = (positiveCollections > sampleSize) ? sampleSize : positiveCollections;\\n\\n        // Set up our temporary collections array that will maintain our top voted collections\\n        address[] memory collections = new address[](_sampleSize);\\n        uint[] memory amounts = new uint[](_sampleSize);\\n\\n        // If we have a zero value sample size, then we can just return our empty arrays\\n        if (_sampleSize == 0) {\\n            return (collections, amounts);\\n        }\\n\\n        uint j;\\n        uint k;\\n\\n        // Iterate over all of our approved collections to check if they have more votes than\\n        // any of the collections currently stored.\\n        for (uint i; i < length;) {\\n            // If we have a vote power that is not positive, then we don't need to process\\n            // any further logic as we definitely won't be including the collection in our\\n            // response.\\n            int _votes = votes(approvedCollections[i]);\\n            if (_votes <= 0) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            // Loop through our currently stored collections and their votes to determine\\n            // if we want to shift things out.\\n            for (j = 0; j < _sampleSize && j < i;) {\\n                // If our collection has more votes than a collection in the sample size,\\n                // then we need to shift all other collections from beneath it.\\n                if (collections[j] == address(0) || _votes > votes(collections[j])) {\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            // Only inject the value into our response if it is within the sample size window\\n            if (j < _sampleSize) {\\n                // If our `j` key is below the `_sampleSize` we have requested, then we will\\n                // need to replace the key with our new collection and all subsequent keys will\\n                // shift down by 1, and any keys above the `_sampleSize` will be deleted.\\n                for (k = _sampleSize - 1; k > j;) {\\n                    collections[k] = collections[k - 1];\\n                    amounts[k] = amounts[k - 1];\\n\\n                    unchecked {\\n                        --k;\\n                    }\\n                }\\n\\n                // Update the new max element and update the corresponding vote power. We can safely\\n                // cast our `amounts` value to a `uint` as it will always be a positive number.\\n                collections[k] = approvedCollections[i];\\n                amounts[k] = uint(_votes);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (collections, amounts);\\n    }\\n\\n    /**\\n     * Allows an authenticated caller to update the `sampleSize`.\\n     *\\n     * @dev This should be kept lower where possible for reduced gas spend\\n     *\\n     * @param size The new `sampleSize`\\n     */\\n    function setSampleSize(uint size) external onlyRole(VOTE_MANAGER) {\\n        if (size == 0) revert SampleSizeCannotBeZero();\\n        sampleSize = size;\\n        emit SampleSizeUpdated(size);\\n    }\\n\\n    /**\\n     * Allows our {NftStaking} contract to be updated.\\n     *\\n     * @param _nftStaking The new {NftStaking} contract address\\n     */\\n    function setNftStaking(address _nftStaking) external onlyRole(VOTE_MANAGER) {\\n        if (_nftStaking == address(0)) revert CannotSetNullAddress();\\n        nftStaking = INftStaking(_nftStaking);\\n        emit NftStakingUpdated(_nftStaking);\\n    }\\n\\n    /**\\n     * Provides a list of collection addresses that can be voted on. This will pull in\\n     * all approved collections, which should include the {FLOOR} token as well.\\n     *\\n     * @return collections_ Collections (and {FLOOR}) that can be voted on\\n     */\\n    function voteOptions() public view returns (address[] memory) {\\n        return collectionRegistry.approvedCollections();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/authorities/AuthorityControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Context} from '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport {CannotSetNullAddress} from '@floor/utils/Errors.sol';\\n\\nimport {IAuthorityControl} from '@floor-interfaces/authorities/AuthorityControl.sol';\\nimport {IAuthorityRegistry} from '@floor-interfaces/authorities/AuthorityRegistry.sol';\\n\\n/// If the account does not have the required role for the call.\\n/// @param caller The address making the call\\n/// @param role The role that is required for the call\\nerror AccountDoesNotHaveRole(address caller, bytes32 role);\\n\\n/// If the account does not have the required admin role for the call.\\n/// @param caller The address making the call\\nerror AccountDoesNotHaveAdminRole(address caller);\\n\\n/**\\n * This contract is heavily based on the standardised OpenZeppelin `AccessControl` library.\\n * This allows for the creation of role based access levels that can be assigned to 1-n\\n * addresses.\\n *\\n * Contracts will be able to implement the AuthorityControl to provide access to the `onlyRole` modifier or the\\n * `hasRole` function. This will ensure that the `msg.sender` is allowed to perform an action.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be\\n * unique. The best way to achieve this is by using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"TreasuryManager\\\");\\n * ```\\n */\\ncontract AuthorityControl is Context, IAuthorityControl {\\n    /// CollectionManager - Can approve token addresses to be allowed to be used in strategies\\n    bytes32 public constant COLLECTION_MANAGER = keccak256('CollectionManager');\\n\\n    /// EpochTrigger - Can run epoch trigger contract specific logic\\n    bytes32 public constant EPOCH_TRIGGER = keccak256('EpochTrigger');\\n\\n    /// FloorManager - Can mint and manage Floor and VeFloor tokens\\n    bytes32 public constant FLOOR_MANAGER = keccak256('FloorManager');\\n\\n    /// Governor - A likely DAO owned vote address to allow for wide scale decisions to\\n    /// be made and implemented.\\n    bytes32 public constant GOVERNOR = keccak256('Governor');\\n\\n    /// Guardian - Wallet address that will allow for Governor based actions, except without\\n    /// timeframe restrictions.\\n    bytes32 public constant GUARDIAN = keccak256('Guardian');\\n\\n    /// TreasuryManager - Access to Treasury asset management\\n    bytes32 public constant TREASURY_MANAGER = keccak256('TreasuryManager');\\n\\n    /// StrategyManager - Can create new strategies against approved strategies and collections\\n    bytes32 public constant STRATEGY_MANAGER = keccak256('StrategyManager');\\n\\n    /// VoteManager - Can manage account votes\\n    bytes32 public constant VOTE_MANAGER = keccak256('VoteManager');\\n\\n    /// Reference to the {AuthorityRegistry} contract that maintains role allocations\\n    IAuthorityRegistry public immutable registry;\\n\\n    /**\\n     * Modifier that checks that an account has a specific role. Reverts with a\\n     * standardized message if user does not have specified role.\\n     *\\n     * @param role The keccak256 encoded role string\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        if (!registry.hasRole(role, _msgSender())) {\\n            revert AccountDoesNotHaveRole(_msgSender(), role);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * Modifier that checks that an account has a governor or guardian role.\\n     * Reverts with a standardized message if sender does not have an admin role.\\n     */\\n    modifier onlyAdminRole() {\\n        if (!registry.hasAdminRole(_msgSender())) {\\n            revert AccountDoesNotHaveAdminRole(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * The address that deploys the {AuthorityControl} becomes the default controller. This\\n     * can only be overwritten by the existing.\\n     *\\n     * @param _registry The address of our deployed AuthorityRegistry contract\\n     */\\n    constructor(address _registry) {\\n        if (_registry == address(0)) revert CannotSetNullAddress();\\n        registry = IAuthorityRegistry(_registry);\\n    }\\n\\n    /**\\n     * Returns `true` if `account` has been granted `role`.\\n     *\\n     * @param role The keccak256 encoded role string\\n     * @param account Address to check ownership of role\\n     *\\n     * @return bool If the address has the specified user role\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return registry.hasRole(role, account);\\n    }\\n\\n    /**\\n     * Returns `true` if `account` has been granted either GOVERNOR or GUARDIAN role.\\n     *\\n     * @param account Address to check ownership of role\\n     *\\n     * @return bool If the address has the GOVERNOR or GUARDIAN role\\n     */\\n    function hasAdminRole(address account) public view returns (bool) {\\n        return registry.hasAdminRole(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/staking/VeFloorStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20} from '@1inch/solidity-utils/contracts/libraries/SafeERC20.sol';\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {Math} from '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport {CannotSetNullAddress, TransferFailed} from '@floor/utils/Errors.sol';\\nimport {EpochManaged} from '@floor/utils/EpochManaged.sol';\\n\\nimport {IVeFloorStaking, Depositor} from '@floor-interfaces/staking/VeFloorStaking.sol';\\nimport {IERC20, IVotable} from '@floor-interfaces/tokens/Votable.sol';\\nimport {INewCollectionWars} from '@floor-interfaces/voting/NewCollectionWars.sol';\\nimport {ISweepWars} from '@floor-interfaces/voting/SweepWars.sol';\\nimport {ITreasury} from '@floor-interfaces/Treasury.sol';\\n\\n/**\\n * @title FLOOR Staking\\n * @notice The contract provides the following features: staking, delegation, farming\\n * How lock period works:\\n * - balances and voting power\\n * - Lock min and max\\n * - Add lock\\n * - earlyWithdrawal\\n * - penalty math\\n *\\n * @dev Based on staked 1inch (St1inch :: 0x9A0C8Ff858d273f57072D714bca7411D717501D7)\\n */\\ncontract VeFloorStaking is EpochManaged, ERC20, IVeFloorStaking, IVotable {\\n    using SafeERC20 for IERC20;\\n\\n    event EmergencyExitSet(bool status);\\n    event MaxLossRatioSet(uint ratio);\\n    event MinLockPeriodRatioSet(uint ratio);\\n    event FeeReceiverSet(address receiver);\\n    event EarlyWithdrawFeeExemptionSet(address account, bool exempt);\\n\\n    event Deposit(address account, uint amount);\\n    event Withdraw(address sender, uint amount);\\n\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n    error UnlockTimeHasNotCome();\\n    error StakeUnlocked();\\n    error MinLockPeriodRatioNotReached();\\n    error MinReturnIsNotMet();\\n    error MaxLossIsNotMet();\\n    error MaxLossUnderflow();\\n    error MaxLossOverflow();\\n    error LossIsTooBig();\\n    error RescueAmountIsTooLarge();\\n    error ExpBaseTooBig();\\n    error ExpBaseTooSmall();\\n    error DepositsDisabled();\\n    error ZeroAddress();\\n\\n    /// Set a list of locking periods that the user can lock for\\n    uint8[] public LOCK_PERIODS = [uint8(2), 3, 4, 6];\\n\\n    /// Our FLOOR token\\n    IERC20 public immutable floor;\\n\\n    /// Our internal contracts\\n    ITreasury public immutable treasury;\\n    INewCollectionWars public newCollectionWars;\\n    ISweepWars public sweepWars;\\n\\n    /// Allow some addresses to be exempt from early withdraw fees\\n    mapping(address => bool) public earlyWithdrawFeeExemptions;\\n\\n    /// Map our Depositor index against a user\\n    mapping(address => Depositor) public depositors;\\n\\n    uint internal constant _ONE_E9 = 1e9;\\n\\n    uint public totalDeposits;\\n    bool public emergencyExit;\\n    uint public maxLossRatio;\\n    uint public minLockPeriodRatio;\\n    address public feeReceiver;\\n\\n    /**\\n     * @notice Initializes the contract\\n     * @param floor_ The token to be staked\\n     * @param treasury_ The treasury contract address\\n     */\\n    constructor(IERC20 floor_, address treasury_) ERC20('veFLOOR', 'veFLOOR') {\\n        if (address(floor_) == address(0) || treasury_ == address(0)) revert CannotSetNullAddress();\\n\\n        floor = floor_;\\n        treasury = ITreasury(treasury_);\\n        setFeeReceiver(treasury_);\\n    }\\n\\n    /**\\n     * @notice Sets the new contract that would recieve early withdrawal fees\\n     * @param feeReceiver_ The receiver contract address\\n     */\\n    function setFeeReceiver(address feeReceiver_) public onlyOwner {\\n        feeReceiver = feeReceiver_;\\n        emit FeeReceiverSet(feeReceiver_);\\n    }\\n\\n    /**\\n     * @notice Sets the maximum allowed loss ratio for early withdrawal. If the ratio is not met, actual is more than allowed,\\n     * then early withdrawal will revert.\\n     * Example: maxLossRatio = 90% and 1000 staked floor tokens means that a user can execute early withdrawal only\\n     * if his loss is less than or equals 90% of his stake, which is 900 tokens. Thus, if a user loses 900 tokens he is allowed\\n     * to do early withdrawal and not if the loss is greater.\\n     * @param maxLossRatio_ The maximum loss allowed (9 decimals).\\n     */\\n    function setMaxLossRatio(uint maxLossRatio_) external onlyOwner {\\n        if (maxLossRatio_ > _ONE_E9) revert MaxLossOverflow();\\n        maxLossRatio = maxLossRatio_;\\n        emit MaxLossRatioSet(maxLossRatio_);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum allowed lock period ratio for early withdrawal. If the ratio is not met, actual is more than allowed,\\n     * then early withdrawal will revert.\\n     * @param minLockPeriodRatio_ The maximum loss allowed (9 decimals).\\n     */\\n    function setMinLockPeriodRatio(uint minLockPeriodRatio_) external onlyOwner {\\n        if (minLockPeriodRatio_ > _ONE_E9) revert MaxLossOverflow();\\n        if ((minLockPeriodRatio_ * LOCK_PERIODS[0]) / _ONE_E9 == 0) revert MaxLossUnderflow();\\n        minLockPeriodRatio = minLockPeriodRatio_;\\n        emit MinLockPeriodRatioSet(minLockPeriodRatio_);\\n    }\\n\\n    /**\\n     * @notice Sets the emergency exit mode. In emergency mode any stake may withdraw its stake regardless of lock.\\n     * The mode is intended to use only for migration to a new version of staking contract.\\n     * @param emergencyExit_ set `true` to enter emergency exit mode and `false` to return to normal operations\\n     */\\n    function setEmergencyExit(bool emergencyExit_) external onlyOwner {\\n        emergencyExit = emergencyExit_;\\n        emit EmergencyExitSet(emergencyExit_);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power of the provided account\\n     * @param account The address of an account to get voting power for\\n     * @return votingPower The voting power available at the current epoch\\n     */\\n    function votingPowerOf(address account) public view returns (uint) {\\n        return (depositors[account].amount * depositors[account].epochCount) / LOCK_PERIODS[LOCK_PERIODS.length - 1];\\n    }\\n\\n    /**\\n     * @notice Stakes given amount and locks it for the given duration\\n     */\\n    function deposit(uint amount, uint epochs) external {\\n        _deposit(msg.sender, amount, epochs);\\n    }\\n\\n    function _deposit(address account, uint amount, uint epochs) private {\\n        // If emergency exit is enabled, then we don't accept deposits\\n        if (emergencyExit) revert DepositsDisabled();\\n\\n        // Load our depositor with a single SLOAD\\n        Depositor memory depositor = depositors[account];\\n\\n        // Validate our epoch index key\\n        require(epochs < LOCK_PERIODS.length, 'Invalid epoch index');\\n\\n        // Ensure that the user is not trying to stake for less than the duration of epochs\\n        // that are currently remaining on their stake.\\n        uint _currentEpoch = currentEpoch();\\n        require(_currentEpoch + LOCK_PERIODS[epochs] >= depositor.epochStart + depositor.epochCount, 'Cannot stake less epochs');\\n\\n        // Update the depositor lock to the current epoch\\n        depositor.epochStart = uint160(_currentEpoch);\\n        depositor.epochCount = LOCK_PERIODS[epochs];\\n\\n        // If we are staking additional tokens, then transfer the based FLOOR from the user\\n        // and mint veFloor tokens to the recipient `account`.\\n        if (amount > 0) {\\n            // Take FLOOR tokens from the sender and mint them veFloor\\n            floor.safeTransferFrom(msg.sender, address(this), amount);\\n            _mint(account, amount);\\n\\n            // Increase our tracked amounts\\n            depositor.amount += uint88(amount);\\n            totalDeposits += amount;\\n        }\\n\\n        // SSTORE our updated depositor data\\n        depositors[account] = depositor;\\n\\n        emit Deposit(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw stake before lock period expires at the cost of losing part of a stake.\\n     * The stake loss is proportional to the time passed from the maximum lock period to the lock expiration and voting power.\\n     * The more time is passed the less would be the loss.\\n     * Formula to calculate return amount = (deposit - voting power)) / 0.95\\n     * @param minReturn The minumum amount of stake acceptable for return. If actual amount is less then the transaction is reverted\\n     * @param maxLoss The maximum amount of loss acceptable. If actual loss is bigger then the transaction is reverted\\n     */\\n    function earlyWithdraw(uint minReturn, uint maxLoss) external {\\n        earlyWithdrawTo(msg.sender, minReturn, maxLoss);\\n    }\\n\\n    /**\\n     * @notice Withdraw stake before lock period expires at the cost of losing part of a stake to the specified account\\n     * The stake loss is proportional to the time passed from the maximum lock period to the lock expiration and voting power.\\n     * The more time is passed the less would be the loss.\\n     * Formula to calculate return amount = (deposit - voting power)) / 0.95\\n     * @param to The account to withdraw the stake to\\n     * @param minReturn The minumum amount of stake acceptable for return. If actual amount is less then the transaction is reverted\\n     * @param maxLoss The maximum amount of loss acceptable. If actual loss is bigger then the transaction is reverted\\n     */\\n    function earlyWithdrawTo(address to, uint minReturn, uint maxLoss) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n\\n        // Get the amount that has been deposited and ensure that there is an amount to\\n        // be withdrawn at all.\\n        uint amount = depositor.amount;\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // Check if stake is already fully unlocked, meaning that we don't need to early exit\\n        uint _currentEpoch = currentEpoch();\\n        if (emergencyExit || _currentEpoch >= depositor.epochStart + depositor.epochCount) revert StakeUnlocked();\\n\\n        // Determine when our earliest exit epoch is ensures that we have passed it. This is\\n        // determined by the `minLockPeriodRatio` variable to calculate how much for the `epochCount`\\n        // has passed from the `epochStart`.\\n        uint allowedExitEpoch = depositor.epochStart + depositor.epochCount * minLockPeriodRatio / _ONE_E9;\\n        if (_currentEpoch < allowedExitEpoch) revert MinLockPeriodRatioNotReached();\\n\\n        // Check if the called is exempt from being required to pay early withdrawal fees\\n        if (isExemptFromEarlyWithdrawFees(msg.sender)) {\\n            _withdraw(depositor, amount);\\n            floor.safeTransfer(to, amount);\\n            return;\\n        }\\n\\n        (uint loss, uint ret) = _earlyWithdrawLoss(depositor, amount);\\n\\n        if (ret < minReturn) revert MinReturnIsNotMet();\\n        if (loss > maxLoss) revert MaxLossIsNotMet();\\n        if (loss > amount * maxLossRatio / _ONE_E9) revert LossIsTooBig();\\n\\n        _withdraw(depositor, amount);\\n        floor.safeTransfer(to, ret);\\n\\n        if (!floor.transfer(feeReceiver, loss)) revert TransferFailed();\\n\\n    }\\n\\n    /**\\n     * @notice Gets the loss amount if the staker do early withdrawal at the current block\\n     * @param account The account to calculate early withdrawal loss for\\n     * @return loss The loss amount\\n     * @return ret The return amount\\n     * @return canWithdraw True if the staker can withdraw without penalty, false otherwise\\n     */\\n    function earlyWithdrawLoss(address account) external view returns (uint loss, uint ret, bool canWithdraw) {\\n        Depositor memory depositor = depositors[account]; // SLOAD\\n        (loss, ret) = _earlyWithdrawLoss(depositor, depositor.amount);\\n        canWithdraw = loss <= depositor.amount * maxLossRatio / _ONE_E9;\\n    }\\n\\n    function _earlyWithdrawLoss(Depositor memory depositor, uint depAmount) private view returns (uint loss, uint ret) {\\n        // If the current epoch is after the end of the lock, then we can assume there is\\n        // no early exit loss as their stake is now fully available.\\n        uint _currentEpoch = currentEpoch();\\n        if (_currentEpoch > depositor.epochStart + depositor.epochCount) {\\n            return (0, depAmount);\\n        }\\n\\n        // Determine the power that is actually applied to the user currently based on their\\n        // staked amount and the comparative lock length.\\n        uint power = (depAmount * depositor.epochCount) / LOCK_PERIODS[LOCK_PERIODS.length - 1];\\n\\n        // If we still have the full duration remaining then we don't need to do any\\n        // further calculations.\\n        if (depositor.epochStart == _currentEpoch) {\\n            return (power, depAmount - power);\\n        }\\n\\n        // Determine the number of epochs remaining in the stake. This is already overflow\\n        // checked from the above conditional.\\n        uint remaining = depositor.epochCount - (_currentEpoch - depositor.epochStart);\\n\\n        // Calculate the early withdrawal fee by determining the \\\"per epoch\\\" power generated\\n        // and then charging a penalty for the number of remaining epochs. This determines the\\n        // penalty based on the power, and not the total amount deposited.\\n        loss = (power / depositor.epochCount) * remaining;\\n        ret = depAmount - loss;\\n    }\\n\\n    /**\\n     * @notice Withdraws stake if lock period expired\\n     */\\n    function withdraw() external {\\n        withdrawTo(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraws stake if lock period expired to the given address\\n     */\\n    function withdrawTo(address to) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n        if (!emergencyExit && currentEpoch() < depositor.epochStart + depositor.epochCount) revert UnlockTimeHasNotCome();\\n\\n        uint amount = depositor.amount;\\n        if (amount > 0) {\\n            _withdraw(depositor, balanceOf(msg.sender));\\n            floor.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * Handles our internal logic to process a withdrawal for a depositor.\\n     *\\n     * @param depositor The structure for the user making the withdrawal\\n     * @param balance The amount that the user is trying to withdraw\\n     */\\n    function _withdraw(Depositor memory depositor, uint balance) private {\\n        totalDeposits -= depositor.amount;\\n        depositor.amount = 0;\\n        depositor.epochStart = 0;\\n        depositor.epochCount = 0;\\n        depositors[msg.sender] = depositor; // SSTORE\\n\\n        if (address(newCollectionWars) != address(0)) {\\n            newCollectionWars.revokeVotes(msg.sender);\\n        }\\n\\n        if (address(sweepWars) != address(0)) {\\n            sweepWars.revokeAllUserVotes(msg.sender);\\n        }\\n\\n        _burn(msg.sender, balance);\\n\\n        emit Withdraw(msg.sender, balance);\\n    }\\n\\n    /**\\n     * When a vote or action is cast in the system, then we need to reset the token lock\\n     * period to ensure that the minimum locking threshold is met.\\n     */\\n    function refreshLock(address account) external {\\n        require(msg.sender == address(newCollectionWars) || msg.sender == address(sweepWars), 'Invalid caller');\\n\\n        // Load our depositor with a single SLOAD\\n        Depositor memory depositor = depositors[account];\\n\\n        // Capture our current epoch to prevent multiple future reads\\n        uint currentEpoch = currentEpoch();\\n\\n        // If we have implemented delayed staking, then this sense check will prevent\\n        // unexpected revert errors.\\n        if (depositor.epochStart > currentEpoch) {\\n            return;\\n        }\\n\\n        // Ensure that the user is within, or has gone past, the smallest lock window\\n        if ((currentEpoch - depositor.epochStart) + LOCK_PERIODS[0] <= depositor.epochCount) {\\n            return;\\n        }\\n\\n        // Update the depositor lock to the current epoch\\n        depositor.epochStart = uint160((currentEpoch + LOCK_PERIODS[0]) - depositor.epochCount);\\n\\n        // SSTORE our updated depositor data\\n        depositors[account] = depositor;\\n\\n        emit Deposit(account, 0);\\n    }\\n\\n    /**\\n     * Allows our voting contract addresses to be updated.\\n     */\\n    function setVotingContracts(address _newCollectionWars, address _sweepWars) external onlyOwner {\\n        newCollectionWars = INewCollectionWars(_newCollectionWars);\\n        sweepWars = ISweepWars(_sweepWars);\\n    }\\n\\n    /**\\n     * @notice Retrieves funds from the contract in emergency situations\\n     * @param token The token to retrieve\\n     * @param amount The amount of funds to transfer\\n     */\\n    function rescueFunds(IERC20 token, uint amount) external onlyOwner {\\n        if (address(token) == address(0)) {\\n            Address.sendValue(payable(msg.sender), amount);\\n        } else {\\n            if (token == floor) {\\n                if (amount > floor.balanceOf(address(this)) - totalDeposits) revert RescueAmountIsTooLarge();\\n            }\\n            token.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /**\\n     * Checks if an address is exempt from having to pay early withdrawal fees.\\n     *\\n     * @param account Address of the account to check\\n     *\\n     * @return bool True if the user is exempt from early fees, false if not\\n     */\\n    function isExemptFromEarlyWithdrawFees(address account) public view returns (bool) {\\n        return earlyWithdrawFeeExemptions[account];\\n    }\\n\\n    /**\\n     * Allows an account to be exempted from paying early withdraw fees.\\n     *\\n     * @param account The account to update\\n     * @param exempt If the account is to be exempt from fees\\n     */\\n    function addEarlyWithdrawFeeExemption(address account, bool exempt) external onlyOwner {\\n        earlyWithdrawFeeExemptions[account] = exempt;\\n        emit EarlyWithdrawFeeExemptionSet(account, exempt);\\n    }\\n\\n    // ERC20 methods disablers\\n\\n    function approve(address, uint) public pure override (IERC20, ERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function transfer(address, uint) public pure override (IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address, address, uint) public pure override (IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function increaseAllowance(address, uint) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address, uint) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _afterTokenTransfer(address from, address to, uint amount) internal override (ERC20) {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint amount) internal override (ERC20) {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint amount) internal override (ERC20) {\\n        super._burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * A collection of generic errors that can be referenced across multiple\\n * contracts. Contract-specific errors should still be stored in their\\n * individual Solidity files.\\n */\\n\\n/// If a NULL address tries to be stored which should not be accepted\\nerror CannotSetNullAddress();\\n\\n/// If the caller has entered an insufficient amount to process the action. This\\n/// will likely be a zero amount.\\nerror InsufficientAmount();\\n\\n/// If the caller enters a percentage value that is too high for the requirements\\nerror PercentageTooHigh(uint amount);\\n\\n/// If a required ETH or token `transfer` call fails\\nerror TransferFailed();\\n\\n/// If a user calls a deposit related function with a zero amount\\nerror CannotDepositZeroAmount();\\n\\n/// If a user calls a withdrawal related function with a zero amount\\nerror CannotWithdrawZeroAmount();\\n\\n/// If there are no rewards available to be claimed\\nerror NoRewardsAvailableToClaim();\\n\\n/// If the requested collection is not approved\\n/// @param collection Address of the collection requested\\nerror CollectionNotApproved(address collection);\\n\\n/// If the requested strategy implementation is not approved\\n/// @param strategyImplementation Address of the strategy implementation requested\\nerror StrategyNotApproved(address strategyImplementation);\\n\"\r\n    },\r\n    \"src/interfaces/collections/CollectionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Allows collection contracts to be approved and revoked by addresses holding the\\n * {CollectionManager} role. Only once approved can these collections be applied to\\n * new or existing strategies. They will only need to be stored as a mapping of address\\n * to boolean.\\n */\\n\\ninterface ICollectionRegistry {\\n    /// Emitted when a collection is successfully approved\\n    event CollectionApproved(address contractAddr);\\n\\n    /// Emitted when a collection has been successfully revoked\\n    event CollectionRevoked(address contractAddr);\\n\\n    /**\\n     * Returns `true` if the contract address is an approved collection, otherwise\\n     * returns `false`.\\n     */\\n    function isApproved(address contractAddr) external view returns (bool);\\n\\n    /**\\n     * Returns an array of all approved collections.\\n     */\\n    function approvedCollections() external view returns (address[] memory);\\n\\n    /**\\n     * Approves a collection contract to be used for strategies.\\n     */\\n    function approveCollection(address contractAddr) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/staking/NftStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INftStaking {\\n    /// Emitted when a token is staked\\n    event TokensStaked(address sender, uint tokens, uint tokenValue, uint currentEpoch, uint8 epochCount);\\n\\n    /// Emitted when a token is unstaked\\n    event TokensUnstaked(address sender, uint numNfts, uint remainingPortionToUnstake, uint fees);\\n\\n    function collectionStakerIndex(bytes32) external returns (uint);\\n\\n    function voteDiscount() external returns (uint16);\\n\\n    function sweepModifier() external returns (uint64);\\n\\n    function collectionBoost(address _collection, int _votes) external view returns (int votes_);\\n\\n    function stake(address _collection, uint[] calldata _tokenId, uint[] calldata _amount, uint8 _epochCount, bool _is1155) external;\\n\\n    function unstake(address _collection, bool _is1155) external;\\n\\n    function unstake(address _collection, address _nftStakingStrategy, bool _is1155) external;\\n\\n    function unstakeFees(address _collection) external returns (uint);\\n\\n    function setVoteDiscount(uint16 _voteDiscount) external;\\n\\n    function setSweepModifier(uint64 _sweepModifier) external;\\n\\n    function setPricingExecutor(address _pricingExecutor) external;\\n\\n    function setBoostCalculator(address _boostCalculator) external;\\n\\n    function claimRewards(address _collection) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Strategies will hold the logic for interacting with external platforms to stake\\n * and harvest reward yield. Each strategy will require its own strategy implementation\\n * to allow for different immutable variables to be defined during construct.\\n *\\n * This will follow a similar approach to how NFTX offer their eligibility module\\n * logic, with a lot of the power coming from inheritence.\\n *\\n * When constructed, we want to give the {Treasury} a max uint approval of the yield\\n * and underlying tokens.\\n */\\ninterface IBaseStrategy {\\n    /// @dev When strategy receives a deposit\\n    event Deposit(address token, uint amount, address caller);\\n\\n    /// @dev When strategy is harvested\\n    event Harvest(address token, uint amount);\\n\\n    /// @dev When a staked user exits their position\\n    event Withdraw(address token, uint amount, address recipient);\\n\\n    /**\\n     * Allows the strategy to be initialised.\\n     */\\n    function initialize(bytes32 name, uint strategyId, bytes calldata initData) external;\\n\\n    /**\\n     * Name of the strategy.\\n     */\\n    function name() external view returns (bytes32);\\n\\n    /**\\n     * The numerical ID of the strategy that acts as an index for the {StrategyFactory}.\\n     */\\n    function strategyId() external view returns (uint);\\n\\n    /**\\n     * Total rewards generated by the strategy in all time. This is pure bragging rights.\\n     */\\n    function lifetimeRewards(address token) external returns (uint amount_);\\n\\n    /**\\n     * The amount of rewards claimed in the last claim call.\\n     */\\n    function lastEpochRewards(address token) external returns (uint amount_);\\n\\n    /**\\n     * Gets rewards that are available to harvest.\\n     */\\n    function available() external returns (address[] memory, uint[] memory);\\n\\n    /**\\n     * Extracts all rewards from third party and moves it to a recipient. This should\\n     * only be called by a specific action.\\n     *\\n     * @dev This _should_ always be imposed to be the {Treasury} by the {StrategyFactory}.\\n     */\\n    function harvest(address /* _recipient */ ) external;\\n\\n    /**\\n     * Returns an array of tokens that the strategy supports.\\n     *\\n     * @return address[] The address of valid tokens\\n     */\\n    function validTokens() external view returns (address[] memory);\\n\\n    /**\\n     * Makes a call to a strategy to withdraw a percentage of the deposited holdings.\\n     *\\n     * @param recipient Strategy address to be updated\\n     * @param percentage The 2 decimal accuracy of the percentage to withdraw (e.g. 100% = 10000)\\n     *\\n     * @return address[] Array of tokens withdrawn\\n     * @return uint[] Amounts of respective tokens withdrawn\\n     */\\n    function withdrawPercentage(address recipient, uint percentage) external returns (address[] memory, uint[] memory);\\n\\n    /**\\n     * Pauses deposits from being made into the strategy. This should only be called by\\n     * a guardian or governor.\\n     *\\n     * @param _p Boolean value for if the strategy should be paused\\n     */\\n    function pause(bool _p) external;\\n\\n    /**\\n     * Gets a read of new yield since the last call. This is what can be called when\\n     * the epoch ends to determine the amount generated within the epoch.\\n     */\\n    function snapshot() external returns (address[] memory, uint[] memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategies/StrategyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Allows for strategies to be created, pairing them with a {Strategy} and an approved\\n * collection. The strategy creation script needs to be as highly optimised as possible\\n * to ensure that the gas costs are kept down.\\n *\\n * This factory will keep an index of created strategies and secondary information to ensure\\n * that external applications can display and maintain a list of available strategies.\\n *\\n * The contract can be paused to prevent the creation of new strategies.\\n */\\n\\ninterface IStrategyFactory {\\n    /// @dev Sent when a strategy is created successfully\\n    event StrategyCreated(uint indexed strategyId, address strategyAddress, address assetAddress);\\n\\n    /// @dev Sent when a snapshot is taken\\n    event StrategySnapshot(uint epoch, address[] tokens, uint[] amounts);\\n\\n    /// @dev Sent when the Treasury address is updated\\n    event TreasuryUpdated(address treasury);\\n\\n    /**\\n     * Our stored {Treasury} address.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * Provides a list of all strategies created.\\n     *\\n     * @return Array of all strategies created by the {StrategyFactory}\\n     */\\n    function strategies() external view returns (address[] memory);\\n\\n    /**\\n     * Returns an array of all strategies that belong to a specific collection.\\n     */\\n    function collectionStrategies(address _collection) external view returns (address[] memory);\\n\\n    /**\\n     * Provides a strategy against the provided `strategyId` (index). If the index does not exist,\\n     * then address(0) will be returned.\\n     *\\n     * @param _strategyId ID of the strategy to retrieve\\n     *\\n     * @return Address of the strategy\\n     */\\n    function strategy(uint _strategyId) external view returns (address);\\n\\n    /**\\n     * Creates a strategy with an approved collection.\\n     *\\n     * @dev The strategy is not created using Clones as there are complications when allocated\\n     * roles and permissions.\\n     *\\n     * @param _name Human-readable name of the strategy\\n     * @param _strategy The strategy implemented by the strategy\\n     * @param _strategyInitData Bytes data required by the {Strategy} for initialization\\n     * @param _collection The address of the collection attached to the strategy\\n     *\\n     * @return strategyId_ ID of the newly created strategy\\n     * @return strategyAddr_ Address of the newly created strategy\\n     */\\n    function deployStrategy(bytes32 _name, address _strategy, bytes calldata _strategyInitData, address _collection)\\n        external\\n        returns (uint strategyId_, address strategyAddr_);\\n\\n    /**\\n     * Allows individual strategies to be paused, meaning that assets can no longer be deposited,\\n     * although staked assets can always be withdrawn.\\n     *\\n     * @dev Events are fired within the strategy to allow listeners to update.\\n     *\\n     * @param _strategyId Strategy ID to be paused\\n     * @param _paused If the strategy should be paused or unpaused\\n     */\\n    function pause(uint _strategyId, bool _paused) external;\\n\\n    /**\\n     * Reads the yield generated by a strategy since the last time that this function was called.\\n     *\\n     * @param _epoch The current epoch being snapshotted\\n     *\\n     * @return tokens Tokens that have been generated as yield\\n     * @return amounts The amount of yield generated for the corresponding token\\n     */\\n    function snapshot(uint _epoch) external returns (address[] memory tokens, uint[] memory amounts, uint totalAmount);\\n\\n    /**\\n     * Harvest available reward yield from the strategy. This won't affect the amount\\n     * depositted into the contract and should only harvest rewards directly into the\\n     * {Treasury}.\\n     *\\n     * @param _strategyId Strategy ID to be harvested\\n     */\\n    function harvest(uint _strategyId) external;\\n\\n    /**\\n     * Makes a call to a strategy withdraw function by passing the strategy ID and\\n     * `abi.encodeWithSelector` to build the bytes `_data` parameter. This will then\\n     * pass the data on to the strategy function and inject the treasury recipient\\n     * address within the call as the first function parameter.\\n     *\\n     * @dev It is required for the transaction to return a successful call, otherwise\\n     * the transaction will be reverted. The error response will be standardised so\\n     * debugging will require a trace, rather than just the end message.\\n     *\\n     * @param _strategyId Strategy ID to be withdrawn from\\n     * @param _data Strategy withdraw function call, using `encodeWithSelector`\\n     */\\n    function withdraw(uint _strategyId, bytes calldata _data) external;\\n\\n    /**\\n     * Makes a call to a strategy to withdraw a percentage of the deposited holdings.\\n     *\\n     * @param _strategy Strategy address to be updated\\n     * @param _percentage The 2 decimal accuracy of the percentage to withdraw (e.g. 100% = 10000)\\n     */\\n    function withdrawPercentage(address _strategy, uint _percentage) external returns (address[] memory, uint[] memory);\\n\\n    /**\\n     * Allows the {Treasury} contract address to be updated. All withdrawals will\\n     * be requested to be sent to this address when the `withdraw` is called.\\n     *\\n     * @dev This address is dynamically injected into the subsequent strategy\\n     * withdraw call.\\n     *\\n     * @param _treasury The new {Treasury} contract address\\n     */\\n    function setTreasury(address _treasury) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/voting/SweepWars.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * The GWV will allow users to assign their veFloor position to a strategy, or\\n * optionally case it to a veFloor, which will use a constant value. As the\\n * strategies will be rendered as an address, the veFloor vote will take a NULL\\n * address value.\\n *\\n * At point of development this can take influence from:\\n * https://github.com/saddle-finance/saddle-contract/blob/master/contracts/tokenomics/gauges/GaugeController.vy\\n */\\ninterface ISweepWars {\\n    /// Sent when a user casts or revokes their vote\\n    event VoteCast(address sender, address collection, int amount);\\n\\n    /// Sent when a user has revoked their vote, or it is revoked on their behalf\\n    event VotesRevoked(address account, address collection, uint forVotesRevoked, uint againstVotesRevoked);\\n\\n    /// Sent when the Sample Size is updated\\n    event SampleSizeUpdated(uint size);\\n\\n    /// Sent when the {NftStaking} contract address is updated\\n    event NftStakingUpdated(address nftStaking);\\n\\n    /**\\n     * Gets the number of votes for a collection at the current epoch.\\n     */\\n    function votes(address) external view returns (int);\\n\\n    /**\\n     * The total voting power of a user, regardless of if they have cast votes\\n     * or not.\\n     */\\n    function userVotingPower(address _user) external view returns (uint);\\n\\n    /**\\n     * The total number of votes that a user has available, calculated by:\\n     *\\n     * ```\\n     * votesAvailable_ = balanceOf(_user) - SUM(userVotes.votes_)\\n     * ```\\n     */\\n    function userVotesAvailable(address _user) external view returns (uint votesAvailable_);\\n\\n    /**\\n     * Provides a list of collection addresses that can be voted on.\\n     */\\n    function voteOptions() external view returns (address[] memory collections_);\\n\\n    /**\\n     * Allows a user to cast a vote using their veFloor allocation. We don't\\n     * need to monitor transfers as veFloor can only be minted or burned, and\\n     * we check the voters balance during the `snapshot` call.\\n     *\\n     * A user can vote with a partial amount of their veFloor holdings, and when\\n     * it comes to calculating their voting power this will need to be taken into\\n     * consideration that it will be:\\n     *\\n     * ```\\n     * staked balance + (gains from staking * (total balance - staked balance)%)\\n     * ```\\n     *\\n     * The {Treasury} cannot vote with it's holdings, as it shouldn't be holding\\n     * any staked Floor.\\n     */\\n    function vote(address _collection, int _amount) external;\\n\\n    /**\\n     * Allows a user to revoke their votes from strategies. This will free up the\\n     * user's available votes that can subsequently be voted again with.\\n     */\\n    function revokeVotes(address[] memory _collection) external;\\n\\n    /**\\n     * Allows an authorised contract or wallet to revoke all user votes. This\\n     * can be called when the veFLOOR balance is reduced.\\n     */\\n    function revokeAllUserVotes(address _account) external;\\n\\n    /**\\n     * The snapshot function will need to iterate over all strategies that have\\n     * more than 0 votes against them. With that we will need to find each\\n     * strategy percentage share in relation to other strategies.\\n     *\\n     * This percentage share will instruct the {Treasury} on how much additional\\n     * FLOOR to allocate to the users staked in the strategies. These rewards will\\n     * become available in the {RewardLedger}.\\n     *\\n     * +----------------+-----------------+-------------------+-------------------+\\n     * | Voter          | veFloor         | Vote Weight       | Strategy          |\\n     * +----------------+-----------------+-------------------+-------------------+\\n     * | Alice          | 30              | 40                | 1                 |\\n     * | Bob            | 20              | 30                | 2                 |\\n     * | Carol          | 40              | 55                | 3                 |\\n     * | Dave           | 20              | 40                | 2                 |\\n     * | Emily          | 25              | 35                | 0                 |\\n     * +----------------+-----------------+-------------------+-------------------+\\n     *\\n     * With the above information, and assuming that the {Treasury} has allocated\\n     * 1000 FLOOR tokens to be additionally distributed in this snapshot, we would\\n     * have the following allocations going to the strategies.\\n     *\\n     * +----------------+-----------------+-------------------+-------------------+\\n     * | Strategy       | Votes Total     | Vote Percent      | veFloor Rewards   |\\n     * +----------------+-----------------+-------------------+-------------------+\\n     * | 0 (veFloor)    | 35              | 17.5%             | 175               |\\n     * | 1              | 40              | 20%               | 200               |\\n     * | 2              | 70              | 35%               | 350               |\\n     * | 3              | 55              | 27.5%             | 275               |\\n     * | 4              | 0               | 0%                | 0                 |\\n     * +----------------+-----------------+-------------------+-------------------+\\n     *\\n     * This would distribute the strategies allocated rewards against the staked\\n     * percentage in the strategy. Any Treasury holdings that would be given in rewards\\n     * are just deposited into the {Treasury} as FLOOR, bypassing the {RewardsLedger}.\\n     */\\n    function snapshot(uint tokens) external returns (address[] memory collections, uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/Treasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IWETH} from '@floor-interfaces/tokens/WETH.sol';\\n\\n\\nlibrary TreasuryEnums {\\n    /// Different sweep types that can be specified.\\n    enum SweepType {\\n        COLLECTION_ADDITION,\\n        SWEEP\\n    }\\n\\n    /// Different approval types that can be specified.\\n    enum ApprovalType {\\n        NATIVE,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n}\\n\\n/**\\n * @dev The Treasury will hold all assets.\\n */\\ninterface ITreasury {\\n    /// Stores data that allows the Treasury to action a sweep.\\n    struct Sweep {\\n        TreasuryEnums.SweepType sweepType;\\n        address[] collections;\\n        uint[] amounts;\\n        bool completed;\\n        string message;\\n    }\\n\\n    /// The data structure format that will be mapped against to define a token\\n    /// approval request.\\n    struct ActionApproval {\\n        TreasuryEnums.ApprovalType _type; // Token type\\n        address assetContract; // Used by 20, 721 and 1155\\n        address target; // Used by 20, 721 and 1155\\n        uint amount; // Used by native and 20 tokens\\n    }\\n\\n    /// @dev When native network token is withdrawn from the Treasury\\n    event Deposit(uint amount);\\n\\n    /// @dev When an ERC20 is depositted into the Treasury\\n    event DepositERC20(address token, uint amount);\\n\\n    /// @dev When an ERC721 is depositted into the Treasury\\n    event DepositERC721(address token, uint tokenId);\\n\\n    /// @dev When an ERC1155 is depositted into the Treasury\\n    event DepositERC1155(address token, uint tokenId, uint amount);\\n\\n    /// @dev When native network token is withdrawn from the Treasury\\n    event Withdraw(uint amount, address recipient);\\n\\n    /// @dev When an ERC20 token is withdrawn from the Treasury\\n    event WithdrawERC20(address token, uint amount, address recipient);\\n\\n    /// @dev When an ERC721 token is withdrawn from the Treasury\\n    event WithdrawERC721(address token, uint tokenId, address recipient);\\n\\n    /// @dev When an ERC1155 is withdrawn from the Treasury\\n    event WithdrawERC1155(address token, uint tokenId, uint amount, address recipient);\\n\\n    /// @dev When FLOOR is minted\\n    event FloorMinted(uint amount);\\n\\n    /// @dev When a {Treasury} action is processed\\n    event ActionProcessed(address action, bytes data);\\n\\n    /// @dev When a sweep is registered against an epoch\\n    event SweepRegistered(uint sweepEpoch, TreasuryEnums.SweepType sweepType, address[] collections, uint[] amounts);\\n\\n    /// @dev When an action is assigned to a sweep epoch\\n    event SweepAction(uint sweepEpoch);\\n\\n    /// @dev When an epoch is swept\\n    event EpochSwept(uint epochIndex);\\n\\n    /// Emitted when the {MercenarySweeper} contract address is updated\\n    event MercenarySweeperUpdated(address mercSweeper);\\n\\n    /// Emitted when the minimum sweep amount is updated\\n    event MinSweepAmountUpdated(uint minSweepAmount);\\n\\n    /// Emitted when the {VeFloorStaking} contract is updated\\n    event VeFloorStakingUpdated(address veFloorStaking);\\n\\n    /// Emitted when the {StrategyFactory} contract is updated\\n    event StrategyFactoryUpdated(address strategyFactory);\\n\\n    /**\\n     * Our stored WETH address for the {Treasury}\\n     */\\n    function weth() external returns (IWETH);\\n\\n    /**\\n     * Allow FLOOR token to be minted. This should be called from the deposit method\\n     * internally, but a public method will allow a {TreasuryManager} to bypass this\\n     * and create additional FLOOR tokens if needed.\\n     *\\n     * @dev We only want to do this on creation and for inflation. Have a think on how\\n     * we can implement this!\\n     */\\n    function mint(uint amount) external;\\n\\n    /**\\n     * Allows an ERC20 token to be deposited and generates FLOOR tokens based on\\n     * the current determined value of FLOOR and the token.\\n     */\\n    function depositERC20(address token, uint amount) external;\\n\\n    /**\\n     * Allows an ERC721 token to be deposited and generates FLOOR tokens based on\\n     * the current determined value of FLOOR and the token.\\n     */\\n    function depositERC721(address token, uint tokenId) external;\\n\\n    /**\\n     * Allows an ERC1155 token(s) to be deposited and generates FLOOR tokens based on\\n     * the current determined value of FLOOR and the token.\\n     */\\n    function depositERC1155(address token, uint tokenId, uint amount) external;\\n\\n    /**\\n     * Allows an approved user to withdraw native token.\\n     */\\n    function withdraw(address recipient, uint amount) external;\\n\\n    /**\\n     * Allows an approved user to withdraw and ERC20 token from the Treasury.\\n     */\\n    function withdrawERC20(address recipient, address token, uint amount) external;\\n\\n    /**\\n     * Allows an approved user to withdraw and ERC721 token from the Treasury.\\n     */\\n    function withdrawERC721(address recipient, address token, uint tokenId) external;\\n\\n    /**\\n     * Allows an approved user to withdraw an ERC1155 token(s) from the Treasury.\\n     */\\n    function withdrawERC1155(address recipient, address token, uint tokenId, uint amount) external;\\n\\n    /**\\n     * Actions a sweep to be used against a contract that implements {ISweeper}. This\\n     * will fulfill the sweep and we then mark the sweep as completed.\\n     */\\n    function sweepEpoch(uint epochIndex, address sweeper, bytes calldata data, uint mercSweep) external;\\n\\n    /**\\n     * Allows the DAO to resweep an already swept \\\"Sweep\\\" struct, using a contract that\\n     * implements {ISweeper}. This will fulfill the sweep again and keep the sweep marked\\n     * as completed.\\n     */\\n    function resweepEpoch(uint epochIndex, address sweeper, bytes calldata data, uint mercSweep) external;\\n\\n    /**\\n     * When an epoch ends, we have the ability to register a sweep against the {Treasury}\\n     * via an approved contract. This will store a DAO sweep that will need to be actioned\\n     * using the `sweepEpoch` function.\\n     */\\n    function registerSweep(uint epoch, address[] calldata collections, uint[] calldata amounts, TreasuryEnums.SweepType sweepType)\\n        external;\\n\\n    /**\\n     * The minimum sweep amount that can be implemented, or excluded, as desired by the DAO.\\n     */\\n    function minSweepAmount() external returns (uint);\\n\\n    /**\\n     * Allows the mercenary sweeper contract to be updated.\\n     */\\n    function setMercenarySweeper(address _mercSweeper) external;\\n\\n    /**\\n     * Allows us to set a new VeFloorStaking contract that is used when sweeping epochs.\\n     */\\n    function setVeFloorStaking(address _veFloorStaking) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/authorities/AuthorityControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAuthorityControl {\\n    /// CollectionManager - Can approve token addresses to be allowed to be used in strategies\\n    function COLLECTION_MANAGER() external returns (bytes32);\\n\\n    /// EpochTrigger - Can run epoch trigger contract specific logic\\n    function EPOCH_TRIGGER() external returns (bytes32);\\n\\n    /// FloorManager - Can mint and manage Floor and VeFloor tokens\\n    function FLOOR_MANAGER() external returns (bytes32);\\n\\n    /// Governor - A likely DAO owned vote address to allow for wide scale decisions to\\n    /// be made and implemented.\\n    function GOVERNOR() external returns (bytes32);\\n\\n    /// Guardian - Wallet address that will allow for Governor based actions, except without\\n    /// timeframe restrictions.\\n    function GUARDIAN() external returns (bytes32);\\n\\n    /// TreasuryManager - Access to Treasury asset management\\n    function TREASURY_MANAGER() external returns (bytes32);\\n\\n    /// StrategyManager - Can create new strategies against approved strategies and collections\\n    function STRATEGY_MANAGER() external returns (bytes32);\\n\\n    /// VoteManager - Can manage account votes\\n    function VOTE_MANAGER() external returns (bytes32);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted either the GOVERNOR or\\n     * GUARDIAN `role`.\\n     */\\n    function hasAdminRole(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/authorities/AuthorityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * This interface expands upon the OpenZeppelin `IAccessControl` interface:\\n * https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/access/IAccessControl.sol\\n */\\n\\ninterface IAuthorityRegistry {\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted either the GOVERNOR or\\n     * GUARDIAN `role`.\\n     */\\n    function hasAdminRole(address account) external view returns (bool);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role) external;\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGHT_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Permit2 version of safeTransferFrom above.\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            switch permit.length\\n            case 100 {\\n                mstore(ptr, permitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20)))\\n                    let vs := calldataload(add(permit.offset, 0x44))\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20) // value\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // r\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let nonce := shr(224, calldataload(permit.offset))\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04)))\\n                    let vs := calldataload(add(permit.offset, 0x28))\\n\\n                    mstore(add(ptr, 0x44), nonce)\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))\\n                    mstore(add(ptr, 0x84), true)\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20) // r\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IERC20Permit.permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, add(4, permit.length), 0, 0)\\n            }\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, add(4, permit.length), 0, 0)\\n            }\\n            case 384 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                success := call(gas(), _PERMIT2, 0, ptr, add(4, permit.length), 0, 0)\\n            }\\n            // TODO: add case for compact permit2\\n            default {\\n                mstore(ptr, _PERMIT_LENGHT_ERROR)\\n                revert(ptr, 4)\\n            }\\n        }\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/utils/EpochManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport {CannotSetNullAddress} from '@floor/utils/Errors.sol';\\n\\nimport {IEpochManager} from '@floor-interfaces/EpochManager.sol';\\n\\nabstract contract EpochManaged is Ownable {\\n    /// Emits when {EpochManager} is updated\\n    event EpochManagerUpdated(address epochManager);\\n\\n    /// Stores the current {EpochManager} contract\\n    IEpochManager public epochManager;\\n\\n    /**\\n     * Allows an updated {EpochManager} address to be set.\\n     */\\n    function setEpochManager(address _epochManager) external virtual onlyOwner {\\n        _setEpochManager(_epochManager);\\n    }\\n\\n    /**\\n     * Allows an updated {EpochManager} address to be set by an inheriting contract.\\n     */\\n    function _setEpochManager(address _epochManager) internal virtual {\\n        if (_epochManager == address(0)) revert CannotSetNullAddress();\\n        epochManager = IEpochManager(_epochManager);\\n        emit EpochManagerUpdated(_epochManager);\\n    }\\n\\n    /**\\n     * Gets the current epoch from our {EpochManager}.\\n     */\\n    function currentEpoch() internal view virtual returns (uint) {\\n        return epochManager.currentEpoch();\\n    }\\n\\n    /**\\n     * Checks that the contract caller is the {EpochManager}.\\n     */\\n    modifier onlyEpochManager() {\\n        require(msg.sender == address(epochManager), 'Only EpochManager can call');\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/staking/VeFloorStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Depositor {\\n    uint160 epochStart;\\n    uint8 epochCount;\\n    uint88 amount;\\n}\\n\\ninterface IVeFloorStaking {\\n    /// Set a list of locking periods that the user can lock for\\n    function LOCK_PERIODS(uint) external returns (uint8);\\n\\n    // function floor() external returns (IERC20);\\n\\n    function earlyWithdrawFeeExemptions(address) external returns (bool);\\n\\n    function depositors(address) external returns (uint160, uint8, uint88);\\n\\n    function totalDeposits() external returns (uint);\\n\\n    function emergencyExit() external returns (bool);\\n\\n    function maxLossRatio() external returns (uint);\\n\\n    function minLockPeriodRatio() external returns (uint);\\n\\n    function feeReceiver() external returns (address);\\n\\n    function setFeeReceiver(address feeReceiver_) external;\\n\\n    function setMaxLossRatio(uint maxLossRatio_) external;\\n\\n    function setMinLockPeriodRatio(uint minLockPeriodRatio_) external;\\n\\n    function setEmergencyExit(bool emergencyExit_) external;\\n\\n    function deposit(uint amount, uint epochs) external;\\n\\n    function earlyWithdraw(uint minReturn, uint maxLoss) external;\\n\\n    function earlyWithdrawTo(address to, uint minReturn, uint maxLoss) external;\\n\\n    function earlyWithdrawLoss(address account) external view returns (uint loss, uint ret, bool canWithdraw);\\n\\n    function withdraw() external;\\n\\n    function withdrawTo(address to) external;\\n\\n    // function rescueFunds(IERC20 token, uint256 amount) external;\\n\\n    function isExemptFromEarlyWithdrawFees(address account) external view returns (bool);\\n\\n    function addEarlyWithdrawFeeExemption(address account, bool exempt) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/tokens/Votable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVotable is IERC20 {\\n    /// @dev we assume that voting power is a function of balance that preserves order\\n    function votingPowerOf(address account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/voting/NewCollectionWars.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INewCollectionWars {\\n    /**\\n     * For each FloorWar that is created, this structure will be created. When\\n     * the epoch ends, the FloorWar will remain and will be updated with information\\n     * on the winning collection and the votes attributed to each collection.\\n     */\\n    struct FloorWar {\\n        uint index;\\n        uint startEpoch;\\n        address[] collections;\\n    }\\n\\n    /// Sent when a user casts a vote\\n    event VoteCast(address sender, address collection, uint userVotes, uint collectionVotes);\\n\\n    /// Sent when a collection vote is revoked\\n    event VoteRevoked(address sender, address collection, uint collectionVotes);\\n\\n    /// Sent when a collection NFT is staked to vote\\n    event NftVoteCast(address sender, uint war, address collection, uint collectionVotes, uint collectionNftVotes);\\n\\n    /// Sent when a Collection Addition War is created\\n    event CollectionAdditionWarCreated(uint epoch, address[] collections, uint[] floorPrices);\\n\\n    /// Sent when a Collection Addition War is started\\n    event CollectionAdditionWarStarted(uint warIndex);\\n\\n    /// Sent when a Collection Addition War ends\\n    event CollectionAdditionWarEnded(uint warIndex, address collection);\\n\\n    /// Sent when Collection Addition War NFTs are exercised\\n    event CollectionExercised(uint warIndex, address collection, uint value);\\n\\n    /// Sent when the {NewCollectionWarOptions} contract address is updated\\n    event NewCollectionWarOptionsUpdated(address newCollectionWarOptions);\\n\\n    /// Stores the number of votes a user has placed against a war collection\\n    function userVotes(bytes32) external view returns (uint);\\n\\n    /// Stores the floor spot price of a collection token against a war collection\\n    function collectionSpotPrice(bytes32) external view returns (uint);\\n\\n    /// Stores the total number of votes against a war collection\\n    function collectionVotes(bytes32) external view returns (uint);\\n    function collectionNftVotes(bytes32) external view returns (uint);\\n\\n    /// Stores which collection the user has cast their votes towards to allow for\\n    /// reallocation on subsequent votes if needed.\\n    function userCollectionVote(bytes32) external view returns (address);\\n\\n    /// Stores the address of the collection that won a Floor War\\n    function floorWarWinner(uint _epoch) external view returns (address);\\n\\n    /// Stores if a collection has been flagged as ERC1155\\n    function is1155(address) external returns (bool);\\n\\n    /// Stores the unlock epoch of a collection in a floor war\\n    function collectionEpochLock(bytes32) external returns (uint);\\n\\n    /**\\n     * The total voting power of a user, regardless of if they have cast votes\\n     * or not.\\n     *\\n     * @param _user User address being checked\\n     */\\n    function userVotingPower(address _user) external view returns (uint);\\n\\n    /**\\n     * The total number of votes that a user has available.\\n     *\\n     * @param _user User address being checked\\n     *\\n     * @return uint Number of votes available to the user\\n     */\\n    function userVotesAvailable(uint _war, address _user) external view returns (uint);\\n\\n    /**\\n     * Allows the user to cast 100% of their voting power against an individual\\n     * collection. If the user has already voted on the FloorWar then this will\\n     * additionally reallocate their votes.\\n     */\\n    function vote(address collection) external;\\n\\n    /**\\n     * Allows an approved contract to submit option-related votes against a collection\\n     * in the current war.\\n     *\\n     * @param sender The address of the user that staked the token\\n     * @param collection The collection to cast the vote against\\n     * @param votingPower The voting power added from the option creation\\n     */\\n    function optionVote(address sender, uint war, address collection, uint votingPower) external;\\n\\n    /**\\n     * Revokes a user's current votes in the current war.\\n     *\\n     * @dev This is used when a user unstakes their floor\\n     *\\n     * @param account The address of the account that is having their vote revoked\\n     */\\n    function revokeVotes(address account) external;\\n\\n    /**\\n     * Allow an authorised user to create a new floor war to start with a range of\\n     * collections from a specific epoch.\\n     */\\n    function createFloorWar(uint epoch, address[] calldata collections, bool[] calldata isErc1155, uint[] calldata floorPrices)\\n        external\\n        returns (uint);\\n\\n    /**\\n     * Sets a scheduled {FloorWar} to be active.\\n     *\\n     * @dev This function is called by the {EpochManager} when a new epoch starts\\n     *\\n     * @param index The index of the {FloorWar} being started\\n     */\\n    function startFloorWar(uint index) external;\\n\\n    /**\\n     * When the epoch has come to an end, this function will be called to finalise\\n     * the votes and decide which collection has won. This collection will then need\\n     * to be added to the {CollectionRegistry}.\\n     *\\n     * Any NFTs that have been staked will be timelocked for an additional epoch to\\n     * give the DAO time to exercise or reject any options.\\n     *\\n     * @dev We can't action this in one single call as we will need information about\\n     * the underlying NFTX token as well.\\n     */\\n    function endFloorWar() external returns (address highestVoteCollection);\\n\\n    /**\\n     * Allows us to update our collection floor prices if we have seen a noticable difference\\n     * since the start of the epoch. This will need to be called for this reason as the floor\\n     * price of the collection heavily determines the amount of voting power awarded when\\n     * creating an option.\\n     */\\n    function updateCollectionFloorPrice(address collection, uint floorPrice) external;\\n\\n    /**\\n     * Allows our options contract to be updated.\\n     *\\n     * @param _contract The new contract to use\\n     */\\n    function setOptionsContract(address _contract) external;\\n\\n    /**\\n     * Check if a collection is in a FloorWar.\\n     */\\n    function isCollectionInWar(bytes32 warCollection) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/tokens/WETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function allowance(address, address) external view returns (uint);\\n\\n    function balanceOf(address) external view returns (uint);\\n\\n    function approve(address, uint) external returns (bool);\\n\\n    function transfer(address, uint) external returns (bool);\\n\\n    function transferFrom(address, address, uint) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\"\r\n    },\r\n    \"lib/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/contracts/interfaces/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPermit2 {\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n    /// @notice Packed allowance\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/EpochManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Handles epoch management for all other contracts.\\n */\\ninterface IEpochManager {\\n\\n    /// Emitted when an epoch is ended\\n    event EpochEnded(uint epoch, uint timestamp);\\n\\n    /// Emitted when a new collection war is scheduled\\n    event CollectionAdditionWarScheduled(uint epoch, uint index);\\n\\n    /// Emitted when required contracts are updated\\n    event EpochManagerContractsUpdated(address newCollectionWars, address voteMarket);\\n\\n    /**\\n     * The current epoch that is running across the codebase.\\n     *\\n     * @return The current epoch\\n     */\\n    function currentEpoch() external view returns (uint);\\n\\n    /**\\n     * Stores a mapping of an epoch to a collection addition war index.\\n     *\\n     * @param _epoch Epoch to check\\n     *\\n     * @return Index of the collection addition war. Will return 0 if none found\\n     */\\n    function collectionEpochs(uint _epoch) external view returns (uint);\\n\\n    /**\\n     * Will return if the current epoch is a collection addition vote.\\n     *\\n     * @return If the current epoch is a collection addition\\n     */\\n    function isCollectionAdditionEpoch() external view returns (bool);\\n\\n    /**\\n     * Will return if the specified epoch is a collection addition vote.\\n     *\\n     * @param epoch The epoch to check\\n     *\\n     * @return If the specified epoch is a collection addition\\n     */\\n    function isCollectionAdditionEpoch(uint epoch) external view returns (bool);\\n\\n    /**\\n     * Allows an epoch to be scheduled to be a collection addition vote. An index will\\n     * be specified to show which collection addition will be used. The index will not\\n     * be a zero value.\\n     *\\n     * @param epoch The epoch that the Collection Addition will take place in\\n     * @param index The Collection Addition array index\\n     */\\n    function scheduleCollectionAdditionEpoch(uint epoch, uint index) external;\\n\\n    /**\\n     * Triggers an epoch to end.\\n     *\\n     * @dev More information about this function can be found in the actual contract\\n     */\\n    function endEpoch() external;\\n\\n    /**\\n     * Provides an estimated timestamp of when an epoch started, and also the earliest\\n     * that an epoch in the future could start.\\n     *\\n     * @param _epoch The epoch to find the estimated timestamp of\\n     *\\n     * @return The estimated timestamp of when the specified epoch started\\n     */\\n    function epochIterationTimestamp(uint _epoch) external returns (uint);\\n\\n    /**\\n     * The length of an epoch in seconds.\\n     *\\n     * @return The length of the epoch in seconds\\n     */\\n    function EPOCH_LENGTH() external returns (uint);\\n\\n    /**\\n     * Sets contracts that the epoch manager relies on. This doesn't have to include\\n     * all of the contracts that are {EpochManaged}, but only needs to set ones that the\\n     * {EpochManager} needs to interact with.\\n     */\\n    function setContracts(address _newCollectionWars, address _voteMarket) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@uniswap-v3/=lib/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@chainlink/=lib/chainlink/\",\r\n      \"@murky/=lib/murky/src/\",\r\n      \"@solidity-math-utils/=lib/solidity-math-utils/project/contracts/\",\r\n      \"@solidity-trigonometry/=lib/solidity-trigonometry/src/\",\r\n      \"@1inch/=lib/\",\r\n      \"@charmfi/=lib/charmfi-contracts-0.8.0-support/\",\r\n      \"@sudoswap/=lib/lssvm/src/\",\r\n      \"@floor/=src/contracts/\",\r\n      \"@floor-interfaces/=src/interfaces/\",\r\n      \"@floor-scripts/=script/\",\r\n      \"@ERC721A/=lib/ERC721A/contracts/\",\r\n      \"foundry-random/=lib/foundry-random/src/\",\r\n      \"lssvm2/=lib/lssvm2/src/\",\r\n      \"@nftx-protocol-v3/=lib/nftx-protocol-v3/src/\",\r\n      \"@manifoldxyz/=lib/lssvm2/lib/\",\r\n      \"@mocks/=lib/nftx-protocol-v3/src/mocks/\",\r\n      \"@permit2/=lib/nftx-protocol-v3/lib/permit2/src/\",\r\n      \"@prb/math/=lib/lssvm2/lib/prb-math/src/\",\r\n      \"@prb/test/=lib/foundry-random/lib/prb-test/src/\",\r\n      \"@src/=lib/nftx-protocol-v3/src/\",\r\n      \"@test/=lib/nftx-protocol-v3/test/\",\r\n      \"@uni-core/=lib/nftx-protocol-v3/src/uniswap/v3-core/\",\r\n      \"@uni-periphery/=lib/nftx-protocol-v3/src/uniswap/v3-periphery/\",\r\n      \"@uniswap/lib/=lib/nftx-protocol-v3/lib/solidity-lib/\",\r\n      \"@uniswap/v2-core/=lib/nftx-protocol-v3/lib/v2-core/\",\r\n      \"@uniswap/v3-core/contracts/=lib/nftx-protocol-v3/src/uniswap/v3-core/\",\r\n      \"CramBit/=lib/foundry-random/lib/CramBit/\",\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"base64-sol/=lib/nftx-protocol-v3/src/uniswap/v3-periphery/libraries/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"charmfi-contracts-0.8.0-support/=lib/charmfi-contracts-0.8.0-support/\",\r\n      \"clones-with-immutable-args/=lib/lssvm2/lib/clones-with-immutable-args/src/\",\r\n      \"crambit/=lib/foundry-random/lib/CramBit/src/\",\r\n      \"create2-helpers/=lib/lssvm2/lib/royalty-registry-solidity/lib/create2-helpers/\",\r\n      \"create3-factory/=lib/lssvm2/lib/create3-factory/\",\r\n      \"foundry-huff/=lib/lssvm2/lib/foundry-huff/src/\",\r\n      \"foundry-random/=lib/foundry-random/src/\",\r\n      \"huffmate/=lib/lssvm2/lib/huffmate/src/\",\r\n      \"libraries-solidity/=lib/lssvm2/lib/libraries-solidity/contracts/\",\r\n      \"lssvm/=lib/lssvm/src/\",\r\n      \"lssvm2/=lib/lssvm2/src/\",\r\n      \"manifoldxyz/=lib/lssvm2/lib/royalty-registry-solidity/contracts/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"nftx-protocol-v3/=lib/nftx-protocol-v3/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"prb-math/=lib/solidity-trigonometry/lib/prb-math/contracts/\",\r\n      \"prb-test/=lib/foundry-random/lib/prb-test/src/\",\r\n      \"royalty-registry-solidity.git/=lib/lssvm/lib/royalty-registry-solidity.git/contracts/\",\r\n      \"royalty-registry-solidity/=lib/lssvm2/lib/royalty-registry-solidity/\",\r\n      \"solidity-bytes-utils/=lib/foundry-random/lib/solidity-bytes-utils/contracts/\",\r\n      \"solidity-math-utils/=lib/solidity-math-utils/\",\r\n      \"solidity-stringutils/=lib/lssvm2/lib/foundry-huff/lib/solidity-stringutils/\",\r\n      \"solidity-trigonometry/=lib/solidity-trigonometry/src/\",\r\n      \"solidity-utils/=lib/solidity-utils/contracts/\",\r\n      \"solmate/=lib/lssvm2/lib/solmate/src/\",\r\n      \"src/=lib/foundry-random/src/\",\r\n      \"stringutils/=lib/lssvm2/lib/foundry-huff/lib/solidity-stringutils/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\",\r\n      \"weird-erc20/=lib/lssvm/lib/solmate/lib/weird-erc20/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veFloor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"AccountDoesNotHaveRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotVoteWeth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotVoteWithZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionNotApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientVotesAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SampleSizeCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftStaking\",\"type\":\"address\"}],\"name\":\"NftStakingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"SampleSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forVotesRevoked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"againstVotesRevoked\",\"type\":\"uint256\"}],\"name\":\"VotesRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLECTION_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPOCH_TRIGGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLOOR_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionRegistry\",\"outputs\":[{\"internalType\":\"contract ICollectionRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionVotes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftStaking\",\"outputs\":[{\"internalType\":\"contract INftStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAuthorityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeAllUserVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collections\",\"type\":\"address[]\"}],\"name\":\"revokeVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftStaking\",\"type\":\"address\"}],\"name\":\"setNftStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setSampleSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyFactory\",\"outputs\":[{\"internalType\":\"contract IStrategyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userVotesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veFloor\",\"outputs\":[{\"internalType\":\"contract VeFloorStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteOptions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"votes_\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SweepWars", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d609ba5d63915652c6642695e9c50b68e2ede0e5000000000000000000000000df2e023ea56d752d0b5be79f65557987976676cc0000000000000000000000002b7e22610db92169b87a27df1929c9315b59509f0000000000000000000000002df7427f661b8e06f0364898db0fce3cdb10f5a90000000000000000000000003b91f74ae890dc97bb83e7b8edd36d8296902d68", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}