{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/TransparentUpgradeableProxyV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/bridge-operator-governance/BridgeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerCallback, EnumerableSet, BridgeManagerCallbackRegister } from \\\"./BridgeManagerCallbackRegister.sol\\\";\\nimport { IHasContracts, HasContracts } from \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { IQuorum } from \\\"../../interfaces/IQuorum.sol\\\";\\nimport { IBridgeManager } from \\\"../../interfaces/bridge/IBridgeManager.sol\\\";\\nimport { AddressArrayUtils } from \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\nimport { RoleAccess } from \\\"../../utils/RoleAccess.sol\\\";\\nimport { TUint256Slot } from \\\"../../types/Types.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract BridgeManager is IQuorum, IBridgeManager, BridgeManagerCallbackRegister, HasContracts {\\n  using AddressArrayUtils for address[];\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.governorToBridgeOperatorInfo.slot\\\") - 1\\n  bytes32 private constant GOVERNOR_TO_BRIDGE_OPERATOR_INFO_SLOT =\\n    0x88547008e60f5748911f2e59feb3093b7e4c2e87b2dd69d61f112fcc932de8e3;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.govenorOf.slot\\\") - 1\\n  bytes32 private constant GOVENOR_OF_SLOT = 0x8400683eb2cb350596d73644c0c89fe45f108600003457374f4ab3e87b4f3aa3;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.governors.slot\\\") - 1\\n  bytes32 private constant GOVERNOR_SET_SLOT = 0x546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.bridgeOperators.slot\\\") - 1\\n  bytes32 private constant BRIDGE_OPERATOR_SET_SLOT =\\n    0xd38c234075fde25875da8a6b7e36b58b86681d483271a99eeeee1d78e258a24d;\\n\\n  /**\\n   * @dev The numerator value used for calculations in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.numerator.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant NUMERATOR_SLOT =\\n    TUint256Slot.wrap(0xc55405a488814eaa0e2a685a0131142785b8d033d311c8c8244e34a7c12ca40f);\\n\\n  /**\\n   * @dev The denominator value used for calculations in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.denominator.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant DENOMINATOR_SLOT =\\n    TUint256Slot.wrap(0xac1ff16a4f04f2a37a9ba5252a69baa100b460e517d1f8019c054a5ad698f9ff);\\n\\n  /**\\n   * @dev The nonce value used for tracking nonces in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.nonce.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant NONCE_SLOT =\\n    TUint256Slot.wrap(0x92872d32822c9d44b36a2537d3e0d4c46fc4de1ce154ccfaed560a8a58445f1d);\\n\\n  /**\\n   * @dev The total weight value used for storing the cumulative weight in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.totalWeights.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant TOTAL_WEIGHTS_SLOT =\\n    TUint256Slot.wrap(0x6924fe71b0c8b61aea02ca498b5f53b29bd95726278b1fe4eb791bb24a42644c);\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n  modifier onlyGovernor() virtual {\\n    _requireGovernor(msg.sender);\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 num,\\n    uint256 denom,\\n    uint256 roninChainId,\\n    address bridgeContract,\\n    address[] memory callbackRegisters,\\n    address[] memory bridgeOperators,\\n    address[] memory governors,\\n    uint96[] memory voteWeights\\n  ) payable BridgeManagerCallbackRegister(callbackRegisters) {\\n    NONCE_SLOT.store(1);\\n\\n    _setThreshold(num, denom);\\n    _setContract(ContractType.BRIDGE, bridgeContract);\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n        keccak256(\\\"BridgeAdmin\\\"), // name hash\\n        keccak256(\\\"2\\\"), // version hash\\n        keccak256(abi.encode(\\\"BRIDGE_ADMIN\\\", roninChainId)) // salt\\n      )\\n    );\\n\\n    _addBridgeOperators(voteWeights, governors, bridgeOperators);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function addBridgeOperators(\\n    uint96[] calldata voteWeights,\\n    address[] calldata governors,\\n    address[] calldata bridgeOperators\\n  ) external onlySelfCall returns (bool[] memory addeds) {\\n    addeds = _addBridgeOperators(voteWeights, governors, bridgeOperators);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function removeBridgeOperators(\\n    address[] calldata bridgeOperators\\n  ) external onlySelfCall returns (bool[] memory removeds) {\\n    removeds = _removeBridgeOperators(bridgeOperators);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   * @notice This method checks authorization by querying the corresponding operator of the msg.sender and then\\n   * attempts to remove it from the `_bridgeOperatorSet` for gas optimization. In case we allow a governor can leave\\n   * their operator address blank null `address(0)`, consider add authorization check.\\n   */\\n  function updateBridgeOperator(address newBridgeOperator) external onlyGovernor {\\n    _requireNonZeroAddress(newBridgeOperator);\\n\\n    // Queries the previous bridge operator\\n    mapping(address => BridgeOperatorInfo) storage _gorvernorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n    address currentBridgeOperator = _gorvernorToBridgeOperatorInfo[msg.sender].addr;\\n    if (currentBridgeOperator == newBridgeOperator) {\\n      revert ErrBridgeOperatorAlreadyExisted(newBridgeOperator);\\n    }\\n\\n    // Tries replace the bridge operator\\n    EnumerableSet.AddressSet storage _bridgeOperatorSet = _getBridgeOperatorSet();\\n    bool updated = _bridgeOperatorSet.remove(currentBridgeOperator) && _bridgeOperatorSet.add(newBridgeOperator);\\n    if (!updated) revert ErrBridgeOperatorUpdateFailed(newBridgeOperator);\\n\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    delete _governorOf[currentBridgeOperator];\\n    _governorOf[newBridgeOperator] = msg.sender;\\n    _gorvernorToBridgeOperatorInfo[msg.sender].addr = newBridgeOperator;\\n\\n    _notifyRegisters(\\n      IBridgeManagerCallback.onBridgeOperatorUpdated.selector,\\n      abi.encode(currentBridgeOperator, newBridgeOperator)\\n    );\\n\\n    emit BridgeOperatorUpdated(msg.sender, currentBridgeOperator, newBridgeOperator);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external override onlySelfCall {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(\\n    uint256 numerator,\\n    uint256 denominator\\n  ) external override onlySelfCall returns (uint256, uint256) {\\n    return _setThreshold(numerator, denominator);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getTotalWeight() public view returns (uint256) {\\n    return TOTAL_WEIGHTS_SLOT.load();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint96[] memory weights) {\\n    weights = _getGovernorWeights(governors);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint96 weight) {\\n    weight = _getGovernorWeight(governor);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function sumGovernorsWeight(\\n    address[] calldata governors\\n  ) external view nonDuplicate(governors) returns (uint256 sum) {\\n    sum = _sumGovernorsWeight(governors);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function totalBridgeOperator() external view returns (uint256) {\\n    return _getBridgeOperatorSet().length();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool) {\\n    return _getBridgeOperatorSet().contains(addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getBridgeOperators() external view returns (address[] memory) {\\n    return _getBridgeOperators();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernors() external view returns (address[] memory) {\\n    return _getGovernors();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getBridgeOperatorOf(address[] memory governors) public view returns (address[] memory bridgeOperators) {\\n    uint256 length = governors.length;\\n    bridgeOperators = new address[](length);\\n\\n    mapping(address => BridgeOperatorInfo) storage _gorvernorToBridgeOperator = _getGovernorToBridgeOperatorInfo();\\n    for (uint256 i; i < length; ) {\\n      bridgeOperators[i] = _gorvernorToBridgeOperator[governors[i]].addr;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernorsOf(address[] calldata bridgeOperators) external view returns (address[] memory governors) {\\n    uint256 length = bridgeOperators.length;\\n    governors = new address[](length);\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n\\n    for (uint256 i; i < length; ) {\\n      governors[i] = _governorOf[bridgeOperators[i]];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getFullBridgeOperatorInfos()\\n    external\\n    view\\n    returns (address[] memory governors, address[] memory bridgeOperators, uint96[] memory weights)\\n  {\\n    governors = _getGovernors();\\n    bridgeOperators = getBridgeOperatorOf(governors);\\n    weights = _getGovernorWeights(governors);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint96 weight) {\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n    weight = _governorToBridgeOperatorInfo[_governorOf[bridgeOperator]].voteWeight;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() public view virtual returns (uint256) {\\n    return (NUMERATOR_SLOT.mul(TOTAL_WEIGHTS_SLOT.load()) + DENOMINATOR_SLOT.load() - 1) / DENOMINATOR_SLOT.load();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256 num_, uint256 denom_) {\\n    return (NUMERATOR_SLOT.load(), DENOMINATOR_SLOT.load());\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * DENOMINATOR_SLOT.load() >= NUMERATOR_SLOT.mul(TOTAL_WEIGHTS_SLOT.load());\\n  }\\n\\n  /**\\n   * @dev Internal function to add bridge operators.\\n   *\\n   * This function adds the specified `bridgeOperators` to the bridge operator set and establishes the associated mappings.\\n   *\\n   * Requirements:\\n   * - The caller must have the necessary permission to add bridge operators.\\n   * - The lengths of `voteWeights`, `governors`, and `bridgeOperators` arrays must be equal.\\n   *\\n   * @param voteWeights An array of uint256 values representing the vote weights for each bridge operator.\\n   * @param governors An array of addresses representing the governors for each bridge operator.\\n   * @return addeds An array of boolean values indicating whether each bridge operator was successfully added.\\n   */\\n  function _addBridgeOperators(\\n    uint96[] memory voteWeights,\\n    address[] memory governors,\\n    address[] memory bridgeOperators\\n  ) internal nonDuplicate(governors.extend(bridgeOperators)) returns (bool[] memory addeds) {\\n    uint256 length = bridgeOperators.length;\\n    if (!(length == voteWeights.length && length == governors.length)) revert ErrLengthMismatch(msg.sig);\\n    addeds = new bool[](length);\\n    // simply skip add operations if inputs are empty.\\n    if (length == 0) return addeds;\\n\\n    EnumerableSet.AddressSet storage _governorSet = _getGovernorsSet();\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    EnumerableSet.AddressSet storage _bridgeOperatorSet = _getBridgeOperatorSet();\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n\\n    address governor;\\n    address bridgeOperator;\\n    uint256 accumulatedWeight;\\n    BridgeOperatorInfo memory bridgeOperatorInfo;\\n\\n    for (uint256 i; i < length; ) {\\n      governor = governors[i];\\n      bridgeOperator = bridgeOperators[i];\\n\\n      _requireNonZeroAddress(governor);\\n      _requireNonZeroAddress(bridgeOperator);\\n      if (voteWeights[i] == 0) revert ErrInvalidVoteWeight(msg.sig);\\n\\n      addeds[i] = !(_governorSet.contains(governor) ||\\n        _governorSet.contains(bridgeOperator) ||\\n        _bridgeOperatorSet.contains(governor) ||\\n        _bridgeOperatorSet.contains(bridgeOperator));\\n\\n      if (addeds[i]) {\\n        _governorSet.add(governor);\\n        _bridgeOperatorSet.add(bridgeOperator);\\n        _governorOf[bridgeOperator] = governor;\\n        bridgeOperatorInfo.addr = bridgeOperator;\\n        accumulatedWeight += bridgeOperatorInfo.voteWeight = voteWeights[i];\\n        _governorToBridgeOperatorInfo[governor] = bridgeOperatorInfo;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    TOTAL_WEIGHTS_SLOT.addAssign(accumulatedWeight);\\n\\n    _notifyRegisters(IBridgeManagerCallback.onBridgeOperatorsAdded.selector, abi.encode(bridgeOperators, addeds));\\n\\n    emit BridgeOperatorsAdded(addeds, voteWeights, governors, bridgeOperators);\\n  }\\n\\n  /**\\n   * @dev Internal function to remove bridge operators.\\n   *\\n   * This function removes the specified `bridgeOperators` from the bridge operator set and related mappings.\\n   *\\n   * Requirements:\\n   * - The caller must have the necessary permission to remove bridge operators.\\n   *\\n   * @param bridgeOperators An array of addresses representing the bridge operators to be removed.\\n   * @return removeds An array of boolean values indicating whether each bridge operator was successfully removed.\\n   */\\n  function _removeBridgeOperators(\\n    address[] memory bridgeOperators\\n  ) internal nonDuplicate(bridgeOperators) returns (bool[] memory removeds) {\\n    uint256 length = bridgeOperators.length;\\n    removeds = new bool[](length);\\n    // simply skip remove operations if inputs are empty.\\n    if (length == 0) return removeds;\\n\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    EnumerableSet.AddressSet storage _governorSet = _getGovernorsSet();\\n    EnumerableSet.AddressSet storage _bridgeOperatorSet = _getBridgeOperatorSet();\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n\\n    address governor;\\n    address bridgeOperator;\\n    uint256 accumulatedWeight;\\n    BridgeOperatorInfo memory bridgeOperatorInfo;\\n\\n    for (uint256 i; i < length; ) {\\n      bridgeOperator = bridgeOperators[i];\\n      governor = _governorOf[bridgeOperator];\\n\\n      _requireNonZeroAddress(governor);\\n      _requireNonZeroAddress(bridgeOperator);\\n\\n      bridgeOperatorInfo = _governorToBridgeOperatorInfo[governor];\\n      if (bridgeOperatorInfo.addr != bridgeOperator) revert ErrInvalidArguments(msg.sig);\\n\\n      removeds[i] = _bridgeOperatorSet.contains(bridgeOperator) && _governorSet.contains(governor);\\n      if (removeds[i]) {\\n        _governorSet.remove(governor);\\n        _bridgeOperatorSet.remove(bridgeOperator);\\n\\n        delete _governorOf[bridgeOperator];\\n        delete _governorToBridgeOperatorInfo[governor];\\n        accumulatedWeight += bridgeOperatorInfo.voteWeight;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    TOTAL_WEIGHTS_SLOT.subAssign(accumulatedWeight);\\n\\n    _notifyRegisters(IBridgeManagerCallback.onBridgeOperatorsRemoved.selector, abi.encode(bridgeOperators, removeds));\\n\\n    emit BridgeOperatorsRemoved(removeds, bridgeOperators);\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(\\n    uint256 numerator,\\n    uint256 denominator\\n  ) internal virtual returns (uint256 previousNum, uint256 previousDenom) {\\n    if (numerator > denominator) revert ErrInvalidThreshold(msg.sig);\\n\\n    previousNum = NUMERATOR_SLOT.load();\\n    previousDenom = DENOMINATOR_SLOT.load();\\n    NUMERATOR_SLOT.store(numerator);\\n    DENOMINATOR_SLOT.store(denominator);\\n\\n    emit ThresholdUpdated(NONCE_SLOT.postIncrement(), numerator, denominator, previousNum, previousDenom);\\n  }\\n\\n  /**\\n   * @dev Internal function to get all bridge operators.\\n   * @return bridgeOperators An array containing all the registered bridge operator addresses.\\n   */\\n  function _getBridgeOperators() internal view returns (address[] memory) {\\n    return _getBridgeOperatorSet().values();\\n  }\\n\\n  /**\\n   * @dev Internal function to get all governors.\\n   * @return governors An array containing all the registered governor addresses.\\n   */\\n  function _getGovernors() internal view returns (address[] memory) {\\n    return _getGovernorsSet().values();\\n  }\\n\\n  /**\\n   * @dev Internal function to get the vote weights of a given array of governors.\\n   * @param governors An array containing the addresses of governors.\\n   * @return weights An array containing the vote weights of the corresponding governors.\\n   */\\n  function _getGovernorWeights(address[] memory governors) internal view returns (uint96[] memory weights) {\\n    uint256 length = governors.length;\\n    weights = new uint96[](length);\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n    for (uint256 i; i < length; ) {\\n      weights[i] = _governorToBridgeOperatorInfo[governors[i]].voteWeight;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to calculate the sum of vote weights for a given array of governors.\\n   * @param governors An array containing the addresses of governors to calculate the sum of vote weights.\\n   * @return sum The total sum of vote weights for the provided governors.\\n   * @notice The input array `governors` must contain unique addresses to avoid duplicate calculations.\\n   */\\n  function _sumGovernorsWeight(address[] memory governors) internal view nonDuplicate(governors) returns (uint256 sum) {\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n\\n    for (uint256 i; i < governors.length; ) {\\n      sum += _governorToBridgeOperatorInfo[governors[i]].voteWeight;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the caller has governor role access.\\n   * @param addr The address to check for governor role access.\\n   * @dev If the address does not have governor role access (vote weight is zero), a revert with the corresponding error message is triggered.\\n   */\\n  function _requireGovernor(address addr) internal view {\\n    if (_getGovernorWeight(addr) == 0) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.GOVERNOR);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function _getGovernorWeight(address governor) internal view returns (uint96) {\\n    return _getGovernorToBridgeOperatorInfo()[governor].voteWeight;\\n  }\\n\\n  /**\\n   * @dev Internal function to access the address set of bridge operators.\\n   * @return bridgeOperators the storage address set.\\n   */\\n  function _getBridgeOperatorSet() internal pure returns (EnumerableSet.AddressSet storage bridgeOperators) {\\n    assembly (\\\"memory-safe\\\") {\\n      bridgeOperators.slot := BRIDGE_OPERATOR_SET_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to access the address set of bridge operators.\\n   * @return governors the storage address set.\\n   */\\n  function _getGovernorsSet() internal pure returns (EnumerableSet.AddressSet storage governors) {\\n    assembly (\\\"memory-safe\\\") {\\n      governors.slot := GOVERNOR_SET_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping from governor => BridgeOperatorInfo.\\n   * @return governorToBridgeOperatorInfo the mapping from governor => BridgeOperatorInfo.\\n   */\\n  function _getGovernorToBridgeOperatorInfo()\\n    internal\\n    pure\\n    returns (mapping(address => BridgeOperatorInfo) storage governorToBridgeOperatorInfo)\\n  {\\n    assembly (\\\"memory-safe\\\") {\\n      governorToBridgeOperatorInfo.slot := GOVERNOR_TO_BRIDGE_OPERATOR_INFO_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping from bridge operator => governor.\\n   * @return governorOf the mapping from bridge operator => governor.\\n   */\\n  function _getGovernorOf() internal pure returns (mapping(address => address) storage governorOf) {\\n    assembly (\\\"memory-safe\\\") {\\n      governorOf.slot := GOVENOR_OF_SLOT\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/bridge-operator-governance/BridgeManagerCallbackRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IBridgeManagerCallbackRegister } from \\\"../../interfaces/bridge/IBridgeManagerCallbackRegister.sol\\\";\\nimport { IBridgeManagerCallback } from \\\"../../interfaces/bridge/IBridgeManagerCallback.sol\\\";\\nimport { TransparentUpgradeableProxyV2, IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\n\\n/**\\n * @title BridgeManagerCallbackRegister\\n * @dev A contract that manages callback registrations and execution for a bridge.\\n */\\nabstract contract BridgeManagerCallbackRegister is IdentityGuard, IBridgeManagerCallbackRegister {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /**\\n   * @dev Storage slot for the address set of callback registers.\\n   * @dev Value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.callbackRegisters.slot\\\") - 1.\\n   */\\n  bytes32 private constant CALLBACK_REGISTERS_SLOT = 0x5da136eb38f8d8e354915fc8a767c0dc81d49de5fb65d5477122a82ddd976240;\\n\\n  constructor(address[] memory callbackRegisters) payable {\\n    _registerCallbacks(callbackRegisters);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallbackRegister\\n   */\\n  function registerCallbacks(address[] calldata registers) external onlySelfCall returns (bool[] memory registereds) {\\n    registereds = _registerCallbacks(registers);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallbackRegister\\n   */\\n  function unregisterCallbacks(\\n    address[] calldata registers\\n  ) external onlySelfCall returns (bool[] memory unregistereds) {\\n    unregistereds = _unregisterCallbacks(registers);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallbackRegister\\n   */\\n  function getCallbackRegisters() external view returns (address[] memory registers) {\\n    registers = _getCallbackRegisters().values();\\n  }\\n\\n  /**\\n   * @dev Internal function to register multiple callbacks with the bridge.\\n   * @param registers The array of callback addresses to register.\\n   * @return registereds An array indicating the success status of each registration.\\n   */\\n  function _registerCallbacks(\\n    address[] memory registers\\n  ) internal nonDuplicate(registers) returns (bool[] memory registereds) {\\n    uint256 length = registers.length;\\n    registereds = new bool[](length);\\n    if (length == 0) return registereds;\\n\\n    EnumerableSet.AddressSet storage _callbackRegisters = _getCallbackRegisters();\\n    address register;\\n    bytes4 callbackInterface = type(IBridgeManagerCallback).interfaceId;\\n\\n    for (uint256 i; i < length; ) {\\n      register = registers[i];\\n\\n      _requireHasCode(register);\\n      _requireSupportsInterface(register, callbackInterface);\\n\\n      registereds[i] = _callbackRegisters.add(register);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to unregister multiple callbacks from the bridge.\\n   * @param registers The array of callback addresses to unregister.\\n   * @return unregistereds An array indicating the success status of each unregistration.\\n   */\\n  function _unregisterCallbacks(\\n    address[] memory registers\\n  ) internal nonDuplicate(registers) returns (bool[] memory unregistereds) {\\n    uint256 length = registers.length;\\n    unregistereds = new bool[](length);\\n    EnumerableSet.AddressSet storage _callbackRegisters = _getCallbackRegisters();\\n\\n    for (uint256 i; i < length; ) {\\n      unregistereds[i] = _callbackRegisters.remove(registers[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to notify all registered callbacks with the provided function signature and data.\\n   * @param callbackFnSig The function signature of the callback method.\\n   * @param inputs The data to pass to the callback method.\\n   */\\n  function _notifyRegisters(bytes4 callbackFnSig, bytes memory inputs) internal {\\n    address[] memory registers = _getCallbackRegisters().values();\\n    uint256 length = registers.length;\\n    if (length == 0) return;\\n\\n    bool[] memory successes = new bool[](length);\\n    bytes[] memory returnDatas = new bytes[](length);\\n    bytes memory callData = abi.encodePacked(callbackFnSig, inputs);\\n    bytes memory proxyCallData = abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (callData));\\n\\n    for (uint256 i; i < length; ) {\\n      (successes[i], returnDatas[i]) = registers[i].call(callData);\\n      if (!successes[i]) {\\n        (successes[i], returnDatas[i]) = registers[i].call(proxyCallData);\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit Notified(callData, registers, successes, returnDatas);\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the address set of callback registers.\\n   * @return callbackRegisters The storage reference to the callback registers.\\n   */\\n  function _getCallbackRegisters() internal pure returns (EnumerableSet.AddressSet storage callbackRegisters) {\\n    assembly (\\\"memory-safe\\\") {\\n      callbackRegisters.slot := CALLBACK_REGISTERS_SLOT\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/collections/HasContracts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/collections/HasProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/sequential-governance/CoreGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/ChainTypeConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer, ChainTypeConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n\\n  /**\\n   * @dev Error thrown when attempting to interact with a finalized vote.\\n   */\\n  error ErrVoteIsFinalized();\\n\\n  /**\\n   * @dev Error thrown when the current proposal is not completed.\\n   */\\n  error ErrCurrentProposalIsNotCompleted();\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    address[] forVoteds; // Array of addresses voting for\\n    address[] againstVoteds; // Array of addresses voting against\\n    uint256 expiryTimestamp;\\n    mapping(address => Signature) sig;\\n    mapping(address => bool) voted;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is expired\\n  event ProposalExpired(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n  /// @dev Emitted when the proposal expiry duration is changed.\\n  event ProposalExpiryDurationChanged(uint256 indexed duration);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  uint256 internal _proposalExpiryDuration;\\n\\n  constructor(uint256 _expiryDuration) {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Creates new voting round by calculating the `_round` number of chain `_chainId`.\\n   * Increases the `_round` number if the previous one is not expired. Delete the previous proposal\\n   * if it is expired and not increase the `_round`.\\n   */\\n  function _createVotingRound(uint256 _chainId) internal returns (uint256 _round) {\\n    _round = round[_chainId];\\n    // Skip checking for the first ever round\\n    if (_round == 0) {\\n      _round = round[_chainId] = 1;\\n    } else {\\n      ProposalVote storage _latestProposalVote = vote[_chainId][_round];\\n      bool _isExpired = _tryDeleteExpiredVotingRound(_latestProposalVote);\\n      // Skip increasing round number if the latest round is expired, allow the vote to be overridden\\n      if (!_isExpired) {\\n        if (_latestProposalVote.status == VoteStatus.Pending) revert ErrCurrentProposalIsNotCompleted();\\n        unchecked {\\n          _round = ++round[_chainId];\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Saves new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _saveVotingRound(ProposalVote storage _vote, bytes32 _proposalHash, uint256 _expiryTimestamp) internal {\\n    _vote.hash = _proposalHash;\\n    _vote.expiryTimestamp = _expiryTimestamp;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 chainId,\\n    uint256 expiryTimestamp,\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    uint256[] memory gasAmounts,\\n    address creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory proposal) {\\n    if (chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    uint256 round_ = _createVotingRound(chainId);\\n\\n    proposal = Proposal.ProposalDetail(round_, chainId, expiryTimestamp, targets, values, calldatas, gasAmounts);\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    _saveVotingRound(vote[chainId][round_], proposalHash, expiryTimestamp);\\n    emit ProposalCreated(chainId, round_, proposalHash, proposal, creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(\\n    Proposal.ProposalDetail memory proposal,\\n    address creator\\n  ) internal virtual returns (uint256 round_) {\\n    uint256 chainId = proposal.chainId;\\n    if (chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    round_ = _createVotingRound(chainId);\\n    _saveVotingRound(vote[chainId][round_], proposalHash, proposal.expiryTimestamp);\\n    if (round_ != proposal.nonce) revert ErrInvalidProposalNonce(msg.sig);\\n    emit ProposalCreated(chainId, round_, proposalHash, proposal, creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory proposal,\\n    Ballot.VoteType support,\\n    uint256 minimumForVoteWeight,\\n    uint256 minimumAgainstVoteWeight,\\n    address voter,\\n    Signature memory signature,\\n    uint256 voterWeight\\n  ) internal virtual returns (bool done) {\\n    uint256 chainId = proposal.chainId;\\n    uint256 round_ = proposal.nonce;\\n    ProposalVote storage _vote = vote[chainId][round_];\\n\\n    if (_tryDeleteExpiredVotingRound(_vote)) {\\n      return true;\\n    }\\n\\n    if (round[proposal.chainId] != round_) revert ErrInvalidProposalNonce(msg.sig);\\n    if (_vote.status != VoteStatus.Pending) revert ErrVoteIsFinalized();\\n    if (_voted(_vote, voter)) revert ErrAlreadyVoted(voter);\\n\\n    _vote.voted[voter] = true;\\n    // Stores the signature if it is not empty\\n    if (signature.r > 0 || signature.s > 0 || signature.v > 0) {\\n      _vote.sig[voter] = signature;\\n    }\\n    emit ProposalVoted(_vote.hash, voter, support, voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (support == Ballot.VoteType.For) {\\n      _vote.forVoteds.push(voter);\\n      _forVoteWeight = _vote.forVoteWeight += voterWeight;\\n    } else if (support == Ballot.VoteType.Against) {\\n      _vote.againstVoteds.push(voter);\\n      _againstVoteWeight = _vote.againstVoteWeight += voterWeight;\\n    } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n    if (_forVoteWeight >= minimumForVoteWeight) {\\n      done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, proposal);\\n    } else if (_againstVoteWeight >= minimumAgainstVoteWeight) {\\n      done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev When the contract is on Ronin chain, checks whether the proposal is expired and delete it if is expired.\\n   *\\n   * Emits the event `ProposalExpired` if the vote is expired.\\n   *\\n   * Note: This function assumes the vote `_proposalVote` is already created, consider verifying the vote's existence\\n   * before or it will emit an unexpected event of `ProposalExpired`.\\n   */\\n  function _tryDeleteExpiredVotingRound(ProposalVote storage proposalVote) internal returns (bool isExpired) {\\n    isExpired =\\n      _getChainType() == ChainType.RoninChain &&\\n      proposalVote.status == VoteStatus.Pending &&\\n      proposalVote.expiryTimestamp <= block.timestamp;\\n\\n    if (isExpired) {\\n      emit ProposalExpired(proposalVote.hash);\\n\\n      for (uint256 _i; _i < proposalVote.forVoteds.length; ) {\\n        delete proposalVote.voted[proposalVote.forVoteds[_i]];\\n        delete proposalVote.sig[proposalVote.forVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      for (uint256 _i; _i < proposalVote.againstVoteds.length; ) {\\n        delete proposalVote.voted[proposalVote.againstVoteds[_i]];\\n        delete proposalVote.sig[proposalVote.againstVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      delete proposalVote.status;\\n      delete proposalVote.hash;\\n      delete proposalVote.againstVoteWeight;\\n      delete proposalVote.forVoteWeight;\\n      delete proposalVote.forVoteds;\\n      delete proposalVote.againstVoteds;\\n      delete proposalVote.expiryTimestamp;\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage vote_, Proposal.ProposalDetail memory proposal) internal {\\n    if (proposal.executable()) {\\n      vote_.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = proposal.execute();\\n      emit ProposalExecuted(vote_.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   */\\n  function _setProposalExpiryDuration(uint256 expiryDuration) internal {\\n    _proposalExpiryDuration = expiryDuration;\\n    emit ProposalExpiryDurationChanged(expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function _getProposalExpiryDuration() internal view returns (uint256) {\\n    return _proposalExpiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(ProposalVote storage vote_, address voter) internal view returns (bool) {\\n    return vote_.voted[voter];\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns current context is running on whether Ronin chain or on mainchain.\\n   */\\n  function _getChainType() internal view virtual returns (ChainType);\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/sequential-governance/GlobalCoreGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GlobalCoreGovernance is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  mapping(GlobalProposal.TargetOption => address) internal _targetOptionsMap;\\n\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n\\n  /// @dev Emitted when the target options are updated\\n  event TargetOptionUpdated(GlobalProposal.TargetOption indexed targetOption, address indexed addr);\\n\\n  constructor(GlobalProposal.TargetOption[] memory targetOptions, address[] memory addrs) {\\n    _updateTargetOption(GlobalProposal.TargetOption.BridgeManager, address(this));\\n    _updateManyTargetOption(targetOptions, addrs);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    uint256 expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata targetOptions,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    uint256[] memory gasAmounts,\\n    address creator\\n  ) internal virtual {\\n    uint256 round_ = _createVotingRound(0);\\n    GlobalProposal.GlobalProposalDetail memory globalProposal = GlobalProposal.GlobalProposalDetail(\\n      round_,\\n      expiryTimestamp,\\n      targetOptions,\\n      values,\\n      calldatas,\\n      gasAmounts\\n    );\\n    Proposal.ProposalDetail memory proposal = globalProposal.intoProposalDetail(\\n      _resolveTargets({ targetOptions: targetOptions, strict: true })\\n    );\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    _saveVotingRound(vote[0][round_], proposalHash, expiryTimestamp);\\n    emit GlobalProposalCreated(round_, proposalHash, proposal, globalProposal.hash(), globalProposal, creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory globalProposal,\\n    address creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory proposal) {\\n    proposal = globalProposal.intoProposalDetail(\\n      _resolveTargets({ targetOptions: globalProposal.targetOptions, strict: true })\\n    );\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    uint256 round_ = _createVotingRound(0);\\n    _saveVotingRound(vote[0][round_], proposalHash, globalProposal.expiryTimestamp);\\n\\n    if (round_ != proposal.nonce) revert ErrInvalidProposalNonce(msg.sig);\\n    emit GlobalProposalCreated(round_, proposalHash, proposal, globalProposal.hash(), globalProposal, creator);\\n  }\\n\\n  /**\\n   * @dev Returns corresponding address of target options. Return address(0) on non-existent target.\\n   */\\n  function resolveTargets(\\n    GlobalProposal.TargetOption[] calldata targetOptions\\n  ) external view returns (address[] memory targets) {\\n    return _resolveTargets({ targetOptions: targetOptions, strict: false });\\n  }\\n\\n  /**\\n   * @dev Internal helper of {resolveTargets}.\\n   *\\n   * @param strict When the param is set to `true`, revert on non-existent target.\\n   */\\n  function _resolveTargets(\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    bool strict\\n  ) internal view returns (address[] memory targets) {\\n    targets = new address[](targetOptions.length);\\n\\n    for (uint256 i; i < targetOptions.length; ) {\\n      targets[i] = _targetOptionsMap[targetOptions[i]];\\n      if (strict && targets[i] == address(0)) revert ErrInvalidArguments(msg.sig);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates list of `targetOptions` to `targets`.\\n   *\\n   * Requirement:\\n   * - Only allow self-call through proposal.\\n   * */\\n  function updateManyTargetOption(\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    address[] memory targets\\n  ) external {\\n    // HACK: Cannot reuse the existing library due to too deep stack\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n    _updateManyTargetOption(targetOptions, targets);\\n  }\\n\\n  /**\\n   * @dev Updates list of `targetOptions` to `targets`.\\n   */\\n  function _updateManyTargetOption(\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    address[] memory targets\\n  ) internal {\\n    for (uint256 i; i < targetOptions.length; ) {\\n      if (targets[i] == address(this)) revert ErrInvalidArguments(msg.sig);\\n      _updateTargetOption(targetOptions[i], targets[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates `targetOption` to `target`.\\n   *\\n   * Requirement:\\n   * - Emit a `TargetOptionUpdated` event.\\n   */\\n  function _updateTargetOption(GlobalProposal.TargetOption targetOption, address target) internal {\\n    _targetOptionsMap[targetOption] = target;\\n    emit TargetOptionUpdated(targetOption, target);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/sequential-governance/governance-relay/CommonGovernanceRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../CoreGovernance.sol\\\";\\n\\nabstract contract CommonGovernanceRelay is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Relays votes by signatures.\\n   *\\n   * @notice Does not store the voter signature into storage.\\n   *\\n   */\\n  function _relayVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    if (!(_supports.length > 0 && _supports.length == _signatures.length)) revert ErrLengthMismatch(msg.sig);\\n\\n    uint256 _forVoteCount;\\n    uint256 _againstVoteCount;\\n    address[] memory _forVoteSigners = new address[](_signatures.length);\\n    address[] memory _againstVoteSigners = new address[](_signatures.length);\\n\\n    {\\n      address _signer;\\n      address _lastSigner;\\n      Ballot.VoteType _support;\\n      Signature calldata _sig;\\n\\n      for (uint256 _i; _i < _signatures.length; ) {\\n        _sig = _signatures[_i];\\n        _support = _supports[_i];\\n\\n        if (_support == Ballot.VoteType.For) {\\n          _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n          _forVoteSigners[_forVoteCount++] = _signer;\\n        } else if (_support == Ballot.VoteType.Against) {\\n          _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n          _againstVoteSigners[_againstVoteCount++] = _signer;\\n        } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n        if (_lastSigner >= _signer) revert ErrInvalidOrder(msg.sig);\\n        _lastSigner = _signer;\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_forVoteSigners, _forVoteCount)\\n      mstore(_againstVoteSigners, _againstVoteCount)\\n    }\\n\\n    ProposalVote storage _vote = vote[_proposal.chainId][_proposal.nonce];\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _totalForVoteWeight = _sumWeight(_forVoteSigners);\\n    if (_totalForVoteWeight >= _minimumForVoteWeight) {\\n      if (_totalForVoteWeight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n      return;\\n    }\\n\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeight() - _minimumForVoteWeight + 1;\\n    uint256 _totalAgainstVoteWeight = _sumWeight(_againstVoteSigners);\\n    if (_totalAgainstVoteWeight >= _minimumAgainstVoteWeight) {\\n      if (_totalAgainstVoteWeight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n      return;\\n    }\\n\\n    revert ErrRelayFailed(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Returns the weight of the governor list.\\n   */\\n  function _sumWeight(address[] memory _governors) internal view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/sequential-governance/governance-relay/GlobalGovernanceRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GlobalCoreGovernance.sol\\\";\\nimport \\\"./CommonGovernanceRelay.sol\\\";\\n\\nabstract contract GlobalGovernanceRelay is CommonGovernanceRelay, GlobalCoreGovernance {\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for the proposal.\\n   */\\n  function globalProposalRelayed(uint256 _round) external view returns (bool) {\\n    return vote[0][_round].status != VoteStatus.Pending;\\n  }\\n\\n  /**\\n   * @dev Relays voted global proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata globalProposal,\\n    Ballot.VoteType[] calldata supports_,\\n    Signature[] calldata signatures,\\n    bytes32 domainSeparator,\\n    address creator\\n  ) internal {\\n    Proposal.ProposalDetail memory _proposal = _proposeGlobalStruct(globalProposal, creator);\\n    bytes32 globalProposalHash = globalProposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      supports_,\\n      signatures,\\n      ECDSA.toTypedDataHash(domainSeparator, Ballot.hash(globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(domainSeparator, Ballot.hash(globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/sequential-governance/governance-relay/GovernanceRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../CoreGovernance.sol\\\";\\nimport \\\"./CommonGovernanceRelay.sol\\\";\\n\\nabstract contract GovernanceRelay is CoreGovernance, CommonGovernanceRelay {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Relays voted proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayProposal(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuorum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IBridgeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerEvents } from \\\"./events/IBridgeManagerEvents.sol\\\";\\n\\n/**\\n * @title IBridgeManager\\n * @dev The interface for managing bridge operators.\\n */\\ninterface IBridgeManager is IBridgeManagerEvents {\\n  /**\\n   * @dev The domain separator used for computing hash digests in the contract.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns the total number of bridge operators.\\n   * @return The total number of bridge operators.\\n   */\\n  function totalBridgeOperator() external view returns (uint256);\\n\\n  /**\\n   * @dev Checks if the given address is a bridge operator.\\n   * @param addr The address to check.\\n   * @return A boolean indicating whether the address is a bridge operator.\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Retrieves the full information of all registered bridge operators.\\n   *\\n   * This external function allows external callers to obtain the full information of all the registered bridge operators.\\n   * The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.\\n   *\\n   * @return governors An array of addresses representing the governors of each bridge operator.\\n   * @return bridgeOperators An array of addresses representing the registered bridge operators.\\n   * @return weights An array of uint256 values representing the vote weights of each bridge operator.\\n   *\\n   * Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator.\\n   *\\n   * Example Usage:\\n   * ```\\n   * (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos();\\n   * for (uint256 i = 0; i < bridgeOperators.length; i++) {\\n   *     // Access individual information for each bridge operator.\\n   *     address governor = governors[i];\\n   *     address bridgeOperator = bridgeOperators[i];\\n   *     uint256 weight = weights[i];\\n   *     // ... (Process or use the information as required) ...\\n   * }\\n   * ```\\n   *\\n   */\\n  function getFullBridgeOperatorInfos()\\n    external\\n    view\\n    returns (address[] memory governors, address[] memory bridgeOperators, uint96[] memory weights);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorsWeight(address[] calldata governors) external view returns (uint256 sum);\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function getTotalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns an array of all bridge operators.\\n   * @return An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns an array of bridge operators correspoding to governor addresses.\\n   * @return bridgeOperators_ An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperatorOf(address[] calldata gorvernors) external view returns (address[] memory bridgeOperators_);\\n\\n  /**\\n   * @dev Retrieves the governors corresponding to a given array of bridge operators.\\n   * This external function allows external callers to obtain the governors associated with a given array of bridge operators.\\n   * The function takes an input array `bridgeOperators` containing bridge operator addresses and returns an array of corresponding governors.\\n   * @param bridgeOperators An array of bridge operator addresses for which governors are to be retrieved.\\n   * @return governors An array of addresses representing the governors corresponding to the provided bridge operators.\\n   */\\n  function getGovernorsOf(address[] calldata bridgeOperators) external view returns (address[] memory governors);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint96);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific bridge operator.\\n   * @param bridgeOperator The address of the bridge operator to get the vote weight for.\\n   * @return weight The vote weight of the specified bridge operator.\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint96 weight);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint96[] memory weights);\\n\\n  /**\\n   * @dev Returns an array of all governors.\\n   * @return An array containing the addresses of all governors.\\n   */\\n  function getGovernors() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Adds multiple bridge operators.\\n   * @param governors An array of addresses of hot/cold wallets for bridge operator to update their node address.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to add.\\n   * @return addeds An array of booleans indicating whether each bridge operator was added successfully.\\n   *\\n   * Note: return boolean array `addeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {addeds} = await bridgeManagerContract.callStatic.addBridgeOperators(\\n   *  voteWeights,\\n   *  governors,\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => addeds[index]);\\n   * const filteredWeights = weights.filter((_, index) => addeds[index]);\\n   * const filteredGovernors = governors.filter((_, index) => addeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function addBridgeOperators(\\n    uint96[] calldata voteWeights,\\n    address[] calldata governors,\\n    address[] calldata bridgeOperators\\n  ) external returns (bool[] memory addeds);\\n\\n  /**\\n   * @dev Removes multiple bridge operators.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to remove.\\n   * @return removeds An array of booleans indicating whether each bridge operator was removed successfully.\\n   *\\n   * * Note: return boolean array `removeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {removeds} = await bridgeManagerContract.callStatic.removeBridgeOperators(\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => removeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function removeBridgeOperators(address[] calldata bridgeOperators) external returns (bool[] memory removeds);\\n\\n  /**\\n   * @dev Governor updates their corresponding governor and/or operator address.\\n   * Requirements:\\n   * - The caller must the governor of the operator that is requested changes.\\n   * @param bridgeOperator The address of the bridge operator to update.\\n   */\\n  function updateBridgeOperator(address bridgeOperator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IBridgeManagerCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IBridgeManagerCallback\\n * @dev Interface for the callback functions to be implemented by the Bridge Manager contract.\\n */\\ninterface IBridgeManagerCallback is IERC165 {\\n  /**\\n   * @dev Handles the event when bridge operators are added.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param addeds The corresponding boolean values indicating whether the operators were added or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsAdded(\\n    address[] memory bridgeOperators,\\n    bool[] memory addeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when bridge operators are removed.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param removeds The corresponding boolean values indicating whether the operators were removed or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsRemoved(\\n    address[] memory bridgeOperators,\\n    bool[] memory removeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when a bridge operator is updated.\\n   * @param currentBridgeOperator The address of the current bridge operator.\\n   * @param newbridgeOperator The new address of the bridge operator.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorUpdated(\\n    address currentBridgeOperator,\\n    address newbridgeOperator\\n  ) external returns (bytes4 selector);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IBridgeManagerCallbackRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerCallbackRegister {\\n  /**\\n   * @dev Emitted when the contract notifies multiple registers with statuses and return data.\\n   */\\n  event Notified(bytes callData, address[] registers, bool[] statuses, bytes[] returnDatas);\\n\\n  /**\\n   * @dev Retrieves the addresses of registered callbacks.\\n   * @return registers An array containing the addresses of registered callbacks.\\n   */\\n  function getCallbackRegisters() external view returns (address[] memory registers);\\n\\n  /**\\n   * @dev Registers multiple callbacks with the bridge.\\n   * @param registers The array of callback addresses to register.\\n   * @return registereds An array indicating the success status of each registration.\\n   */\\n  function registerCallbacks(address[] calldata registers) external returns (bool[] memory registereds);\\n\\n  /**\\n   * @dev Unregisters multiple callbacks from the bridge.\\n   * @param registers The array of callback addresses to unregister.\\n   * @return unregistereds An array indicating the success status of each unregistration.\\n   */\\n  function unregisterCallbacks(address[] calldata registers) external returns (bool[] memory unregistereds);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/events/IBridgeManagerEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerEvents {\\n  /**\\n   * @dev The structure representing information about a bridge operator.\\n   * @param addr The address of the bridge operator.\\n   * @param voteWeight The vote weight assigned to the bridge operator.\\n   */\\n  struct BridgeOperatorInfo {\\n    address addr;\\n    uint96 voteWeight;\\n  }\\n\\n  /**\\n   * @dev Emitted when new bridge operators are added.\\n   * @param statuses The array of boolean values represents whether the corresponding bridge operator is added successfully.\\n   * @param voteWeights The array of vote weights assigned to the added bridge operators.\\n   * @param governors The array of addresses representing the governors associated with the added bridge operators.\\n   * @param bridgeOperators The array of addresses representing the added bridge operators.\\n   */\\n  event BridgeOperatorsAdded(bool[] statuses, uint96[] voteWeights, address[] governors, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when bridge operators are removed.\\n   * @param statuses The array of boolean values representing the statuses of the removed bridge operators.\\n   * @param bridgeOperators The array of addresses representing the removed bridge operators.\\n   */\\n  event BridgeOperatorsRemoved(bool[] statuses, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is updated.\\n   * @param governor The address of the governor initiating the update.\\n   * @param fromBridgeOperator The address of the bridge operator being updated.\\n   * @param toBridgeOperator The updated address of the bridge operator.\\n   */\\n  event BridgeOperatorUpdated(\\n    address indexed governor,\\n    address indexed fromBridgeOperator,\\n    address indexed toBridgeOperator\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/collections/IHasContracts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/consumers/ChainTypeConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainTypeConsumer {\\n  enum ChainType {\\n    RoninChain,\\n    Mainchain\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/consumers/SignatureConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/consumers/VoteStatusConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AddressArrayUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Ballot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 private constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32 digest) {\\n    // return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, BALLOT_TYPEHASH)\\n      mstore(add(ptr, 0x20), _proposalHash)\\n      mstore(add(ptr, 0x40), _support)\\n      digest := keccak256(ptr, 0x60)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/GlobalProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  /**\\n   * @dev Error thrown when attempting to interact with an unsupported target.\\n   */\\n  error ErrUnsupportedTarget(bytes32 proposalHash, uint256 targetNumber);\\n\\n  enum TargetOption {\\n    /* 0 */ BridgeManager,\\n    /* 1 */ GatewayContract,\\n    /* 2 */ BridgeReward,\\n    /* 3 */ BridgeSlash,\\n    /* 4 */ BridgeTracking\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    uint256 expiryTimestamp;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint256 expiryTimestamp,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory self) internal pure returns (bytes32 digest_) {\\n    uint256[] memory values = self.values;\\n    TargetOption[] memory targets = self.targetOptions;\\n    bytes32[] memory calldataHashList = new bytes32[](self.calldatas.length);\\n    uint256[] memory gasAmounts = self.gasAmounts;\\n\\n    for (uint256 i; i < calldataHashList.length; ) {\\n      calldataHashList[i] = keccak256(self.calldatas[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       TYPE_HASH,\\n     *       _proposal.nonce,\\n     *       _proposal.expiryTimestamp,\\n     *       _targetsHash,\\n     *       _valuesHash,\\n     *       _calldatasHash,\\n     *       _gasAmountsHash\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(self)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(self, 0x20))) // _proposal.expiryTimestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(targets, 32), mul(mload(targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x60), arrayHashed)\\n      arrayHashed := keccak256(add(values, 32), mul(mload(values), 32)) // _valuesHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(calldataHashList, 32), mul(mload(calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(gasAmounts, 32), mul(mload(gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      digest_ := keccak256(ptr, 0xe0)\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function intoProposalDetail(\\n    GlobalProposalDetail memory self,\\n    address[] memory targets\\n  ) internal pure returns (Proposal.ProposalDetail memory detail_) {\\n    detail_.nonce = self.nonce;\\n    detail_.expiryTimestamp = self.expiryTimestamp;\\n    detail_.chainId = 0;\\n    detail_.targets = new address[](self.targetOptions.length);\\n    detail_.values = self.values;\\n    detail_.calldatas = self.calldatas;\\n    detail_.gasAmounts = self.gasAmounts;\\n\\n    for (uint256 i; i < self.targetOptions.length; ) {\\n      detail_.targets[i] = targets[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Proposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ErrInvalidChainId, ErrLengthMismatch } from \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary Proposal {\\n  /**\\n   * @dev Error thrown when there is insufficient gas to execute a function.\\n   */\\n  error ErrInsufficientGas(bytes32 proposalHash);\\n\\n  /**\\n   * @dev Error thrown when an invalid expiry timestamp is provided.\\n   */\\n  error ErrInvalidExpiryTimestamp();\\n\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    uint256 expiryTimestamp;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,uint256 expiryTimestamp,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal, uint256 _maxExpiryDuration) internal view {\\n    if (\\n      !(_proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length)\\n    ) {\\n      revert ErrLengthMismatch(msg.sig);\\n    }\\n\\n    if (_proposal.expiryTimestamp > block.timestamp + _maxExpiryDuration) {\\n      revert ErrInvalidExpiryTimestamp();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32 digest_) {\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; ) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // return\\n    //   keccak256(\\n    //     abi.encode(\\n    //       TYPE_HASH,\\n    //       _proposal.nonce,\\n    //       _proposal.chainId,\\n    //       _targetsHash,\\n    //       _valuesHash,\\n    //       _calldatasHash,\\n    //       _gasAmountsHash\\n    //     )\\n    //   );\\n    // /\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_proposal)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(_proposal, 0x20))) // _proposal.chainId\\n      mstore(add(ptr, 0x60), mload(add(_proposal, 0x40))) // expiry timestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(_targets, 32), mul(mload(_targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(_values, 32), mul(mload(_values), 32)) // _valuesHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      arrayHashed := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xe0), arrayHashed)\\n      digest_ := keccak256(ptr, 0x100)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(\\n    ProposalDetail memory _proposal\\n  ) internal returns (bool[] memory _successCalls, bytes[] memory _returnDatas) {\\n    if (!executable(_proposal)) revert ErrInvalidChainId(msg.sig, _proposal.chainId, block.chainid);\\n\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ) {\\n      if (gasleft() <= _proposal.gasAmounts[_i]) revert ErrInsufficientGas(hash(_proposal));\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mainchain/MainchainBridgeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { CoreGovernance } from \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport { GlobalCoreGovernance, GlobalGovernanceRelay } from \\\"../extensions/sequential-governance/governance-relay/GlobalGovernanceRelay.sol\\\";\\nimport { GovernanceRelay } from \\\"../extensions/sequential-governance/governance-relay/GovernanceRelay.sol\\\";\\nimport { ContractType, BridgeManager } from \\\"../extensions/bridge-operator-governance/BridgeManager.sol\\\";\\nimport { Ballot } from \\\"../libraries/Ballot.sol\\\";\\nimport { Proposal } from \\\"../libraries/Proposal.sol\\\";\\nimport { GlobalProposal } from \\\"../libraries/GlobalProposal.sol\\\";\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\ncontract MainchainBridgeManager is BridgeManager, GovernanceRelay, GlobalGovernanceRelay {\\n  uint256 private constant DEFAULT_EXPIRY_DURATION = 1 << 255;\\n\\n  constructor(\\n    uint256 num,\\n    uint256 denom,\\n    uint256 roninChainId,\\n    address bridgeContract,\\n    address[] memory callbackRegisters,\\n    address[] memory bridgeOperators,\\n    address[] memory governors,\\n    uint96[] memory voteWeights,\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    address[] memory targets\\n  )\\n    payable\\n    CoreGovernance(DEFAULT_EXPIRY_DURATION)\\n    GlobalCoreGovernance(targetOptions, targets)\\n    BridgeManager(num, denom, roninChainId, bridgeContract, callbackRegisters, bridgeOperators, governors, voteWeights)\\n  {}\\n\\n  /**\\n   * @dev See `GovernanceRelay-_relayProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   */\\n  function relayProposal(\\n    Proposal.ProposalDetail calldata proposal,\\n    Ballot.VoteType[] calldata supports_,\\n    Signature[] calldata signatures\\n  ) external onlyGovernor {\\n    _relayProposal(proposal, supports_, signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceRelay-_relayGlobalProposal`.\\n   *\\n   *  Requirements:\\n   * - The method caller is governor.\\n   */\\n  function relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata globalProposal,\\n    Ballot.VoteType[] calldata supports_,\\n    Signature[] calldata signatures\\n  ) external onlyGovernor {\\n    _relayGlobalProposal({\\n      globalProposal: globalProposal,\\n      supports_: supports_,\\n      signatures: signatures,\\n      domainSeparator: DOMAIN_SEPARATOR,\\n      creator: msg.sender\\n    });\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the minimum vote weight required for governance actions.\\n   * @return minimumVoteWeight The minimum vote weight required for governance actions.\\n   */\\n  function _getMinimumVoteWeight() internal view override returns (uint256) {\\n    return minimumVoteWeight();\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function getProposalExpiryDuration() external view returns (uint256) {\\n    return _getProposalExpiryDuration();\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the total weights of all governors.\\n   * @return totalWeights The total weights of all governors combined.\\n   */\\n  function _getTotalWeight() internal view override returns (uint256) {\\n    return getTotalWeight();\\n  }\\n\\n  /**\\n   * @dev Internal function to calculate the sum of weights for a given array of governors.\\n   * @param governors An array containing the addresses of governors to calculate the sum of weights.\\n   * @return sumWeights The sum of weights for the provided governors.\\n   */\\n  function _sumWeight(address[] memory governors) internal view override returns (uint256) {\\n    return _sumGovernorsWeight(governors);\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the chain type of the contract.\\n   * @return chainType The chain type, indicating the type of the chain the contract operates on (e.g., Mainchain).\\n   */\\n  function _getChainType() internal pure override returns (ChainType) {\\n    return ChainType.Mainchain;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/types/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { LibTUint256Slot } from \\\"./operations/LibTUint256Slot.sol\\\";\\n\\ntype TUint256Slot is bytes32;\\n\\nusing {\\n  LibTUint256Slot.add,\\n  LibTUint256Slot.sub,\\n  LibTUint256Slot.mul,\\n  LibTUint256Slot.div,\\n  LibTUint256Slot.load,\\n  LibTUint256Slot.store,\\n  LibTUint256Slot.addAssign,\\n  LibTUint256Slot.subAssign,\\n  LibTUint256Slot.preDecrement,\\n  LibTUint256Slot.postDecrement,\\n  LibTUint256Slot.preIncrement,\\n  LibTUint256Slot.postIncrement\\n} for TUint256Slot global;\\n\"\r\n    },\r\n    \"contracts/types/operations/LibTUint256Slot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { TUint256Slot } from \\\"../Types.sol\\\";\\n\\n/**\\n * @title LibTUint256Slot\\n * @dev Library for handling unsigned 256-bit integers.\\n */\\nlibrary LibTUint256Slot {\\n  /// @dev value is equal to bytes4(keccak256(\\\"Panic(uint256)\\\"))\\n  /// @dev see: https://github.com/foundry-rs/forge-std/blob/master/src/StdError.sol\\n  uint256 private constant PANIC_ERROR_SIGNATURE = 0x4e487b71;\\n  /// @dev error code for {Arithmetic over/underflow} error\\n  uint256 private constant ARITHMETIC_ERROR_CODE = 0x11;\\n  /// @dev error code for {Division or modulo by 0} error\\n  uint256 private constant DIVISION_ERROR_CODE = 0x12;\\n\\n  /**\\n   * @dev Loads the value of the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @return val The loaded value.\\n   */\\n  function load(TUint256Slot self) internal view returns (uint256 val) {\\n    assembly {\\n      val := sload(self)\\n    }\\n  }\\n\\n  /**\\n   * @dev Stores a value into the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to be stored.\\n   */\\n  function store(TUint256Slot self, uint256 other) internal {\\n    assembly {\\n      sstore(self, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Multiplies the TUint256Slot variable by a given value.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to multiply by.\\n   * @return res The resulting value after multiplication.\\n   */\\n  function mul(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      if iszero(iszero(storedVal)) {\\n        res := mul(storedVal, other)\\n\\n        // Overflow check\\n        if iszero(eq(other, div(res, storedVal))) {\\n          // Store 4 bytes the function selector of Panic(uint256)\\n          // Equivalent to revert Panic(uint256)\\n          mstore(0x00, PANIC_ERROR_SIGNATURE)\\n          // Store 4 bytes of division error code in the next slot\\n          mstore(0x20, ARITHMETIC_ERROR_CODE)\\n          // Revert 36 bytes of error starting from 0x1c\\n          revert(0x1c, 0x24)\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides the TUint256Slot variable by a given value.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to divide by.\\n   * @return res The resulting value after division.\\n   */\\n  function div(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      // revert if divide by zero\\n      if iszero(other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, DIVISION_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n      res := div(storedVal, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Subtracts a given value from the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to subtract.\\n   * @return res The resulting value after subtraction.\\n   */\\n  function sub(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n\\n      // Underflow check\\n      if lt(storedVal, other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, ARITHMETIC_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n\\n      res := sub(storedVal, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds a given value to the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to add.\\n   * @return res The resulting value after addition.\\n   */\\n  function add(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      res := add(storedVal, other)\\n\\n      // Overflow check\\n      if lt(res, other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, ARITHMETIC_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Increments the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value after incrementing.\\n   */\\n  function preIncrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = addAssign(self, 1);\\n  }\\n\\n  /**\\n   * @dev Increments the TUint256Slot variable by 1 and returns the original value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The original value before incrementing.\\n   */\\n  function postIncrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = load(self);\\n    store(self, res + 1);\\n  }\\n\\n  /**\\n   * @dev Decrements the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value after decrementing.\\n   */\\n  function preDecrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = subAssign(self, 1);\\n  }\\n\\n  /**\\n   * @dev Decrements the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value before decrementing.\\n   */\\n  function postDecrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = load(self);\\n    store(self, res - 1);\\n  }\\n\\n  /**\\n   * @dev Adds a given value to the TUint256Slot variable and stores the result.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to add.\\n   * @return res The resulting value after addition and storage.\\n   */\\n  function addAssign(TUint256Slot self, uint256 other) internal returns (uint256 res) {\\n    store(self, res = add(self, other));\\n  }\\n\\n  /**\\n   * @dev Subtracts a given value from the TUint256Slot variable and stores the result.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to subtract.\\n   * @return res The resulting value after subtraction and storage.\\n   */\\n  function subAssign(TUint256Slot self, uint256 other) internal returns (uint256 res) {\\n    store(self, res = sub(self, other));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/CommonErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\"\r\n    },\r\n    \"contracts/utils/ContractType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IdentityGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RoleAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"callbackRegisters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"voteWeights\",\"type\":\"uint96[]\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"ErrBridgeOperatorAlreadyExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"ErrBridgeOperatorUpdateFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCurrentProposalIsNotCompleted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrDuplicated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ErrInsufficientGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidArguments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidExpiryTimestamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidProposalNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidVoteWeight\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrOnlySelfCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRelayFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrUnsupportedInterface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrUnsupportedVoteType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrVoteIsFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toBridgeOperator\",\"type\":\"address\"}],\"name\":\"BridgeOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"uint96[]\",\"name\":\"voteWeights\",\"type\":\"uint96[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"Notified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ProposalExpiryDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum GlobalProposal.TargetOption\",\"name\":\"targetOption\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TargetOptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"voteWeights\",\"type\":\"uint96[]\"},{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"addBridgeOperators\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"addeds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"name\":\"getBridgeOperatorOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"getBridgeOperatorWeight\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"weight\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackRegisters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullBridgeOperatorInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"weights\",\"type\":\"uint96[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"getGovernorWeight\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"weight\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"name\":\"getGovernorWeights\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"weights\",\"type\":\"uint96[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"getGovernorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"globalProposalRelayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBridgeOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"}],\"name\":\"registerCallbacks\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"registereds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"supports_\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayGlobalProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"supports_\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"removeBridgeOperators\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"removeds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"}],\"name\":\"resolveTargets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"name\":\"sumGovernorsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgeOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"}],\"name\":\"unregisterCallbacks\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"unregistereds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBridgeOperator\",\"type\":\"address\"}],\"name\":\"updateBridgeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"updateManyTargetOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MainchainBridgeManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000007e400000000000000000000000064192819ac13ef72bf6b5ae239ac672b43a9af080000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000032015e8b982c61bc8a593816fdbf03a603eec82300000000000000000000000000000000000000000000000000000000000000010000000000000000000000003200a8eb56767c3760e108aa27c65bfff036d8e60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000064192819ac13ef72bf6b5ae239ac672b43a9af08", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}