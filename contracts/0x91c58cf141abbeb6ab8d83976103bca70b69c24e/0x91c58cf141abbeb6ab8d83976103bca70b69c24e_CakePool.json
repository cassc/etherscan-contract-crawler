{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farm/interfaces/IMasterChefV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.19;\\n\\ninterface IMasterChefV2 {\\n    function BBC() external view returns (address);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingBBC(\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    function userInfo(\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint256, uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function lpToken(uint256 _pid) external view returns (address);\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function getBoostMultiplier(\\n        address _user,\\n        uint256 _pid\\n    ) external view returns (uint256);\\n\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/pool/CakePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../farm/interfaces/IMasterChefV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CakePool is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 shares; // number of shares for a user.\\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\\n        uint256 lastUserActionAmount; // keep track of token deposited at the last user action.\\n        uint256 lastUserActionTime; // keep track of the last user action time.\\n        uint256 lockStartTime; // lock start time.\\n        uint256 lockEndTime; // lock end time.\\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\\n        bool locked; //lock status.\\n        uint256 lockedAmount; // amount deposited during lock period.\\n    }\\n\\n    IERC20 public immutable token; // staking token.\\n    IERC20 public immutable bbc; // earning token.\\n\\n    IMasterChefV2 public immutable masterchefV2;\\n\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => bool) public freePerformanceFeeUsers; // free performance fee users.\\n    mapping(address => bool) public freeWithdrawFeeUsers; // free withdraw fee users.\\n    mapping(address => bool) public freeOverdueFeeUsers; // free overdue fee users.\\n\\n    uint256 public totalShares;\\n    address public admin;\\n    address public treasury;\\n    address public operator;\\n    uint256 public bbcPoolPID;\\n    uint256 public totalBoostDebt; // total boost debt.\\n    uint256 public totalLockedAmount; // total lock amount.\\n\\n    uint256 public constant MAX_PERFORMANCE_FEE = 2000; // 20%\\n    uint256 public constant MAX_WITHDRAW_FEE = 500; // 5%\\n    uint256 public constant MAX_OVERDUE_FEE = 100 * 1e10; // 100%\\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 1 weeks; // 1 week\\n    uint256 public constant MIN_LOCK_DURATION = 1 weeks; // 1 week\\n    uint256 public constant MAX_LOCK_DURATION_LIMIT = 1000 days; // 1000 days\\n    uint256 public constant BOOST_WEIGHT_LIMIT = 5000 * 1e10; // 5000%\\n    uint256 public constant PRECISION_FACTOR = 1e12; // precision factor.\\n    uint256 public constant PRECISION_FACTOR_SHARE = 1e28; // precision factor for share.\\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 0.00001 ether;\\n    uint256 public constant MIN_WITHDRAW_AMOUNT = 0.00001 ether;\\n    uint256 public UNLOCK_FREE_DURATION = 2 weeks; // 2 week\\n    uint256 public MAX_LOCK_DURATION = 365 days; // 365 days\\n    uint256 public DURATION_FACTOR = 365 days; // 365 days, in order to calculate user additional boost.\\n    uint256 public DURATION_FACTOR_OVERDUE = 90 days; // 90 days, in order to calculate overdue fee.\\n    uint256 public BOOST_WEIGHT = 2000 * 1e10; // 2000%\\n    uint256 public constant FEE_RATE_SCALE = 10000;\\n\\n    uint256 public performanceFee = 200; // 2%\\n    uint256 public withdrawFee = 400; // 4%\\n    uint256 public overdueFee = 100 * 1e10; // 100%\\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\\n\\n    event Deposit(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 shares,\\n        uint256 duration,\\n        uint256 lastDepositedTime\\n    );\\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\\n    event Harvest(address indexed sender, uint256 amount);\\n    event Pause();\\n    event Unpause();\\n    event Init();\\n    event Lock(\\n        address indexed sender,\\n        uint256 lockedAmount,\\n        uint256 shares,\\n        uint256 lockedDuration,\\n        uint256 blockTimestamp\\n    );\\n    event Unlock(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 blockTimestamp\\n    );\\n    event NewAdmin(address admin);\\n    event NewTreasury(address treasury);\\n    event NewOperator(address operator);\\n    event FreeFeeUser(address indexed user, bool indexed free);\\n    event NewPerformanceFee(uint256 performanceFee);\\n    event NewWithdrawFee(uint256 withdrawFee);\\n    event NewOverdueFee(uint256 overdueFee);\\n    event NewWithdrawFeePeriod(uint256 withdrawFeePeriod);\\n    event NewMaxLockDuration(uint256 maxLockDuration);\\n    event NewDurationFactor(uint256 durationFactor);\\n    event NewDurationFactorOverdue(uint256 durationFactorOverdue);\\n    event NewUnlockFreeDuration(uint256 unlockFreeDuration);\\n    event NewBoostWeight(uint256 boostWeight);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _token: Staking token contract\\n     * @param _masterchefV2: MasterChefV2 contract\\n     * @param _admin: address of the admin\\n     * @param _treasury: address of the treasury (collects fees)\\n     * @param _operator: address of operator\\n     * @param _pid: bbc pool ID in MasterChefV2\\n     */\\n    constructor(\\n        IERC20 _token,\\n        IMasterChefV2 _masterchefV2,\\n        address _admin,\\n        address _treasury,\\n        address _operator,\\n        uint256 _pid\\n    ) {\\n        require(address(_token) != address(0), \\\"Invalid token\\\");\\n        require(address(_masterchefV2) != address(0), \\\"Invalid masterchefV2\\\");\\n        require(_admin != address(0), \\\"Invalid admin\\\");\\n        require(_treasury != address(0), \\\"Invalid treasury\\\");\\n        require(_operator != address(0), \\\"Invalid operator\\\");\\n        token = _token;\\n        bbc = IERC20(_masterchefV2.BBC());\\n        masterchefV2 = _masterchefV2;\\n        admin = _admin;\\n        treasury = _treasury;\\n        operator = _operator;\\n        bbcPoolPID = _pid;\\n    }\\n\\n    /**\\n     * @notice Deposits a dummy token to `MASTER_CHEF` MCV2.\\n     * It will transfer all the `dummyToken` in the msg sender address.\\n     * @param dummyToken The address of the token to be deposited into MCV2.\\n     */\\n    function init(IERC20 dummyToken, uint256 amount) public onlyOwner {\\n        uint256 balance = dummyToken.balanceOf(msg.sender);\\n        require(balance != 0, \\\"Balance must exceed 0\\\");\\n        if (amount == 0 || amount > balance) amount = balance;\\n        dummyToken.safeTransferFrom(msg.sender, address(this), amount);\\n        dummyToken.approve(address(masterchefV2), amount);\\n        masterchefV2.deposit(bbcPoolPID, amount);\\n        emit Init();\\n    }\\n\\n    function close() public onlyOwner {\\n        masterchefV2.emergencyWithdraw(bbcPoolPID);\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"admin: wut?\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is either the bbc owner address or the operator address.\\n     */\\n    modifier onlyOperatorOrBBCOwner(address _user) {\\n        require(\\n            msg.sender == _user || msg.sender == operator,\\n            \\\"Not operator or bbc owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update user share When need to unlock or charges a fee.\\n     * @param _user: User address\\n     */\\n    function updateUserShare(address _user) internal virtual {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares > 0) {\\n            if (user.locked) {\\n                // Calculate the user's current token amount and update related parameters.\\n                uint256 currentAmount = (balanceOf() * (user.shares)) /\\n                    totalShares -\\n                    user.userBoostedShare;\\n                totalBoostDebt -= user.userBoostedShare;\\n                user.userBoostedShare = 0;\\n                totalShares -= user.shares;\\n                //Charge a overdue fee after the free duration has expired.\\n                if (\\n                    !freeOverdueFeeUsers[_user] &&\\n                    ((user.lockEndTime + UNLOCK_FREE_DURATION) <\\n                        block.timestamp)\\n                ) {\\n                    uint256 earnAmount = currentAmount - user.lockedAmount;\\n                    uint256 overdueDuration = block.timestamp -\\n                        user.lockEndTime -\\n                        UNLOCK_FREE_DURATION;\\n                    if (overdueDuration > DURATION_FACTOR_OVERDUE) {\\n                        overdueDuration = DURATION_FACTOR_OVERDUE;\\n                    }\\n                    // Rates are calculated based on the user's overdue duration.\\n                    uint256 overdueWeight = (overdueDuration * overdueFee) /\\n                        DURATION_FACTOR_OVERDUE;\\n                    uint256 currentOverdueFee = (earnAmount * overdueWeight) /\\n                        PRECISION_FACTOR;\\n                    uint256 feeHalf = currentOverdueFee / 2;\\n                    bbc.safeTransfer(treasury, feeHalf);\\n                    bbc.safeTransfer(\\n                        address(0xdead),\\n                        currentOverdueFee - feeHalf\\n                    );\\n                    currentAmount -= currentOverdueFee;\\n                }\\n                // Recalculate the user's share.\\n                uint256 pool = balanceOf();\\n                uint256 currentShares;\\n                if (totalShares != 0) {\\n                    currentShares =\\n                        (currentAmount * totalShares) /\\n                        (pool - currentAmount);\\n                } else {\\n                    currentShares = currentAmount;\\n                }\\n                user.shares = currentShares;\\n                totalShares += currentShares;\\n                // After the lock duration, update related parameters.\\n                if (user.lockEndTime < block.timestamp) {\\n                    user.locked = false;\\n                    user.lockStartTime = 0;\\n                    user.lockEndTime = 0;\\n                    totalLockedAmount -= user.lockedAmount;\\n                    user.lockedAmount = 0;\\n                    emit Unlock(_user, currentAmount, block.timestamp);\\n                }\\n            } else if (!freePerformanceFeeUsers[_user]) {\\n                // Calculate Performance fee.\\n                uint256 totalAmount = (user.shares * balanceOf()) / totalShares;\\n                totalShares -= user.shares;\\n                user.shares = 0;\\n                uint256 earnAmount = totalAmount -\\n                    user.lastUserActionAmount;\\n                uint256 currentPerformanceFee = (earnAmount *\\n                    performanceFee) / FEE_RATE_SCALE;\\n                if (currentPerformanceFee > 0) {\\n                    bbc.safeTransfer(treasury, currentPerformanceFee);\\n                    totalAmount -= currentPerformanceFee;\\n                }\\n                // Recalculate the user's share.\\n                uint256 pool = balanceOf();\\n                uint256 newShares;\\n                if (totalShares != 0) {\\n                    newShares =\\n                        (totalAmount * totalShares) /\\n                        (pool - totalAmount);\\n                } else {\\n                    newShares = totalAmount;\\n                }\\n                user.shares = newShares;\\n                totalShares += newShares;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Unlock user bbc funds.\\n     * @dev Only possible when contract not paused.\\n     * @param _user: User address\\n     */\\n    function unlock(\\n        address _user\\n    ) public onlyOperatorOrBBCOwner(_user) whenNotPaused nonReentrant {\\n        UserInfo storage user = userInfo[_user];\\n        require(\\n            user.locked && user.lockEndTime < block.timestamp,\\n            \\\"Cannot unlock yet\\\"\\n        );\\n        depositOperation(0, 0, _user);\\n    }\\n\\n    /**\\n     * @notice Deposit funds into the BBC Pool.\\n     * @dev Only possible when contract not paused.\\n     * @param _amount: number of tokens to deposit (in BBC)\\n     * @param _lockDuration: Token lock duration\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _lockDuration\\n    ) public whenNotPaused nonReentrant {\\n        require(_amount > 0 || _lockDuration > 0, \\\"Nothing to deposit\\\");\\n        depositOperation(_amount, _lockDuration, msg.sender);\\n    }\\n\\n    /**\\n     * @notice The operation of deposite.\\n     * @param _amount: number of tokens to deposit (in BBC)\\n     * @param _lockDuration: Token lock duration\\n     * @param _user: User address\\n     */\\n    function depositOperation(\\n        uint256 _amount,\\n        uint256 _lockDuration,\\n        address _user\\n    ) internal virtual {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares == 0 || _amount > 0) {\\n            require(_amount > MIN_DEPOSIT_AMOUNT, \\\"Deposit amount must be greater than MIN_DEPOSIT_AMOUNT\\\");\\n        }\\n        // Calculate the total lock duration and check whether the lock duration meets the conditions.\\n        uint256 totalLockDuration = _lockDuration;\\n        uint256 userLockEndTime = user.lockEndTime;\\n        if (userLockEndTime >= block.timestamp) {\\n            // Adding funds during the lock duration is equivalent to re-locking the position, needs to update some variables.\\n            if (_amount > 0) {\\n                user.lockStartTime = block.timestamp;\\n                totalLockedAmount -= user.lockedAmount;\\n                user.lockedAmount = 0;\\n            }\\n            totalLockDuration += userLockEndTime - user.lockStartTime;\\n        }\\n        require(\\n            _lockDuration == 0 || totalLockDuration >= MIN_LOCK_DURATION,\\n            \\\"Minimum lock period is one week\\\"\\n        );\\n        require(\\n            totalLockDuration <= MAX_LOCK_DURATION,\\n            \\\"Maximum lock period exceeded\\\"\\n        );\\n\\n        // Harvest tokens from Masterchef.\\n        harvest();\\n\\n        // Handle stock funds.\\n        if (totalShares == 0) {\\n            uint256 stockAmount = bbc.balanceOf(address(this));\\n            bbc.safeTransfer(treasury, stockAmount);\\n        }\\n        // Update user share.\\n        updateUserShare(_user);\\n\\n        // Update lock duration.\\n        if (_lockDuration > 0) {\\n            if (userLockEndTime < block.timestamp) {\\n                user.lockStartTime = block.timestamp;\\n                userLockEndTime = block.timestamp + _lockDuration;\\n            } else {\\n                userLockEndTime += _lockDuration;\\n            }\\n            user.locked = true;\\n            user.lockEndTime = userLockEndTime;\\n        }\\n\\n        uint256 currentShares;\\n        uint256 currentAmount;\\n        uint256 userCurrentLockedBalance;\\n        uint256 pool = balanceOf();\\n        if (_amount > 0) {\\n            token.safeTransferFrom(_user, address(this), _amount);\\n            currentAmount = _amount;\\n        }\\n\\n        // Calculate lock funds\\n        if (user.shares > 0 && user.locked) {\\n            userCurrentLockedBalance = (pool * user.shares) / totalShares;\\n            currentAmount += userCurrentLockedBalance;\\n            totalShares -= user.shares;\\n            user.shares = 0;\\n\\n            // Update lock amount\\n            if (user.lockStartTime == block.timestamp) {\\n                user.lockedAmount = userCurrentLockedBalance;\\n                totalLockedAmount += userCurrentLockedBalance;\\n            }\\n        }\\n        if (totalShares != 0) {\\n            currentShares =\\n                (currentAmount * totalShares) /\\n                (pool - userCurrentLockedBalance);\\n        } else {\\n            currentShares = currentAmount;\\n        }\\n\\n        // Calculate the boost weight share.\\n        if (userLockEndTime > user.lockStartTime) {\\n            // Calculate boost share.\\n            uint256 boostWeight = ((userLockEndTime - user.lockStartTime) *\\n                BOOST_WEIGHT) / DURATION_FACTOR;\\n            uint256 boostShares = (boostWeight * currentShares) /\\n                PRECISION_FACTOR;\\n            currentShares += boostShares;\\n            user.shares += currentShares;\\n\\n            // Calculate boost share , the user only enjoys the reward, so the principal needs to be recorded as a debt.\\n            uint256 userBoostedShare = (boostWeight * currentAmount) /\\n                PRECISION_FACTOR;\\n            user.userBoostedShare += userBoostedShare;\\n            totalBoostDebt += userBoostedShare;\\n\\n            // Update lock amount.\\n            user.lockedAmount += _amount;\\n            totalLockedAmount += _amount;\\n\\n            emit Lock(\\n                _user,\\n                user.lockedAmount,\\n                user.shares,\\n                (userLockEndTime - user.lockStartTime),\\n                block.timestamp\\n            );\\n        } else {\\n            user.shares += currentShares;\\n        }\\n\\n        if (_amount > 0 || _lockDuration > 0) {\\n            user.lastDepositedTime = block.timestamp;\\n        }\\n        totalShares += currentShares;\\n\\n        user.lastUserActionAmount =\\n            (user.shares * balanceOf()) /\\n            totalShares -\\n            user.userBoostedShare;\\n\\n        user.lastUserActionTime = block.timestamp;\\n\\n        emit Deposit(\\n            _user,\\n            _amount,\\n            currentShares,\\n            _lockDuration,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from the BBC Pool.\\n     * @param _amount: Number of amount to withdraw\\n     */\\n    function withdrawByAmount(\\n        uint256 _amount\\n    ) public whenNotPaused nonReentrant {\\n        withdrawOperation(0, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from the BBC Pool.\\n     * @param _shares: Number of shares to withdraw\\n     */\\n    function withdraw(uint256 _shares) public whenNotPaused nonReentrant {\\n        require(_shares > 0, \\\"Nothing to withdraw\\\");\\n        withdrawOperation(_shares, 0);\\n    }\\n\\n    /**\\n     * @notice The operation of withdraw.\\n     * @param _shares: Number of shares to withdraw\\n     * @param _amount: Number of amount to withdraw\\n     */\\n\\tfunction withdrawOperation(uint256 _shares, uint256 _amount) internal virtual {\\n        UserInfo storage user = userInfo[msg.sender];\\n        if(_shares==0 && _amount > 0)\\n            require(_amount > MIN_WITHDRAW_AMOUNT, \\\"Withdraw amount must be greater than MIN_WITHDRAW_AMOUNT\\\");\\n        else\\n            require(_shares <= user.shares, \\\"Withdraw amount exceeds balance\\\");\\n        require(user.lockEndTime < block.timestamp, \\\"Still in lock\\\");\\n\\n        // Calculate the percent of withdraw shares, when unlocking or calculating the Performance fee, the shares will be updated.\\n        uint256 currentShare = _shares;\\n        uint256 sharesPercent = (_shares * PRECISION_FACTOR_SHARE) /\\n            user.shares;\\n\\n        // Harvest token from MasterchefV2.\\n        harvest();\\n\\n        // Update user share.\\n        updateUserShare(msg.sender);\\n\\n        if (_shares == 0 && _amount > 0) {\\n            uint256 pool = balanceOf();\\n            currentShare = (_amount * totalShares) / pool; // Calculate equivalent shares\\n            if (currentShare > user.shares) {\\n                currentShare = user.shares;\\n            }\\n        } else {\\n            currentShare =\\n                (sharesPercent * user.shares) /\\n                PRECISION_FACTOR_SHARE;\\n        }\\n        uint256 currentAmount = (balanceOf() * currentShare) / totalShares;\\n        user.shares -= currentShare;\\n        totalShares -= currentShare;\\n\\n        // Calculate withdraw fee\\n        if (\\n            !freeWithdrawFeeUsers[msg.sender] &&\\n            (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)\\n        ) {\\n            uint256 currentWithdrawFee = (currentAmount * withdrawFee) /\\n                FEE_RATE_SCALE;\\n            token.safeTransfer(treasury, currentWithdrawFee);\\n            currentAmount -= currentWithdrawFee;\\n        }\\n        token.safeTransfer(msg.sender, currentAmount);\\n\\n        if (user.shares > 0) {\\n            user.lastUserActionAmount =\\n                (user.shares * balanceOf()) /\\n                totalShares;\\n        } else {\\n            user.lastUserActionAmount = 0;\\n        }\\n\\n        user.lastUserActionTime = block.timestamp;\\n\\n        emit Withdraw(msg.sender, currentAmount, currentShare);\\n    }\\n\\n    /**\\n     * @notice Withdraw all funds for a user\\n     */\\n    function withdrawAll() public {\\n        withdraw(userInfo[msg.sender].shares);\\n    }\\n\\n    /**\\n     * @notice Harvest pending BBC tokens from MasterChef\\n     */\\n    function harvest() internal returns (uint256) {\\n        uint256 pendingBBC = masterchefV2.pendingBBC(bbcPoolPID, address(this));\\n        if (pendingBBC > 0) {\\n            uint256 balBefore = bbc.balanceOf(address(this));\\n            masterchefV2.withdraw(bbcPoolPID, 0);\\n            uint256 balAfter = bbc.balanceOf(address(this));\\n            uint256 balInc = balAfter - balBefore;\\n            emit Harvest(msg.sender, balInc);\\n            return balInc;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Set admin address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setAdmin(address _admin) public onlyOwner {\\n        require(_admin != address(0), \\\"Cannot be zero address\\\");\\n        admin = _admin;\\n        emit NewAdmin(admin);\\n    }\\n\\n    /**\\n     * @notice Set treasury address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setTreasury(address _treasury) public onlyOwner {\\n        require(_treasury != address(0), \\\"Cannot be zero address\\\");\\n        treasury = _treasury;\\n        emit NewTreasury(treasury);\\n    }\\n\\n    /**\\n     * @notice Set operator address\\n     * @dev Callable by the contract owner.\\n     */\\n    function setOperator(address _operator) public onlyOwner {\\n        require(_operator != address(0), \\\"Cannot be zero address\\\");\\n        operator = _operator;\\n        emit NewOperator(operator);\\n    }\\n\\n    /**\\n     * @notice Set free performance fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setFreePerformanceFeeUser(\\n        address _user,\\n        bool _free\\n    ) public onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freePerformanceFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set free overdue fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setFreeOverdueFeeUser(address _user, bool _free) public onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freeOverdueFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set free withdraw fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setFreeWithdrawFeeUser(address _user, bool _free) public onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freeWithdrawFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set performance fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setPerformanceFee(uint256 _performanceFee) public onlyAdmin {\\n        require(\\n            _performanceFee <= MAX_PERFORMANCE_FEE,\\n            \\\"performanceFee cannot be more than MAX_PERFORMANCE_FEE\\\"\\n        );\\n        performanceFee = _performanceFee;\\n        emit NewPerformanceFee(performanceFee);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFee(uint256 _withdrawFee) public onlyAdmin {\\n        require(\\n            _withdrawFee <= MAX_WITHDRAW_FEE,\\n            \\\"withdrawFee cannot be more than MAX_WITHDRAW_FEE\\\"\\n        );\\n        withdrawFee = _withdrawFee;\\n        emit NewWithdrawFee(withdrawFee);\\n    }\\n\\n    /**\\n     * @notice Set overdue fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setOverdueFee(uint256 _overdueFee) public onlyAdmin {\\n        require(\\n            _overdueFee <= MAX_OVERDUE_FEE,\\n            \\\"overdueFee cannot be more than MAX_OVERDUE_FEE\\\"\\n        );\\n        overdueFee = _overdueFee;\\n        emit NewOverdueFee(_overdueFee);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee period\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) public onlyAdmin {\\n        require(\\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\\n            \\\"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\\\"\\n        );\\n        withdrawFeePeriod = _withdrawFeePeriod;\\n        emit NewWithdrawFeePeriod(withdrawFeePeriod);\\n    }\\n\\n    /**\\n     * @notice Set MAX_LOCK_DURATION\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setMaxLockDuration(uint256 _maxLockDuration) public onlyAdmin {\\n        require(\\n            _maxLockDuration <= MAX_LOCK_DURATION_LIMIT,\\n            \\\"MAX_LOCK_DURATION cannot be more than MAX_LOCK_DURATION_LIMIT\\\"\\n        );\\n        MAX_LOCK_DURATION = _maxLockDuration;\\n        emit NewMaxLockDuration(_maxLockDuration);\\n    }\\n\\n    /**\\n     * @notice Set DURATION_FACTOR\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setDurationFactor(uint256 _durationFactor) public onlyAdmin {\\n        require(_durationFactor > 0, \\\"DURATION_FACTOR cannot be zero\\\");\\n        DURATION_FACTOR = _durationFactor;\\n        emit NewDurationFactor(_durationFactor);\\n    }\\n\\n    /**\\n     * @notice Set DURATION_FACTOR_OVERDUE\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setDurationFactorOverdue(\\n        uint256 _durationFactorOverdue\\n    ) public onlyAdmin {\\n        require(\\n            _durationFactorOverdue > 0,\\n            \\\"DURATION_FACTOR_OVERDUE cannot be zero\\\"\\n        );\\n        DURATION_FACTOR_OVERDUE = _durationFactorOverdue;\\n        emit NewDurationFactorOverdue(_durationFactorOverdue);\\n    }\\n\\n    /**\\n     * @notice Set UNLOCK_FREE_DURATION\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setUnlockFreeDuration(\\n        uint256 _unlockFreeDuration\\n    ) public onlyAdmin {\\n        require(_unlockFreeDuration > 0, \\\"UNLOCK_FREE_DURATION cannot be zero\\\");\\n        UNLOCK_FREE_DURATION = _unlockFreeDuration;\\n        emit NewUnlockFreeDuration(_unlockFreeDuration);\\n    }\\n\\n    /**\\n     * @notice Set BOOST_WEIGHT\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setBoostWeight(uint256 _boostWeight) public onlyAdmin {\\n        require(\\n            _boostWeight <= BOOST_WEIGHT_LIMIT,\\n            \\\"BOOST_WEIGHT cannot be more than BOOST_WEIGHT_LIMIT\\\"\\n        );\\n        BOOST_WEIGHT = _boostWeight;\\n        emit NewBoostWeight(_boostWeight);\\n    }\\n\\n    /**\\n     * @notice Withdraw unexpected tokens sent to the BBC Pool\\n     */\\n    function inCaseTokensGetStuck(address _token) public onlyAdmin {\\n        require(\\n            _token != address(token),\\n            \\\"Token cannot be same as deposit token\\\"\\n        );\\n\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Trigger stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() public onlyAdmin whenNotPaused {\\n        _pause();\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Return to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() public onlyAdmin whenPaused {\\n        _unpause();\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @notice Calculate Performance fee.\\n     * @param _user: User address\\n     * @return Returns Performance fee.\\n     */\\n    function calculatePerformanceFee(\\n        address _user\\n    ) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (\\n            user.shares > 0 && !user.locked && !freePerformanceFeeUsers[_user]\\n        ) {\\n            uint256 earnAmount = getProfit(_user);\\n            uint256 currentPerformanceFee = (earnAmount * performanceFee) /\\n                FEE_RATE_SCALE;\\n            return currentPerformanceFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate overdue fee.\\n     * @param _user: User address\\n     * @return Returns Overdue fee.\\n     */\\n    function calculateOverdueFee(address _user) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (\\n            user.shares > 0 &&\\n            user.locked &&\\n            !freeOverdueFeeUsers[_user] &&\\n            ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)\\n        ) {\\n            uint256 earnAmount = getProfit(_user);\\n            uint256 overdueDuration = block.timestamp -\\n                user.lockEndTime -\\n                UNLOCK_FREE_DURATION;\\n            if (overdueDuration > DURATION_FACTOR_OVERDUE) {\\n                overdueDuration = DURATION_FACTOR_OVERDUE;\\n            }\\n            // Rates are calculated based on the user's overdue duration.\\n            uint256 overdueWeight = (overdueDuration * overdueFee) /\\n                DURATION_FACTOR_OVERDUE;\\n            uint256 currentOverdueFee = (earnAmount * overdueWeight) /\\n                PRECISION_FACTOR;\\n            return currentOverdueFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate Performance Fee Or Overdue Fee\\n     * @param _user: User address\\n     * @return Returns  Performance Fee Or Overdue Fee.\\n     */\\n    function calculatePerformanceFeeOrOverdueFee(\\n        address _user\\n    ) internal view returns (uint256) {\\n        return calculatePerformanceFee(_user) + calculateOverdueFee(_user);\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee.\\n     * @param _user: User address\\n     * @param _shares: Number of shares to withdraw\\n     * @return Returns Withdraw fee.\\n     */\\n    function calculateWithdrawFee(\\n        address _user, \\n        uint256 _shares\\n    ) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares < _shares) {\\n            _shares = user.shares;\\n        }\\n        if (!freeWithdrawFeeUsers[msg.sender] && !user.locked && (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)) {\\n            uint256 pool = balanceOf() + calculateTotalPendingBBCRewards();\\n            uint256 sharesPercent = (_shares * PRECISION_FACTOR) / user.shares;\\n            uint256 currentTotalAmount = (pool * (user.shares)) /\\n                totalShares -\\n                user.userBoostedShare -\\n                calculatePerformanceFeeOrOverdueFee(_user);\\n            uint256 currentAmount = (currentTotalAmount * sharesPercent) / PRECISION_FACTOR;\\n            uint256 currentWithdrawFee = (currentAmount * withdrawFee) / FEE_RATE_SCALE;\\n            return currentWithdrawFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculates the total pending rewards that can be harvested\\n     * @return Returns total pending bbc rewards\\n     */\\n    function calculateTotalPendingBBCRewards() public view returns (uint256) {\\n        uint256 amount = masterchefV2.pendingBBC(bbcPoolPID, address(this));\\n        return amount;\\n    }\\n\\n    function getPricePerFullShare() public virtual view returns (uint256) {\\n        return\\n            totalShares == 0\\n                ? 1e18\\n                : ((balanceOf() + calculateTotalPendingBBCRewards()) * 1e18 / totalShares);\\n    }\\n\\n    function getProfit(address _user) public virtual view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares == 0) return 0;\\n        uint256 pool = balanceOf() + calculateTotalPendingBBCRewards();\\n        if (user.locked) {\\n            uint256 currentAmount = (pool * user.shares) /\\n                totalShares -\\n                user.userBoostedShare;\\n            return currentAmount - user.lockedAmount;\\n        }\\n        return\\n            (user.shares * pool) / totalShares - user.lastUserActionAmount;\\n    }\\n\\n    /**\\n     * @notice Current pool available balance\\n     * @dev The contract puts 100% of the tokens to work.\\n     */\\n    function available() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculates the total underlying bbcs\\n     * @dev It includes bbcs held by the contract and the boost debt amount.\\n     */\\n    function balanceOf() public view returns (uint256) {\\n        return token.balanceOf(address(this)) + totalBoostDebt;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChefV2\",\"name\":\"_masterchefV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"name\":\"FreeFeeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostWeight\",\"type\":\"uint256\"}],\"name\":\"NewBoostWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationFactor\",\"type\":\"uint256\"}],\"name\":\"NewDurationFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationFactorOverdue\",\"type\":\"uint256\"}],\"name\":\"NewDurationFactorOverdue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLockDuration\",\"type\":\"uint256\"}],\"name\":\"NewMaxLockDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overdueFee\",\"type\":\"uint256\"}],\"name\":\"NewOverdueFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"NewPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockFreeDuration\",\"type\":\"uint256\"}],\"name\":\"NewUnlockFreeDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFeePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOST_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_WEIGHT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_FACTOR_OVERDUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RATE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_DURATION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OVERDUE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_FREE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbcPoolPID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateOverdueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculatePerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalPendingBBCRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeOverdueFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freePerformanceFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeWithdrawFeeUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"dummyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefV2\",\"outputs\":[{\"internalType\":\"contract IMasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overdueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostWeight\",\"type\":\"uint256\"}],\"name\":\"setBoostWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationFactor\",\"type\":\"uint256\"}],\"name\":\"setDurationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationFactorOverdue\",\"type\":\"uint256\"}],\"name\":\"setDurationFactorOverdue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setFreeOverdueFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setFreePerformanceFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_free\",\"type\":\"bool\"}],\"name\":\"setFreeWithdrawFeeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLockDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_overdueFee\",\"type\":\"uint256\"}],\"name\":\"setOverdueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockFreeDuration\",\"type\":\"uint256\"}],\"name\":\"setUnlockFreeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoostDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUserActionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUserActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CakePool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000015628ce9150db1bce2fbb717a09e846f8a324360000000000000000000000003fefd06828689252a69207718985b9a78350561f00000000000000000000000095fe70a9449d1e8276040d29a4fdf63b94246288000000000000000000000000b5c4d8671e03fba09d467c50fc51215b77ee54540000000000000000000000001d8ecef8fcaaa50f0326d9af768809a01aae61a90000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}