{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Adscendo/AdscendoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ILido.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./utils/Context.sol\\\";\\nimport \\\"./utils/math/SafeMath.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title AdscendoPool\\n * @author\\n * @notice Leveraged staking pool for ETH\\n * @dev Implements minting and redeeming of LSTETH tokens\\n */\\ncontract AdscendoPool is Context, ReentrancyGuard {\\n    // Libraries\\n\\n    using SafeMath for uint256; // Prevent overflows\\n\\n    // State variables\\n\\n    uint private _liquidationPrice; // Liquidation price threshold\\n\\n    uint private _safePrice; // Safe price threshold\\n\\n    uint private _mintFee;\\n\\n    uint private _redeemFee;\\n\\n    uint private immutable MAX_MINT_FEE = 50; // 5% max mint fee\\n\\n    uint private immutable MAX_REDEEM_FEE = 50; // 5% max redeem fee\\n\\n    uint256 private _totalFee;\\n\\n    // Total amount of staked STETH\\n    uint256 private _stakedAmount;\\n\\n    // Address to receive insurance fees\\n    address private _insurance;\\n\\n    // Address to receive team fees\\n    address private _team;\\n\\n    // Admin address\\n    address private _admin;\\n\\n    // Factory contract that created this pool\\n    address private _factory;\\n\\n    mapping(address => bool) _stakingPool;\\n\\n    uint private _teamShare = 30;\\n\\n    uint private _insuranceShare = 70;\\n\\n    // AUSD stablecoin token contract\\n    IERC20 private _AUSD;\\n\\n    // LSTETH token contract\\n    IERC20 private _lstETH;\\n\\n    // STETH token contract\\n    IERC20 private _stETH;\\n\\n    ILido private _lido;\\n\\n    // Price feed contract\\n    IPriceFeed internal _priceFeed;\\n\\n    // Flag for liquidation state\\n    bool internal _liquidated = false;\\n\\n    /**\\n     * @notice Emitted when STETH is deposited\\n     * @param user User address\\n     * @param amount Amount deposited\\n     */\\n    event Mint(address user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when LSTETH is redeemed\\n     * @param user User address\\n     * @param amount Amount redeemed\\n     */\\n    event Redeem(address user, uint256 amount);\\n\\n    event EmergencyRedeem(address user, uint256 amount);\\n\\n    event Liquidation(uint price);\\n\\n    /**\\n     * @dev Reverts if pool is liquidated\\n     */\\n    modifier onlyNotLiquidated() {\\n        require(_liquidated == false, \\\"Must be not liquidate\\\");\\n        _;\\n    }\\n\\n    // Modifier to check liquidated\\n    modifier onlyLiquidated() {\\n        require(_liquidated == true, \\\"Must be liquidated\\\");\\n        _;\\n    }\\n\\n    // Modifier to check caller is admin\\n    modifier onlyAdmin() {\\n        require(_admin == _msgSender(), \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyStakingPool() {\\n        require(_stakingPool[_msgSender()] == true, \\\"Only staking pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets initial state variables\\n     * @param liquidationPrice_ Liquidation price threshold\\n     * @param safePrice_ Safe price threshold\\n     * @param ausdAddress_ AUSD token address\\n     * @param lstethAddress_ LSTETH token address\\n     * @param stethAddress_ STETH token address\\n     * @param priceFeedAddress_ Price feed address\\n     * @param insurance_ Insurance fee address\\n     * @param team_ Team fee address\\n     * @param admin_ Admin address\\n     * @param mintFee_ Initial minting fee percentage\\n     * @param redeemFee_ Initial redeem fee percentage\\n     */\\n    constructor(\\n        uint liquidationPrice_,\\n        uint safePrice_,\\n        address ausdAddress_,\\n        address lstethAddress_,\\n        address stethAddress_,\\n        address priceFeedAddress_,\\n        address insurance_,\\n        address team_,\\n        address admin_,\\n        uint mintFee_,\\n        uint redeemFee_\\n    ) {\\n        // Set liquidation and safe price thresholds\\n        // 18-digit precision uint\\n        _liquidationPrice = liquidationPrice_;\\n        _safePrice = safePrice_;\\n\\n        // Set token contract addresses\\n        _AUSD = IERC20(ausdAddress_);\\n        _stETH = IERC20(stethAddress_);\\n        _lstETH = IERC20(lstethAddress_);\\n        _lido = ILido(stethAddress_);\\n\\n        // Set price feed and admin addresses\\n        _priceFeed = IPriceFeed(priceFeedAddress_);\\n        _insurance = insurance_;\\n        _team = team_;\\n        _admin = admin_;\\n\\n        // Set factory and starting round\\n        _factory = _msgSender();\\n\\n        // Set initial fee percentages\\n        _mintFee = mintFee_;\\n        _redeemFee = redeemFee_;\\n    }\\n\\n    function lstETH() public view returns (address) {\\n        return address(_lstETH);\\n    }\\n\\n    function stETH() public view returns (address) {\\n        return address(_stETH);\\n    }\\n\\n    function AUSD() public view returns (address) {\\n        return address(_AUSD);\\n    }\\n\\n    function admin() public view returns (address) {\\n        return _admin;\\n    }\\n\\n    function factory() public view returns (address) {\\n        return _factory;\\n    }\\n\\n    function team() public view returns (address) {\\n        return _team;\\n    }\\n\\n    function insurance() public view returns (address) {\\n        return _insurance;\\n    }\\n\\n    function mintFee() public view returns (uint) {\\n        return _mintFee;\\n    }\\n\\n    function redeemFee() public view returns (uint) {\\n        return _redeemFee;\\n    }\\n\\n    function liquidationPrice() public view returns (uint) {\\n        return _liquidationPrice;\\n    }\\n\\n    function safePrice() public view returns (uint) {\\n        return _safePrice;\\n    }\\n\\n    function priceFeed() public view returns (address) {\\n        return address(_priceFeed);\\n    }\\n\\n    function stakedAmount() public view returns (uint256) {\\n        return _stakedAmount;\\n    }\\n\\n    function totalFee() public view returns (uint256) {\\n        return _totalFee;\\n    }\\n\\n    function liquidated() public view returns (bool) {\\n        return _liquidated;\\n    }\\n\\n    function isFeeWhitelist(address account) public view returns (bool) {\\n        return _stakingPool[account];\\n    }\\n\\n    /**\\n     * @notice Deposits STETH and mints LSTETH + AUSD\\n     * @dev Only allowed if unliquidated\\n     * @param stAmount Amount of STETH to deposit\\n     */\\n    function mint(uint256 stAmount) external onlyNotLiquidated nonReentrant {\\n        uint _price = _priceFeed.fetchPrice();\\n        require(_price > _safePrice, \\\"Current price must above threshold\\\");\\n\\n        _stETH.transferFrom(_msgSender(), address(this), stAmount);\\n        _mint(stAmount, _mintFee);\\n    }\\n\\n    function mintWithETH(\\n        address _ref\\n    ) external payable onlyNotLiquidated nonReentrant {\\n        uint _price = _priceFeed.fetchPrice();\\n        require(_price > _safePrice, \\\"Current price must above threshold\\\");\\n\\n        uint256 stAmount = _depositETHForSTETH(_ref);\\n\\n        _mint(stAmount, _mintFee);\\n    }\\n\\n    function mintNoFee(\\n        uint256 stAmount\\n    ) external onlyNotLiquidated onlyStakingPool nonReentrant {\\n        uint _price = _priceFeed.fetchPrice();\\n        require(_price > _safePrice, \\\"Current price must above threshold\\\");\\n\\n        _stETH.transferFrom(_msgSender(), address(this), stAmount);\\n        _mint(stAmount, 0);\\n    }\\n\\n    function mintWithETHNoFee(\\n        address _ref\\n    )\\n        external\\n        payable\\n        onlyNotLiquidated\\n        onlyStakingPool\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint _price = _priceFeed.fetchPrice();\\n        require(_price > _safePrice, \\\"Current price must above threshold\\\");\\n\\n        uint256 stAmount = _depositETHForSTETH(_ref);\\n\\n        _mint(stAmount, 0);\\n\\n        return stAmount;\\n    }\\n\\n    function _depositETHForSTETH(address _ref) internal returns (uint256) {\\n        uint256 _sharesAmount = _lido.submit{value: msg.value}(_ref);\\n        uint256 stAmount = _lido.getPooledEthByShares(_sharesAmount);\\n\\n        return stAmount;\\n    }\\n\\n    function _mint(uint256 stAmount, uint mintFee_) internal {\\n        uint256 _fee = stAmount.mul(mintFee_).div(1000);\\n        uint256 _amount = stAmount.sub(_fee);\\n\\n        _AUSD.mint(_msgSender(), _amount.mul(_liquidationPrice).div(10 ** 18));\\n        _lstETH.mint(_msgSender(), _amount);\\n\\n        _stakedAmount = _stakedAmount.add(_amount);\\n        // fees\\n        _totalFee = _totalFee.add(_fee);\\n\\n        emit Mint(_msgSender(), stAmount);\\n    }\\n\\n    /**\\n     * @notice Redeems LSTETH for STETH and burns AUSD\\n     * @dev Only allowed if unliquidated\\n     * @param stAmount Amount of LSTETH to redeem\\n     */\\n    function redeem(uint256 stAmount) external onlyNotLiquidated nonReentrant {\\n        _redeem(stAmount, _redeemFee);\\n    }\\n\\n    function redeemNoFee(\\n        uint256 stAmount\\n    ) external onlyNotLiquidated onlyStakingPool nonReentrant {\\n        _redeem(stAmount, 0);\\n    }\\n\\n    function _redeem(uint256 stAmount, uint redeemFee_) internal {\\n        uint _price = _priceFeed.fetchPrice();\\n        require(\\n            _price > _liquidationPrice,\\n            \\\"Current price must above threshold\\\"\\n        );\\n\\n        // Calculate fee\\n        uint256 _fee = stAmount.mul(redeemFee_).div(1000);\\n        uint256 _amount = stAmount.sub(_fee);\\n\\n        // Burn AUSD and LSTETH\\n        _AUSD.burn(_msgSender(), stAmount.mul(_liquidationPrice).div(10 ** 18));\\n        _lstETH.burn(_msgSender(), stAmount);\\n\\n        // Transfer STETH minus fee\\n        _stETH.transfer(_msgSender(), _amount);\\n\\n        // Update staked amount\\n        _stakedAmount = _stakedAmount.sub(stAmount);\\n\\n        // fees\\n        _totalFee = _totalFee.add(_fee);\\n\\n        emit Redeem(_msgSender(), stAmount);\\n    }\\n\\n    /**\\n     * @notice Liquidates the pool\\n     * @dev Changes liquidated state to true\\n     */\\n    function liquidation() external {\\n        uint _price = _priceFeed.fetchPrice();\\n\\n        require(\\n            _price < _liquidationPrice,\\n            \\\"Current price must below threshold\\\"\\n        );\\n\\n        // Set liquidated flag\\n        _liquidated = true;\\n\\n        emit Liquidation(_price);\\n    }\\n\\n    /**\\n     * @notice Emergency redeem post liquidation\\n     * @dev Allows redeem if price > safe\\n     * @param ausdAmount Amount of AUSD to redeem\\n     * @return stETHAmount Amount of STETH withdrawn\\n     */\\n    function emergencyRedeem(\\n        uint256 ausdAmount\\n    ) external onlyLiquidated nonReentrant returns (uint256) {\\n        uint _price = _priceFeed.fetchPrice();\\n\\n        require(_price > _safePrice, \\\"Current price must above threshold\\\");\\n\\n        return _emergencyRedeem(ausdAmount, _price, _redeemFee);\\n    }\\n\\n    /**\\n     * @notice Maintenance redeem post liquidation\\n     * @dev Allows admin to redeem LSTETH if liquidated\\n     * @param ausdAmount Amount of AUSD to redeem\\n     * @return stETHAmount Amount of STETH withdrawn\\n     */\\n    function mantenceRedeem(\\n        uint256 ausdAmount\\n    ) external onlyAdmin onlyLiquidated nonReentrant returns (uint256) {\\n        uint _price = _priceFeed.fetchPrice();\\n\\n        return _emergencyRedeem(ausdAmount, _price, _redeemFee);\\n    }\\n\\n    function emergencyRedeemNoFee(\\n        uint ausdAmount\\n    ) external onlyStakingPool onlyLiquidated nonReentrant returns (uint256) {\\n        uint _price = _priceFeed.fetchPrice();\\n\\n        return _emergencyRedeem(ausdAmount, _price, 0);\\n    }\\n\\n    /**\\n     * @dev Internal logic for emergency redeem\\n     * @param ausdAmount AUSD amount to redeem\\n     * @param price Current price of ETH\\n     * @return stETHAmount Amount of STETH withdrawn\\n     */\\n    function _emergencyRedeem(\\n        uint256 ausdAmount,\\n        uint price,\\n        uint redeemFee_\\n    ) internal returns (uint256) {\\n        require(_stakedAmount > 0, \\\"Nothing left\\\");\\n\\n        uint256 stAmount = ausdAmount.mul(10 ** 18).div(price);\\n        uint256 fee = stAmount.mul(redeemFee_).div(1000);\\n        uint256 redeemAmount = stAmount.sub(fee);\\n\\n        _AUSD.burn(_msgSender(), ausdAmount);\\n\\n        if (stAmount > _stakedAmount) {\\n            _stETH.transfer(_msgSender(), _stakedAmount.sub(fee));\\n            _stakedAmount = 0;\\n        } else {\\n            _stETH.transfer(_msgSender(), redeemAmount);\\n            _stakedAmount = _stakedAmount.sub(stAmount);\\n        }\\n\\n        _totalFee = _totalFee.add(fee);\\n\\n        emit EmergencyRedeem(_msgSender(), stAmount);\\n\\n        return redeemAmount;\\n    }\\n\\n    /**\\n     * @notice Set minting fee percentage\\n     * @dev Only callable by admin\\n     * @param value_ New minting fee percentage\\n     */\\n    function setMintFee(uint value_) external onlyAdmin {\\n        require(value_ <= MAX_MINT_FEE, \\\"Can not greater than max mint fee\\\");\\n        _mintFee = value_;\\n    }\\n\\n    /**\\n     * @notice Set redeeming fee percentage\\n     * @dev Only callable by admin\\n     * @param value_ New redeeming fee percentage\\n     */\\n    function setRedeemFee(uint value_) external onlyAdmin {\\n        require(\\n            value_ <= MAX_REDEEM_FEE,\\n            \\\"Can not greater than max redeem fee\\\"\\n        );\\n        _redeemFee = value_;\\n    }\\n\\n    function withdrawSTETHReward() external onlyAdmin {\\n        uint256 _balance = _stETH.balanceOf(address(this));\\n        uint256 _reward = _balance.sub(_stakedAmount).sub(_totalFee);\\n\\n        if (_reward <= 0) {\\n            revert();\\n        }\\n\\n        _stETH.transfer(_admin, _reward);\\n    }\\n\\n    function distributeCollectedFees() external onlyAdmin {\\n        require(_totalFee > 0, \\\"No fee collected yet\\\");\\n\\n        _stETH.transfer(_team, _totalFee.mul(_teamShare).div(100));\\n        _stETH.transfer(_insurance, _totalFee.mul(_insuranceShare).div(100));\\n\\n        _totalFee = 0;\\n    }\\n\\n    function setTeamShare(uint value) external onlyAdmin {\\n        require(value < 100, \\\"Value should less than 100\\\");\\n\\n        _teamShare = value;\\n        _insuranceShare = 100 - value;\\n    }\\n\\n    function setStakingPool(address account, bool value) external onlyAdmin {\\n        require(account != address(0), \\\"No Zero address\\\");\\n\\n        _stakingPool[account] = value;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Adscendo/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    event Mint(address indexed account, uint256 value);\\n\\n    event Burn(address indexed account, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function mint(address account, uint256 value) external;\\n\\n    function burn(address account, uint256 value) external;\\n}\"\r\n    },\r\n    \"contracts/Adscendo/interfaces/ILido.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ILido {\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n    function submit(address _referral) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Adscendo/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IPriceFeed {\\n\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint _lastGoodPrice);\\n   \\n    // --- Function ---\\n    function fetchPrice() external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/Adscendo/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Adscendo/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Adscendo/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (_status == _ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safePrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ausdAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lstethAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stethAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"insurance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ausdAmount\",\"type\":\"uint256\"}],\"name\":\"emergencyRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ausdAmount\",\"type\":\"uint256\"}],\"name\":\"emergencyRedeemNoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lstETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ausdAmount\",\"type\":\"uint256\"}],\"name\":\"mantenceRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stAmount\",\"type\":\"uint256\"}],\"name\":\"mintNoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"mintWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"mintWithETHNoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stAmount\",\"type\":\"uint256\"}],\"name\":\"redeemNoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTeamShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSTETHReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdscendoPool", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000046791fc84e07d0000000000000000000000000000000000000000000000000004d853c8f8908980000000000000000000000000000258bb9e4b6ab36feca231f95ac7632b8470726f5000000000000000000000000230ef92660f46b50d9da3ad104a1206920f50a95000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000004c517d4e2c851ca76d7ec94b805269df0f2201de00000000000000000000000053c494128ecdea1d48cf7233e6a02aaec0c1e2350000000000000000000000009fee24bde6229dfd03b7169ff2bffc09b9c4c05a0000000000000000000000009fee24bde6229dfd03b7169ff2bffc09b9c4c05a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}