{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-v4/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/cvx/CvxStakingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IConvexVirtualBalanceRewardPool } from \\\"../../interfaces/convex/IConvexVirtualBalanceRewardPool.sol\\\";\\nimport { ICvxRewardPool } from \\\"../../interfaces/convex/ICvxRewardPool.sol\\\";\\nimport { IStashTokenWrapper } from \\\"../../interfaces/convex/IStashTokenWrapper.sol\\\";\\nimport { IConvexBasicRewards } from \\\"../../interfaces/IConvexBasicRewards.sol\\\";\\nimport { IConcentratorStrategy } from \\\"../interfaces/IConcentratorStrategy.sol\\\";\\n\\nimport { AutoCompoundingStrategyBaseV2 } from \\\"../strategies/AutoCompoundingStrategyBaseV2.sol\\\";\\n\\ncontract CvxStakingStrategy is AutoCompoundingStrategyBaseV2 {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  // solhint-disable const-name-snakecase\\n  string public constant override name = \\\"CvxStaking\\\";\\n\\n  /// @dev The address of cvxCRV token.\\n  address private constant cvxCRV = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\\n\\n  /// @dev The address of CVX token.\\n  address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n\\n  /// @dev The address of cvxCRV staking pool.\\n  address private constant cvxCRVRewardPool = 0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e;\\n\\n  /// @notice The address of CvxRewardPool contract.\\n  address public immutable staker;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _operator, address _staker) initializer {\\n    staker = _staker;\\n\\n    address[] memory _rewards = new address[](1);\\n    _rewards[0] = cvxCRV;\\n\\n    __ConcentratorStrategyBase_init(_operator, _rewards);\\n\\n    // approval\\n    IERC20(CVX).safeApprove(_staker, type(uint256).max);\\n\\n    // protect token\\n    isTokenProtected[CVX] = true;\\n    isTokenProtected[cvxCRV] = true;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Sync reward tokens from CvxFxnStaking contract.\\n  function syncRewardToken() external {\\n    delete rewards;\\n    rewards.push(ICvxRewardPool(staker).rewardToken());\\n\\n    uint256 _length = ICvxRewardPool(staker).extraRewardsLength();\\n    for (uint256 i = 0; i < _length; i++) {\\n      address _rewarder = ICvxRewardPool(staker).extraRewards(i);\\n      address _wrapper = IConvexVirtualBalanceRewardPool(_rewarder).rewardToken();\\n      rewards.push(IStashTokenWrapper(_wrapper).token());\\n    }\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function deposit(address, uint256 _amount) external override onlyOperator {\\n    if (_amount > 0) {\\n      ICvxRewardPool(staker).stake(_amount);\\n    }\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function withdraw(address _recipient, uint256 _amount) external override onlyOperator {\\n    if (_amount > 0) {\\n      ICvxRewardPool(staker).withdraw(_amount, false);\\n      IERC20(CVX).safeTransfer(_recipient, _amount);\\n    }\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function harvest(address _converter, address _intermediate)\\n    external\\n    override\\n    onlyOperator\\n    returns (uint256 _harvested)\\n  {\\n    // -1. withdraw cvxCRV from staking pool\\n    uint256 _balance = IConvexBasicRewards(cvxCRVRewardPool).balanceOf(address(this));\\n    if (_balance > 0) {\\n      // claim and sweep extra rewards\\n      IConvexBasicRewards(cvxCRVRewardPool).withdraw(_balance, true);\\n      address[] memory _extraRewards = new address[](3);\\n      _extraRewards[0] = 0xD533a949740bb3306d119CC777fa900bA034cd52; // CRV\\n      _extraRewards[1] = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490; // 3CRV\\n      _extraRewards[2] = CVX;\\n      _sweepToken(_extraRewards);\\n    }\\n\\n    // 0. sweep balances\\n    address[] memory _rewards = rewards;\\n    _sweepToken(_rewards);\\n\\n    // 1. claim rewards from staking staker contract.\\n    ICvxRewardPool(staker).getReward(false);\\n    uint256[] memory _amounts = new uint256[](rewards.length);\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      _amounts[i] = IERC20(_rewards[i]).balanceOf(address(this));\\n    }\\n\\n    // 2. convert all rewards to staking token.\\n    _harvested = _harvest(_converter, _intermediate, CVX, _rewards, _amounts);\\n\\n    // 3. deposit into convex\\n    if (_harvested > 0) {\\n      ICvxRewardPool(staker).stake(_harvested);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/interfaces/IConcentratorStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IConcentratorStrategy {\\n  /// @notice Return then name of the strategy.\\n  function name() external view returns (string memory);\\n\\n  /// @notice Update the list of reward tokens.\\n  /// @param _rewards The address list of reward tokens to update.\\n  function updateRewards(address[] memory _rewards) external;\\n\\n  /// @notice Deposit token to corresponding strategy.\\n  /// @dev Requirements:\\n  ///   + Caller should make sure the token is already transfered into the strategy contract.\\n  ///   + Caller should make sure the deposit amount is greater than zero.\\n  ///\\n  /// @param _recipient The address of recipient who will receive the share.\\n  /// @param _amount The amount of token to deposit.\\n  function deposit(address _recipient, uint256 _amount) external;\\n\\n  /// @notice Withdraw underlying token or yield token from corresponding strategy.\\n  /// @dev Requirements:\\n  ///   + Caller should make sure the withdraw amount is greater than zero.\\n  ///\\n  /// @param _recipient The address of recipient who will receive the token.\\n  /// @param _amount The amount of token to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n\\n  /// @notice Harvest possible rewards from strategy.\\n  ///\\n  /// @param _zapper The address of zap contract used to zap rewards.\\n  /// @param _intermediate The address of intermediate token to zap.\\n  /// @return amount The amount of corresponding reward token.\\n  function harvest(address _zapper, address _intermediate) external returns (uint256 amount);\\n\\n  /// @notice Emergency function to execute arbitrary call.\\n  /// @dev This function should be only used in case of emergency. It should never be called explicitly\\n  ///  in any contract in normal case.\\n  ///\\n  /// @param _to The address of target contract to call.\\n  /// @param _value The value passed to the target contract.\\n  /// @param _data The calldata pseed to the target contract.\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external payable returns (bool, bytes memory);\\n\\n  /// @notice Do some extra work before migration.\\n  /// @param _newStrategy The address of new strategy.\\n  function prepareMigrate(address _newStrategy) external;\\n\\n  /// @notice Do some extra work after migration.\\n  /// @param _newStrategy The address of new strategy.\\n  function finishMigrate(address _newStrategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/strategies/AutoCompoundingStrategyBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IConverterRegistry } from \\\"../../helpers/converter/IConverterRegistry.sol\\\";\\nimport { ITokenConverter } from \\\"../../helpers/converter/ITokenConverter.sol\\\";\\n\\nimport { ConcentratorStrategyBaseV2 } from \\\"./ConcentratorStrategyBaseV2.sol\\\";\\n\\nabstract contract AutoCompoundingStrategyBaseV2 is ConcentratorStrategyBaseV2 {\\n  using SafeERC20 for IERC20;\\n\\n  function _harvest(\\n    address _converter,\\n    address _intermediate,\\n    address _target,\\n    address[] memory _rewards,\\n    uint256[] memory _amounts\\n  ) internal returns (uint256 _harvested) {\\n    address _registry = ITokenConverter(_converter).registry();\\n\\n    // 1. convert all rewards to intermediate token.\\n    uint256 _imAmount;\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      address _rewardToken = _rewards[i];\\n      uint256 _amount = _amounts[i];\\n      if (_rewardToken == _target) {\\n        _harvested += _amount;\\n      } else if (_rewardToken == _intermediate) {\\n        _imAmount += _amount;\\n      } else if (_amount > 0) {\\n        _transferToken(_rewardToken, _converter, _amount);\\n        _imAmount += _convert(\\n          _converter,\\n          _amount,\\n          IConverterRegistry(_registry).getRoutes(_rewardToken, _intermediate),\\n          address(this)\\n        );\\n      }\\n    }\\n\\n    // 2. add liquidity to staking token.\\n    if (_imAmount > 0) {\\n      _transferToken(_intermediate, _converter, _imAmount);\\n      _harvested += _convert(\\n        _converter,\\n        _imAmount,\\n        IConverterRegistry(_registry).getRoutes(_intermediate, _target),\\n        address(this)\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/strategies/ConcentratorStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts-v4/access/Ownable2Step.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-v4/proxy/utils/Initializable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts-v4/utils/Address.sol\\\";\\n\\nimport { IConcentratorStrategy } from \\\"../interfaces/IConcentratorStrategy.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n// solhint-disable no-empty-blocks\\n\\nabstract contract ConcentratorStrategyBase is Initializable, Ownable2Step, IConcentratorStrategy {\\n  using SafeERC20 for IERC20;\\n\\n  /**********\\n   * Errors *\\n   **********/\\n\\n  /// @dev Thrown when the caller is not operator.\\n  error CallerIsNotOperator();\\n\\n  /// @dev Thrown when sweep protected tokens.\\n  error TokenIsProtected();\\n\\n  /// @dev Thrown when the reward tokens is zero address.\\n  error RewardTokenIsZero();\\n\\n  /// @dev Thrown when the reward tokens are duplicated.\\n  error DuplicatedRewardToken();\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The address of operator.\\n  address public operator;\\n\\n  /// @notice The list of rewards token.\\n  address[] public rewards;\\n\\n  /// @notice The address of rewards stash contract..\\n  address public stash;\\n\\n  /// @notice Mapping the address of token to the protected status.\\n  mapping(address => bool) public isTokenProtected;\\n\\n  /// @dev reserved slots.\\n  uint256[46] private __gap;\\n\\n  /*************\\n   * Modifiers *\\n   *************/\\n\\n  modifier onlyOperator() {\\n    if (operator != _msgSender()) revert CallerIsNotOperator();\\n    _;\\n  }\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  function __ConcentratorStrategyBase_init(address _operator, address[] memory _rewards) internal onlyInitializing {\\n    _transferOwnership(_msgSender());\\n\\n    _checkRewards(_rewards);\\n\\n    operator = _operator;\\n    rewards = _rewards;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // fallback function to receive eth.\\n  receive() external payable {}\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function updateRewards(address[] memory _rewards) public virtual override onlyOperator {\\n    _checkRewards(_rewards);\\n\\n    delete rewards;\\n    rewards = _rewards;\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external payable override onlyOperator returns (bool, bytes memory) {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n    return (success, result);\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function prepareMigrate(address _newStrategy) external virtual override onlyOperator {}\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function finishMigrate(address _newStrategy) external virtual override onlyOperator {}\\n\\n  /************************\\n   * Restricted Functions *\\n   ************************/\\n\\n  /// @notice Sweep non-protected tokens from this contract.\\n  ///\\n  /// @param _tokens The list of tokens to sweep.\\n  function sweepToken(address[] memory _tokens) external onlyOwner {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      if (isTokenProtected[_tokens[i]]) revert TokenIsProtected();\\n    }\\n    _sweepToken(_tokens);\\n  }\\n\\n  /// @notice Update the address of stash contract.\\n  ///\\n  /// @param _newStash The address of new stash contract.\\n  function updateStash(address _newStash) external onlyOwner {\\n    stash = _newStash;\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to validate rewards list.\\n  /// @param _rewards The address list of reward tokens.\\n  function _checkRewards(address[] memory _rewards) internal pure {\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      if (_rewards[i] == address(0)) revert RewardTokenIsZero();\\n\\n      for (uint256 j = 0; j < i; j++) {\\n        if (_rewards[i] == _rewards[j]) revert DuplicatedRewardToken();\\n      }\\n    }\\n  }\\n\\n  /// @dev Internal function to sweep tokens from this contract.\\n  ///\\n  /// @param _tokens The list of tokens to sweep.\\n  function _sweepToken(address[] memory _tokens) internal {\\n    address _stash = stash;\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      address _token = _tokens[i];\\n      uint256 _balance = IERC20(_token).balanceOf(address(this));\\n      if (_balance > 0) {\\n        _transferToken(_token, _stash, _balance);\\n      }\\n    }\\n  }\\n\\n  /// @dev Internal function to transfer ETH or ERC20 tokens to some `_receiver`.\\n  ///\\n  /// @param _token The address of token to transfer, user `_token=address(0)` if transfer ETH.\\n  /// @param _receiver The address of token receiver.\\n  /// @param _amount The amount of token to transfer.\\n  function _transferToken(\\n    address _token,\\n    address _receiver,\\n    uint256 _amount\\n  ) internal {\\n    if (_token == address(0)) {\\n      Address.sendValue(payable(_receiver), _amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_receiver, _amount);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/strategies/ConcentratorStrategyBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ITokenConverter } from \\\"../../helpers/converter/ITokenConverter.sol\\\";\\n\\nimport { ConcentratorStrategyBase } from \\\"./ConcentratorStrategyBase.sol\\\";\\n\\nabstract contract ConcentratorStrategyBaseV2 is ConcentratorStrategyBase {\\n  /// @dev Internal function to convert tokens, assuming the token is already in converter.\\n  ///\\n  /// @param _converter The address of converter.\\n  /// @param _amountIn The amount of token to convert.\\n  /// @param _routes The list of route encodings used for converting.\\n  /// @param _receiver The address of recipient of the converted tokens.\\n  /// @return _amountOut The amount of tokens converted.\\n  function _convert(\\n    address _converter,\\n    uint256 _amountIn,\\n    uint256[] memory _routes,\\n    address _receiver\\n  ) internal returns (uint256 _amountOut) {\\n    _amountOut = _amountIn;\\n\\n    unchecked {\\n      uint256 _length = _routes.length;\\n      if (_length > 0) {\\n        _length -= 1;\\n        for (uint256 i = 0; i < _length; i++) {\\n          _amountOut = ITokenConverter(_converter).convert(_routes[i], _amountOut, _converter);\\n        }\\n        _amountOut = ITokenConverter(_converter).convert(_routes[_length], _amountOut, _receiver);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/IConverterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IConverterRegistry {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the converter route is updated.\\n  /// @param src The address of source token.\\n  /// @param dst The address of destination token.\\n  /// @param routes The list of route encodings.\\n  event UpdateRoute(address indexed src, address indexed dst, uint256[] routes);\\n\\n  /// @notice Emitted when the token converter is updated for some pool type.\\n  /// @param poolType The pool type updated.\\n  /// @param oldConverter The address of previous converter.\\n  /// @param newConverter The address of current converter.\\n  event UpdateConverter(uint256 indexed poolType, address indexed oldConverter, address indexed newConverter);\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the routes used to convert source token to destination token.\\n  /// @param src The address of source token.\\n  /// @param dst The address of destination token.\\n  /// @return routes The list of route encodings.\\n  function getRoutes(address src, address dst) external view returns (uint256[] memory routes);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Return the address of converter for a specific pool type.\\n  /// @param poolType The type of converter.\\n  /// @return converter The address of converter.\\n  function getConverter(uint256 poolType) external view returns (address converter);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ITokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface ITokenConverter {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Converter Registry.\\n  function registry() external view returns (address);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Query the output token amount according to the encoding.\\n  ///\\n  /// @dev See the comments in `convert` for the meaning of encoding.\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param amountOut The amount of output token received.\\n  function queryConvert(uint256 encoding, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Convert input token to output token according to the encoding.\\n  /// Assuming that the input token is already in the contract.\\n  ///\\n  /// @dev encoding for single route\\n  /// |   8 bits  | 2 bits |  246 bits  |\\n  /// | pool_type | action | customized |\\n  ///\\n  /// + pool_type = 0: UniswapV2, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | 1 bit | ... |\\n  ///                | pool address | fee_num | zero_for_one | twamm | ... |\\n  /// + pool_type = 1: UniswapV3, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | ... |\\n  ///                | pool address | fee_num | zero_for_one | ... |\\n  /// + pool_type = 2: BalancerV1, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 3: BalancerV2, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 4: CurvePlainPool or CurveFactoryPlainPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 5: CurveAPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 6: CurveYPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 7: CurveMetaPool or CurveFactoryMetaPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 8: CurveCryptoPool or CurveFactoryCryptoPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 9: ERC4626, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 10: Lido, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  ///\\n  /// Note: tokens + 1 is the number of tokens of the pool\\n  ///\\n  /// + action = 0: swap\\n  /// + action = 1: add liquidity / wrap / stake\\n  /// + action = 2: remove liquidity / unwrap / unstake\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param recipient The address of token receiver.\\n  /// @return amountOut The amount of output token received.\\n  function convert(\\n    uint256 encoding,\\n    uint256 amountIn,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n\\n  /// @notice Withdraw dust assets in this contract.\\n  /// @param token The address of token to withdraw.\\n  /// @param recipient The address of token receiver.\\n  function withdrawFund(address token, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvexVirtualBalanceRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IConvexVirtualBalanceRewardPool {\\n  function rewardToken() external view returns (address);\\n\\n  function earned(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/ICvxRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface ICvxRewardPool {\\n  function getReward(\\n    address _account,\\n    bool _claimExtras,\\n    bool _stake\\n  ) external;\\n\\n  function getReward(bool _stake) external;\\n\\n  function withdrawAll(bool claim) external;\\n\\n  function withdraw(uint256 _amount, bool claim) external;\\n\\n  function stakeFor(address _for, uint256 _amount) external;\\n\\n  function stakeAll() external;\\n\\n  function stake(uint256 _amount) external;\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function rewardToken() external view returns (address);\\n\\n  function extraRewards(uint256) external view returns (address);\\n\\n  function extraRewardsLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IStashTokenWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IStashTokenWrapper {\\n  function token() external view returns (address);\\n\\n  function rewardPool() external view returns (address);\\n\\n  function isInvalid() external view returns (bool);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address _account) external view returns (uint256);\\n\\n  function transfer(address _recipient, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexBasicRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IConvexBasicRewards {\\n  function pid() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function periodFinish() external view returns (uint256);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function stakingToken() external view returns (address);\\n\\n  function stakeFor(address, uint256) external returns (bool);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function earned(address) external view returns (uint256);\\n\\n  function withdrawAll(bool) external returns (bool);\\n\\n  function withdraw(uint256, bool) external returns (bool);\\n\\n  function withdrawAndUnwrap(uint256, bool) external returns (bool);\\n\\n  function getReward() external returns (bool);\\n\\n  function stake(uint256) external returns (bool);\\n\\n  function rewardToken() external view returns (address);\\n\\n  function extraRewards(uint256) external view returns (address);\\n\\n  function extraRewardsLength() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicatedRewardToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTokenIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsProtected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"finishMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_intermediate\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenProtected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"prepareMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStash\",\"type\":\"address\"}],\"name\":\"updateStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CvxStakingStrategy", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b0903ab70a7467ee5756074b31ac88aebb8fb777000000000000000000000000cf50b810e57ac33b91dcf525c6ddd9881b139332", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}