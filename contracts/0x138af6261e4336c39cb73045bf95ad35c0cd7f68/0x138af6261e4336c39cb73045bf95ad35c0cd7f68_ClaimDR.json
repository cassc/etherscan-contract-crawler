{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = 0x30082Eddca0B710FaC8DA5dA713910FE5c25f1Bd; //_msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    //   function renounceOwnership() public onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    //   }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract dogerush {\r\n    struct userStruct {\r\n        bool isExist;\r\n        uint256 investment;\r\n        uint256 ClaimTime;\r\n        uint256 lockedAmount;\r\n    }\r\n    mapping(address => userStruct) public user;\r\n}\r\n\r\nabstract contract Token {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual;\r\n\r\n    function transfer(address recipient, uint256 amount) external virtual;\r\n\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n}\r\n\r\npragma solidity 0.6.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n    function percent(\r\n        uint256 value,\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 precision\r\n    ) internal pure returns (uint256 quotient) {\r\n        uint256 _numerator = numerator * 10**(precision + 1);\r\n        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\r\n        return ((value * _quotient) / 1000000000000000000);\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract PriceContract {\r\n    AggregatorV3Interface internal priceFeed;\r\n    address private priceAddress = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // ETH/USD Mainnet\r\n\r\n    //address private priceAddress = 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e; // ETH/USD Goerli Testnet\r\n    //https://docs.chain.link/docs/bnb-chain-addresses/\r\n\r\n    constructor() public {\r\n        priceFeed = AggregatorV3Interface(priceAddress);\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.latestRoundData();\r\n        // If the round is not complete yet, timestamp is 0\r\n        require(timeStamp > 0, \"Round not complete\");\r\n        return (uint256)(price);\r\n    }\r\n}\r\n\r\ncontract ClaimDR is Ownable, PriceContract {\r\n    uint256 public w_fee = 200e18;\r\n    bool public claimActive = false;\r\n    dogerush Dogerush;\r\n    Token token = Token(0x2d6e9d6b362354a5Ca7b03581Aa2aAc81bb530Db); // Token;\r\n\r\n    mapping(address => uint256) public claimedAmount;\r\n    mapping(address => bool) public w_fee_paid;\r\n\r\n    constructor() public {\r\n        Dogerush = dogerush(0xAcf9adA6BC9e74d544556647355cB6570Ac1BC8A);\r\n    }\r\n\r\n    function getUserLockedTokensFromContract(address _user)\r\n        public\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return Dogerush.user(_user);\r\n    }\r\n\r\n    function calculateUsd(uint256 ethAmount) public view returns (uint256) {\r\n        uint256 ethPrice = getLatestPrice();\r\n        uint256 incomingEthToUsd = SafeMath.mul(ethAmount, ethPrice);\r\n        uint256 fixIncomingEthToUsd = SafeMath.div(incomingEthToUsd, 1e8);\r\n        return fixIncomingEthToUsd;\r\n    }\r\n\r\n    function claimTokens() public payable {\r\n        (, , , uint256 lockedAmount) = getUserLockedTokensFromContract(\r\n            msg.sender\r\n        );\r\n        require(claimActive == true, \"Claim is turned off at the moment.\");\r\n        require(\r\n            getTokenBalance() >= lockedAmount,\r\n            \"Contract balance is insufficient\"\r\n        );\r\n        require(lockedAmount > 0, \"No Tokens to Claim\");\r\n        require(\r\n            lockedAmount > claimedAmount[msg.sender],\r\n            \"You have already claimed your tokens.\"\r\n        );\r\n\r\n        if (!w_fee_paid[msg.sender]) {\r\n            uint256 feeReceived = calculateUsd(msg.value);\r\n            require(\r\n                feeReceived >= w_fee,\r\n                \"Users have to pay a withdrawal fee.\"\r\n            );\r\n            address payable ICOadmin = address(uint160(owner()));\r\n            ICOadmin.transfer(msg.value);\r\n            w_fee_paid[msg.sender] = true;\r\n        }\r\n\r\n        claimedAmount[msg.sender] = lockedAmount;\r\n        token.transfer(msg.sender, lockedAmount);\r\n    }\r\n\r\n    function getTokenBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function toggleSaleActive() external onlyOwner {\r\n        claimActive = !claimActive;\r\n    }\r\n\r\n    function changeWithdrawFee(uint256 _newfee) external onlyOwner {\r\n        w_fee = _newfee;\r\n    }\r\n\r\n    function withdrawEther() external payable onlyOwner {\r\n        address payable ICOadmin = address(uint160(owner()));\r\n        ICOadmin.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawRemainingTokensAfterICO() public {\r\n        require(msg.sender == owner(), \"Only owner can update contract!\");\r\n        require(\r\n            token.balanceOf(address(this)) >= 0,\r\n            \"Tokens Not Available in contract, contact Admin!\"\r\n        );\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculateUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfee\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLockedTokensFromContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"w_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"w_fee_paid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingTokensAfterICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClaimDR", "CompilerVersion": "v0.6.0+commit.26b70077", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6e90a3495bd8a43352e9d71b793b9678419f437d28223ebaca2200e0efa1b6d"}