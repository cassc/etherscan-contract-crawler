{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IGT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @dev @brougkr\\n */\\npragma solidity 0.8.19;\\ninterface IGT \\n{ \\n    /**\\n     * @dev { Golden Token Burn }\\n     */\\n    function _LiveMintBurn(uint TicketID) external returns (address Recipient); \\n}\"\r\n    },\r\n    \"contracts/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @title IMinter Minter Interface\\n * @author @brougkr\\n */\\npragma solidity ^0.8.19;\\ninterface IMinter \\n{ \\n    function purchase(uint256 _projectId) payable external returns (uint tokenID); // Custom\\n    function purchaseTo(address _to, uint _projectId) payable external returns (uint tokenID); // ArtBlocks Standard Minter\\n    function purchaseTo(address _to) external returns (uint tokenID); // Custom\\n    function purchaseTo(address _to, uint _projectId, address _ownedNFTAddress, uint _ownedNFTTokenID) payable external returns (uint tokenID); // ArtBlocks PolyMinter\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n    function _MintToFactory(uint ProjectID, address To, uint Amount) external; // MintPassFactory\\n    function _MintToFactory(address To, uint Amount) external; // MintPassBespoke\\n}\\n\"\r\n    },\r\n    \"contracts/IMP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @dev @brougkr\\n */\\npragma solidity 0.8.19;\\ninterface IMP \\n{ \\n    /**\\n     * @dev { For Instances Where Golden Token Or Artists Have A Bespoke Mint Pass Contract }\\n     */\\n    function _LiveMintBurn(uint TicketID) external returns (address Recipient, uint ArtistID); \\n}\"\r\n    },\r\n    \"contracts/LiveMintBuenosAires.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @dev: @brougkr\\n */\\npragma solidity 0.8.19;\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { IMinter } from \\\"./IMinter.sol\\\";\\nimport { IMP } from \\\"./IMP.sol\\\";\\nimport { IGT } from \\\"./IGT.sol\\\";\\ncontract LiveMintBuenosAires is Ownable, ReentrancyGuard\\n{  \\n    struct City\\n    {\\n        string _Name;                       // _Name\\n        uint _QRCurrentIndex;               // _QRCurrentIndex\\n        bytes32 _RootEligibility;           // _RootEligibility\\n        bytes32 _RootAmount;                // _RootAmount\\n        bool _RemoteMintingEnabledArtists;  // _RemoteMintingEnabledArtists\\n        bool _RemoteMintingEnabledCitizens; // _RemoteMintingEnabledCitizen\\n    }\\n\\n    struct Artist\\n    {\\n        address _MintPass;        // _MintPass\\n        address _Minter;          // _Minter\\n        address _PolyptychSource; // _PolyptychSource\\n        uint _MaxSupply;          // _MaxSupply\\n        uint _ArtBlocksProjectID; // _ArtBlocksProjectID \\n        uint _PolyStart;          // _PolyStart\\n        uint _PolyEnd;            // _PolyEnd\\n    }\\n\\n    /*-------------------*/\\n    /*  STATE VARIABLES  */\\n    /*-------------------*/\\n\\n    bytes32 private constant _AUTHORIZED = keccak256(\\\"AUTHORIZED\\\");                        // Authorized Role\\n    bytes32 private constant _MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");                      // Minter Role\\n    address private constant _DN = 0x00000000000076A84feF008CDAbe6409d2FE638B;             // delegate.cash Delegation Registry\\n    address private constant _GOLDEN_TOKEN = 0x985e1932FFd2aA4bC9cE611DFe12816A248cD2cE;   // Golden Token Address \\n    address private constant _CITIZEN_MINTER = 0xDd06d8483868Cd0C5E69C24eEaA2A5F2bEaFd42b; // ArtBlocks Minter Contract\\n    address private constant _BRT_MULTISIG = 0xB96E81f80b3AEEf65CB6d0E280b15FD5DBE71937;   // BRT Multisig\\n    address public _MARKETPLACE;                                                           // Marketplace Address\\n    uint public _CurrentCityIndex = 7;                                                     // Current City Index\\n    uint public _UniqueArtistsInvoked;                                                     // Unique Artists Invoked\\n\\n    /*-------------------*/\\n    /*     MAPPINGS      */\\n    /*-------------------*/\\n    \\n    mapping(uint => Artist) public Artists;                              // [ArtistID] => Artist\\n    mapping(uint => City) public Cities;                                 // [CityIndex] => City Struct\\n    mapping(uint => mapping(address => bool)) public _QRRedeemed;        // [CityIndex][Wallet] => If User Has Redeemed QR\\n    mapping(uint => mapping(address => uint)) public _QRAllocation;      // [CityIndex][Wallet] => Wallet's QR Code Allocation\\n    mapping(uint => mapping(uint => address)) public _BrightListCitizen; // [CityIndex][TicketID] => Address Of CryptoCitizen Minting Recipient \\n    mapping(uint => mapping(uint => address)) public _BrightListArtist;  // [ArtistID][TicketID] => Address Of Artist NFT Recipient\\n    mapping(uint => mapping(uint => uint)) public _MintedTokenIDCitizen; // [CityIndex][TicketID] => MintedTokenID\\n    mapping(uint => mapping(uint => uint)) public _MintedTokenIDArtist;  // [ArtistID][TicketID] => MintedTokenID\\n    mapping(uint => mapping(uint => bool)) public _MintedArtist;         // [ArtistID][TicketID] => If Minted\\n    mapping(uint => mapping(uint => bool)) public _MintedCitizen;        // [CityIndex][TicketID] => If Golden Ticket ID Has Minted Or Not\\n    mapping(uint => mapping(uint => uint)) public _ArtBlocksProjectID;   // [ArtistID][TicketID] => ArtBlocksProjectID\\n    mapping(uint => mapping(address => uint)) public _QRsRedeemed;       // [CityIndex][Wallet] => Amount Of QRs Redeemed\\n    mapping(uint => uint) public AmountRemaining;                        // [ArtistID] => Mints Remaining\\n    mapping(address => bytes32) public Role;                             // [Wallet] => BRT Minter Role\\n\\n    /*-------------------*/\\n    /*      EVENTS       */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Emitted When `Redeemer` IRL-mints CryptoCitizen Corresponding To Their Redeemed `TicketID`.\\n     **/\\n    event LiveMintComplete(address Redeemer, uint TicketID, uint TokenID);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` IRL-mints A Artist NFT Corresponding To Their Redeemed `TicketID`.\\n     */\\n    event LiveMintCompleteArtist(address Recipient, uint ArtistID, uint TicketID, uint MintedWorkTokenID);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` Redeems Golden Token Corresponding To `TicketID` \\n     **/\\n    event QRRedeemed(address Redeemer, uint TicketID);\\n\\n    /**\\n     * @dev Emitted When A Contract Is Authorized\\n     */\\n    event AuthorizedContract(address NewAddress);\\n\\n    /**\\n     * @dev Emitted When A Contract Is Deauthorized\\n     */\\n    event DeauthorizedContract(address NewAddress);\\n\\n    /**\\n     * @dev Emitted When A TokenID Is Minted From Marketplace\\n     */\\n    event Minted(uint TokenID);\\n\\n    /*-------------------*/\\n    /*    CONSTRUCTOR    */\\n    /*-------------------*/\\n\\n    constructor()\\n    { \\n        Cities[0]._Name = \\\"CryptoGalacticans\\\";  \\n        Cities[1]._Name = \\\"CryptoVenetians\\\";    \\n        Cities[2]._Name = \\\"CryptoNewYorkers\\\";   \\n        Cities[3]._Name = \\\"CryptoBerliners\\\";    \\n        Cities[4]._Name = \\\"CryptoLondoners\\\";    \\n        Cities[5]._Name = \\\"CryptoMexas\\\";        \\n        Cities[6]._Name = \\\"CryptoTokyites\\\";     \\n        Cities[7]._Name = \\\"CryptoPatagonians\\\"; \\n        Cities[7]._QRCurrentIndex = 666;\\n        Cities[8]._Name = \\\"CryptoParisians\\\";\\n        Cities[8] ._QRCurrentIndex = 999;\\n        Cities[9]._Name = \\\"CryptoVenezians\\\";\\n        Cities[10]._QRCurrentIndex = 1332; \\n        Role[0xe06F5FAE754e81Bc050215fF89B03d9e9FF20700] = _AUTHORIZED;  // `operator.brightmoments.eth`\\n        Role[0x18B7511938FBe2EE08ADf3d4A24edB00A5C9B783] = _AUTHORIZED;  // `phil.brightmoments.eth`\\n        Role[0x1A0a3E3AE390a0710f8A6d00587082273eA8F6C9] = _MINTER_ROLE; // BRT Minter #1\\n        Role[0x4d8013b0c264034CBf22De9DF33e22f58D52F207] = _MINTER_ROLE; // BRT Minter #2\\n        Role[0x4D9A8CF2fE52b8D49C7F7EAA87b2886c2bCB4160] = _MINTER_ROLE; // BRT Minter #3\\n        Role[0x124fd966A0D83aA020D3C54AE2c9f4800b46F460] = _MINTER_ROLE; // BRT Minter #4\\n        Role[0x100469feA90Ac1Fe1073E1B2b5c020A8413635c4] = _MINTER_ROLE; // BRT Minter #5\\n        Role[0x756De4236373fd17652b377315954ca327412bBA] = _MINTER_ROLE; // BRT Minter #6\\n        Role[0xc5Dfba6ef7803665C1BDE478B51Bd7eB257A2Cb9] = _MINTER_ROLE; // BRT Minter #7\\n        Role[0xFBF32b29Bcf8fEe32d43a4Bfd3e7249daec457C0] = _MINTER_ROLE; // BRT Minter #8\\n        Role[0xF2A15A83DEE7f03C70936449037d65a1C100FF27] = _MINTER_ROLE; // BRT Minter #9\\n        Role[0x1D2BAB965a4bB72f177Cd641C7BacF3d8257230D] = _MINTER_ROLE; // BRT Minter #10\\n        Role[0x2e51E8b950D72BDf003b58E357C2BA28FB77c7fB] = _MINTER_ROLE; // BRT Minter #11\\n        Role[0x8a7186dECb91Da854090be8226222eA42c5eeCb6] = _MINTER_ROLE; // BRT Minter #12\\n    }\\n\\n    /*---------------------*/\\n    /*    QR REDEMPTION    */\\n    /*---------------------*/\\n\\n    /**\\n     * @dev Redeems Spot(s) For IRL Minting\\n     * @param ProofEligibility Proof For Merkle Eligibility\\n     * @param ProofAmounts Proof For Merkle Amounts\\n     * @param Vault Address Of Vault For Merkle Eligibility (Delegate.xyz)\\n     * @param Amount Amount Of QR Codes To Redeem\\n     */\\n    function RedeemQR (\\n        bytes32[] calldata ProofEligibility, \\n        bytes32[] calldata ProofAmounts,\\n        address Vault, \\n        uint Amount\\n   ) external nonReentrant {    \\n        address Recipient = msg.sender;\\n        if(Vault != address(0)) { if(IDelegationRegistry(_DN).checkDelegateForAll(msg.sender, Vault)) { Recipient = Vault; } } \\n        readQREligibility(Recipient, ProofEligibility, ProofAmounts, Amount);\\n        _QRsRedeemed[_CurrentCityIndex][Recipient] += Amount;\\n        if(Amount == 1) // User Is Able To Redeem Explicitly 1 QR Code\\n        {\\n            require(!_QRRedeemed[_CurrentCityIndex][Recipient], \\\"LiveMint: User Has Already Redeemed\\\");\\n            _BrightListCitizen[_CurrentCityIndex][Cities[_CurrentCityIndex]._QRCurrentIndex] = Recipient;\\n            emit QRRedeemed(Recipient, Cities[_CurrentCityIndex]._QRCurrentIndex);\\n            Cities[_CurrentCityIndex]._QRCurrentIndex++; \\n        }\\n        else // User Is Able To Redeem More Than 1 QR Code Because Their Allocation Is Greater Than 1\\n        {\\n            require (\\n                _QRsRedeemed[_CurrentCityIndex][Recipient] <= _QRAllocation[_CurrentCityIndex][Recipient],\\n                \\\"LiveMint: User Has No Remaining Authorized QRs To Redeem\\\"\\n            );\\n            uint _CurrentQR = Cities[_CurrentCityIndex]._QRCurrentIndex;\\n            uint _Limit = Amount + _CurrentQR;\\n            uint _Counter;\\n            Cities[_CurrentCityIndex]._QRCurrentIndex = _Limit;\\n            for(_CurrentQR; _CurrentQR < _Limit; _CurrentQR++)\\n            {\\n                _BrightListCitizen[_CurrentCityIndex][_CurrentQR] = Recipient;\\n                emit QRRedeemed(Recipient, _CurrentQR);\\n                _Counter++;\\n            }\\n        }\\n        _QRRedeemed[_CurrentCityIndex][Recipient] = true;\\n    }\\n\\n    /**\\n     * @dev Remote Mints Artist NFTs Via Mint Pass LiveMintBurn\\n     * @param ArtistIDs Array Of ArtistIDs To Mint\\n     * @param TicketIDs Array Of TicketIDs To Mint\\n     */\\n    function RemoteMintArtists(uint[] calldata ArtistIDs, uint[][] calldata TicketIDs) external nonReentrant\\n    {\\n        require(tx.origin == msg.sender, \\\"LiveMint: msg.sender Must Be EOA\\\");\\n        require(Cities[_CurrentCityIndex]._RemoteMintingEnabledArtists, \\\"LiveMint: Remote Minting Of Artists Not Active\\\");\\n        address Recipient;\\n        address MintPass;\\n        address Minter;\\n        uint ArtBlocksProjectID;\\n        uint MintedWorkTokenID;\\n        uint TicketID;\\n        uint ActiveArtistID;\\n        for(uint ArtistIDIndex; ArtistIDIndex < ArtistIDs.length; ArtistIDIndex++)\\n        {\\n            ActiveArtistID = ArtistIDs[ArtistIDIndex];\\n            MintPass = Artists[ActiveArtistID]._MintPass;\\n            Minter = Artists[ActiveArtistID]._Minter;\\n            for(uint TicketIDIndex; TicketIDIndex < TicketIDs[ArtistIDIndex].length; TicketIDIndex++)\\n            {\\n                TicketID = TicketIDs[ArtistIDIndex][TicketIDIndex];\\n                require(!_MintedArtist[ActiveArtistID][TicketID], \\\"LiveMint: Artist Mint Pass Already Minted\\\");\\n                _MintedArtist[ActiveArtistID][TicketID] = true;\\n                (Recipient, ArtBlocksProjectID) = IMP(MintPass)._LiveMintBurn(TicketID);\\n                require(Recipient == msg.sender, \\\"LiveMint: msg.sender Is Not The Owner Of Input Mint Pass\\\");\\n                MintedWorkTokenID = IMinter(Minter).purchaseTo(Recipient, ArtBlocksProjectID);\\n                _MintedTokenIDArtist[ActiveArtistID][TicketID] = MintedWorkTokenID;\\n                emit LiveMintCompleteArtist(Recipient, ActiveArtistID, TicketID, MintedWorkTokenID);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Remote Mints GoldenTokens For Citizens\\n     * @param TicketIDs Array Of TicketIDs To Mint\\n     */\\n    function RemoteMintCitizens(uint[] calldata TicketIDs) external nonReentrant\\n    {\\n        require(tx.origin == msg.sender, \\\"LiveMint: msg.sender Must Be EOA\\\");\\n        require(Cities[_CurrentCityIndex]._RemoteMintingEnabledCitizens, \\\"LiveMint: Remote Minting Of Citizens Not Active\\\");\\n        address Recipient;\\n        uint MintedWorkTokenID;\\n        for(uint TicketID; TicketID < TicketIDs.length; TicketID++)\\n        {\\n            require(TicketIDs[TicketID] < 666, \\\"LiveMint: Invalid Input TicketID, Must Be Golden Token\\\");\\n            require(!_MintedCitizen[_CurrentCityIndex][TicketIDs[TicketID]], \\\"LiveMint: Golden Token Already Minted\\\");\\n            _MintedCitizen[_CurrentCityIndex][TicketIDs[TicketID]] = true;\\n            Recipient = IGT(_GOLDEN_TOKEN)._LiveMintBurn(TicketIDs[TicketID]);\\n            require(Recipient == msg.sender, \\\"LiveMint: msg.sender Is Not Owner Of Golden Token\\\");\\n            MintedWorkTokenID = IMinter(_CITIZEN_MINTER).purchaseTo(Recipient, _CurrentCityIndex);\\n            _MintedTokenIDCitizen[_CurrentCityIndex][TicketIDs[TicketID]] = MintedWorkTokenID;\\n            emit LiveMintComplete(Recipient, TicketIDs[TicketID], MintedWorkTokenID); \\n        }\\n    }\\n\\n    /*--------------------*/\\n    /*    LIVE MINTING    */\\n    /*--------------------*/\\n\\n    /**\\n     * @dev Batch Mints Verified Users On The Brightlist CryptoCitizens\\n     * @param TicketIDs Array Of TicketIDs To Mint\\n     * note: { For CryptoCitizen Cities }\\n     */\\n    function _LiveMintCitizen(uint[] calldata TicketIDs) external onlyMinter\\n    {\\n        address Recipient;\\n        uint MintedWorkTokenID;\\n        for(uint TicketID; TicketID < TicketIDs.length; TicketID++)\\n        {\\n            require(!_MintedCitizen[_CurrentCityIndex][TicketIDs[TicketID]], \\\"LiveMint: Golden Token Already Minted\\\");\\n            if(_BrightListCitizen[_CurrentCityIndex][TicketIDs[TicketID]] != address(0))\\n            {\\n                Recipient = _BrightListCitizen[_CurrentCityIndex][TicketIDs[TicketID]];\\n            }\\n            else if (TicketIDs[TicketID] < 666) { Recipient = IGT(_GOLDEN_TOKEN)._LiveMintBurn(TicketIDs[TicketID]); }\\n            else { revert(\\\"LiveMint: TicketID Is Not Eligible To Mint Citizen\\\"); }\\n            require(Recipient != address(0), \\\"LiveMint: Invalid Recipient\\\");\\n            _MintedCitizen[_CurrentCityIndex][TicketIDs[TicketID]] = true;\\n            MintedWorkTokenID = IMinter(_CITIZEN_MINTER).purchaseTo(Recipient, _CurrentCityIndex);\\n            _MintedTokenIDCitizen[_CurrentCityIndex][TicketIDs[TicketID]] = MintedWorkTokenID;\\n            emit LiveMintComplete(Recipient, TicketIDs[TicketID], MintedWorkTokenID); \\n        }\\n    }\\n\\n    /**\\n     * @dev Burns Artist Mint Pass In Exchange For The Minted Work\\n     * @param ArtistID ArtistID To Mint\\n     * @param TicketIDs Array Of TicketIDs To Mint\\n     * note: { For Instances Where Multiple Artists Share The Same Mint Pass & Return (Recipient, ArtBlocksProjectID) }\\n     */\\n    function _LiveMintArtist(uint ArtistID, uint[] calldata TicketIDs) external onlyMinter\\n    {\\n        address Recipient;\\n        address MintPass = Artists[ArtistID]._MintPass;\\n        address Minter = Artists[ArtistID]._Minter;\\n        uint ArtBlocksProjectID;\\n        uint MintedWorkTokenID;\\n        uint TicketID;\\n        require(AmountRemaining[ArtistID] > 0, \\\"LiveMint: ArtistID Mint Limit Reached\\\");\\n        require(TicketIDs.length <= AmountRemaining[ArtistID], \\\"LiveMint: TicketID Length Exceeds ArtistID Mint Limit\\\");\\n        AmountRemaining[ArtistID] = AmountRemaining[ArtistID] - TicketIDs.length;\\n        for(uint x; x < TicketIDs.length; x++)\\n        {\\n            TicketID = TicketIDs[x];\\n            require(!_MintedArtist[ArtistID][TicketID], \\\"LiveMint: Artist Mint Pass Already Minted\\\");\\n            _MintedArtist[ArtistID][TicketID] = true;\\n            (Recipient, ArtBlocksProjectID) = IMP(MintPass)._LiveMintBurn(TicketID);\\n            MintedWorkTokenID = IMinter(Minter).purchaseTo(Recipient, ArtBlocksProjectID); // Pre-Defined Minter Contract\\n            _MintedTokenIDArtist[ArtistID][TicketID] = MintedWorkTokenID;\\n            emit LiveMintCompleteArtist(Recipient, ArtistID, TicketID, MintedWorkTokenID);\\n        }\\n    }\\n\\n    /**\\n     * @dev Burns Artist Mint Pass In Exchange For The Minted Work\\n     * @param ArtistIDs Array Of ArtistIDs To Mint\\n     * @param TicketIDs Array Of TicketIDs To Mint\\n     * note: { For Instances Where Multiple Artists Share The Same Mint Pass & Return (Recipient, ArtBlocksProjectID) }\\n     */\\n    function _LiveMintArtistBatch(uint[] calldata ArtistIDs, uint[][] calldata TicketIDs) external onlyMinter\\n    {\\n        address Recipient;\\n        address MintPass;\\n        address Minter;\\n        uint ArtBlocksProjectID;\\n        uint MintedWorkTokenID;\\n        uint TicketID;\\n        uint ActiveArtistID;\\n        for(uint ArtistIDIndex; ArtistIDIndex < ArtistIDs.length; ArtistIDIndex++)\\n        {\\n            ActiveArtistID = ArtistIDs[ArtistIDIndex];\\n            MintPass = Artists[ActiveArtistID]._MintPass;\\n            Minter = Artists[ActiveArtistID]._Minter;\\n            for(uint TicketIDIndex; TicketIDIndex < TicketIDs[ArtistIDIndex].length; TicketIDIndex++)\\n            {\\n                TicketID = TicketIDs[ArtistIDIndex][TicketIDIndex];\\n                require(!_MintedArtist[ActiveArtistID][TicketID], \\\"LiveMint: Artist Mint Pass Already Minted\\\");\\n                _MintedArtist[ActiveArtistID][TicketID] = true;\\n                (Recipient, ArtBlocksProjectID) = IMP(MintPass)._LiveMintBurn(TicketID);\\n                MintedWorkTokenID = IMinter(Minter).purchaseTo(Recipient, ArtBlocksProjectID);\\n                _MintedTokenIDArtist[ActiveArtistID][TicketID] = MintedWorkTokenID;\\n                emit LiveMintCompleteArtist(Recipient, ActiveArtistID, TicketID, MintedWorkTokenID);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints An Artist Work Directly From Marketplace\\n     * @param Recipient Address To Mint To\\n     * @param ArtistID ArtistID To Mint\\n     * @param Amount Amount To Mint\\n     */\\n    function _LiveMintMarketplace(address Recipient, uint ArtistID, uint Amount) external onlyMarketplace\\n    {\\n        uint _AmountRemaining = AmountRemaining[ArtistID];\\n        require(Amount <= _AmountRemaining, \\\"LiveMint: Not Enough Mints Remaining For Desired ArtistID\\\");\\n        AmountRemaining[ArtistID] = _AmountRemaining - Amount;\\n        address _Minter = Artists[ArtistID]._Minter;\\n        IMinter _TargetMinter = IMinter(_Minter);\\n        uint _ABProjectID = Artists[ArtistID]._ArtBlocksProjectID;\\n        uint _TokenID;\\n        for(uint PurchaseAmt; PurchaseAmt < Amount; PurchaseAmt++)\\n        {\\n            _TokenID = _TargetMinter.purchaseTo(Recipient, _ABProjectID);\\n            emit Minted (_TokenID );\\n        }\\n    }\\n\\n    /*-------------------*/\\n    /*  OWNER FUNCTIONS  */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Initializes A LiveMint Artist\\n     */\\n    function __InitLiveMint(Artist memory _Params) external onlyAdmin returns (uint ArtistID)\\n    {\\n        ArtistID = _UniqueArtistsInvoked;\\n        AmountRemaining[ArtistID] = _Params._MaxSupply;\\n        Artists[ArtistID] = _Params;\\n        _UniqueArtistsInvoked = ArtistID + 1;\\n        return ArtistID;\\n    }\\n\\n    /**\\n     * @dev Changes Merkle Root For Citizen LiveMint Eligibility\\n     * @param NewRoot The New Merkle Root To Seed\\n     */\\n    function __ChangeRootEligibility (bytes32 NewRoot) external onlyAdmin { Cities[_CurrentCityIndex]._RootEligibility = NewRoot; }\\n\\n    /**\\n     * @dev Changes Merkle Root For Citizen LiveMint Amounts\\n     * @param NewRoot The New Merkle Root To Seed\\n     */\\n    function __ChangeRootAmounts (bytes32 NewRoot) external onlyAdmin { Cities[_CurrentCityIndex]._RootAmount = NewRoot; }\\n\\n    /**\\n     * @dev Changes Merkle Root For Artist LiveMints\\n     * @param EligibilityRoot The New Merkle Eligibility Root To Seed\\n     * @param EligibilityAmount The New Merkle Amount Root To Seed\\n     */\\n    function __ChangeRoots (bytes32 EligibilityRoot, bytes32 EligibilityAmount) external onlyAdmin\\n    {\\n        Cities[_CurrentCityIndex]._RootEligibility = EligibilityRoot;\\n        Cities[_CurrentCityIndex]._RootAmount = EligibilityAmount;\\n    }\\n\\n    /**\\n     * @dev Overwrites QR Allocation(s)\\n     * @param Addresses Array Of Addresses To Overwrite\\n     * @param Amounts Array Of Amounts To Overwrite\\n     */\\n    function __QRAllocationsOverwrite (address[] calldata Addresses, uint[] calldata Amounts) external onlyAdmin\\n    {\\n        require(Addresses.length == Amounts.length, \\\"LiveMint: Input Arrays Must Match\\\");\\n        for(uint x; x < Addresses.length; x++) { _QRAllocation[_CurrentCityIndex][Addresses[x]] = Amounts[x]; }\\n    }\\n\\n    /**\\n     * @dev Increments QR Allocation(s)\\n     * @param Addresses Array Of Addresses To Increment\\n     * @param Amounts Array Of Amounts To Increment\\n     */\\n    function __QRAllocationsIncrement (address[] calldata Addresses, uint[] calldata Amounts) external onlyAdmin\\n    {\\n        require(Addresses.length == Amounts.length, \\\"LiveMint: Input Arrays Must Match\\\");\\n        for(uint x; x < Addresses.length; x++) { _QRAllocation[_CurrentCityIndex][Addresses[x]] += Amounts[x]; }\\n    }\\n\\n    /**\\n     * @dev Overrides QR To Mint To Multisig\\n     * @param TicketIDs Array Of TicketIDs To Override\\n     */\\n    function __QRAllocationsSetNoShow (uint[] calldata TicketIDs) external onlyAdmin\\n    {\\n        for(uint TicketIndex; TicketIndex < TicketIDs.length; TicketIndex++)\\n        {\\n            require(!_MintedCitizen[_CurrentCityIndex][TicketIDs[TicketIndex]], \\\"LiveMint: Ticket ID Already Minted\\\");\\n            require(TicketIDs[TicketIndex] > 666, \\\"LiveMint: Invalid TicketID\\\");\\n            _BrightListCitizen[_CurrentCityIndex][TicketIDs[TicketIndex]] = _BRT_MULTISIG;\\n        }\\n    }\\n\\n    /*-------------------*/\\n    /*  OWNER FUNCTIONS  */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Changes The Current Active Marketplace Address\\n     * @param NewAddress The New Address To Seed\\n     */\\n    function __ChangeMarketplaceAddress(address NewAddress) external onlyOwner { _MARKETPLACE = NewAddress; }\\n\\n    /**\\n     * @dev Flips Remote Minting State For CryptoCitizens (True or False)\\n     */\\n    function __FlipRemoteMintingCitizens() external onlyOwner \\n    { \\n        Cities[_CurrentCityIndex]._RemoteMintingEnabledCitizens = !Cities[_CurrentCityIndex]._RemoteMintingEnabledCitizens; \\n    }\\n\\n    /**\\n     * @dev Flips Remote Minting State For Artists\\n     */\\n    function __FlipRemoteMintingArtists() external onlyOwner \\n    { \\n        Cities[_CurrentCityIndex]._RemoteMintingEnabledArtists = !Cities[_CurrentCityIndex]._RemoteMintingEnabledArtists; \\n    }\\n\\n    /**\\n     * @dev Flips Remote Minting State For Both Artists & Citizens\\n     */\\n    function __FlipRemoteMintingStates() external onlyOwner\\n    {\\n        Cities[_CurrentCityIndex]._RemoteMintingEnabledArtists = !Cities[_CurrentCityIndex]._RemoteMintingEnabledArtists; \\n        Cities[_CurrentCityIndex]._RemoteMintingEnabledCitizens = !Cities[_CurrentCityIndex]._RemoteMintingEnabledCitizens;\\n    }\\n\\n    /**\\n     * @dev Grants Address BRT Minter Role\\n     * @param Minter Address To Grant Role\\n     * note: BRT Minter Role Is Required To Mint NFTs\\n     **/\\n    function __AddMinter(address Minter) external onlyOwner { Role[Minter] = _MINTER_ROLE; }\\n    \\n    /**\\n     * @dev Deactivates Address From BRT Minter Role\\n     * @param Minter Address To Remove Role\\n     * note: BRT Minter Role Is Required To Mint NFTs\\n     **/\\n    function __RemoveMinter(address Minter) external onlyOwner { Role[Minter] = 0x0; }\\n\\n    /**\\n     * @dev Changes Mint Pass Address For Artist LiveMints\\n     * @param ProjectID Artist ProjectID\\n     * @param Contract Mint Pass Contract Address\\n     * note: Mint Pass Is Burned In Exchange For Minted Work\\n     */\\n    function __ChangeMintPass(uint ProjectID, address Contract) external onlyOwner { Artists[ProjectID]._MintPass = Contract; }\\n\\n    /**\\n     * @dev Changes Minter Address For Artist LiveMints\\n     * @param ProjectID Artist ProjectID\\n     * @param Contract Minter Contract Address\\n     */\\n    function __ChangeMinter(uint ProjectID, address Contract) external onlyOwner { Artists[ProjectID]._Minter = Contract; }\\n\\n    /**\\n     * @dev Changes QR Current Index\\n     * @param NewIndex The Next QR Index To Redeem\\n     */\\n    function __ChangeQRIndex(uint NewIndex) external onlyOwner { Cities[_CurrentCityIndex]._QRCurrentIndex = NewIndex; }\\n\\n    /**\\n     * @dev Instantiates New City\\n     * @param Name Name Of City\\n     * @param CityIndex CityIndex Of City\\n     * @param QRIndex QRIndex Of City\\n     * @param RemoteMintingEnabledArtists Remote Minting Enabled For Artists\\n     * @param RemoteMintingEnabledCitizens Remote Minting Enabled For Citizens\\n     * note: CityIndex Always Corresponds To ArtBlocks ProjectID For CryptoCitizens\\n     */\\n    function __NewCity (\\n        string calldata Name,\\n        uint CityIndex,\\n        uint QRIndex,\\n        bool RemoteMintingEnabledArtists,\\n        bool RemoteMintingEnabledCitizens\\n   ) external onlyOwner {\\n        Cities[CityIndex] = City(\\n            Name,\\n            QRIndex,\\n            0x6942069420694206942069420694206942069420694206942069420694206942,\\n            0x6942069420694206942069420694206942069420694206942069420694206942,\\n            RemoteMintingEnabledArtists,\\n            RemoteMintingEnabledCitizens\\n        );\\n    }\\n\\n    /**\\n     * @dev Changes The Amount Remaining For An Artist Mint\\n     * @param ArtistID ArtistID To Change\\n     * @param Amount Amount To Change To\\n     */\\n    function __NewAmountRemaining(uint ArtistID, uint Amount) external onlyOwner\\n    {\\n        AmountRemaining[ArtistID] = Amount;\\n    }\\n    \\n    /**\\n     * @dev Instantiates A New City\\n     * @param CityIndex CityIndex Of New City\\n     * @param NewCity The City Struct\\n     */\\n    function __NewCityStruct(uint CityIndex, City memory NewCity) external onlyOwner { Cities[CityIndex] = NewCity; }\\n\\n    /**\\n     * @dev Returns An Artist Struct\\n     * @param ArtistID The ArtistID To Change\\n     * @param NewArtist The Artist Struct\\n     */\\n    function __NewArtistStruct(uint ArtistID, Artist memory NewArtist) external onlyOwner { Artists[ArtistID] = NewArtist; }\\n\\n    /**\\n     * @dev Changes The Minter Address For An Artist\\n     * @param ArtistID ArtistID To Change\\n     * @param Minter New Minter Address\\n     */\\n    function __NewArtistMinter(uint ArtistID, address Minter) external onlyOwner { Artists[ArtistID]._Minter = Minter; }\\n\\n    /**\\n     * @dev Withdraws Any Ether Mistakenly Sent to Contract to Multisig\\n     **/\\n    function __WithdrawEther() external onlyOwner { payable(msg.sender).transfer(address(this).balance); }\\n\\n    /**\\n     * @dev Executes Arbitrary Transaction(s)\\n     * @param Targets Array Of Addresses To Execute Transactions On\\n     * @param Values Array Of Values To Execute Transactions With\\n     * @param Datas Array Of Datas To Execute Transactions With\\n     */\\n    function __InitTransaction(address[] memory Targets, uint[] memory Values, bytes[] memory Datas) external onlyOwner\\n    {\\n        for(uint x; x < Targets.length; x++) \\n        {\\n            (bool success,) = Targets[x].call{value:(Values[x])}(Datas[x]);\\n            require(success, \\\"i have failed u anakin\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Authorizes An Address\\n     * @param NewAddress Address To Authorize\\n     */\\n    function ____AuthorizeAddress(address NewAddress) external onlyOwner \\n    { \\n        Role[NewAddress] = _AUTHORIZED; \\n        emit AuthorizedContract(NewAddress);\\n    }\\n\\n    /**\\n     * @dev Deauthorizes An Address\\n     * @param NewAddress Address To Deauthorize\\n     */\\n    function ___DeauthorizeAddress(address NewAddress) external onlyOwner \\n    { \\n        Role[NewAddress] = 0x0; \\n        emit DeauthorizedContract(NewAddress);\\n    }\\n    \\n    /*-------------------*/\\n    /*    PUBLIC VIEW    */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Returns A User's QR Allocation Amount, Or 0 If Not Eligible\\n     */\\n    function readEligibility (\\n        address Recipient, \\n        bytes32[] memory Proof, \\n        bytes32[] memory ProofAmount, \\n        uint Amount\\n    ) public view returns (uint ) {\\n        bool Eligible = readQREligibility(Recipient, Proof, ProofAmount, Amount);\\n        uint Allocation = _QRAllocation[_CurrentCityIndex][Recipient];\\n        uint AmountRedeemed = _QRsRedeemed[_CurrentCityIndex][Recipient];\\n        if(Eligible && Allocation > AmountRedeemed) { return Allocation - AmountRedeemed; }\\n        else if (Eligible && Allocation == 0 && AmountRedeemed == 0) { return 1; }\\n        else { return 0; }\\n    }\\n\\n    /**\\n     * @dev Returns If User Is Eligible To Redeem QR Code\\n     */\\n    function readQREligibility (\\n        address Recipient, \\n        bytes32[] memory ProofEligibility, \\n        bytes32[] memory ProofAmount, \\n        uint Amount\\n    ) public view returns (bool) {\\n        require(Amount > 0, \\\"LiveMint: Amount Must Be > 0\\\");\\n        bytes32 Leaf = keccak256(abi.encodePacked(Recipient));\\n        bytes32 LeafAmount = keccak256(abi.encodePacked(Recipient, Amount));\\n        require(MerkleProof.verify(ProofEligibility, Cities[_CurrentCityIndex]._RootEligibility, Leaf), \\\"LiveMint: Invalid Merkle Eligibility Proof\\\");\\n        require(MerkleProof.verify(ProofAmount, Cities[_CurrentCityIndex]._RootAmount, LeafAmount), \\\"LiveMint: Invalid Merkle Amount Proof\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns How Many QR Codes A User Has Redeemed\\n     */\\n    function readAmountRedeemed(address Recipient) public view returns(uint) { return _QRsRedeemed[_CurrentCityIndex][Recipient]; }\\n\\n    /**\\n     * @dev Returns An Array Of Unminted Golden Tokens\\n     */\\n    function readCitizenUnmintedTicketIDs() public view returns(uint[] memory)\\n    {\\n        uint[] memory UnmintedTokenIDs = new uint[](1000);\\n        uint Counter;\\n        uint CityIDBuffer = _CurrentCityIndex % 6 * 333;\\n        uint _TokenID;\\n        for(uint TokenID; TokenID < 1000; TokenID++)\\n        {\\n            _TokenID = TokenID + CityIDBuffer;\\n            if\\n            (\\n                (!_MintedCitizen[_CurrentCityIndex][_TokenID]\\n                &&\\n                _BrightListCitizen[_CurrentCityIndex][_TokenID] != address(0))\\n                ||\\n                (!_MintedCitizen[_CurrentCityIndex][_TokenID] && _TokenID < 666)\\n            ) \\n            { \\n                UnmintedTokenIDs[Counter] = _TokenID; \\n                Counter++;\\n            }\\n        }\\n        uint[] memory FormattedUnMintedTokenIDs = new uint[](Counter);\\n        for(uint Index; Index < Counter; Index++)\\n        {\\n            FormattedUnMintedTokenIDs[Index] = UnmintedTokenIDs[Index];\\n        }\\n        return FormattedUnMintedTokenIDs;\\n    }\\n\\n    /**\\n     * @dev Returns An Array Of Unminted Golden Tokens\\n     */\\n    function readCitizenMintedTicketIDs(uint CityID) public view returns(uint[] memory)\\n    {\\n        uint[] memory MintedTokenIDs = new uint[](1000);\\n        uint Counter;\\n        uint CityIDBuffer = (CityID % 6) * 333;\\n        uint _TicketID;\\n        for(uint TicketID; TicketID < 1000; TicketID++)\\n        {\\n            _TicketID = TicketID + CityIDBuffer;\\n            if(_MintedCitizen[CityID][_TicketID]) \\n            { \\n                MintedTokenIDs[Counter] = _TicketID; \\n                Counter++;\\n            }\\n        }\\n        uint[] memory FormattedMintedTokenIDs = new uint[](Counter);\\n        uint Found;\\n        for(uint FormattedTokenID; FormattedTokenID < Counter; FormattedTokenID++)\\n        {\\n            if(MintedTokenIDs[FormattedTokenID] != 0 || (MintedTokenIDs[FormattedTokenID] == 0 && FormattedTokenID == 0))\\n            {\\n                FormattedMintedTokenIDs[Found] = MintedTokenIDs[FormattedTokenID];\\n                Found++;\\n            }\\n        }\\n        return FormattedMintedTokenIDs;\\n    }\\n\\n    /**\\n     * @dev Returns A 2d Array Of Checked In & Unminted TicketIDs Awaiting A Mint\\n     */\\n    function readCitizenCheckedInTicketIDs() public view returns(uint[] memory TokenIDs)\\n    {\\n        uint[] memory _TokenIDs = new uint[](1000);\\n        uint CityIDBuffer = (_CurrentCityIndex % 6) * 333;\\n        uint _TicketID;\\n        uint Counter;\\n        for(uint TicketID; TicketID < 1000; TicketID++)\\n        {\\n            _TicketID = TicketID + CityIDBuffer;\\n            if(\\n                !_MintedCitizen[_CurrentCityIndex][_TicketID]\\n                &&\\n                _BrightListCitizen[_CurrentCityIndex][_TicketID] != address(0)\\n            ) \\n            { \\n                _TokenIDs[Counter] = _TicketID; \\n                Counter++;\\n            }\\n        }\\n        uint[] memory FormattedCheckedInTickets = new uint[](Counter);\\n        uint Found;\\n        for(uint x; x < Counter; x++)\\n        {\\n            if(_TokenIDs[x] != 0 || (_TokenIDs[x] == 0 && x == 0))\\n            {\\n                FormattedCheckedInTickets[Found] = _TokenIDs[x];\\n                Found++;\\n            }\\n        }\\n        return FormattedCheckedInTickets;\\n    }\\n\\n    /**\\n     * @dev Returns A 2d Array Of Minted ArtistIDs\\n     */\\n    function readArtistUnmintedTicketIDs(uint[] calldata ArtistIDs, uint Range) public view returns(uint[][] memory TokenIDs)\\n    {\\n        uint[][] memory _TokenIDs = new uint[][](ArtistIDs.length);\\n        uint Index;\\n        for(uint ArtistID; ArtistID < ArtistIDs.length; ArtistID++)\\n        {\\n            uint[] memory UnmintedArtistTokenIDs = new uint[](Range);\\n            uint Counter;\\n            for(uint TokenID; TokenID < Range; TokenID++)\\n            {\\n                if(!_MintedArtist[ArtistIDs[ArtistID]][TokenID]) \\n                { \\n                    UnmintedArtistTokenIDs[Counter] = TokenID; \\n                    Counter++;\\n                }\\n            }\\n            uint[] memory FormattedUnMintedArtistIDs = new uint[](Counter);\\n            uint Found;\\n            for(uint x; x < Counter; x++)\\n            {\\n                if(UnmintedArtistTokenIDs[x] != 0 || (UnmintedArtistTokenIDs[x] == 0 && x == 0))\\n                {\\n                    FormattedUnMintedArtistIDs[Found] = UnmintedArtistTokenIDs[x];\\n                    Found++;\\n                }\\n            }\\n            _TokenIDs[Index] = FormattedUnMintedArtistIDs;\\n            Index++;\\n        }\\n        return (_TokenIDs);\\n    }\\n\\n    /**\\n     * @dev Returns A 2d Array Of Minted ArtistIDs\\n     */\\n    function readArtistMintedTicketIDs(uint[] calldata ArtistIDs, uint Range) public view returns(uint[][] memory TokenIDs)\\n    {\\n        uint[][] memory _TokenIDs = new uint[][](ArtistIDs.length);\\n        uint Index;\\n        for(uint ArtistID; ArtistID < ArtistIDs.length; ArtistID++)\\n        {\\n            uint[] memory MintedTokenIDs = new uint[](Range);\\n            uint Counter;\\n            for(uint TokenID; TokenID < Range; TokenID++)\\n            {\\n                if(_MintedArtist[ArtistIDs[ArtistID]][TokenID])\\n                { \\n                    MintedTokenIDs[Counter] = TokenID; \\n                    Counter++;\\n                }\\n            }\\n            uint[] memory FormattedMintedTokenIDs = new uint[](Counter);\\n            uint Found;\\n            for(uint x; x < Counter; x++)\\n            {\\n                if(MintedTokenIDs[x] != 0 || (MintedTokenIDs[x] == 0 && x == 0))\\n                {\\n                    FormattedMintedTokenIDs[Found] = MintedTokenIDs[x];\\n                    Found++;\\n                }\\n            }\\n            _TokenIDs[Index] = FormattedMintedTokenIDs;\\n            Index++;\\n        }\\n        return (_TokenIDs);\\n    }\\n\\n    /**\\n     * @dev Returns Original Recipients Of CryptoCitizens\\n     */\\n    function readCitizenBrightList(uint CityIndex) public view returns(address[] memory Recipients)\\n    {\\n        address[] memory _Recipients = new address[](1000);\\n        uint Start = (CityIndex % 6) * 333;\\n        for(uint x; x < 1000; x++) { _Recipients[x] = _BrightListCitizen[CityIndex][Start+x]; }\\n        return _Recipients;\\n    }\\n\\n    /**\\n     * @dev Returns Original Recipient Of Artist NFTs\\n     */\\n    function readArtistBrightList(uint ArtistID, uint Range) public view returns(address[] memory Recipients)\\n    {\\n        address[] memory _Recipients = new address[](Range);\\n        for(uint x; x < Range; x++) { _Recipients[x] = _BrightListArtist[ArtistID][x]; }\\n        return _Recipients;    \\n    }\\n\\n    /**\\n     * @dev Returns The City Struct At Index Of `CityIndex`\\n     */\\n    function readCitizenCity(uint CityIndex) public view returns(City memory) { return Cities[CityIndex]; }\\n\\n    /**\\n     * @dev Returns The Artist Struct At Index Of `ArtistID`\\n     */\\n    function readArtist(uint ArtistID) public view returns(Artist memory) { return Artists[ArtistID]; }\\n\\n    /**\\n     * @dev Returns A Minted Work TokenID Corresponding To The Input Artist TicketID \\n     */\\n    function readArtistMintedTokenID(uint ArtistID, uint TicketID) external view returns (uint)\\n    {\\n        if(!_MintedArtist[ArtistID][TicketID]) { return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; }\\n        else { return _MintedTokenIDArtist[ArtistID][TicketID]; }\\n    }\\n\\n    /**\\n     * @dev Returns A Minted Citizen TokenID Corresponding To Input TicketID\\n     */\\n    function readCitizenMintedTokenID(uint CityIndex, uint TicketID) external view returns(uint)\\n    {\\n        if(!_MintedCitizen[CityIndex][TicketID]) { return type(uint).max; }\\n        else { return _MintedTokenIDCitizen[CityIndex][TicketID]; }  \\n    }\\n\\n    /*-------------------------*/\\n    /*     ACCESS MODIFIERS    */\\n    /*-------------------------*/\\n\\n    /**\\n     * @dev Access Modifier That Allows Only BrightListed BRT Minters\\n     **/\\n    modifier onlyMinter() \\n    {\\n        require(Role[msg.sender] == _MINTER_ROLE, \\\"LiveMint | onlyMinter | Caller Is Not Approved BRT Minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Access Modifier That Allows Only Authorized Contracts\\n     */\\n    modifier onlyAdmin()\\n    {\\n        require(Role[msg.sender] == _AUTHORIZED || msg.sender == owner(), \\\"LiveMint | onlyAdmin | Caller Is Not Approved Admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev onlyMarketplace Access Modifier\\n     */\\n    modifier onlyMarketplace\\n    {\\n        require(_MARKETPLACE == msg.sender, \\\"LiveMint: Sender Is Not Marketplace\\\");\\n        _;\\n    }\\n}\\n\\n/**\\n * @dev Interface For Delegate.cash\\n */\\ninterface IDelegationRegistry\\n{\\n    /**\\n     * @dev Checks If A Vault Has Delegated To The Delegate\\n     */\\n    function checkDelegateForAll(address delegate, address delegator) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"AuthorizedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"DeauthorizedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"LiveMintComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MintedWorkTokenID\",\"type\":\"uint256\"}],\"name\":\"LiveMintCompleteArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"QRRedeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AmountRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Artists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PolyptychSource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Cities\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_QRCurrentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_RootEligibility\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_RootAmount\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_RemoteMintingEnabledArtists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_RemoteMintingEnabledCitizens\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ProofEligibility\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ProofAmounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"Vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"RedeemQR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"TicketIDs\",\"type\":\"uint256[][]\"}],\"name\":\"RemoteMintArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"TicketIDs\",\"type\":\"uint256[]\"}],\"name\":\"RemoteMintCitizens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Role\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ArtBlocksProjectID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_BrightListArtist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_BrightListCitizen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CurrentCityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"TicketIDs\",\"type\":\"uint256[]\"}],\"name\":\"_LiveMintArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"TicketIDs\",\"type\":\"uint256[][]\"}],\"name\":\"_LiveMintArtistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"TicketIDs\",\"type\":\"uint256[]\"}],\"name\":\"_LiveMintCitizen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"_LiveMintMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MARKETPLACE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_MintedArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_MintedCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_MintedTokenIDArtist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_MintedTokenIDCitizen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_QRAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_QRRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_QRsRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UniqueArtistsInvoked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"__AddMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeMarketplaceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"}],\"name\":\"__ChangeMintPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"}],\"name\":\"__ChangeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewIndex\",\"type\":\"uint256\"}],\"name\":\"__ChangeQRIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"NewRoot\",\"type\":\"bytes32\"}],\"name\":\"__ChangeRootAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"NewRoot\",\"type\":\"bytes32\"}],\"name\":\"__ChangeRootEligibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"EligibilityRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"EligibilityAmount\",\"type\":\"bytes32\"}],\"name\":\"__ChangeRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__FlipRemoteMintingArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__FlipRemoteMintingCitizens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__FlipRemoteMintingStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PolyptychSource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct LiveMintBuenosAires.Artist\",\"name\":\"_Params\",\"type\":\"tuple\"}],\"name\":\"__InitLiveMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"Datas\",\"type\":\"bytes[]\"}],\"name\":\"__InitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"__NewAmountRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"__NewArtistMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PolyptychSource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct LiveMintBuenosAires.Artist\",\"name\":\"NewArtist\",\"type\":\"tuple\"}],\"name\":\"__NewArtistStruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"CityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"QRIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"RemoteMintingEnabledArtists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"RemoteMintingEnabledCitizens\",\"type\":\"bool\"}],\"name\":\"__NewCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"CityIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_QRCurrentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_RootEligibility\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_RootAmount\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_RemoteMintingEnabledArtists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_RemoteMintingEnabledCitizens\",\"type\":\"bool\"}],\"internalType\":\"struct LiveMintBuenosAires.City\",\"name\":\"NewCity\",\"type\":\"tuple\"}],\"name\":\"__NewCityStruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"__QRAllocationsIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"__QRAllocationsOverwrite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"TicketIDs\",\"type\":\"uint256[]\"}],\"name\":\"__QRAllocationsSetNoShow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"__RemoveMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__WithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"___DeauthorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"____AuthorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"}],\"name\":\"readAmountRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"name\":\"readArtist\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PolyptychSource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PolyEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct LiveMintBuenosAires.Artist\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Range\",\"type\":\"uint256\"}],\"name\":\"readArtistBrightList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"Recipients\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"Range\",\"type\":\"uint256\"}],\"name\":\"readArtistMintedTicketIDs\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"TokenIDs\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readArtistMintedTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"Range\",\"type\":\"uint256\"}],\"name\":\"readArtistUnmintedTicketIDs\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"TokenIDs\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"CityIndex\",\"type\":\"uint256\"}],\"name\":\"readCitizenBrightList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"Recipients\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readCitizenCheckedInTicketIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"TokenIDs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"CityIndex\",\"type\":\"uint256\"}],\"name\":\"readCitizenCity\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_QRCurrentIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_RootEligibility\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_RootAmount\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_RemoteMintingEnabledArtists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_RemoteMintingEnabledCitizens\",\"type\":\"bool\"}],\"internalType\":\"struct LiveMintBuenosAires.City\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"CityID\",\"type\":\"uint256\"}],\"name\":\"readCitizenMintedTicketIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"CityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readCitizenMintedTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readCitizenUnmintedTicketIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ProofAmount\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"readEligibility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"ProofEligibility\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ProofAmount\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"readQREligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiveMintBuenosAires", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}