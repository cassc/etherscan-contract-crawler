{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title LendPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Unlockd Governance\\n * @author Unlockd\\n **/\\ninterface ILendPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendPoolUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendPoolConfiguratorUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ReserveOracleUpdated(address indexed newAddress);\\n  event NftOracleUpdated(address indexed newAddress);\\n  event LendPoolLoanUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy, bytes encodedCallData);\\n  event UNFTRegistryUpdated(address indexed newAddress);\\n  event IncentivesControllerUpdated(address indexed newAddress);\\n  event UIDataProviderUpdated(address indexed newAddress);\\n  event UnlockdDataProviderUpdated(address indexed newAddress);\\n  event WalletBalanceProviderUpdated(address indexed newAddress);\\n  event NFTXVaultFactoryUpdated(address indexed newAddress);\\n  event SushiSwapRouterUpdated(address indexed newAddress);\\n  event LSSVMRouterUpdated(address indexed newAddress);\\n  event LendPoolLiquidatorUpdated(address indexed newAddress);\\n  event LtvManagerUpdated(address indexed newAddress);\\n\\n  /**\\n   * @dev Returns the id of the Unlockd market to which this contracts points to\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @dev Allows to set the market which this LendPoolAddressesProvider represents\\n   * @param marketId The market id\\n   */\\n  function setMarketId(string calldata marketId) external;\\n\\n  /**\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\n   * IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @dev General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `implementationAddress`\\n   * IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param impl The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address impl, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev Returns an address by id\\n   * @return The address\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the LendPool proxy\\n   * @return The LendPool proxy address\\n   **/\\n  function getLendPool() external view returns (address);\\n\\n  /**\\n   * @dev Updates the implementation of the LendPool, or creates the proxy\\n   * setting the new `pool` implementation on the first time calling it\\n   * @param pool The new LendPool implementation\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolImpl(address pool, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev Returns the address of the LendPoolConfigurator proxy\\n   * @return The LendPoolConfigurator proxy address\\n   **/\\n  function getLendPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @dev Updates the implementation of the LendPoolConfigurator, or creates the proxy\\n   * setting the new `configurator` implementation on the first time calling it\\n   * @param configurator The new LendPoolConfigurator implementation\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolConfiguratorImpl(address configurator, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev returns the address of the LendPool admin\\n   * @return the LendPoolAdmin address\\n   **/\\n  function getPoolAdmin() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the LendPool admin\\n   * @param admin the LendPoolAdmin address\\n   **/\\n  function setPoolAdmin(address admin) external;\\n\\n  /**\\n   * @dev returns the address of the emergency admin\\n   * @return the EmergencyAdmin address\\n   **/\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the emergency admin\\n   * @param admin the EmergencyAdmin address\\n   **/\\n  function setEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @dev returns the address of the reserve oracle\\n   * @return the ReserveOracle address\\n   **/\\n  function getReserveOracle() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the reserve oracle\\n   * @param reserveOracle the ReserveOracle address\\n   **/\\n  function setReserveOracle(address reserveOracle) external;\\n\\n  /**\\n   * @dev returns the address of the NFT oracle\\n   * @return the NFTOracle address\\n   **/\\n  function getNFTOracle() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the NFT oracle\\n   * @param nftOracle the NFTOracle address\\n   **/\\n  function setNFTOracle(address nftOracle) external;\\n\\n  /**\\n   * @dev returns the address of the lendpool loan\\n   * @return the LendPoolLoan address\\n   **/\\n  function getLendPoolLoan() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the lendpool loan\\n   * @param loan the LendPoolLoan address\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolLoanImpl(address loan, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev returns the address of the UNFT Registry\\n   * @return the UNFTRegistry address\\n   **/\\n  function getUNFTRegistry() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the UNFT registry\\n   * @param factory the UNFTRegistry address\\n   **/\\n  function setUNFTRegistry(address factory) external;\\n\\n  /**\\n   * @dev returns the address of the incentives controller\\n   * @return the IncentivesController address\\n   **/\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the incentives controller\\n   * @param controller the IncentivesController address\\n   **/\\n  function setIncentivesController(address controller) external;\\n\\n  /**\\n   * @dev returns the address of the UI data provider\\n   * @return the UIDataProvider address\\n   **/\\n  function getUIDataProvider() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the UI data provider\\n   * @param provider the UIDataProvider address\\n   **/\\n  function setUIDataProvider(address provider) external;\\n\\n  /**\\n   * @dev returns the address of the Unlockd data provider\\n   * @return the UnlockdDataProvider address\\n   **/\\n  function getUnlockdDataProvider() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the Unlockd data provider\\n   * @param provider the UnlockdDataProvider address\\n   **/\\n  function setUnlockdDataProvider(address provider) external;\\n\\n  /**\\n   * @dev returns the address of the wallet balance provider\\n   * @return the WalletBalanceProvider address\\n   **/\\n  function getWalletBalanceProvider() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the wallet balance provider\\n   * @param provider the WalletBalanceProvider address\\n   **/\\n  function setWalletBalanceProvider(address provider) external;\\n\\n  function getNFTXVaultFactory() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the NFTXVault Factory contract\\n   * @param factory the NFTXVault Factory address\\n   **/\\n  function setNFTXVaultFactory(address factory) external;\\n\\n  /**\\n   * @dev returns the address of the SushiSwap router contract\\n   **/\\n  function getSushiSwapRouter() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the LSSVM router contract\\n   * @param router the LSSVM router address\\n   **/\\n  function setSushiSwapRouter(address router) external;\\n\\n  /**\\n   * @dev returns the address of the LSSVM router contract\\n   **/\\n  function getLSSVMRouter() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the LSSVM router contract\\n   * @param router the SushiSwap router address\\n   **/\\n  function setLSSVMRouter(address router) external;\\n\\n  /**\\n   * @dev returns the address of the LendPool liquidator contract\\n   **/\\n  function getLendPoolLiquidator() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the LendPool liquidator contract\\n   * @param liquidator the LendPool liquidator address\\n   **/\\n  function setLendPoolLiquidator(address liquidator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Errors library\\n * @author Unlockd\\n * @notice Defines the error messages emitted by the different contracts of the Unlockd protocol\\n */\\nlibrary Errors {\\n  enum ReturnCode {\\n    SUCCESS,\\n    FAILED\\n  }\\n\\n  string public constant SUCCESS = \\\"0\\\";\\n\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = \\\"100\\\"; // 'The caller must be the pool admin'\\n  string public constant CALLER_NOT_ADDRESS_PROVIDER = \\\"101\\\";\\n  string public constant INVALID_FROM_BALANCE_AFTER_TRANSFER = \\\"102\\\";\\n  string public constant INVALID_TO_BALANCE_AFTER_TRANSFER = \\\"103\\\";\\n  string public constant CALLER_NOT_ONBEHALFOF_OR_IN_WHITELIST = \\\"104\\\";\\n  string public constant CALLER_NOT_POOL_LIQUIDATOR = \\\"105\\\";\\n  string public constant INVALID_ZERO_ADDRESS = \\\"106\\\";\\n  string public constant CALLER_NOT_LTV_MANAGER = \\\"107\\\";\\n  string public constant CALLER_NOT_PRICE_MANAGER = \\\"108\\\";\\n\\n  //math library errors\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"200\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"201\\\";\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"202\\\";\\n\\n  //validation & check errors\\n  string public constant VL_INVALID_AMOUNT = \\\"301\\\"; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = \\\"302\\\"; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = \\\"303\\\"; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"304\\\"; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_BORROWING_NOT_ENABLED = \\\"305\\\"; // 'Borrowing is not enabled'\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"306\\\"; // 'The collateral balance is 0'\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"307\\\"; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"308\\\"; // 'There is not enough collateral to cover a new borrow'\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"309\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NO_ACTIVE_NFT = \\\"310\\\";\\n  string public constant VL_NFT_FROZEN = \\\"311\\\";\\n  string public constant VL_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"312\\\"; // 'User did not borrow the specified currency'\\n  string public constant VL_INVALID_HEALTH_FACTOR = \\\"313\\\";\\n  string public constant VL_INVALID_ONBEHALFOF_ADDRESS = \\\"314\\\";\\n  string public constant VL_INVALID_TARGET_ADDRESS = \\\"315\\\";\\n  string public constant VL_INVALID_RESERVE_ADDRESS = \\\"316\\\";\\n  string public constant VL_SPECIFIED_LOAN_NOT_BORROWED_BY_USER = \\\"317\\\";\\n  string public constant VL_SPECIFIED_RESERVE_NOT_BORROWED_BY_USER = \\\"318\\\";\\n  string public constant VL_HEALTH_FACTOR_HIGHER_THAN_LIQUIDATION_THRESHOLD = \\\"319\\\";\\n  string public constant VL_TIMEFRAME_EXCEEDED = \\\"320\\\";\\n  string public constant VL_VALUE_EXCEED_TREASURY_BALANCE = \\\"321\\\";\\n\\n  //lend pool errors\\n  string public constant LP_CALLER_NOT_LEND_POOL_CONFIGURATOR = \\\"400\\\"; // 'The caller of the function is not the lending pool configurator'\\n  string public constant LP_IS_PAUSED = \\\"401\\\"; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"402\\\";\\n  string public constant LP_NOT_CONTRACT = \\\"403\\\";\\n  string public constant LP_BORROW_NOT_EXCEED_LIQUIDATION_THRESHOLD = \\\"404\\\";\\n  string public constant LP_BORROW_IS_EXCEED_LIQUIDATION_PRICE = \\\"405\\\";\\n  string public constant LP_NO_MORE_NFTS_ALLOWED = \\\"406\\\";\\n  string public constant LP_INVALID_USER_NFT_AMOUNT = \\\"407\\\";\\n  string public constant LP_INCONSISTENT_PARAMS = \\\"408\\\";\\n  string public constant LP_NFT_IS_NOT_USED_AS_COLLATERAL = \\\"409\\\";\\n  string public constant LP_CALLER_MUST_BE_AN_UTOKEN = \\\"410\\\";\\n  string public constant LP_INVALID_NFT_AMOUNT = \\\"411\\\";\\n  string public constant LP_NFT_HAS_USED_AS_COLLATERAL = \\\"412\\\";\\n  string public constant LP_DELEGATE_CALL_FAILED = \\\"413\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_EXTRA_DEBT = \\\"414\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_REDEEM_THRESHOLD = \\\"415\\\";\\n  string public constant LP_AMOUNT_GREATER_THAN_MAX_REPAY = \\\"416\\\";\\n  string public constant LP_NFT_TOKEN_ID_EXCEED_MAX_LIMIT = \\\"417\\\";\\n  string public constant LP_NFT_SUPPLY_NUM_EXCEED_MAX_LIMIT = \\\"418\\\";\\n  string public constant LP_CALLER_NOT_LEND_POOL_LIQUIDATOR_NOR_GATEWAY = \\\"419\\\";\\n  string public constant LP_CONSECUTIVE_BIDS_NOT_ALLOWED = \\\"420\\\";\\n  string public constant LP_INVALID_OVERFLOW_VALUE = \\\"421\\\";\\n  string public constant LP_CALLER_NOT_NFT_HOLDER = \\\"422\\\";\\n  string public constant LP_NFT_NOT_ALLOWED_TO_SELL = \\\"423\\\";\\n  string public constant LP_RESERVES_WITHOUT_ENOUGH_LIQUIDITY = \\\"424\\\";\\n  string public constant LP_COLLECTION_NOT_SUPPORTED = \\\"425\\\";\\n  string public constant LP_MSG_VALUE_DIFFERENT_FROM_CONFIG_FEE = \\\"426\\\";\\n  string public constant LP_INVALID_SAFE_HEALTH_FACTOR = \\\"427\\\";\\n\\n  //lend pool loan errors\\n  string public constant LPL_INVALID_LOAN_STATE = \\\"480\\\";\\n  string public constant LPL_INVALID_LOAN_AMOUNT = \\\"481\\\";\\n  string public constant LPL_INVALID_TAKEN_AMOUNT = \\\"482\\\";\\n  string public constant LPL_AMOUNT_OVERFLOW = \\\"483\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_LIQUIDATION_PRICE = \\\"484\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_HIGHEST_PRICE = \\\"485\\\";\\n  string public constant LPL_BID_REDEEM_DURATION_HAS_END = \\\"486\\\";\\n  string public constant LPL_BID_USER_NOT_SAME = \\\"487\\\";\\n  string public constant LPL_BID_REPAY_AMOUNT_NOT_ENOUGH = \\\"488\\\";\\n  string public constant LPL_BID_AUCTION_DURATION_HAS_END = \\\"489\\\";\\n  string public constant LPL_BID_AUCTION_DURATION_NOT_END = \\\"490\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_BORROW = \\\"491\\\";\\n  string public constant LPL_INVALID_BIDDER_ADDRESS = \\\"492\\\";\\n  string public constant LPL_AMOUNT_LESS_THAN_BID_FINE = \\\"493\\\";\\n  string public constant LPL_INVALID_BID_FINE = \\\"494\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_MIN_BID_REQUIRED = \\\"495\\\";\\n\\n  //common token errors\\n  string public constant CT_CALLER_MUST_BE_LEND_POOL = \\\"500\\\"; // 'The caller of this function must be a lending pool'\\n  string public constant CT_INVALID_MINT_AMOUNT = \\\"501\\\"; //invalid amount to mint\\n  string public constant CT_INVALID_BURN_AMOUNT = \\\"502\\\"; //invalid amount to burn\\n  string public constant CT_BORROW_ALLOWANCE_NOT_ENOUGH = \\\"503\\\";\\n\\n  //reserve logic errors\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"601\\\"; // 'Reserve has already been initialized'\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"602\\\"; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"603\\\"; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"604\\\"; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"605\\\"; //  Variable borrow rate overflows uint128\\n\\n  //configure errors\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"700\\\"; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_CONFIGURATION = \\\"701\\\"; // 'Invalid risk parameters for the reserve'\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"702\\\"; // 'The caller must be the emergency admin'\\n  string public constant LPC_INVALID_UNFT_ADDRESS = \\\"703\\\";\\n  string public constant LPC_INVALIED_LOAN_ADDRESS = \\\"704\\\";\\n  string public constant LPC_NFT_LIQUIDITY_NOT_0 = \\\"705\\\";\\n  string public constant LPC_PARAMS_MISMATCH = \\\"706\\\"; // NFT assets & token ids mismatch\\n  string public constant LPC_FEE_PERCENTAGE_TOO_HIGH = \\\"707\\\";\\n  string public constant LPC_INVALID_LTVMANAGER_ADDRESS = \\\"708\\\";\\n  string public constant LPC_INCONSISTENT_PARAMS = \\\"709\\\";\\n  string public constant LPC_INVALID_SAFE_HEALTH_FACTOR = \\\"710\\\";\\n  //reserve config errors\\n  string public constant RC_INVALID_LTV = \\\"730\\\";\\n  string public constant RC_INVALID_LIQ_THRESHOLD = \\\"731\\\";\\n  string public constant RC_INVALID_LIQ_BONUS = \\\"732\\\";\\n  string public constant RC_INVALID_DECIMALS = \\\"733\\\";\\n  string public constant RC_INVALID_RESERVE_FACTOR = \\\"734\\\";\\n  string public constant RC_INVALID_REDEEM_DURATION = \\\"735\\\";\\n  string public constant RC_INVALID_AUCTION_DURATION = \\\"736\\\";\\n  string public constant RC_INVALID_REDEEM_FINE = \\\"737\\\";\\n  string public constant RC_INVALID_REDEEM_THRESHOLD = \\\"738\\\";\\n  string public constant RC_INVALID_MIN_BID_FINE = \\\"739\\\";\\n  string public constant RC_INVALID_MAX_BID_FINE = \\\"740\\\";\\n  string public constant RC_INVALID_MAX_CONFIG_TIMESTAMP = \\\"741\\\";\\n\\n  //address provider erros\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"760\\\"; // 'Provider is not registered'\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"761\\\";\\n\\n  //NFTXHelper\\n  string public constant NFTX_INVALID_VAULTS_LENGTH = \\\"800\\\";\\n\\n  //NFTOracleErrors\\n  string public constant NFTO_INVALID_PRICEM_ADDRESS = \\\"900\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/proxy/UnlockdUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {TransparentUpgradeableProxy} from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../helpers/Errors.sol\\\";\\n\\ncontract UnlockdUpgradeableProxy is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  modifier OnlyAdmin() {\\n    require(msg.sender == _getAdmin(), Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  /**\\n  @dev Returns the implementation contract for the proxy\\n   */\\n  function getImplementation() external view OnlyAdmin returns (address) {\\n    return _getImplementation();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/LendPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n// Prettier ignore to prevent buidler flatter bug\\n// prettier-ignore\\nimport {ILendPoolAddressesProvider} from \\\"../interfaces/ILendPoolAddressesProvider.sol\\\";\\nimport {UnlockdUpgradeableProxy} from \\\"../libraries/proxy/UnlockdUpgradeableProxy.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title LendPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Unlockd Governance\\n * @author Unlockd\\n **/\\ncontract LendPoolAddressesProvider is Ownable, ILendPoolAddressesProvider {\\n  string private _marketId;\\n  mapping(bytes32 => address) private _addresses;\\n  bytes32 private constant LEND_POOL = \\\"LEND_POOL\\\";\\n  bytes32 private constant LEND_POOL_CONFIGURATOR = \\\"LEND_POOL_CONFIGURATOR\\\";\\n  bytes32 private constant POOL_ADMIN = \\\"POOL_ADMIN\\\";\\n  bytes32 private constant EMERGENCY_ADMIN = \\\"EMERGENCY_ADMIN\\\";\\n  bytes32 private constant RESERVE_ORACLE = \\\"RESERVE_ORACLE\\\";\\n  bytes32 private constant NFT_ORACLE = \\\"NFT_ORACLE\\\";\\n  bytes32 private constant LEND_POOL_LOAN = \\\"LEND_POOL_LOAN\\\";\\n  bytes32 private constant UNFT_REGISTRY = \\\"UNFT_REGISTRY\\\";\\n  bytes32 private constant LEND_POOL_LIQUIDATOR = \\\"LEND_POOL_LIQUIDATOR\\\";\\n  bytes32 private constant INCENTIVES_CONTROLLER = \\\"INCENTIVES_CONTROLLER\\\";\\n  bytes32 private constant UNLOCKD_DATA_PROVIDER = \\\"UNLOCKD_DATA_PROVIDER\\\";\\n  bytes32 private constant UI_DATA_PROVIDER = \\\"UI_DATA_PROVIDER\\\";\\n  bytes32 private constant WALLET_BALANCE_PROVIDER = \\\"WALLET_BALANCE_PROVIDER\\\";\\n  bytes32 private constant NFTX_VAULT_FACTORY = \\\"NFTX_VAULT_FACTORY\\\";\\n  bytes32 private constant SUSHI_SWAP_ROUTER = \\\"SUSHI_SWAP_ROUTER\\\";\\n  bytes32 private constant LSSVM_ROUTER = \\\"LSSVM_ROUTER\\\";\\n\\n  constructor(string memory marketId) {\\n    _setMarketId(marketId);\\n  }\\n\\n  /**\\n   * @dev Returns the id of the Unlockd market to which this contracts points to\\n   * @return The market id\\n   **/\\n  function getMarketId() external view override returns (string memory) {\\n    return _marketId;\\n  }\\n\\n  /**\\n   * @dev Allows to set the market which this LendPoolAddressesProvider represents\\n   * @param marketId The market id\\n   */\\n  function setMarketId(string memory marketId) external override onlyOwner {\\n    _setMarketId(marketId);\\n  }\\n\\n  /**\\n   * @dev General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `implementationAddress`\\n   * IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param implementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(\\n    bytes32 id,\\n    address implementationAddress,\\n    bytes memory encodedCallData\\n  ) external override onlyOwner {\\n    require(implementationAddress != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _updateImpl(id, implementationAddress);\\n    emit AddressSet(id, implementationAddress, true, encodedCallData);\\n\\n    if (encodedCallData.length > 0) {\\n      Address.functionCall(_addresses[id], encodedCallData);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\n   * IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external override onlyOwner {\\n    require(newAddress != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[id] = newAddress;\\n    emit AddressSet(id, newAddress, false, new bytes(0));\\n  }\\n\\n  /**\\n   * @dev Returns an address by id\\n   * @return The address\\n   */\\n  function getAddress(bytes32 id) public view override returns (address) {\\n    return _addresses[id];\\n  }\\n\\n  /**\\n   * @dev Returns the address of the LendPool proxy\\n   * @return The LendPool proxy address\\n   **/\\n  function getLendPool() external view override returns (address) {\\n    return getAddress(LEND_POOL);\\n  }\\n\\n  /**\\n   * @dev Updates the implementation of the LendPool, or creates the proxy\\n   * setting the new `pool` implementation on the first time calling it\\n   * @param pool The new LendPool implementation\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolImpl(address pool, bytes memory encodedCallData) external override onlyOwner {\\n    require(pool != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _updateImpl(LEND_POOL, pool);\\n    emit LendPoolUpdated(pool, encodedCallData);\\n\\n    if (encodedCallData.length > 0) {\\n      Address.functionCall(_addresses[LEND_POOL], encodedCallData);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address of the LendPoolConfigurator proxy\\n   * @return The LendPoolConfigurator proxy address\\n   **/\\n  function getLendPoolConfigurator() external view override returns (address) {\\n    return getAddress(LEND_POOL_CONFIGURATOR);\\n  }\\n\\n  /**\\n   * @dev Updates the implementation of the LendPoolConfigurator, or creates the proxy\\n   * setting the new `configurator` implementation on the first time calling it\\n   * @param configurator The new LendPoolConfigurator implementation\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolConfiguratorImpl(address configurator, bytes memory encodedCallData) external override onlyOwner {\\n    require(configurator != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _updateImpl(LEND_POOL_CONFIGURATOR, configurator);\\n    emit LendPoolConfiguratorUpdated(configurator, encodedCallData);\\n\\n    if (encodedCallData.length > 0) {\\n      Address.functionCall(_addresses[LEND_POOL_CONFIGURATOR], encodedCallData);\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the address of the LendPool admin\\n   * @return the LendPoolAdmin address\\n   **/\\n\\n  function getPoolAdmin() external view override returns (address) {\\n    return getAddress(POOL_ADMIN);\\n  }\\n\\n  /**\\n   * @dev sets the address of the LendPool admin\\n   * @param admin the LendPoolAdmin address\\n   **/\\n  function setPoolAdmin(address admin) external override onlyOwner {\\n    require(admin != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[POOL_ADMIN] = admin;\\n    emit ConfigurationAdminUpdated(admin);\\n  }\\n\\n  /**\\n   * @dev returns the address of the emergency admin\\n   * @return the EmergencyAdmin address\\n   **/\\n  function getEmergencyAdmin() external view override returns (address) {\\n    return getAddress(EMERGENCY_ADMIN);\\n  }\\n\\n  /**\\n   * @dev sets the address of the emergency admin\\n   * @param emergencyAdmin the EmergencyAdmin address\\n   **/\\n  function setEmergencyAdmin(address emergencyAdmin) external override onlyOwner {\\n    require(emergencyAdmin != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[EMERGENCY_ADMIN] = emergencyAdmin;\\n    emit EmergencyAdminUpdated(emergencyAdmin);\\n  }\\n\\n  /**\\n   * @dev returns the address of the reserve oracle\\n   * @return the ReserveOracle address\\n   **/\\n  function getReserveOracle() external view override returns (address) {\\n    return getAddress(RESERVE_ORACLE);\\n  }\\n\\n  /**\\n   * @dev sets the address of the reserve oracle\\n   * @param reserveOracle the ReserveOracle address\\n   **/\\n  function setReserveOracle(address reserveOracle) external override onlyOwner {\\n    require(reserveOracle != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[RESERVE_ORACLE] = reserveOracle;\\n    emit ReserveOracleUpdated(reserveOracle);\\n  }\\n\\n  /**\\n   * @dev returns the address of the NFT oracle\\n   * @return the NFTOracle address\\n   **/\\n  function getNFTOracle() external view override returns (address) {\\n    return getAddress(NFT_ORACLE);\\n  }\\n\\n  /**\\n   * @dev sets the address of the NFT oracle\\n   * @param nftOracle the NFTOracle address\\n   **/\\n  function setNFTOracle(address nftOracle) external override onlyOwner {\\n    require(nftOracle != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[NFT_ORACLE] = nftOracle;\\n    emit NftOracleUpdated(nftOracle);\\n  }\\n\\n  /**\\n   * @dev returns the address of the lendpool loan\\n   * @return the LendPoolLoan address\\n   **/\\n  function getLendPoolLoan() external view override returns (address) {\\n    return getAddress(LEND_POOL_LOAN);\\n  }\\n\\n  /**\\n   * @dev sets the address of the lendpool loan\\n   * @param loanAddress the LendPoolLoan address\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolLoanImpl(address loanAddress, bytes memory encodedCallData) external override onlyOwner {\\n    require(loanAddress != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _updateImpl(LEND_POOL_LOAN, loanAddress);\\n    emit LendPoolLoanUpdated(loanAddress, encodedCallData);\\n\\n    if (encodedCallData.length > 0) {\\n      Address.functionCall(_addresses[LEND_POOL_LOAN], encodedCallData);\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the address of the UNFT Registry\\n   * @return the UNFTRegistry address\\n   **/\\n  function getUNFTRegistry() external view override returns (address) {\\n    return getAddress(UNFT_REGISTRY);\\n  }\\n\\n  /**\\n   * @dev sets the address of the UNFT registry\\n   * @param factory the UNFTRegistry address\\n   **/\\n  function setUNFTRegistry(address factory) external override onlyOwner {\\n    require(factory != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[UNFT_REGISTRY] = factory;\\n    emit UNFTRegistryUpdated(factory);\\n  }\\n\\n  /**\\n   * @dev returns the address of the incentives controller\\n   * @return the IncentivesController address\\n   **/\\n  function getIncentivesController() external view override returns (address) {\\n    return getAddress(INCENTIVES_CONTROLLER);\\n  }\\n\\n  /**\\n   * @dev sets the address of the incentives controller\\n   * @param controller the IncentivesController address\\n   **/\\n  function setIncentivesController(address controller) external override onlyOwner {\\n    require(controller != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[INCENTIVES_CONTROLLER] = controller;\\n    emit IncentivesControllerUpdated(controller);\\n  }\\n\\n  /**\\n   * @dev returns the address of the UI data provider\\n   * @return the UIDataProvider address\\n   **/\\n  function getUIDataProvider() external view override returns (address) {\\n    return getAddress(UI_DATA_PROVIDER);\\n  }\\n\\n  /**\\n   * @dev sets the address of the UI data provider\\n   * @param provider the UIDataProvider address\\n   **/\\n  function setUIDataProvider(address provider) external override onlyOwner {\\n    _addresses[UI_DATA_PROVIDER] = provider;\\n    emit UIDataProviderUpdated(provider);\\n  }\\n\\n  /**\\n   * @dev returns the address of the Unlockd data provider\\n   * @return the UnlockdDataProvider address\\n   **/\\n  function getUnlockdDataProvider() external view override returns (address) {\\n    return getAddress(UNLOCKD_DATA_PROVIDER);\\n  }\\n\\n  /**\\n   * @dev sets the address of the Unlockd data provider\\n   * @param provider the UnlockdDataProvider address\\n   **/\\n  function setUnlockdDataProvider(address provider) external override onlyOwner {\\n    require(provider != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[UNLOCKD_DATA_PROVIDER] = provider;\\n    emit UnlockdDataProviderUpdated(provider);\\n  }\\n\\n  /**\\n   * @dev returns the address of the wallet balance provider\\n   * @return the WalletBalanceProvider address\\n   **/\\n  function getWalletBalanceProvider() external view override returns (address) {\\n    return getAddress(WALLET_BALANCE_PROVIDER);\\n  }\\n\\n  /**\\n   * @dev sets the address of the wallet balance provider\\n   * @param provider the WalletBalanceProvider address\\n   **/\\n  function setWalletBalanceProvider(address provider) external override onlyOwner {\\n    require(provider != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[WALLET_BALANCE_PROVIDER] = provider;\\n    emit WalletBalanceProviderUpdated(provider);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function getNFTXVaultFactory() external view override returns (address) {\\n    return getAddress(NFTX_VAULT_FACTORY);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function setNFTXVaultFactory(address factory) external override onlyOwner {\\n    require(factory != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[NFTX_VAULT_FACTORY] = factory;\\n    emit NFTXVaultFactoryUpdated(factory);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function getLSSVMRouter() external view override returns (address) {\\n    return getAddress(LSSVM_ROUTER);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function setLSSVMRouter(address router) external override onlyOwner {\\n    require(router != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[LSSVM_ROUTER] = router;\\n    emit LSSVMRouterUpdated(router);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function getSushiSwapRouter() external view override returns (address) {\\n    return getAddress(SUSHI_SWAP_ROUTER);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function setSushiSwapRouter(address router) external override onlyOwner {\\n    require(router != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[SUSHI_SWAP_ROUTER] = router;\\n    emit SushiSwapRouterUpdated(router);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function getLendPoolLiquidator() external view override returns (address) {\\n    return getAddress(LEND_POOL_LIQUIDATOR);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolAddressesProvider\\n   */\\n  function setLendPoolLiquidator(address liquidator) external override onlyOwner {\\n    require(liquidator != address(0), Errors.INVALID_ZERO_ADDRESS);\\n    _addresses[LEND_POOL_LIQUIDATOR] = liquidator;\\n    emit LendPoolLiquidatorUpdated(liquidator);\\n  }\\n\\n  /**\\n   * @dev Returns the implementation contract pointed by a proxy\\n   * @param proxyAddress the proxy to request the implementation from\\n   */\\n  function getImplementation(address proxyAddress) external view onlyOwner returns (address) {\\n    UnlockdUpgradeableProxy proxy = UnlockdUpgradeableProxy(payable(proxyAddress));\\n    return proxy.getImplementation();\\n  }\\n\\n  /**\\n   * @dev Internal function to update the implementation of a specific proxied component of the protocol\\n   * - If there is no proxy registered in the given `id`, it creates the proxy setting `newAdress`\\n   *   as implementation and calls the initialize() function on the proxy\\n   * - If there is already a proxy registered, it just updates the implementation to `newAddress` and\\n   *   calls the encoded method function via upgradeToAndCall() in the proxy\\n   * @param id The id of the proxy to be updated\\n   * @param newAddress The address of the new implementation\\n   **/\\n  function _updateImpl(bytes32 id, address newAddress) internal {\\n    address payable proxyAddress = payable(_addresses[id]);\\n\\n    if (proxyAddress == address(0)) {\\n      bytes memory params = abi.encodeWithSignature(\\\"initialize(address)\\\", address(this));\\n\\n      // create proxy, then init proxy & implementation\\n      UnlockdUpgradeableProxy proxy = new UnlockdUpgradeableProxy(newAddress, address(this), params);\\n\\n      _addresses[id] = address(proxy);\\n      emit ProxyCreated(id, address(proxy));\\n    } else {\\n      // upgrade implementation\\n      UnlockdUpgradeableProxy proxy = UnlockdUpgradeableProxy(proxyAddress);\\n\\n      proxy.upgradeTo(newAddress);\\n    }\\n  }\\n\\n  /**\\n   * @dev Allows to set the market which this LendPoolAddressesProvider represents\\n   * @param marketId The market id\\n   */\\n  function _setMarketId(string memory marketId) internal {\\n    _marketId = marketId;\\n    emit MarketIdSet(marketId);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasProxy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ConfigurationAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EmergencyAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"IncentivesControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LSSVMRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"LendPoolConfiguratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LendPoolLiquidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"LendPoolLoanUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"LendPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LtvManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"MarketIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NFTXVaultFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NftOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ReserveOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SushiSwapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UIDataProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UNFTRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UnlockdDataProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"WalletBalanceProviderUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLSSVMRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendPoolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendPoolLiquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendPoolLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTXVaultFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSushiSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUIDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUNFTRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockdDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWalletBalanceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"setAddressAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emergencyAdmin\",\"type\":\"address\"}],\"name\":\"setEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setLSSVMRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"configurator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"setLendPoolConfiguratorImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"setLendPoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"setLendPoolLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCallData\",\"type\":\"bytes\"}],\"name\":\"setLendPoolLoanImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"}],\"name\":\"setMarketId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftOracle\",\"type\":\"address\"}],\"name\":\"setNFTOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setNFTXVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setPoolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserveOracle\",\"type\":\"address\"}],\"name\":\"setReserveOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setSushiSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setUIDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setUNFTRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setUnlockdDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setWalletBalanceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LendPoolAddressesProvider", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000016556e6c6f636b642067656e65736973206d61726b657400000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}