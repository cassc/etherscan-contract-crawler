{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'SafeMath: subtraction overflow');\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, 'SafeMath: division by zero');\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, 'SafeMath: modulo by zero');\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\ncontract Presale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    struct UserInfo {\r\n        uint fcBought;\r\n        uint fcClaimed;\r\n        bool isBuyer;\r\n        uint usdt;\r\n        uint eth;\r\n        bool isRefundable;\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    // Fri Sep 01 2023 00:00:00 GMT+0000\r\n    uint public startTime = 1693526400;\r\n\r\n    struct PresaleStage {\r\n        uint period;\r\n        uint rateUsdt;\r\n    }\r\n\r\n    PresaleStage[] public presaleStage;\r\n\r\n    bool public isClaimable;\r\n\r\n    // total FC sold\r\n    uint public totalFcSold;\r\n    // 50000 usdt\r\n    uint public maxBuyUsdtAmount = 50000 * 1e6;\r\n    // 30 eth\r\n    uint public maxBuyEthAmount = 30 * 1e18;\r\n    // 2.5 millions usdt\r\n    uint public softCap = 2500000 * 1e6;\r\n    // 20 millions usdt\r\n    uint public hardCap = 20000000 * 1e6;\r\n    // total investors\r\n    uint public totalContributors;\r\n\r\n    uint public totalEth;\r\n    uint public totalUsdt;\r\n\r\n    // Furr coin token\r\n    IERC20 public token;\r\n    IERC20 public Usdt;\r\n\r\n    AggregatorV3Interface ethUsdtFeed;\r\n\r\n    constructor(address _token, address _usdt, address _feed) public {\r\n        require(_token != address(0), 'Invalid token address');\r\n        token = IERC20(_token);\r\n        Usdt = IERC20(_usdt);\r\n        ethUsdtFeed = AggregatorV3Interface(_feed);\r\n        addStage(2 weeks, 0.00001 * 1e6);\r\n        addStage(2 weeks, 0.0001 * 1e6);\r\n        addStage(4 weeks, 0.001 * 1e6);\r\n        addStage(4 weeks, 0.01 * 1e6);\r\n    }\r\n\r\n    function addStage(uint _period, uint _rateUsdt) public onlyOwner {\r\n        presaleStage.push(PresaleStage({period: _period, rateUsdt: _rateUsdt}));\r\n    }\r\n\r\n    function updateStage(uint _stage, uint _period, uint _rateUsdt) public onlyOwner {\r\n        (uint _currentStage, , , ) = currentPresaleState();\r\n        require(_stage > _currentStage || block.timestamp < startTime, 'The stage was already started');\r\n        presaleStage[_stage].period = _period;\r\n        presaleStage[_stage].rateUsdt = _rateUsdt;\r\n    }\r\n\r\n    function stageLength() public view returns (uint) {\r\n        return presaleStage.length;\r\n    }\r\n\r\n    function currentPresaleState() public view returns (uint, uint, uint, uint) {\r\n        uint currentTime = block.timestamp;\r\n        if (currentTime < startTime) {\r\n            return (0, 0, startTime, presaleStage[0].rateUsdt);\r\n        }\r\n        uint length = stageLength();\r\n        uint stageStartTime = startTime;\r\n        uint stageEndTime;\r\n        for (uint i = 0; i < length; i++) {\r\n            stageEndTime = stageStartTime.add(presaleStage[i].period);\r\n            if (stageStartTime <= currentTime && currentTime <= stageEndTime) {\r\n                return (i, stageStartTime, stageEndTime, presaleStage[i].rateUsdt);\r\n            }\r\n            stageStartTime = stageEndTime;\r\n        }\r\n        return (length, 0, block.timestamp, 0);\r\n    }\r\n\r\n    function getEthUsdtPrice() public view returns (int) {\r\n        (, int price, , , ) = ethUsdtFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n    function buy(uint _usdtAmount) public payable {\r\n        require(block.timestamp > startTime, 'Presale is not started');\r\n        address _user = msg.sender;\r\n        UserInfo storage user = userInfo[_user];\r\n        require(user.eth + msg.value <= maxBuyEthAmount, 'Max buy eth!');\r\n        require(user.usdt + _usdtAmount <= maxBuyUsdtAmount, 'Max buy Usdt!');\r\n        (, , , uint _rateUsdt) = currentPresaleState();\r\n        if (_usdtAmount > 0) {\r\n            Usdt.transferFrom(_user, address(this), _usdtAmount);\r\n        }\r\n        uint _fcBoughtUsdt = _usdtAmount.mul(1e18).div(_rateUsdt);\r\n        int ethPrice = getEthUsdtPrice();\r\n        uint _fcBoughtEth = msg.value.mul(1e6).div(_rateUsdt).mul(uint(ethPrice)).div(1e8);\r\n        uint _fcBought = _fcBoughtUsdt + _fcBoughtEth;\r\n        totalFcSold = totalFcSold.add(_fcBought);\r\n        user.fcBought += _fcBought;\r\n        if (user.isBuyer == false) {\r\n            user.isBuyer = true;\r\n            totalContributors += 1;\r\n        }\r\n        totalUsdt += _usdtAmount;\r\n        totalEth += msg.value;\r\n        user.usdt += _usdtAmount;\r\n        user.eth += msg.value;\r\n    }\r\n\r\n    function toogleClaim() public onlyOwner {\r\n        isClaimable = !isClaimable;\r\n    }\r\n\r\n    function claim() public {\r\n        require(isClaimable, 'Not claimable');\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint unclaimed = user.fcBought.sub(user.fcClaimed);\r\n        require(unclaimed > 0, 'No amount to claim');\r\n        require(unclaimed < token.balanceOf(address(this)), 'Insufficient token balance');\r\n        token.transfer(msg.sender, unclaimed);\r\n        user.fcClaimed += unclaimed;\r\n        totalFcSold += unclaimed;\r\n    }\r\n\r\n    function setStartTime(uint _startTime) public onlyOwner {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function setMaxBuyAmount(uint _maxBuyUsdtAmount, uint _maxBuyEthAmount) public onlyOwner {\r\n        maxBuyUsdtAmount = _maxBuyUsdtAmount;\r\n        maxBuyEthAmount = _maxBuyEthAmount;\r\n    }\r\n\r\n    function setCap(uint _softCap, uint _hardCap) public onlyOwner {\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n    }\r\n\r\n    // withdraw ETH\r\n    function withdrawFund(uint _amount, address _recipient) public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        if (balance < _amount) {\r\n            _amount = balance;\r\n        }\r\n        payable(_recipient).transfer(_amount);\r\n    }\r\n\r\n    // withdarw usdt and fc\r\n    function withdrawToken(uint _amount, address _recipient) public onlyOwner {\r\n        uint balance = token.balanceOf(address(this));\r\n        if (balance < _amount) {\r\n            _amount = balance;\r\n        }\r\n        token.transfer(_recipient, _amount);\r\n    }\r\n\r\n    function setRefundable(address _user) public onlyOwner {\r\n        UserInfo storage user = userInfo[_user];\r\n        user.isRefundable = true;\r\n    }\r\n\r\n    // refund USDT for users who can't get token after presale finished\r\n    function refundUsdt(uint _amount) public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.isRefundable, 'Not refundable');\r\n        require(user.usdt - _amount >= 0);\r\n        user.usdt = user.usdt - _amount;\r\n        uint balance = token.balanceOf(address(this));\r\n        if (balance < _amount) {\r\n            _amount = balance;\r\n        }\r\n        if (_amount > 0) {\r\n            token.transfer(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    // refund ETH for users who can't get token after presale finished\r\n    function refundEth(uint _amount) public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.isRefundable, 'Not refundable');\r\n        require(user.eth - _amount >= 0);\r\n        user.eth = user.eth - _amount;\r\n        uint balance = address(this).balance;\r\n        if (balance < _amount) {\r\n            _amount = balance;\r\n        }\r\n        if (_amount > 0) {\r\n            payable(msg.sender).transfer(_amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateUsdt\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPresaleState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdtPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presaleStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateUsdt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refundEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refundUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyUsdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuyEthAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setRefundable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stageLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toogleClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFcSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateUsdt\",\"type\":\"uint256\"}],\"name\":\"updateStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fcBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fcClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuyer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRefundable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e42ea2218b01fb887c88bd312ebdea391f56e244000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3dc283be5d53801ef68d459db508ac0ecd6ef2645bc1a091751f468cb5692932"}