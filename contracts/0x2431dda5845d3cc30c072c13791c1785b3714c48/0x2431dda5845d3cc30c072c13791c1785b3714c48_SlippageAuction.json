{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/SlippageAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.19;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ========================= SlippageAuction ==========================\\n// ====================================================================\\n// Slippage auction to sell tokens over time.  Both tokens must be 18 decimals.\\n// It has 3 parameters:\\n// - amount of sell token to auction\\n// - slippage per token bought\\n// - price decrease per day.\\n// For this we can calculate the time the auction will operate at the market price.\\n// Example:\\n// - We auction 10M\\n// - We pick a slippage such that a 100k buy will result in 0.1% slippage\\n// => 10M = 100x100k, so total price impact during the auction will be 20% (price impact is twice the slippage)\\n// - We lower the price 1% per day\\n// => the auction will be at the market price for at least 20 days.\\n\\n// Frax Finance: https://github.com/FraxFinance\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC20, IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Timelock2Step } from \\\"frax-std/access-control/v2/Timelock2Step.sol\\\";\\nimport { IUniswapV2Callee } from \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\n/// @title SlippageAuction\\n/// @notice Slippage auction to sell tokens over time.\\n/// @dev Both tokens must be 18 decimals.\\ncontract SlippageAuction is ReentrancyGuard, Timelock2Step {\\n    using SafeERC20 for IERC20;\\n\\n    // ==============================================================================\\n    // Storage\\n    // ==============================================================================\\n\\n    /// @notice The name of this auction\\n    string public name;\\n\\n    /// @notice Slippage precision\\n    uint256 public constant PRECISION = 1e18;\\n\\n    /// @notice Stored information about auctions\\n    Auction[] public auctions;\\n\\n    /// @notice The token used for buying the sellToken\\n    address public immutable BUY_TOKEN;\\n\\n    /// @notice The token being auctioned off\\n    address public immutable SELL_TOKEN;\\n\\n    /// @notice token0 to adhere to UniswapV2 interface\\n    address public immutable token0;\\n\\n    /// @notice token1 to adhere to UniswapV2 interface\\n    address public immutable token1;\\n\\n    // ==============================================================================\\n    // Structs\\n    // ==============================================================================\\n\\n    /// @notice Auction information\\n    /// @param amountLeft Amount of sellToken remaining to buy\\n    /// @param buyTokenProceeds Amount of buyToken that came in from sales\\n    /// @param lastPrice Price of the last sale, in buyToken amount per sellToken (amount of buyToken to purchase 1e18 sellToken)\\n    /// @param minPrice Minimum price of 1e18 sellToken, in buyToken\\n    /// @param priceDecay Price decay, (wei per second), using PRECISION\\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\\n    /// @param lastBuyTime Time of the last sale\\n    /// @param expiry UNIX timestamp when the auction ends\\n    /// @param exited If the auction has ended\\n    struct Auction {\\n        uint128 amountLeft;\\n        uint128 buyTokenProceeds;\\n        uint128 lastPrice;\\n        uint128 minPrice;\\n        uint64 priceDecay;\\n        uint64 priceSlippage;\\n        uint32 lastBuyTime;\\n        uint32 expiry;\\n        bool ended;\\n    }\\n\\n    // ==============================================================================\\n    // Constructor\\n    // ==============================================================================\\n\\n    /// @param _timelockAddress Address of the timelock/owner contract\\n    /// @param _buyToken The token used to buy the sellToken being auctioned off\\n    /// @param _sellToken The token being auctioned off\\n    constructor(address _timelockAddress, address _buyToken, address _sellToken) Timelock2Step(_timelockAddress) {\\n        name = string(abi.encodePacked(\\\"SlippageAuction: \\\", IERC20Metadata(_sellToken).symbol()));\\n        BUY_TOKEN = _buyToken;\\n        SELL_TOKEN = _sellToken;\\n\\n        token0 = _buyToken;\\n        token1 = _sellToken;\\n    }\\n\\n    // ==============================================================================\\n    // Views\\n    // ==============================================================================\\n\\n    /// @notice The ```version``` function returns the semantic version of this contract\\n    /// @return _major The major version\\n    /// @return _minor The minor version\\n    /// @return _patch The patch version\\n    function version() external pure returns (uint256 _major, uint256 _minor, uint256 _patch) {\\n        return (1, 0, 0);\\n    }\\n\\n    /// @notice The ```getPreSlippagePrice``` function calculates the pre-slippage price from the time decay alone\\n    /// @param _auction The auction struct\\n    /// @return _price The price\\n    function getPreSlippagePrice(Auction memory _auction) public view returns (uint256 _price) {\\n        // Calculate the sale price (in buyToken per sellToken), factoring in the time decay\\n        uint256 _decay = (_auction.priceDecay * (block.timestamp - _auction.lastBuyTime));\\n\\n        // Prevent revert on underflow when decay is too large\\n        if (_decay > _auction.lastPrice) {\\n            return _auction.minPrice;\\n        }\\n\\n        // Calculate the price\\n        _price = _auction.lastPrice - _decay;\\n\\n        // Never go below the minimum price\\n        if (_price < _auction.minPrice) {\\n            _price = _auction.minPrice;\\n        }\\n    }\\n\\n    /// @notice The ```getAmountOut``` function calculates the amount of sellTokens out for a given buyToken amount\\n    /// @param _amountIn Amount of buyToken in\\n    /// @param _revertOnOverAmountLeft Whether to revert if _amountOut > amountLeft\\n    /// @return _amountOut Amount of sellTokens out\\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\\n    function getAmountOut(\\n        uint256 _amountIn,\\n        bool _revertOnOverAmountLeft\\n    ) public view returns (uint256 _amountOut, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) {\\n        uint256 _auctionNumber = auctions.length - 1;\\n        // Get the auction info\\n        Auction memory _auction = auctions[_auctionNumber];\\n        if (_auction.ended) revert AuctionAlreadyExited();\\n        if (block.timestamp >= _auction.expiry) revert AuctionExpired();\\n\\n        // Calculate the sale price (in buyToken per sellToken), factoring in the time decay\\n        uint256 _preSlippagePrice = getPreSlippagePrice({ _auction: _auction });\\n\\n        // Calculate the slippage component of the price (in buyToken per sellToken)\\n        _slippagePerSellToken = (_auction.priceSlippage * _amountIn) / PRECISION;\\n\\n        // Calculate the output amount of sellToken, Set return value\\n        _amountOut = (_amountIn * PRECISION) / (_preSlippagePrice + _slippagePerSellToken);\\n\\n        // Make sure you are not going over the amountLeft, set return value\\n        if (_amountOut > _auction.amountLeft) {\\n            if (_revertOnOverAmountLeft) revert InsufficientSellTokensAvailable();\\n            else _amountOut = _auction.amountLeft;\\n        }\\n\\n        // Set return value\\n        _postSlippagePrice = _preSlippagePrice + (2 * _slippagePerSellToken); // Price impact is twice the slippage\\n    }\\n\\n    /// @notice The ```getAmountInMax``` function calculates how many buyTokens you would need to buy out the remaining sellTokens in the auction\\n    /// @return _amountIn Amount of buyToken needed\\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\\n    function getAmountInMax()\\n        external\\n        view\\n        returns (uint256 _amountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice)\\n    {\\n        uint256 _auctionNumber = auctions.length - 1;\\n\\n        // Get the auction info\\n        Auction memory _auction = auctions[_auctionNumber];\\n\\n        // Call the internal function with amountLeft\\n        return _getAmountIn({ _auction: _auction, _desiredOut: _auction.amountLeft });\\n    }\\n\\n    /// @notice The ```getAmountIn``` function calculates how many buyTokens you would need in order to obtain a given number of sellTokens\\n    /// @param _desiredOut The desired number of sellTokens\\n    /// @return _amountIn Amount of buyToken needed\\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\\n    function getAmountIn(\\n        uint256 _desiredOut\\n    ) public view returns (uint256 _amountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) {\\n        uint256 _auctionNumber = auctions.length - 1;\\n\\n        // Get the auction info\\n        Auction memory _auction = auctions[_auctionNumber];\\n\\n        // Call the internal function with _desiredOut, set return values\\n        (_amountIn, _slippagePerSellToken, _postSlippagePrice) = _getAmountIn({\\n            _auction: _auction,\\n            _desiredOut: _desiredOut\\n        });\\n    }\\n\\n    /// @notice The ```_getAmountIn``` function calculate how many buyTokens you would need to obtain a given number of sellTokens\\n    /// @param _auction The auction struct\\n    /// @return _amountIn Amount of buyToken needed\\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\\n    function _getAmountIn(\\n        Auction memory _auction,\\n        uint256 _desiredOut\\n    ) internal view returns (uint256 _amountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) {\\n        // Do checks\\n        if (_auction.ended) revert AuctionAlreadyExited();\\n        if (block.timestamp >= _auction.expiry) revert AuctionExpired();\\n        if (_desiredOut > _auction.amountLeft) revert InsufficientSellTokensAvailable();\\n\\n        // Calculate the sale price (in buyToken per sellToken), factoring in the time decay\\n        uint256 _preSlippagePrice = uint256(getPreSlippagePrice({ _auction: _auction }));\\n\\n        // Math in a more readable format:\\n        // uint256 _numerator = (_desiredOut * _preSlippagePrice) / PRECISION;\\n        // uint256 _denominator = (PRECISION -\\n        //     ((_desiredOut * uint256(_auction.priceSlippage)) / PRECISION));\\n        // _amountIn = (_numerator * PRECISION) / _denominator;\\n\\n        // Set return params _amountIn\\n        _amountIn =\\n            (_desiredOut * _preSlippagePrice) /\\n            (PRECISION - (_desiredOut * uint256(_auction.priceSlippage)) / PRECISION);\\n\\n        // Set return params, calculate the slippage component of the price (in buyToken per sellToken)\\n        _slippagePerSellToken = (_auction.priceSlippage * _amountIn) / PRECISION;\\n        _postSlippagePrice = _auction.lastPrice + (2 * _slippagePerSellToken); // Price impact is twice the slippage\\n    }\\n\\n    /// @notice The ```getAmountIn``` function calculates how many buyTokens you would need in order to obtain a given number of sellTokens\\n    /// @dev Maintains compatability with some router implementations\\n    /// @param amountOut The amount out of sell tokens\\n    /// @param tokenOut The sell token address\\n    /// @return _amountIn The amount of buyToken needed\\n    function getAmountIn(uint256 amountOut, address tokenOut) external view returns (uint256 _amountIn) {\\n        if (tokenOut != SELL_TOKEN) revert InvalidTokenOut();\\n        (_amountIn, , ) = getAmountIn({ _desiredOut: amountOut });\\n    }\\n\\n    /// @notice The ```getAmountOut``` function calculates the amount of sellTokens out for a given buyToken amount\\n    /// @dev Used to maintain compatibility\\n    /// @param _amountIn Amount of buyToken in\\n    /// @param tokenIn The token being swapped in\\n    /// @return _amountOut Amount of sellTokens out\\n    function getAmountOut(uint256 _amountIn, address tokenIn) external view returns (uint256 _amountOut) {\\n        if (tokenIn == BUY_TOKEN) revert InvalidTokenIn();\\n        (_amountOut, , ) = getAmountOut({ _amountIn: _amountIn, _revertOnOverAmountLeft: false });\\n    }\\n\\n    /// @notice Gets a struct instead of a tuple for auctions()\\n    /// @param _auctionNumber Auction ID\\n    /// @return _auctionStruct The struct of the auction\\n    function getAuctionStruct(uint256 _auctionNumber) external view returns (Auction memory) {\\n        return auctions[_auctionNumber];\\n    }\\n\\n    /// @notice The ```auctionsLength``` function returns the length of the auctions array\\n    /// @return _length The length of the auctions array\\n    function auctionsLength() external view returns (uint256 _length) {\\n        _length = auctions.length;\\n    }\\n\\n    /// @notice The ```getLatestAuction``` function returns the latest auction\\n    /// @dev Returns an empty struct if there are no auctions\\n    /// @return _latestAuction The latest auction struct\\n    function getLatestAuction() external view returns (Auction memory _latestAuction) {\\n        uint256 _length = auctions.length;\\n        if (_length == 0) return _latestAuction;\\n        _latestAuction = auctions[auctions.length - 1];\\n    }\\n\\n    // ==============================================================================\\n    // Owner-only Functions\\n    // ==============================================================================\\n\\n    /// @notice Parameters for creating an auction\\n    /// @dev Sender must have an allowance on sellToken\\n    /// @param sellAmount Amount of sellToken being sold\\n    /// @param startPrice Starting price of 1e18 sellToken, in buyToken\\n    /// @param minPrice Minimum price of 1e18 sellToken, in buyToken\\n    /// @param priceDecay Price decay, (wei per second), using PRECISION\\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\\n    /// @param expiry UNIX timestamp when the auction ends\\n    struct StartAuctionParams {\\n        uint128 sellAmount;\\n        uint128 startPrice;\\n        uint128 minPrice;\\n        uint64 priceDecay;\\n        uint64 priceSlippage;\\n        uint32 expiry;\\n    }\\n\\n    /// @notice The ```startAuction``` function starts a new auction\\n    /// @param _params StartAuctionParams\\n    /// @dev Requires an erc20 allowance on the sellToken prior to calling\\n    function startAuction(StartAuctionParams memory _params) external nonReentrant returns (uint256 _auctionNumber) {\\n        _requireSenderIsTimelock();\\n\\n        // Pre-compute the auction number\\n        _auctionNumber = auctions.length;\\n\\n        // Ensure that the previous auction, if any, has ended\\n        if (_auctionNumber > 0) {\\n            Auction memory _lastAuction = auctions[_auctionNumber - 1];\\n            if (_lastAuction.ended == false) revert LastAuctionStillActive();\\n        }\\n\\n        // Create the auction\\n        auctions.push(\\n            Auction({\\n                priceDecay: _params.priceDecay,\\n                priceSlippage: _params.priceSlippage,\\n                amountLeft: _params.sellAmount,\\n                buyTokenProceeds: 0,\\n                lastPrice: _params.startPrice,\\n                lastBuyTime: uint32(block.timestamp),\\n                minPrice: _params.minPrice,\\n                expiry: _params.expiry,\\n                ended: false\\n            })\\n        );\\n\\n        emit AuctionStarted({\\n            auctionNumber: _auctionNumber,\\n            sellAmount: _params.sellAmount,\\n            startPrice: _params.startPrice,\\n            minPrice: _params.minPrice,\\n            priceDecay: _params.priceDecay,\\n            priceSlippage: _params.priceSlippage,\\n            expiry: _params.expiry\\n        });\\n\\n        // Take the sellTokens from the sender\\n        IERC20(SELL_TOKEN).safeTransferFrom({ from: msg.sender, to: address(this), value: _params.sellAmount });\\n    }\\n\\n    /// @notice The ```stopAuction``` function ends the auction\\n    /// @dev Only callable by the auction owner\\n    /// @return _buyProceeds Amount of buyToken obtained from the auction\\n    /// @return _unsoldRemaining Amount of unsold sellTokens left over\\n    function stopAuction() public nonReentrant returns (uint256 _buyProceeds, uint256 _unsoldRemaining) {\\n        _requireSenderIsTimelock();\\n\\n        // Get the auction info and perform checks\\n        uint256 _auctionNumber = auctions.length - 1;\\n        Auction memory _auction = auctions[_auctionNumber];\\n        if (_auction.ended) revert AuctionAlreadyExited();\\n\\n        // Set Return params\\n        _buyProceeds = IERC20(BUY_TOKEN).balanceOf({ account: address(this) });\\n        _unsoldRemaining = IERC20(SELL_TOKEN).balanceOf({ account: address(this) });\\n\\n        _auction.ended = true;\\n        _auction.buyTokenProceeds = uint128(_buyProceeds);\\n        _auction.amountLeft = uint128(_unsoldRemaining);\\n\\n        // Effects: Update state with final balances;\\n        auctions[_auctionNumber] = _auction;\\n\\n        // Return buyToken proceeds from the auction to the sender\\n        IERC20(BUY_TOKEN).safeTransfer({ to: msg.sender, value: _buyProceeds });\\n\\n        // Return any unsold sellToken to the sender\\n        IERC20(SELL_TOKEN).safeTransfer({ to: msg.sender, value: _unsoldRemaining });\\n\\n        emit AuctionExited({ auctionNumber: _auctionNumber });\\n    }\\n\\n    // ==============================================================================\\n    // Public Functions\\n    // ==============================================================================\\n\\n    /// @notice The ```swap``` function swaps buyTokens for sellTokens\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    /// @dev Token0 is always the BUY_TOKEN, token1 is always the SELL_TOKEN\\n    /// @param _buyTokenOut The amount of buyTokens to receive\\n    /// @param _sellTokenOut The amount of sellTokens to receive\\n    /// @param _to The recipient of the output tokens\\n    /// @param _callbackData Callback data\\n    function swap(\\n        uint256 _buyTokenOut,\\n        uint256 _sellTokenOut,\\n        address _to,\\n        bytes memory _callbackData\\n    ) public nonReentrant {\\n        if (_buyTokenOut != 0) revert ExcessiveBuyTokenOut({ minOut: 0, actualOut: _buyTokenOut });\\n        if (_sellTokenOut == 0) revert InsufficientOutputAmount({ minOut: 1, actualOut: 0 });\\n\\n        // Get the auction info (similar to get reserves in univ2)\\n        uint256 _auctionNumber = auctions.length - 1;\\n        Auction memory _auction = auctions[_auctionNumber];\\n\\n        // Transfer tokens\\n        IERC20(SELL_TOKEN).safeTransfer({ to: _to, value: _sellTokenOut });\\n\\n        // Callback if necessary for flash swap\\n        if (_callbackData.length > 0) {\\n            IUniswapV2Callee(_to).uniswapV2Call({\\n                sender: msg.sender,\\n                amount0: _buyTokenOut,\\n                amount1: _sellTokenOut,\\n                data: _callbackData\\n            });\\n        }\\n\\n        // Calculate the amount of buyTokens in\\n        uint256 _buyTokenBalance = IERC20(BUY_TOKEN).balanceOf({ account: address(this) });\\n        uint256 _buyTokenIn = _buyTokenBalance - _auction.buyTokenProceeds;\\n\\n        // Adheres to uniswap v2 interface, called here to prevent stack-too-deep error\\n        emit Swap({\\n            sender: msg.sender,\\n            amount0In: _buyTokenIn,\\n            amount1In: 0,\\n            amount0Out: _buyTokenOut,\\n            amount1Out: _sellTokenOut,\\n            to: _to\\n        });\\n\\n        // Call the internal function with _desiredOut\\n        (uint256 _minAmountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) = _getAmountIn({\\n            _auction: _auction,\\n            _desiredOut: _sellTokenOut\\n        });\\n\\n        // Check invariant\\n        if (_buyTokenIn < _minAmountIn) revert InsufficientInputAmount({ minIn: _minAmountIn, actualIn: _buyTokenIn });\\n\\n        // Mutate _auction, which has the previous state\\n        _auction.amountLeft -= uint128(_sellTokenOut);\\n        _auction.buyTokenProceeds = uint128(_buyTokenBalance);\\n        _auction.lastPrice = uint128(_postSlippagePrice);\\n        _auction.lastBuyTime = uint32(block.timestamp);\\n\\n        // Write back to state, similar to _update in univ2\\n        auctions[_auctionNumber] = _auction;\\n\\n        // Emit Buy event\\n        emit Buy({\\n            auctionNumber: _auctionNumber,\\n            buyToken: BUY_TOKEN,\\n            sellToken: SELL_TOKEN,\\n            amountIn: uint128(_buyTokenIn),\\n            amountOut: uint128(_sellTokenOut),\\n            lastPrice: _auction.lastPrice,\\n            slippagePerSellToken: uint128(_slippagePerSellToken)\\n        });\\n    }\\n\\n    /// @notice The ```swapExactTokensForTokens``` function swaps an exact amount of input tokens for as many output tokens as possible\\n    /// @dev Must have an allowance on the BUY_TOKEN prior to invocation\\n    /// @param _amountIn The amount of buy tokens to send.\\n    /// @param _amountOutMin The minimum amount of sell tokens that must be received for the transaction not to revert\\n    /// @param _ignored Ignored parameter, necessary to adhere to uniV2 interface\\n    /// @param _to Recipient of the output tokens\\n    /// @param _deadline Unix timestamp after which the transaction will revert\\n    /// @return _amounts The input token amount and output token amount\\n    function swapExactTokensForTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] memory _ignored,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _amounts) {\\n        if (block.timestamp > _deadline) revert Expired();\\n        (uint256 _amountOut, , ) = getAmountOut({ _amountIn: _amountIn, _revertOnOverAmountLeft: true });\\n        if (_amountOut < _amountOutMin) {\\n            revert InsufficientOutputAmount({ minOut: _amountOutMin, actualOut: _amountOut });\\n        }\\n        IERC20(BUY_TOKEN).safeTransferFrom({ from: msg.sender, to: address(this), value: _amountIn });\\n        this.swap({ _buyTokenOut: 0, _sellTokenOut: _amountOut, _to: _to, _callbackData: new bytes(0) });\\n        _amounts = new uint256[](2);\\n        _amounts[0] = _amountIn;\\n        _amounts[1] = _amountOut;\\n    }\\n\\n    /// @notice The ```swapTokensForExactTokens``` function receives an exact amount of output tokens for as few input tokens as possible\\n    /// @dev Must have an allowance on the BUY_TOKEN prior to invocation\\n    /// @param _amountOut The amount of sell tokens to receive\\n    /// @param _amountInMax The maximum amount of buy tokens that can be required before the transaction reverts\\n    /// @param _ignored Ignored parameter, necessary to adhere to uniV2 interface\\n    /// @param _to Recipient of the output tokens\\n    /// @param _deadline Unix timestamp after which the transaction will revert\\n    /// @return _amounts The input token amount and output token amount\\n    function swapTokensForExactTokens(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _ignored,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _amounts) {\\n        // Ensure deadline has not passed\\n        if (block.timestamp > _deadline) revert Expired();\\n\\n        // Calculate the amount of buyTokens in & check invariant\\n        (uint256 _amountIn, , ) = getAmountIn({ _desiredOut: _amountOut });\\n        if (_amountIn > _amountInMax) revert ExcessiveInputAmount({ minIn: _amountInMax, actualIn: _amountIn });\\n\\n        // Interactions: Transfer buyTokens to the contract\\n        IERC20(BUY_TOKEN).safeTransferFrom({ from: msg.sender, to: address(this), value: _amountIn });\\n        \\n\\n        swap({ _buyTokenOut: 0, _sellTokenOut: _amountOut, _to: _to, _callbackData: new bytes(0) });\\n        \\n        // Set return variable\\n        _amounts = new uint256[](2);\\n        _amounts[0] = _amountIn;\\n        _amounts[1] = _amountOut;\\n    }\\n\\n    // ==============================================================================\\n    // Errors\\n    // ==============================================================================\\n\\n    /// @notice The ```AuctionAlreadyExited``` error is emitted when a user attempts to exit an auction that has already ended\\n    error AuctionAlreadyExited();\\n\\n    /// @notice The ```AuctionExpired``` error is emitted when a user attempts to interact with an auction that has expired\\n    error AuctionExpired();\\n\\n    /// @notice The ```LastAuctionStillActive``` error is emitted when a user attempts to start a new auction before the previous one has ended\\n    error LastAuctionStillActive();\\n\\n    /// @notice The ```InsufficientOutputAmount``` error is emitted when a user attempts to swap a given amount of buy tokens that would result in an insufficient amount of sell tokens\\n    /// @param minOut Minimum out that the user expects\\n    /// @param actualOut Actual amount out that would occur\\n    error InsufficientOutputAmount(uint256 minOut, uint256 actualOut);\\n\\n    /// @notice The ```InsufficientInputAmount``` error is emitted when a user attempts to swap an insufficient amount of buy tokens\\n    /// @param minIn Minimum in that the contract requires\\n    /// @param actualIn Actual amount in that has been deposited\\n    error InsufficientInputAmount(uint256 minIn, uint256 actualIn);\\n\\n    /// @notice The ```ExcessiveInputAmount``` error is emitted when a user attempts to swap an excessive amount of buy tokens for aa given amount of sell tokens\\n    /// @param minIn Minimum in that the user expects\\n    /// @param actualIn Actual amount in that would occur\\n    error ExcessiveInputAmount(uint256 minIn, uint256 actualIn);\\n\\n    /// @notice The ```InsufficientSellTokensAvailable``` error is emitted when a user attempts to buy more sell tokens than are left in the auction\\n    error InsufficientSellTokensAvailable();\\n\\n    /// @notice The ```CannotPurchaseBuyToken``` error is emitted when a user attempts to buy the buyToken using the swap() function\\n    error ExcessiveBuyTokenOut(uint256 minOut, uint256 actualOut);\\n\\n    /// @notice The ```Expired``` error is emitted when a user attempts to make a swap after the transaction deadline has passed\\n    error Expired();\\n\\n    /// @notice The ```InvalidTokenIn``` error is emitted when a user attempts to use an invalid buy token\\n    error InvalidTokenIn();\\n\\n    /// @notice The ```InvalidTokenOut``` error is emitted when a user attempts to use an invalid sell token\\n    error InvalidTokenOut();\\n\\n    // ==============================================================================\\n    // Events\\n    // ==============================================================================\\n\\n    /// @dev The ```AuctionExited``` event is emitted when an auction is ended\\n    /// @param auctionNumber The ID of the auction\\n    event AuctionExited(uint256 auctionNumber);\\n\\n    /// @dev The ```Buy``` event is emitted when a swap occurs and has more information than the ```Swap``` event\\n    /// @param auctionNumber The ID of the auction, and index in the auctions array\\n    /// @param buyToken The token used to buy the sellToken being auctioned off\\n    /// @param sellToken The token being auctioned off\\n    /// @param amountIn Amount of buyToken in\\n    /// @param amountOut Amount of sellToken out\\n    /// @param lastPrice The execution price of the buy\\n    /// @param slippagePerSellToken How many buyTokens (per sellToken) were added as slippage\\n    event Buy(\\n        uint256 auctionNumber,\\n        address buyToken,\\n        address sellToken,\\n        uint128 amountIn,\\n        uint128 amountOut,\\n        uint128 lastPrice,\\n        uint128 slippagePerSellToken\\n    );\\n\\n    /// @notice The ```Swap``` event is emitted when a swap occurs\\n    /// @param sender The address of the sender\\n    /// @param amount0In The amount of BUY_TOKEN in\\n    /// @param amount1In The amount of SELL_TOKEN in\\n    /// @param amount0Out The amount of BUY_TOKEN out\\n    /// @param amount1Out The amount of SELL_TOKEN out\\n    /// @param to The address of the recipient\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    /// @dev The ```AuctionStarted``` event is emitted when an auction is started\\n    /// @param auctionNumber The ID of the auction\\n    /// @param sellAmount Amount of sellToken being sold\\n    /// @param startPrice Starting price of the sellToken, in buyToken\\n    /// @param minPrice Minimum price of the sellToken, in buyToken\\n    /// @param priceDecay Price decay, per day, using PRECISION\\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\\n    /// @param expiry Expiration time of the auction\\n    event AuctionStarted(\\n        uint256 auctionNumber,\\n        uint128 sellAmount,\\n        uint128 startPrice,\\n        uint128 minPrice,\\n        uint128 priceDecay,\\n        uint128 priceSlippage,\\n        uint32 expiry\\n    );\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/src/access-control/v2/Timelock2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity >=0.8.0;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ========================== Timelock2Step ===========================\\n// ====================================================================\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author\\n// Drake Evans: https://github.com/DrakeEvans\\n\\n// Reviewers\\n// Dennis: https://github.com/denett\\n\\n// ====================================================================\\n\\n/// @title Timelock2Step\\n/// @author Drake Evans (Frax Finance) https://github.com/drakeevans\\n/// @dev Inspired by OpenZeppelin's Ownable2Step contract\\n/// @notice  An abstract contract which contains 2-step transfer and renounce logic for a timelock address\\nabstract contract Timelock2Step {\\n    /// @notice The pending timelock address\\n    address public pendingTimelockAddress;\\n\\n    /// @notice The current timelock address\\n    address public timelockAddress;\\n\\n    constructor(address _timelockAddress) {\\n        timelockAddress = _timelockAddress;\\n    }\\n\\n    // ============================================================================================\\n    // Functions: External Functions\\n    // ============================================================================================\\n\\n    /// @notice The ```transferTimelock``` function initiates the timelock transfer\\n    /// @dev Must be called by the current timelock\\n    /// @param _newTimelock The address of the nominated (pending) timelock\\n    function transferTimelock(address _newTimelock) external virtual {\\n        _requireSenderIsTimelock();\\n        _transferTimelock(_newTimelock);\\n    }\\n\\n    /// @notice The ```acceptTransferTimelock``` function completes the timelock transfer\\n    /// @dev Must be called by the pending timelock\\n    function acceptTransferTimelock() external virtual {\\n        _requireSenderIsPendingTimelock();\\n        _acceptTransferTimelock();\\n    }\\n\\n    /// @notice The ```renounceTimelock``` function renounces the timelock after setting pending timelock to current timelock\\n    /// @dev Pending timelock must be set to current timelock before renouncing, creating a 2-step renounce process\\n    function renounceTimelock() external virtual {\\n        _requireSenderIsTimelock();\\n        _requireSenderIsPendingTimelock();\\n        _transferTimelock(address(0));\\n        _setTimelock(address(0));\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Internal Actions\\n    // ============================================================================================\\n\\n    /// @notice The ```_transferTimelock``` function initiates the timelock transfer\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _newTimelock The address of the nominated (pending) timelock\\n    function _transferTimelock(address _newTimelock) internal {\\n        pendingTimelockAddress = _newTimelock;\\n        emit TimelockTransferStarted(timelockAddress, _newTimelock);\\n    }\\n\\n    /// @notice The ```_acceptTransferTimelock``` function completes the timelock transfer\\n    /// @dev This function is to be implemented by a public function\\n    function _acceptTransferTimelock() internal {\\n        pendingTimelockAddress = address(0);\\n        _setTimelock(msg.sender);\\n    }\\n\\n    /// @notice The ```_setTimelock``` function sets the timelock address\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _newTimelock The address of the new timelock\\n    function _setTimelock(address _newTimelock) internal {\\n        emit TimelockTransferred(timelockAddress, _newTimelock);\\n        timelockAddress = _newTimelock;\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Internal Checks\\n    // ============================================================================================\\n\\n    /// @notice The ```_isTimelock``` function checks if _address is current timelock address\\n    /// @param _address The address to check against the timelock\\n    /// @return Whether or not msg.sender is current timelock address\\n    function _isTimelock(address _address) internal view returns (bool) {\\n        return _address == timelockAddress;\\n    }\\n\\n    /// @notice The ```_requireIsTimelock``` function reverts if _address is not current timelock address\\n    /// @param _address The address to check against the timelock\\n    function _requireIsTimelock(address _address) internal view {\\n        if (!_isTimelock(_address)) revert AddressIsNotTimelock(timelockAddress, _address);\\n    }\\n\\n    /// @notice The ```_requireSenderIsTimelock``` function reverts if msg.sender is not current timelock address\\n    /// @dev This function is to be implemented by a public function\\n    function _requireSenderIsTimelock() internal view {\\n        _requireIsTimelock(msg.sender);\\n    }\\n\\n    /// @notice The ```_isPendingTimelock``` function checks if the _address is pending timelock address\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _address The address to check against the pending timelock\\n    /// @return Whether or not _address is pending timelock address\\n    function _isPendingTimelock(address _address) internal view returns (bool) {\\n        return _address == pendingTimelockAddress;\\n    }\\n\\n    /// @notice The ```_requireIsPendingTimelock``` function reverts if the _address is not pending timelock address\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _address The address to check against the pending timelock\\n    function _requireIsPendingTimelock(address _address) internal view {\\n        if (!_isPendingTimelock(_address)) revert AddressIsNotPendingTimelock(pendingTimelockAddress, _address);\\n    }\\n\\n    /// @notice The ```_requirePendingTimelock``` function reverts if msg.sender is not pending timelock address\\n    /// @dev This function is to be implemented by a public function\\n    function _requireSenderIsPendingTimelock() internal view {\\n        _requireIsPendingTimelock(msg.sender);\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Events\\n    // ============================================================================================\\n\\n    /// @notice The ```TimelockTransferStarted``` event is emitted when the timelock transfer is initiated\\n    /// @param previousTimelock The address of the previous timelock\\n    /// @param newTimelock The address of the new timelock\\n    event TimelockTransferStarted(address indexed previousTimelock, address indexed newTimelock);\\n\\n    /// @notice The ```TimelockTransferred``` event is emitted when the timelock transfer is completed\\n    /// @param previousTimelock The address of the previous timelock\\n    /// @param newTimelock The address of the new timelock\\n    event TimelockTransferred(address indexed previousTimelock, address indexed newTimelock);\\n\\n    // ============================================================================================\\n    // Functions: Errors\\n    // ============================================================================================\\n\\n    /// @notice Emitted when timelock is transferred\\n    error AddressIsNotTimelock(address timelockAddress, address actualAddress);\\n\\n    /// @notice Emitted when pending timelock is transferred\\n    error AddressIsNotPendingTimelock(address pendingTimelockAddress, address actualAddress);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IUniswapV2Callee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"frax-std/=lib/frax-standard-solidity/src/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"ds-test/=lib/frax-standard-solidity/lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/frax-standard-solidity/lib/forge-std/src/\",\r\n      \"frax-standard-solidity/=lib/frax-standard-solidity/src/\",\r\n      \"solidity-bytes-utils/=lib/frax-standard-solidity/lib/solidity-bytes-utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingTimelockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualAddress\",\"type\":\"address\"}],\"name\":\"AddressIsNotPendingTimelock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualAddress\",\"type\":\"address\"}],\"name\":\"AddressIsNotTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionAlreadyExited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualOut\",\"type\":\"uint256\"}],\"name\":\"ExcessiveBuyTokenOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualIn\",\"type\":\"uint256\"}],\"name\":\"ExcessiveInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualIn\",\"type\":\"uint256\"}],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualOut\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSellTokensAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastAuctionStillActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionNumber\",\"type\":\"uint256\"}],\"name\":\"AuctionExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"sellAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceDecay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceSlippage\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amountOut\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"slippagePerSellToken\",\"type\":\"uint128\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTimelock\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTimelock\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUY_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELL_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTransferTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"buyTokenProceeds\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_desiredOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippagePerSellToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postSlippagePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountInMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippagePerSellToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postSlippagePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revertOnOverAmountLeft\",\"type\":\"bool\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippagePerSellToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postSlippagePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"name\":\"getAuctionStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"buyTokenProceeds\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct SlippageAuction.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"buyTokenProceeds\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct SlippageAuction.Auction\",\"name\":\"_latestAuction\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"buyTokenProceeds\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct SlippageAuction.Auction\",\"name\":\"_auction\",\"type\":\"tuple\"}],\"name\":\"getPreSlippagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTimelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"sellAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"internalType\":\"struct SlippageAuction.StartAuctionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyProceeds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unsoldRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callbackData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_ignored\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_ignored\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTimelock\",\"type\":\"address\"}],\"name\":\"transferTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_patch\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SlippageAuction", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000db3388e770f49a604e11f1a2084b39279492a61f0000000000000000000000007389d9712e4cf8ed5ae22b9ee21ce42ce2e3f050000000000000000000000000853d955acef822db058eb8505911ed77f175b99e", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}