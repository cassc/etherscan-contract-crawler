{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n// Interface for the ERC721 contract\r\ninterface ERC721 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\ncontract EthTransferWithFee {\r\n\r\n    // address payable public receiver;\r\n    address payable public owner;\r\n    uint256 public feePercentage = 10;\r\n    uint256 public groupFeePercentage = 10;\r\n    ERC721 erc721;\r\n\r\n\r\n    // Event for logging transfer details\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 fee\r\n    );\r\n\r\n\r\n    constructor(address contractAddress) {\r\n        owner = payable(msg.sender);\r\n        erc721 = ERC721(contractAddress);\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n    return owner;\r\n    }\r\n\r\n\r\n    function updateNFTContractAddress(address _newContract) external onlyOwner {\r\n        erc721 = ERC721(_newContract);\r\n    }\r\n\r\n\r\n    function getERC721Balance(address user) public view returns (bool) {\r\n        return erc721.balanceOf(user) > 0;\r\n    }\r\n\r\n    function singleTransfer(address payable receiver) external payable {\r\n        require(msg.value > 0, \"Invalid amount\");\r\n        if (getERC721Balance(msg.sender)) {\r\n            emit Transfer(msg.sender, receiver, msg.value, 0);\r\n            (bool withoutFee, ) = receiver.call{value: msg.value}(\"\");\r\n            require(withoutFee, \"Transfer to receiver failed\");\r\n            return;\r\n        }\r\n        uint256 feeAmount = (msg.value * feePercentage) / 100;\r\n        uint256 transferAmount = msg.value - feeAmount;\r\n        // Emit event\r\n        emit Transfer(msg.sender, receiver, transferAmount, feeAmount);\r\n        // Transfer ETH to receiver\r\n        (bool success, ) = receiver.call{value: transferAmount}(\"\");\r\n        require(success, \"Transfer to receiver failed\");\r\n        // Transfer fee to contract owner\r\n        (success, ) = owner.call{value: feeAmount}(\"\");\r\n        require(success, \"Transfer of fee failed\");\r\n    }\r\n\r\n\r\n    // Function to receive Ether and apply fee\r\n    function transferWithFee(\r\n        address payable receiver,\r\n        uint256 amount\r\n    ) internal {\r\n        require(amount > 0, \"Invalid amount\");\r\n        if (getERC721Balance(msg.sender)) {\r\n            (bool withoutFee, ) = receiver.call{value: amount}(\"\");\r\n            require(withoutFee, \"Transfer to receiver failed\");\r\n            emit Transfer(msg.sender, receiver, amount, 0);\r\n            return;\r\n        }\r\n        uint256 feeAmount = (amount * groupFeePercentage) / 100;\r\n        uint256 transferAmount = amount - feeAmount;\r\n        // Transfer ETH to receiver\r\n        (bool success, ) = receiver.call{value: transferAmount}(\"\");\r\n        require(success, \"Transfer to receiver failed\");\r\n        // Transfer fee to contract owner\r\n        (success, ) = owner.call{value: feeAmount}(\"\");\r\n        require(success, \"Transfer of fee failed\");\r\n        // Emit event\r\n        emit Transfer(msg.sender, receiver, transferAmount, feeAmount);\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only contract owner can change\");\r\n        _;\r\n    }\r\n\r\n\r\n    // Function to change the receiver address\r\n    function changeOwner(address payable _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid address\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n\r\n    // Function to change the fee percentage\r\n    function changeFeePercentage(uint256 _newFeePercentage) external onlyOwner {\r\n        require(_newFeePercentage <= 100, \"Invalid fee percentage\");\r\n        feePercentage = _newFeePercentage;\r\n    }\r\n\r\n\r\n    function changeGroupFeePercentage(\r\n        uint256 _newGroupFeePercentage\r\n    ) external onlyOwner {\r\n        require(_newGroupFeePercentage <= 100, \"Invalid fee percentage\");\r\n        groupFeePercentage = _newGroupFeePercentage;\r\n    }\r\n\r\n\r\n    function groupTransferWithSeperateAmount(\r\n        address payable[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) external payable {\r\n        require(\r\n            msg.value == getTotalAmount(amounts),\r\n            \"Incorrect ETH value sent\"\r\n        );\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            transferWithFee(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function groupTransferWithSameAmount(\r\n        address payable[] memory recipients\r\n    ) external payable {\r\n        require(msg.value > 0, \"Invalid amount\");\r\n        uint256 splitAmount = msg.value / recipients.length;\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            transferWithFee(recipients[i], splitAmount);\r\n        }\r\n    }\r\n\r\n\r\n    function getTotalAmount(\r\n        uint256[] memory amounts\r\n    ) private pure returns (uint256) {\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            total += amounts[i];\r\n        }\r\n        return total;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"changeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGroupFeePercentage\",\"type\":\"uint256\"}],\"name\":\"changeGroupFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getERC721Balance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"groupTransferWithSameAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"groupTransferWithSeperateAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"singleTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updateNFTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EthTransferWithFee", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000077372a4cc66063575b05b44481f059be356964a4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://af9ff620f73acb51d508cbf052209d5a6ad8c50c1b4784ce9d8a3b645d02f80e"}