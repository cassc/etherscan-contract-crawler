{"SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\r\n/// @notice The guard logic is not required here as this contract doesn't support nested delegate calls\r\ncontract WalliroMultiSendCallOnly {\r\n    /// @dev Sends multiple transactions and reverts all if one fails.\r\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\r\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\r\n    ///                     to as a address (=> 20 bytes),\r\n    ///                     value as a uint256 (=> 32 bytes),\r\n    ///                     data length as a uint256 (=> 32 bytes),\r\n    ///                     data as bytes.\r\n    ///                     see abi.encodePacked for more information on packed encoding\r\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\r\n    ///         but reverts if a transaction tries to use a delegatecall.\r\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\r\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\r\n    function multiSend(bytes memory transactions) public payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let length := mload(transactions)\r\n            let i := 0x20\r\n            for {\r\n                // Pre block is not used in \"while mode\"\r\n            } lt(i, length) {\r\n                // Post block is not used in \"while mode\"\r\n            } {\r\n                // First byte of the data is the operation.\r\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\r\n                // This will also zero out unused data.\r\n                let operation := shr(0xf8, mload(add(transactions, i)))\r\n                // We offset the load address by 1 byte (operation byte)\r\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\r\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\r\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\r\n                let value := mload(add(transactions, add(i, 0x15)))\r\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\r\n                let dataLength := mload(add(transactions, add(i, 0x35)))\r\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\r\n                let data := add(transactions, add(i, 0x55))\r\n                let success := 0\r\n                switch operation\r\n                    case 0 {\r\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\r\n                    }\r\n                    // This version does not allow delegatecalls\r\n                    case 1 {\r\n                        revert(0, 0)\r\n                    }\r\n                if eq(success, 0) {\r\n                    revert(0, 0)\r\n                }\r\n                // Next entry starts at 85 byte + data length\r\n                i := add(i, add(0x55, dataLength))\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "WalliroMultiSendCallOnly", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fe64fa3516843bfa6b6637444fe27c3c81e8f753911a81c4dac553b499fb5dac"}