{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/IesVIB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IesVIB {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function mint(address user, uint256 amount) external returns(bool);\\n    function burn(address user, uint256 amount) external returns(bool);\\n}\"\r\n    },\r\n    \"contracts/stakerewardV2pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\nimport \\\"./IesVIB.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IesVIBBoost {\\n    function getUserBoost(\\n        address user,\\n        uint256 userUpdatedAt,\\n        uint256 finishAt\\n    ) external view returns (uint256);\\n\\n    function getUnlockTime(address user)\\n        external\\n        view\\n        returns (uint256 unlockTime);\\n}\\n\\ninterface IvibraniumFund {\\n    function refreshReward(address user) external;\\n}\\n\\ncontract StakingRewardsV2 {\\n    // Immutable variables for staking and rewards tokens\\n    IERC20 public immutable stakingToken;\\n    IesVIB public immutable rewardsToken;\\n    IesVIBBoost public esVIBBoost;\\n    IvibraniumFund public vibraniumFund;\\n    address public owner;\\n\\n    // Duration of rewards to be paid out (in seconds)\\n    uint256 public duration = 2_592_000;\\n    // Timestamp of when the rewards finish\\n    uint256 public finishAt;\\n    // Minimum of last updated time and reward finish time\\n    uint256 public updatedAt;\\n    // Reward to be paid out per second\\n    uint256 public rewardRate;\\n    // Sum of (reward rate * dt * 1e18 / total supply)\\n    uint256 public rewardPerTokenStored;\\n    // User address => rewardPerTokenStored\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    // User address => rewards to be claimed\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public userUpdatedAt;\\n\\n    // Total staked\\n    uint256 public totalSupply;\\n    // User address => staked amount\\n    mapping(address => uint256) public balanceOf;\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _boost,\\n        address _fund\\n    ) {\\n        owner = msg.sender;\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IesVIB(_rewardToken);\\n        esVIBBoost = IesVIBBoost(_boost);\\n        vibraniumFund = IvibraniumFund(_fund);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    // Update user's claimable reward data and record the timestamp.\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        updatedAt = lastTimeRewardApplicable();\\n\\n        if (_account != address(0)) {\\n            rewards[_account] = earned(_account);\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n            userUpdatedAt[_account] = block.timestamp;\\n        }\\n        _;\\n    }\\n\\n    // Returns the last time the reward was applicable\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return _min(finishAt, block.timestamp);\\n    }\\n\\n    // Calculates and returns the reward per token\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\\n            totalSupply;\\n    }\\n\\n    // Allows users to stake a specified amount of tokens\\n    function stake(uint256 _amount) external updateReward(msg.sender) {\\n        require(_amount > 0, \\\"amount = 0\\\");\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        balanceOf[msg.sender] += _amount;\\n        totalSupply += _amount;\\n    }\\n\\n    // Allows users to withdraw a specified amount of staked tokens\\n    function withdraw(uint256 _amount) external updateReward(msg.sender) {\\n        require(_amount > 0, \\\"amount = 0\\\");\\n        balanceOf[msg.sender] -= _amount;\\n        totalSupply -= _amount;\\n        stakingToken.transfer(msg.sender, _amount);\\n    }\\n\\n    function getBoost(address _account) public view returns (uint256) {\\n        return 100 * 1e18 + esVIBBoost.getUserBoost(\\n            _account,\\n            userUpdatedAt[_account],\\n            finishAt\\n        );\\n    }\\n\\n    // Calculates and returns the earned rewards for a user\\n    function earned(address _account) public view returns (uint256) {\\n        return\\n            ((balanceOf[_account] *\\n                getBoost(_account) *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e38) +\\n            rewards[_account];\\n    }\\n\\n    // Allows users to claim their earned rewards\\n    function getReward() external updateReward(msg.sender) {\\n        require(\\n            block.timestamp >= esVIBBoost.getUnlockTime(msg.sender),\\n            \\\"Your lock-in period has not ended. You can't claim your esVIB now.\\\"\\n        );\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            vibraniumFund.refreshReward(msg.sender);\\n            rewardsToken.mint(msg.sender, reward);\\n        }\\n    }\\n\\n    // Allows the owner to set the rewards duration\\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\\n        require(finishAt < block.timestamp, \\\"reward duration not finished\\\");\\n        duration = _duration;\\n    }\\n\\n    // Allows the owner to set the boost contract address\\n    function setBoost(address _boost) external onlyOwner {\\n        esVIBBoost = IesVIBBoost(_boost);\\n    }\\n\\n    // Allows the owner to set the mining rewards.\\n    function notifyRewardAmount(uint256 _amount)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= finishAt) {\\n            rewardRate = _amount / duration;\\n        } else {\\n            uint256 remainingRewards = (finishAt - block.timestamp) *\\n                rewardRate;\\n            rewardRate = (_amount + remainingRewards) / duration;\\n        }\\n\\n        require(rewardRate > 0, \\\"reward rate = 0\\\");\\n\\n        finishAt = block.timestamp + duration;\\n        updatedAt = block.timestamp;\\n    }\\n\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esVIBBoost\",\"outputs\":[{\"internalType\":\"contract IesVIBBoost\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IesVIB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vibraniumFund\",\"outputs\":[{\"internalType\":\"contract IvibraniumFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewardsV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000fc96f2ef6d2e41b7177d156a7f89482ae047b9900000000000000000000000063dcce3d0fc4eb835cbbc8afff76e2ab7cd1e058000000000000000000000000b84677cd95252624be7262d30478eae95704a21d000000000000000000000000b3fa9373b10dd0d5904f2e6624e2f2ca79ac5465", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}