{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract DocumentStore is Ownable {\r\n  string public name;\r\n  string public version = \"2.2.0\";\r\n\r\n  /// A mapping of the document hash to the block number that was issued\r\n  mapping(bytes32 => uint) documentIssued;\r\n  /// A mapping of the hash of the claim being revoked to the revocation block number\r\n  mapping(bytes32 => uint) documentRevoked;\r\n\r\n  event DocumentIssued(bytes32 indexed document);\r\n  event DocumentRevoked(\r\n    bytes32 indexed document\r\n  );\r\n\r\n  constructor(\r\n    string _name\r\n  ) public\r\n  {\r\n    name = _name;\r\n  }\r\n\r\n  function issue(\r\n    bytes32 document\r\n  ) public onlyOwner onlyNotIssued(document)\r\n  {\r\n    documentIssued[document] = block.number;\r\n    emit DocumentIssued(document);\r\n  }\r\n\r\n  function getIssuedBlock(\r\n    bytes32 document\r\n  ) public onlyIssued(document) view returns (uint)\r\n  {\r\n    return documentIssued[document];\r\n  }\r\n\r\n  function isIssued(\r\n    bytes32 document\r\n  ) public view returns (bool)\r\n  {\r\n    return (documentIssued[document] != 0);\r\n  }\r\n\r\n  function isIssuedBefore(\r\n    bytes32 document,\r\n    uint blockNumber\r\n  ) public view returns (bool)\r\n  {\r\n    return documentIssued[document] != 0 && documentIssued[document] <= blockNumber;\r\n  }\r\n\r\n  function revoke(\r\n    bytes32 document\r\n  ) public onlyOwner onlyNotRevoked(document) returns (bool)\r\n  {\r\n    documentRevoked[document] = block.number;\r\n    emit DocumentRevoked(document);\r\n  }\r\n\r\n  function isRevoked(\r\n    bytes32 document\r\n  ) public view returns (bool)\r\n  {\r\n    return documentRevoked[document] != 0;\r\n  }\r\n\r\n  function isRevokedBefore(\r\n    bytes32 document,\r\n    uint blockNumber\r\n  ) public view returns (bool)\r\n  {\r\n    return documentRevoked[document] <= blockNumber && documentRevoked[document] != 0;\r\n  }\r\n\r\n  modifier onlyIssued(bytes32 document) {\r\n    require(isIssued(document), \"Error: Only issued document hashes can be revoked\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyNotIssued(bytes32 document) {\r\n    require(!isIssued(document), \"Error: Only hashes that have not been issued can be issued\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyNotRevoked(bytes32 claim) {\r\n    require(!isRevoked(claim), \"Error: Hash has been revoked previously\");\r\n    _;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"isIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"isRevokedBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"isRevoked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"isIssuedBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"getIssuedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"DocumentIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"document\",\"type\":\"bytes32\"}],\"name\":\"DocumentRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "DocumentStore", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000033476f7665726e6d656e7420546563686e6f6c6f6779204167656e6379206f662053696e6761706f72652028476f76546563682900000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ff90cde13f69cd732a84d71f903138ffee1c09ccd80e878aacc60cc25d630f08"}