{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: IRewardReserve.sol\r\n\r\npragma solidity ^0.8.21;\r\n\r\ninterface IRewardReserve{\r\n    function transferReward(address token, uint256 amount, address to) external;\r\n}\r\n// File: IRoleRegistry.sol\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\ninterface IRoleRegistry{\r\n    function getRouter() external view returns(address);\r\n    function getOwner() external view returns(address);\r\n    function getController() external view returns(address);\r\n    function getRewardDistributor() external view returns(address);\r\n    function getOperator() external view returns(address);\r\n    function getVRF() external view returns(address);\r\n    function getReserveAddress() external view returns(address);\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: stETHPoolV1.sol\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract stETHPool{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    event rewardPortionUpdated(uint256 first, uint256 second, uint256 third);\r\n    event OwnershipTransferred(address oldOwner, address newOwner);\r\n    event ControllerRoleTransferred(address oldController, address newController);\r\n    event changedRouter(address oldRouter, address newRouter);\r\n\r\n\r\n    struct PrizeDetails{\r\n        address winner;\r\n        uint256 prizeAmount;\r\n        bool claimed;\r\n    }\r\n    struct EpochResult{\r\n        PrizeDetails first;\r\n        PrizeDetails second;\r\n        PrizeDetails third;\r\n        bool finalized;\r\n        uint256 totalPrize;\r\n        uint256 duration;\r\n        uint256 createdTimeStamp;\r\n        //uint256 totalParticipant;\r\n    }\r\n\r\n    struct rewardAllocation{\r\n        uint256 first;\r\n        uint256 second;\r\n        uint256 third;\r\n    }\r\n    struct userInfo{\r\n        address userAddress;\r\n        uint256 DepositAmount;\r\n        uint256 registeredDate;\r\n        uint256 Lastupdated;\r\n        //uint256 depositTimeStamp;\r\n    }\r\n    struct ChangeArray{\r\n        uint256 oldAmount;\r\n        uint256 newAmount;\r\n        uint256 updatedBlock;\r\n    }\r\n    struct userChangeHistory{\r\n        bool changedwithinEpoch;\r\n        ChangeArray[] historyArray;\r\n    }\r\n    struct rewardHistory{\r\n        uint256 EpochNumber;\r\n        uint256 position;\r\n        uint256 PrizeAmount;\r\n    }\r\n    struct claimableRewardInfo{\r\n        uint256 claimable;\r\n        rewardHistory[] rewardHistoryArray;\r\n        uint256[] temporaryNotClaimedEpochArray;\r\n    }\r\n\r\n\r\n    \r\n    address registryContract;\r\n    bool initialized;\r\n    uint256 amountOfUser;\r\n    mapping(uint256 => userInfo) internal userDepositInfo;\r\n    mapping(address => uint256) internal userID;\r\n    //mapping(address => userInfo) public userDepositInfo;\r\n    mapping(uint256 => mapping(uint256 => uint256)) internal accumulatedTicket;\r\n    mapping(uint256 => mapping(uint256 => userChangeHistory)) internal changeHistory;\r\n    mapping(address => claimableRewardInfo) internal claimableRewardData;\r\n    uint256 status;\r\n    uint256 poolTVL;\r\n    rewardAllocation AllocationPortion;\r\n    uint256 PercentageDecimal;\r\n    EpochResult[] EpochResults;\r\n    uint256 epochDuration;\r\n    address TokentoDeposit;\r\n    //address StakePoolAddress;\r\n    //uint256 minToDeposit;\r\n    uint256 TICKET_DECIMAL;\r\n    \r\n    \r\n    modifier validEpoch(uint256 epochNumber){\r\n        uint256 latestEpoch = getLatestEpoch();\r\n        require(epochNumber <= latestEpoch,\"Invalid epoch number\");\r\n        _;\r\n    }\r\n\r\n    modifier contractStarted(){\r\n        uint256 epochLength = getEpochLength();\r\n        require(epochLength > 0, \"Contract not started\");\r\n        _;\r\n    }\r\n    modifier onlyRewardDistributor(){\r\n        address role = IRoleRegistry(registryContract).getRewardDistributor();\r\n        require(msg.sender == role, \"Invalid caller\");\r\n        _;\r\n    }\r\n    modifier onlyOwner(){\r\n        address role = IRoleRegistry(registryContract).getOwner();\r\n        require(msg.sender == role, \"Invalid caller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController(){\r\n        address role = IRoleRegistry(registryContract).getController();\r\n        require(msg.sender == role, \"Invalid caller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRouter(){\r\n        address role = IRoleRegistry(registryContract).getRouter();\r\n        require(msg.sender == role, \"Invalid caller\");\r\n        _;\r\n    }\r\n    modifier nonReentrant(){\r\n        require(status == 0, \"Illegal call\");\r\n        status = 1;\r\n        _;\r\n        status = 0;\r\n    }\r\n    function initialize(address registryAddress) external{\r\n        require(initialized == false, \"Contract is initialized already\");\r\n        _transferRegistryAddr(registryAddress);\r\n        initialized = true;\r\n    }\r\n    function _transferRegistryAddr(address registryAddress) internal{\r\n        registryContract = registryAddress;\r\n    }\r\n    function changeRegistryContractAddr(address registryAddress) external onlyOwner{\r\n        _transferRegistryAddr(registryAddress);\r\n    }\r\n    //function getMinAmountToDeposit() public view returns(uint256){\r\n        //uint256 result = minToDeposit;\r\n        //return result;\r\n    //}\r\n    function depositFor(address user, uint256 amount) external onlyRouter nonReentrant contractStarted{\r\n        //require(amount >= minToDeposit,\"The minimum amount is not met\");\r\n        uint256 realDepositAmount = getTokenFromMsgsender(amount);\r\n        updateUserInfo(user, realDepositAmount,true);\r\n    }\r\n    function withdrawFor(address user, uint256 amount) external onlyRouter nonReentrant contractStarted{\r\n        require(amount > 0, \"Invalid amount\");\r\n        updateUserInfo(user, amount, false);\r\n        sendTokenToMsgsender(amount);\r\n    }\r\n    function updateUserInfo(address user, uint256 amount, bool isDeposit) internal {\r\n        if(isDeposit){\r\n            //get UserID. If userID = 0, set userID + user\r\n            uint256 userIDnow = userID[user];\r\n            bool addNewUser = false;\r\n            //get current amount of user\r\n            if(userIDnow == 0){\r\n                registerNewUser(user);\r\n                addNewUser = true;\r\n            }\r\n\r\n            if(addNewUser){\r\n                userIDnow = userID[user];\r\n            }\r\n\r\n            _proceedUpdate(userIDnow, amount, isDeposit);\r\n        }\r\n        else if(isDeposit == false){\r\n            uint256 userIDnow = userID[user];\r\n            require(userIDnow != 0, \"User not registered\");\r\n            _proceedUpdate(userIDnow, amount, isDeposit);\r\n        }\r\n    }\r\n    function _proceedUpdate(uint256 userIDnow, uint256 amount, bool isDeposit) internal{\r\n        uint256 beforeUpdateBalance = userDepositInfo[userIDnow].DepositAmount;\r\n        if(isDeposit){\r\n            userDepositInfo[userIDnow].DepositAmount += amount;\r\n            poolTVL += amount;\r\n        }\r\n        else if(isDeposit == false){\r\n        require(amount<= userDepositInfo[userIDnow].DepositAmount, \"Invalid amount\");\r\n        userDepositInfo[userIDnow].DepositAmount -= amount;\r\n        poolTVL -= amount;\r\n        }\r\n        uint256 latestUpdatedBlock = userDepositInfo[userIDnow].Lastupdated;\r\n        userDepositInfo[userIDnow].Lastupdated = block.timestamp;\r\n        uint256 afterUpdateBalance = userDepositInfo[userIDnow].DepositAmount;\r\n        uint256 currentEpoch = getLatestEpoch();\r\n        EpochResult storage getEpochDetails = EpochResults[currentEpoch];\r\n        uint256 endBlock = getEpochDetails.createdTimeStamp.add(getEpochDetails.duration);\r\n        require(block.timestamp <= endBlock, \"Contract is in the process of updating. Please wait for a while and try again\");\r\n        _updateBalanceChange(userIDnow,beforeUpdateBalance,afterUpdateBalance, currentEpoch);\r\n        _updateAccumulatedTicket(userIDnow, beforeUpdateBalance, latestUpdatedBlock, currentEpoch);\r\n        \r\n    }\r\n    function _updateAccumulatedTicket(uint256 userIDnow, uint256 beforeUpdateBalance, uint256 latestUpdatedBlock, uint256 currentEpoch) internal{\r\n        //Get current Epoch info\r\n        EpochResult memory epochInfo = EpochResults[currentEpoch];\r\n        //n\u1ebfu latestUpdatedBlock n\u1eb1m trong range currentEpoch -> l\u1ea5y t\u1eeb latestUpdatedBlock\r\n        //N\u1ebfu latestUpdatedBlock n\u1eb1m d\u01b0\u1edbi start date -> L\u1ea5y t\u1eeb startBlock\r\n        uint256 epochStartBlock = epochInfo.createdTimeStamp;\r\n        //uint256 epochDuration = epochInfo.duration;\r\n        uint256 epochEndBlock = epochInfo.duration.add(epochStartBlock);\r\n        \r\n        uint256 range;\r\n        if(latestUpdatedBlock<epochStartBlock){\r\n            range = block.timestamp.sub(epochStartBlock);\r\n        }\r\n        else if(latestUpdatedBlock >= epochStartBlock && latestUpdatedBlock<= epochEndBlock){\r\n            range = block.timestamp.sub(latestUpdatedBlock);\r\n        }\r\n        uint256 accumulatedAmount = range.mul(beforeUpdateBalance);\r\n        accumulatedTicket[currentEpoch][userIDnow] += accumulatedAmount;\r\n    }\r\n    function _updateBalanceChange(uint256 userIDnow, uint256 beforeUpdateBalance, uint256 afterUpdateBalance, uint256 currentEpoch) internal{\r\n        changeHistory[currentEpoch][userIDnow].changedwithinEpoch = true;\r\n        changeHistory[currentEpoch][userIDnow].historyArray.push(\r\n        ChangeArray(\r\n        {\r\n            oldAmount: beforeUpdateBalance,\r\n            newAmount: afterUpdateBalance,\r\n            updatedBlock: block.timestamp\r\n        })\r\n        );\r\n        //accumulatedTicket[currentEpoch][userID] = beforeUpdateBalance * ;\r\n    }\r\n    function registerNewUser(address user) internal{\r\n        amountOfUser += 1;\r\n        userID[user] = amountOfUser;\r\n        uint256 newUserID = getUserID(user);\r\n        userDepositInfo[newUserID].userAddress = user;\r\n        userDepositInfo[newUserID].DepositAmount = 0;\r\n        userDepositInfo[newUserID].registeredDate = block.timestamp;\r\n        userDepositInfo[newUserID].Lastupdated = block.timestamp;\r\n\r\n    }\r\n\r\n    function getTokenFromMsgsender(uint256 amount) internal returns(uint256) {\r\n        uint256 balanceBeforeDeposit = IERC20(TokentoDeposit).balanceOf(address(this));\r\n        IERC20(TokentoDeposit).safeTransferFrom(msg.sender,address(this),amount);\r\n        uint256 balanceAfterDeposit = IERC20(TokentoDeposit).balanceOf(address(this));\r\n        uint256 changeAfterDeposit = balanceAfterDeposit.sub(balanceBeforeDeposit);\r\n        return changeAfterDeposit;\r\n    }\r\n    function sendTokenToMsgsender(uint256 amount) internal{\r\n        IERC20(TokentoDeposit).safeTransfer(msg.sender, amount);\r\n    }\r\n    function claimRewardsFor(address user) external onlyRouter nonReentrant contractStarted returns(uint256){\r\n        uint256 rewardClaimable = claimableRewardData[user].claimable;\r\n        require(rewardClaimable > 0, \"No rewards to claim\");\r\n        claimableRewardData[user].claimable = 0;\r\n        uint256 notclaimedLength = claimableRewardData[user].temporaryNotClaimedEpochArray.length;\r\n        //claimableRewardData[winners[i]].temporaryNotClaimedEpochArray.push(epochNumber);\r\n        for(uint i=0; i <notclaimedLength;i++){\r\n            uint256 epochNumber = claimableRewardData[user].temporaryNotClaimedEpochArray[i];\r\n            uint256 position = claimableRewardData[user].rewardHistoryArray[i].position;\r\n            //bool epochClaimed;\r\n            EpochResult storage result = EpochResults[epochNumber];\r\n            if(position == 1){\r\n                if(result.first.claimed == false){\r\n                result.first.claimed = true;\r\n                }\r\n            }\r\n            else if(position == 2){\r\n                if(result.second.claimed == false){\r\n                result.second.claimed = true;\r\n                }\r\n            }\r\n            else if(position == 3){\r\n                if(result.third.claimed == false){\r\n                result.third.claimed = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        delete claimableRewardData[user].temporaryNotClaimedEpochArray; //Reset array\r\n        uint256 realizedRewardClaimable = sendRewardToRouter(rewardClaimable);        \r\n        return realizedRewardClaimable;\r\n        \r\n    }\r\n\r\n\r\n    function sendRewardToRouter(uint256 amount) internal returns(uint256){\r\n        address router = IRoleRegistry(registryContract).getRouter();\r\n        uint256 beforeTransfer = IERC20(TokentoDeposit).balanceOf(router);\r\n        address reserve = IRoleRegistry(registryContract).getReserveAddress();\r\n        IRewardReserve(reserve).transferReward(TokentoDeposit,amount,router);\r\n        uint256 afterTransfer = IERC20(TokentoDeposit).balanceOf(router);\r\n        uint256 changeAfterTransfer = afterTransfer.sub(beforeTransfer);\r\n        return changeAfterTransfer;\r\n    }\r\n    \r\n    function getPoolTVL() public view returns(uint256){\r\n        uint256 result = poolTVL;\r\n        return result;\r\n    }\r\n    function getCurrentEpochReward() public view returns(uint256){\r\n        uint256 currentBalance = IERC20(TokentoDeposit).balanceOf(address(this));\r\n        uint256 result = currentBalance.sub(poolTVL);\r\n        return result;\r\n    }\r\n    function getClaimable(address user) public view returns(uint256){\r\n        uint256 result = claimableRewardData[user].claimable;\r\n        return result;\r\n    }\r\n    function getWinningHistory(address user) public view returns(rewardHistory[] memory){\r\n        rewardHistory[] memory result = claimableRewardData[user].rewardHistoryArray;\r\n        return result;\r\n    }\r\n    function getBalanceChangeHistory(address user, uint256 epochNumber) public view contractStarted validEpoch(epochNumber) returns(userChangeHistory memory) {\r\n        uint256 userIDnow = userID[user];\r\n        require(userIDnow != 0, \"User hasn't registered\");\r\n        userChangeHistory memory result = changeHistory[epochNumber][userIDnow];\r\n        return result;\r\n        \r\n    }\r\n    function getUserID(address user) public view returns(uint256){\r\n        uint256 result = userID[user];\r\n        return result;\r\n    }\r\n    function getUserAmount() public view returns(uint256){\r\n        uint256 result = amountOfUser;\r\n        return result;\r\n    }\r\n    function getuserByID(uint256 userIDnow) public view returns(address){\r\n        address result = userDepositInfo[userIDnow].userAddress;\r\n        return result;\r\n    }\r\n    function getUserDepositInfo(address user) public view returns(userInfo memory){\r\n        uint256 userIDnow = userID[user];\r\n        userInfo memory result = userDepositInfo[userIDnow];\r\n        return result;\r\n    }\r\n    function getAccumulatedTicketwithoutDecimal(uint256 epochNumber, address user) public view contractStarted validEpoch(epochNumber)returns(uint256){\r\n        uint256 userIDnow = userID[user];\r\n        require(userIDnow !=0, \"User hasn't registered\");\r\n        uint256 result = accumulatedTicket[epochNumber][userIDnow];\r\n        return result;\r\n    }\r\n    function getTicketAmount(uint256 epochNumber, address user) public view returns(uint256){\r\n        uint256 result;\r\n        uint256 PeriodTicketofUser;\r\n        uint256 accumulatedTicketnow = accumulatedTicket[epochNumber][userID[user]];\r\n        //uint256 accumulatedTicket = getAccumulatedTicketwithoutDecimal(epochNumber, user);\r\n        EpochResult memory epochInfo = EpochResults[epochNumber];\r\n        uint256 epochEndBlock = epochInfo.duration.add(epochInfo.createdTimeStamp);\r\n        uint256 userIDnow = userID[user];\r\n        require(userIDnow !=0, \"User hasn't registered\");\r\n        uint256 userLatestUpdateTimeStamp = userDepositInfo[userIDnow].Lastupdated;\r\n        uint256 userDepositAmount = userDepositInfo[userIDnow].DepositAmount;\r\n        require(userDepositInfo[userIDnow].registeredDate < epochEndBlock, \"User has not participated in the epoch\");\r\n        userChangeHistory memory getUserBalanceChangeHistory = getBalanceChangeHistory(user, epochNumber);\r\n        if(block.timestamp >= epochInfo.createdTimeStamp && block.timestamp <= epochEndBlock){\r\n            if(userLatestUpdateTimeStamp >= epochInfo.createdTimeStamp && userLatestUpdateTimeStamp <= epochEndBlock){\r\n                PeriodTicketofUser =  (block.timestamp.sub(userLatestUpdateTimeStamp)).mul(userDepositAmount);\r\n            }\r\n            else if(userLatestUpdateTimeStamp < epochInfo.createdTimeStamp){\r\n                PeriodTicketofUser =  (block.timestamp.sub(epochInfo.createdTimeStamp)).mul(userDepositAmount);\r\n            }\r\n            result = (accumulatedTicketnow.add(PeriodTicketofUser)).div((10**TICKET_DECIMAL));\r\n            return result;\r\n        }\r\n        else if(block.timestamp > epochEndBlock){ \r\n            if(userLatestUpdateTimeStamp<epochInfo.createdTimeStamp){\r\n                result = (epochDuration.mul(userDepositAmount)).div((10**TICKET_DECIMAL));\r\n                return result;\r\n            }\r\n            else{\r\n                if(getUserBalanceChangeHistory.changedwithinEpoch){ \r\n                uint256 historyLatest = getUserBalanceChangeHistory.historyArray.length.sub(1);\r\n                uint256 latestBlockupdated = getUserBalanceChangeHistory.historyArray[historyLatest].updatedBlock;\r\n                uint256 notAccumulated = (epochEndBlock.sub(latestBlockupdated)).mul(getUserBalanceChangeHistory.historyArray[historyLatest].newAmount);\r\n                result = (accumulatedTicketnow.add(notAccumulated)).div((10**TICKET_DECIMAL));\r\n                return result;\r\n            }\r\n            else if(getUserBalanceChangeHistory.changedwithinEpoch == false){ \r\n                uint256 epochvar = epochNumber.sub(1);\r\n                for(uint i=0;i<epochNumber;i++){\r\n                    userChangeHistory memory getUserBalanceChangeHistoryVar = getBalanceChangeHistory(user, epochvar);\r\n                    if(getUserBalanceChangeHistoryVar.changedwithinEpoch){\r\n                        uint256 historyLatest = getUserBalanceChangeHistoryVar.historyArray.length.sub(1);\r\n                        uint256 notAccumulated = epochInfo.duration.mul(getUserBalanceChangeHistoryVar.historyArray[historyLatest].newAmount);\r\n                        result = notAccumulated.div((10**TICKET_DECIMAL));\r\n                        break;\r\n                    }\r\n                    epochvar -= 1;\r\n                }\r\n                return result;\r\n            }\r\n            }     \r\n        }\r\n            result = 0;\r\n            return result;\r\n    }\r\n    function getTokenUsing() external view returns(address){\r\n        return TokentoDeposit;\r\n    }\r\n    function getLatestEpoch() public view returns(uint256){\r\n        uint256 length = getEpochLength();\r\n        require(length > 0,\"Contract not started\");\r\n        uint256 result = length.sub(1);\r\n        return result;\r\n    }\r\n    function getEpochLength() public view returns(uint256){\r\n        uint256 length = EpochResults.length;\r\n        return length;\r\n    }\r\n    function getEpochInfo(uint256 epochNumber) external view returns(EpochResult memory){\r\n        EpochResult memory result = EpochResults[epochNumber];\r\n        return result;\r\n    }\r\n    function getRewardAllocationPercentage() external view returns(rewardAllocation memory){\r\n        return AllocationPortion;\r\n    } \r\n    function config(address token, uint256 decimal, uint256 duration) external onlyController{\r\n        TokentoDeposit = token;\r\n        TICKET_DECIMAL = decimal;\r\n        epochDuration = duration;\r\n        //minToDeposit = minAmount;\r\n    }\r\n\r\n    function setRewardRatio(uint256 firstP, uint256 secondP, uint256 thirdP, uint256 percentageSUM) external onlyController{\r\n        require(firstP.add(secondP).add(thirdP) == percentageSUM);\r\n        AllocationPortion.first = firstP;\r\n        AllocationPortion.second = secondP;\r\n        AllocationPortion.third = thirdP;\r\n        PercentageDecimal = percentageSUM;\r\n        emit rewardPortionUpdated(firstP, secondP, thirdP);\r\n    }\r\n    //function finalizeEpochTicketandParticipantInfo(uint256 epochNumber) external onlyRewardDistributor{\r\n        //EpochResult storage getEpochDetails = EpochResults[epochNumber];\r\n        //uint256 endBlock = getEpochDetails.createdTimeStamp.add(getEpochDetails.duration);\r\n        //getEpochDetails.totalParticipant = sumUptotalParticipant(epochNumber, endBlock);\r\n    //}\r\n    function finalizeEpoch(uint256 epochNumber, address firstWinner, address secondWinner, address thirdWinner, uint256 totalPrize) external onlyRewardDistributor{\r\n        require(getUserID(firstWinner) != 0, \"User doesn't exist\");\r\n        require(getUserID(secondWinner) != 0, \"User doesn't exist\");\r\n        require(getUserID(thirdWinner) != 0, \"User doesn't exist\");\r\n        EpochResult storage getEpochDetails = EpochResults[epochNumber];\r\n        bool isEpochFinalized = getEpochDetails.finalized;\r\n        require(isEpochFinalized == false, \"Epoch is done\");\r\n        uint256 endBlock = getEpochDetails.createdTimeStamp.add(getEpochDetails.duration);\r\n        require(block.timestamp > endBlock, \"Epoch isn't done\");\r\n        getEpochDetails.finalized = true;\r\n\r\n        uint256 realizedReward = transferRewardToReserve(totalPrize);\r\n        getEpochDetails.totalPrize = realizedReward;\r\n        getEpochDetails.first.winner = firstWinner;\r\n        getEpochDetails.first.prizeAmount = (realizedReward.mul(AllocationPortion.first)).div(PercentageDecimal);\r\n        getEpochDetails.first.claimed = false;\r\n        getEpochDetails.second.winner = secondWinner;\r\n        getEpochDetails.second.prizeAmount = (realizedReward.mul(AllocationPortion.second)).div(PercentageDecimal);\r\n        getEpochDetails.second.claimed = false;\r\n        getEpochDetails.third.winner = thirdWinner;\r\n        getEpochDetails.third.prizeAmount = (realizedReward.mul(AllocationPortion.third)).div(PercentageDecimal);\r\n        getEpochDetails.third.claimed = false;\r\n        address[] memory winners = new address[](3);\r\n        winners[0] = firstWinner;\r\n        winners[1] = secondWinner;\r\n        winners[2] = thirdWinner;\r\n        uint256[] memory PrizeinOrder = new uint256[](3);\r\n        PrizeinOrder[0] = getEpochDetails.first.prizeAmount;\r\n        PrizeinOrder[1] = getEpochDetails.second.prizeAmount;\r\n        PrizeinOrder[2] = getEpochDetails.third.prizeAmount;\r\n        setClaimableRewards(epochNumber,winners,PrizeinOrder);\r\n    }\r\n\r\n    function transferRewardToReserve(uint256 totalPrize) internal returns(uint256){\r\n        address reserveAddress = IRoleRegistry(registryContract).getReserveAddress();\r\n        uint256 beforeUpdateBalance = IERC20(TokentoDeposit).balanceOf(reserveAddress);\r\n        IERC20(TokentoDeposit).safeTransfer(reserveAddress,totalPrize);\r\n        uint256 afterUpdateBalance = IERC20(TokentoDeposit).balanceOf(reserveAddress);\r\n        uint256 changeAfterUpdate = afterUpdateBalance.sub(beforeUpdateBalance);\r\n        return changeAfterUpdate;\r\n    }\r\n    /*function sumUptotalParticipant(uint256 epochNumber, uint256 endBlock) internal view returns(uint256){\r\n        uint256 amountofParticipant;\r\n        for(uint i = 1; i<amountOfUser; i++){ \r\n            uint256 registeredBlock = userDepositInfo[i].registeredDate;\r\n            address userAddress = userDepositInfo[i].userAddress;\r\n            if(registeredBlock <= endBlock){\r\n                uint256 userTicketAmount = getTicketAmount(epochNumber,userAddress);\r\n                if(userTicketAmount>0){\r\n                    amountofParticipant += 1;\r\n                }\r\n            }\r\n        }\r\n        return amountofParticipant;\r\n    }*/\r\n    function setClaimableRewards(uint256 epochNumber,address[] memory winners, uint256[] memory PrizeInOrder) internal{\r\n        uint256 winnersLength = winners.length;\r\n        for(uint i=0; i <winnersLength;i++){\r\n            claimableRewardData[winners[i]].claimable += PrizeInOrder[i];\r\n            claimableRewardData[winners[i]].rewardHistoryArray.push(\r\n            rewardHistory(\r\n                {\r\n                EpochNumber: epochNumber,\r\n                position: i.add(1),\r\n                PrizeAmount: PrizeInOrder[i]\r\n                })\r\n            );\r\n            claimableRewardData[winners[i]].temporaryNotClaimedEpochArray.push(epochNumber);\r\n        }\r\n    }\r\n    function createNewEpoch() external onlyRewardDistributor{\r\n        uint256 epochLength = getEpochLength();\r\n        if(epochLength > 0){\r\n            uint256 latestEpochNumber =  epochLength.sub(1);\r\n            EpochResult memory getLastEpochDetails = EpochResults[latestEpochNumber];\r\n            bool lastEpochFinalized = getLastEpochDetails.finalized;\r\n            require(lastEpochFinalized);\r\n        }\r\n        PrizeDetails memory empty;\r\n        empty.winner = 0x0000000000000000000000000000000000000000;\r\n        empty.claimed = false;\r\n        empty.prizeAmount = 0;\r\n        EpochResults.push(\r\n        EpochResult(\r\n        {\r\n            first: empty,\r\n            second: empty,\r\n            third: empty,\r\n            finalized: false,\r\n            totalPrize: 0,\r\n            duration: epochDuration,\r\n            createdTimeStamp: block.timestamp\r\n            \r\n        })\r\n        );\r\n    }\r\n    }", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ControllerRoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"changedRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"second\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"third\",\"type\":\"uint256\"}],\"name\":\"rewardPortionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"changeRegistryContractAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewardsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"firstWinner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondWinner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"thirdWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"}],\"name\":\"finalizeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAccumulatedTicketwithoutDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"getBalanceChangeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"changedwithinEpoch\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct stETHPool.ChangeArray[]\",\"name\":\"historyArray\",\"type\":\"tuple[]\"}],\"internalType\":\"struct stETHPool.userChangeHistory\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct stETHPool.PrizeDetails\",\"name\":\"first\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct stETHPool.PrizeDetails\",\"name\":\"second\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct stETHPool.PrizeDetails\",\"name\":\"third\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct stETHPool.EpochResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAllocationPercentage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"second\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"third\",\"type\":\"uint256\"}],\"internalType\":\"struct stETHPool.rewardAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTicketAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenUsing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registeredDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Lastupdated\",\"type\":\"uint256\"}],\"internalType\":\"struct stETHPool.userInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWinningHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"EpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PrizeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct stETHPool.rewardHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userIDnow\",\"type\":\"uint256\"}],\"name\":\"getuserByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageSUM\",\"type\":\"uint256\"}],\"name\":\"setRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "stETHPool", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95f5567bf8cd8c0a0c7273cc3336fe9e1e5cd5fdee700dd68efdc085a6521742"}