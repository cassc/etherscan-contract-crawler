{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nWebsite: https://shibeth-token.com/\r\nDapp: https://shibeth-dapp.xyz/\r\nWhitepaper: https://shibeth.gitbook.io/whitepaper/\r\nX: https://twitter.com/Shibeth_ERC20\r\nTelegram: https://t.me/ShibethOfficial\r\n\r\n*/\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface WrappedETH {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IDEXRouter{\r\n\t\tfunction factory() external pure returns (address);\r\n\t\tfunction WETH() external pure returns (address);\r\n\t\tfunction addLiquidity(\r\n\t\t\t\taddress tokenA,\r\n\t\t\t\taddress tokenB,\r\n\t\t\t\tuint amountADesired,\r\n\t\t\t\tuint amountBDesired,\r\n\t\t\t\tuint amountAMin,\r\n\t\t\t\tuint amountBMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\t\tfunction addLiquidityETH(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint amountTokenDesired,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\t\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tuint amountIn,\r\n\t\t\tuint amountOutMin,\r\n\t\t\taddress[] calldata path,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline\r\n\t\t) external;\r\n\t\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tuint amountOutMin,\r\n\t\t\taddress[] calldata path,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline\r\n\t\t) external payable;\r\n\t\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tuint amountIn,\r\n\t\t\tuint amountOutMin,\r\n\t\t\taddress[] calldata path,\r\n\t\t\taddress to,\r\n\t\t\tuint deadline\r\n\t\t) external;\r\n}\r\n\r\ninterface IDEXFactory{\r\n\t\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\t\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\t\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renouncedOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function claimReward(address shareHolder) external;\r\n    function getUnpaidEarning(address shareholder) external view returns (uint256);\r\n}\r\n\r\ncontract BTCDividend is IDividendDistributor {     //SHIBA\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n        uint256 reserved;\r\n    }\r\n    mapping (address => Share) public shares;\r\n    \r\n    IERC20 RewardToken = IERC20(0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE); // SHIBA CA\r\n\r\n    IDEXRouter router;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 private totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public totalReserved;\r\n\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 16;\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n        ? IDEXRouter(_router)\r\n        : IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = RewardToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(RewardToken);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = RewardToken.balanceOf(address(this)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n        uint256 amount = calEarning(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            shares[shareholder].reserved += amount;\r\n            totalReserved += amount;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    function getUnpaidEarning(address shareholder) public override view returns (uint256) {\r\n        uint calReward = calEarning(shareholder);\r\n        uint reservedReward = shares[shareholder].reserved;\r\n        return calReward.add(reservedReward);\r\n    }\r\n\r\n    function rescueToken(address tokenAddress,address _receiver, uint256 tokens) external onlyToken {\r\n        IERC20(tokenAddress).transfer(_receiver, tokens);\r\n    }\r\n\r\n    function rescueFunds(address _receiver) external onlyToken {\r\n        payable(_receiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimDividend() external {\r\n        address user = msg.sender;\r\n        transferShares(user);\r\n    }\r\n\r\n    function claimReward(address shareHolder) external override onlyToken {\r\n        transferShares(shareHolder);\r\n    }\r\n\r\n    function transferShares(address user) internal {\r\n        distributeDividend(user);\r\n        uint subtotal = shares[user].reserved;\r\n        if(subtotal > 0) {\r\n            shares[user].reserved = 0;\r\n            totalReserved = totalReserved.sub(subtotal);\r\n            RewardToken.transfer(user, subtotal);\r\n        }\r\n    }\r\n\r\n    function calEarning(address shareholder) internal view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n}\r\n\r\ncontract ETHDividend is IDividendDistributor {     //ETH\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n        uint256 reserved;\r\n    }\r\n    mapping (address => Share) public shares;\r\n    \r\n    IERC20 RewardToken = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH CA\r\n\r\n    IDEXRouter router;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 private totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public totalReserved;\r\n\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 26;\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n        ? IDEXRouter(_router)\r\n        : IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = RewardToken.balanceOf(address(this));\r\n        WrappedETH(address(RewardToken)).deposit{value: msg.value}();\r\n        uint256 amount = RewardToken.balanceOf(address(this)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n        uint256 amount = calEarning(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            shares[shareholder].reserved += amount;\r\n            totalReserved += amount;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    function getUnpaidEarning(address shareholder) public override view returns (uint256) {\r\n        uint calReward = calEarning(shareholder);\r\n        uint reservedReward = shares[shareholder].reserved;\r\n        return calReward.add(reservedReward);\r\n    }\r\n\r\n    function rescueToken(address tokenAddress,address _receiver, uint256 tokens) external onlyToken {\r\n        IERC20(tokenAddress).transfer(_receiver, tokens);\r\n    }\r\n\r\n    function rescueFunds(address _receiver) external onlyToken {\r\n        payable(_receiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimDividend() external {\r\n        address user = msg.sender;\r\n        transferShares(user);\r\n    }\r\n\r\n    function claimReward(address shareHolder) external override onlyToken {\r\n        transferShares(shareHolder);\r\n    }\r\n\r\n    function transferShares(address user) internal {\r\n        distributeDividend(user);\r\n        uint subtotal = shares[user].reserved;\r\n        if(subtotal > 0) {\r\n            shares[user].reserved = 0;\r\n            totalReserved = totalReserved.sub(subtotal);\r\n            RewardToken.transfer(user, subtotal);\r\n        }\r\n    }\r\n\r\n    function calEarning(address shareholder) internal view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n}\r\n\r\ncontract SHIBETH is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"Shibeth\";\r\n    string private _symbol = \"SHIBETH\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 public buyMarketingFee = 200; // -> 1% Marketing Fee After Launch\r\n    uint256 public buyShibaFee = 10; // -> 2% Shiba Reward Fee After Launch\r\n    uint256 public buyWETHFee = 10; // -> 2% ETH Reward Fee After Launch\r\n\r\n    uint256 public sellMarketingFee = 200;\r\n    uint256 public sellShibaFee = 10;\r\n    uint256 public sellWETHFee = 10;\r\n\r\n    uint256 public totalBuy;\r\n    uint256 public totalSell;\r\n\r\n    uint256 public feeDenominator = 1000;\r\n\r\n    address public _marketingWalletAddress = 0x16B61f4e3A2BB7C4e73D876ea4AD559A57A9f8c8;\r\n\r\n    address private constant deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZeroWallet = 0x0000000000000000000000000000000000000000;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    \r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    mapping(address => bool) public isBTCDivExempt;\r\n    mapping(address => bool) public isETHDivExempt;\r\n    mapping(address => bool) public blacklist;\r\n\r\n    uint256 public _totalSupply = 1000000 * (10 ** _decimals);\r\n    uint256 public swapTokensAtAmount = _totalSupply.mul(5).div(1e5); //0.05%\r\n\r\n    uint256 public swapProtection = _totalSupply.mul(1).div(100);\r\n\r\n    uint256 public MaxWalletLimit = _totalSupply.mul(20).div(feeDenominator);  //2%\r\n    uint256 public MaxTxLimit = _totalSupply.mul(20).div(feeDenominator);      //2%\r\n\r\n    bool public EnableTransactionLimit = true;\r\n    bool public checkWalletLimit = true;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;  \r\n\r\n    bool public _autoSwapBack = true;\r\n    bool public ActiveTrading = false;\r\n\r\n    BTCDividend public shibadividend;\r\n    ETHDividend public ethdividend;\r\n    address public rewardController;\r\n    IDEXRouter public router;\r\n\r\n    bool inSwap = false;\r\n    \r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRewardController {\r\n        require(msg.sender == rewardController);\r\n        _;\r\n    }\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n\r\n        address pair = IDEXFactory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n\r\n        _allowances[address(this)][address(router)] = ~uint256(0);\r\n\r\n        shibadividend = new BTCDividend(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        ethdividend = new ETHDividend(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        rewardController = msg.sender;\r\n        automatedMarketMakerPairs[pair] = true;\r\n\r\n        isETHDivExempt[msg.sender] = true;\r\n        isETHDivExempt[pair] = true;\r\n        isETHDivExempt[address(this)] = true;\r\n        isETHDivExempt[deadWallet] = true;\r\n        isETHDivExempt[ZeroWallet] = true;\r\n\r\n        isBTCDivExempt[msg.sender] = true;\r\n        isBTCDivExempt[pair] = true;\r\n        isBTCDivExempt[address(this)] = true;\r\n        isBTCDivExempt[deadWallet] = true;\r\n        isBTCDivExempt[ZeroWallet] = true;\r\n        \r\n        isWalletLimitExempt[msg.sender] = true;\r\n        isWalletLimitExempt[pair] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n\r\n        _isExcludedFromFees[msg.sender] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        totalBuy = buyMarketingFee.add(buyShibaFee).add(buyWETHFee);\r\n        totalSell = sellMarketingFee.add(sellShibaFee).add(sellWETHFee);\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(_balances[deadWallet]).sub(_balances[ZeroWallet]);\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isExcludedFromFees[_addr];\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender,spender,value);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        \r\n        if (_allowances[from][msg.sender] != ~uint256(0)) {\r\n            _allowances[from][msg.sender] = _allowances[from][\r\n                msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n\r\n        require(!blacklist[sender] && !blacklist[recipient], \"in_blacklist\");\r\n\r\n        if(!ActiveTrading) {\r\n           require(_isExcludedFromFees[sender] || _isExcludedFromFees[recipient],\"Error: Trading Paused!\"); \r\n        }\r\n\r\n        if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient] && EnableTransactionLimit) {\r\n            require(amount <= MaxTxLimit, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        \r\n        uint256 AmountReceived = shouldTakeFee(sender, recipient)\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n\r\n        if(checkWalletLimit && !isWalletLimitExempt[recipient]) {\r\n            require(balanceOf(recipient).add(AmountReceived) <= MaxWalletLimit);\r\n        }\r\n        \r\n        _balances[recipient] = _balances[recipient].add(AmountReceived);\r\n\r\n        if(!isBTCDivExempt[sender]){ try shibadividend.setShare(sender, balanceOf(sender)) {} catch {} }\r\n        if(!isBTCDivExempt[recipient]){ try shibadividend.setShare(recipient, balanceOf(recipient)) {} catch {} }\r\n\r\n        if(!isETHDivExempt[sender]){ try ethdividend.setShare(sender, balanceOf(sender)) {} catch {} }\r\n        if(!isETHDivExempt[recipient]){ try ethdividend.setShare(recipient, balanceOf(recipient)) {} catch {} }\r\n\r\n        emit Transfer(sender,recipient,AmountReceived);\r\n\r\n        return true;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal  returns (uint256) {\r\n\r\n        uint256 feeAmount;\r\n        \r\n        if(automatedMarketMakerPairs[sender]){\r\n            feeAmount = amount.mul(totalBuy).div(feeDenominator);\r\n        }\r\n        else if(automatedMarketMakerPairs[recipient]){\r\n            feeAmount = amount.mul(totalSell).div(feeDenominator);\r\n        }\r\n\r\n        if(feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint totalShares = totalBuy.add(totalSell);\r\n        if(totalShares == 0) return;\r\n\r\n        if(contractBalance > swapProtection) {\r\n            contractBalance = swapProtection;\r\n        }\r\n\r\n        uint _mshares = buyMarketingFee.add(sellMarketingFee);\r\n        uint _btcshares = buyShibaFee.add(sellShibaFee);\r\n        // uint _ethshares = buyWETHFee.add(sellWETHFee);\r\n        uint initalBalance = address(this).balance;\r\n        swapTokensForEth(contractBalance);\r\n        uint recievedBalance = address(this).balance.sub(initalBalance);\r\n\r\n        uint MarketingShares = recievedBalance.mul(_mshares).div(totalShares);\r\n        uint BTCdividendShares = recievedBalance.mul(_btcshares).div(totalShares);\r\n        uint ETHDividendShares = recievedBalance.sub(MarketingShares).sub(BTCdividendShares);\r\n        if(MarketingShares > 0) {\r\n            payable(_marketingWalletAddress).transfer(MarketingShares);\r\n        }\r\n        if(BTCdividendShares > 0) {\r\n            try shibadividend.deposit { value: BTCdividendShares } () {} catch {}             \r\n        }\r\n        if(ETHDividendShares > 0) {\r\n            try ethdividend.deposit { value: ETHDividendShares } () {} catch {}    \r\n        }\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            return false;\r\n        }        \r\n        else{\r\n            return (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\r\n        }\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        return\r\n            canSwap &&\r\n            _autoSwapBack &&\r\n            !inSwap &&\r\n            !automatedMarketMakerPairs[msg.sender]; \r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowances[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][\r\n            spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        if(inSwap) {\r\n            revert(\"Already in Swap\");\r\n        }\r\n        swapBack();\r\n    }\r\n\r\n    function enableDisableTxLimit(bool _status) external onlyOwner {\r\n        EnableTransactionLimit = _status;\r\n    }\r\n\r\n    function enableDisableWalletLimit(bool _status) external onlyOwner {\r\n        checkWalletLimit = _status;\r\n    }\r\n\r\n    function enableTrading(bool _status) external onlyOwner {\r\n        ActiveTrading = _status;\r\n    }\r\n\r\n    function setAutoSwapBack(bool _flag) external onlyOwner {\r\n        _autoSwapBack = _flag;\r\n    }\r\n\r\n    function setFeeReceivers(address _marketing) external onlyRewardController {\r\n        _marketingWalletAddress = _marketing;\r\n    }\r\n\r\n    function setMaxWalletLimit(uint _value) external onlyOwner {\r\n        MaxWalletLimit = _value;\r\n    }\r\n\r\n    function setMaxTxLimit(uint _value) external onlyOwner {\r\n        MaxTxLimit = _value; \r\n    }\r\n\r\n    function setBuyFee(\r\n            uint _newMarketing,\r\n            uint _newShiba,\r\n            uint _newWETH\r\n        ) external onlyOwner {\r\n        buyMarketingFee = _newMarketing;\r\n        buyShibaFee = _newShiba;\r\n        buyWETHFee = _newWETH;\r\n        totalBuy = buyMarketingFee.add(buyShibaFee).add(buyWETHFee);\r\n    }\r\n\r\n    function setSellFee(\r\n            uint _newMarketing,\r\n            uint _newShiba,\r\n            uint _newWETH\r\n        ) external onlyOwner {\r\n        sellMarketingFee = _newMarketing;\r\n        sellShibaFee = _newShiba;\r\n        sellWETHFee = _newWETH;\r\n        totalSell = sellMarketingFee.add(sellShibaFee).add(sellWETHFee);\r\n    }\r\n\r\n    function setAutomaticPairMarket(address _addr,bool _status) external onlyOwner {\r\n        if(_status) {\r\n            require(!automatedMarketMakerPairs[_addr],\"Pair Already Set!!\");\r\n        }\r\n        automatedMarketMakerPairs[_addr] = _status;\r\n        isWalletLimitExempt[_addr] = true;\r\n        isETHDivExempt[_addr] = true;\r\n        isBTCDivExempt[_addr] = true;\r\n    }\r\n\r\n    function excludeShibaDividend(address _addr,bool _status) external onlyOwner {\r\n        if(_status) {\r\n            shibadividend.setShare(_addr,0);\r\n        }\r\n        else {\r\n            shibadividend.setShare(_addr,balanceOf(_addr));\r\n        }\r\n        isBTCDivExempt[_addr] = _status;\r\n    } \r\n\r\n    function excludeEthDividend(address _addr,bool _status) external onlyOwner {\r\n        if(_status) {\r\n            ethdividend.setShare(_addr,0);\r\n        }\r\n        else {\r\n            ethdividend.setShare(_addr,balanceOf(_addr));\r\n        }\r\n        isETHDivExempt[_addr] = _status;\r\n    }   \r\n\r\n    function enableFee(address _addr,bool _status) external onlyOwner {\r\n        _isExcludedFromFees[_addr] = _status;\r\n    }\r\n\r\n    function enableTxLimit(address _addr,bool _status) external onlyOwner {\r\n        isTxLimitExempt[_addr] = _status;\r\n    }\r\n\r\n    function enableWalletLimit(address _addr,bool _status) external onlyOwner {\r\n        isWalletLimitExempt[_addr] = _status;\r\n    }\r\n\r\n    function setBotBlacklist(address _botAddress, bool _flag) external onlyOwner {\r\n        blacklist[_botAddress] = _flag;    \r\n    }\r\n\r\n    function setMinSwapAmount(uint _value) external onlyOwner {\r\n        swapTokensAtAmount = _value;\r\n    }  \r\n\r\n    function setSwapProtection(uint _value) external onlyOwner {\r\n        swapProtection = _value;\r\n    }\r\n\r\n    //claimers\r\n\r\n    function shibaReward() external {\r\n        shibadividend.claimReward(msg.sender);\r\n    }\r\n\r\n    function ethReward() external {\r\n        ethdividend.claimReward(msg.sender);\r\n    }\r\n\r\n    //Rescuers\r\n\r\n    function getShibaRewardInfo(address _receiver) external view returns (uint) {\r\n        return shibadividend.getUnpaidEarning(_receiver);\r\n    }\r\n\r\n    function getETHRewardInfo(address _receiver) external view returns (uint) {\r\n        return ethdividend.getUnpaidEarning(_receiver);\r\n    }\r\n\r\n    function shibaRescueToken(address tokenAddress,address _receiver, uint256 tokens) external onlyRewardController {\r\n        shibadividend.rescueToken(tokenAddress,_receiver,tokens);\r\n    }\r\n\r\n    function shibaRescueFunds(address _receiver) external onlyRewardController {\r\n        shibadividend.rescueFunds(_receiver);\r\n    }\r\n\r\n    function ethRescueToken(address tokenAddress,address _receiver, uint256 tokens) external onlyRewardController {\r\n        ethdividend.rescueToken(tokenAddress,_receiver,tokens);\r\n    }\r\n\r\n    function ethRescueFunds(address _receiver) external onlyRewardController {\r\n        ethdividend.rescueFunds(_receiver);\r\n    }\r\n\r\n    function rescueFunds() external onlyRewardController {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function rescueToken(address _token, uint _value) external onlyRewardController {\r\n        IERC20(_token).transfer(msg.sender,_value);\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n   \r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ActiveTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableTransactionLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwapBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShibaFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWETHFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableDisableTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"ethRescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ethRescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethdividend\",\"outputs\":[{\"internalType\":\"contract ETHDividend\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeEthDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeShibaDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"getETHRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"getShibaRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBTCDivExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isETHDivExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncedOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShibaFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWETHFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutomaticPairMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newShiba\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newWETH\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newShiba\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newWETH\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSwapProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"shibaRescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"shibaRescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shibaReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shibadividend\",\"outputs\":[{\"internalType\":\"contract BTCDividend\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapProtection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHIBETH", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7c18df9a7ef3e98b003d307538c4d4495c2268cc3be76b68ddbfc410dcf250e7"}