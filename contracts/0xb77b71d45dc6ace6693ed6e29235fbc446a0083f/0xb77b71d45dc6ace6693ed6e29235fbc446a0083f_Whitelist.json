{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/L2/predeploys/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.16;\\n\\nimport {OwnableBase} from \\\"../../libraries/common/OwnableBase.sol\\\";\\nimport {IWhitelist} from \\\"../../libraries/common/IWhitelist.sol\\\";\\n\\ncontract Whitelist is OwnableBase, IWhitelist {\\n    /// @notice Emitted when account whitelist status changed.\\n    /// @param _account The address of account whose status is changed.\\n    /// @param _status The current whitelist status.\\n    event WhitelistStatusChanged(address indexed _account, bool _status);\\n\\n    /// @notice Keep track whether the account is whitelisted.\\n    mapping(address => bool) private isWhitelisted;\\n\\n    constructor(address _owner) {\\n        _transferOwnership(_owner);\\n    }\\n\\n    /// @notice See {IWhitelist-isSenderAllowed}\\n    function isSenderAllowed(address _sender) external view returns (bool) {\\n        return isWhitelisted[_sender];\\n    }\\n\\n    /// @notice Update the whitelist status\\n    /// @param _accounts The list of addresses to update.\\n    /// @param _status The whitelist status to update.\\n    function updateWhitelistStatus(address[] memory _accounts, bool _status) external onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            isWhitelisted[_accounts[i]] = _status;\\n            emit WhitelistStatusChanged(_accounts[i], _status);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/common/OwnableBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nabstract contract OwnableBase {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when owner is changed by current owner.\\n    /// @param _oldOwner The address of previous owner.\\n    /// @param _newOwner The address of new owner.\\n    event OwnershipTransferred(address indexed _oldOwner, address indexed _newOwner);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @notice The address of the current owner.\\n    address public owner;\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /************************\\n     * Restricted Functions *\\n     ************************/\\n\\n    /// @notice Leaves the contract without owner. It will not be possible to call\\n    /// `onlyOwner` functions anymore. Can only be called by the current owner.\\n    ///\\n    /// @dev Renouncing ownership will leave the contract without an owner,\\n    /// thereby removing any functionality that is only available to the owner.\\n    function renounceOwnership() public onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /// @notice Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), \\\"new owner is the zero address\\\");\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Internal function without access restriction.\\n    function _transferOwnership(address _newOwner) internal {\\n        address _oldOwner = owner;\\n        owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/common/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IWhitelist {\\n    /// @notice Check whether the sender is allowed to do something.\\n    /// @param _sender The address of sender.\\n    function isSenderAllowed(address _sender) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"WhitelistStatusChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isSenderAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Whitelist", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d35befa544826e4d2760bd59e97200b38f7d44f6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}