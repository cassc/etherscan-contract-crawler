{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.7.0;\r\n// File: contracts/lib/Ownable.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/iface/Wallet.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Wallet\r\n/// @dev Base contract for smart wallets.\r\n///      Sub-contracts must NOT use non-default constructor to initialize\r\n///      wallet states, instead, `init` shall be used. This is to enable\r\n///      proxies to be deployed in front of the real wallet contract for\r\n///      saving gas.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ninterface Wallet\r\n{\r\n    function version() external pure returns (string memory);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    /// @dev Set a new owner.\r\n    function setOwner(address newOwner) external;\r\n\r\n    /// @dev Adds a new module. The `init` method of the module\r\n    ///      will be called with `address(this)` as the parameter.\r\n    ///      This method must throw if the module has already been added.\r\n    /// @param _module The module's address.\r\n    function addModule(address _module) external;\r\n\r\n    /// @dev Removes an existing module. This method must throw if the module\r\n    ///      has NOT been added or the module is the wallet's only module.\r\n    /// @param _module The module's address.\r\n    function removeModule(address _module) external;\r\n\r\n    /// @dev Checks if a module has been added to this wallet.\r\n    /// @param _module The module to check.\r\n    /// @return True if the module exists; False otherwise.\r\n    function hasModule(address _module) external view returns (bool);\r\n\r\n    /// @dev Binds a method from the given module to this\r\n    ///      wallet so the method can be invoked using this wallet's default\r\n    ///      function.\r\n    ///      Note that this method must throw when the given module has\r\n    ///      not been added to this wallet.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @param _module The module's address. Use address(0) to unbind the method.\r\n    function bindMethod(bytes4 _method, address _module) external;\r\n\r\n    /// @dev Returns the module the given method has been bound to.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @return _module The address of the bound module. If no binding exists,\r\n    ///                 returns address(0) instead.\r\n    function boundMethodModule(bytes4 _method) external view returns (address _module);\r\n\r\n    /// @dev Performs generic transactions. Any module that has been added to this\r\n    ///      wallet can use this method to transact on any third-party contract with\r\n    ///      msg.sender as this wallet itself.\r\n    ///\r\n    ///      Note: 1) this method must ONLY allow invocations from a module that has\r\n    ///      been added to this wallet. The wallet owner shall NOT be permitted\r\n    ///      to call this method directly. 2) Reentrancy inside this function should\r\n    ///      NOT cause any problems.\r\n    ///\r\n    /// @param mode The transaction mode, 1 for CALL, 2 for DELEGATECALL.\r\n    /// @param to The desitination address.\r\n    /// @param value The amount of Ether to transfer.\r\n    /// @param data The data to send over using `to.call{value: value}(data)`\r\n    /// @return returnData The transaction's return value.\r\n    function transact(\r\n        uint8    mode,\r\n        address  to,\r\n        uint     value,\r\n        bytes    calldata data\r\n        )\r\n        external\r\n        returns (bytes memory returnData);\r\n}\r\n\r\n// File: contracts/iface/Module.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n/// @title Module\r\n/// @dev Base contract for all smart wallet modules.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ninterface Module\r\n{\r\n    /// @dev Activates the module for the given wallet (msg.sender) after the module is added.\r\n    ///      Warning: this method shall ONLY be callable by a wallet.\r\n    function activate() external;\r\n\r\n    /// @dev Deactivates the module for the given wallet (msg.sender) before the module is removed.\r\n    ///      Warning: this method shall ONLY be callable by a wallet.\r\n    function deactivate() external;\r\n}\r\n\r\n// File: contracts/lib/ERC20.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title ERC20 Token Interface\r\n/// @dev see https://github.com/ethereum/EIPs/issues/20\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract ERC20\r\n{\r\n    function totalSupply()\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint);\r\n\r\n    function balanceOf(\r\n        address who\r\n        )\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n        )\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint    value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/lib/ReentrancyGuard.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title ReentrancyGuard\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Exposes a modifier that guards a function against reentrancy\r\n///      Changing the value of the same storage value multiple times in a transaction\r\n///      is cheap (starting from Istanbul) so there is no need to minimize\r\n///      the number of times the value is changed\r\ncontract ReentrancyGuard\r\n{\r\n    //The default value must be 0 in order to work behind a proxy.\r\n    uint private _guardValue;\r\n\r\n    modifier nonReentrant()\r\n    {\r\n        require(_guardValue == 0, \"REENTRANCY\");\r\n        _guardValue = 1;\r\n        _;\r\n        _guardValue = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/iface/ModuleRegistry.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title ModuleRegistry\r\n/// @dev A registry for modules.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ninterface ModuleRegistry\r\n{\r\n\t/// @dev Registers and enables a new module.\r\n    function registerModule(address module) external;\r\n\r\n    /// @dev Disables a module\r\n    function disableModule(address module) external;\r\n\r\n    /// @dev Returns true if the module is registered and enabled.\r\n    function isModuleEnabled(address module) external view returns (bool);\r\n\r\n    /// @dev Returns the list of enabled modules.\r\n    function enabledModules() external view returns (address[] memory _modules);\r\n\r\n    /// @dev Returns the number of enbaled modules.\r\n    function numOfEnabledModules() external view returns (uint);\r\n\r\n    /// @dev Returns true if the module is ever registered.\r\n    function isModuleRegistered(address module) external view returns (bool);\r\n}\r\n\r\n// File: contracts/base/Controller.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title Controller\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract Controller\r\n{\r\n    function moduleRegistry()\r\n        external\r\n        view\r\n        virtual\r\n        returns (ModuleRegistry);\r\n\r\n    function walletFactory()\r\n        external\r\n        view\r\n        virtual\r\n        returns (address);\r\n}\r\n\r\n// File: contracts/base/BaseWallet.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title BaseWallet\r\n/// @dev This contract provides basic implementation for a Wallet.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract BaseWallet is ReentrancyGuard, Wallet\r\n{\r\n    // WARNING: do not delete wallet state data to make this implementation\r\n    // compatible with early versions.\r\n    //\r\n    //  ----- DATA LAYOUT BEGINS -----\r\n    address internal _owner;\r\n\r\n    mapping (address => bool) private modules;\r\n\r\n    Controller public controller;\r\n\r\n    mapping (bytes4  => address) internal methodToModule;\r\n    //  ----- DATA LAYOUT ENDS -----\r\n\r\n    event OwnerChanged          (address newOwner);\r\n    event ControllerChanged     (address newController);\r\n    event ModuleAdded           (address module);\r\n    event ModuleRemoved         (address module);\r\n    event MethodBound           (bytes4  method, address module);\r\n    event WalletSetup           (address owner);\r\n\r\n    modifier onlyFromModule\r\n    {\r\n        require(modules[msg.sender], \"MODULE_UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFromFactory\r\n    {\r\n        require(\r\n            msg.sender == controller.walletFactory(),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev We need to make sure the Factory address cannot be changed without wallet owner's\r\n    ///      explicit authorization.\r\n    modifier onlyFromFactoryOrModule\r\n    {\r\n        require(\r\n            modules[msg.sender] || msg.sender == controller.walletFactory(),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Set up this wallet by assigning an original owner\r\n    ///\r\n    ///      Note that calling this method more than once will throw.\r\n    ///\r\n    /// @param _initialOwner The owner of this wallet, must not be address(0).\r\n    function initOwner(\r\n        address _initialOwner\r\n        )\r\n        external\r\n        onlyFromFactory\r\n    {\r\n        require(controller != Controller(0), \"NO_CONTROLLER\");\r\n        require(_owner == address(0), \"INITIALIZED_ALREADY\");\r\n        require(_initialOwner != address(0), \"ZERO_ADDRESS\");\r\n\r\n        _owner = _initialOwner;\r\n        emit WalletSetup(_initialOwner);\r\n    }\r\n\r\n    /// @dev Set up this wallet by assigning a controller and initial modules.\r\n    ///\r\n    ///      Note that calling this method more than once will throw.\r\n    ///      And this method must be invoked before owner is initialized\r\n    ///\r\n    /// @param _controller The Controller instance.\r\n    /// @param _modules The initial modules.\r\n    function init(\r\n        Controller _controller,\r\n        address[]  calldata _modules\r\n        )\r\n        external\r\n    {\r\n        require(\r\n            _owner == address(0) &&\r\n            controller == Controller(0) &&\r\n            _controller != Controller(0),\r\n            \"CONTROLLER_INIT_FAILED\"\r\n        );\r\n\r\n        controller = _controller;\r\n\r\n        ModuleRegistry moduleRegistry = controller.moduleRegistry();\r\n        for (uint i = 0; i < _modules.length; i++) {\r\n            _addModule(_modules[i], moduleRegistry);\r\n        }\r\n    }\r\n\r\n    function owner()\r\n        override\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return _owner;\r\n    }\r\n\r\n    function setOwner(address newOwner)\r\n        external\r\n        override\r\n        onlyFromModule\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        require(newOwner != address(this), \"PROHIBITED\");\r\n        require(newOwner != _owner, \"SAME_ADDRESS\");\r\n        _owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n\r\n    function setController(Controller newController)\r\n        external\r\n        onlyFromModule\r\n    {\r\n        require(newController != controller, \"SAME_CONTROLLER\");\r\n        require(newController != Controller(0), \"INVALID_CONTROLLER\");\r\n        controller = newController;\r\n        emit ControllerChanged(address(newController));\r\n    }\r\n\r\n    function addModule(address _module)\r\n        external\r\n        override\r\n        onlyFromFactoryOrModule\r\n    {\r\n        _addModule(_module, controller.moduleRegistry());\r\n    }\r\n\r\n    function removeModule(address _module)\r\n        external\r\n        override\r\n        onlyFromModule\r\n    {\r\n        // Allow deactivate to fail to make sure the module can be removed\r\n        require(modules[_module], \"MODULE_NOT_EXISTS\");\r\n        try Module(_module).deactivate() {} catch {}\r\n        delete modules[_module];\r\n        emit ModuleRemoved(_module);\r\n    }\r\n\r\n    function hasModule(address _module)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return modules[_module];\r\n    }\r\n\r\n    function bindMethod(bytes4 _method, address _module)\r\n        external\r\n        override\r\n        onlyFromModule\r\n    {\r\n        require(_method != bytes4(0), \"BAD_METHOD\");\r\n        if (_module != address(0)) {\r\n            require(modules[_module], \"MODULE_UNAUTHORIZED\");\r\n        }\r\n\r\n        methodToModule[_method] = _module;\r\n        emit MethodBound(_method, _module);\r\n    }\r\n\r\n    function boundMethodModule(bytes4 _method)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        return methodToModule[_method];\r\n    }\r\n\r\n    function transact(\r\n        uint8    mode,\r\n        address  to,\r\n        uint     value,\r\n        bytes    calldata data\r\n        )\r\n        external\r\n        override\r\n        onlyFromFactoryOrModule\r\n        returns (bytes memory returnData)\r\n    {\r\n        bool success;\r\n        (success, returnData) = _call(mode, to, value, data);\r\n\r\n        if (!success) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    receive()\r\n        external\r\n        payable\r\n    {\r\n    }\r\n\r\n    /// @dev This default function can receive Ether or perform queries to modules\r\n    ///      using bound methods.\r\n    fallback()\r\n        external\r\n        payable\r\n    {\r\n        address module = methodToModule[msg.sig];\r\n        require(modules[module], \"MODULE_UNAUTHORIZED\");\r\n\r\n        (bool success, bytes memory returnData) = module.call{value: msg.value}(msg.data);\r\n        assembly {\r\n            switch success\r\n            case 0 { revert(add(returnData, 32), mload(returnData)) }\r\n            default { return(add(returnData, 32), mload(returnData)) }\r\n        }\r\n    }\r\n\r\n    function _addModule(address _module, ModuleRegistry moduleRegistry)\r\n        internal\r\n    {\r\n        require(_module != address(0), \"NULL_MODULE\");\r\n        require(modules[_module] == false, \"MODULE_EXISTS\");\r\n        require(\r\n            moduleRegistry.isModuleEnabled(_module),\r\n            \"INVALID_MODULE\"\r\n        );\r\n        modules[_module] = true;\r\n        emit ModuleAdded(_module);\r\n        Module(_module).activate();\r\n    }\r\n\r\n    function _call(\r\n        uint8          mode,\r\n        address        target,\r\n        uint           value,\r\n        bytes calldata data\r\n        )\r\n        private\r\n        returns (\r\n            bool success,\r\n            bytes memory returnData\r\n        )\r\n    {\r\n        if (mode == 1) {\r\n            // solium-disable-next-line security/no-call-value\r\n            (success, returnData) = target.call{value: value}(data);\r\n        } else if (mode == 2) {\r\n            // solium-disable-next-line security/no-call-value\r\n            (success, returnData) = target.delegatecall(data);\r\n        } else if (mode == 3) {\r\n            require(value == 0, \"INVALID_VALUE\");\r\n            // solium-disable-next-line security/no-call-value\r\n            (success, returnData) = target.staticcall(data);\r\n        } else {\r\n            revert(\"UNSUPPORTED_MODE\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/WalletImpl.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title WalletImpl\r\ncontract WalletImpl is BaseWallet {\r\n    function version()\r\n        public\r\n        override\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // \u4f7f\u7528\u4e2d\u56fd\u7701\u4f1a\u4f5c\u4e3a\u522b\u540d\r\n        return \"1.2.0 (daqing)\";\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"MethodBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"WalletSetup\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"bindMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"boundMethodModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract Controller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"hasModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Controller\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Controller\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transact\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WalletImpl", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14c6d2b1be13a9f3aa4e61bf3379aafb2222afe1e4b02416a906b522d6583877"}