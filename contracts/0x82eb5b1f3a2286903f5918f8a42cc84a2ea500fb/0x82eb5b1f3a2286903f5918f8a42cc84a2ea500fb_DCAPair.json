{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DCAPair/DCAPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.6;\\npragma abicoder v2;\\n\\nimport './DCAPairParameters.sol';\\nimport './DCAPairPositionHandler.sol';\\nimport './DCAPairSwapHandler.sol';\\nimport './DCAPairLoanHandler.sol';\\n\\ncontract DCAPair is DCAPairParameters, DCAPairSwapHandler, DCAPairPositionHandler, DCAPairLoanHandler, IDCAPair {\\n  constructor(\\n    IDCAGlobalParameters _globalParameters,\\n    IERC20Metadata _tokenA,\\n    IERC20Metadata _tokenB\\n  ) DCAPairParameters(_globalParameters, _tokenA, _tokenB) DCAPairPositionHandler(_tokenA, _tokenB) {}\\n}\\n\"\r\n    },\r\n    \"contracts/DCAPair/DCAPairParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\nimport '../interfaces/IDCAGlobalParameters.sol';\\nimport '../interfaces/IDCAPair.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\nimport './utils/Math.sol';\\n\\nabstract contract DCAPairParameters is IDCAPairParameters {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  // Internal constants\\n  uint112 internal _magnitudeA;\\n  uint112 internal _magnitudeB;\\n  uint24 internal _feePrecision;\\n\\n  // Basic setup\\n  IDCAGlobalParameters public override globalParameters;\\n  IERC20Metadata public override tokenA;\\n  IERC20Metadata public override tokenB;\\n\\n  // Tracking\\n  mapping(uint32 => mapping(address => mapping(uint32 => int256))) public override swapAmountDelta; // swap interval => from token => swap number => delta\\n  mapping(uint32 => uint32) public override performedSwaps; // swap interval => performed swaps\\n  mapping(uint32 => mapping(address => mapping(uint32 => uint256))) internal _accumRatesPerUnit; // swap interval => from token => swap number => accum\\n  mapping(address => uint256) internal _balances;\\n  EnumerableSet.UintSet internal _activeSwapIntervals;\\n\\n  constructor(\\n    IDCAGlobalParameters _globalParameters,\\n    IERC20Metadata _tokenA,\\n    IERC20Metadata _tokenB\\n  ) {\\n    if (address(_globalParameters) == address(0) || address(_tokenA) == address(0) || address(_tokenB) == address(0))\\n      revert CommonErrors.ZeroAddress();\\n    globalParameters = _globalParameters;\\n    _feePrecision = globalParameters.FEE_PRECISION();\\n    tokenA = _tokenA;\\n    tokenB = _tokenB;\\n    _magnitudeA = uint112(10**_tokenA.decimals());\\n    _magnitudeB = uint112(10**_tokenB.decimals());\\n  }\\n\\n  function isSwapIntervalActive(uint32 _activeSwapInterval) external view override returns (bool _isIntervalActive) {\\n    _isIntervalActive = _activeSwapIntervals.contains(_activeSwapInterval);\\n  }\\n\\n  function _getFeeFromAmount(uint32 _feeAmount, uint256 _amount) internal view returns (uint256) {\\n    return (_amount * _feeAmount) / _feePrecision / 100;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DCAPair/DCAPairPositionHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport './DCAPairParameters.sol';\\n\\nabstract contract DCAPairPositionHandler is ReentrancyGuard, DCAPairParameters, IDCAPairPositionHandler, ERC721 {\\n  struct DCA {\\n    uint32 lastWithdrawSwap;\\n    uint32 lastSwap;\\n    uint32 swapInterval;\\n    uint160 rate;\\n    bool fromTokenA;\\n    uint248 swappedBeforeModified;\\n  }\\n\\n  using SafeERC20 for IERC20Metadata;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  mapping(uint256 => DCA) internal _userPositions;\\n  uint256 internal _idCounter;\\n\\n  constructor(IERC20Metadata _tokenA, IERC20Metadata _tokenB)\\n    ERC721(string(abi.encodePacked('DCA: ', _tokenA.symbol(), ' - ', _tokenB.symbol())), 'DCA')\\n  {}\\n\\n  function userPosition(uint256 _dcaId) external view override returns (UserPosition memory _userPosition) {\\n    DCA memory _position = _userPositions[_dcaId];\\n    _userPosition.from = _position.fromTokenA ? tokenA : tokenB;\\n    _userPosition.to = _position.fromTokenA ? tokenB : tokenA;\\n    _userPosition.swapInterval = _position.swapInterval;\\n    _userPosition.swapsExecuted = _position.swapInterval > 0 ? performedSwaps[_position.swapInterval] - _position.lastWithdrawSwap : 0;\\n    _userPosition.swapped = _calculateSwapped(_dcaId);\\n    _userPosition.swapsLeft = _position.lastSwap > performedSwaps[_position.swapInterval]\\n      ? _position.lastSwap - performedSwaps[_position.swapInterval]\\n      : 0;\\n    _userPosition.remaining = _calculateUnswapped(_dcaId);\\n    _userPosition.rate = _position.rate;\\n  }\\n\\n  function deposit(\\n    address _tokenAddress,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval\\n  ) external override nonReentrant returns (uint256) {\\n    if (_tokenAddress != address(tokenA) && _tokenAddress != address(tokenB)) revert InvalidToken();\\n    if (_amountOfSwaps == 0) revert ZeroSwaps();\\n    if (!_activeSwapIntervals.contains(_swapInterval) && !globalParameters.isSwapIntervalAllowed(_swapInterval)) revert InvalidInterval();\\n    IERC20Metadata _from = _tokenAddress == address(tokenA) ? tokenA : tokenB;\\n    uint256 _amount = _rate * _amountOfSwaps;\\n    _from.safeTransferFrom(msg.sender, address(this), _amount);\\n    _balances[_tokenAddress] += _amount;\\n    _idCounter += 1;\\n    _safeMint(msg.sender, _idCounter);\\n    _activeSwapIntervals.add(_swapInterval);\\n    (uint32 _startingSwap, uint32 _lastSwap) = _addPosition(_idCounter, _tokenAddress, _rate, _amountOfSwaps, 0, _swapInterval);\\n    emit Deposited(msg.sender, _idCounter, _tokenAddress, _rate, _startingSwap, _swapInterval, _lastSwap);\\n    return _idCounter;\\n  }\\n\\n  function withdrawSwapped(uint256 _dcaId) external override nonReentrant returns (uint256 _swapped) {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n\\n    _swapped = _calculateSwapped(_dcaId);\\n\\n    _userPositions[_dcaId].lastWithdrawSwap = performedSwaps[_userPositions[_dcaId].swapInterval];\\n    _userPositions[_dcaId].swappedBeforeModified = 0;\\n\\n    IERC20Metadata _to = _getTo(_dcaId);\\n    _balances[address(_to)] -= _swapped;\\n    _to.safeTransfer(msg.sender, _swapped);\\n\\n    emit Withdrew(msg.sender, _dcaId, address(_to), _swapped);\\n  }\\n\\n  function withdrawSwappedMany(uint256[] calldata _dcaIds)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 _swappedTokenA, uint256 _swappedTokenB)\\n  {\\n    for (uint256 i; i < _dcaIds.length; i++) {\\n      uint256 _dcaId = _dcaIds[i];\\n      _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n      uint256 _swappedDCA = _calculateSwapped(_dcaId);\\n      if (_userPositions[_dcaId].fromTokenA) {\\n        _swappedTokenB += _swappedDCA;\\n      } else {\\n        _swappedTokenA += _swappedDCA;\\n      }\\n      _userPositions[_dcaId].lastWithdrawSwap = performedSwaps[_userPositions[_dcaId].swapInterval];\\n      _userPositions[_dcaId].swappedBeforeModified = 0;\\n    }\\n\\n    if (_swappedTokenA > 0) {\\n      _balances[address(tokenA)] -= _swappedTokenA;\\n      tokenA.safeTransfer(msg.sender, _swappedTokenA);\\n    }\\n\\n    if (_swappedTokenB > 0) {\\n      _balances[address(tokenB)] -= _swappedTokenB;\\n      tokenB.safeTransfer(msg.sender, _swappedTokenB);\\n    }\\n    emit WithdrewMany(msg.sender, _dcaIds, _swappedTokenA, _swappedTokenB);\\n  }\\n\\n  function terminate(uint256 _dcaId) external override nonReentrant {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n\\n    uint256 _swapped = _calculateSwapped(_dcaId);\\n    uint256 _unswapped = _calculateUnswapped(_dcaId);\\n\\n    IERC20Metadata _from = _getFrom(_dcaId);\\n    IERC20Metadata _to = _getTo(_dcaId);\\n    _removePosition(_dcaId);\\n    _burn(_dcaId);\\n\\n    if (_swapped > 0) {\\n      _balances[address(_to)] -= _swapped;\\n      _to.safeTransfer(msg.sender, _swapped);\\n    }\\n\\n    if (_unswapped > 0) {\\n      _balances[address(_from)] -= _unswapped;\\n      _from.safeTransfer(msg.sender, _unswapped);\\n    }\\n\\n    emit Terminated(msg.sender, _dcaId, _unswapped, _swapped);\\n  }\\n\\n  function modifyRate(uint256 _dcaId, uint160 _newRate) external override nonReentrant {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n    uint32 _swapsLeft = _userPositions[_dcaId].lastSwap - performedSwaps[_userPositions[_dcaId].swapInterval];\\n    if (_swapsLeft == 0) revert PositionCompleted();\\n\\n    _modifyRateAndSwaps(_dcaId, _newRate, _swapsLeft);\\n  }\\n\\n  function modifySwaps(uint256 _dcaId, uint32 _newSwaps) external override nonReentrant {\\n    _modifyRateAndSwaps(_dcaId, _userPositions[_dcaId].rate, _newSwaps);\\n  }\\n\\n  function modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newAmountOfSwaps\\n  ) external override nonReentrant {\\n    _modifyRateAndSwaps(_dcaId, _newRate, _newAmountOfSwaps);\\n  }\\n\\n  function addFundsToPosition(\\n    uint256 _dcaId,\\n    uint256 _amount,\\n    uint32 _newSwaps\\n  ) external override nonReentrant {\\n    if (_amount == 0) revert ZeroAmount();\\n    if (_newSwaps == 0) revert ZeroSwaps();\\n\\n    uint256 _unswapped = _calculateUnswapped(_dcaId);\\n    uint256 _total = _unswapped + _amount;\\n\\n    _modifyPosition(_dcaId, _total, _unswapped, uint160(_total / _newSwaps), _newSwaps);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    return globalParameters.nftDescriptor().tokenURI(this, tokenId);\\n  }\\n\\n  /** Helper function to modify a position */\\n  function _modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newAmountOfSwaps\\n  ) internal {\\n    _modifyPosition(_dcaId, _newRate * _newAmountOfSwaps, _calculateUnswapped(_dcaId), _newRate, _newAmountOfSwaps);\\n  }\\n\\n  function _modifyPosition(\\n    uint256 _dcaId,\\n    uint256 _totalNecessary,\\n    uint256 _unswapped,\\n    uint160 _newRate,\\n    uint32 _newAmountOfSwaps\\n  ) internal {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n    IERC20Metadata _from = _getFrom(_dcaId);\\n\\n    uint256 _swapped = _calculateSwapped(_dcaId);\\n    if (_swapped > type(uint248).max) revert MandatoryWithdraw(); // You should withdraw before modifying, to avoid losing funds\\n\\n    uint32 _swapInterval = _userPositions[_dcaId].swapInterval;\\n    _removePosition(_dcaId);\\n    (uint32 _startingSwap, uint32 _lastSwap) = _addPosition(\\n      _dcaId,\\n      address(_from),\\n      _newRate,\\n      _newAmountOfSwaps,\\n      uint248(_swapped),\\n      _swapInterval\\n    );\\n\\n    if (_totalNecessary > _unswapped) {\\n      // We need to ask for more funds\\n      _from.safeTransferFrom(msg.sender, address(this), _totalNecessary - _unswapped);\\n      _balances[address(_from)] += _totalNecessary - _unswapped;\\n    } else if (_totalNecessary < _unswapped) {\\n      // We need to return to the owner the amount that won't be used anymore\\n      _balances[address(_from)] -= _unswapped - _totalNecessary;\\n      _from.safeTransfer(msg.sender, _unswapped - _totalNecessary);\\n    }\\n\\n    emit Modified(msg.sender, _dcaId, _newRate, _startingSwap, _lastSwap);\\n  }\\n\\n  function _assertPositionExistsAndCanBeOperatedByCaller(uint256 _dcaId) internal view {\\n    if (_userPositions[_dcaId].rate == 0) revert InvalidPosition();\\n    if (!_isApprovedOrOwner(msg.sender, _dcaId)) revert UnauthorizedCaller();\\n  }\\n\\n  function _addPosition(\\n    uint256 _dcaId,\\n    address _from,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint248 _swappedBeforeModified,\\n    uint32 _swapInterval\\n  ) internal returns (uint32 _startingSwap, uint32 _lastSwap) {\\n    if (_rate == 0) revert ZeroRate();\\n    uint32 _performedSwaps = performedSwaps[_swapInterval];\\n    _startingSwap = _performedSwaps + 1;\\n    _lastSwap = _performedSwaps + _amountOfSwaps;\\n    swapAmountDelta[_swapInterval][_from][_startingSwap] += int160(_rate);\\n    swapAmountDelta[_swapInterval][_from][_lastSwap + 1] -= int160(_rate);\\n    _userPositions[_dcaId] = DCA(_performedSwaps, _lastSwap, _swapInterval, _rate, _from == address(tokenA), _swappedBeforeModified);\\n  }\\n\\n  function _removePosition(uint256 _dcaId) internal {\\n    uint32 _swapInterval = _userPositions[_dcaId].swapInterval;\\n    uint32 _lastSwap = _userPositions[_dcaId].lastSwap;\\n    uint32 _performedSwaps = performedSwaps[_swapInterval];\\n\\n    if (_lastSwap > _performedSwaps) {\\n      int160 _rate = int160(_userPositions[_dcaId].rate);\\n      address _from = address(_getFrom(_dcaId));\\n      swapAmountDelta[_swapInterval][_from][_performedSwaps + 1] -= _rate;\\n      swapAmountDelta[_swapInterval][_from][_lastSwap + 1] += _rate;\\n    }\\n    delete _userPositions[_dcaId];\\n  }\\n\\n  /** Returns the amount of tokens swapped in TO */\\n  function _calculateSwapped(uint256 _dcaId) internal view returns (uint256 _swapped) {\\n    DCA memory _userDCA = _userPositions[_dcaId];\\n    address _from = _userDCA.fromTokenA ? address(tokenA) : address(tokenB);\\n    uint256 _accumRatesLastSwap = _accumRatesPerUnit[_userDCA.swapInterval][_from][\\n      performedSwaps[_userDCA.swapInterval] < _userDCA.lastSwap ? performedSwaps[_userDCA.swapInterval] : _userDCA.lastSwap\\n    ];\\n\\n    uint256 _accumPerUnit = _accumRatesLastSwap - _accumRatesPerUnit[_userDCA.swapInterval][_from][_userDCA.lastWithdrawSwap];\\n    uint256 _magnitude = _userDCA.fromTokenA ? _magnitudeA : _magnitudeB;\\n    (bool _ok, uint256 _mult) = Math.tryMul(_accumPerUnit, _userDCA.rate);\\n    uint256 _swappedInCurrentPosition = _ok ? _mult / _magnitude : (_accumPerUnit / _magnitude) * _userDCA.rate;\\n    _swapped = _swappedInCurrentPosition + _userDCA.swappedBeforeModified;\\n  }\\n\\n  /** Returns how many FROM remains unswapped  */\\n  function _calculateUnswapped(uint256 _dcaId) internal view returns (uint256 _unswapped) {\\n    uint32 _performedSwaps = performedSwaps[_userPositions[_dcaId].swapInterval];\\n    uint32 _lastSwap = _userPositions[_dcaId].lastSwap;\\n\\n    if (_lastSwap <= _performedSwaps) return 0;\\n    _unswapped = (_lastSwap - _performedSwaps) * _userPositions[_dcaId].rate;\\n  }\\n\\n  function _getFrom(uint256 _dcaId) internal view returns (IERC20Metadata _from) {\\n    _from = _userPositions[_dcaId].fromTokenA ? tokenA : tokenB;\\n  }\\n\\n  function _getTo(uint256 _dcaId) internal view returns (IERC20Metadata _to) {\\n    _to = _userPositions[_dcaId].fromTokenA ? tokenB : tokenA;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DCAPair/DCAPairSwapHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.6;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '../interfaces/IDCAPairSwapCallee.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\nimport './DCAPairParameters.sol';\\n\\nabstract contract DCAPairSwapHandler is ReentrancyGuard, DCAPairParameters, IDCAPairSwapHandler {\\n  using SafeERC20 for IERC20Metadata;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  mapping(uint32 => mapping(address => uint256)) public override swapAmountAccumulator; // swap interval => from token => swap amount accum\\n\\n  mapping(uint32 => uint32) public override nextSwapAvailable; // swap interval => timestamp\\n\\n  function _addNewRatePerUnit(\\n    uint32 _swapInterval,\\n    address _address,\\n    uint32 _performedSwap,\\n    uint256 _ratePerUnit\\n  ) internal {\\n    uint256 _accumRatesPerUnitPreviousSwap = _accumRatesPerUnit[_swapInterval][_address][_performedSwap - 1];\\n    _accumRatesPerUnit[_swapInterval][_address][_performedSwap] = _accumRatesPerUnitPreviousSwap + _ratePerUnit;\\n  }\\n\\n  function _registerSwap(\\n    uint32 _swapInterval,\\n    address _token,\\n    uint256 _internalAmountUsedToSwap,\\n    uint256 _ratePerUnit,\\n    uint32 _swapToRegister\\n  ) internal {\\n    swapAmountAccumulator[_swapInterval][_token] = _internalAmountUsedToSwap;\\n    _addNewRatePerUnit(_swapInterval, _token, _swapToRegister, _ratePerUnit);\\n    delete swapAmountDelta[_swapInterval][_token][_swapToRegister];\\n  }\\n\\n  function _getAmountToSwap(\\n    uint32 _swapInterval,\\n    address _address,\\n    uint32 _swapToPerform\\n  ) internal view returns (uint256 _swapAmountAccumulator) {\\n    unchecked {\\n      _swapAmountAccumulator =\\n        swapAmountAccumulator[_swapInterval][_address] +\\n        uint256(swapAmountDelta[_swapInterval][_address][_swapToPerform]);\\n    }\\n  }\\n\\n  function _convertTo(\\n    uint256 _fromTokenMagnitude,\\n    uint256 _amountFrom,\\n    uint256 _rateFromTo\\n  ) internal pure returns (uint256 _amountTo) {\\n    _amountTo = (_amountFrom * _rateFromTo) / _fromTokenMagnitude;\\n  }\\n\\n  function _getNextSwapsToPerform() internal view virtual returns (SwapInformation[] memory _swapsToPerform, uint8 _amountOfSwapsToPerform) {\\n    uint256 _activeSwapIntervalsLength = _activeSwapIntervals.length();\\n    _swapsToPerform = new SwapInformation[](_activeSwapIntervalsLength);\\n    for (uint256 i; i < _activeSwapIntervalsLength; i++) {\\n      uint32 _swapInterval = uint32(_activeSwapIntervals.at(i));\\n      if (nextSwapAvailable[_swapInterval] <= _getTimestamp()) {\\n        uint32 _swapToPerform = performedSwaps[_swapInterval] + 1;\\n        _swapsToPerform[_amountOfSwapsToPerform++] = SwapInformation({\\n          interval: _swapInterval,\\n          swapToPerform: _swapToPerform,\\n          amountToSwapTokenA: _getAmountToSwap(_swapInterval, address(tokenA), _swapToPerform),\\n          amountToSwapTokenB: _getAmountToSwap(_swapInterval, address(tokenB), _swapToPerform)\\n        });\\n      }\\n    }\\n  }\\n\\n  function secondsUntilNextSwap() external view override returns (uint32 _secondsUntil) {\\n    _secondsUntil = type(uint32).max;\\n    uint32 _timestamp = _getTimestamp();\\n    for (uint256 i; i < _activeSwapIntervals.length(); i++) {\\n      uint32 _swapInterval = uint32(_activeSwapIntervals.at(i));\\n      if (nextSwapAvailable[_swapInterval] <= _timestamp) {\\n        _secondsUntil = 0;\\n        break;\\n      } else {\\n        uint32 _diff = nextSwapAvailable[_swapInterval] - _timestamp;\\n        if (_diff < _secondsUntil) {\\n          _secondsUntil = _diff;\\n        }\\n      }\\n    }\\n  }\\n\\n  function getNextSwapInfo() external view override returns (NextSwapInformation memory _nextSwapInformation) {\\n    IDCAGlobalParameters.SwapParameters memory _swapParameters = globalParameters.swapParameters();\\n    (_nextSwapInformation, , ) = _getNextSwapInfo(_swapParameters.swapFee, _swapParameters.oracle);\\n  }\\n\\n  function _getNextSwapInfo(uint32 _swapFee, ITimeWeightedOracle _oracle)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      NextSwapInformation memory _nextSwapInformation,\\n      uint256 _ratePerUnitBToAWithFee,\\n      uint256 _ratePerUnitAToBWithFee\\n    )\\n  {\\n    uint256 _amountToSwapTokenA;\\n    uint256 _amountToSwapTokenB;\\n    {\\n      (SwapInformation[] memory _swapsToPerform, uint8 _amountOfSwaps) = _getNextSwapsToPerform();\\n      for (uint256 i; i < _amountOfSwaps; i++) {\\n        _amountToSwapTokenA += _swapsToPerform[i].amountToSwapTokenA;\\n        _amountToSwapTokenB += _swapsToPerform[i].amountToSwapTokenB;\\n      }\\n      _nextSwapInformation.swapsToPerform = _swapsToPerform;\\n      _nextSwapInformation.amountOfSwaps = _amountOfSwaps;\\n    }\\n\\n    _nextSwapInformation.ratePerUnitBToA = _oracle.quote(address(tokenB), _magnitudeB, address(tokenA));\\n    _nextSwapInformation.ratePerUnitAToB = (uint256(_magnitudeB) * _magnitudeA) / _nextSwapInformation.ratePerUnitBToA;\\n\\n    _ratePerUnitBToAWithFee = _nextSwapInformation.ratePerUnitBToA - _getFeeFromAmount(_swapFee, _nextSwapInformation.ratePerUnitBToA);\\n    _ratePerUnitAToBWithFee = _nextSwapInformation.ratePerUnitAToB - _getFeeFromAmount(_swapFee, _nextSwapInformation.ratePerUnitAToB);\\n\\n    uint256 _finalNeededTokenA = _convertTo(_magnitudeB, _amountToSwapTokenB, _ratePerUnitBToAWithFee);\\n    uint256 _finalNeededTokenB = _convertTo(_magnitudeA, _amountToSwapTokenA, _ratePerUnitAToBWithFee);\\n\\n    uint256 _amountOfTokenAIfTokenBSwapped = _convertTo(_magnitudeB, _amountToSwapTokenB, _nextSwapInformation.ratePerUnitBToA);\\n    if (_amountOfTokenAIfTokenBSwapped < _amountToSwapTokenA) {\\n      _nextSwapInformation.tokenToBeProvidedBySwapper = tokenB;\\n      _nextSwapInformation.tokenToRewardSwapperWith = tokenA;\\n      _nextSwapInformation.platformFeeTokenA = _getFeeFromAmount(_swapFee, _amountOfTokenAIfTokenBSwapped);\\n      _nextSwapInformation.platformFeeTokenB = _getFeeFromAmount(_swapFee, _amountToSwapTokenB);\\n      _nextSwapInformation.amountToBeProvidedBySwapper = _finalNeededTokenB + _nextSwapInformation.platformFeeTokenB - _amountToSwapTokenB;\\n      _nextSwapInformation.amountToRewardSwapperWith = _amountToSwapTokenA - _finalNeededTokenA - _nextSwapInformation.platformFeeTokenA;\\n      _nextSwapInformation.availableToBorrowTokenA = _balances[address(tokenA)] - _nextSwapInformation.amountToRewardSwapperWith;\\n      _nextSwapInformation.availableToBorrowTokenB = _balances[address(tokenB)];\\n    } else if (_amountOfTokenAIfTokenBSwapped > _amountToSwapTokenA) {\\n      _nextSwapInformation.tokenToBeProvidedBySwapper = tokenA;\\n      _nextSwapInformation.tokenToRewardSwapperWith = tokenB;\\n      _nextSwapInformation.platformFeeTokenA = _getFeeFromAmount(_swapFee, _amountToSwapTokenA);\\n      _nextSwapInformation.platformFeeTokenB = _getFeeFromAmount(\\n        _swapFee,\\n        (_amountToSwapTokenA * _magnitudeB) / _nextSwapInformation.ratePerUnitBToA\\n      );\\n      _nextSwapInformation.amountToBeProvidedBySwapper = _finalNeededTokenA + _nextSwapInformation.platformFeeTokenA - _amountToSwapTokenA;\\n      _nextSwapInformation.amountToRewardSwapperWith = _amountToSwapTokenB - _finalNeededTokenB - _nextSwapInformation.platformFeeTokenB;\\n      _nextSwapInformation.availableToBorrowTokenA = _balances[address(tokenA)];\\n      _nextSwapInformation.availableToBorrowTokenB = _balances[address(tokenB)] - _nextSwapInformation.amountToRewardSwapperWith;\\n    } else {\\n      _nextSwapInformation.platformFeeTokenA = _getFeeFromAmount(_swapFee, _amountToSwapTokenA);\\n      _nextSwapInformation.platformFeeTokenB = _getFeeFromAmount(_swapFee, _amountToSwapTokenB);\\n      _nextSwapInformation.availableToBorrowTokenA = _balances[address(tokenA)];\\n      _nextSwapInformation.availableToBorrowTokenB = _balances[address(tokenB)];\\n    }\\n  }\\n\\n  function swap() external override {\\n    swap(0, 0, msg.sender, '');\\n  }\\n\\n  function swap(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes memory _data\\n  ) public override nonReentrant {\\n    IDCAGlobalParameters.SwapParameters memory _swapParameters = globalParameters.swapParameters();\\n    if (_swapParameters.isPaused) revert CommonErrors.Paused();\\n\\n    NextSwapInformation memory _nextSwapInformation;\\n\\n    {\\n      uint256 _ratePerUnitBToAWithFee;\\n      uint256 _ratePerUnitAToBWithFee;\\n      (_nextSwapInformation, _ratePerUnitBToAWithFee, _ratePerUnitAToBWithFee) = _getNextSwapInfo(\\n        _swapParameters.swapFee,\\n        _swapParameters.oracle\\n      );\\n      if (_nextSwapInformation.amountOfSwaps == 0) revert NoSwapsToExecute();\\n\\n      uint32 _timestamp = _getTimestamp();\\n      for (uint256 i; i < _nextSwapInformation.amountOfSwaps; i++) {\\n        uint32 _swapInterval = _nextSwapInformation.swapsToPerform[i].interval;\\n        uint32 _swapToPerform = _nextSwapInformation.swapsToPerform[i].swapToPerform;\\n        if (_nextSwapInformation.swapsToPerform[i].amountToSwapTokenA > 0 || _nextSwapInformation.swapsToPerform[i].amountToSwapTokenB > 0) {\\n          _registerSwap(\\n            _swapInterval,\\n            address(tokenA),\\n            _nextSwapInformation.swapsToPerform[i].amountToSwapTokenA,\\n            _ratePerUnitAToBWithFee,\\n            _swapToPerform\\n          );\\n          _registerSwap(\\n            _swapInterval,\\n            address(tokenB),\\n            _nextSwapInformation.swapsToPerform[i].amountToSwapTokenB,\\n            _ratePerUnitBToAWithFee,\\n            _swapToPerform\\n          );\\n          performedSwaps[_swapInterval] = _swapToPerform;\\n          nextSwapAvailable[_swapInterval] = ((_timestamp / _swapInterval) + 1) * _swapInterval;\\n        } else {\\n          _activeSwapIntervals.remove(_swapInterval);\\n        }\\n      }\\n    }\\n\\n    if (\\n      _amountToBorrowTokenA > _nextSwapInformation.availableToBorrowTokenA ||\\n      _amountToBorrowTokenB > _nextSwapInformation.availableToBorrowTokenB\\n    ) revert CommonErrors.InsufficientLiquidity();\\n\\n    uint256 _finalAmountToHaveTokenA = _nextSwapInformation.availableToBorrowTokenA - _nextSwapInformation.platformFeeTokenA;\\n    uint256 _finalAmountToHaveTokenB = _nextSwapInformation.availableToBorrowTokenB - _nextSwapInformation.platformFeeTokenB;\\n\\n    {\\n      // scope for _amountToSendToken{A,B}, avoids stack too deep errors\\n      uint256 _amountToSendTokenA = _amountToBorrowTokenA;\\n      uint256 _amountToSendTokenB = _amountToBorrowTokenB;\\n\\n      if (_nextSwapInformation.tokenToRewardSwapperWith == tokenA) {\\n        _amountToSendTokenA += _nextSwapInformation.amountToRewardSwapperWith;\\n        _finalAmountToHaveTokenB += _nextSwapInformation.amountToBeProvidedBySwapper;\\n      } else {\\n        _amountToSendTokenB += _nextSwapInformation.amountToRewardSwapperWith;\\n        _finalAmountToHaveTokenA += _nextSwapInformation.amountToBeProvidedBySwapper;\\n      }\\n\\n      // Optimistically transfer tokens\\n      if (_amountToSendTokenA > 0) tokenA.safeTransfer(_to, _amountToSendTokenA);\\n      if (_amountToSendTokenB > 0) tokenB.safeTransfer(_to, _amountToSendTokenB);\\n    }\\n\\n    if (_data.length > 0) {\\n      // Make call\\n      IDCAPairSwapCallee(_to).DCAPairSwapCall(\\n        msg.sender,\\n        tokenA,\\n        tokenB,\\n        _amountToBorrowTokenA,\\n        _amountToBorrowTokenB,\\n        _nextSwapInformation.tokenToRewardSwapperWith == tokenA,\\n        _nextSwapInformation.amountToRewardSwapperWith,\\n        _nextSwapInformation.amountToBeProvidedBySwapper,\\n        _data\\n      );\\n    }\\n\\n    uint256 _balanceTokenA = tokenA.balanceOf(address(this));\\n    uint256 _balanceTokenB = tokenB.balanceOf(address(this));\\n\\n    // Make sure that they sent the tokens back\\n    if (\\n      _balanceTokenA < (_finalAmountToHaveTokenA + _nextSwapInformation.platformFeeTokenA) ||\\n      _balanceTokenB < (_finalAmountToHaveTokenB + _nextSwapInformation.platformFeeTokenB)\\n    ) revert CommonErrors.LiquidityNotReturned();\\n\\n    // Update balances\\n    _balances[address(tokenA)] = _finalAmountToHaveTokenA;\\n    _balances[address(tokenB)] = _finalAmountToHaveTokenB;\\n\\n    // Send fees and extra\\n    uint256 _toFeeRecipientTokenA = _balanceTokenA - _finalAmountToHaveTokenA;\\n    uint256 _toFeeRecipientTokenB = _balanceTokenB - _finalAmountToHaveTokenB;\\n    if (_toFeeRecipientTokenA > 0) tokenA.safeTransfer(_swapParameters.feeRecipient, _toFeeRecipientTokenA);\\n    if (_toFeeRecipientTokenB > 0) tokenB.safeTransfer(_swapParameters.feeRecipient, _toFeeRecipientTokenB);\\n\\n    // Emit event\\n    emit Swapped(msg.sender, _to, _amountToBorrowTokenA, _amountToBorrowTokenB, _swapParameters.swapFee, _nextSwapInformation);\\n  }\\n\\n  function _getTimestamp() internal view virtual returns (uint32 _blockTimestamp) {\\n    _blockTimestamp = uint32(block.timestamp);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DCAPair/DCAPairLoanHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '../interfaces/IDCAPairLoanCallee.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\nimport './DCAPairParameters.sol';\\n\\nabstract contract DCAPairLoanHandler is ReentrancyGuard, DCAPairParameters, IDCAPairLoanHandler {\\n  using SafeERC20 for IERC20Metadata;\\n\\n  function availableToBorrow() external view override returns (uint256 _amountToBorrowTokenA, uint256 _amountToBorrowTokenB) {\\n    _amountToBorrowTokenA = _balances[address(tokenA)];\\n    _amountToBorrowTokenB = _balances[address(tokenB)];\\n  }\\n\\n  function loan(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external override nonReentrant {\\n    if (_amountToBorrowTokenA == 0 && _amountToBorrowTokenB == 0) revert ZeroLoan();\\n\\n    IDCAGlobalParameters.LoanParameters memory _loanParameters = globalParameters.loanParameters();\\n\\n    if (_loanParameters.isPaused) revert CommonErrors.Paused();\\n\\n    uint256 _beforeBalanceTokenA = _balances[address(tokenA)];\\n    uint256 _beforeBalanceTokenB = _balances[address(tokenB)];\\n\\n    if (_amountToBorrowTokenA > _beforeBalanceTokenA || _amountToBorrowTokenB > _beforeBalanceTokenB)\\n      revert CommonErrors.InsufficientLiquidity();\\n\\n    // Calculate fees\\n    uint256 _feeTokenA = _amountToBorrowTokenA > 0 ? _getFeeFromAmount(_loanParameters.loanFee, _amountToBorrowTokenA) : 0;\\n    uint256 _feeTokenB = _amountToBorrowTokenB > 0 ? _getFeeFromAmount(_loanParameters.loanFee, _amountToBorrowTokenB) : 0;\\n\\n    if (_amountToBorrowTokenA > 0) tokenA.safeTransfer(_to, _amountToBorrowTokenA);\\n    if (_amountToBorrowTokenB > 0) tokenB.safeTransfer(_to, _amountToBorrowTokenB);\\n\\n    // Make call\\n    IDCAPairLoanCallee(_to).DCAPairLoanCall(\\n      msg.sender,\\n      tokenA,\\n      tokenB,\\n      _amountToBorrowTokenA,\\n      _amountToBorrowTokenB,\\n      _feeTokenA,\\n      _feeTokenB,\\n      _data\\n    );\\n\\n    uint256 _afterBalanceTokenA = tokenA.balanceOf(address(this));\\n    uint256 _afterBalanceTokenB = tokenB.balanceOf(address(this));\\n\\n    // Make sure that they sent the tokens back\\n    if (_afterBalanceTokenA < (_beforeBalanceTokenA + _feeTokenA) || _afterBalanceTokenB < (_beforeBalanceTokenB + _feeTokenB))\\n      revert CommonErrors.LiquidityNotReturned();\\n\\n    {\\n      // Send fees and extra (if any)\\n      uint256 _toFeeRecipientTokenA = _afterBalanceTokenA - _beforeBalanceTokenA;\\n      uint256 _toFeeRecipientTokenB = _afterBalanceTokenB - _beforeBalanceTokenB;\\n      if (_toFeeRecipientTokenA > 0) tokenA.safeTransfer(_loanParameters.feeRecipient, _toFeeRecipientTokenA);\\n      if (_toFeeRecipientTokenB > 0) tokenB.safeTransfer(_loanParameters.feeRecipient, _toFeeRecipientTokenB);\\n    }\\n\\n    // Emit event\\n    emit Loaned(msg.sender, _to, _amountToBorrowTokenA, _amountToBorrowTokenB, _loanParameters.loanFee);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDCAGlobalParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport './ITimeWeightedOracle.sol';\\nimport './IDCATokenDescriptor.sol';\\n\\n/// @title The interface for handling parameters the affect the whole DCA ecosystem\\n/// @notice This contract will manage configuration that affects all pairs, swappers, etc\\ninterface IDCAGlobalParameters {\\n  /// @notice A compilation of all parameters that affect a swap\\n  struct SwapParameters {\\n    // The address of the fee recipient\\n    address feeRecipient;\\n    // Whether swaps are paused or not\\n    bool isPaused;\\n    // The swap fee\\n    uint32 swapFee;\\n    // The oracle contract\\n    ITimeWeightedOracle oracle;\\n  }\\n\\n  /// @notice A compilation of all parameters that affect a loan\\n  struct LoanParameters {\\n    // The address of the fee recipient\\n    address feeRecipient;\\n    // Whether loans are paused or not\\n    bool isPaused;\\n    // The loan fee\\n    uint32 loanFee;\\n  }\\n\\n  /// @notice Emitted when a new fee recipient is set\\n  /// @param _feeRecipient The address of the new fee recipient\\n  event FeeRecipientSet(address _feeRecipient);\\n\\n  /// @notice Emitted when a new NFT descriptor is set\\n  /// @param _descriptor The new NFT descriptor contract\\n  event NFTDescriptorSet(IDCATokenDescriptor _descriptor);\\n\\n  /// @notice Emitted when a new oracle is set\\n  /// @param _oracle The new oracle contract\\n  event OracleSet(ITimeWeightedOracle _oracle);\\n\\n  /// @notice Emitted when a new swap fee is set\\n  /// @param _feeSet The new swap fee\\n  event SwapFeeSet(uint32 _feeSet);\\n\\n  /// @notice Emitted when a new loan fee is set\\n  /// @param _feeSet The new loan fee\\n  event LoanFeeSet(uint32 _feeSet);\\n\\n  /// @notice Emitted when new swap intervals are allowed\\n  /// @param _swapIntervals The new swap intervals\\n  /// @param _descriptions The descriptions for each swap interval\\n  event SwapIntervalsAllowed(uint32[] _swapIntervals, string[] _descriptions);\\n\\n  /// @notice Emitted when some swap intervals are no longer allowed\\n  /// @param _swapIntervals The swap intervals that are no longer allowed\\n  event SwapIntervalsForbidden(uint32[] _swapIntervals);\\n\\n  /// @notice Thrown when trying to set a fee higher than the maximum allowed\\n  error HighFee();\\n\\n  /// @notice Thrown when trying to support new swap intervals, but the amount of descriptions doesn't match\\n  error InvalidParams();\\n\\n  /// @notice Thrown when trying to support a new swap interval of value zero\\n  error ZeroInterval();\\n\\n  /// @notice Thrown when trying a description for a new swap interval is empty\\n  error EmptyDescription();\\n\\n  /// @notice Returns the address of the fee recipient\\n  /// @return _feeRecipient The address of the fee recipient\\n  function feeRecipient() external view returns (address _feeRecipient);\\n\\n  /// @notice Returns fee charged on swaps\\n  /// @return _swapFee The fee itself\\n  function swapFee() external view returns (uint32 _swapFee);\\n\\n  /// @notice Returns fee charged on loans\\n  /// @return _loanFee The fee itself\\n  function loanFee() external view returns (uint32 _loanFee);\\n\\n  /// @notice Returns the NFT descriptor contract\\n  /// @return _nftDescriptor The contract itself\\n  function nftDescriptor() external view returns (IDCATokenDescriptor _nftDescriptor);\\n\\n  /// @notice Returns the time-weighted oracle contract\\n  /// @return _oracle The contract itself\\n  function oracle() external view returns (ITimeWeightedOracle _oracle);\\n\\n  /// @notice Returns the precision used for fees\\n  /// @dev Cannot be modified\\n  /// @return _precision The precision used for fees\\n  // solhint-disable-next-line func-name-mixedcase\\n  function FEE_PRECISION() external view returns (uint24 _precision);\\n\\n  /// @notice Returns the max fee that can be set for either swap or loans\\n  /// @dev Cannot be modified\\n  /// @return _maxFee The maximum possible fee\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_FEE() external view returns (uint32 _maxFee);\\n\\n  /// @notice Returns a list of all the allowed swap intervals\\n  /// @return _allowedSwapIntervals An array with all allowed swap intervals\\n  function allowedSwapIntervals() external view returns (uint32[] memory _allowedSwapIntervals);\\n\\n  /// @notice Returns the description for a given swap interval\\n  /// @return _description The swap interval's description\\n  function intervalDescription(uint32 _swapInterval) external view returns (string memory _description);\\n\\n  /// @notice Returns whether a swap interval is currently allowed\\n  /// @return _isAllowed Whether the given swap interval is currently allowed\\n  function isSwapIntervalAllowed(uint32 _swapInterval) external view returns (bool _isAllowed);\\n\\n  /// @notice Returns whether swaps and loans are currently paused\\n  /// @return _isPaused Whether swaps and loans are currently paused\\n  function paused() external view returns (bool _isPaused);\\n\\n  /// @notice Returns a compilation of all parameters that affect a swap\\n  /// @return _swapParameters All parameters that affect a swap\\n  function swapParameters() external view returns (SwapParameters memory _swapParameters);\\n\\n  /// @notice Returns a compilation of all parameters that affect a loan\\n  /// @return _loanParameters All parameters that affect a loan\\n  function loanParameters() external view returns (LoanParameters memory _loanParameters);\\n\\n  /// @notice Sets a new fee recipient address\\n  /// @dev Will revert with ZeroAddress if the zero address is passed\\n  /// @param _feeRecipient The new fee recipient address\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  /// @notice Sets a new swap fee\\n  /// @dev Will rever with HighFee if the fee is higher than the maximum\\n  /// @param _fee The new swap fee\\n  function setSwapFee(uint32 _fee) external;\\n\\n  /// @notice Sets a new loan fee\\n  /// @dev Will rever with HighFee if the fee is higher than the maximum\\n  /// @param _fee The new loan fee\\n  function setLoanFee(uint32 _fee) external;\\n\\n  /// @notice Sets a new NFT descriptor\\n  /// @dev Will revert with ZeroAddress if the zero address is passed\\n  /// @param _descriptor The new descriptor contract\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external;\\n\\n  /// @notice Sets a new time-weighted oracle\\n  /// @dev Will revert with ZeroAddress if the zero address is passed\\n  /// @param _oracle The new oracle contract\\n  function setOracle(ITimeWeightedOracle _oracle) external;\\n\\n  /// @notice Adds new swap intervals to the allowed list\\n  /// @dev Will revert with:\\n  /// InvalidParams if the amount of swap intervals is different from the amount of descriptions passed\\n  /// ZeroInterval if any of the swap intervals is zero\\n  /// EmptyDescription if any of the descriptions is empty\\n  /// @param _swapIntervals The new swap intervals\\n  /// @param _descriptions Their descriptions\\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals, string[] calldata _descriptions) external;\\n\\n  /// @notice Removes some swap intervals from the allowed list\\n  /// @param _swapIntervals The swap intervals to remove\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external;\\n\\n  /// @notice Pauses all swaps and loans\\n  function pause() external;\\n\\n  /// @notice Unpauses all swaps and loans\\n  function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDCAPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './IDCAGlobalParameters.sol';\\n\\n/// @title The interface for all state related queries\\n/// @notice These methods allow users to read the pair's current values\\ninterface IDCAPairParameters {\\n  /// @notice Returns the global parameters contract\\n  /// @dev Global parameters has information about swaps and pairs, like swap intervals, fees charged, etc.\\n  /// @return The Global Parameters contract\\n  function globalParameters() external view returns (IDCAGlobalParameters);\\n\\n  /// @notice Returns the token A contract\\n  /// @return The contract for token A\\n  function tokenA() external view returns (IERC20Metadata);\\n\\n  /// @notice Returns the token B contract\\n  /// @return The contract for token B\\n  function tokenB() external view returns (IERC20Metadata);\\n\\n  /// @notice Returns how much will the amount to swap differ from the previous swap\\n  /// @dev f.e. if the returned value is -100, then the amount to swap will be 100 less than the swap just before it\\n  /// @param _swapInterval The swap interval to check\\n  /// @param _from The 'from' token of the deposits\\n  /// @param _swap The swap number to check\\n  /// @return _delta How much will the amount to swap differ, when compared to the swap just before this one\\n  function swapAmountDelta(\\n    uint32 _swapInterval,\\n    address _from,\\n    uint32 _swap\\n  ) external view returns (int256 _delta);\\n\\n  /// @notice Returns if a certain swap interval is active or not\\n  /// @dev We consider a swap interval to be active if there is at least one active position on that interval\\n  /// @param _swapInterval The swap interval to check\\n  /// @return _isActive Whether the given swap interval is currently active\\n  function isSwapIntervalActive(uint32 _swapInterval) external view returns (bool _isActive);\\n\\n  /// @notice Returns the amount of swaps executed for a certain interval\\n  /// @param _swapInterval The swap interval to check\\n  /// @return _swaps The amount of swaps performed on the given interval\\n  function performedSwaps(uint32 _swapInterval) external view returns (uint32 _swaps);\\n}\\n\\n/// @title The interface for all position related matters in a DCA pair\\n/// @notice These methods allow users to create, modify and terminate their positions\\ninterface IDCAPairPositionHandler is IDCAPairParameters {\\n  /// @notice The position of a certain user\\n  struct UserPosition {\\n    // The token that the user deposited and will be swapped in exchange for \\\"to\\\"\\n    IERC20Metadata from;\\n    // The token that the user will get in exchange for their \\\"from\\\" tokens in each swap\\n    IERC20Metadata to;\\n    // How frequently the position's swaps should be executed\\n    uint32 swapInterval;\\n    // How many swaps were executed since deposit, last modification, or last withdraw\\n    uint32 swapsExecuted;\\n    // How many \\\"to\\\" tokens can currently be withdrawn\\n    uint256 swapped;\\n    // How many swaps left the position has to execute\\n    uint32 swapsLeft;\\n    // How many \\\"from\\\" tokens there are left to swap\\n    uint256 remaining;\\n    // How many \\\"from\\\" tokens need to be traded in each swap\\n    uint160 rate;\\n  }\\n\\n  /// @notice Emitted when a position is terminated\\n  /// @param _user The address of the user that terminated the position\\n  /// @param _dcaId The id of the position that was terminated\\n  /// @param _returnedUnswapped How many \\\"from\\\" tokens were returned to the caller\\n  /// @param _returnedSwapped How many \\\"to\\\" tokens were returned to the caller\\n  event Terminated(address indexed _user, uint256 _dcaId, uint256 _returnedUnswapped, uint256 _returnedSwapped);\\n\\n  /// @notice Emitted when a position is created\\n  /// @param _user The address of the user that created the position\\n  /// @param _dcaId The id of the position that was created\\n  /// @param _fromToken The address of the \\\"from\\\" token\\n  /// @param _rate How many \\\"from\\\" tokens need to be traded in each swap\\n  /// @param _startingSwap The number of the swap when the position will be executed for the first time\\n  /// @param _swapInterval How frequently the position's swaps should be executed\\n  /// @param _lastSwap The number of the swap when the position will be executed for the last time\\n  event Deposited(\\n    address indexed _user,\\n    uint256 _dcaId,\\n    address _fromToken,\\n    uint160 _rate,\\n    uint32 _startingSwap,\\n    uint32 _swapInterval,\\n    uint32 _lastSwap\\n  );\\n\\n  /// @notice Emitted when a user withdraws all swapped tokens from a position\\n  /// @param _user The address of the user that executed the withdraw\\n  /// @param _dcaId The id of the position that was affected\\n  /// @param _token The address of the withdrawn tokens. It's the same as the position's \\\"to\\\" token\\n  /// @param _amount The amount that was withdrawn\\n  event Withdrew(address indexed _user, uint256 _dcaId, address _token, uint256 _amount);\\n\\n  /// @notice Emitted when a user withdraws all swapped tokens from many positions\\n  /// @param _user The address of the user that executed the withdraw\\n  /// @param _dcaIds The ids of the positions that were affected\\n  /// @param _swappedTokenA The total amount that was withdrawn in token A\\n  /// @param _swappedTokenB The total amount that was withdrawn in token B\\n  event WithdrewMany(address indexed _user, uint256[] _dcaIds, uint256 _swappedTokenA, uint256 _swappedTokenB);\\n\\n  /// @notice Emitted when a position is modified\\n  /// @param _user The address of the user that modified the position\\n  /// @param _dcaId The id of the position that was modified\\n  /// @param _rate How many \\\"from\\\" tokens need to be traded in each swap\\n  /// @param _startingSwap The number of the swap when the position will be executed for the first time\\n  /// @param _lastSwap The number of the swap when the position will be executed for the last time\\n  event Modified(address indexed _user, uint256 _dcaId, uint160 _rate, uint32 _startingSwap, uint32 _lastSwap);\\n\\n  /// @notice Thrown when a user tries to create a position with a token that is neither token A nor token B\\n  error InvalidToken();\\n\\n  /// @notice Thrown when a user tries to create that a position with an unsupported swap interval\\n  error InvalidInterval();\\n\\n  /// @notice Thrown when a user tries operate on a position that doesn't exist (it might have been already terminated)\\n  error InvalidPosition();\\n\\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\\n  error UnauthorizedCaller();\\n\\n  /// @notice Thrown when a user tries to create or modify a position by setting the rate to be zero\\n  error ZeroRate();\\n\\n  /// @notice Thrown when a user tries to create a position with zero swaps\\n  error ZeroSwaps();\\n\\n  /// @notice Thrown when a user tries to add zero funds to their position\\n  error ZeroAmount();\\n\\n  /// @notice Thrown when a user tries to modify the rate of a position that has already been completed\\n  error PositionCompleted();\\n\\n  /// @notice Thrown when a user tries to modify a position that has too much swapped balance. This error\\n  /// is thrown so that the user doesn't lose any funds. The error indicates that the user must perform a withdraw\\n  /// before modifying their position\\n  error MandatoryWithdraw();\\n\\n  /// @notice Returns a DCA position\\n  /// @param _dcaId The id of the position\\n  /// @return _position The position itself\\n  function userPosition(uint256 _dcaId) external view returns (UserPosition memory _position);\\n\\n  /// @notice Creates a new position\\n  /// @dev Will revert:\\n  /// With InvalidToken if _tokenAddress is neither token A nor token B\\n  /// With ZeroRate if _rate is zero\\n  /// With ZeroSwaps if _amountOfSwaps is zero\\n  /// With InvalidInterval if _swapInterval is not a valid swap interval\\n  /// @param _tokenAddress The address of the token that will be deposited\\n  /// @param _rate How many \\\"from\\\" tokens need to be traded in each swap\\n  /// @param _amountOfSwaps How many swaps to execute for this position\\n  /// @param _swapInterval How frequently the position's swaps should be executed\\n  /// @return _dcaId The id of the created position\\n  function deposit(\\n    address _tokenAddress,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval\\n  ) external returns (uint256 _dcaId);\\n\\n  /// @notice Withdraws all swapped tokens from a position\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// @param _dcaId The position's id\\n  /// @return _swapped How much was withdrawn\\n  function withdrawSwapped(uint256 _dcaId) external returns (uint256 _swapped);\\n\\n  /// @notice Withdraws all swapped tokens from many positions\\n  /// @dev Will revert:\\n  /// With InvalidPosition if any of the ids in _dcaIds is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to any of the positions in _dcaIds\\n  /// @param _dcaIds The positions' ids\\n  /// @return _swappedTokenA How much was withdrawn in token A\\n  /// @return _swappedTokenB How much was withdrawn in token B\\n  function withdrawSwappedMany(uint256[] calldata _dcaIds) external returns (uint256 _swappedTokenA, uint256 _swappedTokenB);\\n\\n  /// @notice Modifies the rate of a position. Could request more funds or return deposited funds\\n  /// depending on whether the new rate is greater than the previous one.\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With PositionCompleted if position has already been completed\\n  /// With ZeroRate if _newRate is zero\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _newRate The new rate to set\\n  function modifyRate(uint256 _dcaId, uint160 _newRate) external;\\n\\n  /// @notice Modifies the amount of swaps of a position. Could request more funds or return\\n  /// deposited funds depending on whether the new amount of swaps is greater than the swaps left.\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _newSwaps The new amount of swaps\\n  function modifySwaps(uint256 _dcaId, uint32 _newSwaps) external;\\n\\n  /// @notice Modifies both the rate and amount of swaps of a position. Could request more funds or return\\n  /// deposited funds depending on whether the new parameters require more or less than the the unswapped funds.\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With ZeroRate if _newRate is zero\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _newRate The new rate to set\\n  /// @param _newSwaps The new amount of swaps\\n  function modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  /// @notice Takes the unswapped balance, adds the new deposited funds and modifies the position so that\\n  /// it is executed in _newSwaps swaps\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With ZeroAmount if _amount is zero\\n  /// With ZeroSwaps if _newSwaps is zero\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _amount Amounts of funds to add to the position\\n  /// @param _newSwaps The new amount of swaps\\n  function addFundsToPosition(\\n    uint256 _dcaId,\\n    uint256 _amount,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  /// @notice Terminates the position and sends all unswapped and swapped balance to the caller\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// @param _dcaId The position's id\\n  function terminate(uint256 _dcaId) external;\\n}\\n\\n/// @title The interface for all swap related matters in a DCA pair\\n/// @notice These methods allow users to get information about the next swap, and how to execute it\\ninterface IDCAPairSwapHandler {\\n  /// @notice Information about an available swap for a specific swap interval\\n  struct SwapInformation {\\n    // The affected swap interval\\n    uint32 interval;\\n    // The number of the swap that will be performed\\n    uint32 swapToPerform;\\n    // The amount of token A that needs swapping\\n    uint256 amountToSwapTokenA;\\n    // The amount of token B that needs swapping\\n    uint256 amountToSwapTokenB;\\n  }\\n\\n  /// @notice All information about the next swap\\n  struct NextSwapInformation {\\n    // All swaps that can be executed\\n    SwapInformation[] swapsToPerform;\\n    // How many entries of the swapsToPerform array are valid\\n    uint8 amountOfSwaps;\\n    // How much can be borrowed in token A during a flash swap\\n    uint256 availableToBorrowTokenA;\\n    // How much can be borrowed in token B during a flash swap\\n    uint256 availableToBorrowTokenB;\\n    // How much 10**decimals(tokenB) is when converted to token A\\n    uint256 ratePerUnitBToA;\\n    // How much 10**decimals(tokenA) is when converted to token B\\n    uint256 ratePerUnitAToB;\\n    // How much token A will be sent to the platform in terms of fee\\n    uint256 platformFeeTokenA;\\n    // How much token B will be sent to the platform in terms of fee\\n    uint256 platformFeeTokenB;\\n    // The amount of tokens that need to be provided by the swapper\\n    uint256 amountToBeProvidedBySwapper;\\n    // The amount of tokens that will be sent to the swapper optimistically\\n    uint256 amountToRewardSwapperWith;\\n    // The token that needs to be provided by the swapper\\n    IERC20Metadata tokenToBeProvidedBySwapper;\\n    // The token that will be sent to the swapper optimistically\\n    IERC20Metadata tokenToRewardSwapperWith;\\n  }\\n\\n  /// @notice Emitted when a swap is executed\\n  /// @param _sender The address of the user that initiated the swap\\n  /// @param _to The address that received the reward + loan\\n  /// @param _amountBorrowedTokenA How much was borrowed in token A\\n  /// @param _amountBorrowedTokenB How much was borrowed in token B\\n  /// @param _fee How much was charged as a swap fee to position owners\\n  /// @param _nextSwapInformation All information related to the swap\\n  event Swapped(\\n    address indexed _sender,\\n    address indexed _to,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    uint32 _fee,\\n    NextSwapInformation _nextSwapInformation\\n  );\\n\\n  /// @notice Thrown when trying to execute a swap, but none is available\\n  error NoSwapsToExecute();\\n\\n  /// @notice Returns when the next swap will be available for a given swap interval\\n  /// @param _swapInterval The swap interval to check\\n  /// @return _when The moment when the next swap will be available. Take into account that if the swap is already available, this result could\\n  /// be in the past\\n  function nextSwapAvailable(uint32 _swapInterval) external view returns (uint32 _when);\\n\\n  /// @notice Returns the amount of tokens that needed swapping in the last swap, for all positions in the given swap interval that were deposited in the given token\\n  /// @param _swapInterval The swap interval to check\\n  /// @param _from The address of the token that all positions used to deposit\\n  /// @return _amount The amount that needed swapping in the last swap\\n  function swapAmountAccumulator(uint32 _swapInterval, address _from) external view returns (uint256);\\n\\n  /// @notice Returns all information related to the next swap\\n  /// @return _nextSwapInformation The information about the next swap\\n  function getNextSwapInfo() external view returns (NextSwapInformation memory _nextSwapInformation);\\n\\n  /// @notice Executes a swap\\n  /// @dev This method assumes that the required amount has already been sent. Will revert with:\\n  /// Paused if swaps are paused by protocol\\n  /// NoSwapsToExecute if there are no swaps to execute\\n  /// LiquidityNotReturned if the required tokens were not sent before calling the function\\n  function swap() external;\\n\\n  /// @notice Executes a flash swap\\n  /// @dev Will revert with:\\n  /// Paused if swaps are paused by protocol\\n  /// NoSwapsToExecute if there are no swaps to execute\\n  /// InsufficientLiquidity if asked to borrow more than the actual reserves\\n  /// LiquidityNotReturned if the required tokens were not back during the callback\\n  /// @param _amountToBorrowTokenA How much to borrow in token A\\n  /// @param _amountToBorrowTokenB How much to borrow in token B\\n  /// @param _to Address to send the reward + the borrowed tokens\\n  /// @param _data Bytes to send to the caller during the callback. If this parameter is empty, the callback won't be executed\\n  function swap(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n\\n  /// @notice Returns how many seconds left until the next swap is available\\n  /// @return _secondsUntilNextSwap The amount of seconds until next swap. Returns 0 if a swap can already be executed\\n  function secondsUntilNextSwap() external view returns (uint32 _secondsUntilNextSwap);\\n}\\n\\n/// @title The interface for all loan related matters in a DCA pair\\n/// @notice These methods allow users to ask how much is available for loans, and also to execute them\\ninterface IDCAPairLoanHandler {\\n  /// @notice Emitted when a flash loan is executed\\n  /// @param _sender The address of the user that initiated the loan\\n  /// @param _to The address that received the loan\\n  /// @param _amountBorrowedTokenA How much was borrowed in token A\\n  /// @param _amountBorrowedTokenB How much was borrowed in token B\\n  /// @param _loanFee How much was charged as a fee\\n  event Loaned(address indexed _sender, address indexed _to, uint256 _amountBorrowedTokenA, uint256 _amountBorrowedTokenB, uint32 _loanFee);\\n\\n  // @notice Thrown when trying to execute a flash loan but without actually asking for tokens\\n  error ZeroLoan();\\n\\n  /// @notice Returns the amount of tokens that can be asked for during a flash loan\\n  /// @return _amountToBorrowTokenA The amount of token A that is available for borrowing\\n  /// @return _amountToBorrowTokenB The amount of token B that is available for borrowing\\n  function availableToBorrow() external view returns (uint256 _amountToBorrowTokenA, uint256 _amountToBorrowTokenB);\\n\\n  /// @notice Executes a flash loan, sending the required amounts to the specified loan recipient\\n  /// @dev Will revert:\\n  /// With ZeroLoan if both _amountToBorrowTokenA & _amountToBorrowTokenB are 0\\n  /// With Paused if loans are paused by protocol\\n  /// With InsufficientLiquidity if asked for more that reserves\\n  /// @param _amountToBorrowTokenA The amount to borrow in token A\\n  /// @param _amountToBorrowTokenB The amount to borrow in token B\\n  /// @param _to Address that will receive the loan. This address should be a contract that implements IDCAPairLoanCallee\\n  /// @param _data Any data that should be passed through to the callback\\n  function loan(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\ninterface IDCAPair is IDCAPairParameters, IDCAPairSwapHandler, IDCAPairPositionHandler, IDCAPairLoanHandler {}\\n\"\r\n    },\r\n    \"contracts/libraries/CommonErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nlibrary CommonErrors {\\n  error ZeroAddress();\\n  error Paused();\\n  error InsufficientLiquidity();\\n  error LiquidityNotReturned();\\n}\\n\"\r\n    },\r\n    \"contracts/DCAPair/utils/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.6;\\n\\nlibrary Math {\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n      // benefit is lost if 'b' is also tested.\\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITimeWeightedOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\n\\n/// @title The interface for an oracle that provies TWAP quotes\\n/// @notice These methods allow users to add support for pairs, and then ask for quotes\\ninterface ITimeWeightedOracle {\\n  /// @notice Emitted when the oracle add supports for a new pair\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  event AddedSupportForPair(address _tokenA, address _tokenB);\\n\\n  /// @notice Returns whether this oracle can support this pair of tokens\\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  /// @return _canSupport Whether the given pair of tokens can be supported by the oracle\\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool _canSupport);\\n\\n  /// @notice Returns a quote, based on the given tokens and amount\\n  /// @param _tokenIn The token that will be provided\\n  /// @param _amountIn The amount that will be provided\\n  /// @param _tokenOut The token we would like to quote\\n  /// @return _amountOut How much _tokenOut will be returned in exchange for _amountIn amount of _tokenIn\\n  function quote(\\n    address _tokenIn,\\n    uint128 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut);\\n\\n  /// @notice Add support for a given pair to the contract. This function will let the oracle take some actions to\\n  /// configure the pair for future quotes. Could be called more than one in order to let the oracle re-configure for a new context.\\n  /// @dev Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  function addSupportForPair(address _tokenA, address _tokenB) external;\\n}\\n\\n/// @title An implementation of ITimeWeightedOracle that uses Uniswap V3 pool oracles\\n/// @notice This oracle will attempt to use all fee tiers of the same pair when calculating quotes\\ninterface IUniswapV3OracleAggregator is ITimeWeightedOracle {\\n  /// @notice Emitted when a new fee tier is added\\n  /// @return _feeTier The added fee tier\\n  event AddedFeeTier(uint24 _feeTier);\\n\\n  /// @notice Emitted when a new period is set\\n  /// @return _period The new period\\n  event PeriodChanged(uint32 _period);\\n\\n  /// @notice Returns the Uniswap V3 Factory\\n  /// @return _factory The Uniswap V3 Factory\\n  function factory() external view returns (IUniswapV3Factory _factory);\\n\\n  /// @notice Returns a list of all supported Uniswap V3 fee tiers\\n  /// @return _feeTiers An array of all supported fee tiers\\n  function supportedFeeTiers() external view returns (uint24[] memory _feeTiers);\\n\\n  /// @notice Returns a list of all Uniswap V3 pools used for a given pair\\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @return _pools An array with all pools used for quoting the given pair\\n  function poolsUsedForPair(address _tokenA, address _tokenB) external view returns (address[] memory _pools);\\n\\n  /// @notice Returns the period used for the TWAP calculation\\n  /// @return _period The period used for the TWAP\\n  function period() external view returns (uint16 _period);\\n\\n  /// @notice Returns minimum possible period\\n  /// @dev Cannot be modified\\n  /// @return The minimum possible period\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MINIMUM_PERIOD() external view returns (uint16);\\n\\n  /// @notice Returns maximum possible period\\n  /// @dev Cannot be modified\\n  /// @return The maximum possible period\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAXIMUM_PERIOD() external view returns (uint16);\\n\\n  /// @notice Returns the minimum liquidity that a pool needs to have in order to be used for a pair's quote\\n  /// @dev This check is only performed when adding support for a pair. If the pool's liquidity then\\n  /// goes below the threshold, then it will still be used for the quote calculation\\n  /// @return The minimum liquidity threshold\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MINIMUM_LIQUIDITY_THRESHOLD() external view returns (uint16);\\n\\n  /// @notice Adds support for a new Uniswap V3 fee tier\\n  /// @dev Will revert if the provided fee tier is not supported by Uniswap V3\\n  /// @param _feeTier The new fee tier\\n  function addFeeTier(uint24 _feeTier) external;\\n\\n  /// @notice Sets the period to be used for the TWAP calculation\\n  /// @dev Will revert it is lower than MINIMUM_PERIOD or greater than MAXIMUM_PERIOD\\n  /// WARNING: increasing the period could cause big problems, because Uniswap V3 pools might not support a TWAP so old.\\n  /// @param _period The new period\\n  function setPeriod(uint16 _period) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDCATokenDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport './IDCAPair.sol';\\n\\n/// @title The interface for generating a token's description\\n/// @notice Contracts that implement this interface must return a base64 JSON with the entire description\\ninterface IDCATokenDescriptor {\\n  /// @notice Generates a token's description, both the JSON and the image inside\\n  /// @param _positionHandler The pair where the position was created\\n  /// @param _tokenId The token/position id\\n  /// @return _description The position's description\\n  function tokenURI(IDCAPairPositionHandler _positionHandler, uint256 _tokenId) external view returns (string memory _description);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDCAPairSwapCallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\n/// @title The interface for handling flash swaps\\n/// @notice Users that want to execute flash swaps must implement this interface\\ninterface IDCAPairSwapCallee {\\n  /// @notice Handles the flash swap callback\\n  /// @param _sender The swap originator\\n  /// @param _tokenA Address for token A\\n  /// @param _tokenB Address for token B\\n  /// @param _amountBorrowedTokenA Amount borrowed in token A\\n  /// @param _amountBorrowedTokenB Amount borrowed in token B\\n  /// @param _isRewardTokenA Determines which token is the reward and which to provide to the pair\\n  /// @param _rewardAmount How much was sent to this contract optimistically\\n  /// @param _amountToProvide How much needs to be sent back to the pair\\n  /// @param _data Arbitrary bytes sent to the pair when initiating the swap\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DCAPairSwapCall(\\n    address _sender,\\n    IERC20Metadata _tokenA,\\n    IERC20Metadata _tokenB,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    bool _isRewardTokenA,\\n    uint256 _rewardAmount,\\n    uint256 _amountToProvide,\\n    bytes calldata _data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDCAPairLoanCallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\n/// @title The interface for handling flash loans\\n/// @notice Users that want to execute flash loans must implement this interface\\ninterface IDCAPairLoanCallee {\\n  /// @notice Handles the flash loan callback\\n  /// @param _sender The loan originator\\n  /// @param _tokenA Address for token A\\n  /// @param _tokenB Address for token B\\n  /// @param _amountBorrowedTokenA Amount borrowed in token A\\n  /// @param _amountBorrowedTokenB Amount borrowed in token B\\n  /// @param _feeTokenA How much extra to return in fees in token A\\n  /// @param _feeTokenB How much extra to return in fees in token B\\n  /// @param _data Arbitrary bytes sent to the pair when initiating the loan\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DCAPairLoanCall(\\n    address _sender,\\n    IERC20Metadata _tokenA,\\n    IERC20Metadata _tokenB,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    uint256 _feeTokenA,\\n    uint256 _feeTokenB,\\n    bytes calldata _data\\n  ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IDCAGlobalParameters\",\"name\":\"_globalParameters\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityNotReturned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MandatoryWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapsToExecute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroSwaps\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"_rate\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startingSwap\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_swapInterval\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_lastSwap\",\"type\":\"uint32\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountBorrowedTokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountBorrowedTokenB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_loanFee\",\"type\":\"uint32\"}],\"name\":\"Loaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"_rate\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startingSwap\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_lastSwap\",\"type\":\"uint32\"}],\"name\":\"Modified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountBorrowedTokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountBorrowedTokenB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapToPerform\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwapTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwapTokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IDCAPairSwapHandler.SwapInformation[]\",\"name\":\"swapsToPerform\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"amountOfSwaps\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"availableToBorrowTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableToBorrowTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerUnitBToA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerUnitAToB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBeProvidedBySwapper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToRewardSwapperWith\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenToBeProvidedBySwapper\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenToRewardSwapperWith\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDCAPairSwapHandler.NextSwapInformation\",\"name\":\"_nextSwapInformation\",\"type\":\"tuple\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_returnedUnswapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_returnedSwapped\",\"type\":\"uint256\"}],\"name\":\"Terminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_dcaIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swappedTokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swappedTokenB\",\"type\":\"uint256\"}],\"name\":\"WithdrewMany\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_newSwaps\",\"type\":\"uint32\"}],\"name\":\"addFundsToPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToBorrowTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBorrowTokenB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_rate\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"_amountOfSwaps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_swapInterval\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextSwapInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapToPerform\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwapTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwapTokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IDCAPairSwapHandler.SwapInformation[]\",\"name\":\"swapsToPerform\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"amountOfSwaps\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"availableToBorrowTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableToBorrowTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerUnitBToA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerUnitAToB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBeProvidedBySwapper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToRewardSwapperWith\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenToBeProvidedBySwapper\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"tokenToRewardSwapperWith\",\"type\":\"address\"}],\"internalType\":\"struct IDCAPairSwapHandler.NextSwapInformation\",\"name\":\"_nextSwapInformation\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalParameters\",\"outputs\":[{\"internalType\":\"contract IDCAGlobalParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_activeSwapInterval\",\"type\":\"uint32\"}],\"name\":\"isSwapIntervalActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isIntervalActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToBorrowTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBorrowTokenB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_newRate\",\"type\":\"uint160\"}],\"name\":\"modifyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_newRate\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"_newAmountOfSwaps\",\"type\":\"uint32\"}],\"name\":\"modifyRateAndSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_newSwaps\",\"type\":\"uint32\"}],\"name\":\"modifySwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"nextSwapAvailable\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"performedSwaps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsUntilNextSwap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_secondsUntil\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToBorrowTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBorrowTokenB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapAmountAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"swapAmountDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"}],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"}],\"name\":\"userPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"swapInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapsExecuted\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"swapsLeft\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"rate\",\"type\":\"uint160\"}],\"internalType\":\"struct IDCAPairPositionHandler.UserPosition\",\"name\":\"_userPosition\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaId\",\"type\":\"uint256\"}],\"name\":\"withdrawSwapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_dcaIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawSwappedMany\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_swappedTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swappedTokenB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DCAPair", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000dbcca406b622ed1f455abc9560d51aa0c81560f0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}