{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Payspec.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/*\\nPAYSPEC: Atomic and deterministic invoicing system\\n\\nGenerate offchain invoices based on sell-order data and allow users to fulfill those order invoices onchain.\\n\\n*/\\n \\n\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\n \\ncontract Payspec is Ownable, ReentrancyGuard {\\n\\n  uint256 public immutable contractVersion  = 100;\\n  address immutable ETHER_ADDRESS = address(0x0000000000000000000000000000000000000010);\\n  \\n  mapping(bytes32 => Invoice) public invoices; \\n\\n  bool lockedByOwner = false; \\n\\n  event CreatedInvoice(bytes32 uuid, bytes32 metadataHash ); \\n  event PaymentMade(bytes32 uuid,  address token, address from, address to, uint256 amt);\\n  event PaidInvoice(bytes32 uuid, address from, uint256 totalPaidAmt); \\n      \\n\\n  struct Invoice {\\n    bytes32 uuid;\\n\\n   \\n    \\n    \\n\\n    address token;\\n   \\n    uint256 chainId;\\n    \\n    address[] payTo;\\n    uint[] amountsDue;\\n    \\n\\n    bytes32 metadataHash; \\n    uint256 nonce; \\n\\n    address paidBy;\\n\\n\\n    uint256 paidAt; \\n    uint256 expiresAt;\\n\\n  }\\n\\n\\n\\n  constructor(   ) {\\n\\n  } \\n \\n\\n  function lockContract() public onlyOwner {\\n    lockedByOwner = true;\\n  }\\n\\n\\n   \\n\\n\\n  function createAndPayInvoice( address token, address[] memory payTo, uint[] memory amountsDue,   uint256 nonce,   uint256 chainId, bytes32 metadataHash,uint256 expiresAt, bytes32 expecteduuid  ) \\n    public \\n    payable \\n    nonReentrant\\n    returns (bool) {\\n\\n     uint256 totalAmountDue = calculateTotalAmountDue(amountsDue);\\n     \\n     if(token == ETHER_ADDRESS){\\n       require(msg.value == totalAmountDue, \\\"Transaction sent incorrect ETH amount.\\\");\\n     }else{\\n       require(msg.value == 0, \\\"Transaction sent ETH for an ERC20 invoice.\\\");\\n     }\\n     \\n     bytes32 newuuid = _createInvoice(token,payTo,amountsDue, nonce, chainId, metadataHash, expiresAt,expecteduuid);\\n    \\n     return _payInvoice(newuuid);\\n  }\\n\\n   function _createInvoice(  address token, address[] memory payTo, uint[] memory amountsDue, uint256 nonce, uint256 chainId, bytes32 metadataHash,  uint256 expiresAt, bytes32 expecteduuid ) \\n    internal \\n    returns (bytes32 uuid) { \\n\\n\\n      bytes32 newuuid = getInvoiceUUID(token, payTo, amountsDue, nonce,  chainId, metadataHash, expiresAt ) ;\\n\\n      require(!lockedByOwner);\\n      require( newuuid == expecteduuid , \\\"Invalid invoice uuid\\\");\\n      require( invoices[newuuid].uuid == 0 );  //make sure you do not overwrite invoices\\n      require(payTo.length == amountsDue.length, \\\"Invalid number of amounts due\\\");\\n\\n      //require(ethBlockExpiresAt == 0 || block.number < expiresAt);\\n\\n      invoices[newuuid] = Invoice({\\n       uuid:newuuid,\\n       metadataHash:metadataHash,\\n       nonce: nonce,\\n       token: token,\\n\\n       chainId: chainId,\\n\\n       payTo: payTo,\\n       amountsDue: amountsDue,\\n       \\n       paidBy: address(0),\\n        \\n       paidAt: 0,\\n       expiresAt: expiresAt \\n      });\\n\\n\\n       emit CreatedInvoice(newuuid, metadataHash);\\n\\n       return newuuid;\\n   }\\n\\n   function _payInvoice( bytes32 invoiceUUID ) internal returns (bool) {\\n\\n       address from = msg.sender;\\n\\n       require( !lockedByOwner );\\n       require( invoices[invoiceUUID].uuid == invoiceUUID ); //make sure invoice exists\\n       require( invoiceWasPaid(invoiceUUID) == false ); \\n\\n       require( invoices[invoiceUUID].chainId == 0 || invoices[invoiceUUID].chainId == block.chainid, \\\"Invalid chain id\\\");\\n\\n       \\n       require( invoices[invoiceUUID].expiresAt == 0 || block.timestamp < invoices[invoiceUUID].expiresAt);\\n\\n \\n       uint256 totalPaidAmt = 0;\\n\\n       for(uint i=0;i<invoices[invoiceUUID].payTo.length;i++){\\n              uint amtDue = invoices[invoiceUUID].amountsDue[i]; \\n              totalPaidAmt += amtDue;\\n\\n              //transfer each fee to fee recipient\\n              require(  _payTokenAmount(invoices[invoiceUUID].token, from, invoices[invoiceUUID].payTo[i], amtDue ) , \\\"Unable to pay amount due.\\\" );\\n              \\n              emit PaymentMade(invoiceUUID, invoices[invoiceUUID].token, from, invoices[invoiceUUID].payTo[i], amtDue );\\n       } \\n\\n        \\n       invoices[invoiceUUID].paidBy = from;\\n\\n       invoices[invoiceUUID].paidAt = block.timestamp; \\n\\n       emit PaidInvoice(invoiceUUID, from, totalPaidAmt);\\n\\n       return true;\\n\\n\\n   }\\n\\n\\n   function _payTokenAmount(address tokenAddress, address from, address to, uint256 tokenAmount) \\n      internal \\n      returns (bool) {\\n      \\n      if(tokenAddress == ETHER_ADDRESS){\\n        payable(to).transfer( tokenAmount ); \\n      }else{ \\n        IERC20( tokenAddress  ).transferFrom( from ,  to, tokenAmount  );\\n      }\\n      return true;\\n   }\\n\\n  function calculateTotalAmountDue(uint256[] memory amountsDue) internal pure returns (uint256 _totalAmountDue) {\\n      for (uint256 i = 0; i < amountsDue.length; i++) {\\n          _totalAmountDue += amountsDue[i];\\n      } \\n  }\\n\\n\\n\\n   function getInvoiceUUID(    address token,   address[] memory payTo, uint[] memory amountsDue,   uint256 nonce,uint256 chainId, bytes32 metadataHash, uint expiresAt  ) public view returns (bytes32 uuid) {\\n\\n         address payspecContractAddress = address(this); //prevent from paying through the wrong contract\\n\\n         bytes32 newuuid = keccak256( abi.encode(payspecContractAddress, token, payTo, amountsDue,   nonce,  chainId, metadataHash,   expiresAt ) );\\n\\n         return newuuid;\\n    }\\n\\n \\n\\n   function invoiceWasCreated( bytes32 invoiceUUID ) public view returns (bool){\\n\\n       return invoices[invoiceUUID].uuid != bytes32(0) ;\\n   }\\n\\n   function invoiceWasPaid( bytes32 invoiceUUID ) public view returns (bool){\\n\\n       return invoices[invoiceUUID].paidAt > 0 ;\\n   }\\n\\n\\n    function getInvoiceMetadataHash( bytes32 invoiceUUID ) public view returns (bytes32){\\n\\n       return invoices[invoiceUUID].metadataHash;\\n   }\\n\\n   function getInvoiceTokenCurrency( bytes32 invoiceUUID ) public view returns (address){\\n\\n       return invoices[invoiceUUID].token;\\n   }\\n\\n\\n   function getInvoicePayer( bytes32 invoiceUUID ) public view returns (address){\\n\\n       return invoices[invoiceUUID].paidBy;\\n   }\\n\\n   function getInvoicePaidAt( bytes32 invoiceUUID ) public view returns (uint){\\n\\n       return invoices[invoiceUUID].paidAt;\\n   }\\n\\n \\n\\n\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"name\":\"CreatedInvoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPaidAmt\",\"type\":\"uint256\"}],\"name\":\"PaidInvoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"PaymentMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsDue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"expecteduuid\",\"type\":\"bytes32\"}],\"name\":\"createAndPayInvoice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoiceMetadataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoicePaidAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoicePayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"getInvoiceTokenCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsDue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"getInvoiceUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"invoiceWasCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"invoiceUUID\",\"type\":\"bytes32\"}],\"name\":\"invoiceWasPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invoices\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paidBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Payspec", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}