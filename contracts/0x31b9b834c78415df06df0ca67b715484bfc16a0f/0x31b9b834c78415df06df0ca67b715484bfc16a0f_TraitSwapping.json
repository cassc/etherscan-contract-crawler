{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/TraitSwapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//              @@@@@@@@@@        @@@@@@@     @@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@\\n//            @@@@@@@@@@@@       @@@@@@@    .@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@\\n//          @@@@@@@@@@@@@@      @@@@@@@           @@@@@@@        @@@@@@     @@@@@@\\n//         @@@@@@@ @@@@@@@     @@@@@@@           @@@@@@@         @@@@@@@@@@@\\n//       @@@@@@@   @@@@@@@     @@@@@@            @@@@@@           @@@@@@@@@@@@@@\\n//      @@@@@@@@@@@@@@@@@@    @@@@@@@           @@@@@@@               #@@@@@@@@@@\\n//    @@@@@@@@@@@@@@@@@@@@   @@@@@@@           @@@@@@@        @@@@@@@     @@@@@@#\\n//   @@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@ @@@@@@@         @@@@@@@@@@@@@@@@@\\n// @@@@@@@          @@@@@@  @@@@@@@@@@@@@@@@ @@@@@@@            @@@@@@@@@@@@\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IRVM {\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n}\\n\\ninterface IALTS {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\ncontract TraitSwapping is Ownable, Pausable, ReentrancyGuard, IERC1155Receiver {\\n    using SafeERC20 for IERC20;\\n    IERC20 public immutable APE;\\n    IRVM public immutable RVM;\\n    IALTS public immutable ALTS;\\n    IERC20 public immutable WETH;\\n\\n    enum Currency {\\n        ETH,\\n        WETH,\\n        APE,\\n        RVM\\n    }\\n\\n    enum OrderStatus {\\n        UNSET,\\n        PENDING,\\n        ACCEPTED,\\n        CANCELED\\n    }\\n\\n    struct Order {\\n        address buyer;\\n        uint96 amount;\\n        address seller;\\n        uint32 expiresAt;\\n        uint24 id;\\n        uint16 buyerAlt;\\n        uint16 sellerAlt;\\n        OrderStatus status;\\n    }\\n\\n    struct Transfer {\\n        address buyer;\\n        uint16[3] buyerAlts;\\n        uint16[3] sellerAlts;\\n        address seller;\\n        uint72 amount;\\n        uint24 id;\\n    }\\n\\n    struct Exchange {\\n        uint72 rateApe;\\n        uint56 rateEth;\\n        uint56 minFee;\\n        uint56 minOrder;\\n        uint8 rateRvm;\\n        uint8 fee;\\n    }\\n\\n    Exchange public exchange;\\n    address payable public receiver;\\n    address public permittedOperator;\\n    bool public pointsTransfers = false;\\n    uint32 public expiryPeriod;\\n    uint24 public totalOrders = 0;\\n    uint24 public totalTransfers = 0;\\n\\n    mapping(address => uint256) public points;\\n    mapping(uint56 => Order) public orders;\\n    mapping(uint96 => Transfer) private transfers;\\n\\n    event PointsPurchase(\\n        address indexed user,\\n        Currency indexed currency,\\n        uint256 value,\\n        uint256 indexed points,\\n        uint256 currentPointsBalance\\n    );\\n    event TransferPoints(address indexed sender, address indexed receiver, uint256 amount);\\n    event TransferWETH(uint96 indexed id, address indexed buyer, address indexed seller, uint256 amount, uint256 fee);\\n    event OrderCreated(\\n        uint56 indexed orderId,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 amount,\\n        uint32 expiresAt\\n    );\\n    event OrderFulfilled(uint56 indexed orderId);\\n    event OrderCanceled(uint56 indexed orderId, address indexed buyer, address indexed seller, uint256 amount);\\n\\n    constructor(\\n        uint56 _rateEth,\\n        uint72 _rateApe,\\n        uint8 _rateRvm,\\n        uint56 _minFee,\\n        uint56 _minOrder,\\n        uint8 _fee,\\n        uint32 _expiryPeriod,\\n        address _ape,\\n        address _rvm,\\n        address _weth,\\n        address _alts,\\n        address _permittedOperator,\\n        address payable _receiver\\n    ) {\\n        exchange.rateEth = _rateEth;\\n        exchange.rateApe = _rateApe;\\n        exchange.rateRvm = _rateRvm;\\n        exchange.minFee = _minFee;\\n        exchange.minOrder = _minOrder;\\n        exchange.fee = _fee;\\n        expiryPeriod = _expiryPeriod;\\n        APE = IERC20(_ape);\\n        RVM = IRVM(_rvm);\\n        WETH = IERC20(_weth);\\n        ALTS = IALTS(_alts);\\n        permittedOperator = _permittedOperator;\\n        receiver = _receiver;\\n    }\\n\\n    modifier onlyPermittedOperator() {\\n        require(msg.sender == permittedOperator || msg.sender == owner(), \\\"Not a permitted operator\\\");\\n        _;\\n    }\\n\\n    /// @notice Exchanges ETH for swapping points.\\n    function exchangeETH() external payable nonReentrant whenNotPaused {\\n        require(msg.value > 0, \\\"Amount cannot be 0\\\");\\n        require(msg.value % exchange.rateEth == 0, \\\"Invalid ETH amount\\\");\\n        uint256 pointsToReceive = msg.value / exchange.rateEth;\\n        points[msg.sender] += pointsToReceive;\\n        (bool sent, ) = receiver.call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"Failed to send ETH\\\");\\n        emit PointsPurchase(msg.sender, Currency.ETH, msg.value, pointsToReceive, points[msg.sender]);\\n    }\\n\\n    /// @notice Exchanges WETH for swapping points.\\n    /// @param amount The amount of WETH to be exchanged.\\n    function exchangeWETH(uint256 amount) external nonReentrant whenNotPaused {\\n        require(amount > 0, \\\"Amount cannot be 0\\\");\\n        require(amount % exchange.rateEth == 0, \\\"Invalid WETH amount\\\");\\n        uint256 pointsToReceive = amount / exchange.rateEth;\\n        points[msg.sender] += pointsToReceive;\\n        WETH.safeTransferFrom(msg.sender, receiver, amount);\\n        emit PointsPurchase(msg.sender, Currency.WETH, amount, pointsToReceive, points[msg.sender]);\\n    }\\n\\n    /// @notice Exchanges APE coin for swapping points.\\n    /// @param amount The amount of APE to be exchanged.\\n    function exchangeAPE(uint256 amount) external nonReentrant whenNotPaused {\\n        require(amount > 0, \\\"Amount cannot be 0\\\");\\n        require(amount % exchange.rateApe == 0, \\\"Invalid APE amount\\\");\\n        uint256 pointsToReceive = amount / exchange.rateApe;\\n        points[msg.sender] += pointsToReceive;\\n        APE.safeTransferFrom(msg.sender, receiver, amount);\\n        emit PointsPurchase(msg.sender, Currency.APE, amount, pointsToReceive, points[msg.sender]);\\n    }\\n\\n    /// @notice Exchanges RVM coins for points.\\n    /// @param amount The amount of RVM coins to be exchanged.\\n    function exchangeRVM(uint256 amount) external nonReentrant whenNotPaused {\\n        require(amount > 0, \\\"Amount cannot be 0\\\");\\n        require(amount % exchange.rateRvm == 0, \\\"Invalid RVM amount\\\");\\n        uint256 pointsToReceive = amount / exchange.rateRvm;\\n        points[msg.sender] += pointsToReceive;\\n        RVM.burn(msg.sender, 0, amount);\\n        emit PointsPurchase(msg.sender, Currency.RVM, amount, pointsToReceive, points[msg.sender]);\\n    }\\n\\n    /// @notice Enables a user to create a WETH transfer.\\n    /// @param transfer The details of the new WETH transfer.\\n    function executeWETHOrder(Transfer memory transfer) external nonReentrant whenNotPaused {\\n        require(transfer.buyer == msg.sender, \\\"Buyer must create own order\\\");\\n        require(transfer.amount >= exchange.minOrder, \\\"Transfer amount is below minimum\\\");\\n        require(validateAltsOwnership(transfer.buyerAlts, msg.sender), \\\"Buyer: no valid ALT ID\\\");\\n        require(validateAltsOwnership(transfer.sellerAlts, transfer.seller), \\\"Seller: no valid ALT ID\\\");\\n\\n        unchecked {\\n            uint256 minFee = exchange.minFee;\\n            uint256 calculatedFee = (transfer.amount * exchange.fee) / 100;\\n            uint256 feeAmount = calculatedFee < minFee ? minFee : calculatedFee;\\n\\n            totalTransfers++;\\n            transfer.id = totalTransfers;\\n            transfers[transfer.id] = transfer;\\n\\n            address buyer = transfer.buyer;\\n            WETH.safeTransferFrom(buyer, receiver, feeAmount);\\n            WETH.safeTransferFrom(buyer, transfer.seller, transfer.amount);\\n\\n            emit TransferWETH(transfer.id, transfer.buyer, transfer.seller, transfer.amount, feeAmount);\\n        }\\n    }\\n\\n    /// @notice Enables a user to create a new WETH offer.\\n    /// @param order The details of the new WETH offer.\\n    function createOrder(Order memory order) external nonReentrant whenNotPaused {\\n        require(order.buyer == msg.sender, \\\"Buyer must create their own order\\\");\\n        require(order.buyerAlt >= 1 && order.buyerAlt <= 30000, \\\"Invalid buyer ALT ID\\\");\\n        require(order.sellerAlt >= 1 && order.sellerAlt <= 30000, \\\"Invalid seller ALT ID\\\");\\n        require(order.amount >= exchange.minOrder, \\\"Order amount is below minimum\\\");\\n\\n        require(ALTS.ownerOf(order.buyerAlt) == msg.sender, \\\"Buyer does not own the specified ALT\\\");\\n        require(ALTS.ownerOf(order.sellerAlt) == order.seller, \\\"Seller does not own the specified ALT\\\");\\n\\n        // No overflow in unchecked block as order.amount is uint96 and exchange.fee is max 100\\n        unchecked {\\n            uint256 minFee = exchange.minFee;\\n            uint256 calculatedFee = (order.amount * exchange.fee) / 100;\\n            uint256 feeAmount = calculatedFee < minFee ? minFee : calculatedFee;\\n\\n            require(\\n                WETH.allowance(msg.sender, address(this)) >= order.amount + feeAmount,\\n                \\\"Insufficient WETH allowance\\\"\\n            );\\n\\n            totalOrders++;\\n        }\\n\\n        order.id = totalOrders;\\n        order.status = OrderStatus.PENDING;\\n        order.expiresAt = uint32(block.timestamp + expiryPeriod);\\n        orders[order.id] = order;\\n\\n        emit OrderCreated(order.id, order.buyer, order.seller, order.amount, order.expiresAt);\\n    }\\n\\n    /// @notice Enables a user to cancel a WETH offer.\\n    /// @param id The ID of the WETH offer to be canceled.\\n    function cancelOrder(uint56 id) external nonReentrant whenNotPaused {\\n        Order storage order = orders[id];\\n        OrderStatus status = order.status;\\n\\n        require(status != OrderStatus.UNSET, \\\"Order does not exist\\\");\\n        require(status == OrderStatus.PENDING, \\\"Order is not pending\\\");\\n\\n        address buyer = order.buyer;\\n\\n        require(\\n            buyer == msg.sender || permittedOperator == msg.sender || owner() == msg.sender,\\n            \\\"Not the buyer of this order\\\"\\n        );\\n\\n        order.status = OrderStatus.CANCELED;\\n\\n        emit OrderCanceled(id, buyer, order.seller, order.amount);\\n    }\\n\\n    /// @notice Fulfills a specific WETH offer.\\n    /// @param id The ID of the WETH offer to be fulfilled.\\n    function fulfillOrder(uint56 id) external onlyPermittedOperator {\\n        Order storage order = orders[id];\\n        require(order.status == OrderStatus.PENDING, \\\"Order not eligible for fulfillment\\\");\\n\\n        if (block.timestamp > order.expiresAt) {\\n            revert(\\\"Expired\\\");\\n        }\\n\\n        unchecked {\\n            uint256 orderAmount = order.amount;\\n            uint256 feeAmount = (orderAmount * exchange.fee) / 100;\\n\\n            if (feeAmount < exchange.minFee) {\\n                feeAmount = exchange.minFee;\\n            }\\n            // WETH calls in unchecked block scope vs separate declarations\\n            address buyer = order.buyer;\\n            WETH.safeTransferFrom(buyer, receiver, feeAmount);\\n            WETH.safeTransferFrom(buyer, order.seller, orderAmount);\\n        }\\n\\n        order.status = OrderStatus.ACCEPTED;\\n        emit OrderFulfilled(id);\\n    }\\n\\n    /// @notice Enables a user to send their points to another user.\\n    /// @param to The address to receive the points.\\n    /// @param amount The amount of points to send.\\n    function transferPoints(address to, uint256 amount) external nonReentrant whenNotPaused {\\n        require(pointsTransfers, \\\"Transfers of points are disabled\\\");\\n        require(to != address(0), \\\"Cannot send to zero address\\\");\\n        require(points[msg.sender] >= amount, \\\"Insufficient points balance\\\");\\n\\n        points[msg.sender] -= amount;\\n        points[to] += amount;\\n\\n        emit TransferPoints(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Overwrite the current points balance for the given users.\\n    /// @param users The list of user addresses.\\n    /// @param balances The corresponding list of point balances for each user.\\n    function setPoints(address[] calldata users, uint256[] calldata balances) external onlyPermittedOperator {\\n        require(users.length == balances.length, \\\"Mismatched arrays\\\");\\n        unchecked {\\n            for (uint256 i = 0; i < users.length; i++) {\\n                points[users[i]] = balances[i];\\n            }\\n        }\\n    }\\n\\n    /// @notice Increments or decrements the current points balance for the given users by the given amount(s).\\n    /// @param users The list of user addresses whose points should be incremented or decremented.\\n    /// @param adjustments The corresponding list of point adjustments (positive for increments, negative for decrements) for each user.\\n    function adjustPoints(address[] calldata users, int256[] calldata adjustments) external onlyPermittedOperator {\\n        require(users.length == adjustments.length, \\\"Mismatched arrays\\\");\\n        unchecked {\\n            for (uint256 i = 0; i < users.length; i++) {\\n                if (adjustments[i] > 0) {\\n                    points[users[i]] += uint256(adjustments[i]);\\n                } else {\\n                    require(points[users[i]] >= uint256(-adjustments[i]), \\\"Cannot decrease below zero\\\");\\n                    points[users[i]] -= uint256(-adjustments[i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets the wallet to receive exchange payments.\\n    /// @param _receiver The new address of the receiver.\\n    function setReceiver(address payable _receiver) external onlyOwner {\\n        receiver = _receiver;\\n    }\\n\\n    /// @notice Sets the period from order creation block timestamp after which orders should expire.\\n    /// @param period The new expiry period in seconds (e.g. 14 days is 1209600).\\n    function setExpiryPeriod(uint32 period) external onlyOwner {\\n        expiryPeriod = period;\\n    }\\n\\n    /// @notice Sets WETH fee and exchange rates for the supported currencies and tokens.\\n    /// @param eth The exchange rate for ETH.\\n    /// @param ape The exchange rate for APE coin.\\n    /// @param rvm The exchange rate for RVM coin.\\n    /// @param fee The fee applied to WETH offers.\\n    function setExchange(\\n        uint56 eth,\\n        uint72 ape,\\n        uint8 rvm,\\n        uint8 fee,\\n        uint56 minFee,\\n        uint56 minOrder\\n    ) external onlyOwner {\\n        exchange.rateApe = ape;\\n        exchange.rateEth = eth;\\n        exchange.minFee = fee;\\n        exchange.minOrder = minOrder;\\n        exchange.rateRvm = rvm;\\n        exchange.fee = fee;\\n    }\\n\\n    /// @notice Sets the permitted operator address.\\n    /// @param _operator The address of the operator.\\n    function setPermittedOperator(address _operator) external onlyOwner {\\n        require(_operator != address(0), \\\"Operator address cannot be null\\\");\\n        permittedOperator = _operator;\\n    }\\n\\n    /// @notice Removes permissions from the permitted operator.\\n    function removePermittedOperator() external onlyOwner {\\n        permittedOperator = address(0);\\n    }\\n\\n    /// @notice Fetches allowances for the user for all supported tokens.\\n    /// @param user The address of the user.\\n    function getAllowances(address user) external view returns (uint256[] memory) {\\n        uint256[] memory allowances = new uint256[](3);\\n        allowances[0] = WETH.allowance(user, address(this));\\n        allowances[1] = APE.allowance(user, address(this));\\n        allowances[2] = RVM.isApprovedForAll(user, address(this)) ? 1 : 0;\\n        return allowances;\\n    }\\n\\n    /// @notice Fetches orders including a specific wallet address between the given range.\\n    /// @param user The address of the user.\\n    /// @param start The starting ID of the order range.\\n    /// @param end The ending ID of the order range.\\n    /// @param isSeller Whether to fetch orders where the user is the buyer (WETH sender) or the seller (WETH receiver).\\n    function getOrdersByUser(\\n        address user,\\n        uint56 start,\\n        uint56 end,\\n        bool isSeller\\n    ) external view returns (uint56[] memory) {\\n        require(start <= end, \\\"Invalid range\\\");\\n\\n        uint56[] memory orderRange = new uint56[](end - start + 1);\\n        uint256 count = 0;\\n\\n        unchecked {\\n            for (uint56 i = start; i <= end; i++) {\\n                bool isUserOrder = (isSeller && orders[i].seller == user) || (!isSeller && orders[i].buyer == user);\\n                if (isUserOrder && orders[i].status != OrderStatus.UNSET) {\\n                    orderRange[count++] = i;\\n                }\\n            }\\n        }\\n\\n        uint56[] memory result = new uint56[](count);\\n        unchecked {\\n            for (uint256 j = 0; j < count; j++) {\\n                result[j] = orderRange[j];\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Gets informatiom about a WETH transfer\\n    /// @param transferId The ID of the transfer to get data for\\n    /// @dev Alternative to public transfers mapping to facilitate uint16[3] display\\n    function getTransfer(\\n        uint96 transferId\\n    ) public view returns (address, uint16[3] memory, uint16[3] memory, address, uint96, uint256) {\\n        Transfer storage t = transfers[transferId];\\n        return (t.buyer, t.buyerAlts, t.sellerAlts, t.seller, t.id, t.amount);\\n    }\\n\\n    /// @notice Drains any Ether from the contract to the owner.\\n    /// @dev This is an emergency function for funds release.\\n    function drainETH() external onlyOwner {\\n        owner().call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    /// @notice Drains any WETH from the contract to the owner.\\n    /// @dev This is an emergency function for funds release.\\n    function drainWETH() external onlyOwner {\\n        WETH.transfer(owner(), WETH.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Drains any APE tokens from the contract to the owner.\\n    /// @dev This is an emergency function for funds release.\\n    function drainAPE() external onlyOwner {\\n        APE.transfer(owner(), APE.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Enables peer-to-peer points transfer.\\n    function enableTransfers() external onlyOwner {\\n        pointsTransfers = true;\\n    }\\n\\n    /// @notice Disables peer-to-peer points transfer.\\n    function disableTransfers() external onlyOwner {\\n        pointsTransfers = false;\\n    }\\n\\n    /// @notice Pauses exchanges and points issuance.\\n    function pause() external onlyPermittedOperator {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses exchanges and points issuance.\\n    function unpause() external onlyPermittedOperator {\\n        _unpause();\\n    }\\n\\n    /// @dev Issues swapping points for RVM coins send to the contract.\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(address(RVM) == msg.sender, \\\"Only RVM tokens accepted\\\");\\n        require(id == 0, \\\"Only RVM tokenId 0 accepted\\\");\\n\\n        uint256 pointsToReceive = value / exchange.rateRvm;\\n        points[from] += pointsToReceive;\\n\\n        emit PointsPurchase(from, Currency.RVM, value, pointsToReceive, points[from]);\\n\\n        RVM.burn(address(this), id, value);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @dev Declines batch transfers of ERC1155 tokens to the contract.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        revert(\\\"Not supported\\\");\\n    }\\n\\n    /// @dev Supports IERC1155Receiver\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n\\n    /// @notice Check a wallet owns the given ALTs\\n    /// @param tokenIds The ALT tokenIds to check\\n    /// @param owner The expected owner wallet address\\n    function validateAltsOwnership(uint16[3] memory tokenIds, address owner) internal view returns (bool) {\\n        bool validAlt = false;\\n        for (uint i = 0; i < 3; i++) {\\n            if (tokenIds[i] != 0) {\\n                validAlt = true;\\n                require(ALTS.ownerOf(tokenIds[i]) == owner, \\\"ALT ownership mismatch\\\");\\n            }\\n        }\\n        return validAlt;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint56\",\"name\":\"_rateEth\",\"type\":\"uint56\"},{\"internalType\":\"uint72\",\"name\":\"_rateApe\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"_rateRvm\",\"type\":\"uint8\"},{\"internalType\":\"uint56\",\"name\":\"_minFee\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"_minOrder\",\"type\":\"uint56\"},{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_expiryPeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_ape\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rvm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alts\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permittedOperator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint56\",\"name\":\"orderId\",\"type\":\"uint56\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint56\",\"name\":\"orderId\",\"type\":\"uint56\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint56\",\"name\":\"orderId\",\"type\":\"uint56\"}],\"name\":\"OrderFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum TraitSwapping.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPointsBalance\",\"type\":\"uint256\"}],\"name\":\"PointsPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"id\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALTS\",\"outputs\":[{\"internalType\":\"contract IALTS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RVM\",\"outputs\":[{\"internalType\":\"contract IRVM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"adjustments\",\"type\":\"int256[]\"}],\"name\":\"adjustPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint56\",\"name\":\"id\",\"type\":\"uint56\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"id\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"buyerAlt\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellerAlt\",\"type\":\"uint16\"},{\"internalType\":\"enum TraitSwapping.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraitSwapping.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainAPE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"rateApe\",\"type\":\"uint72\"},{\"internalType\":\"uint56\",\"name\":\"rateEth\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"minFee\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"minOrder\",\"type\":\"uint56\"},{\"internalType\":\"uint8\",\"name\":\"rateRvm\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchangeAPE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchangeRVM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchangeWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint16[3]\",\"name\":\"buyerAlts\",\"type\":\"uint16[3]\"},{\"internalType\":\"uint16[3]\",\"name\":\"sellerAlts\",\"type\":\"uint16[3]\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint24\",\"name\":\"id\",\"type\":\"uint24\"}],\"internalType\":\"struct TraitSwapping.Transfer\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"name\":\"executeWETHOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiryPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint56\",\"name\":\"id\",\"type\":\"uint56\"}],\"name\":\"fulfillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"start\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"end\",\"type\":\"uint56\"},{\"internalType\":\"bool\",\"name\":\"isSeller\",\"type\":\"bool\"}],\"name\":\"getOrdersByUser\",\"outputs\":[{\"internalType\":\"uint56[]\",\"name\":\"\",\"type\":\"uint56[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"transferId\",\"type\":\"uint96\"}],\"name\":\"getTransfer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16[3]\",\"name\":\"\",\"type\":\"uint16[3]\"},{\"internalType\":\"uint16[3]\",\"name\":\"\",\"type\":\"uint16[3]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint56\",\"name\":\"\",\"type\":\"uint56\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"id\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"buyerAlt\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellerAlt\",\"type\":\"uint16\"},{\"internalType\":\"enum TraitSwapping.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permittedOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"points\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointsTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePermittedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint56\",\"name\":\"eth\",\"type\":\"uint56\"},{\"internalType\":\"uint72\",\"name\":\"ape\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"rvm\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint56\",\"name\":\"minFee\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"minOrder\",\"type\":\"uint56\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"setExpiryPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setPermittedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"setPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOrders\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransfers\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TraitSwapping", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000354a6ba7a18000000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000001275000000000000000000000000004d224452801aced8b2f0aebe155379bb5d594381000000000000000000000000bf42c1972877f39e102807e5e80ed2ff5d16aa5f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000749f5ddf5ab4c1f26f74560a78300563c34b417d0000000000000000000000002a06d1a2939a3dd67baf883062563a4ff1d10239000000000000000000000000734dabe2171dfa9689e94675cc279aa0d3ce7033", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}